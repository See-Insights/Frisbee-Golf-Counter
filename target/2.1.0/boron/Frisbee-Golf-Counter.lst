
/Users/chipmc/Documents/Maker/Particle/Projects/Frisbee-Golf-Counter/target/2.1.0/boron/Frisbee-Golf-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009010  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dd030  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000124  2003e1e8  000dd834  0001e1e8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004e8  2003e310  2003e310  0002e310  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dd958  000dd958  0002d958  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dd984  000dd984  0002d984  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e7a2c  00000000  00000000  0002d988  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001f416  00000000  00000000  002153b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003aed7  00000000  00000000  002347ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003560  00000000  00000000  0026f6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a088  00000000  00000000  00272c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040d80  00000000  00000000  0027cc89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004fa59  00000000  00000000  002bda09  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011831c  00000000  00000000  0030d462  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000096c0  00000000  00000000  00425780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 ff6f 	bl	dbf14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 ff91 	bl	dbf64 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1e8 	.word	0x2003e1e8
   d404c:	000dd834 	.word	0x000dd834
   d4050:	2003e30c 	.word	0x2003e30c
   d4054:	2003e310 	.word	0x2003e310
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 f909 	bl	db278 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dcffc 	.word	0x000dcffc
   d4080:	000dd02c 	.word	0x000dd02c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b878 	b.w	d5178 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fd0f 	bl	d5aac <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 b8b3 	b.w	db1fc <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b899 	b.w	d81cc <malloc>

000d409a <_Znaj>:
   d409a:	f004 b897 	b.w	d81cc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b89d 	b.w	d81dc <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 ff12 	bl	d7ed4 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7ba5 	.word	0x000d7ba5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z18outOfMemoryHandleryi+0x8>)
   d40d6:	601a      	str	r2, [r3, #0]
}
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003e220 	.word	0x2003e220

000d40e0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e0:	6803      	ldr	r3, [r0, #0]
   d40e2:	4718      	bx	r3

000d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40e4:	2a01      	cmp	r2, #1
   d40e6:	d003      	beq.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40e8:	2a02      	cmp	r2, #2
   d40ea:	d003      	beq.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40ec:	2000      	movs	r0, #0
   d40ee:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f0:	6001      	str	r1, [r0, #0]
	      break;
   d40f2:	e7fb      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40f4:	680b      	ldr	r3, [r1, #0]
   d40f6:	6003      	str	r3, [r0, #0]
	}
   d40f8:	e7f8      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40fa <_Z19countSignalTimerISRv>:
  hourlyAtomic.fetch_add(1, std::memory_order_relaxed);
  dailyAtomic.fetch_add(1, std::memory_order_relaxed);
}

void countSignalTimerISR() {
  digitalWrite(blueLED,LOW);
   d40fa:	2100      	movs	r1, #0
   d40fc:	2007      	movs	r0, #7
   d40fe:	f007 b954 	b.w	db3aa <digitalWrite>
	...

000d4104 <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d4104:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d4106:	4b05      	ldr	r3, [pc, #20]	; (d411c <_Z21batteryContextMessagev+0x18>)
   d4108:	7b1a      	ldrb	r2, [r3, #12]
   d410a:	4b05      	ldr	r3, [pc, #20]	; (d4120 <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d410c:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d410e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d4112:	f006 fb9a 	bl	da84a <_ZN6StringC1EPKc>
}
   d4116:	4620      	mov	r0, r4
   d4118:	bd10      	pop	{r4, pc}
   d411a:	bf00      	nop
   d411c:	2003e4bc 	.word	0x2003e4bc
   d4120:	2003e1e8 	.word	0x2003e1e8

000d4124 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4124:	b538      	push	{r3, r4, r5, lr}
   d4126:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4128:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d412a:	b128      	cbz	r0, d4138 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d412c:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d412e:	210c      	movs	r1, #12
   d4130:	f007 fa03 	bl	db53a <_ZdlPvj>
            wakeupSource = next;
   d4134:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4136:	e7f8      	b.n	d412a <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4138:	4620      	mov	r0, r4
   d413a:	bd38      	pop	{r3, r4, r5, pc}

000d413c <_Z9sensorISRv>:
  sensorDetect = true;                                              // sets the sensor flag for the main loop
   d413c:	4b09      	ldr	r3, [pc, #36]	; (d4164 <_Z9sensorISRv+0x28>)
   d413e:	2201      	movs	r2, #1
   d4140:	701a      	strb	r2, [r3, #0]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }
   d4142:	4b09      	ldr	r3, [pc, #36]	; (d4168 <_Z9sensorISRv+0x2c>)
   d4144:	e853 2f00 	ldrex	r2, [r3]
   d4148:	3201      	adds	r2, #1
   d414a:	e843 2100 	strex	r1, r2, [r3]
   d414e:	2900      	cmp	r1, #0
   d4150:	d1f8      	bne.n	d4144 <_Z9sensorISRv+0x8>
   d4152:	4b06      	ldr	r3, [pc, #24]	; (d416c <_Z9sensorISRv+0x30>)
   d4154:	e853 2f00 	ldrex	r2, [r3]
   d4158:	3201      	adds	r2, #1
   d415a:	e843 2100 	strex	r1, r2, [r3]
   d415e:	2900      	cmp	r1, #0
   d4160:	d1f8      	bne.n	d4154 <_Z9sensorISRv+0x18>
}
   d4162:	4770      	bx	lr
   d4164:	2003e4b0 	.word	0x2003e4b0
   d4168:	2003e434 	.word	0x2003e434
   d416c:	2003e414 	.word	0x2003e414

000d4170 <_Z7sendNow6String>:
{
   d4170:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4172:	4904      	ldr	r1, [pc, #16]	; (d4184 <_Z7sendNow6String+0x14>)
   d4174:	f006 fbbf 	bl	da8f6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4178:	b118      	cbz	r0, d4182 <_Z7sendNow6String+0x12>
    state = REPORTING_STATE;
   d417a:	4b03      	ldr	r3, [pc, #12]	; (d4188 <_Z7sendNow6String+0x18>)
   d417c:	2206      	movs	r2, #6
   d417e:	701a      	strb	r2, [r3, #0]
    return 1;
   d4180:	2001      	movs	r0, #1
}
   d4182:	bd08      	pop	{r3, pc}
   d4184:	000dc22c 	.word	0x000dc22c
   d4188:	2003e4b1 	.word	0x2003e4b1

000d418c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d418c:	6943      	ldr	r3, [r0, #20]
   d418e:	b113      	cbz	r3, d4196 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4190:	6983      	ldr	r3, [r0, #24]
   d4192:	300c      	adds	r0, #12
   d4194:	4718      	bx	r3
            callback();
        }
    }
   d4196:	4770      	bx	lr

000d4198 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4198:	b510      	push	{r4, lr}
   d419a:	4b03      	ldr	r3, [pc, #12]	; (d41a8 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d419c:	6003      	str	r3, [r0, #0]
   d419e:	4604      	mov	r4, r0
   d41a0:	f003 fa0a 	bl	d75b8 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41a4:	4620      	mov	r0, r4
   d41a6:	bd10      	pop	{r4, pc}
   d41a8:	000dc798 	.word	0x000dc798

000d41ac <_ZN17PublishQueueAsyncD0Ev>:
   d41ac:	b510      	push	{r4, lr}
   d41ae:	4604      	mov	r4, r0
   d41b0:	f7ff fff2 	bl	d4198 <_ZN17PublishQueueAsyncD1Ev>
   d41b4:	4620      	mov	r0, r4
   d41b6:	2138      	movs	r1, #56	; 0x38
   d41b8:	f007 f9bf 	bl	db53a <_ZdlPvj>
   d41bc:	4620      	mov	r0, r4
   d41be:	bd10      	pop	{r4, pc}

000d41c0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d41c0:	b510      	push	{r4, lr}
   d41c2:	4b03      	ldr	r3, [pc, #12]	; (d41d0 <_ZN8MB85RC64D1Ev+0x10>)
   d41c4:	6003      	str	r3, [r0, #0]
   d41c6:	4604      	mov	r4, r0
   d41c8:	f002 ff02 	bl	d6fd0 <_ZN6MB85RCD1Ev>
   d41cc:	4620      	mov	r0, r4
   d41ce:	bd10      	pop	{r4, pc}
   d41d0:	000dc77c 	.word	0x000dc77c

000d41d4 <_ZN8MB85RC64D0Ev>:
   d41d4:	b510      	push	{r4, lr}
   d41d6:	4604      	mov	r4, r0
   d41d8:	f7ff fff2 	bl	d41c0 <_ZN8MB85RC64D1Ev>
   d41dc:	4620      	mov	r0, r4
   d41de:	2110      	movs	r1, #16
   d41e0:	f007 f9ab 	bl	db53a <_ZdlPvj>
   d41e4:	4620      	mov	r0, r4
   d41e6:	bd10      	pop	{r4, pc}

000d41e8 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41e8:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41ea:	2100      	movs	r1, #0
   d41ec:	4604      	mov	r4, r0
   d41ee:	4608      	mov	r0, r1
   d41f0:	f003 fc40 	bl	d7a74 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41f4:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41f6:	4620      	mov	r0, r4
   d41f8:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41fa:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41fc:	f003 fc52 	bl	d7aa4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4200:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4202:	b10c      	cbz	r4, d4208 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4204:	2301      	movs	r3, #1
   d4206:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4208:	2100      	movs	r1, #0
   d420a:	2001      	movs	r0, #1
   d420c:	f003 fc32 	bl	d7a74 <os_thread_scheduling>
            }
        }
        if (t) {
   d4210:	b12c      	cbz	r4, d421e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4212:	6823      	ldr	r3, [r4, #0]
   d4214:	4620      	mov	r0, r4
   d4216:	689b      	ldr	r3, [r3, #8]
   d4218:	4798      	blx	r3
            t->running = false;
   d421a:	2300      	movs	r3, #0
   d421c:	7123      	strb	r3, [r4, #4]
        }
    }
   d421e:	b002      	add	sp, #8
   d4220:	bd10      	pop	{r4, pc}
	...

000d4224 <_Z11resetCounts6String>:
{
   d4224:	b508      	push	{r3, lr}
   d4226:	490a      	ldr	r1, [pc, #40]	; (d4250 <_Z11resetCounts6String+0x2c>)
   d4228:	f006 fb65 	bl	da8f6 <_ZNK6String6equalsEPKc>
   d422c:	2300      	movs	r3, #0
  if (command == "1")
   d422e:	b168      	cbz	r0, d424c <_Z11resetCounts6String+0x28>
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d4230:	4a08      	ldr	r2, [pc, #32]	; (d4254 <_Z11resetCounts6String+0x30>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d4232:	4909      	ldr	r1, [pc, #36]	; (d4258 <_Z11resetCounts6String+0x34>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d4234:	6013      	str	r3, [r2, #0]
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d4236:	6093      	str	r3, [r2, #8]
    current.alertCount = 0;                                           // Reset count variables
   d4238:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d423a:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d423c:	4a07      	ldr	r2, [pc, #28]	; (d425c <_Z11resetCounts6String+0x38>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d423e:	610b      	str	r3, [r1, #16]
    dataInFlight = false;
   d4240:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d4242:	4b07      	ldr	r3, [pc, #28]	; (d4260 <_Z11resetCounts6String+0x3c>)
   d4244:	2001      	movs	r0, #1
   d4246:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d4248:	4b06      	ldr	r3, [pc, #24]	; (d4264 <_Z11resetCounts6String+0x40>)
   d424a:	7018      	strb	r0, [r3, #0]
}
   d424c:	bd08      	pop	{r3, pc}
   d424e:	bf00      	nop
   d4250:	000dc22c 	.word	0x000dc22c
   d4254:	2003e3e4 	.word	0x2003e3e4
   d4258:	2003e4bc 	.word	0x2003e4bc
   d425c:	2003e418 	.word	0x2003e418
   d4260:	2003e408 	.word	0x2003e408
   d4264:	2003e4e8 	.word	0x2003e4e8

000d4268 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4268:	b510      	push	{r4, lr}
   d426a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d426c:	6800      	ldr	r0, [r0, #0]
   d426e:	b118      	cbz	r0, d4278 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4270:	f003 ffb4 	bl	d81dc <free>
            wakeupSource_ = nullptr;
   d4274:	2300      	movs	r3, #0
   d4276:	6023      	str	r3, [r4, #0]
        }
    }
   d4278:	bd10      	pop	{r4, pc}

000d427a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d427a:	b510      	push	{r4, lr}
   d427c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d427e:	f7ff fff3 	bl	d4268 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4282:	4620      	mov	r0, r4
   d4284:	bd10      	pop	{r4, pc}

000d4286 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4286:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4288:	2000      	movs	r0, #0
   d428a:	f003 ff17 	bl	d80bc <spark_sync_time_pending>
   d428e:	b128      	cbz	r0, d429c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4290:	f003 feec 	bl	d806c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4294:	f080 0001 	eor.w	r0, r0, #1
   d4298:	b2c0      	uxtb	r0, r0
    }
   d429a:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d429c:	2001      	movs	r0, #1
   d429e:	e7fc      	b.n	d429a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d42a0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d42a0:	2300      	movs	r3, #0
   d42a2:	2204      	movs	r2, #4
   d42a4:	f003 bec2 	b.w	d802c <spark_variable>

000d42a8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d42a8:	b530      	push	{r4, r5, lr}
   d42aa:	b085      	sub	sp, #20
   d42ac:	4603      	mov	r3, r0
   d42ae:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d42b0:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d42b2:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d42b4:	4798      	blx	r3
        size = str.length();
   d42b6:	9802      	ldr	r0, [sp, #8]
   d42b8:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d42ba:	f003 ff87 	bl	d81cc <malloc>
   d42be:	6028      	str	r0, [r5, #0]
        if (!data) {
   d42c0:	b150      	cbz	r0, d42d8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d42c2:	6822      	ldr	r2, [r4, #0]
   d42c4:	9900      	ldr	r1, [sp, #0]
   d42c6:	f007 fe25 	bl	dbf14 <memcpy>
        return 0;
   d42ca:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d42cc:	4668      	mov	r0, sp
   d42ce:	f006 fa71 	bl	da7b4 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d42d2:	4620      	mov	r0, r4
   d42d4:	b005      	add	sp, #20
   d42d6:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d42d8:	4c00      	ldr	r4, [pc, #0]	; (d42dc <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d42da:	e7f7      	b.n	d42cc <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d42dc:	fffffefc 	.word	0xfffffefc

000d42e0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42e0:	4b0a      	ldr	r3, [pc, #40]	; (d430c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d42e2:	b510      	push	{r4, lr}
   d42e4:	4604      	mov	r4, r0
   d42e6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d42e8:	f005 f9ec 	bl	d96c4 <_ZN5spark10LogManager8instanceEv>
   d42ec:	4621      	mov	r1, r4
   d42ee:	f005 fbee 	bl	d9ace <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d42f2:	f006 ff37 	bl	db164 <_Z16_fetch_usbserialv>
   d42f6:	f006 ff29 	bl	db14c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d42fa:	4620      	mov	r0, r4
   d42fc:	4b04      	ldr	r3, [pc, #16]	; (d4310 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d42fe:	f840 3b04 	str.w	r3, [r0], #4
   d4302:	f005 fad1 	bl	d98a8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4306:	4620      	mov	r0, r4
   d4308:	bd10      	pop	{r4, pc}
   d430a:	bf00      	nop
   d430c:	000dc764 	.word	0x000dc764
   d4310:	000dc74c 	.word	0x000dc74c

000d4314 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4314:	b510      	push	{r4, lr}
   d4316:	4604      	mov	r4, r0
    }
   d4318:	f7ff ffe2 	bl	d42e0 <_ZN5spark16SerialLogHandlerD1Ev>
   d431c:	4620      	mov	r0, r4
   d431e:	2124      	movs	r1, #36	; 0x24
   d4320:	f007 f90b 	bl	db53a <_ZdlPvj>
   d4324:	4620      	mov	r0, r4
   d4326:	bd10      	pop	{r4, pc}

000d4328 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4328:	2300      	movs	r3, #0
   d432a:	6840      	ldr	r0, [r0, #4]
   d432c:	461a      	mov	r2, r3
   d432e:	4619      	mov	r1, r3
   d4330:	f003 bf14 	b.w	d815c <network_off>

000d4334 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4334:	b510      	push	{r4, lr}
      if (_M_manager)
   d4336:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4338:	4604      	mov	r4, r0
      if (_M_manager)
   d433a:	b113      	cbz	r3, d4342 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d433c:	2203      	movs	r2, #3
   d433e:	4601      	mov	r1, r0
   d4340:	4798      	blx	r3
    }
   d4342:	4620      	mov	r0, r4
   d4344:	bd10      	pop	{r4, pc}
	...

000d4348 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4348:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d434a:	4b13      	ldr	r3, [pc, #76]	; (d4398 <_ZN5TimerD1Ev+0x50>)
   d434c:	6003      	str	r3, [r0, #0]
   d434e:	4604      	mov	r4, r0
        if (handle) {
   d4350:	6880      	ldr	r0, [r0, #8]
   d4352:	b1c8      	cbz	r0, d4388 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4354:	2500      	movs	r5, #0
   d4356:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d435a:	e9cd 3500 	strd	r3, r5, [sp]
   d435e:	2102      	movs	r1, #2
   d4360:	462b      	mov	r3, r5
   d4362:	462a      	mov	r2, r5
   d4364:	f003 fba6 	bl	d7ab4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d4368:	68a0      	ldr	r0, [r4, #8]
   d436a:	4629      	mov	r1, r5
   d436c:	f003 fbf2 	bl	d7b54 <os_timer_set_id>
            while (running) {
   d4370:	7923      	ldrb	r3, [r4, #4]
   d4372:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4376:	b113      	cbz	r3, d437e <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4378:	f003 fb74 	bl	d7a64 <os_thread_yield>
            while (running) {
   d437c:	e7f8      	b.n	d4370 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d437e:	68a0      	ldr	r0, [r4, #8]
   d4380:	4629      	mov	r1, r5
   d4382:	f003 fb87 	bl	d7a94 <os_timer_destroy>
            handle = nullptr;
   d4386:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4388:	f104 000c 	add.w	r0, r4, #12
   d438c:	f7ff ffd2 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
    }
   d4390:	4620      	mov	r0, r4
   d4392:	b003      	add	sp, #12
   d4394:	bd30      	pop	{r4, r5, pc}
   d4396:	bf00      	nop
   d4398:	000dc738 	.word	0x000dc738

000d439c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d439c:	b510      	push	{r4, lr}
   d439e:	4604      	mov	r4, r0
    }
   d43a0:	f7ff ffd2 	bl	d4348 <_ZN5TimerD1Ev>
   d43a4:	4620      	mov	r0, r4
   d43a6:	211c      	movs	r1, #28
   d43a8:	f007 f8c7 	bl	db53a <_ZdlPvj>
   d43ac:	4620      	mov	r0, r4
   d43ae:	bd10      	pop	{r4, pc}

000d43b0 <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d43b0:	b538      	push	{r3, r4, r5, lr}
   d43b2:	4604      	mov	r4, r0
            : conf_{} {
   d43b4:	2520      	movs	r5, #32
   d43b6:	462a      	mov	r2, r5
   d43b8:	2100      	movs	r1, #0
   d43ba:	f007 fdd3 	bl	dbf64 <memset>
        conf_.size = sizeof(conf_);
   d43be:	7165      	strb	r5, [r4, #5]
    }
   d43c0:	4620      	mov	r0, r4
   d43c2:	bd38      	pop	{r3, r4, r5, pc}

000d43c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d43c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d43c6:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d43c8:	4605      	mov	r5, r0
   d43ca:	460f      	mov	r7, r1
   d43cc:	4616      	mov	r6, r2
        if (valid_) {
   d43ce:	b18b      	cbz	r3, d43f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d43d0:	6803      	ldr	r3, [r0, #0]
   d43d2:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d43d4:	b183      	cbz	r3, d43f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d43d6:	889a      	ldrh	r2, [r3, #4]
   d43d8:	2a01      	cmp	r2, #1
   d43da:	d006      	beq.n	d43ea <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d43dc:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d43de:	e7f9      	b.n	d43d4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d43e0:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d43e2:	b14b      	cbz	r3, d43f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d43e4:	889a      	ldrh	r2, [r3, #4]
   d43e6:	2a01      	cmp	r2, #1
   d43e8:	d1fa      	bne.n	d43e0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d43ea:	b12b      	cbz	r3, d43f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d43ec:	899a      	ldrh	r2, [r3, #12]
   d43ee:	42ba      	cmp	r2, r7
   d43f0:	d1f6      	bne.n	d43e0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d43f2:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d43f4:	4628      	mov	r0, r5
   d43f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d43f8:	490a      	ldr	r1, [pc, #40]	; (d4424 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d43fa:	2010      	movs	r0, #16
   d43fc:	f007 f89f 	bl	db53e <_ZnwjRKSt9nothrow_t>
   d4400:	4604      	mov	r4, r0
   d4402:	b168      	cbz	r0, d4420 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4404:	2210      	movs	r2, #16
   d4406:	2100      	movs	r1, #0
   d4408:	f007 fdac 	bl	dbf64 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d440c:	4b06      	ldr	r3, [pc, #24]	; (d4428 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d440e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4410:	2301      	movs	r3, #1
   d4412:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4414:	692b      	ldr	r3, [r5, #16]
   d4416:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4418:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d441a:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d441c:	612c      	str	r4, [r5, #16]
   d441e:	e7e9      	b.n	d43f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4420:	7528      	strb	r0, [r5, #20]
                return *this;
   d4422:	e7e7      	b.n	d43f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4424:	000dcea0 	.word	0x000dcea0
   d4428:	00030010 	.word	0x00030010

000d442c <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d442c:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d442e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4430:	4605      	mov	r5, r0
   d4432:	460e      	mov	r6, r1
        if (valid_) {
   d4434:	b1cb      	cbz	r3, d446a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4436:	6803      	ldr	r3, [r0, #0]
   d4438:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d443a:	b123      	cbz	r3, d4446 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d443c:	889a      	ldrh	r2, [r3, #4]
   d443e:	2a04      	cmp	r2, #4
   d4440:	d017      	beq.n	d4472 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4442:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4444:	e7f9      	b.n	d443a <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4446:	490c      	ldr	r1, [pc, #48]	; (d4478 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d4448:	2010      	movs	r0, #16
   d444a:	f007 f878 	bl	db53e <_ZnwjRKSt9nothrow_t>
   d444e:	4604      	mov	r4, r0
   d4450:	b168      	cbz	r0, d446e <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d4452:	2210      	movs	r2, #16
   d4454:	2100      	movs	r1, #0
   d4456:	f007 fd85 	bl	dbf64 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d445a:	4b08      	ldr	r3, [pc, #32]	; (d447c <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d445c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d445e:	2304      	movs	r3, #4
   d4460:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4462:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4464:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d4466:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d446a:	4628      	mov	r0, r5
   d446c:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d446e:	7528      	strb	r0, [r5, #20]
                return *this;
   d4470:	e7fb      	b.n	d446a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4472:	60de      	str	r6, [r3, #12]
                return *this;
   d4474:	e7f9      	b.n	d446a <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d4476:	bf00      	nop
   d4478:	000dcea0 	.word	0x000dcea0
   d447c:	00030010 	.word	0x00030010

000d4480 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4480:	2000      	movs	r0, #0
   d4482:	f003 bba7 	b.w	d7bd4 <hal_timer_millis>

000d4486 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4486:	b40e      	push	{r1, r2, r3}
   d4488:	b510      	push	{r4, lr}
   d448a:	b08d      	sub	sp, #52	; 0x34
   d448c:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d448e:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4490:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4494:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4496:	2300      	movs	r3, #0
   d4498:	2020      	movs	r0, #32
   d449a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d449e:	e9cd 4200 	strd	r4, r2, [sp]
   d44a2:	201e      	movs	r0, #30
   d44a4:	aa04      	add	r2, sp, #16
   d44a6:	f003 fd25 	bl	d7ef4 <log_message_v>
}
   d44aa:	b00d      	add	sp, #52	; 0x34
   d44ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d44b0:	b003      	add	sp, #12
   d44b2:	4770      	bx	lr

000d44b4 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d44b4:	b40e      	push	{r1, r2, r3}
   d44b6:	b510      	push	{r4, lr}
   d44b8:	b08d      	sub	sp, #52	; 0x34
   d44ba:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d44bc:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d44be:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d44c2:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d44c4:	2300      	movs	r3, #0
   d44c6:	2020      	movs	r0, #32
   d44c8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d44cc:	e9cd 4200 	strd	r4, r2, [sp]
   d44d0:	2032      	movs	r0, #50	; 0x32
   d44d2:	aa04      	add	r2, sp, #16
   d44d4:	f003 fd0e 	bl	d7ef4 <log_message_v>
}
   d44d8:	b00d      	add	sp, #52	; 0x34
   d44da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d44de:	b003      	add	sp, #12
   d44e0:	4770      	bx	lr

000d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44e4:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44e6:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44ea:	f88d 3000 	strb.w	r3, [sp]
   d44ee:	f88d 5004 	strb.w	r5, [sp, #4]
   d44f2:	68e4      	ldr	r4, [r4, #12]
   d44f4:	233c      	movs	r3, #60	; 0x3c
   d44f6:	47a0      	blx	r4
	}
   d44f8:	b003      	add	sp, #12
   d44fa:	bd30      	pop	{r4, r5, pc}

000d44fc <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d44fc:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d44fe:	780b      	ldrb	r3, [r1, #0]
   d4500:	4d1c      	ldr	r5, [pc, #112]	; (d4574 <_Z14UbidotsHandlerPKcS0_+0x78>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4502:	b093      	sub	sp, #76	; 0x4c
   d4504:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d4506:	b993      	cbnz	r3, d452e <_Z14UbidotsHandlerPKcS0_+0x32>
    snprintf(responseString, sizeof(responseString),"No Data");
   d4508:	491b      	ldr	r1, [pc, #108]	; (d4578 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d450a:	a802      	add	r0, sp, #8
   d450c:	f007 fd77 	bl	dbffe <strcpy>
  if (sysStatus.verboseMode) publishQueue.publish("Ubidots Hook", responseString, PRIVATE, WITH_ACK);
   d4510:	792b      	ldrb	r3, [r5, #4]
   d4512:	b153      	cbz	r3, d452a <_Z14UbidotsHandlerPKcS0_+0x2e>
inline particle::Flag<TagT, ValueT>::operator ValueT() const {
    return val_;
}

template<typename TagT, typename ValueT>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d4514:	4b19      	ldr	r3, [pc, #100]	; (d457c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4516:	491a      	ldr	r1, [pc, #104]	; (d4580 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4518:	781b      	ldrb	r3, [r3, #0]
   d451a:	f88d 3000 	strb.w	r3, [sp]
   d451e:	4b19      	ldr	r3, [pc, #100]	; (d4584 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4520:	4819      	ldr	r0, [pc, #100]	; (d4588 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4522:	781b      	ldrb	r3, [r3, #0]
   d4524:	aa02      	add	r2, sp, #8
   d4526:	f7ff ffdc 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d452a:	b013      	add	sp, #76	; 0x4c
   d452c:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d452e:	4608      	mov	r0, r1
   d4530:	f007 fccc 	bl	dbecc <atoi>
   d4534:	28c8      	cmp	r0, #200	; 0xc8
   d4536:	d10d      	bne.n	d4554 <_Z14UbidotsHandlerPKcS0_+0x58>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4538:	4914      	ldr	r1, [pc, #80]	; (d458c <_Z14UbidotsHandlerPKcS0_+0x90>)
   d453a:	a802      	add	r0, sp, #8
   d453c:	f007 fd5f 	bl	dbffe <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4540:	f006 fcc9 	bl	daed6 <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d4544:	4b12      	ldr	r3, [pc, #72]	; (d4590 <_Z14UbidotsHandlerPKcS0_+0x94>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4546:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d4548:	2201      	movs	r2, #1
   d454a:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d454c:	4b11      	ldr	r3, [pc, #68]	; (d4594 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d454e:	2200      	movs	r2, #0
   d4550:	701a      	strb	r2, [r3, #0]
   d4552:	e7dd      	b.n	d4510 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4554:	4620      	mov	r0, r4
   d4556:	f007 fcb9 	bl	dbecc <atoi>
   d455a:	28c9      	cmp	r0, #201	; 0xc9
   d455c:	d0ec      	beq.n	d4538 <_Z14UbidotsHandlerPKcS0_+0x3c>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d455e:	4620      	mov	r0, r4
   d4560:	f007 fcb4 	bl	dbecc <atoi>
   d4564:	4a0c      	ldr	r2, [pc, #48]	; (d4598 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d4566:	4603      	mov	r3, r0
   d4568:	2140      	movs	r1, #64	; 0x40
   d456a:	a802      	add	r0, sp, #8
   d456c:	f003 fe4e 	bl	d820c <snprintf>
   d4570:	e7ce      	b.n	d4510 <_Z14UbidotsHandlerPKcS0_+0x14>
   d4572:	bf00      	nop
   d4574:	2003e4bc 	.word	0x2003e4bc
   d4578:	000dc261 	.word	0x000dc261
   d457c:	2003e369 	.word	0x2003e369
   d4580:	000dc298 	.word	0x000dc298
   d4584:	2003e368 	.word	0x2003e368
   d4588:	2003e474 	.word	0x2003e474
   d458c:	000dc269 	.word	0x000dc269
   d4590:	2003e4e8 	.word	0x2003e4e8
   d4594:	2003e418 	.word	0x2003e418
   d4598:	000dc27b 	.word	0x000dc27b

000d459c <_Z12hardResetNow6String>:
{
   d459c:	b507      	push	{r0, r1, r2, lr}
   d459e:	490b      	ldr	r1, [pc, #44]	; (d45cc <_Z12hardResetNow6String+0x30>)
   d45a0:	f006 f9a9 	bl	da8f6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45a4:	b170      	cbz	r0, d45c4 <_Z12hardResetNow6String+0x28>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d45a6:	2300      	movs	r3, #0
   d45a8:	f88d 3000 	strb.w	r3, [sp]
   d45ac:	4b08      	ldr	r3, [pc, #32]	; (d45d0 <_Z12hardResetNow6String+0x34>)
   d45ae:	4a09      	ldr	r2, [pc, #36]	; (d45d4 <_Z12hardResetNow6String+0x38>)
   d45b0:	781b      	ldrb	r3, [r3, #0]
   d45b2:	4909      	ldr	r1, [pc, #36]	; (d45d8 <_Z12hardResetNow6String+0x3c>)
   d45b4:	4809      	ldr	r0, [pc, #36]	; (d45dc <_Z12hardResetNow6String+0x40>)
   d45b6:	f7ff ff94 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    ab1805.deepPowerDown(10);
   d45ba:	4809      	ldr	r0, [pc, #36]	; (d45e0 <_Z12hardResetNow6String+0x44>)
   d45bc:	210a      	movs	r1, #10
   d45be:	f002 fa11 	bl	d69e4 <_ZN6AB180513deepPowerDownEi>
   d45c2:	2001      	movs	r0, #1
}
   d45c4:	b003      	add	sp, #12
   d45c6:	f85d fb04 	ldr.w	pc, [sp], #4
   d45ca:	bf00      	nop
   d45cc:	000dc22c 	.word	0x000dc22c
   d45d0:	2003e368 	.word	0x2003e368
   d45d4:	000dc2a5 	.word	0x000dc2a5
   d45d8:	000dc671 	.word	0x000dc671
   d45dc:	2003e474 	.word	0x2003e474
   d45e0:	2003e378 	.word	0x2003e378

000d45e4 <_Z14setVerboseMode6String>:
{
   d45e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45e6:	4919      	ldr	r1, [pc, #100]	; (d464c <_Z14setVerboseMode6String+0x68>)
   d45e8:	4605      	mov	r5, r0
   d45ea:	f006 f984 	bl	da8f6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45ee:	4604      	mov	r4, r0
   d45f0:	b1b0      	cbz	r0, d4620 <_Z14setVerboseMode6String+0x3c>
    sysStatus.verboseMode = true;
   d45f2:	4b17      	ldr	r3, [pc, #92]	; (d4650 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d45f4:	4a17      	ldr	r2, [pc, #92]	; (d4654 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = true;
   d45f6:	2401      	movs	r4, #1
   d45f8:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d45fa:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d45fc:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d45fe:	b913      	cbnz	r3, d4606 <_Z14setVerboseMode6String+0x22>
    return 1;
   d4600:	2001      	movs	r0, #1
}
   d4602:	b003      	add	sp, #12
   d4604:	bd30      	pop	{r4, r5, pc}
   d4606:	4b14      	ldr	r3, [pc, #80]	; (d4658 <_Z14setVerboseMode6String+0x74>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d4608:	4a14      	ldr	r2, [pc, #80]	; (d465c <_Z14setVerboseMode6String+0x78>)
   d460a:	781b      	ldrb	r3, [r3, #0]
   d460c:	f88d 3000 	strb.w	r3, [sp]
   d4610:	4b13      	ldr	r3, [pc, #76]	; (d4660 <_Z14setVerboseMode6String+0x7c>)
   d4612:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d4614:	4913      	ldr	r1, [pc, #76]	; (d4664 <_Z14setVerboseMode6String+0x80>)
   d4616:	4814      	ldr	r0, [pc, #80]	; (d4668 <_Z14setVerboseMode6String+0x84>)
   d4618:	f7ff ff63 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d461c:	4620      	mov	r0, r4
   d461e:	e7f0      	b.n	d4602 <_Z14setVerboseMode6String+0x1e>
   d4620:	4912      	ldr	r1, [pc, #72]	; (d466c <_Z14setVerboseMode6String+0x88>)
   d4622:	4628      	mov	r0, r5
   d4624:	f006 f967 	bl	da8f6 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4628:	2800      	cmp	r0, #0
   d462a:	d0ea      	beq.n	d4602 <_Z14setVerboseMode6String+0x1e>
    sysStatus.verboseMode = false;
   d462c:	4b08      	ldr	r3, [pc, #32]	; (d4650 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d462e:	4a09      	ldr	r2, [pc, #36]	; (d4654 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = false;
   d4630:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d4632:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d4634:	2401      	movs	r4, #1
   d4636:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d4638:	2b00      	cmp	r3, #0
   d463a:	d0e1      	beq.n	d4600 <_Z14setVerboseMode6String+0x1c>
   d463c:	4b06      	ldr	r3, [pc, #24]	; (d4658 <_Z14setVerboseMode6String+0x74>)
   d463e:	4a0c      	ldr	r2, [pc, #48]	; (d4670 <_Z14setVerboseMode6String+0x8c>)
   d4640:	781b      	ldrb	r3, [r3, #0]
   d4642:	f88d 3000 	strb.w	r3, [sp]
   d4646:	4b06      	ldr	r3, [pc, #24]	; (d4660 <_Z14setVerboseMode6String+0x7c>)
   d4648:	781b      	ldrb	r3, [r3, #0]
   d464a:	e7e3      	b.n	d4614 <_Z14setVerboseMode6String+0x30>
   d464c:	000dc22c 	.word	0x000dc22c
   d4650:	2003e4bc 	.word	0x2003e4bc
   d4654:	2003e4e8 	.word	0x2003e4e8
   d4658:	2003e369 	.word	0x2003e369
   d465c:	000dc2bd 	.word	0x000dc2bd
   d4660:	2003e368 	.word	0x2003e368
   d4664:	000dc462 	.word	0x000dc462
   d4668:	2003e474 	.word	0x2003e474
   d466c:	000dc46e 	.word	0x000dc46e
   d4670:	000dc2ce 	.word	0x000dc2ce

000d4674 <_Z11setOpenTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setOpenTime(String command)
   d4674:	b500      	push	{lr}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  makeUpParkHourStrings();                                                    // Create the strings for the console
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (sysStatus.connectedStatus) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4676:	4b0c      	ldr	r3, [pc, #48]	; (d46a8 <_Z11setOpenTime6String.part.0+0x34>)
   d4678:	4a0c      	ldr	r2, [pc, #48]	; (d46ac <_Z11setOpenTime6String.part.0+0x38>)
   d467a:	7f1b      	ldrb	r3, [r3, #28]
int setOpenTime(String command)
   d467c:	b0c3      	sub	sp, #268	; 0x10c
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d467e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4682:	a802      	add	r0, sp, #8
   d4684:	f003 fdc2 	bl	d820c <snprintf>
   d4688:	4b09      	ldr	r3, [pc, #36]	; (d46b0 <_Z11setOpenTime6String.part.0+0x3c>)
    publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d468a:	490a      	ldr	r1, [pc, #40]	; (d46b4 <_Z11setOpenTime6String.part.0+0x40>)
   d468c:	781b      	ldrb	r3, [r3, #0]
   d468e:	f88d 3000 	strb.w	r3, [sp]
   d4692:	4b09      	ldr	r3, [pc, #36]	; (d46b8 <_Z11setOpenTime6String.part.0+0x44>)
   d4694:	4809      	ldr	r0, [pc, #36]	; (d46bc <_Z11setOpenTime6String.part.0+0x48>)
   d4696:	781b      	ldrb	r3, [r3, #0]
   d4698:	aa02      	add	r2, sp, #8
   d469a:	f7ff ff22 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d469e:	2001      	movs	r0, #1
   d46a0:	b043      	add	sp, #268	; 0x10c
   d46a2:	f85d fb04 	ldr.w	pc, [sp], #4
   d46a6:	bf00      	nop
   d46a8:	2003e4bc 	.word	0x2003e4bc
   d46ac:	000dc2e3 	.word	0x000dc2e3
   d46b0:	2003e369 	.word	0x2003e369
   d46b4:	000dc523 	.word	0x000dc523
   d46b8:	2003e368 	.word	0x2003e368
   d46bc:	2003e474 	.word	0x2003e474

000d46c0 <_Z13setDailyCount6String>:
 * Inputs outside of "0" - "1000" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setDailyCount(String command)
{
   d46c0:	b530      	push	{r4, r5, lr}
   d46c2:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempCount = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d46c4:	6800      	ldr	r0, [r0, #0]
   d46c6:	220a      	movs	r2, #10
   d46c8:	a903      	add	r1, sp, #12
   d46ca:	f007 fd79 	bl	dc1c0 <strtol>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d46ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d46d2:	d81e      	bhi.n	d4712 <_Z13setDailyCount6String+0x52>
  current.dailyCount = tempCount;
   d46d4:	4d10      	ldr	r5, [pc, #64]	; (d4718 <_Z13setDailyCount6String+0x58>)
   d46d6:	60a8      	str	r0, [r5, #8]
  current.lastCountTime = Time.now();
   d46d8:	f006 fbfd 	bl	daed6 <_ZN9TimeClass3nowEv>
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d46dc:	4b0f      	ldr	r3, [pc, #60]	; (d471c <_Z13setDailyCount6String+0x5c>)
  current.lastCountTime = Time.now();
   d46de:	60e8      	str	r0, [r5, #12]
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d46e0:	2401      	movs	r4, #1
   d46e2:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Daily count set to %i",current.dailyCount);
   d46e4:	4a0e      	ldr	r2, [pc, #56]	; (d4720 <_Z13setDailyCount6String+0x60>)
   d46e6:	68ab      	ldr	r3, [r5, #8]
   d46e8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d46ec:	a804      	add	r0, sp, #16
   d46ee:	f003 fd8d 	bl	d820c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Daily",data, PRIVATE, WITH_ACK);
   d46f2:	4b0c      	ldr	r3, [pc, #48]	; (d4724 <_Z13setDailyCount6String+0x64>)
   d46f4:	78db      	ldrb	r3, [r3, #3]
   d46f6:	b153      	cbz	r3, d470e <_Z13setDailyCount6String+0x4e>
   d46f8:	4b0b      	ldr	r3, [pc, #44]	; (d4728 <_Z13setDailyCount6String+0x68>)
   d46fa:	490c      	ldr	r1, [pc, #48]	; (d472c <_Z13setDailyCount6String+0x6c>)
   d46fc:	781b      	ldrb	r3, [r3, #0]
   d46fe:	f88d 3000 	strb.w	r3, [sp]
   d4702:	4b0b      	ldr	r3, [pc, #44]	; (d4730 <_Z13setDailyCount6String+0x70>)
   d4704:	480b      	ldr	r0, [pc, #44]	; (d4734 <_Z13setDailyCount6String+0x74>)
   d4706:	781b      	ldrb	r3, [r3, #0]
   d4708:	aa04      	add	r2, sp, #16
   d470a:	f7ff feea 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d470e:	4620      	mov	r0, r4
   d4710:	e000      	b.n	d4714 <_Z13setDailyCount6String+0x54>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4712:	2000      	movs	r0, #0
}
   d4714:	b045      	add	sp, #276	; 0x114
   d4716:	bd30      	pop	{r4, r5, pc}
   d4718:	2003e3e4 	.word	0x2003e3e4
   d471c:	2003e408 	.word	0x2003e408
   d4720:	000dc2f7 	.word	0x000dc2f7
   d4724:	2003e4bc 	.word	0x2003e4bc
   d4728:	2003e369 	.word	0x2003e369
   d472c:	000dc30d 	.word	0x000dc30d
   d4730:	2003e368 	.word	0x2003e368
   d4734:	2003e474 	.word	0x2003e474

000d4738 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4738:	b513      	push	{r0, r1, r4, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d473a:	4925      	ldr	r1, [pc, #148]	; (d47d0 <_Z15setLowPowerMode6String+0x98>)
   d473c:	4604      	mov	r4, r0
   d473e:	f006 f8da 	bl	da8f6 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4742:	b320      	cbz	r0, d478e <_Z15setLowPowerMode6String+0x56>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4744:	4922      	ldr	r1, [pc, #136]	; (d47d0 <_Z15setLowPowerMode6String+0x98>)
   d4746:	4620      	mov	r0, r4
   d4748:	f006 f8d5 	bl	da8f6 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d474c:	bb38      	cbnz	r0, d479e <_Z15setLowPowerMode6String+0x66>
   d474e:	4921      	ldr	r1, [pc, #132]	; (d47d4 <_Z15setLowPowerMode6String+0x9c>)
   d4750:	4620      	mov	r0, r4
   d4752:	f006 f8d0 	bl	da8f6 <_ZNK6String6equalsEPKc>
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
    }
    sysStatus.lowPowerMode = true;
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d4756:	2800      	cmp	r0, #0
   d4758:	d036      	beq.n	d47c8 <_Z15setLowPowerMode6String+0x90>
  {
    if (!sysStatus.connectedStatus) {                                      // In case we are not connected, we will do so now.
   d475a:	4c1f      	ldr	r4, [pc, #124]	; (d47d8 <_Z15setLowPowerMode6String+0xa0>)
   d475c:	78e2      	ldrb	r2, [r4, #3]
   d475e:	b912      	cbnz	r2, d4766 <_Z15setLowPowerMode6String+0x2e>
      particleConnectionNeeded = true;
   d4760:	4b1e      	ldr	r3, [pc, #120]	; (d47dc <_Z15setLowPowerMode6String+0xa4>)
   d4762:	2201      	movs	r2, #1
   d4764:	701a      	strb	r2, [r3, #0]
   d4766:	4b1e      	ldr	r3, [pc, #120]	; (d47e0 <_Z15setLowPowerMode6String+0xa8>)
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE, WITH_ACK);
   d4768:	4a1e      	ldr	r2, [pc, #120]	; (d47e4 <_Z15setLowPowerMode6String+0xac>)
   d476a:	781b      	ldrb	r3, [r3, #0]
   d476c:	f88d 3000 	strb.w	r3, [sp]
   d4770:	4b1d      	ldr	r3, [pc, #116]	; (d47e8 <_Z15setLowPowerMode6String+0xb0>)
   d4772:	491e      	ldr	r1, [pc, #120]	; (d47ec <_Z15setLowPowerMode6String+0xb4>)
   d4774:	781b      	ldrb	r3, [r3, #0]
   d4776:	481e      	ldr	r0, [pc, #120]	; (d47f0 <_Z15setLowPowerMode6String+0xb8>)
   d4778:	f7ff feb3 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d477c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4780:	f003 fd8c 	bl	d829c <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4784:	2300      	movs	r3, #0
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d4786:	491b      	ldr	r1, [pc, #108]	; (d47f4 <_Z15setLowPowerMode6String+0xbc>)
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4788:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d478a:	2210      	movs	r2, #16
   d478c:	e019      	b.n	d47c2 <_Z15setLowPowerMode6String+0x8a>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d478e:	4911      	ldr	r1, [pc, #68]	; (d47d4 <_Z15setLowPowerMode6String+0x9c>)
   d4790:	4620      	mov	r0, r4
   d4792:	f006 f8b0 	bl	da8f6 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4796:	2800      	cmp	r0, #0
   d4798:	d1d4      	bne.n	d4744 <_Z15setLowPowerMode6String+0xc>
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d479a:	b002      	add	sp, #8
   d479c:	bd10      	pop	{r4, pc}
    if (sysStatus.connectedStatus) {
   d479e:	4c0e      	ldr	r4, [pc, #56]	; (d47d8 <_Z15setLowPowerMode6String+0xa0>)
   d47a0:	78e2      	ldrb	r2, [r4, #3]
   d47a2:	b152      	cbz	r2, d47ba <_Z15setLowPowerMode6String+0x82>
   d47a4:	4b0e      	ldr	r3, [pc, #56]	; (d47e0 <_Z15setLowPowerMode6String+0xa8>)
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
   d47a6:	4a14      	ldr	r2, [pc, #80]	; (d47f8 <_Z15setLowPowerMode6String+0xc0>)
   d47a8:	781b      	ldrb	r3, [r3, #0]
   d47aa:	f88d 3000 	strb.w	r3, [sp]
   d47ae:	4b0e      	ldr	r3, [pc, #56]	; (d47e8 <_Z15setLowPowerMode6String+0xb0>)
   d47b0:	490e      	ldr	r1, [pc, #56]	; (d47ec <_Z15setLowPowerMode6String+0xb4>)
   d47b2:	781b      	ldrb	r3, [r3, #0]
   d47b4:	480e      	ldr	r0, [pc, #56]	; (d47f0 <_Z15setLowPowerMode6String+0xb8>)
   d47b6:	f7ff fe94 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lowPowerMode = true;
   d47ba:	2301      	movs	r3, #1
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d47bc:	490f      	ldr	r1, [pc, #60]	; (d47fc <_Z15setLowPowerMode6String+0xc4>)
    sysStatus.lowPowerMode = true;
   d47be:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d47c0:	2210      	movs	r2, #16
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d47c2:	480f      	ldr	r0, [pc, #60]	; (d4800 <_Z15setLowPowerMode6String+0xc8>)
   d47c4:	f007 fc5b 	bl	dc07e <strncpy>
  systemStatusWriteNeeded = true;
   d47c8:	4b0e      	ldr	r3, [pc, #56]	; (d4804 <_Z15setLowPowerMode6String+0xcc>)
   d47ca:	2001      	movs	r0, #1
   d47cc:	7018      	strb	r0, [r3, #0]
  return 1;
   d47ce:	e7e4      	b.n	d479a <_Z15setLowPowerMode6String+0x62>
   d47d0:	000dc22c 	.word	0x000dc22c
   d47d4:	000dc46e 	.word	0x000dc46e
   d47d8:	2003e4bc 	.word	0x2003e4bc
   d47dc:	2003e471 	.word	0x2003e471
   d47e0:	2003e369 	.word	0x2003e369
   d47e4:	000dc322 	.word	0x000dc322
   d47e8:	2003e368 	.word	0x2003e368
   d47ec:	000dc462 	.word	0x000dc462
   d47f0:	2003e474 	.word	0x2003e474
   d47f4:	000dc334 	.word	0x000dc334
   d47f8:	000dc313 	.word	0x000dc313
   d47fc:	000dc338 	.word	0x000dc338
   d4800:	2003e460 	.word	0x2003e460
   d4804:	2003e4e8 	.word	0x2003e4e8

000d4808 <_Z11recordCountv>:
{
   d4808:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (millis() - tapDebounceLast > tapDebounceTime) {
   d480a:	4c4e      	ldr	r4, [pc, #312]	; (d4944 <_Z11recordCountv+0x13c>)
{
   d480c:	b0c3      	sub	sp, #268	; 0x10c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d480e:	f003 f9d1 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - tapDebounceLast > tapDebounceTime) {
   d4812:	6823      	ldr	r3, [r4, #0]
   d4814:	1ac0      	subs	r0, r0, r3
   d4816:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d481a:	d97a      	bls.n	d4912 <_Z11recordCountv+0x10a>
   d481c:	f003 f9ca 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4820:	4d49      	ldr	r5, [pc, #292]	; (d4948 <_Z11recordCountv+0x140>)
    tapDebounceLast = millis();
   d4822:	6020      	str	r0, [r4, #0]
   d4824:	782b      	ldrb	r3, [r5, #0]
   d4826:	4e49      	ldr	r6, [pc, #292]	; (d494c <_Z11recordCountv+0x144>)
   d4828:	f3bf 8f5b 	dmb	ish
   d482c:	f013 0f01 	tst.w	r3, #1
   d4830:	d109      	bne.n	d4846 <_Z11recordCountv+0x3e>
   d4832:	4628      	mov	r0, r5
   d4834:	f7ff fc40 	bl	d40b8 <__cxa_guard_acquire>
   d4838:	b128      	cbz	r0, d4846 <_Z11recordCountv+0x3e>
   d483a:	f003 f9e3 	bl	d7c04 <HAL_Pin_Map>
   d483e:	6030      	str	r0, [r6, #0]
   d4840:	4628      	mov	r0, r5
   d4842:	f7ff fc3e 	bl	d40c2 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4846:	6833      	ldr	r3, [r6, #0]
   d4848:	f893 4070 	ldrb.w	r4, [r3, #112]	; 0x70
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d484c:	782b      	ldrb	r3, [r5, #0]
   d484e:	f3bf 8f5b 	dmb	ish
   d4852:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4854:	ea4f 1744 	mov.w	r7, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4858:	d409      	bmi.n	d486e <_Z11recordCountv+0x66>
   d485a:	483b      	ldr	r0, [pc, #236]	; (d4948 <_Z11recordCountv+0x140>)
   d485c:	f7ff fc2c 	bl	d40b8 <__cxa_guard_acquire>
   d4860:	b128      	cbz	r0, d486e <_Z11recordCountv+0x66>
   d4862:	f003 f9cf 	bl	d7c04 <HAL_Pin_Map>
   d4866:	6030      	str	r0, [r6, #0]
   d4868:	4837      	ldr	r0, [pc, #220]	; (d4948 <_Z11recordCountv+0x140>)
   d486a:	f7ff fc2a 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d486e:	6833      	ldr	r3, [r6, #0]
   d4870:	f893 4071 	ldrb.w	r4, [r3, #113]	; 0x71
   d4874:	f004 041f 	and.w	r4, r4, #31
   d4878:	433c      	orrs	r4, r7
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d487a:	2c2f      	cmp	r4, #47	; 0x2f
   d487c:	dd5c      	ble.n	d4938 <_Z11recordCountv+0x130>
   d487e:	4a34      	ldr	r2, [pc, #208]	; (d4950 <_Z11recordCountv+0x148>)
   d4880:	2100      	movs	r1, #0
   d4882:	200a      	movs	r0, #10
   d4884:	f003 fb26 	bl	d7ed4 <panic_>
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
   d4888:	4b32      	ldr	r3, [pc, #200]	; (d4954 <_Z11recordCountv+0x14c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d488a:	f004 041f 	and.w	r4, r4, #31

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d488e:	2101      	movs	r1, #1
   d4890:	fa01 f404 	lsl.w	r4, r1, r4
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4894:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
   d4898:	4b2f      	ldr	r3, [pc, #188]	; (d4958 <_Z11recordCountv+0x150>)
   d489a:	6898      	ldr	r0, [r3, #8]
   d489c:	b138      	cbz	r0, d48ae <_Z11recordCountv+0xa6>
   d489e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d48a2:	2300      	movs	r3, #0
   d48a4:	e9cd 2300 	strd	r2, r3, [sp]
   d48a8:	461a      	mov	r2, r3
   d48aa:	f003 f903 	bl	d7ab4 <os_timer_change>
    if (currentMinutePeriod != Time.minute()) {                         // Done counting for the last minute
   d48ae:	4d2b      	ldr	r5, [pc, #172]	; (d495c <_Z11recordCountv+0x154>)
   d48b0:	782c      	ldrb	r4, [r5, #0]
   d48b2:	f006 fb2d 	bl	daf10 <_ZN9TimeClass6minuteEv>
   d48b6:	4284      	cmp	r4, r0
   d48b8:	4c29      	ldr	r4, [pc, #164]	; (d4960 <_Z11recordCountv+0x158>)
   d48ba:	d004      	beq.n	d48c6 <_Z11recordCountv+0xbe>
      currentMinutePeriod = Time.minute();                              // Reset period
   d48bc:	f006 fb28 	bl	daf10 <_ZN9TimeClass6minuteEv>
      current.maxMinValue = 1;                                          // Reset for the new minute
   d48c0:	2301      	movs	r3, #1
      currentMinutePeriod = Time.minute();                              // Reset period
   d48c2:	7028      	strb	r0, [r5, #0]
      current.maxMinValue = 1;                                          // Reset for the new minute
   d48c4:	61a3      	str	r3, [r4, #24]
    current.maxMinValue++;
   d48c6:	69a3      	ldr	r3, [r4, #24]
   d48c8:	3301      	adds	r3, #1
   d48ca:	61a3      	str	r3, [r4, #24]
    current.lastCountTime = Time.now();
   d48cc:	f006 fb03 	bl	daed6 <_ZN9TimeClass3nowEv>
    if (sysStatus.verboseMode && sysStatus.connectedStatus) {
   d48d0:	4924      	ldr	r1, [pc, #144]	; (d4964 <_Z11recordCountv+0x15c>)
    current.hourlyCount++;                                              // Increment the PersonCount
   d48d2:	6823      	ldr	r3, [r4, #0]
    current.dailyCount++;                                               // Increment the PersonCount
   d48d4:	68a2      	ldr	r2, [r4, #8]
    current.lastCountTime = Time.now();
   d48d6:	60e0      	str	r0, [r4, #12]
    if (sysStatus.verboseMode && sysStatus.connectedStatus) {
   d48d8:	7908      	ldrb	r0, [r1, #4]
    current.hourlyCount++;                                              // Increment the PersonCount
   d48da:	3301      	adds	r3, #1
    current.dailyCount++;                                               // Increment the PersonCount
   d48dc:	3201      	adds	r2, #1
    current.hourlyCount++;                                              // Increment the PersonCount
   d48de:	6023      	str	r3, [r4, #0]
    current.dailyCount++;                                               // Increment the PersonCount
   d48e0:	60a2      	str	r2, [r4, #8]
    if (sysStatus.verboseMode && sysStatus.connectedStatus) {
   d48e2:	b198      	cbz	r0, d490c <_Z11recordCountv+0x104>
   d48e4:	78c9      	ldrb	r1, [r1, #3]
   d48e6:	b189      	cbz	r1, d490c <_Z11recordCountv+0x104>
      snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d48e8:	9200      	str	r2, [sp, #0]
   d48ea:	f44f 7180 	mov.w	r1, #256	; 0x100
   d48ee:	4a1e      	ldr	r2, [pc, #120]	; (d4968 <_Z11recordCountv+0x160>)
   d48f0:	a802      	add	r0, sp, #8
   d48f2:	f003 fc8b 	bl	d820c <snprintf>
   d48f6:	4b1d      	ldr	r3, [pc, #116]	; (d496c <_Z11recordCountv+0x164>)
      publishQueue.publish("Count",data, PRIVATE, WITH_ACK);                      // Helpful for monitoring and calibration
   d48f8:	491d      	ldr	r1, [pc, #116]	; (d4970 <_Z11recordCountv+0x168>)
   d48fa:	781b      	ldrb	r3, [r3, #0]
   d48fc:	f88d 3000 	strb.w	r3, [sp]
   d4900:	4b1c      	ldr	r3, [pc, #112]	; (d4974 <_Z11recordCountv+0x16c>)
   d4902:	481d      	ldr	r0, [pc, #116]	; (d4978 <_Z11recordCountv+0x170>)
   d4904:	781b      	ldrb	r3, [r3, #0]
   d4906:	aa02      	add	r2, sp, #8
   d4908:	f7ff fdeb 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d490c:	4b1b      	ldr	r3, [pc, #108]	; (d497c <_Z11recordCountv+0x174>)
   d490e:	2201      	movs	r2, #1
   d4910:	701a      	strb	r2, [r3, #0]
  if (sensorDetect) {
   d4912:	4c1b      	ldr	r4, [pc, #108]	; (d4980 <_Z11recordCountv+0x178>)
   d4914:	7823      	ldrb	r3, [r4, #0]
   d4916:	b16b      	cbz	r3, d4934 <_Z11recordCountv+0x12c>
    accel.clearTapInts();
   d4918:	481a      	ldr	r0, [pc, #104]	; (d4984 <_Z11recordCountv+0x17c>)
   d491a:	f002 fd0c 	bl	d7336 <_ZN8MMA8452Q12clearTapIntsEv>
    sensorDetect = false;                                             // Reset the flag
   d491e:	2300      	movs	r3, #0
   d4920:	7023      	strb	r3, [r4, #0]
    publishQueue.publish("Sensor", "Activated by Interrupt", PRIVATE);
   d4922:	f88d 3000 	strb.w	r3, [sp]
   d4926:	4b13      	ldr	r3, [pc, #76]	; (d4974 <_Z11recordCountv+0x16c>)
   d4928:	4a17      	ldr	r2, [pc, #92]	; (d4988 <_Z11recordCountv+0x180>)
   d492a:	781b      	ldrb	r3, [r3, #0]
   d492c:	4917      	ldr	r1, [pc, #92]	; (d498c <_Z11recordCountv+0x184>)
   d492e:	4812      	ldr	r0, [pc, #72]	; (d4978 <_Z11recordCountv+0x170>)
   d4930:	f7ff fdd7 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4934:	b043      	add	sp, #268	; 0x10c
   d4936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*p_pin < P0_PIN_NUM)
   d4938:	2c1f      	cmp	r4, #31
   d493a:	dca5      	bgt.n	d4888 <_Z11recordCountv+0x80>
        return NRF_P0;
   d493c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   d4940:	e7a5      	b.n	d488e <_Z11recordCountv+0x86>
   d4942:	bf00      	nop
   d4944:	2003e36c 	.word	0x2003e36c
   d4948:	2003e314 	.word	0x2003e314
   d494c:	2003e318 	.word	0x2003e318
   d4950:	000d7ba5 	.word	0x000d7ba5
   d4954:	50000300 	.word	0x50000300
   d4958:	2003e3c8 	.word	0x2003e3c8
   d495c:	2003e370 	.word	0x2003e370
   d4960:	2003e3e4 	.word	0x2003e3e4
   d4964:	2003e4bc 	.word	0x2003e4bc
   d4968:	000dc342 	.word	0x000dc342
   d496c:	2003e369 	.word	0x2003e369
   d4970:	000dc4ec 	.word	0x000dc4ec
   d4974:	2003e368 	.word	0x2003e368
   d4978:	2003e474 	.word	0x2003e474
   d497c:	2003e408 	.word	0x2003e408
   d4980:	2003e4b0 	.word	0x2003e4b0
   d4984:	2003e398 	.word	0x2003e398
   d4988:	000dc35f 	.word	0x000dc35f
   d498c:	000dc376 	.word	0x000dc376

000d4990 <_Z9sendEventv>:
void sendEvent() {
   d4990:	b510      	push	{r4, lr}
  if (current.hourlyCount) {
   d4992:	4c1b      	ldr	r4, [pc, #108]	; (d4a00 <_Z9sendEventv+0x70>)
   d4994:	6823      	ldr	r3, [r4, #0]
void sendEvent() {
   d4996:	b0ca      	sub	sp, #296	; 0x128
  if (current.hourlyCount) {
   d4998:	2b00      	cmp	r3, #0
   d499a:	d02d      	beq.n	d49f8 <_Z9sendEventv+0x68>
    timeStampValue = current.lastCountTime;                           // If there was an event in the past hour, send the most recent event's timestamp
   d499c:	68e2      	ldr	r2, [r4, #12]
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,\"key1\":\"%s\",\"temp\":%i, \"resets\":%i, \"alerts\":%i,\"maxmin\":%i,\"connecttime\":%i,\"timestamp\":%lu000}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContext[sysStatus.batteryState], current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue, sysStatus.lastConnectionDuration, timeStampValue);
   d499e:	9208      	str	r2, [sp, #32]
   d49a0:	4a18      	ldr	r2, [pc, #96]	; (d4a04 <_Z9sendEventv+0x74>)
   d49a2:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   d49a4:	9107      	str	r1, [sp, #28]
   d49a6:	69a1      	ldr	r1, [r4, #24]
   d49a8:	9106      	str	r1, [sp, #24]
   d49aa:	6961      	ldr	r1, [r4, #20]
   d49ac:	9105      	str	r1, [sp, #20]
   d49ae:	6911      	ldr	r1, [r2, #16]
   d49b0:	9104      	str	r1, [sp, #16]
   d49b2:	6921      	ldr	r1, [r4, #16]
   d49b4:	9103      	str	r1, [sp, #12]
   d49b6:	7b10      	ldrb	r0, [r2, #12]
   d49b8:	4913      	ldr	r1, [pc, #76]	; (d4a08 <_Z9sendEventv+0x78>)
   d49ba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d49be:	9102      	str	r1, [sp, #8]
   d49c0:	6892      	ldr	r2, [r2, #8]
   d49c2:	9201      	str	r2, [sp, #4]
   d49c4:	68a2      	ldr	r2, [r4, #8]
   d49c6:	9200      	str	r2, [sp, #0]
   d49c8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d49cc:	4a0f      	ldr	r2, [pc, #60]	; (d4a0c <_Z9sendEventv+0x7c>)
   d49ce:	a80a      	add	r0, sp, #40	; 0x28
   d49d0:	f003 fc1c 	bl	d820c <snprintf>
   d49d4:	4b0e      	ldr	r3, [pc, #56]	; (d4a10 <_Z9sendEventv+0x80>)
  publishQueue.publish("Ubidots-Counter-Hook-v1", data, PRIVATE, WITH_ACK);
   d49d6:	490f      	ldr	r1, [pc, #60]	; (d4a14 <_Z9sendEventv+0x84>)
   d49d8:	781b      	ldrb	r3, [r3, #0]
   d49da:	f88d 3000 	strb.w	r3, [sp]
   d49de:	4b0e      	ldr	r3, [pc, #56]	; (d4a18 <_Z9sendEventv+0x88>)
   d49e0:	480e      	ldr	r0, [pc, #56]	; (d4a1c <_Z9sendEventv+0x8c>)
   d49e2:	781b      	ldrb	r3, [r3, #0]
   d49e4:	aa0a      	add	r2, sp, #40	; 0x28
   d49e6:	f7ff fd7c 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d49ea:	4b0d      	ldr	r3, [pc, #52]	; (d4a20 <_Z9sendEventv+0x90>)
   d49ec:	2201      	movs	r2, #1
   d49ee:	701a      	strb	r2, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d49f0:	6823      	ldr	r3, [r4, #0]
   d49f2:	6063      	str	r3, [r4, #4]
}
   d49f4:	b04a      	add	sp, #296	; 0x128
   d49f6:	bd10      	pop	{r4, pc}
    timeStampValue = lastReportedTime;                                // This should be the beginning of the previous hour
   d49f8:	4a0a      	ldr	r2, [pc, #40]	; (d4a24 <_Z9sendEventv+0x94>)
   d49fa:	6812      	ldr	r2, [r2, #0]
   d49fc:	e7cf      	b.n	d499e <_Z9sendEventv+0xe>
   d49fe:	bf00      	nop
   d4a00:	2003e3e4 	.word	0x2003e3e4
   d4a04:	2003e4bc 	.word	0x2003e4bc
   d4a08:	2003e1e8 	.word	0x2003e1e8
   d4a0c:	000dc37d 	.word	0x000dc37d
   d4a10:	2003e369 	.word	0x2003e369
   d4a14:	000dc404 	.word	0x000dc404
   d4a18:	2003e368 	.word	0x2003e368
   d4a1c:	2003e474 	.word	0x2003e474
   d4a20:	2003e418 	.word	0x2003e418
   d4a24:	2003e438 	.word	0x2003e438

000d4a28 <_Z16isItSafeToChargev>:
{         
   d4a28:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);                                 
   d4a2a:	2101      	movs	r1, #1
   d4a2c:	a801      	add	r0, sp, #4
   d4a2e:	f005 fd74 	bl	da51a <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4a32:	4b0b      	ldr	r3, [pc, #44]	; (d4a60 <_Z16isItSafeToChargev+0x38>)
   d4a34:	691b      	ldr	r3, [r3, #16]
   d4a36:	3b24      	subs	r3, #36	; 0x24
   d4a38:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4a3a:	a801      	add	r0, sp, #4
   d4a3c:	f04f 0401 	mov.w	r4, #1
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4a40:	d90a      	bls.n	d4a58 <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4a42:	f005 fdfd 	bl	da640 <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d4a46:	4b07      	ldr	r3, [pc, #28]	; (d4a64 <_Z16isItSafeToChargev+0x3c>)
   d4a48:	731c      	strb	r4, [r3, #12]
    return false;
   d4a4a:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d4a4c:	a801      	add	r0, sp, #4
   d4a4e:	f005 fd73 	bl	da538 <_ZN4PMICD1Ev>
}
   d4a52:	4620      	mov	r0, r4
   d4a54:	b002      	add	sp, #8
   d4a56:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                                            // It is safe to charge the battery
   d4a58:	f005 fddb 	bl	da612 <_ZN4PMIC14enableChargingEv>
    return true;
   d4a5c:	e7f6      	b.n	d4a4c <_Z16isItSafeToChargev+0x24>
   d4a5e:	bf00      	nop
   d4a60:	2003e3e4 	.word	0x2003e3e4
   d4a64:	2003e4bc 	.word	0x2003e4bc

000d4a68 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d4a68:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4a6a:	4d19      	ldr	r5, [pc, #100]	; (d4ad0 <_Z17getSignalStrengthv+0x68>)
   d4a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4a6e:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4a70:	ac04      	add	r4, sp, #16
   d4a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a78:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4a7c:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4a80:	4914      	ldr	r1, [pc, #80]	; (d4ad4 <_Z17getSignalStrengthv+0x6c>)
   d4a82:	a80e      	add	r0, sp, #56	; 0x38
   d4a84:	f003 fc8e 	bl	d83a4 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4a88:	a80e      	add	r0, sp, #56	; 0x38
   d4a8a:	f003 fcde 	bl	d844a <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4a8e:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4a90:	a80e      	add	r0, sp, #56	; 0x38
   d4a92:	f003 fce3 	bl	d845c <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d4a96:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4a98:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4a9c:	f003 fd0e 	bl	d84bc <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4aa0:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d4aa2:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4aa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4aaa:	f006 feb3 	bl	db814 <__aeabi_f2d>
   d4aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4ab2:	4628      	mov	r0, r5
   d4ab4:	f006 feae 	bl	db814 <__aeabi_f2d>
   d4ab8:	e9cd 0100 	strd	r0, r1, [sp]
   d4abc:	4a06      	ldr	r2, [pc, #24]	; (d4ad8 <_Z17getSignalStrengthv+0x70>)
   d4abe:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4ac2:	4806      	ldr	r0, [pc, #24]	; (d4adc <_Z17getSignalStrengthv+0x74>)
   d4ac4:	2140      	movs	r1, #64	; 0x40
   d4ac6:	f003 fba1 	bl	d820c <snprintf>
}
   d4aca:	b019      	add	sp, #100	; 0x64
   d4acc:	bd30      	pop	{r4, r5, pc}
   d4ace:	bf00      	nop
   d4ad0:	000dc7b8 	.word	0x000dc7b8
   d4ad4:	2003e508 	.word	0x2003e508
   d4ad8:	000dc41c 	.word	0x000dc41c
   d4adc:	2003e31c 	.word	0x2003e31c

000d4ae0 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d4ae0:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d4ae2:	200f      	movs	r0, #15
   d4ae4:	f006 fc8d 	bl	db402 <analogRead>
  if (reading < 400) {                                                // This ocrresponds to 0 degrees - less than this and we should take another reading to be sure
   d4ae8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d4aec:	da05      	bge.n	d4afa <_Z14getTemperaturev+0x1a>
    delay(50);
   d4aee:	2032      	movs	r0, #50	; 0x32
   d4af0:	f003 fbd4 	bl	d829c <delay>
    reading = analogRead(tmp36Pin);
   d4af4:	200f      	movs	r0, #15
   d4af6:	f006 fc84 	bl	db402 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4afa:	f006 fe79 	bl	db7f0 <__aeabi_i2d>
   d4afe:	a320      	add	r3, pc, #128	; (adr r3, d4b80 <_Z14getTemperaturev+0xa0>)
   d4b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4b04:	f006 fede 	bl	db8c4 <__aeabi_dmul>
   d4b08:	f007 f936 	bl	dbd78 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4b0c:	eddf 7a14 	vldr	s15, [pc, #80]	; d4b60 <_Z14getTemperaturev+0x80>
   d4b10:	ee07 0a10 	vmov	s14, r0
   d4b14:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4b18:	ee17 0a90 	vmov	r0, s15
   d4b1c:	f006 fe7a 	bl	db814 <__aeabi_f2d>
   d4b20:	4b10      	ldr	r3, [pc, #64]	; (d4b64 <_Z14getTemperaturev+0x84>)
   d4b22:	2200      	movs	r2, #0
   d4b24:	f006 fd16 	bl	db554 <__aeabi_dsub>
   d4b28:	4b0f      	ldr	r3, [pc, #60]	; (d4b68 <_Z14getTemperaturev+0x88>)
   d4b2a:	2200      	movs	r2, #0
   d4b2c:	f006 feca 	bl	db8c4 <__aeabi_dmul>
   d4b30:	f007 f8da 	bl	dbce8 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d4b34:	f006 fe5c 	bl	db7f0 <__aeabi_i2d>
   d4b38:	4b0c      	ldr	r3, [pc, #48]	; (d4b6c <_Z14getTemperaturev+0x8c>)
   d4b3a:	2200      	movs	r2, #0
   d4b3c:	f006 fec2 	bl	db8c4 <__aeabi_dmul>
   d4b40:	4b0b      	ldr	r3, [pc, #44]	; (d4b70 <_Z14getTemperaturev+0x90>)
   d4b42:	2200      	movs	r2, #0
   d4b44:	f006 ffe8 	bl	dbb18 <__aeabi_ddiv>
   d4b48:	4b0a      	ldr	r3, [pc, #40]	; (d4b74 <_Z14getTemperaturev+0x94>)
   d4b4a:	2200      	movs	r2, #0
   d4b4c:	f006 fd04 	bl	db558 <__adddf3>
   d4b50:	f007 f8ca 	bl	dbce8 <__aeabi_d2iz>
   d4b54:	4b08      	ldr	r3, [pc, #32]	; (d4b78 <_Z14getTemperaturev+0x98>)
   d4b56:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d4b58:	4b08      	ldr	r3, [pc, #32]	; (d4b7c <_Z14getTemperaturev+0x9c>)
   d4b5a:	2201      	movs	r2, #1
   d4b5c:	701a      	strb	r2, [r3, #0]
}
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	39800000 	.word	0x39800000
   d4b64:	3fe00000 	.word	0x3fe00000
   d4b68:	40590000 	.word	0x40590000
   d4b6c:	40220000 	.word	0x40220000
   d4b70:	40140000 	.word	0x40140000
   d4b74:	40400000 	.word	0x40400000
   d4b78:	2003e3e4 	.word	0x2003e3e4
   d4b7c:	2003e408 	.word	0x2003e408
   d4b80:	66666666 	.word	0x66666666
   d4b84:	400a6666 	.word	0x400a6666

000d4b88 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d4b88:	b500      	push	{lr}
   d4b8a:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d4b8c:	4668      	mov	r0, sp
   d4b8e:	f7ff fc0f 	bl	d43b0 <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d4b92:	a808      	add	r0, sp, #32
   d4b94:	f7ff fc0c 	bl	d43b0 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4b98:	2100      	movs	r1, #0
   d4b9a:	a808      	add	r0, sp, #32
   d4b9c:	f003 fa28 	bl	d7ff0 <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d4ba0:	4b13      	ldr	r3, [pc, #76]	; (d4bf0 <_Z14setPowerConfigv+0x68>)
   d4ba2:	7959      	ldrb	r1, [r3, #5]
   d4ba4:	b1a1      	cbz	r1, d4bd0 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4ba6:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4baa:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4bae:	4b11      	ldr	r3, [pc, #68]	; (d4bf4 <_Z14setPowerConfigv+0x6c>)
   d4bb0:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4bb2:	f241 0370 	movw	r3, #4208	; 0x1070
   d4bb6:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4bba:	9b00      	ldr	r3, [sp, #0]
   d4bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4bc0:	9300      	str	r3, [sp, #0]
   d4bc2:	2100      	movs	r1, #0
   d4bc4:	4668      	mov	r0, sp
   d4bc6:	f003 fa13 	bl	d7ff0 <system_power_management_set_config>
}
   d4bca:	b011      	add	sp, #68	; 0x44
   d4bcc:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d4bd0:	f241 0370 	movw	r3, #4208	; 0x1070
   d4bd4:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4bd8:	4b07      	ldr	r3, [pc, #28]	; (d4bf8 <_Z14setPowerConfigv+0x70>)
   d4bda:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4bdc:	f241 0310 	movw	r3, #4112	; 0x1010
   d4be0:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d4be4:	9b00      	ldr	r3, [sp, #0]
   d4be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4bea:	9300      	str	r3, [sp, #0]
   d4bec:	e7ea      	b.n	d4bc4 <_Z14setPowerConfigv+0x3c>
   d4bee:	bf00      	nop
   d4bf0:	2003e4bc 	.word	0x2003e4bc
   d4bf4:	04000384 	.word	0x04000384
   d4bf8:	03840384 	.word	0x03840384

000d4bfc <_Z12setSolarMode6String>:
{
   d4bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4bfe:	491b      	ldr	r1, [pc, #108]	; (d4c6c <_Z12setSolarMode6String+0x70>)
   d4c00:	4605      	mov	r5, r0
   d4c02:	f005 fe78 	bl	da8f6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4c06:	4604      	mov	r4, r0
   d4c08:	b1c0      	cbz	r0, d4c3c <_Z12setSolarMode6String+0x40>
    sysStatus.solarPowerMode = true;
   d4c0a:	4d19      	ldr	r5, [pc, #100]	; (d4c70 <_Z12setSolarMode6String+0x74>)
   d4c0c:	2401      	movs	r4, #1
   d4c0e:	716c      	strb	r4, [r5, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4c10:	f7ff ffba 	bl	d4b88 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4c14:	4b17      	ldr	r3, [pc, #92]	; (d4c74 <_Z12setSolarMode6String+0x78>)
   d4c16:	701c      	strb	r4, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4c18:	78eb      	ldrb	r3, [r5, #3]
   d4c1a:	b913      	cbnz	r3, d4c22 <_Z12setSolarMode6String+0x26>
    return 1;
   d4c1c:	2001      	movs	r0, #1
}
   d4c1e:	b003      	add	sp, #12
   d4c20:	bd30      	pop	{r4, r5, pc}
   d4c22:	4b15      	ldr	r3, [pc, #84]	; (d4c78 <_Z12setSolarMode6String+0x7c>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4c24:	4a15      	ldr	r2, [pc, #84]	; (d4c7c <_Z12setSolarMode6String+0x80>)
   d4c26:	781b      	ldrb	r3, [r3, #0]
   d4c28:	f88d 3000 	strb.w	r3, [sp]
   d4c2c:	4b14      	ldr	r3, [pc, #80]	; (d4c80 <_Z12setSolarMode6String+0x84>)
   d4c2e:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4c30:	4914      	ldr	r1, [pc, #80]	; (d4c84 <_Z12setSolarMode6String+0x88>)
   d4c32:	4815      	ldr	r0, [pc, #84]	; (d4c88 <_Z12setSolarMode6String+0x8c>)
   d4c34:	f7ff fc55 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4c38:	4620      	mov	r0, r4
   d4c3a:	e7f0      	b.n	d4c1e <_Z12setSolarMode6String+0x22>
   d4c3c:	4913      	ldr	r1, [pc, #76]	; (d4c8c <_Z12setSolarMode6String+0x90>)
   d4c3e:	4628      	mov	r0, r5
   d4c40:	f005 fe59 	bl	da8f6 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4c44:	2800      	cmp	r0, #0
   d4c46:	d0ea      	beq.n	d4c1e <_Z12setSolarMode6String+0x22>
    sysStatus.solarPowerMode = false;
   d4c48:	4d09      	ldr	r5, [pc, #36]	; (d4c70 <_Z12setSolarMode6String+0x74>)
    systemStatusWriteNeeded=true;
   d4c4a:	4b0a      	ldr	r3, [pc, #40]	; (d4c74 <_Z12setSolarMode6String+0x78>)
    sysStatus.solarPowerMode = false;
   d4c4c:	716c      	strb	r4, [r5, #5]
    systemStatusWriteNeeded=true;
   d4c4e:	2401      	movs	r4, #1
   d4c50:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4c52:	f7ff ff99 	bl	d4b88 <_Z14setPowerConfigv>
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4c56:	78eb      	ldrb	r3, [r5, #3]
   d4c58:	2b00      	cmp	r3, #0
   d4c5a:	d0df      	beq.n	d4c1c <_Z12setSolarMode6String+0x20>
   d4c5c:	4b06      	ldr	r3, [pc, #24]	; (d4c78 <_Z12setSolarMode6String+0x7c>)
   d4c5e:	4a0c      	ldr	r2, [pc, #48]	; (d4c90 <_Z12setSolarMode6String+0x94>)
   d4c60:	781b      	ldrb	r3, [r3, #0]
   d4c62:	f88d 3000 	strb.w	r3, [sp]
   d4c66:	4b06      	ldr	r3, [pc, #24]	; (d4c80 <_Z12setSolarMode6String+0x84>)
   d4c68:	781b      	ldrb	r3, [r3, #0]
   d4c6a:	e7e1      	b.n	d4c30 <_Z12setSolarMode6String+0x34>
   d4c6c:	000dc22c 	.word	0x000dc22c
   d4c70:	2003e4bc 	.word	0x2003e4bc
   d4c74:	2003e4e8 	.word	0x2003e4e8
   d4c78:	2003e369 	.word	0x2003e369
   d4c7c:	000dc435 	.word	0x000dc435
   d4c80:	2003e368 	.word	0x2003e368
   d4c84:	000dc462 	.word	0x000dc462
   d4c88:	2003e474 	.word	0x2003e474
   d4c8c:	000dc46e 	.word	0x000dc46e
   d4c90:	000dc44c 	.word	0x000dc44c

000d4c94 <_Z17checkSystemValuesv>:
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4c94:	4b24      	ldr	r3, [pc, #144]	; (d4d28 <_Z17checkSystemValuesv+0x94>)
   d4c96:	691a      	ldr	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4c98:	edd3 7a05 	vldr	s15, [r3, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4c9c:	2aff      	cmp	r2, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4c9e:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4ca2:	bf88      	it	hi
   d4ca4:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4caa:	bf88      	it	hi
   d4cac:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4cb2:	d406      	bmi.n	d4cc2 <_Z17checkSystemValuesv+0x2e>
   d4cb4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4cc0:	dd01      	ble.n	d4cc6 <_Z17checkSystemValuesv+0x32>
   d4cc2:	4a1a      	ldr	r2, [pc, #104]	; (d4d2c <_Z17checkSystemValuesv+0x98>)
   d4cc4:	615a      	str	r2, [r3, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4cc6:	edd3 7a06 	vldr	s15, [r3, #24]
   d4cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4cd2:	d406      	bmi.n	d4ce2 <_Z17checkSystemValuesv+0x4e>
   d4cd4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ce0:	dd02      	ble.n	d4ce8 <_Z17checkSystemValuesv+0x54>
   d4ce2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d4ce6:	619a      	str	r2, [r3, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d4ce8:	7f1a      	ldrb	r2, [r3, #28]
   d4cea:	2a0c      	cmp	r2, #12
   d4cec:	bf84      	itt	hi
   d4cee:	2200      	movhi	r2, #0
   d4cf0:	771a      	strbhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4cf2:	7f5a      	ldrb	r2, [r3, #29]
   d4cf4:	3a0c      	subs	r2, #12
   d4cf6:	2a0c      	cmp	r2, #12
   d4cf8:	bf84      	itt	hi
   d4cfa:	2218      	movhi	r2, #24
   d4cfc:	775a      	strbhi	r2, [r3, #29]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4cfe:	4a0c      	ldr	r2, [pc, #48]	; (d4d30 <_Z17checkSystemValuesv+0x9c>)
   d4d00:	6811      	ldr	r1, [r2, #0]
   d4d02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   d4d04:	428a      	cmp	r2, r1
   d4d06:	bf84      	itt	hi
   d4d08:	2200      	movhi	r2, #0
   d4d0a:	851a      	strhhi	r2, [r3, #40]	; 0x28
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4d0c:	2201      	movs	r2, #1
   d4d0e:	715a      	strb	r2, [r3, #5]
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4d10:	4b08      	ldr	r3, [pc, #32]	; (d4d34 <_Z17checkSystemValuesv+0xa0>)
   d4d12:	8b98      	ldrh	r0, [r3, #28]
   d4d14:	4281      	cmp	r1, r0
    current.maxConnectTime = 0;
   d4d16:	bf3f      	itttt	cc
   d4d18:	2100      	movcc	r1, #0
   d4d1a:	8399      	strhcc	r1, [r3, #28]
    currentCountsWriteNeeded = true;
   d4d1c:	4b06      	ldrcc	r3, [pc, #24]	; (d4d38 <_Z17checkSystemValuesv+0xa4>)
   d4d1e:	701a      	strbcc	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   d4d20:	4b06      	ldr	r3, [pc, #24]	; (d4d3c <_Z17checkSystemValuesv+0xa8>)
   d4d22:	2201      	movs	r2, #1
   d4d24:	701a      	strb	r2, [r3, #0]
}
   d4d26:	4770      	bx	lr
   d4d28:	2003e4bc 	.word	0x2003e4bc
   d4d2c:	c0a00000 	.word	0xc0a00000
   d4d30:	2003e20c 	.word	0x2003e20c
   d4d34:	2003e3e4 	.word	0x2003e3e4
   d4d38:	2003e408 	.word	0x2003e408
   d4d3c:	2003e4e8 	.word	0x2003e4e8

000d4d40 <_Z21makeUpParkHourStringsv>:
void makeUpParkHourStrings() {
   d4d40:	b510      	push	{r4, lr}
  if (sysStatus.openTime == 0 && sysStatus.closeTime == 24) {
   d4d42:	4c0e      	ldr	r4, [pc, #56]	; (d4d7c <_Z21makeUpParkHourStringsv+0x3c>)
   d4d44:	8ba3      	ldrh	r3, [r4, #28]
   d4d46:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4d4a:	d109      	bne.n	d4d60 <_Z21makeUpParkHourStringsv+0x20>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   d4d4c:	490c      	ldr	r1, [pc, #48]	; (d4d80 <_Z21makeUpParkHourStringsv+0x40>)
   d4d4e:	480d      	ldr	r0, [pc, #52]	; (d4d84 <_Z21makeUpParkHourStringsv+0x44>)
   d4d50:	f007 f955 	bl	dbffe <strcpy>
}
   d4d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   d4d58:	4909      	ldr	r1, [pc, #36]	; (d4d80 <_Z21makeUpParkHourStringsv+0x40>)
   d4d5a:	480b      	ldr	r0, [pc, #44]	; (d4d88 <_Z21makeUpParkHourStringsv+0x48>)
   d4d5c:	f007 b94f 	b.w	dbffe <strcpy>
  snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.openTime);
   d4d60:	7f23      	ldrb	r3, [r4, #28]
   d4d62:	4a0a      	ldr	r2, [pc, #40]	; (d4d8c <_Z21makeUpParkHourStringsv+0x4c>)
   d4d64:	4807      	ldr	r0, [pc, #28]	; (d4d84 <_Z21makeUpParkHourStringsv+0x44>)
   d4d66:	2108      	movs	r1, #8
   d4d68:	f003 fa50 	bl	d820c <snprintf>
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4d6c:	7f63      	ldrb	r3, [r4, #29]
   d4d6e:	4a07      	ldr	r2, [pc, #28]	; (d4d8c <_Z21makeUpParkHourStringsv+0x4c>)
   d4d70:	4805      	ldr	r0, [pc, #20]	; (d4d88 <_Z21makeUpParkHourStringsv+0x48>)
}
   d4d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4d76:	2108      	movs	r1, #8
   d4d78:	f003 ba48 	b.w	d820c <snprintf>
   d4d7c:	2003e4bc 	.word	0x2003e4bc
   d4d80:	000dc467 	.word	0x000dc467
   d4d84:	2003e216 	.word	0x2003e216
   d4d88:	2003e204 	.word	0x2003e204
   d4d8c:	000dc46a 	.word	0x000dc46a

000d4d90 <_Z11setOpenTime6String>:
{
   d4d90:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4d92:	220a      	movs	r2, #10
   d4d94:	6800      	ldr	r0, [r0, #0]
   d4d96:	a901      	add	r1, sp, #4
   d4d98:	f007 fa12 	bl	dc1c0 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4d9c:	2817      	cmp	r0, #23
   d4d9e:	d80c      	bhi.n	d4dba <_Z11setOpenTime6String+0x2a>
  sysStatus.openTime = tempTime;
   d4da0:	4c07      	ldr	r4, [pc, #28]	; (d4dc0 <_Z11setOpenTime6String+0x30>)
   d4da2:	7720      	strb	r0, [r4, #28]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4da4:	f7ff ffcc 	bl	d4d40 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4da8:	4b06      	ldr	r3, [pc, #24]	; (d4dc4 <_Z11setOpenTime6String+0x34>)
   d4daa:	2001      	movs	r0, #1
   d4dac:	7018      	strb	r0, [r3, #0]
  if (sysStatus.connectedStatus) {
   d4dae:	78e3      	ldrb	r3, [r4, #3]
   d4db0:	b10b      	cbz	r3, d4db6 <_Z11setOpenTime6String+0x26>
   d4db2:	f7ff fc5f 	bl	d4674 <_Z11setOpenTime6String.part.0>
}
   d4db6:	b002      	add	sp, #8
   d4db8:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4dba:	2000      	movs	r0, #0
   d4dbc:	e7fb      	b.n	d4db6 <_Z11setOpenTime6String+0x26>
   d4dbe:	bf00      	nop
   d4dc0:	2003e4bc 	.word	0x2003e4bc
   d4dc4:	2003e4e8 	.word	0x2003e4e8

000d4dc8 <_Z12setCloseTime6String>:
{
   d4dc8:	b530      	push	{r4, r5, lr}
   d4dca:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4dcc:	6800      	ldr	r0, [r0, #0]
   d4dce:	220a      	movs	r2, #10
   d4dd0:	a903      	add	r1, sp, #12
   d4dd2:	f007 f9f5 	bl	dc1c0 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4dd6:	2818      	cmp	r0, #24
   d4dd8:	d81c      	bhi.n	d4e14 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
   d4dda:	4d10      	ldr	r5, [pc, #64]	; (d4e1c <_Z12setCloseTime6String+0x54>)
   d4ddc:	7768      	strb	r0, [r5, #29]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4dde:	f7ff ffaf 	bl	d4d40 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4de2:	4b0f      	ldr	r3, [pc, #60]	; (d4e20 <_Z12setCloseTime6String+0x58>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4de4:	4a0f      	ldr	r2, [pc, #60]	; (d4e24 <_Z12setCloseTime6String+0x5c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4de6:	2401      	movs	r4, #1
   d4de8:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4dea:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4dee:	7f6b      	ldrb	r3, [r5, #29]
   d4df0:	a804      	add	r0, sp, #16
   d4df2:	f003 fa0b 	bl	d820c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4df6:	78eb      	ldrb	r3, [r5, #3]
   d4df8:	b153      	cbz	r3, d4e10 <_Z12setCloseTime6String+0x48>
   d4dfa:	4b0b      	ldr	r3, [pc, #44]	; (d4e28 <_Z12setCloseTime6String+0x60>)
   d4dfc:	490b      	ldr	r1, [pc, #44]	; (d4e2c <_Z12setCloseTime6String+0x64>)
   d4dfe:	781b      	ldrb	r3, [r3, #0]
   d4e00:	f88d 3000 	strb.w	r3, [sp]
   d4e04:	4b0a      	ldr	r3, [pc, #40]	; (d4e30 <_Z12setCloseTime6String+0x68>)
   d4e06:	480b      	ldr	r0, [pc, #44]	; (d4e34 <_Z12setCloseTime6String+0x6c>)
   d4e08:	781b      	ldrb	r3, [r3, #0]
   d4e0a:	aa04      	add	r2, sp, #16
   d4e0c:	f7ff fb69 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d4e10:	4620      	mov	r0, r4
   d4e12:	e000      	b.n	d4e16 <_Z12setCloseTime6String+0x4e>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4e14:	2000      	movs	r0, #0
}
   d4e16:	b045      	add	sp, #276	; 0x114
   d4e18:	bd30      	pop	{r4, r5, pc}
   d4e1a:	bf00      	nop
   d4e1c:	2003e4bc 	.word	0x2003e4bc
   d4e20:	2003e4e8 	.word	0x2003e4e8
   d4e24:	000dc470 	.word	0x000dc470
   d4e28:	2003e369 	.word	0x2003e369
   d4e2c:	000dc523 	.word	0x000dc523
   d4e30:	2003e368 	.word	0x2003e368
   d4e34:	2003e474 	.word	0x2003e474

000d4e38 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d4e38:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d4e3a:	4c0a      	ldr	r4, [pc, #40]	; (d4e64 <_Z15resetEverythingv+0x2c>)
   d4e3c:	2500      	movs	r5, #0
  current.hourlyCountInFlight = 0;
   d4e3e:	e9c4 5500 	strd	r5, r5, [r4]
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d4e42:	60a5      	str	r5, [r4, #8]
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d4e44:	f006 f847 	bl	daed6 <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4e48:	4b07      	ldr	r3, [pc, #28]	; (d4e68 <_Z15resetEverythingv+0x30>)
  currentCountsWriteNeeded = true;
   d4e4a:	4a08      	ldr	r2, [pc, #32]	; (d4e6c <_Z15resetEverythingv+0x34>)
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4e4c:	611d      	str	r5, [r3, #16]
  current.minBatteryLevel = 100;
   d4e4e:	2364      	movs	r3, #100	; 0x64
   d4e50:	6223      	str	r3, [r4, #32]
  currentCountsWriteNeeded = true;
   d4e52:	2301      	movs	r3, #1
   d4e54:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d4e56:	4a06      	ldr	r2, [pc, #24]	; (d4e70 <_Z15resetEverythingv+0x38>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d4e58:	60e0      	str	r0, [r4, #12]
  systemStatusWriteNeeded=true;
   d4e5a:	7013      	strb	r3, [r2, #0]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d4e5c:	6165      	str	r5, [r4, #20]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d4e5e:	83a5      	strh	r5, [r4, #28]
}
   d4e60:	bd38      	pop	{r3, r4, r5, pc}
   d4e62:	bf00      	nop
   d4e64:	2003e3e4 	.word	0x2003e3e4
   d4e68:	2003e4bc 	.word	0x2003e4bc
   d4e6c:	2003e408 	.word	0x2003e408
   d4e70:	2003e4e8 	.word	0x2003e4e8

000d4e74 <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition to the Log Handler and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d4e74:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4e76:	4d14      	ldr	r5, [pc, #80]	; (d4ec8 <_Z22publishStateTransitionv+0x54>)
   d4e78:	4c14      	ldr	r4, [pc, #80]	; (d4ecc <_Z22publishStateTransitionv+0x58>)
   d4e7a:	4915      	ldr	r1, [pc, #84]	; (d4ed0 <_Z22publishStateTransitionv+0x5c>)
   d4e7c:	782a      	ldrb	r2, [r5, #0]
   d4e7e:	7820      	ldrb	r0, [r4, #0]
{
   d4e80:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4e82:	230e      	movs	r3, #14
   d4e84:	fb03 1202 	mla	r2, r3, r2, r1
   d4e88:	9200      	str	r2, [sp, #0]
   d4e8a:	fb03 1300 	mla	r3, r3, r0, r1
   d4e8e:	4a11      	ldr	r2, [pc, #68]	; (d4ed4 <_Z22publishStateTransitionv+0x60>)
   d4e90:	2128      	movs	r1, #40	; 0x28
   d4e92:	a802      	add	r0, sp, #8
   d4e94:	f003 f9ba 	bl	d820c <snprintf>
  oldState = state;
   d4e98:	782b      	ldrb	r3, [r5, #0]
   d4e9a:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) {
   d4e9c:	4b0e      	ldr	r3, [pc, #56]	; (d4ed8 <_Z22publishStateTransitionv+0x64>)
   d4e9e:	791a      	ldrb	r2, [r3, #4]
   d4ea0:	b182      	cbz	r2, d4ec4 <_Z22publishStateTransitionv+0x50>
    if (sysStatus.connectedStatus) publishQueue.publish("State Transition",stateTransitionString, PRIVATE, WITH_ACK);
   d4ea2:	78db      	ldrb	r3, [r3, #3]
   d4ea4:	b153      	cbz	r3, d4ebc <_Z22publishStateTransitionv+0x48>
   d4ea6:	4b0d      	ldr	r3, [pc, #52]	; (d4edc <_Z22publishStateTransitionv+0x68>)
   d4ea8:	490d      	ldr	r1, [pc, #52]	; (d4ee0 <_Z22publishStateTransitionv+0x6c>)
   d4eaa:	781b      	ldrb	r3, [r3, #0]
   d4eac:	f88d 3000 	strb.w	r3, [sp]
   d4eb0:	4b0c      	ldr	r3, [pc, #48]	; (d4ee4 <_Z22publishStateTransitionv+0x70>)
   d4eb2:	480d      	ldr	r0, [pc, #52]	; (d4ee8 <_Z22publishStateTransitionv+0x74>)
   d4eb4:	781b      	ldrb	r3, [r3, #0]
   d4eb6:	aa02      	add	r2, sp, #8
   d4eb8:	f7ff fb13 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    Log.info(stateTransitionString);
   d4ebc:	480b      	ldr	r0, [pc, #44]	; (d4eec <_Z22publishStateTransitionv+0x78>)
   d4ebe:	a902      	add	r1, sp, #8
   d4ec0:	f7ff fae1 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
  }
}
   d4ec4:	b00d      	add	sp, #52	; 0x34
   d4ec6:	bd30      	pop	{r4, r5, pc}
   d4ec8:	2003e4b1 	.word	0x2003e4b1
   d4ecc:	2003e470 	.word	0x2003e470
   d4ed0:	2003e224 	.word	0x2003e224
   d4ed4:	000dc487 	.word	0x000dc487
   d4ed8:	2003e4bc 	.word	0x2003e4bc
   d4edc:	2003e369 	.word	0x2003e369
   d4ee0:	000dc495 	.word	0x000dc495
   d4ee4:	2003e368 	.word	0x2003e368
   d4ee8:	2003e474 	.word	0x2003e474
   d4eec:	2003e5dc 	.word	0x2003e5dc

000d4ef0 <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details Syncs time with remote service and sets low power mode. Called from Reporting State ONLY.
 * Clean house at the end of the day
 */
void dailyCleanup() {
   d4ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4ef4:	4b22      	ldr	r3, [pc, #136]	; (d4f80 <_Z12dailyCleanupv+0x90>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
  sysStatus.verboseMode = false;
   d4ef6:	4c23      	ldr	r4, [pc, #140]	; (d4f84 <_Z12dailyCleanupv+0x94>)
   d4ef8:	781b      	ldrb	r3, [r3, #0]
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d4efa:	4a23      	ldr	r2, [pc, #140]	; (d4f88 <_Z12dailyCleanupv+0x98>)
   d4efc:	4923      	ldr	r1, [pc, #140]	; (d4f8c <_Z12dailyCleanupv+0x9c>)
   d4efe:	4824      	ldr	r0, [pc, #144]	; (d4f90 <_Z12dailyCleanupv+0xa0>)
void dailyCleanup() {
   d4f00:	b086      	sub	sp, #24
  sysStatus.verboseMode = false;
   d4f02:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d4f04:	f88d 3000 	strb.w	r3, [sp]
   d4f08:	4b22      	ldr	r3, [pc, #136]	; (d4f94 <_Z12dailyCleanupv+0xa4>)
   d4f0a:	781b      	ldrb	r3, [r3, #0]
   d4f0c:	f7ff fae9 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d4f10:	7125      	strb	r5, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f12:	f003 f8ab 	bl	d806c <spark_cloud_flag_connected>
        if (!connected()) {
   d4f16:	b110      	cbz	r0, d4f1e <_Z12dailyCleanupv+0x2e>
        return spark_sync_time(NULL);
   d4f18:	4628      	mov	r0, r5
   d4f1a:	f003 f8c7 	bl	d80ac <spark_sync_time>
        const system_tick_t start = millis();
   d4f1e:	f7ff faaf 	bl	d4480 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4f22:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d4f26:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d4f28:	f247 582f 	movw	r8, #29999	; 0x752f
   d4f2c:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4f30:	f7ff faa6 	bl	d4480 <_ZN11SystemClass6millisEv>
   d4f34:	1b46      	subs	r6, r0, r5
   d4f36:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d4f3a:	45b9      	cmp	r9, r7
   d4f3c:	bf08      	it	eq
   d4f3e:	45b0      	cmpeq	r8, r6
   d4f40:	d305      	bcc.n	d4f4e <_Z12dailyCleanupv+0x5e>
  Particle.syncTime();                                                 // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                // Wait for up to 30 seconds for the SyncTime to complete
   d4f42:	f7ff f9a0 	bl	d4286 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d4f46:	b910      	cbnz	r0, d4f4e <_Z12dailyCleanupv+0x5e>
            spark_process();
   d4f48:	f003 f880 	bl	d804c <spark_process>
        while (_while() && !_condition()) {
   d4f4c:	e7f0      	b.n	d4f30 <_Z12dailyCleanupv+0x40>
   d4f4e:	f7ff f99a 	bl	d4286 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {     // If Solar or if the battery is being discharged
   d4f52:	7963      	ldrb	r3, [r4, #5]
   d4f54:	b913      	cbnz	r3, d4f5c <_Z12dailyCleanupv+0x6c>
   d4f56:	68a3      	ldr	r3, [r4, #8]
   d4f58:	2b46      	cmp	r3, #70	; 0x46
   d4f5a:	dc09      	bgt.n	d4f70 <_Z12dailyCleanupv+0x80>
    setLowPowerMode("1");
   d4f5c:	490e      	ldr	r1, [pc, #56]	; (d4f98 <_Z12dailyCleanupv+0xa8>)
   d4f5e:	a802      	add	r0, sp, #8
   d4f60:	f005 fc73 	bl	da84a <_ZN6StringC1EPKc>
   d4f64:	a802      	add	r0, sp, #8
   d4f66:	f7ff fbe7 	bl	d4738 <_Z15setLowPowerMode6String>
   d4f6a:	a802      	add	r0, sp, #8
   d4f6c:	f005 fc22 	bl	da7b4 <_ZN6StringD1Ev>
  }

  resetEverything();                                               // If so, we need to Zero the counts for the new day
   d4f70:	f7ff ff62 	bl	d4e38 <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d4f74:	4b09      	ldr	r3, [pc, #36]	; (d4f9c <_Z12dailyCleanupv+0xac>)
   d4f76:	2201      	movs	r2, #1
   d4f78:	701a      	strb	r2, [r3, #0]
   d4f7a:	b006      	add	sp, #24
   d4f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f80:	2003e369 	.word	0x2003e369
   d4f84:	2003e4bc 	.word	0x2003e4bc
   d4f88:	000dc4a6 	.word	0x000dc4a6
   d4f8c:	000dc4ae 	.word	0x000dc4ae
   d4f90:	2003e474 	.word	0x2003e474
   d4f94:	2003e368 	.word	0x2003e368
   d4f98:	000dc22c 	.word	0x000dc22c
   d4f9c:	2003e4e8 	.word	0x2003e4e8

000d4fa0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4fa0:	b530      	push	{r4, r5, lr}
   d4fa2:	b085      	sub	sp, #20
   d4fa4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4fa6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4fa8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4faa:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4fac:	f002 ffba 	bl	d7f24 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4fb0:	b9b0      	cbnz	r0, d4fe0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4fb2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4fb4:	b10c      	cbz	r4, d4fba <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4fb6:	6923      	ldr	r3, [r4, #16]
   d4fb8:	b923      	cbnz	r3, d4fc4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4fba:	4a0a      	ldr	r2, [pc, #40]	; (d4fe4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4fbc:	2100      	movs	r1, #0
   d4fbe:	200a      	movs	r0, #10
   d4fc0:	f002 ff88 	bl	d7ed4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4fc4:	2300      	movs	r3, #0
   d4fc6:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4fca:	230c      	movs	r3, #12
   d4fcc:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4fd0:	2304      	movs	r3, #4
   d4fd2:	9303      	str	r3, [sp, #12]
   d4fd4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4fd6:	6923      	ldr	r3, [r4, #16]
   d4fd8:	aa01      	add	r2, sp, #4
   d4fda:	2101      	movs	r1, #1
   d4fdc:	4620      	mov	r0, r4
   d4fde:	4798      	blx	r3
}
   d4fe0:	b005      	add	sp, #20
   d4fe2:	bd30      	pop	{r4, r5, pc}
   d4fe4:	000d7ba5 	.word	0x000d7ba5

000d4fe8 <_Z16takeMeasurementsv>:
{
   d4fe8:	b530      	push	{r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4fea:	4b26      	ldr	r3, [pc, #152]	; (d5084 <_Z16takeMeasurementsv+0x9c>)
   d4fec:	2200      	movs	r2, #0
   d4fee:	b089      	sub	sp, #36	; 0x24
   d4ff0:	6858      	ldr	r0, [r3, #4]
   d4ff2:	4611      	mov	r1, r2
   d4ff4:	f003 f8a2 	bl	d813c <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d4ff8:	b108      	cbz	r0, d4ffe <_Z16takeMeasurementsv+0x16>
   d4ffa:	f7ff fd35 	bl	d4a68 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d4ffe:	f7ff fd6f 	bl	d4ae0 <_Z14getTemperaturev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d5002:	4669      	mov	r1, sp
   d5004:	2007      	movs	r0, #7
   d5006:	f7ff ffcb 	bl	d4fa0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
  sysStatus.batteryState = System.batteryState();                     // Call before isItSafeToCharge() as it may overwrite the context
   d500a:	4c1f      	ldr	r4, [pc, #124]	; (d5088 <_Z16takeMeasurementsv+0xa0>)
   d500c:	4d1f      	ldr	r5, [pc, #124]	; (d508c <_Z16takeMeasurementsv+0xa4>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d500e:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d5010:	bfa8      	it	ge
   d5012:	9800      	ldrge	r0, [sp, #0]
   d5014:	7320      	strb	r0, [r4, #12]
  if (!isItSafeToCharge()) current.alertCount++;                      // Increment the alert count
   d5016:	f7ff fd07 	bl	d4a28 <_Z16isItSafeToChargev>
   d501a:	b910      	cbnz	r0, d5022 <_Z16takeMeasurementsv+0x3a>
   d501c:	696b      	ldr	r3, [r5, #20]
   d501e:	3301      	adds	r3, #1
   d5020:	616b      	str	r3, [r5, #20]
   d5022:	4669      	mov	r1, sp
   d5024:	2003      	movs	r0, #3
   d5026:	f7ff ffbb 	bl	d4fa0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d502a:	bb40      	cbnz	r0, d507e <_Z16takeMeasurementsv+0x96>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d502c:	f8bd 3000 	ldrh.w	r3, [sp]
   d5030:	ee07 3a90 	vmov	s15, r3
   d5034:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d5038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d503c:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5040:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d5042:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5046:	dc09      	bgt.n	d505c <_Z16takeMeasurementsv+0x74>
   d5048:	7b23      	ldrb	r3, [r4, #12]
   d504a:	2b01      	cmp	r3, #1
   d504c:	d106      	bne.n	d505c <_Z16takeMeasurementsv+0x74>
    System.setPowerConfiguration(SystemPowerConfiguration());         // Reset the PMIC
   d504e:	4668      	mov	r0, sp
   d5050:	f7ff f9ae 	bl	d43b0 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d5054:	2100      	movs	r1, #0
   d5056:	4668      	mov	r0, sp
   d5058:	f002 ffca 	bl	d7ff0 <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) current.minBatteryLevel = sysStatus.stateOfCharge; // Keep track of lowest value for the day
   d505c:	68a3      	ldr	r3, [r4, #8]
   d505e:	6a2a      	ldr	r2, [r5, #32]
   d5060:	4293      	cmp	r3, r2
   d5062:	bfb8      	it	lt
   d5064:	622b      	strlt	r3, [r5, #32]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d5066:	2b1d      	cmp	r3, #29
   d5068:	bfcc      	ite	gt
   d506a:	2300      	movgt	r3, #0
   d506c:	2301      	movle	r3, #1
  systemStatusWriteNeeded = true;
   d506e:	4a08      	ldr	r2, [pc, #32]	; (d5090 <_Z16takeMeasurementsv+0xa8>)
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d5070:	71e3      	strb	r3, [r4, #7]
  systemStatusWriteNeeded = true;
   d5072:	2301      	movs	r3, #1
   d5074:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d5076:	4a07      	ldr	r2, [pc, #28]	; (d5094 <_Z16takeMeasurementsv+0xac>)
   d5078:	7013      	strb	r3, [r2, #0]
}
   d507a:	b009      	add	sp, #36	; 0x24
   d507c:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d507e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d5082:	e7d9      	b.n	d5038 <_Z16takeMeasurementsv+0x50>
   d5084:	2003e508 	.word	0x2003e508
   d5088:	2003e4bc 	.word	0x2003e4bc
   d508c:	2003e3e4 	.word	0x2003e3e4
   d5090:	2003e4e8 	.word	0x2003e4e8
   d5094:	2003e408 	.word	0x2003e408

000d5098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5098:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d509a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d509e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d50a0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d50a2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d50a6:	42ae      	cmp	r6, r5
   d50a8:	d004      	beq.n	d50b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d50aa:	4628      	mov	r0, r5
   d50ac:	f005 fb82 	bl	da7b4 <_ZN6StringD1Ev>
   d50b0:	3514      	adds	r5, #20
   d50b2:	e7f8      	b.n	d50a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d50b4:	6820      	ldr	r0, [r4, #0]
   d50b6:	f003 f891 	bl	d81dc <free>
    AllocatorT::free(data_);
}
   d50ba:	4620      	mov	r0, r4
   d50bc:	bd70      	pop	{r4, r5, r6, pc}

000d50be <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d50be:	2300      	movs	r3, #0
   d50c0:	2202      	movs	r2, #2
   d50c2:	f002 bfb3 	b.w	d802c <spark_variable>
	...

000d50c8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>:
    static inline bool function(const T &name, Types ... args)
   d50c8:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d50ca:	4801      	ldr	r0, [pc, #4]	; (d50d0 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_+0x8>)
   d50cc:	f003 bab6 	b.w	d863c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d50d0:	000d8611 	.word	0x000d8611

000d50d4 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d50d4:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d50d6:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d50d8:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d50da:	68dd      	ldr	r5, [r3, #12]
   d50dc:	232c      	movs	r3, #44	; 0x2c
   d50de:	47a8      	blx	r5
    }
   d50e0:	4620      	mov	r0, r4
   d50e2:	bd38      	pop	{r3, r4, r5, pc}

000d50e4 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d50e4:	b570      	push	{r4, r5, r6, lr}
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d50e6:	4b19      	ldr	r3, [pc, #100]	; (d514c <_Z18loadSystemDefaultsv+0x68>)
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d50e8:	4c19      	ldr	r4, [pc, #100]	; (d5150 <_Z18loadSystemDefaultsv+0x6c>)
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d50ea:	2201      	movs	r2, #1
   d50ec:	701a      	strb	r2, [r3, #0]
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d50ee:	78e3      	ldrb	r3, [r4, #3]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d50f0:	b086      	sub	sp, #24
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d50f2:	b153      	cbz	r3, d510a <_Z18loadSystemDefaultsv+0x26>
   d50f4:	4b17      	ldr	r3, [pc, #92]	; (d5154 <_Z18loadSystemDefaultsv+0x70>)
   d50f6:	4a18      	ldr	r2, [pc, #96]	; (d5158 <_Z18loadSystemDefaultsv+0x74>)
   d50f8:	781b      	ldrb	r3, [r3, #0]
   d50fa:	f88d 3000 	strb.w	r3, [sp]
   d50fe:	4b17      	ldr	r3, [pc, #92]	; (d515c <_Z18loadSystemDefaultsv+0x78>)
   d5100:	4917      	ldr	r1, [pc, #92]	; (d5160 <_Z18loadSystemDefaultsv+0x7c>)
   d5102:	781b      	ldrb	r3, [r3, #0]
   d5104:	4817      	ldr	r0, [pc, #92]	; (d5164 <_Z18loadSystemDefaultsv+0x80>)
   d5106:	f7ff f9ec 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d510a:	2500      	movs	r5, #0
  setLowPowerMode("1");
   d510c:	4916      	ldr	r1, [pc, #88]	; (d5168 <_Z18loadSystemDefaultsv+0x84>)
  sysStatus.verboseMode = false;
   d510e:	7125      	strb	r5, [r4, #4]
  sysStatus.structuresVersion = 1;
   d5110:	2601      	movs	r6, #1
  setLowPowerMode("1");
   d5112:	a802      	add	r0, sp, #8
  sysStatus.structuresVersion = 1;
   d5114:	7026      	strb	r6, [r4, #0]
  sysStatus.clockSet = false;
   d5116:	70a5      	strb	r5, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d5118:	71e5      	strb	r5, [r4, #7]
  setLowPowerMode("1");
   d511a:	f005 fb96 	bl	da84a <_ZN6StringC1EPKc>
   d511e:	a802      	add	r0, sp, #8
   d5120:	f7ff fb0a 	bl	d4738 <_Z15setLowPowerMode6String>
   d5124:	a802      	add	r0, sp, #8
   d5126:	f005 fb45 	bl	da7b4 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d512a:	4b10      	ldr	r3, [pc, #64]	; (d516c <_Z18loadSystemDefaultsv+0x88>)
   d512c:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d512e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5132:	61a3      	str	r3, [r4, #24]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5134:	4a06      	ldr	r2, [pc, #24]	; (d5150 <_Z18loadSystemDefaultsv+0x6c>)
   d5136:	480e      	ldr	r0, [pc, #56]	; (d5170 <_Z18loadSystemDefaultsv+0x8c>)
  sysStatus.solarPowerMode = true;  
   d5138:	7166      	strb	r6, [r4, #5]
  sysStatus.openTime = 6;
   d513a:	f241 5306 	movw	r3, #5382	; 0x1506
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d513e:	4631      	mov	r1, r6
  sysStatus.openTime = 6;
   d5140:	83a3      	strh	r3, [r4, #28]
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d5142:	8525      	strh	r5, [r4, #40]	; 0x28
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5144:	f7ff ffc6 	bl	d50d4 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d5148:	b006      	add	sp, #24
   d514a:	bd70      	pop	{r4, r5, r6, pc}
   d514c:	2003e471 	.word	0x2003e471
   d5150:	2003e4bc 	.word	0x2003e4bc
   d5154:	2003e369 	.word	0x2003e369
   d5158:	000dc4bc 	.word	0x000dc4bc
   d515c:	2003e368 	.word	0x2003e368
   d5160:	000dc462 	.word	0x000dc462
   d5164:	2003e474 	.word	0x2003e474
   d5168:	000dc22c 	.word	0x000dc22c
   d516c:	c0a00000 	.word	0xc0a00000
   d5170:	2003e41c 	.word	0x2003e41c
   d5174:	00000000 	.word	0x00000000

000d5178 <setup>:
{
   d5178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d517c:	2100      	movs	r1, #0
{
   d517e:	b0aa      	sub	sp, #168	; 0xa8
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5180:	2008      	movs	r0, #8
   d5182:	f006 f901 	bl	db388 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5186:	2100      	movs	r1, #0
   d5188:	2004      	movs	r0, #4
   d518a:	f006 f8fd 	bl	db388 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d518e:	2101      	movs	r1, #1
   d5190:	2007      	movs	r0, #7
   d5192:	f006 f8f9 	bl	db388 <pinMode>
  pinMode(intPin,INPUT);                            // sensor interrupt
   d5196:	2100      	movs	r1, #0
   d5198:	2002      	movs	r0, #2
   d519a:	f006 f8f5 	bl	db388 <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d519e:	2101      	movs	r1, #1
   d51a0:	2007      	movs	r0, #7
   d51a2:	f006 f902 	bl	db3aa <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d51a6:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d51a8:	2400      	movs	r4, #0
   d51aa:	f002 ff67 	bl	d807c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d51ae:	2300      	movs	r3, #0
   d51b0:	227d      	movs	r2, #125	; 0x7d
   d51b2:	a90a      	add	r1, sp, #40	; 0x28
   d51b4:	a806      	add	r0, sp, #24
   d51b6:	f005 fbb0 	bl	da91a <_ZNK6String8getBytesEPhjj>
   d51ba:	49bd      	ldr	r1, [pc, #756]	; (d54b0 <setup+0x338>)
   d51bc:	4fbd      	ldr	r7, [pc, #756]	; (d54b4 <setup+0x33c>)
   d51be:	4dbe      	ldr	r5, [pc, #760]	; (d54b8 <setup+0x340>)
   d51c0:	f8df 83f8 	ldr.w	r8, [pc, #1016]	; d55bc <setup+0x444>
   d51c4:	4623      	mov	r3, r4
   d51c6:	4622      	mov	r2, r4
   d51c8:	e9cd 4400 	strd	r4, r4, [sp]
   d51cc:	a80a      	add	r0, sp, #40	; 0x28
   d51ce:	f002 ff65 	bl	d809c <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d51d2:	4623      	mov	r3, r4
   d51d4:	2202      	movs	r2, #2
   d51d6:	49b7      	ldr	r1, [pc, #732]	; (d54b4 <setup+0x33c>)
   d51d8:	48b8      	ldr	r0, [pc, #736]	; (d54bc <setup+0x344>)
   d51da:	f002 ff27 	bl	d802c <spark_variable>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d51de:	49b8      	ldr	r1, [pc, #736]	; (d54c0 <setup+0x348>)
   d51e0:	48b8      	ldr	r0, [pc, #736]	; (d54c4 <setup+0x34c>)
   d51e2:	f7ff ff6c 	bl	d50be <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return _variable(varKey, var, STRING);
   d51e6:	49b8      	ldr	r1, [pc, #736]	; (d54c8 <setup+0x350>)
   d51e8:	48b8      	ldr	r0, [pc, #736]	; (d54cc <setup+0x354>)
   d51ea:	f7ff f859 	bl	d42a0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d51ee:	49b8      	ldr	r1, [pc, #736]	; (d54d0 <setup+0x358>)
   d51f0:	48b8      	ldr	r0, [pc, #736]	; (d54d4 <setup+0x35c>)
   d51f2:	f7ff ff64 	bl	d50be <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d51f6:	4623      	mov	r3, r4
   d51f8:	2202      	movs	r2, #2
   d51fa:	49b7      	ldr	r1, [pc, #732]	; (d54d8 <setup+0x360>)
   d51fc:	48b7      	ldr	r0, [pc, #732]	; (d54dc <setup+0x364>)
   d51fe:	f002 ff15 	bl	d802c <spark_variable>
        return _variable(varKey, var, STRING);
   d5202:	49b7      	ldr	r1, [pc, #732]	; (d54e0 <setup+0x368>)
   d5204:	48b7      	ldr	r0, [pc, #732]	; (d54e4 <setup+0x36c>)
   d5206:	f7ff f84b 	bl	d42a0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d520a:	49b7      	ldr	r1, [pc, #732]	; (d54e8 <setup+0x370>)
   d520c:	48b7      	ldr	r0, [pc, #732]	; (d54ec <setup+0x374>)
   d520e:	f7ff ff56 	bl	d50be <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
   d5212:	49b7      	ldr	r1, [pc, #732]	; (d54f0 <setup+0x378>)
   d5214:	48b7      	ldr	r0, [pc, #732]	; (d54f4 <setup+0x37c>)
   d5216:	f7ff f843 	bl	d42a0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d521a:	49b7      	ldr	r1, [pc, #732]	; (d54f8 <setup+0x380>)
   d521c:	48b7      	ldr	r0, [pc, #732]	; (d54fc <setup+0x384>)
   d521e:	f7ff f83f 	bl	d42a0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5222:	49b7      	ldr	r1, [pc, #732]	; (d5500 <setup+0x388>)
   d5224:	48b7      	ldr	r0, [pc, #732]	; (d5504 <setup+0x38c>)
   d5226:	f7ff f83b 	bl	d42a0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d522a:	4623      	mov	r3, r4
   d522c:	2202      	movs	r2, #2
   d522e:	49b6      	ldr	r1, [pc, #728]	; (d5508 <setup+0x390>)
   d5230:	48b6      	ldr	r0, [pc, #728]	; (d550c <setup+0x394>)
   d5232:	f002 fefb 	bl	d802c <spark_variable>
        return _variable(varKey, var, STRING);
   d5236:	49b6      	ldr	r1, [pc, #728]	; (d5510 <setup+0x398>)
   d5238:	48b6      	ldr	r0, [pc, #728]	; (d5514 <setup+0x39c>)
   d523a:	f7ff f831 	bl	d42a0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d523e:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d5240:	e9cd 4403 	strd	r4, r4, [sp, #12]
        extra.size = sizeof(extra);
   d5244:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d5248:	4bb3      	ldr	r3, [pc, #716]	; (d5518 <setup+0x3a0>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d524a:	49b4      	ldr	r1, [pc, #720]	; (d551c <setup+0x3a4>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d524c:	9305      	str	r3, [sp, #20]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d524e:	2204      	movs	r2, #4
   d5250:	ab03      	add	r3, sp, #12
   d5252:	48b3      	ldr	r0, [pc, #716]	; (d5520 <setup+0x3a8>)
   d5254:	f002 feea 	bl	d802c <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d5258:	4ab2      	ldr	r2, [pc, #712]	; (d5524 <setup+0x3ac>)
   d525a:	49b3      	ldr	r1, [pc, #716]	; (d5528 <setup+0x3b0>)
   d525c:	48b3      	ldr	r0, [pc, #716]	; (d552c <setup+0x3b4>)
   d525e:	f003 f9ed 	bl	d863c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5262:	4ab3      	ldr	r2, [pc, #716]	; (d5530 <setup+0x3b8>)
   d5264:	49b3      	ldr	r1, [pc, #716]	; (d5534 <setup+0x3bc>)
   d5266:	48b1      	ldr	r0, [pc, #708]	; (d552c <setup+0x3b4>)
   d5268:	f003 f9e8 	bl	d863c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d526c:	4ab2      	ldr	r2, [pc, #712]	; (d5538 <setup+0x3c0>)
   d526e:	49b3      	ldr	r1, [pc, #716]	; (d553c <setup+0x3c4>)
   d5270:	48ae      	ldr	r0, [pc, #696]	; (d552c <setup+0x3b4>)
   d5272:	f003 f9e3 	bl	d863c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d5276:	4ab2      	ldr	r2, [pc, #712]	; (d5540 <setup+0x3c8>)
   d5278:	49b2      	ldr	r1, [pc, #712]	; (d5544 <setup+0x3cc>)
   d527a:	48ac      	ldr	r0, [pc, #688]	; (d552c <setup+0x3b4>)
   d527c:	f003 f9de 	bl	d863c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("LowPowerMode",setLowPowerMode);
   d5280:	49b1      	ldr	r1, [pc, #708]	; (d5548 <setup+0x3d0>)
   d5282:	48b2      	ldr	r0, [pc, #712]	; (d554c <setup+0x3d4>)
   d5284:	f7ff ff20 	bl	d50c8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
   d5288:	4ab1      	ldr	r2, [pc, #708]	; (d5550 <setup+0x3d8>)
   d528a:	49b2      	ldr	r1, [pc, #712]	; (d5554 <setup+0x3dc>)
   d528c:	48a7      	ldr	r0, [pc, #668]	; (d552c <setup+0x3b4>)
   d528e:	f003 f9d5 	bl	d863c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Verbose-Mode",setVerboseMode);
   d5292:	49b1      	ldr	r1, [pc, #708]	; (d5558 <setup+0x3e0>)
   d5294:	48b1      	ldr	r0, [pc, #708]	; (d555c <setup+0x3e4>)
   d5296:	f7ff ff17 	bl	d50c8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
   d529a:	49b1      	ldr	r1, [pc, #708]	; (d5560 <setup+0x3e8>)
   d529c:	48b1      	ldr	r0, [pc, #708]	; (d5564 <setup+0x3ec>)
   d529e:	f7ff ff13 	bl	d50c8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
   d52a2:	4ab1      	ldr	r2, [pc, #708]	; (d5568 <setup+0x3f0>)
   d52a4:	49b1      	ldr	r1, [pc, #708]	; (d556c <setup+0x3f4>)
   d52a6:	48a1      	ldr	r0, [pc, #644]	; (d552c <setup+0x3b4>)
   d52a8:	f003 f9c8 	bl	d863c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Set-OpenTime",setOpenTime);
   d52ac:	49b0      	ldr	r1, [pc, #704]	; (d5570 <setup+0x3f8>)
   d52ae:	48b1      	ldr	r0, [pc, #708]	; (d5574 <setup+0x3fc>)
   d52b0:	f7ff ff0a 	bl	d50c8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
   d52b4:	49b0      	ldr	r1, [pc, #704]	; (d5578 <setup+0x400>)
   d52b6:	4ab1      	ldr	r2, [pc, #708]	; (d557c <setup+0x404>)
   d52b8:	489c      	ldr	r0, [pc, #624]	; (d552c <setup+0x3b4>)
   d52ba:	f003 f9bf 	bl	d863c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        graceful_(graceful),
        clearSession_(clearSession) {
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d52be:	2601      	movs	r6, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d52c0:	2203      	movs	r2, #3
   d52c2:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d52c6:	a803      	add	r0, sp, #12
   d52c8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    graceful_ = enabled;
   d52cc:	f8ad 6014 	strh.w	r6, [sp, #20]
   d52d0:	f003 f9df 	bl	d8692 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  fram.begin();                                                       // Initialize the FRAM module
   d52d4:	48aa      	ldr	r0, [pc, #680]	; (d5580 <setup+0x408>)
   d52d6:	f001 fe91 	bl	d6ffc <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d52da:	4633      	mov	r3, r6
   d52dc:	48a8      	ldr	r0, [pc, #672]	; (d5580 <setup+0x408>)
   d52de:	f10d 020b 	add.w	r2, sp, #11
   d52e2:	4621      	mov	r1, r4
   d52e4:	f001 fecc 	bl	d7080 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d52e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d52ec:	2b03      	cmp	r3, #3
   d52ee:	f000 80cc 	beq.w	d548a <setup+0x312>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d52f2:	48a3      	ldr	r0, [pc, #652]	; (d5580 <setup+0x408>)
   d52f4:	f001 fe8c 	bl	d7010 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d52f8:	4aa2      	ldr	r2, [pc, #648]	; (d5584 <setup+0x40c>)
   d52fa:	48a1      	ldr	r0, [pc, #644]	; (d5580 <setup+0x408>)
   d52fc:	2304      	movs	r3, #4
   d52fe:	4621      	mov	r1, r4
   d5300:	f001 ff09 	bl	d7116 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5304:	4633      	mov	r3, r6
   d5306:	489e      	ldr	r0, [pc, #632]	; (d5580 <setup+0x408>)
   d5308:	f10d 020b 	add.w	r2, sp, #11
   d530c:	4621      	mov	r1, r4
   d530e:	f001 feb7 	bl	d7080 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d5312:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5316:	2b03      	cmp	r3, #3
   d5318:	f000 80b4 	beq.w	d5484 <setup+0x30c>
      Log.info("FRAM Test Error");
   d531c:	499a      	ldr	r1, [pc, #616]	; (d5588 <setup+0x410>)
   d531e:	489b      	ldr	r0, [pc, #620]	; (d558c <setup+0x414>)
      state = ERROR_STATE;                                            // Device will not work without FRAM
   d5320:	f888 6000 	strb.w	r6, [r8]
      Log.info("FRAM Test Error");
   d5324:	f7ff f8af 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d5328:	4c99      	ldr	r4, [pc, #612]	; (d5590 <setup+0x418>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d532a:	f7ff fcb3 	bl	d4c94 <_Z17checkSystemValuesv>
  makeUpParkHourStrings();                                            // Create the strings for the console
   d532e:	f7ff fd07 	bl	d4d40 <_Z21makeUpParkHourStringsv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d5332:	4a98      	ldr	r2, [pc, #608]	; (d5594 <setup+0x41c>)
   d5334:	2300      	movs	r3, #0
   d5336:	2100      	movs	r1, #0
   d5338:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d533c:	f002 fe14 	bl	d7f68 <system_subscribe_event>
   d5340:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();                                        // The carrier board has D8 connected to FOUT for wake interrupts
   d5342:	2101      	movs	r1, #1
   d5344:	4620      	mov	r0, r4
   d5346:	8163      	strh	r3, [r4, #10]
   d5348:	f001 fd0a 	bl	d6d60 <_ZN6AB18055setupEb>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d534c:	2301      	movs	r3, #1
   d534e:	461a      	mov	r2, r3
   d5350:	2110      	movs	r1, #16
   d5352:	4620      	mov	r0, r4
   d5354:	f001 fa6f 	bl	d6836 <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                        // Enable watchdog
   d5358:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet = ab1805.isRTCSet();                             // Note whether the RTC is set 
   d535a:	70a8      	strb	r0, [r5, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                        // Enable watchdog
   d535c:	4620      	mov	r0, r4
   d535e:	f001 f9e7 	bl	d6730 <_ZN6AB18056setWDTEi>
  Time.setDSTOffset(sysStatus.dstOffset);                             // Set the value from FRAM if in limits
   d5362:	ed95 0a06 	vldr	s0, [r5, #24]
   d5366:	f005 fc6d 	bl	dac44 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                       // Perform the DST calculation here
   d536a:	f001 f819 	bl	d63a0 <_Z8isDSTusav>
   d536e:	2800      	cmp	r0, #0
   d5370:	f000 8126 	beq.w	d55c0 <setup+0x448>
   d5374:	f005 fc84 	bl	dac80 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                      // Set the Time Zone for our device
   d5378:	ed95 0a05 	vldr	s0, [r5, #20]
   d537c:	f005 fc42 	bl	dac04 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5380:	f005 fdee 	bl	daf60 <_ZN9TimeClass5localEv>
   d5384:	4604      	mov	r4, r0
   d5386:	f005 fda6 	bl	daed6 <_ZN9TimeClass3nowEv>
   d538a:	1a20      	subs	r0, r4, r0
   d538c:	f006 fa30 	bl	db7f0 <__aeabi_i2d>
   d5390:	a345      	add	r3, pc, #276	; (adr r3, d54a8 <setup+0x330>)
   d5392:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5396:	f006 fbbf 	bl	dbb18 <__aeabi_ddiv>
   d539a:	4a7f      	ldr	r2, [pc, #508]	; (d5598 <setup+0x420>)
   d539c:	e9cd 0100 	strd	r0, r1, [sp]
   d53a0:	210a      	movs	r1, #10
   d53a2:	485b      	ldr	r0, [pc, #364]	; (d5510 <setup+0x398>)
   d53a4:	f002 ff32 	bl	d820c <snprintf>
  accel.begin(SCALE_2G, ODR_100); // Set up accel with +/-2g range, and 100Hz ODR
   d53a8:	2203      	movs	r2, #3
   d53aa:	2102      	movs	r1, #2
   d53ac:	487b      	ldr	r0, [pc, #492]	; (d559c <setup+0x424>)
   d53ae:	f002 f838 	bl	d7422 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>
  accel.setupTapInts();                                                // Set up taps on x,y and z defaults otherwise
   d53b2:	487a      	ldr	r0, [pc, #488]	; (d559c <setup+0x424>)
   d53b4:	f001 fffa 	bl	d73ac <_ZN8MMA8452Q12setupTapIntsEv>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d53b8:	79ab      	ldrb	r3, [r5, #6]
   d53ba:	2210      	movs	r2, #16
   d53bc:	2b00      	cmp	r3, #0
   d53be:	f000 8102 	beq.w	d55c6 <setup+0x44e>
   d53c2:	4977      	ldr	r1, [pc, #476]	; (d55a0 <setup+0x428>)
   d53c4:	484a      	ldr	r0, [pc, #296]	; (d54f0 <setup+0x378>)
   d53c6:	f006 fe5a 	bl	dc07e <strncpy>
        int reason = RESET_REASON_NONE;
   d53ca:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d53cc:	4611      	mov	r1, r2
   d53ce:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d53d0:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d53d2:	f002 fbcf 	bl	d7b74 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d53d6:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d53d8:	2b14      	cmp	r3, #20
   d53da:	f04f 0200 	mov.w	r2, #0
   d53de:	f040 80f4 	bne.w	d55ca <setup+0x452>
    sysStatus.resetCount++;
   d53e2:	692b      	ldr	r3, [r5, #16]
   d53e4:	3301      	adds	r3, #1
   d53e6:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d53e8:	4b6e      	ldr	r3, [pc, #440]	; (d55a4 <setup+0x42c>)
   d53ea:	2201      	movs	r2, #1
   d53ec:	701a      	strb	r2, [r3, #0]
  if (current.hourlyCount) lastReportedTime = current.lastCountTime;
   d53ee:	683b      	ldr	r3, [r7, #0]
   d53f0:	4c6d      	ldr	r4, [pc, #436]	; (d55a8 <setup+0x430>)
   d53f2:	2b00      	cmp	r3, #0
   d53f4:	f000 80f3 	beq.w	d55de <setup+0x466>
   d53f8:	68fb      	ldr	r3, [r7, #12]
   d53fa:	6023      	str	r3, [r4, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d53fc:	f7ff fbc4 	bl	d4b88 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d5400:	2004      	movs	r0, #4
   d5402:	f005 ffeb 	bl	db3dc <digitalRead>
   d5406:	b908      	cbnz	r0, d540c <setup+0x294>
   d5408:	f7ff fe6c 	bl	d50e4 <_Z18loadSystemDefaultsv>
  if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   d540c:	f005 fd8c 	bl	daf28 <_ZN9TimeClass3dayEv>
   d5410:	2100      	movs	r1, #0
   d5412:	4604      	mov	r4, r0
   d5414:	68f8      	ldr	r0, [r7, #12]
   d5416:	f005 fbd9 	bl	dabcc <_ZN9TimeClass3dayEx>
   d541a:	4284      	cmp	r4, r0
   d541c:	d001      	beq.n	d5422 <setup+0x2aa>
    resetEverything();                                                 // Zero the counts for the new day
   d541e:	f7ff fd0b 	bl	d4e38 <_Z15resetEverythingv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d5422:	f005 fd69 	bl	daef8 <_ZN9TimeClass4hourEv>
   d5426:	7f2b      	ldrb	r3, [r5, #28]
   d5428:	4298      	cmp	r0, r3
   d542a:	db1b      	blt.n	d5464 <setup+0x2ec>
   d542c:	f005 fd64 	bl	daef8 <_ZN9TimeClass4hourEv>
   d5430:	7f6b      	ldrb	r3, [r5, #29]
   d5432:	4298      	cmp	r0, r3
   d5434:	da16      	bge.n	d5464 <setup+0x2ec>
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d5436:	2300      	movs	r3, #0
   d5438:	9300      	str	r3, [sp, #0]
   d543a:	495c      	ldr	r1, [pc, #368]	; (d55ac <setup+0x434>)
   d543c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5440:	2201      	movs	r2, #1
   d5442:	2002      	movs	r0, #2
   d5444:	f003 fd5c 	bl	d8f00 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) {         // If the system thinks we are connected, let's make sure that we are
   d5448:	78eb      	ldrb	r3, [r5, #3]
   d544a:	b133      	cbz	r3, d545a <setup+0x2e2>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d544c:	f002 fe0e 	bl	d806c <spark_cloud_flag_connected>
   d5450:	b918      	cbnz	r0, d545a <setup+0x2e2>
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d5452:	4b57      	ldr	r3, [pc, #348]	; (d55b0 <setup+0x438>)
      sysStatus.connectedStatus = false;                              // We will fix this.
   d5454:	70e8      	strb	r0, [r5, #3]
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d5456:	2201      	movs	r2, #1
   d5458:	701a      	strb	r2, [r3, #0]
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d545a:	f7ff fdc5 	bl	d4fe8 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Boron awake after reboot - helps with recovery
   d545e:	4b55      	ldr	r3, [pc, #340]	; (d55b4 <setup+0x43c>)
   d5460:	4a55      	ldr	r2, [pc, #340]	; (d55b8 <setup+0x440>)
   d5462:	601a      	str	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5464:	f898 3000 	ldrb.w	r3, [r8]
   d5468:	b913      	cbnz	r3, d5470 <setup+0x2f8>
   d546a:	2302      	movs	r3, #2
   d546c:	f888 3000 	strb.w	r3, [r8]
  digitalWrite(blueLED,LOW);                                          // Signal the end of startup
   d5470:	2100      	movs	r1, #0
   d5472:	2007      	movs	r0, #7
   d5474:	f005 ff99 	bl	db3aa <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5478:	a806      	add	r0, sp, #24
   d547a:	f005 f99b 	bl	da7b4 <_ZN6StringD1Ev>
}
   d547e:	b02a      	add	sp, #168	; 0xa8
   d5480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5484:	f7ff fe2e 	bl	d50e4 <_Z18loadSystemDefaultsv>
   d5488:	e74e      	b.n	d5328 <setup+0x1b0>
   d548a:	462a      	mov	r2, r5
   d548c:	4631      	mov	r1, r6
   d548e:	232c      	movs	r3, #44	; 0x2c
   d5490:	483b      	ldr	r0, [pc, #236]	; (d5580 <setup+0x408>)
   d5492:	f001 fdf5 	bl	d7080 <_ZN6MB85RC8readDataEjPhj>
   d5496:	2324      	movs	r3, #36	; 0x24
   d5498:	463a      	mov	r2, r7
   d549a:	2150      	movs	r1, #80	; 0x50
   d549c:	4838      	ldr	r0, [pc, #224]	; (d5580 <setup+0x408>)
   d549e:	f001 fdef 	bl	d7080 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d54a2:	e741      	b.n	d5328 <setup+0x1b0>
   d54a4:	f3af 8000 	nop.w
   d54a8:	00000000 	.word	0x00000000
   d54ac:	40ac2000 	.word	0x40ac2000
   d54b0:	000d44fd 	.word	0x000d44fd
   d54b4:	2003e3e4 	.word	0x2003e3e4
   d54b8:	2003e4bc 	.word	0x2003e4bc
   d54bc:	000dc4d4 	.word	0x000dc4d4
   d54c0:	2003e3ec 	.word	0x2003e3ec
   d54c4:	000dc54c 	.word	0x000dc54c
   d54c8:	2003e31c 	.word	0x2003e31c
   d54cc:	000dc4e0 	.word	0x000dc4e0
   d54d0:	2003e4cc 	.word	0x2003e4cc
   d54d4:	000dc4e7 	.word	0x000dc4e7
   d54d8:	2003e3f4 	.word	0x2003e3f4
   d54dc:	000dc4f2 	.word	0x000dc4f2
   d54e0:	2003e210 	.word	0x2003e210
   d54e4:	000dc4fe 	.word	0x000dc4fe
   d54e8:	2003e4c4 	.word	0x2003e4c4
   d54ec:	000dc506 	.word	0x000dc506
   d54f0:	2003e460 	.word	0x2003e460
   d54f4:	000dc511 	.word	0x000dc511
   d54f8:	2003e216 	.word	0x2003e216
   d54fc:	000dc5b9 	.word	0x000dc5b9
   d5500:	2003e204 	.word	0x2003e204
   d5504:	000dc51e 	.word	0x000dc51e
   d5508:	2003e3f8 	.word	0x2003e3f8
   d550c:	000dc528 	.word	0x000dc528
   d5510:	2003e409 	.word	0x2003e409
   d5514:	000dc52f 	.word	0x000dc52f
   d5518:	000d42a9 	.word	0x000d42a9
   d551c:	000d4105 	.word	0x000d4105
   d5520:	000dc53a 	.word	0x000dc53a
   d5524:	000dc549 	.word	0x000dc549
   d5528:	000d46c1 	.word	0x000d46c1
   d552c:	000d8611 	.word	0x000d8611
   d5530:	000dc557 	.word	0x000dc557
   d5534:	000d4225 	.word	0x000d4225
   d5538:	000dc563 	.word	0x000dc563
   d553c:	000d459d 	.word	0x000d459d
   d5540:	000dc56d 	.word	0x000dc56d
   d5544:	000d4171 	.word	0x000d4171
   d5548:	000d4739 	.word	0x000d4739
   d554c:	000dc575 	.word	0x000dc575
   d5550:	000dc582 	.word	0x000dc582
   d5554:	000d4bfd 	.word	0x000d4bfd
   d5558:	000d45e5 	.word	0x000d45e5
   d555c:	000dc58d 	.word	0x000dc58d
   d5560:	000d6279 	.word	0x000d6279
   d5564:	000dc59a 	.word	0x000dc59a
   d5568:	000dc5a7 	.word	0x000dc5a7
   d556c:	000d63e1 	.word	0x000d63e1
   d5570:	000d4d91 	.word	0x000d4d91
   d5574:	000dc5b5 	.word	0x000dc5b5
   d5578:	000d4dc9 	.word	0x000d4dc9
   d557c:	000dc5c2 	.word	0x000dc5c2
   d5580:	2003e41c 	.word	0x2003e41c
   d5584:	000dc7e0 	.word	0x000dc7e0
   d5588:	000dc5cc 	.word	0x000dc5cc
   d558c:	2003e5dc 	.word	0x2003e5dc
   d5590:	2003e378 	.word	0x2003e378
   d5594:	000d40d5 	.word	0x000d40d5
   d5598:	000dc5dc 	.word	0x000dc5dc
   d559c:	2003e398 	.word	0x2003e398
   d55a0:	000dc338 	.word	0x000dc338
   d55a4:	2003e4e8 	.word	0x2003e4e8
   d55a8:	2003e438 	.word	0x2003e438
   d55ac:	000d413d 	.word	0x000d413d
   d55b0:	2003e471 	.word	0x2003e471
   d55b4:	2003e4b4 	.word	0x2003e4b4
   d55b8:	00015f90 	.word	0x00015f90
   d55bc:	2003e4b1 	.word	0x2003e4b1
  DSTRULES() ? Time.beginDST() : Time.endDST();                       // Perform the DST calculation here
   d55c0:	f005 fb6a 	bl	dac98 <_ZN9TimeClass6endDSTEv>
   d55c4:	e6d8      	b.n	d5378 <setup+0x200>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d55c6:	4908      	ldr	r1, [pc, #32]	; (d55e8 <setup+0x470>)
   d55c8:	e6fc      	b.n	d53c4 <setup+0x24c>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55ca:	4611      	mov	r1, r2
   d55cc:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d55ce:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55d0:	f002 fad0 	bl	d7b74 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d55d4:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d55d6:	2b8c      	cmp	r3, #140	; 0x8c
   d55d8:	f47f af09 	bne.w	d53ee <setup+0x276>
   d55dc:	e701      	b.n	d53e2 <setup+0x26a>
  else lastReportedTime = Time.now();                                  // Initialize it to now so that reporting can begin as soon as the hour changes
   d55de:	f005 fc7a 	bl	daed6 <_ZN9TimeClass3nowEv>
   d55e2:	6020      	str	r0, [r4, #0]
   d55e4:	e70a      	b.n	d53fc <setup+0x284>
   d55e6:	bf00      	nop
   d55e8:	000dc334 	.word	0x000dc334

000d55ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d55ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d55ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55f0:	4604      	mov	r4, r0
   d55f2:	460d      	mov	r5, r1
   d55f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d55f6:	d916      	bls.n	d5626 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d55f8:	4290      	cmp	r0, r2
   d55fa:	d215      	bcs.n	d5628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d55fc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d5600:	1a75      	subs	r5, r6, r1
   d5602:	f1a1 0714 	sub.w	r7, r1, #20
   d5606:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5608:	42b7      	cmp	r7, r6
   d560a:	d01c      	beq.n	d5646 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d560c:	b12c      	cbz	r4, d561a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d560e:	4631      	mov	r1, r6
   d5610:	4620      	mov	r0, r4
   d5612:	f005 f94b 	bl	da8ac <_ZN6StringC1EOS_>
   d5616:	7c33      	ldrb	r3, [r6, #16]
   d5618:	7423      	strb	r3, [r4, #16]
   d561a:	4630      	mov	r0, r6
   d561c:	f005 f8ca 	bl	da7b4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5620:	3e14      	subs	r6, #20
   d5622:	3c14      	subs	r4, #20
   d5624:	e7f0      	b.n	d5608 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5626:	d00e      	beq.n	d5646 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5628:	42b5      	cmp	r5, r6
   d562a:	d00c      	beq.n	d5646 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d562c:	b12c      	cbz	r4, d563a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d562e:	4629      	mov	r1, r5
   d5630:	4620      	mov	r0, r4
   d5632:	f005 f93b 	bl	da8ac <_ZN6StringC1EOS_>
   d5636:	7c2b      	ldrb	r3, [r5, #16]
   d5638:	7423      	strb	r3, [r4, #16]
   d563a:	4628      	mov	r0, r5
   d563c:	f005 f8ba 	bl	da7b4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5640:	3514      	adds	r5, #20
   d5642:	3414      	adds	r4, #20
   d5644:	e7f0      	b.n	d5628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d5646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d564c:	2300      	movs	r3, #0
   d564e:	e9c0 3300 	strd	r3, r3, [r0]
   d5652:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5654:	684f      	ldr	r7, [r1, #4]
   d5656:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5658:	4604      	mov	r4, r0
   d565a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d565c:	dd23      	ble.n	d56a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d565e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d5662:	fb08 f007 	mul.w	r0, r8, r7
   d5666:	f002 fdb1 	bl	d81cc <malloc>
            if (!d) {
   d566a:	4605      	mov	r5, r0
   d566c:	b1d8      	cbz	r0, d56a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d566e:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5672:	fb08 1202 	mla	r2, r8, r2, r1
   d5676:	f7ff ffb9 	bl	d55ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d567a:	6820      	ldr	r0, [r4, #0]
   d567c:	f002 fdae 	bl	d81dc <free>
        data_ = d;
   d5680:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5682:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5684:	e9d6 7300 	ldrd	r7, r3, [r6]
   d5688:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d568c:	45b8      	cmp	r8, r7
   d568e:	d008      	beq.n	d56a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d5690:	4639      	mov	r1, r7
   d5692:	4628      	mov	r0, r5
   d5694:	f005 f924 	bl	da8e0 <_ZN6StringC1ERKS_>
   d5698:	7c3b      	ldrb	r3, [r7, #16]
   d569a:	742b      	strb	r3, [r5, #16]
   d569c:	3714      	adds	r7, #20
   d569e:	3514      	adds	r5, #20
   d56a0:	e7f4      	b.n	d568c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d56a2:	6873      	ldr	r3, [r6, #4]
   d56a4:	6063      	str	r3, [r4, #4]
}
   d56a6:	4620      	mov	r0, r4
   d56a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d56ac <_GLOBAL__sub_I___appProductID>:
   d56ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   d56b0:	4b78      	ldr	r3, [pc, #480]	; (d5894 <_GLOBAL__sub_I___appProductID+0x1e8>)
              error_(SYSTEM_ERROR_NONE) {
   d56b2:	4d79      	ldr	r5, [pc, #484]	; (d5898 <_GLOBAL__sub_I___appProductID+0x1ec>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d56b4:	4e79      	ldr	r6, [pc, #484]	; (d589c <_GLOBAL__sub_I___appProductID+0x1f0>)
   d56b6:	f04f 0801 	mov.w	r8, #1
   d56ba:	f883 8000 	strb.w	r8, [r3]
   d56be:	4b78      	ldr	r3, [pc, #480]	; (d58a0 <_GLOBAL__sub_I___appProductID+0x1f4>)
   d56c0:	2208      	movs	r2, #8
   d56c2:	b091      	sub	sp, #68	; 0x44
   d56c4:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d56c6:	f005 fe09 	bl	db2dc <spark_protocol_instance>
   d56ca:	2300      	movs	r3, #0
   d56cc:	461a      	mov	r2, r3
   d56ce:	210d      	movs	r1, #13
   d56d0:	f005 fe0c 	bl	db2ec <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d56d4:	f005 fe02 	bl	db2dc <spark_protocol_instance>
   d56d8:	2300      	movs	r3, #0
   d56da:	4641      	mov	r1, r8
   d56dc:	461a      	mov	r2, r3
   d56de:	f005 fe0d 	bl	db2fc <spark_protocol_set_product_firmware_version>
struct currentCounts_structure {                    // currently 10 bytes long
   d56e2:	4b70      	ldr	r3, [pc, #448]	; (d58a4 <_GLOBAL__sub_I___appProductID+0x1f8>)
   d56e4:	2400      	movs	r4, #0
   d56e6:	2264      	movs	r2, #100	; 0x64
   d56e8:	839c      	strh	r4, [r3, #28]
   d56ea:	621a      	str	r2, [r3, #32]
    SleepResult() {}
   d56ec:	4b6e      	ldr	r3, [pc, #440]	; (d58a8 <_GLOBAL__sub_I___appProductID+0x1fc>)
   d56ee:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d56f0:	602c      	str	r4, [r5, #0]
   d56f2:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d56f4:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d56f6:	2002      	movs	r0, #2
   d56f8:	f002 fc26 	bl	d7f48 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d56fc:	4632      	mov	r2, r6
   d56fe:	496b      	ldr	r1, [pc, #428]	; (d58ac <_GLOBAL__sub_I___appProductID+0x200>)
   d5700:	4628      	mov	r0, r5
   d5702:	f005 ff15 	bl	db530 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5706:	4621      	mov	r1, r4
   d5708:	4640      	mov	r0, r8
   d570a:	f002 fc35 	bl	d7f78 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d570e:	4641      	mov	r1, r8
   d5710:	2004      	movs	r0, #4
   d5712:	f002 fa27 	bl	d7b64 <HAL_Feature_Set>
        : config_(config) {
   d5716:	4866      	ldr	r0, [pc, #408]	; (d58b0 <_GLOBAL__sub_I___appProductID+0x204>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5718:	4966      	ldr	r1, [pc, #408]	; (d58b4 <_GLOBAL__sub_I___appProductID+0x208>)
              valid_(true) {
   d571a:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d571e:	4603      	mov	r3, r0
   d5720:	1d02      	adds	r2, r0, #4
   d5722:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5726:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5728:	4b63      	ldr	r3, [pc, #396]	; (d58b8 <_GLOBAL__sub_I___appProductID+0x20c>)
   d572a:	6043      	str	r3, [r0, #4]
   d572c:	4632      	mov	r2, r6
        config_.wakeup_sources = nullptr;
   d572e:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d5732:	f880 8014 	strb.w	r8, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5736:	7204      	strb	r4, [r0, #8]
   d5738:	f005 fefa 	bl	db530 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d573c:	f005 fea8 	bl	db490 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5740:	4d5e      	ldr	r5, [pc, #376]	; (d58bc <_GLOBAL__sub_I___appProductID+0x210>)
   d5742:	4601      	mov	r1, r0
   d5744:	4623      	mov	r3, r4
   d5746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d574a:	4628      	mov	r0, r5
   d574c:	f001 fc4c 	bl	d6fe8 <_ZN6MB85RCC1ER7TwoWireji>
   d5750:	4b5b      	ldr	r3, [pc, #364]	; (d58c0 <_GLOBAL__sub_I___appProductID+0x214>)
   d5752:	602b      	str	r3, [r5, #0]
   d5754:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5756:	4d5b      	ldr	r5, [pc, #364]	; (d58c4 <_GLOBAL__sub_I___appProductID+0x218>)
   d5758:	495b      	ldr	r1, [pc, #364]	; (d58c8 <_GLOBAL__sub_I___appProductID+0x21c>)
   d575a:	4632      	mov	r2, r6
   d575c:	f005 fee8 	bl	db530 <__aeabi_atexit>
   d5760:	495a      	ldr	r1, [pc, #360]	; (d58cc <_GLOBAL__sub_I___appProductID+0x220>)
   d5762:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5766:	4628      	mov	r0, r5
   d5768:	f002 f84e 	bl	d7808 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d576c:	4b58      	ldr	r3, [pc, #352]	; (d58d0 <_GLOBAL__sub_I___appProductID+0x224>)
   d576e:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5770:	4632      	mov	r2, r6
   d5772:	4958      	ldr	r1, [pc, #352]	; (d58d4 <_GLOBAL__sub_I___appProductID+0x228>)
   d5774:	4628      	mov	r0, r5
   d5776:	f005 fedb 	bl	db530 <__aeabi_atexit>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d577a:	f005 fe89 	bl	db490 <_Z19__fetch_global_Wirev>
   d577e:	4d56      	ldr	r5, [pc, #344]	; (d58d8 <_GLOBAL__sub_I___appProductID+0x22c>)
   d5780:	4601      	mov	r1, r0
   d5782:	2269      	movs	r2, #105	; 0x69
   d5784:	4628      	mov	r0, r5
   d5786:	f000 fed5 	bl	d6534 <_ZN6AB1805C1ER7TwoWireh>
   d578a:	4628      	mov	r0, r5
FuelGauge fuel;                                     // Enable the fuel gauge API     
   d578c:	4d53      	ldr	r5, [pc, #332]	; (d58dc <_GLOBAL__sub_I___appProductID+0x230>)
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d578e:	4954      	ldr	r1, [pc, #336]	; (d58e0 <_GLOBAL__sub_I___appProductID+0x234>)
   d5790:	4632      	mov	r2, r6
   d5792:	f005 fecd 	bl	db530 <__aeabi_atexit>
FuelGauge fuel;                                     // Enable the fuel gauge API     
   d5796:	4621      	mov	r1, r4
   d5798:	4628      	mov	r0, r5
   d579a:	f003 fa49 	bl	d8c30 <_ZN9FuelGaugeC1Eb>
   d579e:	4632      	mov	r2, r6
   d57a0:	4950      	ldr	r1, [pc, #320]	; (d58e4 <_GLOBAL__sub_I___appProductID+0x238>)
   d57a2:	4628      	mov	r0, r5
   d57a4:	f005 fec4 	bl	db530 <__aeabi_atexit>
MMA8452Q accel;                                     // Default constructor, SA0 pin is HIGH
   d57a8:	211d      	movs	r1, #29
   d57aa:	484f      	ldr	r0, [pc, #316]	; (d58e8 <_GLOBAL__sub_I___appProductID+0x23c>)
        filter_(level, filters) {
   d57ac:	4d4f      	ldr	r5, [pc, #316]	; (d58ec <_GLOBAL__sub_I___appProductID+0x240>)
   d57ae:	f001 fd4f 	bl	d7250 <_ZN8MMA8452QC1Eh>
        capacity_(0) {
   d57b2:	e9cd 4403 	strd	r4, r4, [sp, #12]
   d57b6:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   d57b8:	f005 fcd4 	bl	db164 <_Z16_fetch_usbserialv>
        stream_(&stream) {
   d57bc:	f10d 0924 	add.w	r9, sp, #36	; 0x24
   d57c0:	4682      	mov	sl, r0
   d57c2:	a903      	add	r1, sp, #12
   d57c4:	a806      	add	r0, sp, #24
   d57c6:	f7ff ff3f 	bl	d5648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d57ca:	46ab      	mov	fp, r5
        stream_(&stream) {
   d57cc:	a906      	add	r1, sp, #24
   d57ce:	4648      	mov	r0, r9
   d57d0:	f7ff ff3a 	bl	d5648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d57d4:	4b46      	ldr	r3, [pc, #280]	; (d58f0 <_GLOBAL__sub_I___appProductID+0x244>)
   d57d6:	f84b 3b04 	str.w	r3, [fp], #4
   d57da:	af0c      	add	r7, sp, #48	; 0x30
   d57dc:	4649      	mov	r1, r9
   d57de:	4638      	mov	r0, r7
   d57e0:	f7ff ff32 	bl	d5648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d57e4:	463a      	mov	r2, r7
   d57e6:	4641      	mov	r1, r8
   d57e8:	4658      	mov	r0, fp
   d57ea:	f004 fac3 	bl	d9d74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d57ee:	4638      	mov	r0, r7
   d57f0:	f7ff fc52 	bl	d5098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d57f4:	4648      	mov	r0, r9
   d57f6:	f7ff fc4f 	bl	d5098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d57fa:	4b3e      	ldr	r3, [pc, #248]	; (d58f4 <_GLOBAL__sub_I___appProductID+0x248>)
   d57fc:	602b      	str	r3, [r5, #0]
   d57fe:	f8c5 a020 	str.w	sl, [r5, #32]
   d5802:	a806      	add	r0, sp, #24
   d5804:	f7ff fc48 	bl	d5098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5808:	4b3b      	ldr	r3, [pc, #236]	; (d58f8 <_GLOBAL__sub_I___appProductID+0x24c>)
   d580a:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d580c:	f005 fcaa 	bl	db164 <_Z16_fetch_usbserialv>
   d5810:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5814:	f005 fc96 	bl	db144 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5818:	f003 ff54 	bl	d96c4 <_ZN5spark10LogManager8instanceEv>
   d581c:	4629      	mov	r1, r5
   d581e:	f004 fa3b 	bl	d9c98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ALL);
   d5822:	a803      	add	r0, sp, #12
   d5824:	f7ff fc38 	bl	d5098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5828:	4632      	mov	r2, r6
   d582a:	4934      	ldr	r1, [pc, #208]	; (d58fc <_GLOBAL__sub_I___appProductID+0x250>)
   d582c:	4628      	mov	r0, r5
   d582e:	f005 fe7f 	bl	db530 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5832:	4b33      	ldr	r3, [pc, #204]	; (d5900 <_GLOBAL__sub_I___appProductID+0x254>)
   d5834:	930c      	str	r3, [sp, #48]	; 0x30
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5836:	4d33      	ldr	r5, [pc, #204]	; (d5904 <_GLOBAL__sub_I___appProductID+0x258>)
   d5838:	4b33      	ldr	r3, [pc, #204]	; (d5908 <_GLOBAL__sub_I___appProductID+0x25c>)
   d583a:	602b      	str	r3, [r5, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d583c:	e897 0003 	ldmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5840:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5844:	e889 0003 	stmia.w	r9, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5848:	e893 0003 	ldmia.w	r3, {r0, r1}
   d584c:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5850:	e899 0003 	ldmia.w	r9, {r0, r1}
   d5854:	e883 0003 	stmia.w	r3, {r0, r1}
   d5858:	4b2c      	ldr	r3, [pc, #176]	; (d590c <_GLOBAL__sub_I___appProductID+0x260>)
   d585a:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d585c:	69ab      	ldr	r3, [r5, #24]
   d585e:	930f      	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5860:	4b2b      	ldr	r3, [pc, #172]	; (d5910 <_GLOBAL__sub_I___appProductID+0x264>)
   d5862:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5864:	4a2b      	ldr	r2, [pc, #172]	; (d5914 <_GLOBAL__sub_I___appProductID+0x268>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5866:	712c      	strb	r4, [r5, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5868:	462b      	mov	r3, r5
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d586a:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d586c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5870:	e9cd 8400 	strd	r8, r4, [sp]
   d5874:	f105 0008 	add.w	r0, r5, #8
      __a = _GLIBCXX_MOVE(__b);
   d5878:	940e      	str	r4, [sp, #56]	; 0x38
   d587a:	f002 f903 	bl	d7a84 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d587e:	4638      	mov	r0, r7
   d5880:	f7fe fd58 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
Timer countSignalTimer(1000, countSignalTimerISR, true);  // This is how we will ensure the BlueLED stays on long enough for folks to see it.
   d5884:	4924      	ldr	r1, [pc, #144]	; (d5918 <_GLOBAL__sub_I___appProductID+0x26c>)
   d5886:	4632      	mov	r2, r6
   d5888:	4628      	mov	r0, r5
   d588a:	f005 fe51 	bl	db530 <__aeabi_atexit>
   d588e:	b011      	add	sp, #68	; 0x44
   d5890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5894:	2003e368 	.word	0x2003e368
   d5898:	2003e35c 	.word	0x2003e35c
   d589c:	2003e310 	.word	0x2003e310
   d58a0:	2003e369 	.word	0x2003e369
   d58a4:	2003e3e4 	.word	0x2003e3e4
   d58a8:	ffff0000 	.word	0xffff0000
   d58ac:	000d427b 	.word	0x000d427b
   d58b0:	2003e3b0 	.word	0x2003e3b0
   d58b4:	000d4125 	.word	0x000d4125
   d58b8:	00030010 	.word	0x00030010
   d58bc:	2003e41c 	.word	0x2003e41c
   d58c0:	000dc77c 	.word	0x000dc77c
   d58c4:	2003e474 	.word	0x2003e474
   d58c8:	000d41c1 	.word	0x000d41c1
   d58cc:	2003f400 	.word	0x2003f400
   d58d0:	000dc798 	.word	0x000dc798
   d58d4:	000d4199 	.word	0x000d4199
   d58d8:	2003e378 	.word	0x2003e378
   d58dc:	2003e42c 	.word	0x2003e42c
   d58e0:	000d64f5 	.word	0x000d64f5
   d58e4:	000d8c51 	.word	0x000d8c51
   d58e8:	2003e398 	.word	0x2003e398
   d58ec:	2003e43c 	.word	0x2003e43c
   d58f0:	000dc74c 	.word	0x000dc74c
   d58f4:	000dcd54 	.word	0x000dcd54
   d58f8:	000dc764 	.word	0x000dc764
   d58fc:	000d42e1 	.word	0x000d42e1
   d5900:	000d40fb 	.word	0x000d40fb
   d5904:	2003e3c8 	.word	0x2003e3c8
   d5908:	000dc738 	.word	0x000dc738
   d590c:	000d40e5 	.word	0x000d40e5
   d5910:	000d40e1 	.word	0x000d40e1
   d5914:	000d41e9 	.word	0x000d41e9
   d5918:	000d4349 	.word	0x000d4349

000d591c <_Z22disconnectFromParticlev>:
{
   d591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5920:	b085      	sub	sp, #20
        clearSession_(clearSession) {
   d5922:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();
   d5926:	a801      	add	r0, sp, #4
   d5928:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d592c:	f8ad a00c 	strh.w	sl, [sp, #12]
   d5930:	f002 fe95 	bl	d865e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d5934:	f7fe fda4 	bl	d4480 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d5938:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d593c:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d593e:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5942:	f7fe fd9d 	bl	d4480 <_ZN11SystemClass6millisEv>
   d5946:	ebb0 060b 	subs.w	r6, r0, fp
   d594a:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d594e:	45b9      	cmp	r9, r7
   d5950:	bf08      	it	eq
   d5952:	45b0      	cmpeq	r8, r6
   d5954:	d305      	bcc.n	d5962 <_Z22disconnectFromParticlev+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5956:	f002 fb89 	bl	d806c <spark_cloud_flag_connected>
   d595a:	b110      	cbz	r0, d5962 <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d595c:	f002 fb76 	bl	d804c <spark_process>
        while (_while() && !_condition()) {
   d5960:	e7ef      	b.n	d5942 <_Z22disconnectFromParticlev+0x26>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5962:	4e18      	ldr	r6, [pc, #96]	; (d59c4 <_Z22disconnectFromParticlev+0xa8>)
   d5964:	f002 fb82 	bl	d806c <spark_cloud_flag_connected>
   d5968:	2200      	movs	r2, #0
   d596a:	2102      	movs	r1, #2
   d596c:	6870      	ldr	r0, [r6, #4]
   d596e:	f002 fbdd 	bl	d812c <network_disconnect>
  Cellular.off();                                                 // Turn off the cellular modem
   d5972:	4630      	mov	r0, r6
   d5974:	f7fe fcd8 	bl	d4328 <_ZN5spark13CellularClass3offEv>
        const system_tick_t start = millis();
   d5978:	f7fe fd82 	bl	d4480 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d597c:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d5980:	4607      	mov	r7, r0
        while (_while() && !_condition()) {
   d5982:	f247 582f 	movw	r8, #29999	; 0x752f
   d5986:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d598a:	f7fe fd79 	bl	d4480 <_ZN11SystemClass6millisEv>
   d598e:	1bc4      	subs	r4, r0, r7
   d5990:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d5994:	45a9      	cmp	r9, r5
   d5996:	bf08      	it	eq
   d5998:	45a0      	cmpeq	r8, r4
   d599a:	d306      	bcc.n	d59aa <_Z22disconnectFromParticlev+0x8e>
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d599c:	4630      	mov	r0, r6
   d599e:	f004 fd29 	bl	da3f4 <_ZN5spark12NetworkClass5isOffEv>
   d59a2:	b910      	cbnz	r0, d59aa <_Z22disconnectFromParticlev+0x8e>
            spark_process();
   d59a4:	f002 fb52 	bl	d804c <spark_process>
        while (_while() && !_condition()) {
   d59a8:	e7ef      	b.n	d598a <_Z22disconnectFromParticlev+0x6e>
   d59aa:	4806      	ldr	r0, [pc, #24]	; (d59c4 <_Z22disconnectFromParticlev+0xa8>)
   d59ac:	f004 fd22 	bl	da3f4 <_ZN5spark12NetworkClass5isOffEv>
  sysStatus.connectedStatus = false;
   d59b0:	4b05      	ldr	r3, [pc, #20]	; (d59c8 <_Z22disconnectFromParticlev+0xac>)
   d59b2:	2200      	movs	r2, #0
   d59b4:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d59b6:	4b05      	ldr	r3, [pc, #20]	; (d59cc <_Z22disconnectFromParticlev+0xb0>)
   d59b8:	2001      	movs	r0, #1
   d59ba:	7018      	strb	r0, [r3, #0]
}
   d59bc:	b005      	add	sp, #20
   d59be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59c2:	bf00      	nop
   d59c4:	2003e508 	.word	0x2003e508
   d59c8:	2003e4bc 	.word	0x2003e4bc
   d59cc:	2003e4e8 	.word	0x2003e4e8

000d59d0 <_Z14fullModemResetv>:
void fullModemReset() {  // 
   d59d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59d4:	b085      	sub	sp, #20
        clearSession_(clearSession) {
   d59d6:	f04f 0a00 	mov.w	sl, #0
	Particle.disconnect(); 	                                          // Disconnect from the cloud    
   d59da:	a801      	add	r0, sp, #4
   d59dc:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d59e0:	f8ad a00c 	strh.w	sl, [sp, #12]
   d59e4:	f002 fe3b 	bl	d865e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d59e8:	f7fe fd4a 	bl	d4480 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d59ec:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d59f0:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d59f2:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d59f6:	f7fe fd43 	bl	d4480 <_ZN11SystemClass6millisEv>
   d59fa:	ebb0 060b 	subs.w	r6, r0, fp
   d59fe:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5a02:	45b9      	cmp	r9, r7
   d5a04:	bf08      	it	eq
   d5a06:	45b0      	cmpeq	r8, r6
   d5a08:	d305      	bcc.n	d5a16 <_Z14fullModemResetv+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a0a:	f002 fb2f 	bl	d806c <spark_cloud_flag_connected>
   d5a0e:	b910      	cbnz	r0, d5a16 <_Z14fullModemResetv+0x46>
            spark_process();
   d5a10:	f002 fb1c 	bl	d804c <spark_process>
        while (_while() && !_condition()) {
   d5a14:	e7ef      	b.n	d59f6 <_Z14fullModemResetv+0x26>
   d5a16:	f002 fb29 	bl	d806c <spark_cloud_flag_connected>
  Cellular.off();                                                   // Turn off the Cellular modem
   d5a1a:	4821      	ldr	r0, [pc, #132]	; (d5aa0 <_Z14fullModemResetv+0xd0>)
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5a1c:	f8df a080 	ldr.w	sl, [pc, #128]	; d5aa0 <_Z14fullModemResetv+0xd0>
  Cellular.off();                                                   // Turn off the Cellular modem
   d5a20:	f7fe fc82 	bl	d4328 <_ZN5spark13CellularClass3offEv>
        const system_tick_t start = millis();
   d5a24:	f7fe fd2c 	bl	d4480 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5a28:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
   d5a2c:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d5a2e:	f247 562f 	movw	r6, #29999	; 0x752f
   d5a32:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5a34:	f7fe fd24 	bl	d4480 <_ZN11SystemClass6millisEv>
   d5a38:	ebb0 0408 	subs.w	r4, r0, r8
   d5a3c:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d5a40:	42af      	cmp	r7, r5
   d5a42:	bf08      	it	eq
   d5a44:	42a6      	cmpeq	r6, r4
   d5a46:	d306      	bcc.n	d5a56 <_Z14fullModemResetv+0x86>
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5a48:	4650      	mov	r0, sl
   d5a4a:	f004 fcd3 	bl	da3f4 <_ZN5spark12NetworkClass5isOffEv>
   d5a4e:	b910      	cbnz	r0, d5a56 <_Z14fullModemResetv+0x86>
            spark_process();
   d5a50:	f002 fafc 	bl	d804c <spark_process>
        while (_while() && !_condition()) {
   d5a54:	e7ee      	b.n	d5a34 <_Z14fullModemResetv+0x64>
   d5a56:	4812      	ldr	r0, [pc, #72]	; (d5aa0 <_Z14fullModemResetv+0xd0>)
   d5a58:	f004 fccc 	bl	da3f4 <_ZN5spark12NetworkClass5isOffEv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d5a5c:	4811      	ldr	r0, [pc, #68]	; (d5aa4 <_Z14fullModemResetv+0xd4>)
   d5a5e:	2100      	movs	r1, #0
   d5a60:	f000 fe66 	bl	d6730 <_ZN6AB18056setWDTEi>
        if (valid_) {
   d5a64:	4b10      	ldr	r3, [pc, #64]	; (d5aa8 <_Z14fullModemResetv+0xd8>)
   d5a66:	7d1a      	ldrb	r2, [r3, #20]
   d5a68:	b10a      	cbz	r2, d5a6e <_Z14fullModemResetv+0x9e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5a6a:	2202      	movs	r2, #2
   d5a6c:	721a      	strb	r2, [r3, #8]
    .gpio(userSwitch,CHANGE)
   d5a6e:	2200      	movs	r2, #0
   d5a70:	2104      	movs	r1, #4
   d5a72:	480d      	ldr	r0, [pc, #52]	; (d5aa8 <_Z14fullModemResetv+0xd8>)
   d5a74:	f7fe fca6 	bl	d43c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
    .duration(10 * 1000);
   d5a78:	f242 7110 	movw	r1, #10000	; 0x2710
   d5a7c:	f7fe fcd6 	bl	d442c <_ZN8particle24SystemSleepConfiguration8durationEm>
  System.sleep(config);                                             // Put the device to sleep device reboots from here   
   d5a80:	4909      	ldr	r1, [pc, #36]	; (d5aa8 <_Z14fullModemResetv+0xd8>)
   d5a82:	a801      	add	r0, sp, #4
   d5a84:	f004 ffd4 	bl	daa30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
   d5a88:	a801      	add	r0, sp, #4
   d5a8a:	f7fe fbed 	bl	d4268 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d5a8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5a92:	4804      	ldr	r0, [pc, #16]	; (d5aa4 <_Z14fullModemResetv+0xd4>)
   d5a94:	f000 fe4c 	bl	d6730 <_ZN6AB18056setWDTEi>
}
   d5a98:	b005      	add	sp, #20
   d5a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5a9e:	bf00      	nop
   d5aa0:	2003e508 	.word	0x2003e508
   d5aa4:	2003e378 	.word	0x2003e378
   d5aa8:	2003e3b0 	.word	0x2003e3b0

000d5aac <loop>:
{
   d5aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d5ab0:	4c8e      	ldr	r4, [pc, #568]	; (d5cec <loop+0x240>)
   d5ab2:	f8df 827c 	ldr.w	r8, [pc, #636]	; d5d30 <loop+0x284>
   d5ab6:	7823      	ldrb	r3, [r4, #0]
   d5ab8:	4f8d      	ldr	r7, [pc, #564]	; (d5cf0 <loop+0x244>)
   d5aba:	4e8e      	ldr	r6, [pc, #568]	; (d5cf4 <loop+0x248>)
   d5abc:	3b01      	subs	r3, #1
{
   d5abe:	b099      	sub	sp, #100	; 0x64
   d5ac0:	2b06      	cmp	r3, #6
   d5ac2:	f200 813b 	bhi.w	d5d3c <loop+0x290>
   d5ac6:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5aca:	02bb      	.short	0x02bb
   d5acc:	003b0007 	.word	0x003b0007
   d5ad0:	019300b5 	.word	0x019300b5
   d5ad4:	02510216 	.word	0x02510216
    if (state != oldState) publishStateTransition();
   d5ad8:	4b87      	ldr	r3, [pc, #540]	; (d5cf8 <loop+0x24c>)
   d5ada:	781b      	ldrb	r3, [r3, #0]
   d5adc:	2b02      	cmp	r3, #2
   d5ade:	d001      	beq.n	d5ae4 <loop+0x38>
   d5ae0:	f7ff f9c8 	bl	d4e74 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d5ae4:	4d85      	ldr	r5, [pc, #532]	; (d5cfc <loop+0x250>)
   d5ae6:	79ab      	ldrb	r3, [r5, #6]
   d5ae8:	b153      	cbz	r3, d5b00 <loop+0x54>
   d5aea:	f002 f863 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
   d5aee:	4b84      	ldr	r3, [pc, #528]	; (d5d00 <loop+0x254>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	1ac0      	subs	r0, r0, r3
   d5af4:	4b83      	ldr	r3, [pc, #524]	; (d5d04 <loop+0x258>)
   d5af6:	681b      	ldr	r3, [r3, #0]
   d5af8:	4298      	cmp	r0, r3
   d5afa:	bf84      	itt	hi
   d5afc:	2304      	movhi	r3, #4
   d5afe:	7023      	strbhi	r3, [r4, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = REPORTING_STATE;                                  // We want to report on the hour but not after bedtime
   d5b00:	f005 f9fa 	bl	daef8 <_ZN9TimeClass4hourEv>
   d5b04:	4b80      	ldr	r3, [pc, #512]	; (d5d08 <loop+0x25c>)
   d5b06:	4681      	mov	r9, r0
   d5b08:	2100      	movs	r1, #0
   d5b0a:	6818      	ldr	r0, [r3, #0]
   d5b0c:	f005 f856 	bl	dabbc <_ZN9TimeClass4hourEx>
   d5b10:	4581      	cmp	r9, r0
   d5b12:	bf1c      	itt	ne
   d5b14:	2306      	movne	r3, #6
   d5b16:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5b18:	f005 f9ee 	bl	daef8 <_ZN9TimeClass4hourEv>
   d5b1c:	7f6b      	ldrb	r3, [r5, #29]
   d5b1e:	4298      	cmp	r0, r3
   d5b20:	db08      	blt.n	d5b34 <loop+0x88>
   d5b22:	2303      	movs	r3, #3
   d5b24:	7023      	strb	r3, [r4, #0]
    if (particleConnectionNeeded) state = CONNECTING_STATE;                                                   // Someone raised the connection neeeded flag - will return to IDLE once attempt is completed
   d5b26:	4b79      	ldr	r3, [pc, #484]	; (d5d0c <loop+0x260>)
   d5b28:	781b      	ldrb	r3, [r3, #0]
   d5b2a:	2b00      	cmp	r3, #0
   d5b2c:	f000 8106 	beq.w	d5d3c <loop+0x290>
      state = CONNECTING_STATE;                                       // Will send us to connecting state - and it will send us back here                                             
   d5b30:	2305      	movs	r3, #5
   d5b32:	e012      	b.n	d5b5a <loop+0xae>
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5b34:	f005 f9e0 	bl	daef8 <_ZN9TimeClass4hourEv>
   d5b38:	7f2b      	ldrb	r3, [r5, #28]
   d5b3a:	4298      	cmp	r0, r3
   d5b3c:	dbf1      	blt.n	d5b22 <loop+0x76>
   d5b3e:	e7f2      	b.n	d5b26 <loop+0x7a>
    if (state != oldState) publishStateTransition();
   d5b40:	4b6d      	ldr	r3, [pc, #436]	; (d5cf8 <loop+0x24c>)
   d5b42:	781b      	ldrb	r3, [r3, #0]
   d5b44:	2b03      	cmp	r3, #3
   d5b46:	d001      	beq.n	d5b4c <loop+0xa0>
   d5b48:	f7ff f994 	bl	d4e74 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d5b4c:	2002      	movs	r0, #2
   d5b4e:	f003 fa01 	bl	d8f54 <_Z15detachInterruptt>
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
   d5b52:	4b6f      	ldr	r3, [pc, #444]	; (d5d10 <loop+0x264>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	b113      	cbz	r3, d5b5e <loop+0xb2>
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d5b58:	2306      	movs	r3, #6
      state = ERROR_STATE;                                            // Response timed out
   d5b5a:	7023      	strb	r3, [r4, #0]
   d5b5c:	e0ee      	b.n	d5d3c <loop+0x290>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5b5e:	4b67      	ldr	r3, [pc, #412]	; (d5cfc <loop+0x250>)
   d5b60:	78da      	ldrb	r2, [r3, #3]
   d5b62:	4699      	mov	r9, r3
   d5b64:	b10a      	cbz	r2, d5b6a <loop+0xbe>
   d5b66:	f7ff fed9 	bl	d591c <_Z22disconnectFromParticlev>
    bool stopWDT() { return setWDT(0); };
   d5b6a:	2100      	movs	r1, #0
   d5b6c:	4869      	ldr	r0, [pc, #420]	; (d5d14 <loop+0x268>)
   d5b6e:	f000 fddf 	bl	d6730 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d5b72:	f005 f9b0 	bl	daed6 <_ZN9TimeClass3nowEv>
   d5b76:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d5b7a:	fb90 f3f5 	sdiv	r3, r0, r5
   d5b7e:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d5b82:	4b65      	ldr	r3, [pc, #404]	; (d5d18 <loop+0x26c>)
   d5b84:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d5b88:	7d1a      	ldrb	r2, [r3, #20]
   d5b8a:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d5b8e:	bfa8      	it	ge
   d5b90:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d5b94:	b10a      	cbz	r2, d5b9a <loop+0xee>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5b96:	2202      	movs	r2, #2
   d5b98:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5b9a:	2200      	movs	r2, #0
   d5b9c:	2104      	movs	r1, #4
   d5b9e:	485e      	ldr	r0, [pc, #376]	; (d5d18 <loop+0x26c>)
   d5ba0:	f7fe fc10 	bl	d43c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5ba8:	4369      	muls	r1, r5
   d5baa:	f7fe fc3f 	bl	d442c <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d5bae:	495a      	ldr	r1, [pc, #360]	; (d5d18 <loop+0x26c>)
   d5bb0:	a805      	add	r0, sp, #20
   d5bb2:	f004 ff3d 	bl	daa30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d5bb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5bba:	4856      	ldr	r0, [pc, #344]	; (d5d14 <loop+0x268>)
   d5bbc:	f000 fdb8 	bl	d6730 <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d5bc0:	4856      	ldr	r0, [pc, #344]	; (d5d1c <loop+0x270>)
   d5bc2:	f003 f8cf 	bl	d8d64 <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d5bc6:	4855      	ldr	r0, [pc, #340]	; (d5d1c <loop+0x270>)
   d5bc8:	f003 f8c3 	bl	d8d52 <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5bcc:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   d5bce:	b19b      	cbz	r3, d5bf8 <loop+0x14c>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5bd0:	889a      	ldrh	r2, [r3, #4]
   d5bd2:	2a01      	cmp	r2, #1
   d5bd4:	d110      	bne.n	d5bf8 <loop+0x14c>
    if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   d5bd6:	899b      	ldrh	r3, [r3, #12]
   d5bd8:	2b04      	cmp	r3, #4
   d5bda:	d10d      	bne.n	d5bf8 <loop+0x14c>
      setLowPowerMode("0");
   d5bdc:	4950      	ldr	r1, [pc, #320]	; (d5d20 <loop+0x274>)
   d5bde:	a808      	add	r0, sp, #32
   d5be0:	f004 fe33 	bl	da84a <_ZN6StringC1EPKc>
   d5be4:	a808      	add	r0, sp, #32
   d5be6:	f7fe fda7 	bl	d4738 <_Z15setLowPowerMode6String>
   d5bea:	a808      	add	r0, sp, #32
   d5bec:	f004 fde2 	bl	da7b4 <_ZN6StringD1Ev>
      sysStatus.openTime = 0;
   d5bf0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d5bf4:	f8a9 301c 	strh.w	r3, [r9, #28]
    if (Time.hour() < sysStatus.closeTime && Time.hour() >= sysStatus.openTime) { // We might wake up and find it is opening time.  Park is open let's get ready for the day
   d5bf8:	f005 f97e 	bl	daef8 <_ZN9TimeClass4hourEv>
   d5bfc:	f899 301d 	ldrb.w	r3, [r9, #29]
   d5c00:	4298      	cmp	r0, r3
   d5c02:	da11      	bge.n	d5c28 <loop+0x17c>
   d5c04:	f005 f978 	bl	daef8 <_ZN9TimeClass4hourEv>
   d5c08:	f899 301c 	ldrb.w	r3, [r9, #28]
   d5c0c:	4298      	cmp	r0, r3
   d5c0e:	db0b      	blt.n	d5c28 <loop+0x17c>
      attachInterrupt(intPin, sensorISR, RISING);                      // Pressure Sensor interrupt from low to high
   d5c10:	2300      	movs	r3, #0
   d5c12:	9300      	str	r3, [sp, #0]
   d5c14:	2201      	movs	r2, #1
   d5c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5c1a:	4942      	ldr	r1, [pc, #264]	; (d5d24 <loop+0x278>)
   d5c1c:	2002      	movs	r0, #2
   d5c1e:	f003 f96f 	bl	d8f00 <_Z15attachInterrupttPFvvE13InterruptModeah>
      stayAwake = stayAwakeLong;                                       // Keeps Boron awake after deep sleep - may not be needed
   d5c22:	4b38      	ldr	r3, [pc, #224]	; (d5d04 <loop+0x258>)
   d5c24:	4a40      	ldr	r2, [pc, #256]	; (d5d28 <loop+0x27c>)
   d5c26:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d5c28:	2302      	movs	r3, #2
        freeWakeupSourceMemory();
   d5c2a:	a805      	add	r0, sp, #20
   d5c2c:	7023      	strb	r3, [r4, #0]
   d5c2e:	f7fe fb1b 	bl	d4268 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
    } break;
   d5c32:	e083      	b.n	d5d3c <loop+0x290>
    if (state != oldState) publishStateTransition();
   d5c34:	4b30      	ldr	r3, [pc, #192]	; (d5cf8 <loop+0x24c>)
   d5c36:	781b      	ldrb	r3, [r3, #0]
   d5c38:	2b04      	cmp	r3, #4
   d5c3a:	d001      	beq.n	d5c40 <loop+0x194>
   d5c3c:	f7ff f91a 	bl	d4e74 <_Z22publishStateTransitionv>
    if (sensorDetect || countSignalTimer.isActive()) break;           // Don't nap until we are done with event
   d5c40:	f898 3000 	ldrb.w	r3, [r8]
   d5c44:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   d5c48:	2b00      	cmp	r3, #0
   d5c4a:	d177      	bne.n	d5d3c <loop+0x290>
    bool isValid() const { return handle!=nullptr; }
   d5c4c:	4b37      	ldr	r3, [pc, #220]	; (d5d2c <loop+0x280>)
   d5c4e:	6898      	ldr	r0, [r3, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d5c50:	2800      	cmp	r0, #0
   d5c52:	d16f      	bne.n	d5d34 <loop+0x288>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d5c54:	4b29      	ldr	r3, [pc, #164]	; (d5cfc <loop+0x250>)
   d5c56:	78db      	ldrb	r3, [r3, #3]
   d5c58:	b10b      	cbz	r3, d5c5e <loop+0x1b2>
   d5c5a:	f7ff fe5f 	bl	d591c <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                 // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d5c5e:	4b29      	ldr	r3, [pc, #164]	; (d5d04 <loop+0x258>)
    bool stopWDT() { return setWDT(0); };
   d5c60:	482c      	ldr	r0, [pc, #176]	; (d5d14 <loop+0x268>)
   d5c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c66:	2100      	movs	r1, #0
   d5c68:	601a      	str	r2, [r3, #0]
   d5c6a:	f000 fd61 	bl	d6730 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d5c6e:	f005 f932 	bl	daed6 <_ZN9TimeClass3nowEv>
   d5c72:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d5c76:	fb90 f3f5 	sdiv	r3, r0, r5
   d5c7a:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d5c7e:	4b26      	ldr	r3, [pc, #152]	; (d5d18 <loop+0x26c>)
   d5c80:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d5c84:	7d1a      	ldrb	r2, [r3, #20]
   d5c86:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d5c8a:	bfa8      	it	ge
   d5c8c:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d5c90:	b10a      	cbz	r2, d5c96 <loop+0x1ea>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5c92:	2202      	movs	r2, #2
   d5c94:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5c96:	2200      	movs	r2, #0
   d5c98:	2104      	movs	r1, #4
   d5c9a:	481f      	ldr	r0, [pc, #124]	; (d5d18 <loop+0x26c>)
   d5c9c:	f7fe fb92 	bl	d43c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .gpio(intPin,RISING)
   d5ca0:	2201      	movs	r2, #1
   d5ca2:	2102      	movs	r1, #2
   d5ca4:	f7fe fb8e 	bl	d43c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5ca8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5cac:	4369      	muls	r1, r5
   d5cae:	f7fe fbbd 	bl	d442c <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d5cb2:	4919      	ldr	r1, [pc, #100]	; (d5d18 <loop+0x26c>)
   d5cb4:	a805      	add	r0, sp, #20
   d5cb6:	f004 febb 	bl	daa30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d5cba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5cbe:	4815      	ldr	r0, [pc, #84]	; (d5d14 <loop+0x268>)
   d5cc0:	f000 fd36 	bl	d6730 <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d5cc4:	4815      	ldr	r0, [pc, #84]	; (d5d1c <loop+0x270>)
   d5cc6:	f003 f84d 	bl	d8d64 <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d5cca:	4814      	ldr	r0, [pc, #80]	; (d5d1c <loop+0x270>)
   d5ccc:	f003 f841 	bl	d8d52 <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5cd0:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   d5cd2:	2b00      	cmp	r3, #0
   d5cd4:	d0a8      	beq.n	d5c28 <loop+0x17c>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5cd6:	889a      	ldrh	r2, [r3, #4]
   d5cd8:	2a01      	cmp	r2, #1
   d5cda:	d1a5      	bne.n	d5c28 <loop+0x17c>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d5cdc:	899b      	ldrh	r3, [r3, #12]
    if (result.wakeupPin() == intPin) {                                // Executions starts here after sleep - time or sensor interrupt?
   d5cde:	2b02      	cmp	r3, #2
   d5ce0:	d178      	bne.n	d5dd4 <loop+0x328>
   d5ce2:	f001 ff67 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5ce6:	4b06      	ldr	r3, [pc, #24]	; (d5d00 <loop+0x254>)
   d5ce8:	6018      	str	r0, [r3, #0]
   d5cea:	e79d      	b.n	d5c28 <loop+0x17c>
   d5cec:	2003e4b1 	.word	0x2003e4b1
   d5cf0:	2003e4e8 	.word	0x2003e4e8
   d5cf4:	2003e408 	.word	0x2003e408
   d5cf8:	2003e470 	.word	0x2003e470
   d5cfc:	2003e4bc 	.word	0x2003e4bc
   d5d00:	2003e4b8 	.word	0x2003e4b8
   d5d04:	2003e4b4 	.word	0x2003e4b4
   d5d08:	2003e438 	.word	0x2003e438
   d5d0c:	2003e471 	.word	0x2003e471
   d5d10:	2003e3e4 	.word	0x2003e3e4
   d5d14:	2003e378 	.word	0x2003e378
   d5d18:	2003e3b0 	.word	0x2003e3b0
   d5d1c:	2003e42c 	.word	0x2003e42c
   d5d20:	000dc46e 	.word	0x000dc46e
   d5d24:	000d413d 	.word	0x000d413d
   d5d28:	00015f90 	.word	0x00015f90
   d5d2c:	2003e3c8 	.word	0x2003e3c8
   d5d30:	2003e4b0 	.word	0x2003e4b0
   d5d34:	f001 fefe 	bl	d7b34 <os_timer_is_active>
   d5d38:	2800      	cmp	r0, #0
   d5d3a:	d08b      	beq.n	d5c54 <loop+0x1a8>
  if (sensorDetect == true) {
   d5d3c:	f898 3000 	ldrb.w	r3, [r8]
   d5d40:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   d5d44:	2b00      	cmp	r3, #0
   d5d46:	f000 81fc 	beq.w	d6142 <loop+0x696>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5d4a:	2300      	movs	r3, #0
    publishQueue.publish("Interrupt", "Int Pin when high", PRIVATE);      // Diagnostic
   d5d4c:	f88d 3000 	strb.w	r3, [sp]
   d5d50:	4b9e      	ldr	r3, [pc, #632]	; (d5fcc <loop+0x520>)
   d5d52:	4a9f      	ldr	r2, [pc, #636]	; (d5fd0 <loop+0x524>)
   d5d54:	781b      	ldrb	r3, [r3, #0]
   d5d56:	499f      	ldr	r1, [pc, #636]	; (d5fd4 <loop+0x528>)
   d5d58:	489f      	ldr	r0, [pc, #636]	; (d5fd8 <loop+0x52c>)
   d5d5a:	f7fe fbc2 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    recordCount();
   d5d5e:	f7fe fd53 	bl	d4808 <_Z11recordCountv>
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d5d62:	489e      	ldr	r0, [pc, #632]	; (d5fdc <loop+0x530>)
   d5d64:	f001 f8dc 	bl	d6f20 <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d5d68:	783b      	ldrb	r3, [r7, #0]
   d5d6a:	b133      	cbz	r3, d5d7a <loop+0x2ce>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d5d6c:	4a9c      	ldr	r2, [pc, #624]	; (d5fe0 <loop+0x534>)
   d5d6e:	489d      	ldr	r0, [pc, #628]	; (d5fe4 <loop+0x538>)
   d5d70:	2101      	movs	r1, #1
   d5d72:	f7ff f9af 	bl	d50d4 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d5d76:	2300      	movs	r3, #0
   d5d78:	703b      	strb	r3, [r7, #0]
  if (currentCountsWriteNeeded) {
   d5d7a:	7833      	ldrb	r3, [r6, #0]
   d5d7c:	b13b      	cbz	r3, d5d8e <loop+0x2e2>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5d7e:	2324      	movs	r3, #36	; 0x24
   d5d80:	4a99      	ldr	r2, [pc, #612]	; (d5fe8 <loop+0x53c>)
   d5d82:	4898      	ldr	r0, [pc, #608]	; (d5fe4 <loop+0x538>)
   d5d84:	2150      	movs	r1, #80	; 0x50
   d5d86:	f001 f9c6 	bl	d7116 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d5d8a:	2300      	movs	r3, #0
   d5d8c:	7033      	strb	r3, [r6, #0]
  if (outOfMemory >= 0) {                                             // In this function we are going to reset the system if there is an out of memory error
   d5d8e:	4b97      	ldr	r3, [pc, #604]	; (d5fec <loop+0x540>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	2b00      	cmp	r3, #0
   d5d94:	db1b      	blt.n	d5dce <loop+0x322>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d5d96:	4a96      	ldr	r2, [pc, #600]	; (d5ff0 <loop+0x544>)
   d5d98:	2140      	movs	r1, #64	; 0x40
   d5d9a:	a808      	add	r0, sp, #32
   d5d9c:	f002 fa36 	bl	d820c <snprintf>
    Log.info(message);
   d5da0:	a908      	add	r1, sp, #32
   d5da2:	4894      	ldr	r0, [pc, #592]	; (d5ff4 <loop+0x548>)
   d5da4:	f7fe fb6f 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d5da8:	2064      	movs	r0, #100	; 0x64
   d5daa:	f002 fa77 	bl	d829c <delay>
   d5dae:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);                   // Publish to the console - this is important so we will not filter on verboseMod
   d5db0:	f88d 3000 	strb.w	r3, [sp]
   d5db4:	4b85      	ldr	r3, [pc, #532]	; (d5fcc <loop+0x520>)
   d5db6:	4990      	ldr	r1, [pc, #576]	; (d5ff8 <loop+0x54c>)
   d5db8:	781b      	ldrb	r3, [r3, #0]
   d5dba:	4887      	ldr	r0, [pc, #540]	; (d5fd8 <loop+0x52c>)
   d5dbc:	aa08      	add	r2, sp, #32
   d5dbe:	f7fe fb90 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d5dc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5dc6:	f002 fa69 	bl	d829c <delay>
    System.reset();                                                   // An out of memory condition occurred - reset device.
   d5dca:	f004 fe2d 	bl	daa28 <_ZN11SystemClass5resetEv>
}
   d5dce:	b019      	add	sp, #100	; 0x64
   d5dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d5dd4:	2b04      	cmp	r3, #4
   d5dd6:	f47f af27 	bne.w	d5c28 <loop+0x17c>
   d5dda:	4988      	ldr	r1, [pc, #544]	; (d5ffc <loop+0x550>)
   d5ddc:	a808      	add	r0, sp, #32
   d5dde:	f004 fd34 	bl	da84a <_ZN6StringC1EPKc>
   d5de2:	a808      	add	r0, sp, #32
   d5de4:	f7fe fca8 	bl	d4738 <_Z15setLowPowerMode6String>
   d5de8:	a808      	add	r0, sp, #32
   d5dea:	f004 fce3 	bl	da7b4 <_ZN6StringD1Ev>
   d5dee:	e71b      	b.n	d5c28 <loop+0x17c>
    if (state != oldState) {
   d5df0:	4b83      	ldr	r3, [pc, #524]	; (d6000 <loop+0x554>)
   d5df2:	781b      	ldrb	r3, [r3, #0]
   d5df4:	2b05      	cmp	r3, #5
   d5df6:	d013      	beq.n	d5e20 <loop+0x374>
      if (oldState == REPORTING_STATE) returnToReporting = true;
   d5df8:	1f9a      	subs	r2, r3, #6
   d5dfa:	4253      	negs	r3, r2
   d5dfc:	4153      	adcs	r3, r2
   d5dfe:	4a81      	ldr	r2, [pc, #516]	; (d6004 <loop+0x558>)
   d5e00:	7013      	strb	r3, [r2, #0]
      publishStateTransition();
   d5e02:	f7ff f837 	bl	d4e74 <_Z22publishStateTransitionv>
      connectionStartTime = Time.now();                 // Start the clock first time we enter the state
   d5e06:	f005 f866 	bl	daed6 <_ZN9TimeClass3nowEv>
   d5e0a:	4b7f      	ldr	r3, [pc, #508]	; (d6008 <loop+0x55c>)
   d5e0c:	6018      	str	r0, [r3, #0]
        network_on(*this, 0, 0, NULL);
   d5e0e:	487f      	ldr	r0, [pc, #508]	; (d600c <loop+0x560>)
   d5e10:	2300      	movs	r3, #0
   d5e12:	6840      	ldr	r0, [r0, #4]
   d5e14:	461a      	mov	r2, r3
   d5e16:	4619      	mov	r1, r3
   d5e18:	f002 f998 	bl	d814c <network_on>
        spark_cloud_flag_connect();
   d5e1c:	f002 f91e 	bl	d805c <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e20:	f002 f924 	bl	d806c <spark_cloud_flag_connected>
   d5e24:	f8df 91fc 	ldr.w	r9, [pc, #508]	; d6024 <loop+0x578>
    if (Particle.connected()) {
   d5e28:	4605      	mov	r5, r0
   d5e2a:	2800      	cmp	r0, #0
   d5e2c:	d043      	beq.n	d5eb6 <loop+0x40a>
      sysStatus.connectedStatus = true;
   d5e2e:	4d6c      	ldr	r5, [pc, #432]	; (d5fe0 <loop+0x534>)
      particleConnectionNeeded = false;                               // Connected so we don't need this flag
   d5e30:	2300      	movs	r3, #0
   d5e32:	f889 3000 	strb.w	r3, [r9]
      sysStatus.connectedStatus = true;
   d5e36:	2301      	movs	r3, #1
   d5e38:	70eb      	strb	r3, [r5, #3]
      sysStatus.lastConnection = Time.now();                          // This is the last time we attempted to connect
   d5e3a:	f005 f84c 	bl	daed6 <_ZN9TimeClass3nowEv>
   d5e3e:	6268      	str	r0, [r5, #36]	; 0x24
    if (!particleConnectionNeeded) {                                  // Whether the connection was successful or not, we will collect and publish metrics
   d5e40:	f899 3000 	ldrb.w	r3, [r9]
   d5e44:	2b00      	cmp	r3, #0
   d5e46:	f47f af79 	bne.w	d5d3c <loop+0x290>
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d5e4a:	f005 f844 	bl	daed6 <_ZN9TimeClass3nowEv>
   d5e4e:	4b6e      	ldr	r3, [pc, #440]	; (d6008 <loop+0x55c>)
   d5e50:	4d63      	ldr	r5, [pc, #396]	; (d5fe0 <loop+0x534>)
   d5e52:	681b      	ldr	r3, [r3, #0]
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d5e54:	4a64      	ldr	r2, [pc, #400]	; (d5fe8 <loop+0x53c>)
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d5e56:	1ac0      	subs	r0, r0, r3
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d5e58:	4b6d      	ldr	r3, [pc, #436]	; (d6010 <loop+0x564>)
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d5e5a:	8b91      	ldrh	r1, [r2, #28]
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d5e5c:	681b      	ldr	r3, [r3, #0]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d5e5e:	b280      	uxth	r0, r0
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d5e60:	4298      	cmp	r0, r3
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d5e62:	8528      	strh	r0, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d5e64:	bf88      	it	hi
   d5e66:	852b      	strhhi	r3, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d5e68:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   d5e6a:	4299      	cmp	r1, r3
      snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d5e6c:	f04f 0120 	mov.w	r1, #32
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d5e70:	bf38      	it	cc
   d5e72:	8393      	strhcc	r3, [r2, #28]
      snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d5e74:	eb0d 0001 	add.w	r0, sp, r1
   d5e78:	4a66      	ldr	r2, [pc, #408]	; (d6014 <loop+0x568>)
   d5e7a:	f002 f9c7 	bl	d820c <snprintf>
      Log.info(connectionStr);
   d5e7e:	485d      	ldr	r0, [pc, #372]	; (d5ff4 <loop+0x548>)
   d5e80:	a908      	add	r1, sp, #32
   d5e82:	f7fe fb00 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
      if (sysStatus.verboseMode) publishQueue.publish("Cellular",connectionStr,PRIVATE);
   d5e86:	792b      	ldrb	r3, [r5, #4]
   d5e88:	b14b      	cbz	r3, d5e9e <loop+0x3f2>
   d5e8a:	2300      	movs	r3, #0
   d5e8c:	f88d 3000 	strb.w	r3, [sp]
   d5e90:	4b4e      	ldr	r3, [pc, #312]	; (d5fcc <loop+0x520>)
   d5e92:	4961      	ldr	r1, [pc, #388]	; (d6018 <loop+0x56c>)
   d5e94:	781b      	ldrb	r3, [r3, #0]
   d5e96:	4850      	ldr	r0, [pc, #320]	; (d5fd8 <loop+0x52c>)
   d5e98:	aa08      	add	r2, sp, #32
   d5e9a:	f7fe fb22 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      systemStatusWriteNeeded = true;
   d5e9e:	2301      	movs	r3, #1
   d5ea0:	703b      	strb	r3, [r7, #0]
      currentCountsWriteNeeded = true;
   d5ea2:	7033      	strb	r3, [r6, #0]
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d5ea4:	78eb      	ldrb	r3, [r5, #3]
   d5ea6:	b123      	cbz	r3, d5eb2 <loop+0x406>
   d5ea8:	4b56      	ldr	r3, [pc, #344]	; (d6004 <loop+0x558>)
   d5eaa:	781b      	ldrb	r3, [r3, #0]
   d5eac:	2b00      	cmp	r3, #0
   d5eae:	f47f ae53 	bne.w	d5b58 <loop+0xac>
      state = IDLE_STATE;
   d5eb2:	2302      	movs	r3, #2
   d5eb4:	e651      	b.n	d5b5a <loop+0xae>
    else if ((Time.now() - connectionStartTime) > connectMaxTimeSec) {
   d5eb6:	f005 f80e 	bl	daed6 <_ZN9TimeClass3nowEv>
   d5eba:	4b53      	ldr	r3, [pc, #332]	; (d6008 <loop+0x55c>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	1ac0      	subs	r0, r0, r3
   d5ec0:	4b53      	ldr	r3, [pc, #332]	; (d6010 <loop+0x564>)
   d5ec2:	681b      	ldr	r3, [r3, #0]
   d5ec4:	4298      	cmp	r0, r3
   d5ec6:	d9bb      	bls.n	d5e40 <loop+0x394>
      particleConnectionNeeded = false;                               // Timed out so we will give up until the next hour
   d5ec8:	f889 5000 	strb.w	r5, [r9]
      if ((Time.now() - sysStatus.lastConnection) > 7200) {             // Only sends to ERROR_STATE if it has been over 2 hours
   d5ecc:	f005 f803 	bl	daed6 <_ZN9TimeClass3nowEv>
   d5ed0:	4b43      	ldr	r3, [pc, #268]	; (d5fe0 <loop+0x534>)
   d5ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   d5ed4:	1a80      	subs	r0, r0, r2
   d5ed6:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d5eda:	d906      	bls.n	d5eea <loop+0x43e>
        state = ERROR_STATE;     
   d5edc:	2301      	movs	r3, #1
   d5ede:	7023      	strb	r3, [r4, #0]
   d5ee0:	f001 fe68 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   d5ee4:	4b4d      	ldr	r3, [pc, #308]	; (d601c <loop+0x570>)
   d5ee6:	6018      	str	r0, [r3, #0]
        break;
   d5ee8:	e728      	b.n	d5d3c <loop+0x290>
      Log.info("cloud connection unsuccessful");
   d5eea:	494d      	ldr	r1, [pc, #308]	; (d6020 <loop+0x574>)
   d5eec:	4841      	ldr	r0, [pc, #260]	; (d5ff4 <loop+0x548>)
      sysStatus.connectedStatus = false;
   d5eee:	70dd      	strb	r5, [r3, #3]
      Log.info("cloud connection unsuccessful");
   d5ef0:	f7fe fac9 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
   d5ef4:	e7a4      	b.n	d5e40 <loop+0x394>
    if (state != oldState) publishStateTransition();
   d5ef6:	4b42      	ldr	r3, [pc, #264]	; (d6000 <loop+0x554>)
   d5ef8:	781b      	ldrb	r3, [r3, #0]
   d5efa:	2b06      	cmp	r3, #6
   d5efc:	d001      	beq.n	d5f02 <loop+0x456>
   d5efe:	f7fe ffb9 	bl	d4e74 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) {                                 // Asking us to report but not connected
   d5f02:	4d37      	ldr	r5, [pc, #220]	; (d5fe0 <loop+0x534>)
   d5f04:	78eb      	ldrb	r3, [r5, #3]
   d5f06:	46a9      	mov	r9, r5
   d5f08:	b93b      	cbnz	r3, d5f1a <loop+0x46e>
      particleConnectionNeeded = true;                                // Set the flag to connect us to Particle
   d5f0a:	4b46      	ldr	r3, [pc, #280]	; (d6024 <loop+0x578>)
   d5f0c:	2201      	movs	r2, #1
   d5f0e:	701a      	strb	r2, [r3, #0]
      lastReportedTime = Time.now();                                  // We are only going to try once
   d5f10:	f004 ffe1 	bl	daed6 <_ZN9TimeClass3nowEv>
   d5f14:	4b44      	ldr	r3, [pc, #272]	; (d6028 <loop+0x57c>)
   d5f16:	6018      	str	r0, [r3, #0]
   d5f18:	e60a      	b.n	d5b30 <loop+0x84>
    if (!sysStatus.lowPowerMode) takeMeasurements();                  // Do this here as device not in lowPowerMode will not meausre coming out of sleep / napping
   d5f1a:	79ab      	ldrb	r3, [r5, #6]
   d5f1c:	b1b3      	cbz	r3, d5f4c <loop+0x4a0>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house and publish to Google Sheets
   d5f1e:	f004 ffeb 	bl	daef8 <_ZN9TimeClass4hourEv>
   d5f22:	f899 301c 	ldrb.w	r3, [r9, #28]
   d5f26:	4298      	cmp	r0, r3
   d5f28:	d11d      	bne.n	d5f66 <loop+0x4ba>
   d5f2a:	f7fe ffe1 	bl	d4ef0 <_Z12dailyCleanupv>
      if (Time.hour() == sysStatus.openTime && sysStatus.openTime==0) sendEvent();    // Need this so we can get 24 hour reporting for non-sleeping devices
   d5f2e:	f004 ffe3 	bl	daef8 <_ZN9TimeClass4hourEv>
   d5f32:	f899 301c 	ldrb.w	r3, [r9, #28]
   d5f36:	4298      	cmp	r0, r3
   d5f38:	d102      	bne.n	d5f40 <loop+0x494>
   d5f3a:	b908      	cbnz	r0, d5f40 <loop+0x494>
   d5f3c:	f7fe fd28 	bl	d4990 <_Z9sendEventv>
   d5f40:	f001 fe38 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();                                    // This is for a webHook response timeout
   d5f44:	4b39      	ldr	r3, [pc, #228]	; (d602c <loop+0x580>)
   d5f46:	6018      	str	r0, [r3, #0]
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d5f48:	2307      	movs	r3, #7
   d5f4a:	e606      	b.n	d5b5a <loop+0xae>
    if (!sysStatus.lowPowerMode) takeMeasurements();                  // Do this here as device not in lowPowerMode will not meausre coming out of sleep / napping
   d5f4c:	f7ff f84c 	bl	d4fe8 <_Z16takeMeasurementsv>
    if (sysStatus.connectedStatus) {
   d5f50:	78eb      	ldrb	r3, [r5, #3]
   d5f52:	2b00      	cmp	r3, #0
   d5f54:	d1e3      	bne.n	d5f1e <loop+0x472>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d5f56:	4b36      	ldr	r3, [pc, #216]	; (d6030 <loop+0x584>)
   d5f58:	4a36      	ldr	r2, [pc, #216]	; (d6034 <loop+0x588>)
   d5f5a:	601a      	str	r2, [r3, #0]
   d5f5c:	f001 fe2a 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5f60:	4b35      	ldr	r3, [pc, #212]	; (d6038 <loop+0x58c>)
   d5f62:	6018      	str	r0, [r3, #0]
   d5f64:	e7a5      	b.n	d5eb2 <loop+0x406>
      else sendEvent();                                               // Send data to Ubidots but not at opening time as there is nothing to publish
   d5f66:	f7fe fd13 	bl	d4990 <_Z9sendEventv>
   d5f6a:	e7e0      	b.n	d5f2e <loop+0x482>
    if (state != oldState) publishStateTransition();
   d5f6c:	4b24      	ldr	r3, [pc, #144]	; (d6000 <loop+0x554>)
   d5f6e:	781b      	ldrb	r3, [r3, #0]
   d5f70:	2b07      	cmp	r3, #7
   d5f72:	d001      	beq.n	d5f78 <loop+0x4cc>
   d5f74:	f7fe ff7e 	bl	d4e74 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   d5f78:	4b30      	ldr	r3, [pc, #192]	; (d603c <loop+0x590>)
   d5f7a:	781d      	ldrb	r5, [r3, #0]
   d5f7c:	b9b5      	cbnz	r5, d5fac <loop+0x500>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d5f7e:	4b2c      	ldr	r3, [pc, #176]	; (d6030 <loop+0x584>)
   d5f80:	4a2c      	ldr	r2, [pc, #176]	; (d6034 <loop+0x588>)
   d5f82:	601a      	str	r2, [r3, #0]
   d5f84:	f001 fe16 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5f88:	4b2b      	ldr	r3, [pc, #172]	; (d6038 <loop+0x58c>)
   d5f8a:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d5f8c:	2302      	movs	r3, #2
   d5f8e:	7023      	strb	r3, [r4, #0]
      if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d5f90:	4b15      	ldr	r3, [pc, #84]	; (d5fe8 <loop+0x53c>)
   d5f92:	6859      	ldr	r1, [r3, #4]
   d5f94:	2900      	cmp	r1, #0
   d5f96:	f43f aed1 	beq.w	d5d3c <loop+0x290>
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d5f9a:	681a      	ldr	r2, [r3, #0]
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d5f9c:	605d      	str	r5, [r3, #4]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d5f9e:	1a52      	subs	r2, r2, r1
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d5fa0:	e9c3 5505 	strd	r5, r5, [r3, #20]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d5fa4:	601a      	str	r2, [r3, #0]
        currentCountsWriteNeeded=true;
   d5fa6:	2301      	movs	r3, #1
   d5fa8:	7033      	strb	r3, [r6, #0]
   d5faa:	e6c7      	b.n	d5d3c <loop+0x290>
   d5fac:	f001 fe02 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d5fb0:	4b1e      	ldr	r3, [pc, #120]	; (d602c <loop+0x580>)
   d5fb2:	681b      	ldr	r3, [r3, #0]
   d5fb4:	1ac0      	subs	r0, r0, r3
   d5fb6:	f247 5330 	movw	r3, #30000	; 0x7530
   d5fba:	4298      	cmp	r0, r3
   d5fbc:	f67f aebe 	bls.w	d5d3c <loop+0x290>
   d5fc0:	f001 fdf8 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5fc4:	4b15      	ldr	r3, [pc, #84]	; (d601c <loop+0x570>)
   d5fc6:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d5fc8:	2301      	movs	r3, #1
   d5fca:	e5c6      	b.n	d5b5a <loop+0xae>
   d5fcc:	2003e368 	.word	0x2003e368
   d5fd0:	000dc692 	.word	0x000dc692
   d5fd4:	000dc36c 	.word	0x000dc36c
   d5fd8:	2003e474 	.word	0x2003e474
   d5fdc:	2003e378 	.word	0x2003e378
   d5fe0:	2003e4bc 	.word	0x2003e4bc
   d5fe4:	2003e41c 	.word	0x2003e41c
   d5fe8:	2003e3e4 	.word	0x2003e3e4
   d5fec:	2003e220 	.word	0x2003e220
   d5ff0:	000dc709 	.word	0x000dc709
   d5ff4:	2003e5dc 	.word	0x2003e5dc
   d5ff8:	000dc728 	.word	0x000dc728
   d5ffc:	000dc46e 	.word	0x000dc46e
   d6000:	2003e470 	.word	0x2003e470
   d6004:	2003e371 	.word	0x2003e371
   d6008:	2003e374 	.word	0x2003e374
   d600c:	2003e508 	.word	0x2003e508
   d6010:	2003e20c 	.word	0x2003e20c
   d6014:	000dc60d 	.word	0x000dc60d
   d6018:	000dc622 	.word	0x000dc622
   d601c:	2003e4ac 	.word	0x2003e4ac
   d6020:	000dc5ef 	.word	0x000dc5ef
   d6024:	2003e471 	.word	0x2003e471
   d6028:	2003e438 	.word	0x2003e438
   d602c:	2003e4f0 	.word	0x2003e4f0
   d6030:	2003e4b4 	.word	0x2003e4b4
   d6034:	00015f90 	.word	0x00015f90
   d6038:	2003e4b8 	.word	0x2003e4b8
   d603c:	2003e418 	.word	0x2003e418
    if (state != oldState) publishStateTransition();
   d6040:	4b6f      	ldr	r3, [pc, #444]	; (d6200 <loop+0x754>)
   d6042:	781b      	ldrb	r3, [r3, #0]
   d6044:	2b01      	cmp	r3, #1
   d6046:	d001      	beq.n	d604c <loop+0x5a0>
   d6048:	f7fe ff14 	bl	d4e74 <_Z22publishStateTransitionv>
   d604c:	f001 fdb2 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d6050:	4b6c      	ldr	r3, [pc, #432]	; (d6204 <loop+0x758>)
   d6052:	681b      	ldr	r3, [r3, #0]
   d6054:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d6058:	3330      	adds	r3, #48	; 0x30
   d605a:	4283      	cmp	r3, r0
   d605c:	f4bf ae6e 	bcs.w	d5d3c <loop+0x290>
      if ((Time.now() - sysStatus.lastConnection) > 7200L) {           // It is been over two hours since we last connected to the cloud - time for a reset
   d6060:	4d69      	ldr	r5, [pc, #420]	; (d6208 <loop+0x75c>)
   d6062:	f004 ff38 	bl	daed6 <_ZN9TimeClass3nowEv>
   d6066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d6068:	1ac0      	subs	r0, r0, r3
   d606a:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d606e:	462c      	mov	r4, r5
   d6070:	d913      	bls.n	d609a <loop+0x5ee>
        sysStatus.lastConnection = Time.now() - 3600;                 // Wait an hour before we come back to this condition
   d6072:	f004 ff30 	bl	daed6 <_ZN9TimeClass3nowEv>
   d6076:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d607a:	6268      	str	r0, [r5, #36]	; 0x24
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d607c:	462a      	mov	r2, r5
   d607e:	2101      	movs	r1, #1
   d6080:	4862      	ldr	r0, [pc, #392]	; (d620c <loop+0x760>)
   d6082:	f7ff f827 	bl	d50d4 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        Log.error("failed to connect to cloud, doing deep reset");
   d6086:	4862      	ldr	r0, [pc, #392]	; (d6210 <loop+0x764>)
   d6088:	4962      	ldr	r1, [pc, #392]	; (d6214 <loop+0x768>)
   d608a:	f7fe fa13 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
        delay(100);
   d608e:	2064      	movs	r0, #100	; 0x64
   d6090:	f002 f904 	bl	d829c <delay>
        fullModemReset();                                             // Full Modem reset and reboot
   d6094:	f7ff fc9c 	bl	d59d0 <_Z14fullModemResetv>
   d6098:	e650      	b.n	d5d3c <loop+0x290>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) {     //It has been more than two hours since a sucessful hook response
   d609a:	f004 ff1c 	bl	daed6 <_ZN9TimeClass3nowEv>
   d609e:	6a2b      	ldr	r3, [r5, #32]
   d60a0:	1ac0      	subs	r0, r0, r3
   d60a2:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d60a6:	78eb      	ldrb	r3, [r5, #3]
   d60a8:	d919      	bls.n	d60de <loop+0x632>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);  // Broadcast Reset Action
   d60aa:	b153      	cbz	r3, d60c2 <loop+0x616>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d60ac:	4b5a      	ldr	r3, [pc, #360]	; (d6218 <loop+0x76c>)
   d60ae:	4a5b      	ldr	r2, [pc, #364]	; (d621c <loop+0x770>)
   d60b0:	781b      	ldrb	r3, [r3, #0]
   d60b2:	f88d 3000 	strb.w	r3, [sp]
   d60b6:	4b5a      	ldr	r3, [pc, #360]	; (d6220 <loop+0x774>)
   d60b8:	495a      	ldr	r1, [pc, #360]	; (d6224 <loop+0x778>)
   d60ba:	781b      	ldrb	r3, [r3, #0]
   d60bc:	485a      	ldr	r0, [pc, #360]	; (d6228 <loop+0x77c>)
   d60be:	f7fe fa10 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);                                                  // Time to publish
   d60c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d60c6:	f002 f8e9 	bl	d829c <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d60ca:	2300      	movs	r3, #0
   d60cc:	6123      	str	r3, [r4, #16]
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d60ce:	f004 ff02 	bl	daed6 <_ZN9TimeClass3nowEv>
        systemStatusWriteNeeded=true;
   d60d2:	2301      	movs	r3, #1
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d60d4:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d60d8:	6220      	str	r0, [r4, #32]
        systemStatusWriteNeeded=true;
   d60da:	703b      	strb	r3, [r7, #0]
   d60dc:	e7da      	b.n	d6094 <loop+0x5e8>
      else if (sysStatus.resetCount <= 3) {                                // First try simple reset
   d60de:	692a      	ldr	r2, [r5, #16]
   d60e0:	2a03      	cmp	r2, #3
   d60e2:	dc12      	bgt.n	d610a <loop+0x65e>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - System Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d60e4:	b153      	cbz	r3, d60fc <loop+0x650>
   d60e6:	4b4c      	ldr	r3, [pc, #304]	; (d6218 <loop+0x76c>)
   d60e8:	4a50      	ldr	r2, [pc, #320]	; (d622c <loop+0x780>)
   d60ea:	781b      	ldrb	r3, [r3, #0]
   d60ec:	f88d 3000 	strb.w	r3, [sp]
   d60f0:	4b4b      	ldr	r3, [pc, #300]	; (d6220 <loop+0x774>)
   d60f2:	494c      	ldr	r1, [pc, #304]	; (d6224 <loop+0x778>)
   d60f4:	781b      	ldrb	r3, [r3, #0]
   d60f6:	484c      	ldr	r0, [pc, #304]	; (d6228 <loop+0x77c>)
   d60f8:	f7fe f9f3 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d60fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6100:	f002 f8cc 	bl	d829c <delay>
        System.reset();
   d6104:	f004 fc90 	bl	daa28 <_ZN11SystemClass5resetEv>
   d6108:	e618      	b.n	d5d3c <loop+0x290>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcase Reset Action
   d610a:	b153      	cbz	r3, d6122 <loop+0x676>
   d610c:	4b42      	ldr	r3, [pc, #264]	; (d6218 <loop+0x76c>)
   d610e:	4a43      	ldr	r2, [pc, #268]	; (d621c <loop+0x770>)
   d6110:	781b      	ldrb	r3, [r3, #0]
   d6112:	f88d 3000 	strb.w	r3, [sp]
   d6116:	4b42      	ldr	r3, [pc, #264]	; (d6220 <loop+0x774>)
   d6118:	4942      	ldr	r1, [pc, #264]	; (d6224 <loop+0x778>)
   d611a:	781b      	ldrb	r3, [r3, #0]
   d611c:	4842      	ldr	r0, [pc, #264]	; (d6228 <loop+0x77c>)
   d611e:	f7fe f9e0 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d6122:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6126:	f002 f8b9 	bl	d829c <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d612a:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d612c:	4a36      	ldr	r2, [pc, #216]	; (d6208 <loop+0x75c>)
   d612e:	4837      	ldr	r0, [pc, #220]	; (d620c <loop+0x760>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d6130:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d6132:	2101      	movs	r1, #1
   d6134:	f7fe ffce 	bl	d50d4 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        ab1805.deepPowerDown();                                       // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d6138:	211e      	movs	r1, #30
   d613a:	483d      	ldr	r0, [pc, #244]	; (d6230 <loop+0x784>)
   d613c:	f000 fc52 	bl	d69e4 <_ZN6AB180513deepPowerDownEi>
   d6140:	e5fc      	b.n	d5d3c <loop+0x290>
  else if ((millis() - timeSinceILastCheckedForATap > 100)) {
   d6142:	4c3c      	ldr	r4, [pc, #240]	; (d6234 <loop+0x788>)
   d6144:	f001 fd36 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
   d6148:	6823      	ldr	r3, [r4, #0]
   d614a:	1ac0      	subs	r0, r0, r3
   d614c:	2864      	cmp	r0, #100	; 0x64
   d614e:	f67f ae08 	bls.w	d5d62 <loop+0x2b6>
   d6152:	f001 fd2f 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
    timeSinceILastCheckedForATap = millis();
   d6156:	6020      	str	r0, [r4, #0]
    if (accel.readTap()) {
   d6158:	4837      	ldr	r0, [pc, #220]	; (d6238 <loop+0x78c>)
   d615a:	f001 f8ef 	bl	d733c <_ZN8MMA8452Q7readTapEv>
   d615e:	2800      	cmp	r0, #0
   d6160:	f43f adff 	beq.w	d5d62 <loop+0x2b6>
      snprintf(pinMessage, sizeof(pinMessage), "Before - D2 is %s and D3 is %s", (digitalRead(intPin)) ? "High" : "Low", (digitalRead(int2Pin) ? "High": "Low"));
   d6164:	2002      	movs	r0, #2
   d6166:	f005 f939 	bl	db3dc <digitalRead>
   d616a:	4c34      	ldr	r4, [pc, #208]	; (d623c <loop+0x790>)
   d616c:	4d34      	ldr	r5, [pc, #208]	; (d6240 <loop+0x794>)
   d616e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d6220 <loop+0x774>
   d6172:	2800      	cmp	r0, #0
   d6174:	bf14      	ite	ne
   d6176:	4623      	movne	r3, r4
   d6178:	462b      	moveq	r3, r5
   d617a:	2003      	movs	r0, #3
   d617c:	9303      	str	r3, [sp, #12]
   d617e:	f005 f92d 	bl	db3dc <digitalRead>
   d6182:	2800      	cmp	r0, #0
   d6184:	bf14      	ite	ne
   d6186:	4620      	movne	r0, r4
   d6188:	4628      	moveq	r0, r5
   d618a:	9b03      	ldr	r3, [sp, #12]
   d618c:	9000      	str	r0, [sp, #0]
   d618e:	4a2d      	ldr	r2, [pc, #180]	; (d6244 <loop+0x798>)
   d6190:	2140      	movs	r1, #64	; 0x40
   d6192:	a808      	add	r0, sp, #32
   d6194:	f002 f83a 	bl	d820c <snprintf>
      publishQueue.publish("Pin State", pinMessage, PRIVATE);
   d6198:	f88d 9000 	strb.w	r9, [sp]
   d619c:	f898 3000 	ldrb.w	r3, [r8]
   d61a0:	4929      	ldr	r1, [pc, #164]	; (d6248 <loop+0x79c>)
   d61a2:	4821      	ldr	r0, [pc, #132]	; (d6228 <loop+0x77c>)
   d61a4:	aa08      	add	r2, sp, #32
   d61a6:	f7fe f99c 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      recordCount();
   d61aa:	f7fe fb2d 	bl	d4808 <_Z11recordCountv>
      publishQueue.publish("Register", "Tap detected via i2c", PRIVATE);      // Diagnostic
   d61ae:	f88d 9000 	strb.w	r9, [sp]
   d61b2:	f898 3000 	ldrb.w	r3, [r8]
   d61b6:	4a25      	ldr	r2, [pc, #148]	; (d624c <loop+0x7a0>)
   d61b8:	4925      	ldr	r1, [pc, #148]	; (d6250 <loop+0x7a4>)
   d61ba:	481b      	ldr	r0, [pc, #108]	; (d6228 <loop+0x77c>)
   d61bc:	f7fe f991 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      snprintf(pinMessage, sizeof(pinMessage), "After - D2 is %s and D3 is %s", (digitalRead(intPin)) ? "High" : "Low", (digitalRead(int2Pin) ? "High": "Low"));
   d61c0:	2002      	movs	r0, #2
   d61c2:	f005 f90b 	bl	db3dc <digitalRead>
   d61c6:	2800      	cmp	r0, #0
   d61c8:	bf14      	ite	ne
   d61ca:	4623      	movne	r3, r4
   d61cc:	462b      	moveq	r3, r5
   d61ce:	2003      	movs	r0, #3
   d61d0:	9303      	str	r3, [sp, #12]
   d61d2:	f005 f903 	bl	db3dc <digitalRead>
   d61d6:	2800      	cmp	r0, #0
   d61d8:	bf14      	ite	ne
   d61da:	4620      	movne	r0, r4
   d61dc:	4628      	moveq	r0, r5
   d61de:	9b03      	ldr	r3, [sp, #12]
   d61e0:	9000      	str	r0, [sp, #0]
   d61e2:	4a1c      	ldr	r2, [pc, #112]	; (d6254 <loop+0x7a8>)
   d61e4:	2140      	movs	r1, #64	; 0x40
   d61e6:	a808      	add	r0, sp, #32
   d61e8:	f002 f810 	bl	d820c <snprintf>
      publishQueue.publish("Pin State", pinMessage, PRIVATE);
   d61ec:	f88d 9000 	strb.w	r9, [sp]
   d61f0:	f898 3000 	ldrb.w	r3, [r8]
   d61f4:	4914      	ldr	r1, [pc, #80]	; (d6248 <loop+0x79c>)
   d61f6:	480c      	ldr	r0, [pc, #48]	; (d6228 <loop+0x77c>)
   d61f8:	aa08      	add	r2, sp, #32
   d61fa:	f7fe f972 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d61fe:	e5b0      	b.n	d5d62 <loop+0x2b6>
   d6200:	2003e470 	.word	0x2003e470
   d6204:	2003e4ac 	.word	0x2003e4ac
   d6208:	2003e4bc 	.word	0x2003e4bc
   d620c:	2003e41c 	.word	0x2003e41c
   d6210:	2003e5dc 	.word	0x2003e5dc
   d6214:	000dc62b 	.word	0x000dc62b
   d6218:	2003e369 	.word	0x2003e369
   d621c:	000dc658 	.word	0x000dc658
   d6220:	2003e368 	.word	0x2003e368
   d6224:	000dc6c7 	.word	0x000dc6c7
   d6228:	2003e474 	.word	0x2003e474
   d622c:	000dc677 	.word	0x000dc677
   d6230:	2003e378 	.word	0x2003e378
   d6234:	2003e4ec 	.word	0x2003e4ec
   d6238:	2003e398 	.word	0x2003e398
   d623c:	000dc5e6 	.word	0x000dc5e6
   d6240:	000dc5eb 	.word	0x000dc5eb
   d6244:	000dc6a4 	.word	0x000dc6a4
   d6248:	000dc6c3 	.word	0x000dc6c3
   d624c:	000dc6cd 	.word	0x000dc6cd
   d6250:	000dc6e2 	.word	0x000dc6e2
   d6254:	000dc6eb 	.word	0x000dc6eb

000d6258 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d6258:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d625a:	2000      	movs	r0, #0
   d625c:	f001 ff2e 	bl	d80bc <spark_sync_time_pending>
   d6260:	b128      	cbz	r0, d626e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6262:	f001 ff03 	bl	d806c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6266:	f080 0001 	eor.w	r0, r0, #1
   d626a:	b2c0      	uxtb	r0, r0
    }
   d626c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d626e:	2001      	movs	r0, #1
   d6270:	e7fc      	b.n	d626c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
   d6272:	0000      	movs	r0, r0
   d6274:	0000      	movs	r0, r0
	...

000d6278 <_Z11setTimeZone6String>:
 * Values outside this range will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if successful, 0 if invalid command
 */
int setTimeZone(String command)
{
   d6278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d627c:	b0c8      	sub	sp, #288	; 0x120
   d627e:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6280:	f001 fef4 	bl	d806c <spark_cloud_flag_connected>
        if (!connected()) {
   d6284:	b110      	cbz	r0, d628c <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d6286:	2000      	movs	r0, #0
   d6288:	f001 ff10 	bl	d80ac <spark_sync_time>
        return hal_timer_millis(nullptr);
   d628c:	2000      	movs	r0, #0
   d628e:	f001 fca1 	bl	d7bd4 <hal_timer_millis>
   d6292:	f04f 0a00 	mov.w	sl, #0
   d6296:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d6298:	f247 562f 	movw	r6, #29999	; 0x752f
   d629c:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d629e:	2000      	movs	r0, #0
   d62a0:	f001 fc98 	bl	d7bd4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d62a4:	ebb0 0409 	subs.w	r4, r0, r9
   d62a8:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d62ac:	42af      	cmp	r7, r5
   d62ae:	bf08      	it	eq
   d62b0:	42a6      	cmpeq	r6, r4
   d62b2:	d305      	bcc.n	d62c0 <_Z11setTimeZone6String+0x48>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d62b4:	f7ff ffd0 	bl	d6258 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d62b8:	b910      	cbnz	r0, d62c0 <_Z11setTimeZone6String+0x48>
            spark_process();
   d62ba:	f001 fec7 	bl	d804c <spark_process>
        while (_while() && !_condition()) {
   d62be:	e7ee      	b.n	d629e <_Z11setTimeZone6String+0x26>
   d62c0:	f7ff ffca 	bl	d6258 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d62c4:	f8d8 0000 	ldr.w	r0, [r8]
   d62c8:	220a      	movs	r2, #10
   d62ca:	a903      	add	r1, sp, #12
   d62cc:	f005 ff78 	bl	dc1c0 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d62d0:	f100 030c 	add.w	r3, r0, #12
   d62d4:	b2db      	uxtb	r3, r3
   d62d6:	2b18      	cmp	r3, #24
   d62d8:	d848      	bhi.n	d636c <_Z11setTimeZone6String+0xf4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d62da:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d62dc:	ee07 5a90 	vmov	s15, r5
   d62e0:	4b27      	ldr	r3, [pc, #156]	; (d6380 <_Z11setTimeZone6String+0x108>)
   d62e2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d62e6:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d62e8:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d62ec:	f004 fc8a 	bl	dac04 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d62f0:	4b24      	ldr	r3, [pc, #144]	; (d6384 <_Z11setTimeZone6String+0x10c>)
   d62f2:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d62f4:	f004 fe34 	bl	daf60 <_ZN9TimeClass5localEv>
   d62f8:	4606      	mov	r6, r0
   d62fa:	f004 fdec 	bl	daed6 <_ZN9TimeClass3nowEv>
   d62fe:	1a30      	subs	r0, r6, r0
   d6300:	f005 fa76 	bl	db7f0 <__aeabi_i2d>
   d6304:	a31c      	add	r3, pc, #112	; (adr r3, d6378 <_Z11setTimeZone6String+0x100>)
   d6306:	e9d3 2300 	ldrd	r2, r3, [r3]
   d630a:	f005 fc05 	bl	dbb18 <__aeabi_ddiv>
   d630e:	4a1e      	ldr	r2, [pc, #120]	; (d6388 <_Z11setTimeZone6String+0x110>)
   d6310:	e9cd 0100 	strd	r0, r1, [sp]
   d6314:	210a      	movs	r1, #10
   d6316:	481d      	ldr	r0, [pc, #116]	; (d638c <_Z11setTimeZone6String+0x114>)
   d6318:	f001 ff78 	bl	d820c <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d631c:	f001 fea6 	bl	d806c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d6320:	b310      	cbz	r0, d6368 <_Z11setTimeZone6String+0xf0>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d6322:	462b      	mov	r3, r5
   d6324:	4a1a      	ldr	r2, [pc, #104]	; (d6390 <_Z11setTimeZone6String+0x118>)
   d6326:	4d1b      	ldr	r5, [pc, #108]	; (d6394 <_Z11setTimeZone6String+0x11c>)
   d6328:	f44f 7180 	mov.w	r1, #256	; 0x100
        val_(0) {
   d632c:	2600      	movs	r6, #0
   d632e:	a808      	add	r0, sp, #32
   d6330:	f001 ff6c 	bl	d820c <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d6334:	f88d 6000 	strb.w	r6, [sp]
   d6338:	4917      	ldr	r1, [pc, #92]	; (d6398 <_Z11setTimeZone6String+0x120>)
   d633a:	782b      	ldrb	r3, [r5, #0]
   d633c:	4817      	ldr	r0, [pc, #92]	; (d639c <_Z11setTimeZone6String+0x124>)
   d633e:	aa08      	add	r2, sp, #32
   d6340:	f7fe f8cf 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d6344:	f004 fdc7 	bl	daed6 <_ZN9TimeClass3nowEv>
   d6348:	4602      	mov	r2, r0
   d634a:	17c3      	asrs	r3, r0, #31
   d634c:	a804      	add	r0, sp, #16
   d634e:	f004 fcbf 	bl	dacd0 <_ZN9TimeClass7timeStrEx>
   d6352:	f88d 6000 	strb.w	r6, [sp]
   d6356:	782b      	ldrb	r3, [r5, #0]
   d6358:	9a04      	ldr	r2, [sp, #16]
   d635a:	490f      	ldr	r1, [pc, #60]	; (d6398 <_Z11setTimeZone6String+0x120>)
   d635c:	480f      	ldr	r0, [pc, #60]	; (d639c <_Z11setTimeZone6String+0x124>)
   d635e:	f7fe f8c0 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6362:	a804      	add	r0, sp, #16
   d6364:	f004 fa26 	bl	da7b4 <_ZN6StringD1Ev>
  }

  return 1;
   d6368:	4620      	mov	r0, r4
   d636a:	e000      	b.n	d636e <_Z11setTimeZone6String+0xf6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d636c:	2000      	movs	r0, #0
}
   d636e:	b048      	add	sp, #288	; 0x120
   d6370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6374:	f3af 8000 	nop.w
   d6378:	00000000 	.word	0x00000000
   d637c:	40ac2000 	.word	0x40ac2000
   d6380:	2003e4bc 	.word	0x2003e4bc
   d6384:	2003e4e8 	.word	0x2003e4e8
   d6388:	000dc5dc 	.word	0x000dc5dc
   d638c:	2003e409 	.word	0x2003e409
   d6390:	000dc7e4 	.word	0x000dc7e4
   d6394:	2003e4f4 	.word	0x2003e4f4
   d6398:	000dc523 	.word	0x000dc523
   d639c:	2003e474 	.word	0x2003e474

000d63a0 <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d63a0:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d63a2:	f004 fdc1 	bl	daf28 <_ZN9TimeClass3dayEv>
   d63a6:	4605      	mov	r5, r0
  int month = Time.month();
   d63a8:	f004 fdd2 	bl	daf50 <_ZN9TimeClass5monthEv>
   d63ac:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d63ae:	f004 fdc7 	bl	daf40 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d63b2:	1f23      	subs	r3, r4, #4
   d63b4:	2b06      	cmp	r3, #6
   d63b6:	d90e      	bls.n	d63d6 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d63b8:	1ee3      	subs	r3, r4, #3
   d63ba:	2b08      	cmp	r3, #8
   d63bc:	d80d      	bhi.n	d63da <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d63be:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d63c0:	1a2d      	subs	r5, r5, r0
   d63c2:	d504      	bpl.n	d63ce <_Z8isDSTusav+0x2e>
   d63c4:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d63c6:	bf14      	ite	ne
   d63c8:	2000      	movne	r0, #0
   d63ca:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d63cc:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d63ce:	2d07      	cmp	r5, #7
   d63d0:	dd03      	ble.n	d63da <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d63d2:	2c03      	cmp	r4, #3
   d63d4:	e7f7      	b.n	d63c6 <_Z8isDSTusav+0x26>
    return true;
   d63d6:	2001      	movs	r0, #1
   d63d8:	e7f8      	b.n	d63cc <_Z8isDSTusav+0x2c>
    return false;
   d63da:	2000      	movs	r0, #0
   d63dc:	e7f6      	b.n	d63cc <_Z8isDSTusav+0x2c>
	...

000d63e0 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d63e0:	b570      	push	{r4, r5, r6, lr}
   d63e2:	ed2d 8b02 	vpush	{d8}
   d63e6:	b0c8      	sub	sp, #288	; 0x120
   d63e8:	4605      	mov	r5, r0
  time_t t = Time.now();
   d63ea:	f004 fd74 	bl	daed6 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d63ee:	220a      	movs	r2, #10
  time_t t = Time.now();
   d63f0:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d63f2:	a903      	add	r1, sp, #12
   d63f4:	6828      	ldr	r0, [r5, #0]
   d63f6:	f005 fee3 	bl	dc1c0 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d63fa:	b2c3      	uxtb	r3, r0
   d63fc:	2b02      	cmp	r3, #2
   d63fe:	d859      	bhi.n	d64b4 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d6400:	b243      	sxtb	r3, r0
   d6402:	ee08 3a10 	vmov	s16, r3
   d6406:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d640a:	eeb0 0a48 	vmov.f32	s0, s16
   d640e:	f004 fc19 	bl	dac44 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d6412:	4b2d      	ldr	r3, [pc, #180]	; (d64c8 <_Z12setDSTOffset6String+0xe8>)
   d6414:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d6418:	4b2c      	ldr	r3, [pc, #176]	; (d64cc <_Z12setDSTOffset6String+0xec>)
   d641a:	2201      	movs	r2, #1
   d641c:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d641e:	ee18 0a10 	vmov	r0, s16
   d6422:	f005 f9f7 	bl	db814 <__aeabi_f2d>
   d6426:	4a2a      	ldr	r2, [pc, #168]	; (d64d0 <_Z12setDSTOffset6String+0xf0>)
   d6428:	e9cd 0100 	strd	r0, r1, [sp]
   d642c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d6430:	a808      	add	r0, sp, #32
   d6432:	f001 feeb 	bl	d820c <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d6436:	f004 fd31 	bl	dae9c <_ZN9TimeClass7isValidEv>
   d643a:	b128      	cbz	r0, d6448 <_Z12setDSTOffset6String+0x68>
   d643c:	f7ff ffb0 	bl	d63a0 <_Z8isDSTusav>
   d6440:	2800      	cmp	r0, #0
   d6442:	d034      	beq.n	d64ae <_Z12setDSTOffset6String+0xce>
   d6444:	f004 fc1c 	bl	dac80 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d6448:	f004 fd8a 	bl	daf60 <_ZN9TimeClass5localEv>
   d644c:	4605      	mov	r5, r0
   d644e:	f004 fd42 	bl	daed6 <_ZN9TimeClass3nowEv>
   d6452:	1a28      	subs	r0, r5, r0
   d6454:	f005 f9cc 	bl	db7f0 <__aeabi_i2d>
   d6458:	a319      	add	r3, pc, #100	; (adr r3, d64c0 <_Z12setDSTOffset6String+0xe0>)
   d645a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d645e:	f005 fb5b 	bl	dbb18 <__aeabi_ddiv>
   d6462:	4a1c      	ldr	r2, [pc, #112]	; (d64d4 <_Z12setDSTOffset6String+0xf4>)
   d6464:	e9cd 0100 	strd	r0, r1, [sp]
   d6468:	210a      	movs	r1, #10
   d646a:	481b      	ldr	r0, [pc, #108]	; (d64d8 <_Z12setDSTOffset6String+0xf8>)
   d646c:	f001 fece 	bl	d820c <snprintf>
   d6470:	f001 fdfc 	bl	d806c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d6474:	b1c8      	cbz	r0, d64aa <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d6476:	4d19      	ldr	r5, [pc, #100]	; (d64dc <_Z12setDSTOffset6String+0xfc>)
   d6478:	4919      	ldr	r1, [pc, #100]	; (d64e0 <_Z12setDSTOffset6String+0x100>)
   d647a:	481a      	ldr	r0, [pc, #104]	; (d64e4 <_Z12setDSTOffset6String+0x104>)
   d647c:	2600      	movs	r6, #0
   d647e:	f88d 6000 	strb.w	r6, [sp]
   d6482:	782b      	ldrb	r3, [r5, #0]
   d6484:	aa08      	add	r2, sp, #32
   d6486:	f7fe f82c 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d648a:	4622      	mov	r2, r4
   d648c:	17e3      	asrs	r3, r4, #31
   d648e:	a804      	add	r0, sp, #16
   d6490:	f004 fc1e 	bl	dacd0 <_ZN9TimeClass7timeStrEx>
   d6494:	f88d 6000 	strb.w	r6, [sp]
   d6498:	782b      	ldrb	r3, [r5, #0]
   d649a:	9a04      	ldr	r2, [sp, #16]
   d649c:	4910      	ldr	r1, [pc, #64]	; (d64e0 <_Z12setDSTOffset6String+0x100>)
   d649e:	4811      	ldr	r0, [pc, #68]	; (d64e4 <_Z12setDSTOffset6String+0x104>)
   d64a0:	f7fe f81f 	bl	d44e2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d64a4:	a804      	add	r0, sp, #16
   d64a6:	f004 f985 	bl	da7b4 <_ZN6StringD1Ev>
  return 1;
   d64aa:	2001      	movs	r0, #1
   d64ac:	e003      	b.n	d64b6 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d64ae:	f004 fbf3 	bl	dac98 <_ZN9TimeClass6endDSTEv>
   d64b2:	e7c9      	b.n	d6448 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d64b4:	2000      	movs	r0, #0
}
   d64b6:	b048      	add	sp, #288	; 0x120
   d64b8:	ecbd 8b02 	vpop	{d8}
   d64bc:	bd70      	pop	{r4, r5, r6, pc}
   d64be:	bf00      	nop
   d64c0:	00000000 	.word	0x00000000
   d64c4:	40ac2000 	.word	0x40ac2000
   d64c8:	2003e4bc 	.word	0x2003e4bc
   d64cc:	2003e4e8 	.word	0x2003e4e8
   d64d0:	000dc7f8 	.word	0x000dc7f8
   d64d4:	000dc5dc 	.word	0x000dc5dc
   d64d8:	2003e409 	.word	0x2003e409
   d64dc:	2003e4f4 	.word	0x2003e4f4
   d64e0:	000dc523 	.word	0x000dc523
   d64e4:	2003e474 	.word	0x2003e474

000d64e8 <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d64e8:	4b01      	ldr	r3, [pc, #4]	; (d64f0 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d64ea:	2201      	movs	r2, #1
   d64ec:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d64ee:	4770      	bx	lr
   d64f0:	2003e4f4 	.word	0x2003e4f4

000d64f4 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d64f4:	4770      	bx	lr

000d64f6 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d64f6:	b510      	push	{r4, lr}
}
   d64f8:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d64fa:	4604      	mov	r4, r0
}
   d64fc:	f005 f81d 	bl	db53a <_ZdlPvj>
   d6500:	4620      	mov	r0, r4
   d6502:	bd10      	pop	{r4, pc}

000d6504 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d6504:	b40e      	push	{r1, r2, r3}
   d6506:	b510      	push	{r4, lr}
   d6508:	b08d      	sub	sp, #52	; 0x34
   d650a:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d650c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d650e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d6512:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d6514:	2300      	movs	r3, #0
   d6516:	2020      	movs	r0, #32
   d6518:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d651c:	e9cd 4200 	strd	r4, r2, [sp]
   d6520:	2001      	movs	r0, #1
   d6522:	aa04      	add	r2, sp, #16
   d6524:	f001 fce6 	bl	d7ef4 <log_message_v>
}
   d6528:	b00d      	add	sp, #52	; 0x34
   d652a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d652e:	b003      	add	sp, #12
   d6530:	4770      	bx	lr
	...

000d6534 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6534:	b510      	push	{r4, lr}
   d6536:	7202      	strb	r2, [r0, #8]
   d6538:	22ff      	movs	r2, #255	; 0xff
   d653a:	8142      	strh	r2, [r0, #10]
   d653c:	2200      	movs	r2, #0
   d653e:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d6542:	6142      	str	r2, [r0, #20]
   d6544:	7602      	strb	r2, [r0, #24]
   d6546:	61c2      	str	r2, [r0, #28]
    instance = this;
   d6548:	4a02      	ldr	r2, [pc, #8]	; (d6554 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d654a:	4c03      	ldr	r4, [pc, #12]	; (d6558 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d654c:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d654e:	e9c0 4100 	strd	r4, r1, [r0]
}
   d6552:	bd10      	pop	{r4, pc}
   d6554:	2003e4fc 	.word	0x2003e4fc
   d6558:	000dca58 	.word	0x000dca58

000d655c <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d655c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6560:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d6564:	4604      	mov	r4, r0
   d6566:	4689      	mov	r9, r1
   d6568:	4616      	mov	r6, r2
   d656a:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d656c:	f1b8 0f00 	cmp.w	r8, #0
   d6570:	d002      	beq.n	d6578 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d6572:	6840      	ldr	r0, [r0, #4]
   d6574:	f002 fcb0 	bl	d8ed8 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6578:	7a21      	ldrb	r1, [r4, #8]
   d657a:	6860      	ldr	r0, [r4, #4]
   d657c:	f002 fc86 	bl	d8e8c <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6580:	6860      	ldr	r0, [r4, #4]
   d6582:	6803      	ldr	r3, [r0, #0]
   d6584:	4649      	mov	r1, r9
   d6586:	689b      	ldr	r3, [r3, #8]
   d6588:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d658a:	6860      	ldr	r0, [r4, #4]
   d658c:	2100      	movs	r1, #0
   d658e:	f002 fc9c 	bl	d8eca <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6592:	4605      	mov	r5, r0
   d6594:	bb00      	cbnz	r0, d65d8 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6596:	2301      	movs	r3, #1
   d6598:	7a21      	ldrb	r1, [r4, #8]
   d659a:	6860      	ldr	r0, [r4, #4]
   d659c:	463a      	mov	r2, r7
   d659e:	f002 fc60 	bl	d8e62 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d65a2:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d65a4:	4603      	mov	r3, r0
        if (count == num) {
   d65a6:	d109      	bne.n	d65bc <_ZN6AB180513readRegistersEhPhjb+0x60>
   d65a8:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d65aa:	42be      	cmp	r6, r7
   d65ac:	d01c      	beq.n	d65e8 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d65ae:	6860      	ldr	r0, [r4, #4]
   d65b0:	6803      	ldr	r3, [r0, #0]
   d65b2:	695b      	ldr	r3, [r3, #20]
   d65b4:	4798      	blx	r3
   d65b6:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d65ba:	e7f6      	b.n	d65aa <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d65bc:	490b      	ldr	r1, [pc, #44]	; (d65ec <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d65be:	480c      	ldr	r0, [pc, #48]	; (d65f0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d65c0:	464a      	mov	r2, r9
   d65c2:	f7fd ff77 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d65c6:	f1b8 0f00 	cmp.w	r8, #0
   d65ca:	d002      	beq.n	d65d2 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d65cc:	6860      	ldr	r0, [r4, #4]
   d65ce:	f002 fc8c 	bl	d8eea <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d65d2:	4628      	mov	r0, r5
   d65d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d65d8:	4603      	mov	r3, r0
   d65da:	4906      	ldr	r1, [pc, #24]	; (d65f4 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d65dc:	4804      	ldr	r0, [pc, #16]	; (d65f0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d65de:	464a      	mov	r2, r9
   d65e0:	f7fd ff68 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d65e4:	2500      	movs	r5, #0
   d65e6:	e7ee      	b.n	d65c6 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d65e8:	2501      	movs	r5, #1
   d65ea:	e7ec      	b.n	d65c6 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d65ec:	000dc809 	.word	0x000dc809
   d65f0:	2003e4f8 	.word	0x2003e4f8
   d65f4:	000dc82e 	.word	0x000dc82e

000d65f8 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d65f8:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d65fa:	9300      	str	r3, [sp, #0]
   d65fc:	2301      	movs	r3, #1
   d65fe:	f7ff ffad 	bl	d655c <_ZN6AB180513readRegistersEhPhjb>
}
   d6602:	b003      	add	sp, #12
   d6604:	f85d fb04 	ldr.w	pc, [sp], #4

000d6608 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d6608:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d660a:	8943      	ldrh	r3, [r0, #10]
   d660c:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d660e:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d6610:	d010      	beq.n	d6634 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d6612:	4e19      	ldr	r6, [pc, #100]	; (d6678 <_ZN6AB180510detectChipEv+0x70>)
   d6614:	4d19      	ldr	r5, [pc, #100]	; (d667c <_ZN6AB180510detectChipEv+0x74>)
   d6616:	f001 facd 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d661a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d661e:	d209      	bcs.n	d6634 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d6620:	8960      	ldrh	r0, [r4, #10]
   d6622:	f004 fedb 	bl	db3dc <digitalRead>
   d6626:	2801      	cmp	r0, #1
   d6628:	d004      	beq.n	d6634 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d662a:	4631      	mov	r1, r6
   d662c:	4628      	mov	r0, r5
   d662e:	f7fd ff2a 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
   d6632:	e7f0      	b.n	d6616 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d6634:	2301      	movs	r3, #1
   d6636:	f10d 0207 	add.w	r2, sp, #7
   d663a:	2128      	movs	r1, #40	; 0x28
   d663c:	4620      	mov	r0, r4
   d663e:	f7ff ffdb 	bl	d65f8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d6642:	b930      	cbnz	r0, d6652 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d6644:	480d      	ldr	r0, [pc, #52]	; (d667c <_ZN6AB180510detectChipEv+0x74>)
   d6646:	490e      	ldr	r1, [pc, #56]	; (d6680 <_ZN6AB180510detectChipEv+0x78>)
   d6648:	f7fd ff1d 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
   d664c:	2000      	movs	r0, #0
}
   d664e:	b002      	add	sp, #8
   d6650:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d6652:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6656:	2b18      	cmp	r3, #24
   d6658:	d1f4      	bne.n	d6644 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d665a:	2301      	movs	r3, #1
   d665c:	f10d 0207 	add.w	r2, sp, #7
   d6660:	2129      	movs	r1, #41	; 0x29
   d6662:	4620      	mov	r0, r4
   d6664:	f7ff ffc8 	bl	d65f8 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d6668:	2800      	cmp	r0, #0
   d666a:	d0eb      	beq.n	d6644 <_ZN6AB180510detectChipEv+0x3c>
   d666c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6670:	2b05      	cmp	r3, #5
   d6672:	d1e7      	bne.n	d6644 <_ZN6AB180510detectChipEv+0x3c>
   d6674:	e7eb      	b.n	d664e <_ZN6AB180510detectChipEv+0x46>
   d6676:	bf00      	nop
   d6678:	000dc852 	.word	0x000dc852
   d667c:	2003e4f8 	.word	0x2003e4f8
   d6680:	000dc867 	.word	0x000dc867

000d6684 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d6684:	b507      	push	{r0, r1, r2, lr}
   d6686:	4613      	mov	r3, r2
    uint8_t value = 0;
   d6688:	2200      	movs	r2, #0
   d668a:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d668e:	f10d 0207 	add.w	r2, sp, #7
   d6692:	f7ff ffb1 	bl	d65f8 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d6696:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d669a:	b003      	add	sp, #12
   d669c:	f85d fb04 	ldr.w	pc, [sp], #4

000d66a0 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d66a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d66a4:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d66a8:	4604      	mov	r4, r0
   d66aa:	460f      	mov	r7, r1
   d66ac:	4615      	mov	r5, r2
   d66ae:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d66b0:	f1b8 0f00 	cmp.w	r8, #0
   d66b4:	d002      	beq.n	d66bc <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d66b6:	6840      	ldr	r0, [r0, #4]
   d66b8:	f002 fc0e 	bl	d8ed8 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d66bc:	7a21      	ldrb	r1, [r4, #8]
   d66be:	6860      	ldr	r0, [r4, #4]
   d66c0:	f002 fbe4 	bl	d8e8c <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d66c4:	6860      	ldr	r0, [r4, #4]
   d66c6:	6803      	ldr	r3, [r0, #0]
   d66c8:	4639      	mov	r1, r7
   d66ca:	689b      	ldr	r3, [r3, #8]
   d66cc:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d66ce:	442e      	add	r6, r5
   d66d0:	42b5      	cmp	r5, r6
   d66d2:	6860      	ldr	r0, [r4, #4]
   d66d4:	d005      	beq.n	d66e2 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d66d6:	6803      	ldr	r3, [r0, #0]
   d66d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d66dc:	689b      	ldr	r3, [r3, #8]
   d66de:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d66e0:	e7f6      	b.n	d66d0 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d66e2:	2101      	movs	r1, #1
   d66e4:	f002 fbf1 	bl	d8eca <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d66e8:	4603      	mov	r3, r0
   d66ea:	b170      	cbz	r0, d670a <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d66ec:	4908      	ldr	r1, [pc, #32]	; (d6710 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d66ee:	4809      	ldr	r0, [pc, #36]	; (d6714 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d66f0:	463a      	mov	r2, r7
   d66f2:	f7fd fedf 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d66f6:	2500      	movs	r5, #0
    }

    if (lock) {
   d66f8:	f1b8 0f00 	cmp.w	r8, #0
   d66fc:	d002      	beq.n	d6704 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d66fe:	6860      	ldr	r0, [r4, #4]
   d6700:	f002 fbf3 	bl	d8eea <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d6704:	4628      	mov	r0, r5
   d6706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d670a:	2501      	movs	r5, #1
   d670c:	e7f4      	b.n	d66f8 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d670e:	bf00      	nop
   d6710:	000dc874 	.word	0x000dc874
   d6714:	2003e4f8 	.word	0x2003e4f8

000d6718 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d6718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d671a:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d671e:	9300      	str	r3, [sp, #0]
   d6720:	f10d 020f 	add.w	r2, sp, #15
   d6724:	2301      	movs	r3, #1
   d6726:	f7ff ffbb 	bl	d66a0 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d672a:	b005      	add	sp, #20
   d672c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6730 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d6730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d6732:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d6734:	460c      	mov	r4, r1
   d6736:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d6738:	491a      	ldr	r1, [pc, #104]	; (d67a4 <_ZN6AB18056setWDTEi+0x74>)
   d673a:	481b      	ldr	r0, [pc, #108]	; (d67a8 <_ZN6AB18056setWDTEi+0x78>)
   d673c:	f7fd fea3 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d6740:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d6742:	bfb8      	it	lt
   d6744:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d6746:	b97c      	cbnz	r4, d6768 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d6748:	2301      	movs	r3, #1
   d674a:	4622      	mov	r2, r4
   d674c:	211b      	movs	r1, #27
   d674e:	4628      	mov	r0, r5
   d6750:	f7ff ffe2 	bl	d6718 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6754:	4915      	ldr	r1, [pc, #84]	; (d67ac <_ZN6AB18056setWDTEi+0x7c>)
   d6756:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d6758:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d675a:	4813      	ldr	r0, [pc, #76]	; (d67a8 <_ZN6AB18056setWDTEi+0x78>)
   d675c:	f7ff fed2 	bl	d6504 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d6760:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d6762:	616c      	str	r4, [r5, #20]
}
   d6764:	4630      	mov	r0, r6
   d6766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d6768:	2c03      	cmp	r4, #3
   d676a:	dd19      	ble.n	d67a0 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d676c:	10a7      	asrs	r7, r4, #2
   d676e:	2f1f      	cmp	r7, #31
   d6770:	bfa8      	it	ge
   d6772:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6774:	00ba      	lsls	r2, r7, #2
   d6776:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d677a:	2301      	movs	r3, #1
   d677c:	b2d2      	uxtb	r2, r2
   d677e:	211b      	movs	r1, #27
   d6780:	4628      	mov	r0, r5
   d6782:	f7ff ffc9 	bl	d6718 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d6786:	463a      	mov	r2, r7
   d6788:	4603      	mov	r3, r0
   d678a:	4909      	ldr	r1, [pc, #36]	; (d67b0 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d678c:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d678e:	4806      	ldr	r0, [pc, #24]	; (d67a8 <_ZN6AB18056setWDTEi+0x78>)
   d6790:	f7ff feb8 	bl	d6504 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6794:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d6798:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d679a:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d679c:	616f      	str	r7, [r5, #20]
   d679e:	e7e1      	b.n	d6764 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d67a0:	2701      	movs	r7, #1
   d67a2:	e7e7      	b.n	d6774 <_ZN6AB18056setWDTEi+0x44>
   d67a4:	000dc899 	.word	0x000dc899
   d67a8:	2003e4f8 	.word	0x2003e4f8
   d67ac:	000dc8a3 	.word	0x000dc8a3
   d67b0:	000dc8bf 	.word	0x000dc8bf

000d67b4 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d67b4:	460b      	mov	r3, r1
    if (instance) {
   d67b6:	4907      	ldr	r1, [pc, #28]	; (d67d4 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d67b8:	4602      	mov	r2, r0
    if (instance) {
   d67ba:	6808      	ldr	r0, [r1, #0]
   d67bc:	b148      	cbz	r0, d67d2 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d67be:	2b00      	cmp	r3, #0
   d67c0:	bf08      	it	eq
   d67c2:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d67c6:	d104      	bne.n	d67d2 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d67c8:	68c3      	ldr	r3, [r0, #12]
   d67ca:	b113      	cbz	r3, d67d2 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d67cc:	2100      	movs	r1, #0
   d67ce:	f7ff bfaf 	b.w	d6730 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d67d2:	4770      	bx	lr
   d67d4:	2003e4fc 	.word	0x2003e4fc

000d67d8 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d67d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d67dc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d67e0:	4605      	mov	r5, r0
   d67e2:	4616      	mov	r6, r2
   d67e4:	461f      	mov	r7, r3
    if (lock) {
   d67e6:	f1b8 0f00 	cmp.w	r8, #0
   d67ea:	d004      	beq.n	d67f6 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d67ec:	6840      	ldr	r0, [r0, #4]
   d67ee:	9101      	str	r1, [sp, #4]
   d67f0:	f002 fb72 	bl	d8ed8 <_ZN7TwoWire4lockEv>
   d67f4:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d67f6:	9101      	str	r1, [sp, #4]
   d67f8:	2300      	movs	r3, #0
   d67fa:	f10d 020f 	add.w	r2, sp, #15
   d67fe:	4628      	mov	r0, r5
   d6800:	f7ff fefa 	bl	d65f8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d6804:	4604      	mov	r4, r0
   d6806:	b160      	cbz	r0, d6822 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d6808:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d680c:	ea03 0206 	and.w	r2, r3, r6
   d6810:	433a      	orrs	r2, r7
        if (newValue != value) {
   d6812:	4293      	cmp	r3, r2
   d6814:	d005      	beq.n	d6822 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d6816:	9901      	ldr	r1, [sp, #4]
   d6818:	2300      	movs	r3, #0
   d681a:	4628      	mov	r0, r5
   d681c:	f7ff ff7c 	bl	d6718 <_ZN6AB180513writeRegisterEhhb>
   d6820:	4604      	mov	r4, r0
    if (lock) {
   d6822:	f1b8 0f00 	cmp.w	r8, #0
   d6826:	d002      	beq.n	d682e <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d6828:	6868      	ldr	r0, [r5, #4]
   d682a:	f002 fb5e 	bl	d8eea <_ZN7TwoWire6unlockEv>
}
   d682e:	4620      	mov	r0, r4
   d6830:	b004      	add	sp, #16
   d6832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6836 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6836:	b513      	push	{r0, r1, r4, lr}
   d6838:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d683a:	f10d 0207 	add.w	r2, sp, #7
   d683e:	f7ff fedb 	bl	d65f8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d6842:	b128      	cbz	r0, d6850 <_ZN6AB180510isBitClearEhhb+0x1a>
   d6844:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6848:	421c      	tst	r4, r3
   d684a:	bf0c      	ite	eq
   d684c:	2001      	moveq	r0, #1
   d684e:	2000      	movne	r0, #0
}
   d6850:	b002      	add	sp, #8
   d6852:	bd10      	pop	{r4, pc}

000d6854 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6854:	b513      	push	{r0, r1, r4, lr}
   d6856:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6858:	f10d 0207 	add.w	r2, sp, #7
   d685c:	f7ff fecc 	bl	d65f8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d6860:	b128      	cbz	r0, d686e <_ZN6AB18058isBitSetEhhb+0x1a>
   d6862:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6866:	421c      	tst	r4, r3
   d6868:	bf14      	ite	ne
   d686a:	2001      	movne	r0, #1
   d686c:	2000      	moveq	r0, #0
}
   d686e:	b002      	add	sp, #8
   d6870:	bd10      	pop	{r4, pc}

000d6872 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6872:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d6874:	43d2      	mvns	r2, r2
   d6876:	9300      	str	r3, [sp, #0]
   d6878:	b2d2      	uxtb	r2, r2
   d687a:	2300      	movs	r3, #0
   d687c:	f7ff ffac 	bl	d67d8 <_ZN6AB180512maskRegisterEhhhb>
}
   d6880:	b003      	add	sp, #12
   d6882:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6888 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d6888:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d688a:	2301      	movs	r3, #1
   d688c:	f10d 0207 	add.w	r2, sp, #7
   d6890:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d6892:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d6894:	f7ff feb0 	bl	d65f8 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d6898:	4605      	mov	r5, r0
   d689a:	b938      	cbnz	r0, d68ac <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d689c:	491e      	ldr	r1, [pc, #120]	; (d6918 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d689e:	481f      	ldr	r0, [pc, #124]	; (d691c <_ZN6AB180516updateWakeReasonEv+0x94>)
   d68a0:	22ad      	movs	r2, #173	; 0xad
   d68a2:	f7fd fe07 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
}
   d68a6:	4628      	mov	r0, r5
   d68a8:	b003      	add	sp, #12
   d68aa:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d68ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d68b0:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d68b4:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d68b8:	d00b      	beq.n	d68d2 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d68ba:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d68bc:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d68be:	210f      	movs	r1, #15
   d68c0:	4620      	mov	r0, r4
   d68c2:	f7ff ffd6 	bl	d6872 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d68c6:	4a16      	ldr	r2, [pc, #88]	; (d6920 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d68c8:	4916      	ldr	r1, [pc, #88]	; (d6924 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d68ca:	4814      	ldr	r0, [pc, #80]	; (d691c <_ZN6AB180516updateWakeReasonEv+0x94>)
   d68cc:	f7fd fddb 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
   d68d0:	e7e9      	b.n	d68a6 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d68d2:	2208      	movs	r2, #8
   d68d4:	2117      	movs	r1, #23
   d68d6:	4620      	mov	r0, r4
   d68d8:	f7ff ffbc 	bl	d6854 <_ZN6AB18058isBitSetEhhb>
   d68dc:	b118      	cbz	r0, d68e6 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d68de:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d68e0:	4a11      	ldr	r2, [pc, #68]	; (d6928 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d68e2:	61e3      	str	r3, [r4, #28]
   d68e4:	e7f0      	b.n	d68c8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d68e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d68ea:	071a      	lsls	r2, r3, #28
   d68ec:	d509      	bpl.n	d6902 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d68ee:	2303      	movs	r3, #3
   d68f0:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d68f2:	2208      	movs	r2, #8
   d68f4:	2301      	movs	r3, #1
   d68f6:	210f      	movs	r1, #15
   d68f8:	4620      	mov	r0, r4
   d68fa:	f7ff ffba 	bl	d6872 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d68fe:	4a0b      	ldr	r2, [pc, #44]	; (d692c <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d6900:	e7e2      	b.n	d68c8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d6902:	075b      	lsls	r3, r3, #29
   d6904:	d5cf      	bpl.n	d68a6 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d6906:	2204      	movs	r2, #4
   d6908:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d690a:	2301      	movs	r3, #1
   d690c:	210f      	movs	r1, #15
   d690e:	4620      	mov	r0, r4
   d6910:	f7ff ffaf 	bl	d6872 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d6914:	4a06      	ldr	r2, [pc, #24]	; (d6930 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d6916:	e7d7      	b.n	d68c8 <_ZN6AB180516updateWakeReasonEv+0x40>
   d6918:	000dc912 	.word	0x000dc912
   d691c:	2003e4f8 	.word	0x2003e4f8
   d6920:	000dc8e3 	.word	0x000dc8e3
   d6924:	000dc931 	.word	0x000dc931
   d6928:	000dc8ec 	.word	0x000dc8ec
   d692c:	000dc8fc 	.word	0x000dc8fc
   d6930:	000dc90c 	.word	0x000dc90c

000d6934 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6934:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d6936:	9300      	str	r3, [sp, #0]
   d6938:	4613      	mov	r3, r2
   d693a:	22ff      	movs	r2, #255	; 0xff
   d693c:	f7ff ff4c 	bl	d67d8 <_ZN6AB180512maskRegisterEhhhb>
}
   d6940:	b003      	add	sp, #12
   d6942:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6948 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d694a:	460f      	mov	r7, r1
   d694c:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d694e:	2301      	movs	r3, #1
   d6950:	2200      	movs	r2, #0
   d6952:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6954:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6956:	f7ff fedf 	bl	d6718 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d695a:	4604      	mov	r4, r0
   d695c:	b938      	cbnz	r0, d696e <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d695e:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d6962:	491e      	ldr	r1, [pc, #120]	; (d69dc <_ZN6AB180517setCountdownTimerEib+0x94>)
   d6964:	481e      	ldr	r0, [pc, #120]	; (d69e0 <_ZN6AB180517setCountdownTimerEib+0x98>)
   d6966:	f7fd fda5 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
}
   d696a:	4620      	mov	r0, r4
   d696c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d696e:	2301      	movs	r3, #1
   d6970:	2223      	movs	r2, #35	; 0x23
   d6972:	2118      	movs	r1, #24
   d6974:	4628      	mov	r0, r5
   d6976:	f7ff fecf 	bl	d6718 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d697a:	4604      	mov	r4, r0
   d697c:	b910      	cbnz	r0, d6984 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d697e:	f240 229b 	movw	r2, #667	; 0x29b
   d6982:	e7ee      	b.n	d6962 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d6984:	2fff      	cmp	r7, #255	; 0xff
   d6986:	bfa8      	it	ge
   d6988:	27ff      	movge	r7, #255	; 0xff
   d698a:	2f01      	cmp	r7, #1
   d698c:	bfb8      	it	lt
   d698e:	2701      	movlt	r7, #1
   d6990:	2301      	movs	r3, #1
   d6992:	b2fa      	uxtb	r2, r7
   d6994:	2119      	movs	r1, #25
   d6996:	4628      	mov	r0, r5
   d6998:	f7ff febe 	bl	d6718 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d699c:	4604      	mov	r4, r0
   d699e:	b910      	cbnz	r0, d69a6 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d69a0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d69a4:	e7dd      	b.n	d6962 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d69a6:	2301      	movs	r3, #1
   d69a8:	2208      	movs	r2, #8
   d69aa:	2112      	movs	r1, #18
   d69ac:	4628      	mov	r0, r5
   d69ae:	f7ff ffc1 	bl	d6934 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d69b2:	4604      	mov	r4, r0
   d69b4:	b910      	cbnz	r0, d69bc <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d69b6:	f240 22af 	movw	r2, #687	; 0x2af
   d69ba:	e7d2      	b.n	d6962 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d69bc:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d69be:	f04f 0301 	mov.w	r3, #1
   d69c2:	bf14      	ite	ne
   d69c4:	2283      	movne	r2, #131	; 0x83
   d69c6:	2282      	moveq	r2, #130	; 0x82
   d69c8:	2118      	movs	r1, #24
   d69ca:	4628      	mov	r0, r5
   d69cc:	f7ff fea4 	bl	d6718 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d69d0:	4604      	mov	r4, r0
   d69d2:	2800      	cmp	r0, #0
   d69d4:	d1c9      	bne.n	d696a <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d69d6:	f240 22b9 	movw	r2, #697	; 0x2b9
   d69da:	e7c2      	b.n	d6962 <_ZN6AB180517setCountdownTimerEib+0x1a>
   d69dc:	000dc942 	.word	0x000dc942
   d69e0:	2003e4f8 	.word	0x2003e4f8

000d69e4 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d69e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d69e8:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d69ea:	4605      	mov	r5, r0
   d69ec:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d69ee:	484f      	ldr	r0, [pc, #316]	; (d6b2c <_ZN6AB180513deepPowerDownEi+0x148>)
   d69f0:	494f      	ldr	r1, [pc, #316]	; (d6b30 <_ZN6AB180513deepPowerDownEi+0x14c>)
   d69f2:	f7fd fd48 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d69f6:	2100      	movs	r1, #0
   d69f8:	4628      	mov	r0, r5
   d69fa:	f7ff fe99 	bl	d6730 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d69fe:	4604      	mov	r4, r0
   d6a00:	b948      	cbnz	r0, d6a16 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d6a02:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d6a06:	494b      	ldr	r1, [pc, #300]	; (d6b34 <_ZN6AB180513deepPowerDownEi+0x150>)
   d6a08:	4848      	ldr	r0, [pc, #288]	; (d6b2c <_ZN6AB180513deepPowerDownEi+0x148>)
   d6a0a:	f7fd fd53 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
}
   d6a0e:	4620      	mov	r0, r4
   d6a10:	b003      	add	sp, #12
   d6a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d6a16:	2301      	movs	r3, #1
   d6a18:	461a      	mov	r2, r3
   d6a1a:	2130      	movs	r1, #48	; 0x30
   d6a1c:	4628      	mov	r0, r5
   d6a1e:	f7ff ff89 	bl	d6934 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6a22:	4604      	mov	r4, r0
   d6a24:	b910      	cbnz	r0, d6a2c <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d6a26:	f240 2205 	movw	r2, #517	; 0x205
   d6a2a:	e7ec      	b.n	d6a06 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d6a2c:	2210      	movs	r2, #16
   d6a2e:	2301      	movs	r3, #1
   d6a30:	4611      	mov	r1, r2
   d6a32:	4628      	mov	r0, r5
   d6a34:	f7ff ff1d 	bl	d6872 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d6a38:	4604      	mov	r4, r0
   d6a3a:	b910      	cbnz	r0, d6a42 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d6a3c:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d6a40:	e7e1      	b.n	d6a06 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d6a42:	2301      	movs	r3, #1
   d6a44:	2226      	movs	r2, #38	; 0x26
   d6a46:	2113      	movs	r1, #19
   d6a48:	4628      	mov	r0, r5
   d6a4a:	f7ff fe65 	bl	d6718 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6a4e:	4604      	mov	r4, r0
   d6a50:	b910      	cbnz	r0, d6a58 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d6a52:	f240 2213 	movw	r2, #531	; 0x213
   d6a56:	e7d6      	b.n	d6a06 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d6a58:	2601      	movs	r6, #1
   d6a5a:	9600      	str	r6, [sp, #0]
   d6a5c:	4633      	mov	r3, r6
   d6a5e:	22fc      	movs	r2, #252	; 0xfc
   d6a60:	2111      	movs	r1, #17
   d6a62:	4628      	mov	r0, r5
   d6a64:	f7ff feb8 	bl	d67d8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6a68:	4604      	mov	r4, r0
   d6a6a:	b910      	cbnz	r0, d6a72 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d6a6c:	f240 221b 	movw	r2, #539	; 0x21b
   d6a70:	e7c9      	b.n	d6a06 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d6a72:	2200      	movs	r2, #0
   d6a74:	4639      	mov	r1, r7
   d6a76:	4628      	mov	r0, r5
   d6a78:	f7ff ff66 	bl	d6948 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d6a7c:	4604      	mov	r4, r0
   d6a7e:	b910      	cbnz	r0, d6a86 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d6a80:	f240 2222 	movw	r2, #546	; 0x222
   d6a84:	e7bf      	b.n	d6a06 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d6a86:	9600      	str	r6, [sp, #0]
   d6a88:	2302      	movs	r3, #2
   d6a8a:	2277      	movs	r2, #119	; 0x77
   d6a8c:	2110      	movs	r1, #16
   d6a8e:	4628      	mov	r0, r5
   d6a90:	f7ff fea2 	bl	d67d8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6a94:	4604      	mov	r4, r0
   d6a96:	b910      	cbnz	r0, d6a9e <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d6a98:	f240 222b 	movw	r2, #555	; 0x22b
   d6a9c:	e7b3      	b.n	d6a06 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d6a9e:	4633      	mov	r3, r6
   d6aa0:	2204      	movs	r2, #4
   d6aa2:	211c      	movs	r1, #28
   d6aa4:	4628      	mov	r0, r5
   d6aa6:	f7ff ff45 	bl	d6934 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6aaa:	4604      	mov	r4, r0
   d6aac:	b910      	cbnz	r0, d6ab4 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d6aae:	f240 2232 	movw	r2, #562	; 0x232
   d6ab2:	e7a8      	b.n	d6a06 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d6ab4:	9600      	str	r6, [sp, #0]
   d6ab6:	2318      	movs	r3, #24
   d6ab8:	22e3      	movs	r2, #227	; 0xe3
   d6aba:	2111      	movs	r1, #17
   d6abc:	4628      	mov	r0, r5
   d6abe:	f7ff fe8b 	bl	d67d8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6ac2:	4604      	mov	r4, r0
   d6ac4:	b910      	cbnz	r0, d6acc <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d6ac6:	f240 2239 	movw	r2, #569	; 0x239
   d6aca:	e79c      	b.n	d6a06 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d6acc:	4633      	mov	r3, r6
   d6ace:	22c0      	movs	r2, #192	; 0xc0
   d6ad0:	2117      	movs	r1, #23
   d6ad2:	4628      	mov	r0, r5
   d6ad4:	f7ff fe20 	bl	d6718 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6ad8:	4604      	mov	r4, r0
   d6ada:	b910      	cbnz	r0, d6ae2 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d6adc:	f44f 7210 	mov.w	r2, #576	; 0x240
   d6ae0:	e791      	b.n	d6a06 <_ZN6AB180513deepPowerDownEi+0x22>
   d6ae2:	f001 f867 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6ae6:	f8df 9054 	ldr.w	r9, [pc, #84]	; d6b3c <_ZN6AB180513deepPowerDownEi+0x158>
   d6aea:	f8df 8040 	ldr.w	r8, [pc, #64]	; d6b2c <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6aee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6af2:	4606      	mov	r6, r0
   d6af4:	434f      	muls	r7, r1
   d6af6:	f001 f85d 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
   d6afa:	1b80      	subs	r0, r0, r6
   d6afc:	42b8      	cmp	r0, r7
   d6afe:	d20e      	bcs.n	d6b1e <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6b00:	2201      	movs	r2, #1
   d6b02:	2117      	movs	r1, #23
   d6b04:	4628      	mov	r0, r5
   d6b06:	f7ff fdbd 	bl	d6684 <_ZN6AB180512readRegisterEhb>
   d6b0a:	4649      	mov	r1, r9
   d6b0c:	4602      	mov	r2, r0
   d6b0e:	4640      	mov	r0, r8
   d6b10:	f7fd fcb9 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d6b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6b18:	f001 fbc0 	bl	d829c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6b1c:	e7eb      	b.n	d6af6 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d6b1e:	4906      	ldr	r1, [pc, #24]	; (d6b38 <_ZN6AB180513deepPowerDownEi+0x154>)
   d6b20:	4802      	ldr	r0, [pc, #8]	; (d6b2c <_ZN6AB180513deepPowerDownEi+0x148>)
   d6b22:	f7fd fcc7 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d6b26:	f003 ff7f 	bl	daa28 <_ZN11SystemClass5resetEv>
    return true;
   d6b2a:	e770      	b.n	d6a0e <_ZN6AB180513deepPowerDownEi+0x2a>
   d6b2c:	2003e4f8 	.word	0x2003e4f8
   d6b30:	000dc96d 	.word	0x000dc96d
   d6b34:	000dc962 	.word	0x000dc962
   d6b38:	000dc993 	.word	0x000dc993
   d6b3c:	000dc97e 	.word	0x000dc97e

000d6b40 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d6b40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6b44:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6b48:	4605      	mov	r5, r0
   d6b4a:	460c      	mov	r4, r1
   d6b4c:	4691      	mov	r9, r2
   d6b4e:	461f      	mov	r7, r3
    if (lock) {
   d6b50:	f1ba 0f00 	cmp.w	sl, #0
   d6b54:	d002      	beq.n	d6b5c <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6b56:	6840      	ldr	r0, [r0, #4]
   d6b58:	f002 f9be 	bl	d8ed8 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6b5c:	b307      	cbz	r7, d6ba0 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d6b5e:	2f20      	cmp	r7, #32
   d6b60:	463e      	mov	r6, r7
   d6b62:	bf28      	it	cs
   d6b64:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6b66:	2c7f      	cmp	r4, #127	; 0x7f
   d6b68:	d826      	bhi.n	d6bb8 <_ZN6AB18057readRamEjPhjb+0x78>
   d6b6a:	1933      	adds	r3, r6, r4
   d6b6c:	2b80      	cmp	r3, #128	; 0x80
   d6b6e:	d901      	bls.n	d6b74 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d6b70:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6b74:	2301      	movs	r3, #1
   d6b76:	2204      	movs	r2, #4
   d6b78:	213f      	movs	r1, #63	; 0x3f
   d6b7a:	4628      	mov	r0, r5
   d6b7c:	f7ff fe79 	bl	d6872 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6b80:	2300      	movs	r3, #0
   d6b82:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6b86:	9300      	str	r3, [sp, #0]
   d6b88:	464a      	mov	r2, r9
   d6b8a:	4633      	mov	r3, r6
   d6b8c:	b2c9      	uxtb	r1, r1
   d6b8e:	4628      	mov	r0, r5
   d6b90:	f7ff fce4 	bl	d655c <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6b94:	4680      	mov	r8, r0
   d6b96:	b128      	cbz	r0, d6ba4 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6b98:	4434      	add	r4, r6
        dataLen -= count;
   d6b9a:	1bbf      	subs	r7, r7, r6
        data += count;
   d6b9c:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6b9e:	e7dd      	b.n	d6b5c <_ZN6AB18057readRamEjPhjb+0x1c>
   d6ba0:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6ba4:	f1ba 0f00 	cmp.w	sl, #0
   d6ba8:	d002      	beq.n	d6bb0 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6baa:	6868      	ldr	r0, [r5, #4]
   d6bac:	f002 f99d 	bl	d8eea <_ZN7TwoWire6unlockEv>
}
   d6bb0:	4640      	mov	r0, r8
   d6bb2:	b002      	add	sp, #8
   d6bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6bb8:	2301      	movs	r3, #1
   d6bba:	2204      	movs	r2, #4
   d6bbc:	213f      	movs	r1, #63	; 0x3f
   d6bbe:	4628      	mov	r0, r5
   d6bc0:	f7ff feb8 	bl	d6934 <_ZN6AB180514setRegisterBitEhhb>
   d6bc4:	e7dc      	b.n	d6b80 <_ZN6AB18057readRamEjPhjb+0x40>

000d6bc6 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6bc6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6bca:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6bce:	4605      	mov	r5, r0
   d6bd0:	460c      	mov	r4, r1
   d6bd2:	4691      	mov	r9, r2
   d6bd4:	461f      	mov	r7, r3
    if (lock) {
   d6bd6:	f1ba 0f00 	cmp.w	sl, #0
   d6bda:	d002      	beq.n	d6be2 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d6bdc:	6840      	ldr	r0, [r0, #4]
   d6bde:	f002 f97b 	bl	d8ed8 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6be2:	b307      	cbz	r7, d6c26 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6be4:	2f1f      	cmp	r7, #31
   d6be6:	463e      	mov	r6, r7
   d6be8:	bf28      	it	cs
   d6bea:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6bec:	2c7f      	cmp	r4, #127	; 0x7f
   d6bee:	d826      	bhi.n	d6c3e <_ZN6AB18058writeRamEjPKhjb+0x78>
   d6bf0:	1933      	adds	r3, r6, r4
   d6bf2:	2b80      	cmp	r3, #128	; 0x80
   d6bf4:	d901      	bls.n	d6bfa <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6bf6:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6bfa:	2301      	movs	r3, #1
   d6bfc:	2204      	movs	r2, #4
   d6bfe:	213f      	movs	r1, #63	; 0x3f
   d6c00:	4628      	mov	r0, r5
   d6c02:	f7ff fe36 	bl	d6872 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6c06:	2300      	movs	r3, #0
   d6c08:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6c0c:	9300      	str	r3, [sp, #0]
   d6c0e:	464a      	mov	r2, r9
   d6c10:	4633      	mov	r3, r6
   d6c12:	b2c9      	uxtb	r1, r1
   d6c14:	4628      	mov	r0, r5
   d6c16:	f7ff fd43 	bl	d66a0 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d6c1a:	4680      	mov	r8, r0
   d6c1c:	b128      	cbz	r0, d6c2a <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d6c1e:	4434      	add	r4, r6
        dataLen -= count;
   d6c20:	1bbf      	subs	r7, r7, r6
        data += count;
   d6c22:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6c24:	e7dd      	b.n	d6be2 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d6c26:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6c2a:	f1ba 0f00 	cmp.w	sl, #0
   d6c2e:	d002      	beq.n	d6c36 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d6c30:	6868      	ldr	r0, [r5, #4]
   d6c32:	f002 f95a 	bl	d8eea <_ZN7TwoWire6unlockEv>
}
   d6c36:	4640      	mov	r0, r8
   d6c38:	b002      	add	sp, #8
   d6c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6c3e:	2301      	movs	r3, #1
   d6c40:	2204      	movs	r2, #4
   d6c42:	213f      	movs	r1, #63	; 0x3f
   d6c44:	4628      	mov	r0, r5
   d6c46:	f7ff fe75 	bl	d6934 <_ZN6AB180514setRegisterBitEhhb>
   d6c4a:	e7dc      	b.n	d6c06 <_ZN6AB18058writeRamEjPKhjb+0x40>

000d6c4c <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d6c4c:	b530      	push	{r4, r5, lr}
   d6c4e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6c50:	680d      	ldr	r5, [r1, #0]
   d6c52:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6c56:	9503      	str	r5, [sp, #12]
   d6c58:	684d      	ldr	r5, [r1, #4]
   d6c5a:	9502      	str	r5, [sp, #8]
   d6c5c:	688d      	ldr	r5, [r1, #8]
   d6c5e:	9501      	str	r5, [sp, #4]
   d6c60:	68c9      	ldr	r1, [r1, #12]
   d6c62:	9100      	str	r1, [sp, #0]
   d6c64:	3301      	adds	r3, #1
   d6c66:	4904      	ldr	r1, [pc, #16]	; (d6c78 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6c68:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d6c6c:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6c6e:	f003 fe6d 	bl	da94c <_ZN6String6formatEPKcz>
}
   d6c72:	4620      	mov	r0, r4
   d6c74:	b005      	add	sp, #20
   d6c76:	bd30      	pop	{r4, r5, pc}
   d6c78:	000dc9a5 	.word	0x000dc9a5

000d6c7c <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6c7c:	1103      	asrs	r3, r0, #4
}
   d6c7e:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6c80:	f000 000f 	and.w	r0, r0, #15
}
   d6c84:	fb02 0003 	mla	r0, r2, r3, r0
   d6c88:	4770      	bx	lr

000d6c8a <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6c8a:	b538      	push	{r3, r4, r5, lr}
   d6c8c:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d6c8e:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6c90:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d6c92:	f7ff fff3 	bl	d6c7c <_ZN6AB180510bcdToValueEh>
   d6c96:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6c98:	7860      	ldrb	r0, [r4, #1]
   d6c9a:	f7ff ffef 	bl	d6c7c <_ZN6AB180510bcdToValueEh>
   d6c9e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6ca0:	78a0      	ldrb	r0, [r4, #2]
   d6ca2:	f7ff ffeb 	bl	d6c7c <_ZN6AB180510bcdToValueEh>
   d6ca6:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6ca8:	78e0      	ldrb	r0, [r4, #3]
   d6caa:	f7ff ffe7 	bl	d6c7c <_ZN6AB180510bcdToValueEh>
   d6cae:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6cb0:	7920      	ldrb	r0, [r4, #4]
   d6cb2:	f7ff ffe3 	bl	d6c7c <_ZN6AB180510bcdToValueEh>
   d6cb6:	3801      	subs	r0, #1
   d6cb8:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6cba:	b92d      	cbnz	r5, d6cc8 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6cbc:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d6cbe:	7828      	ldrb	r0, [r5, #0]
   d6cc0:	f7ff ffdc 	bl	d6c7c <_ZN6AB180510bcdToValueEh>
   d6cc4:	6188      	str	r0, [r1, #24]
}
   d6cc6:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6cc8:	7960      	ldrb	r0, [r4, #5]
   d6cca:	f7ff ffd7 	bl	d6c7c <_ZN6AB180510bcdToValueEh>
   d6cce:	3064      	adds	r0, #100	; 0x64
   d6cd0:	1da5      	adds	r5, r4, #6
   d6cd2:	6148      	str	r0, [r1, #20]
   d6cd4:	e7f3      	b.n	d6cbe <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6cd8 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6cd8:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6cda:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6cdc:	b088      	sub	sp, #32
   d6cde:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6ce0:	461a      	mov	r2, r3
   d6ce2:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6ce4:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6ce6:	f7ff fda6 	bl	d6836 <_ZN6AB180510isBitClearEhhb>
   d6cea:	b1f0      	cbz	r0, d6d2a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6cec:	2308      	movs	r3, #8
   d6cee:	2601      	movs	r6, #1
   d6cf0:	4620      	mov	r0, r4
   d6cf2:	9600      	str	r6, [sp, #0]
   d6cf4:	eb0d 0203 	add.w	r2, sp, r3
   d6cf8:	2100      	movs	r1, #0
   d6cfa:	f7ff fc2f 	bl	d655c <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d6cfe:	4604      	mov	r4, r0
   d6d00:	b198      	cbz	r0, d6d2a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d6d02:	4632      	mov	r2, r6
   d6d04:	4629      	mov	r1, r5
   d6d06:	f10d 0009 	add.w	r0, sp, #9
   d6d0a:	f7ff ffbe 	bl	d6c8a <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d6d0e:	a804      	add	r0, sp, #16
   d6d10:	f7ff ff9c 	bl	d6c4c <_ZN6AB180510tmToStringEPK2tm>
   d6d14:	4808      	ldr	r0, [pc, #32]	; (d6d38 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d6d16:	9a04      	ldr	r2, [sp, #16]
   d6d18:	4908      	ldr	r1, [pc, #32]	; (d6d3c <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d6d1a:	f7fd fbb4 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
   d6d1e:	a804      	add	r0, sp, #16
   d6d20:	f003 fd48 	bl	da7b4 <_ZN6StringD1Ev>
}
   d6d24:	4620      	mov	r0, r4
   d6d26:	b008      	add	sp, #32
   d6d28:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d6d2a:	2224      	movs	r2, #36	; 0x24
   d6d2c:	2100      	movs	r1, #0
   d6d2e:	4628      	mov	r0, r5
   d6d30:	f005 f918 	bl	dbf64 <memset>
   d6d34:	2400      	movs	r4, #0
   d6d36:	e7f5      	b.n	d6d24 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d6d38:	2003e4f8 	.word	0x2003e4f8
   d6d3c:	000dc9c3 	.word	0x000dc9c3

000d6d40 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d6d40:	b530      	push	{r4, r5, lr}
   d6d42:	b08b      	sub	sp, #44	; 0x2c
   d6d44:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6d46:	a901      	add	r1, sp, #4
   d6d48:	f7ff ffc6 	bl	d6cd8 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d6d4c:	4604      	mov	r4, r0
   d6d4e:	b120      	cbz	r0, d6d5a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d6d50:	a801      	add	r0, sp, #4
   d6d52:	f001 fa9b 	bl	d828c <mktime>
   d6d56:	e9c5 0100 	strd	r0, r1, [r5]
}
   d6d5a:	4620      	mov	r0, r4
   d6d5c:	b00b      	add	sp, #44	; 0x2c
   d6d5e:	bd30      	pop	{r4, r5, pc}

000d6d60 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d6d60:	b510      	push	{r4, lr}
   d6d62:	4604      	mov	r4, r0
   d6d64:	b088      	sub	sp, #32
    if (callBegin) {
   d6d66:	b111      	cbz	r1, d6d6e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d6d68:	6840      	ldr	r0, [r0, #4]
   d6d6a:	f002 f85d 	bl	d8e28 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d6d6e:	4620      	mov	r0, r4
   d6d70:	f7ff fc4a 	bl	d6608 <_ZN6AB180510detectChipEv>
   d6d74:	b370      	cbz	r0, d6dd4 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6d76:	4620      	mov	r0, r4
   d6d78:	f7ff fd86 	bl	d6888 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6d7c:	2301      	movs	r3, #1
   d6d7e:	461a      	mov	r2, r3
   d6d80:	2110      	movs	r1, #16
   d6d82:	4620      	mov	r0, r4
   d6d84:	f7ff fd57 	bl	d6836 <_ZN6AB180510isBitClearEhhb>
   d6d88:	b1d8      	cbz	r0, d6dc2 <_ZN6AB18055setupEb+0x62>
   d6d8a:	f004 f887 	bl	dae9c <_ZN9TimeClass7isValidEv>
   d6d8e:	b9c0      	cbnz	r0, d6dc2 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6d90:	a902      	add	r1, sp, #8
   d6d92:	4620      	mov	r0, r4
   d6d94:	f7ff ffd4 	bl	d6d40 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6d9c:	f003 ff84 	bl	daca8 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6da0:	4b0f      	ldr	r3, [pc, #60]	; (d6de0 <_ZN6AB18055setupEb+0x80>)
   d6da2:	4910      	ldr	r1, [pc, #64]	; (d6de4 <_ZN6AB18055setupEb+0x84>)
   d6da4:	681b      	ldr	r3, [r3, #0]
   d6da6:	9300      	str	r3, [sp, #0]
   d6da8:	a804      	add	r0, sp, #16
   d6daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6dae:	f004 f833 	bl	dae18 <_ZN9TimeClass6formatExPKc>
   d6db2:	480d      	ldr	r0, [pc, #52]	; (d6de8 <_ZN6AB18055setupEb+0x88>)
   d6db4:	9a04      	ldr	r2, [sp, #16]
   d6db6:	490d      	ldr	r1, [pc, #52]	; (d6dec <_ZN6AB18055setupEb+0x8c>)
   d6db8:	f7fd fb65 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
   d6dbc:	a804      	add	r0, sp, #16
   d6dbe:	f003 fcf9 	bl	da7b4 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6dc2:	4a0b      	ldr	r2, [pc, #44]	; (d6df0 <_ZN6AB18055setupEb+0x90>)
   d6dc4:	2300      	movs	r3, #0
   d6dc6:	2100      	movs	r1, #0
   d6dc8:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6dcc:	f001 f8cc 	bl	d7f68 <system_subscribe_event>
}
   d6dd0:	b008      	add	sp, #32
   d6dd2:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6dd4:	4907      	ldr	r1, [pc, #28]	; (d6df4 <_ZN6AB18055setupEb+0x94>)
   d6dd6:	4804      	ldr	r0, [pc, #16]	; (d6de8 <_ZN6AB18055setupEb+0x88>)
   d6dd8:	f7fd fb6c 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
   d6ddc:	e7f1      	b.n	d6dc2 <_ZN6AB18055setupEb+0x62>
   d6dde:	bf00      	nop
   d6de0:	2003e29c 	.word	0x2003e29c
   d6de4:	2003e630 	.word	0x2003e630
   d6de8:	2003e4f8 	.word	0x2003e4f8
   d6dec:	000dc9d1 	.word	0x000dc9d1
   d6df0:	000d67b5 	.word	0x000d67b5
   d6df4:	000dc9ee 	.word	0x000dc9ee

000d6df8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6df8:	220a      	movs	r2, #10
   d6dfa:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d6dfe:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d6e02:	fb93 f1f2 	sdiv	r1, r3, r2
   d6e06:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6e0a:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d6e0e:	b2c0      	uxtb	r0, r0
   d6e10:	4770      	bx	lr

000d6e12 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6e12:	b570      	push	{r4, r5, r6, lr}
   d6e14:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6e16:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6e18:	460c      	mov	r4, r1
   d6e1a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6e1c:	f7ff ffec 	bl	d6df8 <_ZN6AB180510valueToBcdEi>
   d6e20:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d6e22:	6868      	ldr	r0, [r5, #4]
   d6e24:	f7ff ffe8 	bl	d6df8 <_ZN6AB180510valueToBcdEi>
   d6e28:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d6e2a:	68a8      	ldr	r0, [r5, #8]
   d6e2c:	f7ff ffe4 	bl	d6df8 <_ZN6AB180510valueToBcdEi>
   d6e30:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d6e32:	68e8      	ldr	r0, [r5, #12]
   d6e34:	f7ff ffe0 	bl	d6df8 <_ZN6AB180510valueToBcdEi>
   d6e38:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6e3a:	6928      	ldr	r0, [r5, #16]
   d6e3c:	3001      	adds	r0, #1
   d6e3e:	f7ff ffdb 	bl	d6df8 <_ZN6AB180510valueToBcdEi>
   d6e42:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d6e44:	b92e      	cbnz	r6, d6e52 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6e46:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d6e48:	69a8      	ldr	r0, [r5, #24]
   d6e4a:	f7ff ffd5 	bl	d6df8 <_ZN6AB180510valueToBcdEi>
   d6e4e:	7030      	strb	r0, [r6, #0]
}
   d6e50:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d6e52:	696a      	ldr	r2, [r5, #20]
   d6e54:	2364      	movs	r3, #100	; 0x64
   d6e56:	fb92 f0f3 	sdiv	r0, r2, r3
   d6e5a:	fb03 2010 	mls	r0, r3, r0, r2
   d6e5e:	f7ff ffcb 	bl	d6df8 <_ZN6AB180510valueToBcdEi>
   d6e62:	1da6      	adds	r6, r4, #6
   d6e64:	7160      	strb	r0, [r4, #5]
   d6e66:	e7ef      	b.n	d6e48 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d6e68 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e6a:	b087      	sub	sp, #28
   d6e6c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6e6e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6e70:	4616      	mov	r6, r2
   d6e72:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6e74:	f7ff feea 	bl	d6c4c <_ZN6AB180510tmToStringEPK2tm>
   d6e78:	481e      	ldr	r0, [pc, #120]	; (d6ef4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6e7a:	9a02      	ldr	r2, [sp, #8]
   d6e7c:	491e      	ldr	r1, [pc, #120]	; (d6ef8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d6e7e:	f7fd fb02 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
   d6e82:	a802      	add	r0, sp, #8
   d6e84:	f003 fc96 	bl	da7b4 <_ZN6StringD1Ev>
    if (lock) {
   d6e88:	b116      	cbz	r6, d6e90 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d6e8a:	6868      	ldr	r0, [r5, #4]
   d6e8c:	f002 f824 	bl	d8ed8 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d6e90:	4620      	mov	r0, r4
   d6e92:	2201      	movs	r2, #1
   d6e94:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6e98:	2700      	movs	r7, #0
   d6e9a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d6e9e:	f7ff ffb8 	bl	d6e12 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6ea2:	2301      	movs	r3, #1
   d6ea4:	461a      	mov	r2, r3
   d6ea6:	2110      	movs	r1, #16
   d6ea8:	4628      	mov	r0, r5
   d6eaa:	f7ff fd43 	bl	d6934 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d6eae:	4604      	mov	r4, r0
   d6eb0:	b1e8      	cbz	r0, d6eee <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d6eb2:	2308      	movs	r3, #8
   d6eb4:	9700      	str	r7, [sp, #0]
   d6eb6:	eb0d 0203 	add.w	r2, sp, r3
   d6eba:	4639      	mov	r1, r7
   d6ebc:	4628      	mov	r0, r5
   d6ebe:	f7ff fbef 	bl	d66a0 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d6ec2:	4604      	mov	r4, r0
   d6ec4:	b160      	cbz	r0, d6ee0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6ec6:	2301      	movs	r3, #1
   d6ec8:	461a      	mov	r2, r3
   d6eca:	2110      	movs	r1, #16
   d6ecc:	4628      	mov	r0, r5
   d6ece:	f7ff fcd0 	bl	d6872 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d6ed2:	b116      	cbz	r6, d6eda <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d6ed4:	6868      	ldr	r0, [r5, #4]
   d6ed6:	f002 f808 	bl	d8eea <_ZN7TwoWire6unlockEv>
}
   d6eda:	4620      	mov	r0, r4
   d6edc:	b007      	add	sp, #28
   d6ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d6ee0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d6ee4:	4905      	ldr	r1, [pc, #20]	; (d6efc <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d6ee6:	4803      	ldr	r0, [pc, #12]	; (d6ef4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6ee8:	f7fd fae4 	bl	d44b4 <_ZNK5spark6Logger5errorEPKcz>
   d6eec:	e7f1      	b.n	d6ed2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d6eee:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d6ef2:	e7f7      	b.n	d6ee4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d6ef4:	2003e4f8 	.word	0x2003e4f8
   d6ef8:	000dca06 	.word	0x000dca06
   d6efc:	000dca14 	.word	0x000dca14

000d6f00 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6f00:	b513      	push	{r0, r1, r4, lr}
   d6f02:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d6f04:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d6f06:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d6f0a:	f004 fff1 	bl	dbef0 <gmtime>
    return setRtcFromTm(tm, lock);
   d6f0e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d6f12:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d6f14:	4620      	mov	r0, r4
   d6f16:	f7ff ffa7 	bl	d6e68 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d6f1a:	b002      	add	sp, #8
   d6f1c:	bd10      	pop	{r4, pc}
	...

000d6f20 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d6f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6f22:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d6f24:	b089      	sub	sp, #36	; 0x24
   d6f26:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d6f28:	bb75      	cbnz	r5, d6f88 <_ZN6AB18054loopEv+0x68>
   d6f2a:	f003 ffb7 	bl	dae9c <_ZN9TimeClass7isValidEv>
   d6f2e:	b358      	cbz	r0, d6f88 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d6f30:	2600      	movs	r6, #0
   d6f32:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d6f34:	a904      	add	r1, sp, #16
   d6f36:	4628      	mov	r0, r5
        tm = 0;
   d6f38:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d6f3c:	f001 f8c6 	bl	d80cc <spark_sync_time_last>
   d6f40:	b310      	cbz	r0, d6f88 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d6f42:	2501      	movs	r5, #1
   d6f44:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d6f46:	f003 ffc6 	bl	daed6 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d6f4a:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d6f4c:	4602      	mov	r2, r0
   d6f4e:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d6f50:	4620      	mov	r0, r4
        time_t time = Time.now();
   d6f52:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d6f56:	f7ff ffd3 	bl	d6f00 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d6f5a:	a902      	add	r1, sp, #8
   d6f5c:	4620      	mov	r0, r4
        time = 0;
   d6f5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d6f62:	f7ff feed 	bl	d6d40 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6f66:	4b12      	ldr	r3, [pc, #72]	; (d6fb0 <_ZN6AB18054loopEv+0x90>)
   d6f68:	4912      	ldr	r1, [pc, #72]	; (d6fb4 <_ZN6AB18054loopEv+0x94>)
   d6f6a:	681b      	ldr	r3, [r3, #0]
   d6f6c:	9300      	str	r3, [sp, #0]
   d6f6e:	a804      	add	r0, sp, #16
   d6f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6f74:	f003 ff50 	bl	dae18 <_ZN9TimeClass6formatExPKc>
   d6f78:	480f      	ldr	r0, [pc, #60]	; (d6fb8 <_ZN6AB18054loopEv+0x98>)
   d6f7a:	9a04      	ldr	r2, [sp, #16]
   d6f7c:	490f      	ldr	r1, [pc, #60]	; (d6fbc <_ZN6AB18054loopEv+0x9c>)
   d6f7e:	f7fd fa82 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
   d6f82:	a804      	add	r0, sp, #16
   d6f84:	f003 fc16 	bl	da7b4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d6f88:	6963      	ldr	r3, [r4, #20]
   d6f8a:	b173      	cbz	r3, d6faa <_ZN6AB18054loopEv+0x8a>
   d6f8c:	f000 fe12 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d6f90:	6923      	ldr	r3, [r4, #16]
   d6f92:	1ac0      	subs	r0, r0, r3
   d6f94:	6963      	ldr	r3, [r4, #20]
   d6f96:	4298      	cmp	r0, r3
   d6f98:	d307      	bcc.n	d6faa <_ZN6AB18054loopEv+0x8a>
   d6f9a:	f000 fe0b 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d6f9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d6fa2:	6120      	str	r0, [r4, #16]
            setWDT();
   d6fa4:	4620      	mov	r0, r4
   d6fa6:	f7ff fbc3 	bl	d6730 <_ZN6AB18056setWDTEi>
}
   d6faa:	b009      	add	sp, #36	; 0x24
   d6fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6fae:	bf00      	nop
   d6fb0:	2003e29c 	.word	0x2003e29c
   d6fb4:	2003e630 	.word	0x2003e630
   d6fb8:	2003e4f8 	.word	0x2003e4f8
   d6fbc:	000dca2f 	.word	0x000dca2f

000d6fc0 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d6fc0:	4b01      	ldr	r3, [pc, #4]	; (d6fc8 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d6fc2:	4a02      	ldr	r2, [pc, #8]	; (d6fcc <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d6fc4:	601a      	str	r2, [r3, #0]
}
   d6fc6:	4770      	bx	lr
   d6fc8:	2003e4f8 	.word	0x2003e4f8
   d6fcc:	000dca45 	.word	0x000dca45

000d6fd0 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d6fd0:	4770      	bx	lr

000d6fd2 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d6fd2:	b510      	push	{r4, lr}
}
   d6fd4:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d6fd6:	4604      	mov	r4, r0
}
   d6fd8:	f004 faaf 	bl	db53a <_ZdlPvj>
   d6fdc:	4620      	mov	r0, r4
   d6fde:	bd10      	pop	{r4, pc}

000d6fe0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d6fe0:	6803      	ldr	r3, [r0, #0]
   d6fe2:	b2c9      	uxtb	r1, r1
   d6fe4:	689b      	ldr	r3, [r3, #8]
   d6fe6:	4718      	bx	r3

000d6fe8 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d6fe8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d6fea:	4d03      	ldr	r5, [pc, #12]	; (d6ff8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d6fec:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d6ff0:	e9c0 5100 	strd	r5, r1, [r0]
}
   d6ff4:	bd30      	pop	{r4, r5, pc}
   d6ff6:	bf00      	nop
   d6ff8:	000dca9c 	.word	0x000dca9c

000d6ffc <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d6ffc:	6840      	ldr	r0, [r0, #4]
   d6ffe:	f001 bf13 	b.w	d8e28 <_ZN7TwoWire5beginEv>

000d7002 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7002:	b510      	push	{r4, lr}
   d7004:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7006:	6800      	ldr	r0, [r0, #0]
   d7008:	f001 ff6f 	bl	d8eea <_ZN7TwoWire6unlockEv>
   d700c:	4620      	mov	r0, r4
   d700e:	bd10      	pop	{r4, pc}

000d7010 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d7010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7014:	b08a      	sub	sp, #40	; 0x28
   d7016:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d7018:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d701a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d701c:	f001 ff5c 	bl	d8ed8 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7020:	221e      	movs	r2, #30
   d7022:	2100      	movs	r1, #0
   d7024:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d7026:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d7028:	f004 ff9c 	bl	dbf64 <memset>
		size_t framAddr = 0;
   d702c:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d702e:	b1ef      	cbz	r7, d706c <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7030:	6823      	ldr	r3, [r4, #0]
   d7032:	2f1e      	cmp	r7, #30
   d7034:	46b8      	mov	r8, r7
   d7036:	bf28      	it	cs
   d7038:	f04f 081e 	movcs.w	r8, #30
   d703c:	68dd      	ldr	r5, [r3, #12]
   d703e:	aa02      	add	r2, sp, #8
   d7040:	4643      	mov	r3, r8
   d7042:	4631      	mov	r1, r6
   d7044:	4620      	mov	r0, r4
   d7046:	47a8      	blx	r5
			if (!result) {
   d7048:	4605      	mov	r5, r0
   d704a:	b958      	cbnz	r0, d7064 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d704c:	480a      	ldr	r0, [pc, #40]	; (d7078 <_ZN6MB85RC5eraseEv+0x68>)
   d704e:	490b      	ldr	r1, [pc, #44]	; (d707c <_ZN6MB85RC5eraseEv+0x6c>)
   d7050:	4632      	mov	r2, r6
   d7052:	f7fd fa18 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7056:	a801      	add	r0, sp, #4
   d7058:	f7ff ffd3 	bl	d7002 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d705c:	4628      	mov	r0, r5
   d705e:	b00a      	add	sp, #40	; 0x28
   d7060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7064:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d7068:	4446      	add	r6, r8
		while(totalLen > 0) {
   d706a:	e7e0      	b.n	d702e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d706c:	a801      	add	r0, sp, #4
   d706e:	f7ff ffc8 	bl	d7002 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d7072:	2501      	movs	r5, #1
   d7074:	e7f2      	b.n	d705c <_ZN6MB85RC5eraseEv+0x4c>
   d7076:	bf00      	nop
   d7078:	2003e5dc 	.word	0x2003e5dc
   d707c:	000dca68 	.word	0x000dca68

000d7080 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7084:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7086:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7088:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d708a:	460d      	mov	r5, r1
   d708c:	4616      	mov	r6, r2
   d708e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d7090:	f001 ff22 	bl	d8ed8 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7094:	b1a7      	cbz	r7, d70c0 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7096:	68e1      	ldr	r1, [r4, #12]
   d7098:	6860      	ldr	r0, [r4, #4]
   d709a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d709e:	f001 fef9 	bl	d8e94 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d70a2:	0a29      	lsrs	r1, r5, #8
   d70a4:	6860      	ldr	r0, [r4, #4]
   d70a6:	f7ff ff9b 	bl	d6fe0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d70aa:	4629      	mov	r1, r5
   d70ac:	6860      	ldr	r0, [r4, #4]
   d70ae:	f7ff ff97 	bl	d6fe0 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d70b2:	6860      	ldr	r0, [r4, #4]
   d70b4:	2100      	movs	r1, #0
   d70b6:	f001 ff08 	bl	d8eca <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d70ba:	b148      	cbz	r0, d70d0 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d70bc:	2400      	movs	r4, #0
   d70be:	e000      	b.n	d70c2 <_ZN6MB85RC8readDataEjPhj+0x42>
   d70c0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d70c2:	a801      	add	r0, sp, #4
   d70c4:	f7ff ff9d 	bl	d7002 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d70c8:	4620      	mov	r0, r4
   d70ca:	b003      	add	sp, #12
   d70cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d70d0:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d70d2:	7b21      	ldrb	r1, [r4, #12]
   d70d4:	6860      	ldr	r0, [r4, #4]
   d70d6:	46b8      	mov	r8, r7
   d70d8:	bf28      	it	cs
   d70da:	f04f 0820 	movcs.w	r8, #32
   d70de:	2301      	movs	r3, #1
   d70e0:	4642      	mov	r2, r8
   d70e2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d70e6:	f001 febc 	bl	d8e62 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d70ea:	f004 f9d1 	bl	db490 <_Z19__fetch_global_Wirev>
   d70ee:	6803      	ldr	r3, [r0, #0]
   d70f0:	691b      	ldr	r3, [r3, #16]
   d70f2:	4798      	blx	r3
   d70f4:	4540      	cmp	r0, r8
   d70f6:	dbe1      	blt.n	d70bc <_ZN6MB85RC8readDataEjPhj+0x3c>
   d70f8:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d70fc:	f004 f9c8 	bl	db490 <_Z19__fetch_global_Wirev>
   d7100:	6803      	ldr	r3, [r0, #0]
   d7102:	695b      	ldr	r3, [r3, #20]
   d7104:	4798      	blx	r3
   d7106:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d710a:	454e      	cmp	r6, r9
   d710c:	d1f6      	bne.n	d70fc <_ZN6MB85RC8readDataEjPhj+0x7c>
   d710e:	4445      	add	r5, r8
   d7110:	eba7 0708 	sub.w	r7, r7, r8
   d7114:	e7be      	b.n	d7094 <_ZN6MB85RC8readDataEjPhj+0x14>

000d7116 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7116:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d711a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d711c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d711e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7120:	460e      	mov	r6, r1
   d7122:	4690      	mov	r8, r2
   d7124:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d7126:	f001 fed7 	bl	d8ed8 <_ZN7TwoWire4lockEv>
   d712a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d712e:	f1b9 0f00 	cmp.w	r9, #0
   d7132:	d02a      	beq.n	d718a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7134:	b34d      	cbz	r5, d718a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7136:	68e1      	ldr	r1, [r4, #12]
   d7138:	6860      	ldr	r0, [r4, #4]
   d713a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d713e:	f001 fea9 	bl	d8e94 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7142:	0a31      	lsrs	r1, r6, #8
   d7144:	6860      	ldr	r0, [r4, #4]
   d7146:	f7ff ff4b 	bl	d6fe0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d714a:	6860      	ldr	r0, [r4, #4]
   d714c:	4631      	mov	r1, r6
   d714e:	f7ff ff47 	bl	d6fe0 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7152:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7156:	4647      	mov	r7, r8
   d7158:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d715c:	6860      	ldr	r0, [r4, #4]
   d715e:	f817 1b01 	ldrb.w	r1, [r7], #1
   d7162:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7164:	3d01      	subs	r5, #1
				wire.write(*data);
   d7166:	689b      	ldr	r3, [r3, #8]
   d7168:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d716a:	4555      	cmp	r5, sl
   d716c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d7170:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7172:	d001      	beq.n	d7178 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7174:	2d00      	cmp	r5, #0
   d7176:	d1f1      	bne.n	d715c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7178:	6860      	ldr	r0, [r4, #4]
   d717a:	2101      	movs	r1, #1
   d717c:	f001 fea5 	bl	d8eca <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7180:	2800      	cmp	r0, #0
   d7182:	d0d7      	beq.n	d7134 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7184:	f04f 0900 	mov.w	r9, #0
   d7188:	e7d1      	b.n	d712e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d718a:	a801      	add	r0, sp, #4
   d718c:	f7ff ff39 	bl	d7002 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d7190:	4648      	mov	r0, r9
   d7192:	b003      	add	sp, #12
   d7194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7198 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d719c:	b08b      	sub	sp, #44	; 0x2c
   d719e:	460e      	mov	r6, r1
   d71a0:	4615      	mov	r5, r2
   d71a2:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d71a4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d71a6:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d71a8:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d71aa:	f001 fe95 	bl	d8ed8 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d71ae:	42ae      	cmp	r6, r5
   d71b0:	d229      	bcs.n	d7206 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d71b2:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d71b4:	4425      	add	r5, r4
			while(numBytes > 0) {
   d71b6:	b18c      	cbz	r4, d71dc <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d71b8:	2c1e      	cmp	r4, #30
   d71ba:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d71bc:	f8d8 3000 	ldr.w	r3, [r8]
   d71c0:	bf28      	it	cs
   d71c2:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d71c4:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d71c6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d71ca:	aa02      	add	r2, sp, #8
   d71cc:	463b      	mov	r3, r7
   d71ce:	4631      	mov	r1, r6
   d71d0:	4640      	mov	r0, r8
				framAddrTo -= count;
   d71d2:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d71d4:	47c8      	blx	r9
				if (!result) {
   d71d6:	b948      	cbnz	r0, d71ec <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d71d8:	2400      	movs	r4, #0
   d71da:	e000      	b.n	d71de <_ZN6MB85RC8moveDataEjjj+0x46>
   d71dc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d71de:	a801      	add	r0, sp, #4
   d71e0:	f7ff ff0f 	bl	d7002 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d71e4:	4620      	mov	r0, r4
   d71e6:	b00b      	add	sp, #44	; 0x2c
   d71e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d71ec:	f8d8 3000 	ldr.w	r3, [r8]
   d71f0:	aa02      	add	r2, sp, #8
   d71f2:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d71f6:	4629      	mov	r1, r5
   d71f8:	463b      	mov	r3, r7
   d71fa:	4640      	mov	r0, r8
   d71fc:	47c8      	blx	r9
				if (!result) {
   d71fe:	2800      	cmp	r0, #0
   d7200:	d0ea      	beq.n	d71d8 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d7202:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7204:	e7d7      	b.n	d71b6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d7206:	d9e9      	bls.n	d71dc <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d7208:	2c00      	cmp	r4, #0
   d720a:	d0e7      	beq.n	d71dc <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d720c:	f8d8 3000 	ldr.w	r3, [r8]
   d7210:	2c1e      	cmp	r4, #30
   d7212:	4627      	mov	r7, r4
   d7214:	bf28      	it	cs
   d7216:	271e      	movcs	r7, #30
   d7218:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d721c:	aa02      	add	r2, sp, #8
   d721e:	463b      	mov	r3, r7
   d7220:	4631      	mov	r1, r6
   d7222:	4640      	mov	r0, r8
   d7224:	47c8      	blx	r9
				if (!result) {
   d7226:	2800      	cmp	r0, #0
   d7228:	d0d6      	beq.n	d71d8 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d722a:	f8d8 3000 	ldr.w	r3, [r8]
   d722e:	aa02      	add	r2, sp, #8
   d7230:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7234:	4629      	mov	r1, r5
   d7236:	463b      	mov	r3, r7
   d7238:	4640      	mov	r0, r8
   d723a:	47c8      	blx	r9
				if (!result) {
   d723c:	2800      	cmp	r0, #0
   d723e:	d0cb      	beq.n	d71d8 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d7240:	443e      	add	r6, r7
				framAddrTo += count;
   d7242:	443d      	add	r5, r7
				numBytes -= count;
   d7244:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7246:	e7df      	b.n	d7208 <_ZN6MB85RC8moveDataEjjj+0x70>

000d7248 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d7248:	6803      	ldr	r3, [r0, #0]
   d724a:	b2c9      	uxtb	r1, r1
   d724c:	689b      	ldr	r3, [r3, #8]
   d724e:	4718      	bx	r3

000d7250 <_ZN8MMA8452QC1Eh>:
//   supplied address into a private variable for future use.
//   The variable addr should be either 0x1C or 0x1D, depending on which voltage
//   the SA0 pin is tied to (GND or 3.3V respectively).
MMA8452Q::MMA8452Q(byte addr)
{
	address = addr; // Store address into private variable
   d7250:	7501      	strb	r1, [r0, #20]
}
   d7252:	4770      	bx	lr

000d7254 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>:

// WRITE MULTIPLE REGISTERS
//	Write an array of "len" bytes ("buffer"), starting at register "reg", and
//	auto-incrmenting to the next.
void MMA8452Q::writeRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
   d7254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7256:	4607      	mov	r7, r0
   d7258:	460c      	mov	r4, r1
   d725a:	4615      	mov	r5, r2
   d725c:	461e      	mov	r6, r3
	Wire.beginTransmission(address);
   d725e:	f004 f917 	bl	db490 <_Z19__fetch_global_Wirev>
   d7262:	7d39      	ldrb	r1, [r7, #20]
   d7264:	f001 fe12 	bl	d8e8c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d7268:	f004 f912 	bl	db490 <_Z19__fetch_global_Wirev>
   d726c:	4621      	mov	r1, r4
   d726e:	f7ff ffeb 	bl	d7248 <_ZN7TwoWire5writeEi>
	for (int x = 0; x < len; x++)
   d7272:	2400      	movs	r4, #0
   d7274:	42a6      	cmp	r6, r4
   d7276:	dd07      	ble.n	d7288 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x34>
		Wire.write(buffer[x]);
   d7278:	f004 f90a 	bl	db490 <_Z19__fetch_global_Wirev>
   d727c:	6803      	ldr	r3, [r0, #0]
   d727e:	5d29      	ldrb	r1, [r5, r4]
   d7280:	689b      	ldr	r3, [r3, #8]
   d7282:	4798      	blx	r3
	for (int x = 0; x < len; x++)
   d7284:	3401      	adds	r4, #1
   d7286:	e7f5      	b.n	d7274 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x20>
	Wire.endTransmission(); //Stop transmitting
   d7288:	f004 f902 	bl	db490 <_Z19__fetch_global_Wirev>
}
   d728c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Wire.endTransmission(); //Stop transmitting
   d7290:	f001 be1f 	b.w	d8ed2 <_ZN7TwoWire15endTransmissionEv>

000d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>:
{
   d7294:	b507      	push	{r0, r1, r2, lr}
	writeRegisters(reg, &data, 1);
   d7296:	2301      	movs	r3, #1
{
   d7298:	f88d 2007 	strb.w	r2, [sp, #7]
	writeRegisters(reg, &data, 1);
   d729c:	f10d 0207 	add.w	r2, sp, #7
   d72a0:	f7ff ffd8 	bl	d7254 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>
}
   d72a4:	b003      	add	sp, #12
   d72a6:	f85d fb04 	ldr.w	pc, [sp], #4

000d72aa <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:

// READ A SINGLE REGISTER
//	Read a byte from the MMA8452Q register "reg".
byte MMA8452Q::readRegister(MMA8452Q_Register reg)
{
   d72aa:	b538      	push	{r3, r4, r5, lr}
   d72ac:	4604      	mov	r4, r0
   d72ae:	460d      	mov	r5, r1
	Wire.beginTransmission(address);
   d72b0:	f004 f8ee 	bl	db490 <_Z19__fetch_global_Wirev>
   d72b4:	7d21      	ldrb	r1, [r4, #20]
   d72b6:	f001 fde9 	bl	d8e8c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d72ba:	f004 f8e9 	bl	db490 <_Z19__fetch_global_Wirev>
   d72be:	4629      	mov	r1, r5
   d72c0:	f7ff ffc2 	bl	d7248 <_ZN7TwoWire5writeEi>
	//endTransmission but keep the connection active
	if (Wire.endTransmission(false) == 0)
   d72c4:	f004 f8e4 	bl	db490 <_Z19__fetch_global_Wirev>
   d72c8:	2100      	movs	r1, #0
   d72ca:	f001 fdfe 	bl	d8eca <_ZN7TwoWire15endTransmissionEh>
   d72ce:	b108      	cbz	r0, d72d4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x2a>
        //Ask for 1 byte, once done, bus is released by default
    	if (Wire.requestFrom(address, 1) == 1)
    	    return Wire.read();
	}
	
    return 0;
   d72d0:	2000      	movs	r0, #0
}
   d72d2:	bd38      	pop	{r3, r4, r5, pc}
    	if (Wire.requestFrom(address, 1) == 1)
   d72d4:	f004 f8dc 	bl	db490 <_Z19__fetch_global_Wirev>
   d72d8:	7d21      	ldrb	r1, [r4, #20]
   d72da:	2201      	movs	r2, #1
   d72dc:	f001 fdd3 	bl	d8e86 <_ZN7TwoWire11requestFromEhj>
   d72e0:	2801      	cmp	r0, #1
   d72e2:	d1f5      	bne.n	d72d0 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x26>
    	    return Wire.read();
   d72e4:	f004 f8d4 	bl	db490 <_Z19__fetch_global_Wirev>
   d72e8:	6803      	ldr	r3, [r0, #0]
   d72ea:	695b      	ldr	r3, [r3, #20]
   d72ec:	4798      	blx	r3
   d72ee:	b2c0      	uxtb	r0, r0
   d72f0:	e7ef      	b.n	d72d2 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x28>

000d72f2 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:
{
   d72f2:	b538      	push	{r3, r4, r5, lr}
   d72f4:	460d      	mov	r5, r1
	byte cfg = readRegister(XYZ_DATA_CFG);
   d72f6:	210e      	movs	r1, #14
{
   d72f8:	4604      	mov	r4, r0
	byte cfg = readRegister(XYZ_DATA_CFG);
   d72fa:	f7ff ffd6 	bl	d72aa <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	cfg &= 0xFC; // Mask out scale bits
   d72fe:	f020 0203 	bic.w	r2, r0, #3
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
   d7302:	ea42 0295 	orr.w	r2, r2, r5, lsr #2
	writeRegister(XYZ_DATA_CFG, cfg);
   d7306:	4620      	mov	r0, r4
   d7308:	b2d2      	uxtb	r2, r2
}
   d730a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(XYZ_DATA_CFG, cfg);
   d730e:	210e      	movs	r1, #14
   d7310:	f7ff bfc0 	b.w	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7314 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
{
   d7314:	b538      	push	{r3, r4, r5, lr}
   d7316:	460d      	mov	r5, r1
	byte ctrl = readRegister(CTRL_REG1);
   d7318:	212a      	movs	r1, #42	; 0x2a
{
   d731a:	4604      	mov	r4, r0
	byte ctrl = readRegister(CTRL_REG1);
   d731c:	f7ff ffc5 	bl	d72aa <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	ctrl &= 0xCF; // Mask out data rate bits
   d7320:	f020 0230 	bic.w	r2, r0, #48	; 0x30
	ctrl |= (odr << 3);
   d7324:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
	writeRegister(CTRL_REG1, ctrl);
   d7328:	4620      	mov	r0, r4
   d732a:	b2d2      	uxtb	r2, r2
}
   d732c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(CTRL_REG1, ctrl);
   d7330:	212a      	movs	r1, #42	; 0x2a
   d7332:	f7ff bfaf 	b.w	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7336 <_ZN8MMA8452Q12clearTapIntsEv>:
	readRegister(TRANSIENT_STAT);
   d7336:	211c      	movs	r1, #28
   d7338:	f7ff bfb7 	b.w	d72aa <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>

000d733c <_ZN8MMA8452Q7readTapEv>:
{
   d733c:	b508      	push	{r3, lr}
	byte tapStat = readRegister(PULSE_SRC);
   d733e:	2122      	movs	r1, #34	; 0x22
   d7340:	f7ff ffb3 	bl	d72aa <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	if (tapStat & 0x80) // Read EA bit to check if a interrupt was generated
   d7344:	0603      	lsls	r3, r0, #24
		return tapStat & 0x7F;
   d7346:	bf4c      	ite	mi
   d7348:	f000 007f 	andmi.w	r0, r0, #127	; 0x7f
		return 0;
   d734c:	2000      	movpl	r0, #0
}
   d734e:	bd08      	pop	{r3, pc}

000d7350 <_ZN8MMA8452Q7setupPLEv>:
{
   d7350:	b510      	push	{r4, lr}
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d7352:	2111      	movs	r1, #17
{
   d7354:	4604      	mov	r4, r0
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d7356:	f7ff ffa8 	bl	d72aa <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
   d735a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   d735e:	b2c2      	uxtb	r2, r0
   d7360:	2111      	movs	r1, #17
   d7362:	4620      	mov	r0, r4
   d7364:	f7ff ff96 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d7368:	4620      	mov	r0, r4
   d736a:	2250      	movs	r2, #80	; 0x50
}
   d736c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d7370:	2112      	movs	r1, #18
   d7372:	f7ff bf8f 	b.w	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7376 <_ZN8MMA8452Q7standbyEv>:
{
   d7376:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d7378:	212a      	movs	r1, #42	; 0x2a
{
   d737a:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d737c:	f7ff ff95 	bl	d72aa <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d7380:	212a      	movs	r1, #42	; 0x2a
   d7382:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
   d7386:	4620      	mov	r0, r4
}
   d7388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d738c:	f7ff bf82 	b.w	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7390 <_ZN8MMA8452Q6activeEv>:
{
   d7390:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d7392:	212a      	movs	r1, #42	; 0x2a
{
   d7394:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d7396:	f7ff ff88 	bl	d72aa <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d739a:	f040 0001 	orr.w	r0, r0, #1
   d739e:	b2c2      	uxtb	r2, r0
   d73a0:	212a      	movs	r1, #42	; 0x2a
   d73a2:	4620      	mov	r0, r4
}
   d73a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d73a8:	f7ff bf74 	b.w	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d73ac <_ZN8MMA8452Q12setupTapIntsEv>:
{
   d73ac:	b510      	push	{r4, lr}
   d73ae:	4604      	mov	r4, r0
    standby();  // Must be in standby to change registers
   d73b0:	f7ff ffe1 	bl	d7376 <_ZN8MMA8452Q7standbyEv>
    writeRegister(PULSE_CFG, 0x55);  // 1. single taps only on all axes
   d73b4:	4620      	mov	r0, r4
   d73b6:	2255      	movs	r2, #85	; 0x55
   d73b8:	2121      	movs	r1, #33	; 0x21
   d73ba:	f7ff ff6b 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    writeRegister(PULSE_THSX, 0x01);  // 2. x thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d73be:	4620      	mov	r0, r4
   d73c0:	2201      	movs	r2, #1
   d73c2:	2123      	movs	r1, #35	; 0x23
   d73c4:	f7ff ff66 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    writeRegister(PULSE_THSY, 0x01);  // 2. y thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d73c8:	4620      	mov	r0, r4
   d73ca:	2201      	movs	r2, #1
   d73cc:	2124      	movs	r1, #36	; 0x24
   d73ce:	f7ff ff61 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    writeRegister(PULSE_THSZ, 0x01);  // 2. z thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d73d2:	4620      	mov	r0, r4
   d73d4:	2201      	movs	r2, #1
   d73d6:	2125      	movs	r1, #37	; 0x25
   d73d8:	f7ff ff5c 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    writeRegister(PULSE_TMLT, 0xFF);  // 3. Max time limit at 100Hz odr, this is very dependent on data rate, see the app note
   d73dc:	4620      	mov	r0, r4
   d73de:	22ff      	movs	r2, #255	; 0xff
   d73e0:	2126      	movs	r1, #38	; 0x26
   d73e2:	f7ff ff57 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    writeRegister(PULSE_LTCY, 0x64);  // 4. 1000ms (at 100Hz odr) between taps min, this also depends on the data rate
   d73e6:	4620      	mov	r0, r4
   d73e8:	2264      	movs	r2, #100	; 0x64
   d73ea:	2127      	movs	r1, #39	; 0x27
   d73ec:	f7ff ff52 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    writeRegister(PULSE_WIND, 0xFF);  // 5. 318ms (max value) between taps max
   d73f0:	4620      	mov	r0, r4
   d73f2:	22ff      	movs	r2, #255	; 0xff
   d73f4:	2128      	movs	r1, #40	; 0x28
   d73f6:	f7ff ff4d 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    writeRegister(CTRL_REG3, 0x02);  // Active high, push-pull interrupts
   d73fa:	4620      	mov	r0, r4
   d73fc:	2202      	movs	r2, #2
   d73fe:	212c      	movs	r1, #44	; 0x2c
   d7400:	f7ff ff48 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    writeRegister(CTRL_REG4, 0x19);  // DRDY, P/L and tap ints enabled
   d7404:	4620      	mov	r0, r4
   d7406:	2219      	movs	r2, #25
   d7408:	212d      	movs	r1, #45	; 0x2d
   d740a:	f7ff ff43 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    writeRegister(CTRL_REG5, 0x01);  // DRDY on INT1, P/L and taps on INT2
   d740e:	4620      	mov	r0, r4
   d7410:	2201      	movs	r2, #1
   d7412:	212e      	movs	r1, #46	; 0x2e
   d7414:	f7ff ff3e 	bl	d7294 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
    active();  // Set to active to start reading
   d7418:	4620      	mov	r0, r4
}
   d741a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    active();  // Set to active to start reading
   d741e:	f7ff bfb7 	b.w	d7390 <_ZN8MMA8452Q6activeEv>

000d7422 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>:
{
   d7422:	b538      	push	{r3, r4, r5, lr}
	scale = fsr; // Haul fsr into our class variable, scale
   d7424:	7541      	strb	r1, [r0, #21]
{
   d7426:	4615      	mov	r5, r2
   d7428:	4604      	mov	r4, r0
	Wire.begin(); // Initialize I2C
   d742a:	f004 f831 	bl	db490 <_Z19__fetch_global_Wirev>
   d742e:	f001 fcfb 	bl	d8e28 <_ZN7TwoWire5beginEv>
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
   d7432:	210d      	movs	r1, #13
   d7434:	4620      	mov	r0, r4
   d7436:	f7ff ff38 	bl	d72aa <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
   d743a:	282a      	cmp	r0, #42	; 0x2a
   d743c:	d112      	bne.n	d7464 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x42>
	standby();  // Must be in standby to change registers
   d743e:	4620      	mov	r0, r4
   d7440:	f7ff ff99 	bl	d7376 <_ZN8MMA8452Q7standbyEv>
	setScale(scale);  // Set up accelerometer scale
   d7444:	7d61      	ldrb	r1, [r4, #21]
   d7446:	4620      	mov	r0, r4
   d7448:	f7ff ff53 	bl	d72f2 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>
	setODR(odr);  // Set up output data rate
   d744c:	4629      	mov	r1, r5
   d744e:	4620      	mov	r0, r4
   d7450:	f7ff ff60 	bl	d7314 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>
	setupPL();  // Set up portrait/landscape detection
   d7454:	4620      	mov	r0, r4
   d7456:	f7ff ff7b 	bl	d7350 <_ZN8MMA8452Q7setupPLEv>
	active();  // Set to active to start reading
   d745a:	4620      	mov	r0, r4
   d745c:	f7ff ff98 	bl	d7390 <_ZN8MMA8452Q6activeEv>
   d7460:	2001      	movs	r0, #1
}
   d7462:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   d7464:	2000      	movs	r0, #0
   d7466:	e7fc      	b.n	d7462 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x40>

000d7468 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7468:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d746a:	4603      	mov	r3, r0
	switch (__op)
   d746c:	d102      	bne.n	d7474 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d746e:	6001      	str	r1, [r0, #0]
      }
   d7470:	2000      	movs	r0, #0
   d7472:	4770      	bx	lr
	  switch (__op)
   d7474:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7476:	bf04      	itt	eq
   d7478:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d747c:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7480:	e7f6      	b.n	d7470 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7482 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d7482:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d7484:	2301      	movs	r3, #1
   d7486:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d7488:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d748a:	4604      	mov	r4, r0
        if (th->func) {
   d748c:	b143      	cbz	r3, d74a0 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d748e:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7490:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d7492:	2301      	movs	r3, #1
   d7494:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d7496:	2000      	movs	r0, #0
    }
   d7498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d749c:	f000 bb52 	b.w	d7b44 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d74a0:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d74a2:	2800      	cmp	r0, #0
   d74a4:	d0f5      	beq.n	d7492 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d74a6:	6883      	ldr	r3, [r0, #8]
   d74a8:	b90b      	cbnz	r3, d74ae <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d74aa:	f004 f84c 	bl	db546 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d74ae:	68c3      	ldr	r3, [r0, #12]
   d74b0:	e7ee      	b.n	d7490 <_ZN6Thread3runEPv+0xe>

000d74b2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d74b2:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d74b4:	6842      	ldr	r2, [r0, #4]
   d74b6:	4603      	mov	r3, r0
   d74b8:	1054      	asrs	r4, r2, #1
   d74ba:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d74be:	07d2      	lsls	r2, r2, #31
   d74c0:	bf48      	it	mi
   d74c2:	590a      	ldrmi	r2, [r1, r4]
   d74c4:	681b      	ldr	r3, [r3, #0]
      }
   d74c6:	f85d 4b04 	ldr.w	r4, [sp], #4
   d74ca:	bf48      	it	mi
   d74cc:	58d3      	ldrmi	r3, [r2, r3]
   d74ce:	4718      	bx	r3

000d74d0 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d74d0:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d74d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d74d4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d74d8:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d74da:	3008      	adds	r0, #8
   d74dc:	f000 faf2 	bl	d7ac4 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d74e0:	2004      	movs	r0, #4
   d74e2:	f7fc fdd8 	bl	d4096 <_Znwj>
   d74e6:	4605      	mov	r5, r0
   d74e8:	b398      	cbz	r0, d7552 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d74ea:	491b      	ldr	r1, [pc, #108]	; (d7558 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d74ec:	2014      	movs	r0, #20
   d74ee:	f004 f826 	bl	db53e <_ZnwjRKSt9nothrow_t>
   d74f2:	b130      	cbz	r0, d7502 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d74f4:	2300      	movs	r3, #0
            exited(false) {
   d74f6:	e9c0 3300 	strd	r3, r3, [r0]
   d74fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d74fe:	7403      	strb	r3, [r0, #16]
   d7500:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7502:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7504:	b1a0      	cbz	r0, d7530 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7506:	4b15      	ldr	r3, [pc, #84]	; (d755c <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7508:	4915      	ldr	r1, [pc, #84]	; (d7560 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d750a:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d750e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7512:	e9cd 0300 	strd	r0, r3, [sp]
   d7516:	2202      	movs	r2, #2
   d7518:	4b12      	ldr	r3, [pc, #72]	; (d7564 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d751a:	3004      	adds	r0, #4
   d751c:	f000 fa9a 	bl	d7a54 <os_thread_create>
   d7520:	b930      	cbnz	r0, d7530 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7522:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d7524:	7c1b      	ldrb	r3, [r3, #16]
   d7526:	b9a3      	cbnz	r3, d7552 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d7528:	2001      	movs	r0, #1
   d752a:	f000 fb33 	bl	d7b94 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d752e:	e7f8      	b.n	d7522 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7530:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7532:	2300      	movs	r3, #0
   d7534:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d7536:	b164      	cbz	r4, d7552 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d7538:	6827      	ldr	r7, [r4, #0]
   d753a:	b137      	cbz	r7, d754a <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d753c:	4638      	mov	r0, r7
   d753e:	f7fc fef9 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d7542:	2110      	movs	r1, #16
   d7544:	4638      	mov	r0, r7
   d7546:	f003 fff8 	bl	db53a <_ZdlPvj>
   d754a:	2114      	movs	r1, #20
   d754c:	4620      	mov	r0, r4
   d754e:	f003 fff4 	bl	db53a <_ZdlPvj>
   d7552:	6075      	str	r5, [r6, #4]
}
   d7554:	b003      	add	sp, #12
   d7556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7558:	000dcea0 	.word	0x000dcea0
   d755c:	000d776f 	.word	0x000d776f
   d7560:	000dcab0 	.word	0x000dcab0
   d7564:	000d7483 	.word	0x000d7483

000d7568 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7568:	f247 5130 	movw	r1, #30000	; 0x7530
   d756c:	4a08      	ldr	r2, [pc, #32]	; (d7590 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d756e:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7570:	4908      	ldr	r1, [pc, #32]	; (d7594 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d7572:	6002      	str	r2, [r0, #0]
   d7574:	2200      	movs	r2, #0
   d7576:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d757a:	4907      	ldr	r1, [pc, #28]	; (d7598 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d757c:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d757e:	4907      	ldr	r1, [pc, #28]	; (d759c <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d7580:	6042      	str	r2, [r0, #4]
   d7582:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7586:	6181      	str	r1, [r0, #24]
   d7588:	8502      	strh	r2, [r0, #40]	; 0x28
   d758a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d758e:	4770      	bx	lr
   d7590:	000dcb74 	.word	0x000dcb74
   d7594:	000d78d9 	.word	0x000d78d9
   d7598:	000d74b3 	.word	0x000d74b3
   d759c:	000d7469 	.word	0x000d7469

000d75a0 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d75a0:	b510      	push	{r4, lr}
   d75a2:	4b04      	ldr	r3, [pc, #16]	; (d75b4 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d75a4:	4604      	mov	r4, r0
   d75a6:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d75aa:	f7fc fec3 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
}
   d75ae:	4620      	mov	r0, r4
   d75b0:	bd10      	pop	{r4, pc}
   d75b2:	bf00      	nop
   d75b4:	000dcb74 	.word	0x000dcb74

000d75b8 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d75b8:	b510      	push	{r4, lr}
   d75ba:	4b03      	ldr	r3, [pc, #12]	; (d75c8 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d75bc:	6003      	str	r3, [r0, #0]
   d75be:	4604      	mov	r4, r0
   d75c0:	f7ff ffee 	bl	d75a0 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d75c4:	4620      	mov	r0, r4
   d75c6:	bd10      	pop	{r4, pc}
   d75c8:	000dcb9c 	.word	0x000dcb9c

000d75cc <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d75cc:	b510      	push	{r4, lr}
   d75ce:	4604      	mov	r4, r0
}
   d75d0:	f7ff fff2 	bl	d75b8 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d75d4:	4620      	mov	r0, r4
   d75d6:	2138      	movs	r1, #56	; 0x38
   d75d8:	f003 ffaf 	bl	db53a <_ZdlPvj>
   d75dc:	4620      	mov	r0, r4
   d75de:	bd10      	pop	{r4, pc}

000d75e0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d75e0:	6880      	ldr	r0, [r0, #8]
   d75e2:	f000 ba77 	b.w	d7ad4 <os_mutex_lock>

000d75e6 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d75e6:	6880      	ldr	r0, [r0, #8]
   d75e8:	f000 ba7c 	b.w	d7ae4 <os_mutex_unlock>

000d75ec <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d75ec:	b510      	push	{r4, lr}
   d75ee:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d75f0:	6800      	ldr	r0, [r0, #0]
   d75f2:	f7ff fff8 	bl	d75e6 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d75f6:	4620      	mov	r0, r4
   d75f8:	bd10      	pop	{r4, pc}

000d75fa <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d75fa:	b513      	push	{r0, r1, r4, lr}
   d75fc:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d75fe:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7600:	f7ff ffee 	bl	d75e0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7604:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7606:	88dc      	ldrh	r4, [r3, #6]
   d7608:	b2a4      	uxth	r4, r4
   d760a:	b10c      	cbz	r4, d7610 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d760c:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d7610:	a801      	add	r0, sp, #4
   d7612:	f7ff ffeb 	bl	d75ec <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d7616:	4620      	mov	r0, r4
   d7618:	b002      	add	sp, #8
   d761a:	bd10      	pop	{r4, pc}

000d761c <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d761c:	b513      	push	{r0, r1, r4, lr}
   d761e:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7620:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7622:	f7ff ffdd 	bl	d75e0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d7626:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d762a:	b943      	cbnz	r3, d763e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d762c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d762e:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d7630:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d7632:	a801      	add	r0, sp, #4
   d7634:	f7ff ffda 	bl	d75ec <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d7638:	4620      	mov	r0, r4
   d763a:	b002      	add	sp, #8
   d763c:	bd10      	pop	{r4, pc}
	bool result = false;
   d763e:	2400      	movs	r4, #0
   d7640:	e7f7      	b.n	d7632 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d7642 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d7642:	b513      	push	{r0, r1, r4, lr}
   d7644:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7646:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7648:	f7ff ffca 	bl	d75e0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d764c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d764e:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d7650:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d7652:	f7ff ffcb 	bl	d75ec <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d7656:	4620      	mov	r0, r4
   d7658:	b002      	add	sp, #8
   d765a:	bd10      	pop	{r4, pc}

000d765c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7660:	4699      	mov	r9, r3
   d7662:	b086      	sub	sp, #24
	if (!haveSetup) {
   d7664:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7668:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d766c:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7670:	4604      	mov	r4, r0
   d7672:	460f      	mov	r7, r1
   d7674:	4616      	mov	r6, r2
	if (!haveSetup) {
   d7676:	b913      	cbnz	r3, d767e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7678:	6803      	ldr	r3, [r0, #0]
   d767a:	689b      	ldr	r3, [r3, #8]
   d767c:	4798      	blx	r3
		data = "";
   d767e:	4b31      	ldr	r3, [pc, #196]	; (d7744 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7680:	4638      	mov	r0, r7
		data = "";
   d7682:	2e00      	cmp	r6, #0
   d7684:	bf08      	it	eq
   d7686:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7688:	f004 fcdf 	bl	dc04a <strlen>
   d768c:	4605      	mov	r5, r0
   d768e:	4630      	mov	r0, r6
   d7690:	f004 fcdb 	bl	dc04a <strlen>
   d7694:	4428      	add	r0, r5
   d7696:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d769a:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d769c:	bf1c      	itt	ne
   d769e:	f025 0503 	bicne.w	r5, r5, #3
   d76a2:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d76a4:	4633      	mov	r3, r6
   d76a6:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d76aa:	e9cd 9a00 	strd	r9, sl, [sp]
   d76ae:	4926      	ldr	r1, [pc, #152]	; (d7748 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d76b0:	4826      	ldr	r0, [pc, #152]	; (d774c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d76b2:	463a      	mov	r2, r7
   d76b4:	f7fc fee7 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d76b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d76ba:	3b08      	subs	r3, #8
   d76bc:	42ab      	cmp	r3, r5
   d76be:	d212      	bcs.n	d76e6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d76c0:	2400      	movs	r4, #0
}
   d76c2:	4620      	mov	r0, r4
   d76c4:	b006      	add	sp, #24
   d76c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d76ca:	88cb      	ldrh	r3, [r1, #6]
   d76cc:	2b01      	cmp	r3, #1
   d76ce:	d036      	beq.n	d773e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d76d0:	a805      	add	r0, sp, #20
   d76d2:	f7ff ff8b 	bl	d75ec <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d76d6:	6823      	ldr	r3, [r4, #0]
   d76d8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d76dc:	699b      	ldr	r3, [r3, #24]
   d76de:	4620      	mov	r0, r4
   d76e0:	4798      	blx	r3
   d76e2:	2800      	cmp	r0, #0
   d76e4:	d0ec      	beq.n	d76c0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d76e6:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d76e8:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d76ea:	f7ff ff79 	bl	d75e0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d76ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d76f0:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d76f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d76f4:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d76f6:	1ad2      	subs	r2, r2, r3
   d76f8:	42aa      	cmp	r2, r5
   d76fa:	d3e6      	bcc.n	d76ca <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d76fc:	ea48 080a 	orr.w	r8, r8, sl
   d7700:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d7704:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d7708:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d770a:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d770e:	4639      	mov	r1, r7
   d7710:	4640      	mov	r0, r8
   d7712:	f004 fc74 	bl	dbffe <strcpy>
				cp += strlen(cp) + 1;
   d7716:	4640      	mov	r0, r8
   d7718:	f004 fc97 	bl	dc04a <strlen>
   d771c:	3001      	adds	r0, #1
				strcpy(cp, data);
   d771e:	4631      	mov	r1, r6
   d7720:	4440      	add	r0, r8
   d7722:	f004 fc6c 	bl	dbffe <strcpy>
				nextFree += size;
   d7726:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7728:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d772a:	441d      	add	r5, r3
   d772c:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d772e:	88d3      	ldrh	r3, [r2, #6]
   d7730:	3301      	adds	r3, #1
   d7732:	80d3      	strh	r3, [r2, #6]
				return true;
   d7734:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d7736:	a805      	add	r0, sp, #20
   d7738:	f7ff ff58 	bl	d75ec <_ZN11StMutexLockD1Ev>
   d773c:	e7c1      	b.n	d76c2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d773e:	2400      	movs	r4, #0
   d7740:	e7f9      	b.n	d7736 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d7742:	bf00      	nop
   d7744:	000dcd1d 	.word	0x000dcd1d
   d7748:	000dcac2 	.word	0x000dcac2
   d774c:	2003e500 	.word	0x2003e500

000d7750 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d7750:	b508      	push	{r3, lr}
   d7752:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7754:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7758:	69a3      	ldr	r3, [r4, #24]
   d775a:	b90b      	cbnz	r3, d7760 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d775c:	f003 fef3 	bl	db546 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7760:	69e3      	ldr	r3, [r4, #28]
   d7762:	4621      	mov	r1, r4
   d7764:	4628      	mov	r0, r5
   d7766:	4798      	blx	r3
		os_thread_yield();
   d7768:	f000 f97c 	bl	d7a64 <os_thread_yield>
	while(true) {
   d776c:	e7f4      	b.n	d7758 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d776e <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d776e:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d7770:	f7ff ffee 	bl	d7750 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7774 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7774:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7776:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d777a:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d777c:	4628      	mov	r0, r5
   d777e:	f004 fc64 	bl	dc04a <strlen>
   d7782:	3001      	adds	r0, #1
   d7784:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7786:	4628      	mov	r0, r5
   d7788:	f004 fc5f 	bl	dc04a <strlen>
	size_t offset = start - retainedBuffer;
   d778c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d778e:	3001      	adds	r0, #1
   d7790:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d7792:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7794:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7798:	bf1c      	itt	ne
   d779a:	f1c3 0304 	rsbne	r3, r3, #4
   d779e:	18c0      	addne	r0, r0, r3
}
   d77a0:	bd68      	pop	{r3, r5, r6, pc}

000d77a2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d77a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d77a4:	4604      	mov	r4, r0
   d77a6:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d77a8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d77aa:	f7ff ff19 	bl	d75e0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d77ae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d77b0:	88fb      	ldrh	r3, [r7, #6]
   d77b2:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d77b6:	b1e6      	cbz	r6, d77f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d77b8:	2b01      	cmp	r3, #1
   d77ba:	d922      	bls.n	d7802 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d77bc:	4629      	mov	r1, r5
   d77be:	4620      	mov	r0, r4
   d77c0:	f7ff ffd8 	bl	d7774 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d77c4:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d77c6:	4629      	mov	r1, r5
   d77c8:	4620      	mov	r0, r4
   d77ca:	f7ff ffd3 	bl	d7774 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d77ce:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d77d0:	443a      	add	r2, r7
	if (after > 0) {
   d77d2:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d77d4:	4601      	mov	r1, r0
	size_t len = next - start;
   d77d6:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d77da:	d002      	beq.n	d77e2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d77dc:	4628      	mov	r0, r5
   d77de:	f004 fba7 	bl	dbf30 <memmove>
	nextFree -= len;
   d77e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d77e4:	1b9b      	subs	r3, r3, r6
   d77e6:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d77e8:	88fb      	ldrh	r3, [r7, #6]
   d77ea:	3b01      	subs	r3, #1
   d77ec:	80fb      	strh	r3, [r7, #6]
	return true;
   d77ee:	2601      	movs	r6, #1
   d77f0:	e001      	b.n	d77f6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d77f2:	2b00      	cmp	r3, #0
   d77f4:	d1e7      	bne.n	d77c6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d77f6:	a801      	add	r0, sp, #4
   d77f8:	f7ff fef8 	bl	d75ec <_ZN11StMutexLockD1Ev>
}
   d77fc:	4630      	mov	r0, r6
   d77fe:	b003      	add	sp, #12
   d7800:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d7802:	2600      	movs	r6, #0
   d7804:	e7f7      	b.n	d77f6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d7808 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d780c:	460d      	mov	r5, r1
   d780e:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7810:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7812:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7814:	f7ff fea8 	bl	d7568 <_ZN21PublishQueueAsyncBaseC1Ev>
   d7818:	4b15      	ldr	r3, [pc, #84]	; (d7870 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d781a:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d781e:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7820:	4b14      	ldr	r3, [pc, #80]	; (d7874 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7822:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7824:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7826:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7828:	4698      	mov	r8, r3
   d782a:	d117      	bne.n	d785c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d782c:	88ab      	ldrh	r3, [r5, #4]
   d782e:	b29b      	uxth	r3, r3
   d7830:	42b3      	cmp	r3, r6
   d7832:	d113      	bne.n	d785c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7834:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7838:	6367      	str	r7, [r4, #52]	; 0x34
   d783a:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d783e:	88eb      	ldrh	r3, [r5, #6]
   d7840:	fa1f f289 	uxth.w	r2, r9
   d7844:	b29b      	uxth	r3, r3
   d7846:	429a      	cmp	r2, r3
   d7848:	d20e      	bcs.n	d7868 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d784a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d784c:	4620      	mov	r0, r4
   d784e:	f7ff ff91 	bl	d7774 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d7852:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d7854:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7856:	f109 0901 	add.w	r9, r9, #1
   d785a:	d9f0      	bls.n	d783e <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d785c:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d785e:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7862:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7864:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7866:	80eb      	strh	r3, [r5, #6]
}
   d7868:	4620      	mov	r0, r4
   d786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d786e:	bf00      	nop
   d7870:	000dcb9c 	.word	0x000dcb9c
   d7874:	d19cab61 	.word	0xd19cab61

000d7878 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7878:	b510      	push	{r4, lr}
   d787a:	e9d1 2300 	ldrd	r2, r3, [r1]
   d787e:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7880:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7882:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7884:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7886:	b90a      	cbnz	r2, d788c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7888:	07d9      	lsls	r1, r3, #31
   d788a:	d505      	bpl.n	d7898 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d788c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7890:	4b0f      	ldr	r3, [pc, #60]	; (d78d0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7892:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7894:	4b0f      	ldr	r3, [pc, #60]	; (d78d4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7896:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7898:	ab02      	add	r3, sp, #8
   d789a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d789e:	466a      	mov	r2, sp
   d78a0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d78a4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d78a8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d78ac:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78b0:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d78b2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d78b6:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78b8:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78ba:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d78bc:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d78be:	4618      	mov	r0, r3
   d78c0:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d78c2:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d78c4:	9105      	str	r1, [sp, #20]
   d78c6:	f7fc fd35 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
	}
   d78ca:	4620      	mov	r0, r4
   d78cc:	b006      	add	sp, #24
   d78ce:	bd10      	pop	{r4, pc}
   d78d0:	000d74b3 	.word	0x000d74b3
   d78d4:	000d7469 	.word	0x000d7469

000d78d8 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d78d8:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d78da:	4b05      	ldr	r3, [pc, #20]	; (d78f0 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d78dc:	9300      	str	r3, [sp, #0]
   d78de:	4669      	mov	r1, sp
   d78e0:	2300      	movs	r3, #0
   d78e2:	3010      	adds	r0, #16
   d78e4:	9301      	str	r3, [sp, #4]
   d78e6:	f7ff ffc7 	bl	d7878 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d78ea:	b003      	add	sp, #12
   d78ec:	f85d fb04 	ldr.w	pc, [sp], #4
   d78f0:	000d7921 	.word	0x000d7921

000d78f4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d78f4:	b513      	push	{r0, r1, r4, lr}
   d78f6:	4604      	mov	r4, r0
   d78f8:	f000 f95c 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d78fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d78fe:	1ac0      	subs	r0, r0, r3
   d7900:	68e3      	ldr	r3, [r4, #12]
   d7902:	4298      	cmp	r0, r3
   d7904:	d308      	bcc.n	d7918 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7906:	4b05      	ldr	r3, [pc, #20]	; (d791c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7908:	9300      	str	r3, [sp, #0]
   d790a:	4669      	mov	r1, sp
   d790c:	2300      	movs	r3, #0
   d790e:	f104 0010 	add.w	r0, r4, #16
   d7912:	9301      	str	r3, [sp, #4]
   d7914:	f7ff ffb0 	bl	d7878 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7918:	b002      	add	sp, #8
   d791a:	bd10      	pop	{r4, pc}
   d791c:	000d7921 	.word	0x000d7921

000d7920 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d7920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7924:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7928:	b086      	sub	sp, #24
   d792a:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d792c:	2b00      	cmp	r3, #0
   d792e:	d164      	bne.n	d79fa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7930:	f000 fb9c 	bl	d806c <spark_cloud_flag_connected>
   d7934:	2800      	cmp	r0, #0
   d7936:	d060      	beq.n	d79fa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7938:	f000 f93c 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
   d793c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d793e:	1ac0      	subs	r0, r0, r3
   d7940:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7944:	4298      	cmp	r0, r3
   d7946:	d958      	bls.n	d79fa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7948:	6823      	ldr	r3, [r4, #0]
   d794a:	4620      	mov	r0, r4
   d794c:	695b      	ldr	r3, [r3, #20]
   d794e:	4798      	blx	r3
		if (data) {
   d7950:	4605      	mov	r5, r0
   d7952:	2800      	cmp	r0, #0
   d7954:	d051      	beq.n	d79fa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7956:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d795a:	2301      	movs	r3, #1
   d795c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d7960:	4638      	mov	r0, r7
   d7962:	f004 fb72 	bl	dc04a <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7966:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d796a:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d796e:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7970:	682b      	ldr	r3, [r5, #0]
   d7972:	492b      	ldr	r1, [pc, #172]	; (d7a20 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7974:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7976:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7978:	4633      	mov	r3, r6
   d797a:	482a      	ldr	r0, [pc, #168]	; (d7a24 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d797c:	463a      	mov	r2, r7
   d797e:	f7fc fd82 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7982:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7984:	f88d 8000 	strb.w	r8, [sp]
   d7988:	4632      	mov	r2, r6
   d798a:	4639      	mov	r1, r7
   d798c:	a802      	add	r0, sp, #8
   d798e:	f000 ff8f 	bl	d88b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	return __atomic_load_n(&_M_i, int(__m));
   d7992:	9d02      	ldr	r5, [sp, #8]
   d7994:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7996:	b91b      	cbnz	r3, d79a0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7998:	2001      	movs	r0, #1
   d799a:	f000 fc7f 	bl	d829c <delay>
			while(!request.isDone()) {
   d799e:	e7f8      	b.n	d7992 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d79a0:	2000      	movs	r0, #0
   d79a2:	f000 faf1 	bl	d7f88 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d79a6:	b120      	cbz	r0, d79b2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d79a8:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d79aa:	b913      	cbnz	r3, d79b2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d79ac:	f000 fb4e 	bl	d804c <spark_process>
    }
   d79b0:	e7fa      	b.n	d79a8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d79b2:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d79b4:	2b01      	cmp	r3, #1
   d79b6:	d123      	bne.n	d7a00 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d79b8:	491b      	ldr	r1, [pc, #108]	; (d7a28 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d79ba:	481a      	ldr	r0, [pc, #104]	; (d7a24 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d79bc:	f7fc fd63 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d79c0:	6823      	ldr	r3, [r4, #0]
   d79c2:	2100      	movs	r1, #0
   d79c4:	699b      	ldr	r3, [r3, #24]
   d79c6:	4620      	mov	r0, r4
   d79c8:	4798      	blx	r3
			isSending = false;
   d79ca:	2300      	movs	r3, #0
   d79cc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d79d0:	f000 f8f0 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d79d4:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d79d6:	9c03      	ldr	r4, [sp, #12]
   d79d8:	b17c      	cbz	r4, d79fa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d79da:	6863      	ldr	r3, [r4, #4]
   d79dc:	3b01      	subs	r3, #1
   d79de:	6063      	str	r3, [r4, #4]
   d79e0:	b95b      	cbnz	r3, d79fa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d79e2:	6823      	ldr	r3, [r4, #0]
   d79e4:	4620      	mov	r0, r4
   d79e6:	689b      	ldr	r3, [r3, #8]
   d79e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d79ea:	68a3      	ldr	r3, [r4, #8]
   d79ec:	3b01      	subs	r3, #1
   d79ee:	60a3      	str	r3, [r4, #8]
   d79f0:	b91b      	cbnz	r3, d79fa <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d79f2:	6823      	ldr	r3, [r4, #0]
   d79f4:	4620      	mov	r0, r4
   d79f6:	68db      	ldr	r3, [r3, #12]
   d79f8:	4798      	blx	r3
}
   d79fa:	b006      	add	sp, #24
   d79fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d7a00:	68e2      	ldr	r2, [r4, #12]
   d7a02:	490a      	ldr	r1, [pc, #40]	; (d7a2c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7a04:	4807      	ldr	r0, [pc, #28]	; (d7a24 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7a06:	f7fc fd3e 	bl	d4486 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7a0a:	4b09      	ldr	r3, [pc, #36]	; (d7a30 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7a0c:	9304      	str	r3, [sp, #16]
   d7a0e:	a904      	add	r1, sp, #16
   d7a10:	2300      	movs	r3, #0
   d7a12:	f104 0010 	add.w	r0, r4, #16
   d7a16:	9305      	str	r3, [sp, #20]
   d7a18:	f7ff ff2e 	bl	d7878 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7a1c:	e7d5      	b.n	d79ca <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d7a1e:	bf00      	nop
   d7a20:	000dcb03 	.word	0x000dcb03
   d7a24:	2003e500 	.word	0x2003e500
   d7a28:	000dcb24 	.word	0x000dcb24
   d7a2c:	000dcb3b 	.word	0x000dcb3b
   d7a30:	000d78f5 	.word	0x000d78f5

000d7a34 <_GLOBAL__sub_I_pubqLogger>:
   d7a34:	4b01      	ldr	r3, [pc, #4]	; (d7a3c <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7a36:	4a02      	ldr	r2, [pc, #8]	; (d7a40 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7a38:	601a      	str	r2, [r3, #0]
}
   d7a3a:	4770      	bx	lr
   d7a3c:	2003e500 	.word	0x2003e500
   d7a40:	000dcb62 	.word	0x000dcb62

000d7a44 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7a44:	b508      	push	{r3, lr}
   d7a46:	4b02      	ldr	r3, [pc, #8]	; (d7a50 <cellular_signal+0xc>)
   d7a48:	681b      	ldr	r3, [r3, #0]
   d7a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7a4c:	9301      	str	r3, [sp, #4]
   d7a4e:	bd08      	pop	{r3, pc}
   d7a50:	00030274 	.word	0x00030274

000d7a54 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7a54:	b508      	push	{r3, lr}
   d7a56:	4b02      	ldr	r3, [pc, #8]	; (d7a60 <os_thread_create+0xc>)
   d7a58:	681b      	ldr	r3, [r3, #0]
   d7a5a:	685b      	ldr	r3, [r3, #4]
   d7a5c:	9301      	str	r3, [sp, #4]
   d7a5e:	bd08      	pop	{r3, pc}
   d7a60:	00030248 	.word	0x00030248

000d7a64 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7a64:	b508      	push	{r3, lr}
   d7a66:	4b02      	ldr	r3, [pc, #8]	; (d7a70 <os_thread_yield+0xc>)
   d7a68:	681b      	ldr	r3, [r3, #0]
   d7a6a:	68db      	ldr	r3, [r3, #12]
   d7a6c:	9301      	str	r3, [sp, #4]
   d7a6e:	bd08      	pop	{r3, pc}
   d7a70:	00030248 	.word	0x00030248

000d7a74 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7a74:	b508      	push	{r3, lr}
   d7a76:	4b02      	ldr	r3, [pc, #8]	; (d7a80 <os_thread_scheduling+0xc>)
   d7a78:	681b      	ldr	r3, [r3, #0]
   d7a7a:	69db      	ldr	r3, [r3, #28]
   d7a7c:	9301      	str	r3, [sp, #4]
   d7a7e:	bd08      	pop	{r3, pc}
   d7a80:	00030248 	.word	0x00030248

000d7a84 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7a84:	b508      	push	{r3, lr}
   d7a86:	4b02      	ldr	r3, [pc, #8]	; (d7a90 <os_timer_create+0xc>)
   d7a88:	681b      	ldr	r3, [r3, #0]
   d7a8a:	6a1b      	ldr	r3, [r3, #32]
   d7a8c:	9301      	str	r3, [sp, #4]
   d7a8e:	bd08      	pop	{r3, pc}
   d7a90:	00030248 	.word	0x00030248

000d7a94 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7a94:	b508      	push	{r3, lr}
   d7a96:	4b02      	ldr	r3, [pc, #8]	; (d7aa0 <os_timer_destroy+0xc>)
   d7a98:	681b      	ldr	r3, [r3, #0]
   d7a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7a9c:	9301      	str	r3, [sp, #4]
   d7a9e:	bd08      	pop	{r3, pc}
   d7aa0:	00030248 	.word	0x00030248

000d7aa4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7aa4:	b508      	push	{r3, lr}
   d7aa6:	4b02      	ldr	r3, [pc, #8]	; (d7ab0 <os_timer_get_id+0xc>)
   d7aa8:	681b      	ldr	r3, [r3, #0]
   d7aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7aac:	9301      	str	r3, [sp, #4]
   d7aae:	bd08      	pop	{r3, pc}
   d7ab0:	00030248 	.word	0x00030248

000d7ab4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7ab4:	b508      	push	{r3, lr}
   d7ab6:	4b02      	ldr	r3, [pc, #8]	; (d7ac0 <os_timer_change+0xc>)
   d7ab8:	681b      	ldr	r3, [r3, #0]
   d7aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7abc:	9301      	str	r3, [sp, #4]
   d7abe:	bd08      	pop	{r3, pc}
   d7ac0:	00030248 	.word	0x00030248

000d7ac4 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7ac4:	b508      	push	{r3, lr}
   d7ac6:	4b02      	ldr	r3, [pc, #8]	; (d7ad0 <os_mutex_create+0xc>)
   d7ac8:	681b      	ldr	r3, [r3, #0]
   d7aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7acc:	9301      	str	r3, [sp, #4]
   d7ace:	bd08      	pop	{r3, pc}
   d7ad0:	00030248 	.word	0x00030248

000d7ad4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7ad4:	b508      	push	{r3, lr}
   d7ad6:	4b02      	ldr	r3, [pc, #8]	; (d7ae0 <os_mutex_lock+0xc>)
   d7ad8:	681b      	ldr	r3, [r3, #0]
   d7ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7adc:	9301      	str	r3, [sp, #4]
   d7ade:	bd08      	pop	{r3, pc}
   d7ae0:	00030248 	.word	0x00030248

000d7ae4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7ae4:	b508      	push	{r3, lr}
   d7ae6:	4b02      	ldr	r3, [pc, #8]	; (d7af0 <os_mutex_unlock+0xc>)
   d7ae8:	681b      	ldr	r3, [r3, #0]
   d7aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7aec:	9301      	str	r3, [sp, #4]
   d7aee:	bd08      	pop	{r3, pc}
   d7af0:	00030248 	.word	0x00030248

000d7af4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7af4:	b508      	push	{r3, lr}
   d7af6:	4b02      	ldr	r3, [pc, #8]	; (d7b00 <os_mutex_recursive_create+0xc>)
   d7af8:	681b      	ldr	r3, [r3, #0]
   d7afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7afc:	9301      	str	r3, [sp, #4]
   d7afe:	bd08      	pop	{r3, pc}
   d7b00:	00030248 	.word	0x00030248

000d7b04 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7b04:	b508      	push	{r3, lr}
   d7b06:	4b02      	ldr	r3, [pc, #8]	; (d7b10 <os_mutex_recursive_destroy+0xc>)
   d7b08:	681b      	ldr	r3, [r3, #0]
   d7b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7b0c:	9301      	str	r3, [sp, #4]
   d7b0e:	bd08      	pop	{r3, pc}
   d7b10:	00030248 	.word	0x00030248

000d7b14 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7b14:	b508      	push	{r3, lr}
   d7b16:	4b02      	ldr	r3, [pc, #8]	; (d7b20 <os_mutex_recursive_lock+0xc>)
   d7b18:	681b      	ldr	r3, [r3, #0]
   d7b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7b1c:	9301      	str	r3, [sp, #4]
   d7b1e:	bd08      	pop	{r3, pc}
   d7b20:	00030248 	.word	0x00030248

000d7b24 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7b24:	b508      	push	{r3, lr}
   d7b26:	4b02      	ldr	r3, [pc, #8]	; (d7b30 <os_mutex_recursive_unlock+0xc>)
   d7b28:	681b      	ldr	r3, [r3, #0]
   d7b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7b2c:	9301      	str	r3, [sp, #4]
   d7b2e:	bd08      	pop	{r3, pc}
   d7b30:	00030248 	.word	0x00030248

000d7b34 <os_timer_is_active>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d7b34:	b508      	push	{r3, lr}
   d7b36:	4b02      	ldr	r3, [pc, #8]	; (d7b40 <os_timer_is_active+0xc>)
   d7b38:	681b      	ldr	r3, [r3, #0]
   d7b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7b3c:	9301      	str	r3, [sp, #4]
   d7b3e:	bd08      	pop	{r3, pc}
   d7b40:	00030248 	.word	0x00030248

000d7b44 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7b44:	b508      	push	{r3, lr}
   d7b46:	4b02      	ldr	r3, [pc, #8]	; (d7b50 <os_thread_exit+0xc>)
   d7b48:	681b      	ldr	r3, [r3, #0]
   d7b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7b4c:	9301      	str	r3, [sp, #4]
   d7b4e:	bd08      	pop	{r3, pc}
   d7b50:	00030248 	.word	0x00030248

000d7b54 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7b54:	b508      	push	{r3, lr}
   d7b56:	4b02      	ldr	r3, [pc, #8]	; (d7b60 <os_timer_set_id+0xc>)
   d7b58:	681b      	ldr	r3, [r3, #0]
   d7b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7b5c:	9301      	str	r3, [sp, #4]
   d7b5e:	bd08      	pop	{r3, pc}
   d7b60:	00030248 	.word	0x00030248

000d7b64 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7b64:	b508      	push	{r3, lr}
   d7b66:	4b02      	ldr	r3, [pc, #8]	; (d7b70 <HAL_Feature_Set+0xc>)
   d7b68:	681b      	ldr	r3, [r3, #0]
   d7b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7b6c:	9301      	str	r3, [sp, #4]
   d7b6e:	bd08      	pop	{r3, pc}
   d7b70:	00030234 	.word	0x00030234

000d7b74 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7b74:	b508      	push	{r3, lr}
   d7b76:	4b02      	ldr	r3, [pc, #8]	; (d7b80 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7b78:	681b      	ldr	r3, [r3, #0]
   d7b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7b7c:	9301      	str	r3, [sp, #4]
   d7b7e:	bd08      	pop	{r3, pc}
   d7b80:	00030234 	.word	0x00030234

000d7b84 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7b84:	b508      	push	{r3, lr}
   d7b86:	4b02      	ldr	r3, [pc, #8]	; (d7b90 <HAL_RNG_GetRandomNumber+0xc>)
   d7b88:	681b      	ldr	r3, [r3, #0]
   d7b8a:	685b      	ldr	r3, [r3, #4]
   d7b8c:	9301      	str	r3, [sp, #4]
   d7b8e:	bd08      	pop	{r3, pc}
   d7b90:	00030218 	.word	0x00030218

000d7b94 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7b94:	b508      	push	{r3, lr}
   d7b96:	4b02      	ldr	r3, [pc, #8]	; (d7ba0 <HAL_Delay_Milliseconds+0xc>)
   d7b98:	681b      	ldr	r3, [r3, #0]
   d7b9a:	689b      	ldr	r3, [r3, #8]
   d7b9c:	9301      	str	r3, [sp, #4]
   d7b9e:	bd08      	pop	{r3, pc}
   d7ba0:	00030218 	.word	0x00030218

000d7ba4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7ba4:	b508      	push	{r3, lr}
   d7ba6:	4b02      	ldr	r3, [pc, #8]	; (d7bb0 <HAL_Delay_Microseconds+0xc>)
   d7ba8:	681b      	ldr	r3, [r3, #0]
   d7baa:	68db      	ldr	r3, [r3, #12]
   d7bac:	9301      	str	r3, [sp, #4]
   d7bae:	bd08      	pop	{r3, pc}
   d7bb0:	00030218 	.word	0x00030218

000d7bb4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7bb4:	b508      	push	{r3, lr}
   d7bb6:	4b02      	ldr	r3, [pc, #8]	; (d7bc0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7bb8:	681b      	ldr	r3, [r3, #0]
   d7bba:	695b      	ldr	r3, [r3, #20]
   d7bbc:	9301      	str	r3, [sp, #4]
   d7bbe:	bd08      	pop	{r3, pc}
   d7bc0:	00030218 	.word	0x00030218

000d7bc4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7bc4:	b508      	push	{r3, lr}
   d7bc6:	4b02      	ldr	r3, [pc, #8]	; (d7bd0 <hal_rtc_time_is_valid+0xc>)
   d7bc8:	681b      	ldr	r3, [r3, #0]
   d7bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7bcc:	9301      	str	r3, [sp, #4]
   d7bce:	bd08      	pop	{r3, pc}
   d7bd0:	00030218 	.word	0x00030218

000d7bd4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7bd4:	b508      	push	{r3, lr}
   d7bd6:	4b02      	ldr	r3, [pc, #8]	; (d7be0 <hal_timer_millis+0xc>)
   d7bd8:	681b      	ldr	r3, [r3, #0]
   d7bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7bdc:	9301      	str	r3, [sp, #4]
   d7bde:	bd08      	pop	{r3, pc}
   d7be0:	00030218 	.word	0x00030218

000d7be4 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7be4:	b508      	push	{r3, lr}
   d7be6:	4b02      	ldr	r3, [pc, #8]	; (d7bf0 <hal_rtc_get_time+0xc>)
   d7be8:	681b      	ldr	r3, [r3, #0]
   d7bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7bec:	9301      	str	r3, [sp, #4]
   d7bee:	bd08      	pop	{r3, pc}
   d7bf0:	00030218 	.word	0x00030218

000d7bf4 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7bf4:	b508      	push	{r3, lr}
   d7bf6:	4b02      	ldr	r3, [pc, #8]	; (d7c00 <hal_rtc_set_time+0xc>)
   d7bf8:	681b      	ldr	r3, [r3, #0]
   d7bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7bfc:	9301      	str	r3, [sp, #4]
   d7bfe:	bd08      	pop	{r3, pc}
   d7c00:	00030218 	.word	0x00030218

000d7c04 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7c04:	b508      	push	{r3, lr}
   d7c06:	4b02      	ldr	r3, [pc, #8]	; (d7c10 <HAL_Pin_Map+0xc>)
   d7c08:	681b      	ldr	r3, [r3, #0]
   d7c0a:	681b      	ldr	r3, [r3, #0]
   d7c0c:	9301      	str	r3, [sp, #4]
   d7c0e:	bd08      	pop	{r3, pc}
   d7c10:	0003022c 	.word	0x0003022c

000d7c14 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7c14:	b508      	push	{r3, lr}
   d7c16:	4b02      	ldr	r3, [pc, #8]	; (d7c20 <HAL_Validate_Pin_Function+0xc>)
   d7c18:	681b      	ldr	r3, [r3, #0]
   d7c1a:	685b      	ldr	r3, [r3, #4]
   d7c1c:	9301      	str	r3, [sp, #4]
   d7c1e:	bd08      	pop	{r3, pc}
   d7c20:	0003022c 	.word	0x0003022c

000d7c24 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7c24:	b508      	push	{r3, lr}
   d7c26:	4b02      	ldr	r3, [pc, #8]	; (d7c30 <HAL_Pin_Mode+0xc>)
   d7c28:	681b      	ldr	r3, [r3, #0]
   d7c2a:	689b      	ldr	r3, [r3, #8]
   d7c2c:	9301      	str	r3, [sp, #4]
   d7c2e:	bd08      	pop	{r3, pc}
   d7c30:	0003022c 	.word	0x0003022c

000d7c34 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7c34:	b508      	push	{r3, lr}
   d7c36:	4b02      	ldr	r3, [pc, #8]	; (d7c40 <HAL_Get_Pin_Mode+0xc>)
   d7c38:	681b      	ldr	r3, [r3, #0]
   d7c3a:	68db      	ldr	r3, [r3, #12]
   d7c3c:	9301      	str	r3, [sp, #4]
   d7c3e:	bd08      	pop	{r3, pc}
   d7c40:	0003022c 	.word	0x0003022c

000d7c44 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7c44:	b508      	push	{r3, lr}
   d7c46:	4b02      	ldr	r3, [pc, #8]	; (d7c50 <HAL_GPIO_Write+0xc>)
   d7c48:	681b      	ldr	r3, [r3, #0]
   d7c4a:	691b      	ldr	r3, [r3, #16]
   d7c4c:	9301      	str	r3, [sp, #4]
   d7c4e:	bd08      	pop	{r3, pc}
   d7c50:	0003022c 	.word	0x0003022c

000d7c54 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7c54:	b508      	push	{r3, lr}
   d7c56:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <HAL_GPIO_Read+0xc>)
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	695b      	ldr	r3, [r3, #20]
   d7c5c:	9301      	str	r3, [sp, #4]
   d7c5e:	bd08      	pop	{r3, pc}
   d7c60:	0003022c 	.word	0x0003022c

000d7c64 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7c64:	b508      	push	{r3, lr}
   d7c66:	4b02      	ldr	r3, [pc, #8]	; (d7c70 <HAL_Interrupts_Attach+0xc>)
   d7c68:	681b      	ldr	r3, [r3, #0]
   d7c6a:	699b      	ldr	r3, [r3, #24]
   d7c6c:	9301      	str	r3, [sp, #4]
   d7c6e:	bd08      	pop	{r3, pc}
   d7c70:	0003022c 	.word	0x0003022c

000d7c74 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7c74:	b508      	push	{r3, lr}
   d7c76:	4b02      	ldr	r3, [pc, #8]	; (d7c80 <HAL_Interrupts_Detach+0xc>)
   d7c78:	681b      	ldr	r3, [r3, #0]
   d7c7a:	69db      	ldr	r3, [r3, #28]
   d7c7c:	9301      	str	r3, [sp, #4]
   d7c7e:	bd08      	pop	{r3, pc}
   d7c80:	0003022c 	.word	0x0003022c

000d7c84 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7c84:	b508      	push	{r3, lr}
   d7c86:	4b02      	ldr	r3, [pc, #8]	; (d7c90 <hal_adc_read+0xc>)
   d7c88:	681b      	ldr	r3, [r3, #0]
   d7c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c8c:	9301      	str	r3, [sp, #4]
   d7c8e:	bd08      	pop	{r3, pc}
   d7c90:	0003022c 	.word	0x0003022c

000d7c94 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7c94:	b508      	push	{r3, lr}
   d7c96:	4b02      	ldr	r3, [pc, #8]	; (d7ca0 <hal_i2c_begin+0xc>)
   d7c98:	681b      	ldr	r3, [r3, #0]
   d7c9a:	68db      	ldr	r3, [r3, #12]
   d7c9c:	9301      	str	r3, [sp, #4]
   d7c9e:	bd08      	pop	{r3, pc}
   d7ca0:	00030228 	.word	0x00030228

000d7ca4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7ca4:	b508      	push	{r3, lr}
   d7ca6:	4b02      	ldr	r3, [pc, #8]	; (d7cb0 <hal_i2c_begin_transmission+0xc>)
   d7ca8:	681b      	ldr	r3, [r3, #0]
   d7caa:	699b      	ldr	r3, [r3, #24]
   d7cac:	9301      	str	r3, [sp, #4]
   d7cae:	bd08      	pop	{r3, pc}
   d7cb0:	00030228 	.word	0x00030228

000d7cb4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7cb4:	b508      	push	{r3, lr}
   d7cb6:	4b02      	ldr	r3, [pc, #8]	; (d7cc0 <hal_i2c_end_transmission+0xc>)
   d7cb8:	681b      	ldr	r3, [r3, #0]
   d7cba:	69db      	ldr	r3, [r3, #28]
   d7cbc:	9301      	str	r3, [sp, #4]
   d7cbe:	bd08      	pop	{r3, pc}
   d7cc0:	00030228 	.word	0x00030228

000d7cc4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7cc4:	b508      	push	{r3, lr}
   d7cc6:	4b02      	ldr	r3, [pc, #8]	; (d7cd0 <hal_i2c_write+0xc>)
   d7cc8:	681b      	ldr	r3, [r3, #0]
   d7cca:	6a1b      	ldr	r3, [r3, #32]
   d7ccc:	9301      	str	r3, [sp, #4]
   d7cce:	bd08      	pop	{r3, pc}
   d7cd0:	00030228 	.word	0x00030228

000d7cd4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7cd4:	b508      	push	{r3, lr}
   d7cd6:	4b02      	ldr	r3, [pc, #8]	; (d7ce0 <hal_i2c_available+0xc>)
   d7cd8:	681b      	ldr	r3, [r3, #0]
   d7cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7cdc:	9301      	str	r3, [sp, #4]
   d7cde:	bd08      	pop	{r3, pc}
   d7ce0:	00030228 	.word	0x00030228

000d7ce4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7ce4:	b508      	push	{r3, lr}
   d7ce6:	4b02      	ldr	r3, [pc, #8]	; (d7cf0 <hal_i2c_read+0xc>)
   d7ce8:	681b      	ldr	r3, [r3, #0]
   d7cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7cec:	9301      	str	r3, [sp, #4]
   d7cee:	bd08      	pop	{r3, pc}
   d7cf0:	00030228 	.word	0x00030228

000d7cf4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7cf4:	b508      	push	{r3, lr}
   d7cf6:	4b02      	ldr	r3, [pc, #8]	; (d7d00 <hal_i2c_peek+0xc>)
   d7cf8:	681b      	ldr	r3, [r3, #0]
   d7cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7cfc:	9301      	str	r3, [sp, #4]
   d7cfe:	bd08      	pop	{r3, pc}
   d7d00:	00030228 	.word	0x00030228

000d7d04 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7d04:	b508      	push	{r3, lr}
   d7d06:	4b02      	ldr	r3, [pc, #8]	; (d7d10 <hal_i2c_flush+0xc>)
   d7d08:	681b      	ldr	r3, [r3, #0]
   d7d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7d0c:	9301      	str	r3, [sp, #4]
   d7d0e:	bd08      	pop	{r3, pc}
   d7d10:	00030228 	.word	0x00030228

000d7d14 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7d14:	b508      	push	{r3, lr}
   d7d16:	4b02      	ldr	r3, [pc, #8]	; (d7d20 <hal_i2c_is_enabled+0xc>)
   d7d18:	681b      	ldr	r3, [r3, #0]
   d7d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7d1c:	9301      	str	r3, [sp, #4]
   d7d1e:	bd08      	pop	{r3, pc}
   d7d20:	00030228 	.word	0x00030228

000d7d24 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7d24:	b508      	push	{r3, lr}
   d7d26:	4b02      	ldr	r3, [pc, #8]	; (d7d30 <hal_i2c_init+0xc>)
   d7d28:	681b      	ldr	r3, [r3, #0]
   d7d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7d2c:	9301      	str	r3, [sp, #4]
   d7d2e:	bd08      	pop	{r3, pc}
   d7d30:	00030228 	.word	0x00030228

000d7d34 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7d34:	b508      	push	{r3, lr}
   d7d36:	4b02      	ldr	r3, [pc, #8]	; (d7d40 <hal_i2c_lock+0xc>)
   d7d38:	681b      	ldr	r3, [r3, #0]
   d7d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7d3c:	9301      	str	r3, [sp, #4]
   d7d3e:	bd08      	pop	{r3, pc}
   d7d40:	00030228 	.word	0x00030228

000d7d44 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7d44:	b508      	push	{r3, lr}
   d7d46:	4b02      	ldr	r3, [pc, #8]	; (d7d50 <hal_i2c_unlock+0xc>)
   d7d48:	681b      	ldr	r3, [r3, #0]
   d7d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7d4c:	9301      	str	r3, [sp, #4]
   d7d4e:	bd08      	pop	{r3, pc}
   d7d50:	00030228 	.word	0x00030228

000d7d54 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7d54:	b508      	push	{r3, lr}
   d7d56:	4b02      	ldr	r3, [pc, #8]	; (d7d60 <hal_i2c_request_ex+0xc>)
   d7d58:	681b      	ldr	r3, [r3, #0]
   d7d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7d5c:	9301      	str	r3, [sp, #4]
   d7d5e:	bd08      	pop	{r3, pc}
   d7d60:	00030228 	.word	0x00030228

000d7d64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7d64:	b508      	push	{r3, lr}
   d7d66:	4b02      	ldr	r3, [pc, #8]	; (d7d70 <inet_inet_ntop+0xc>)
   d7d68:	681b      	ldr	r3, [r3, #0]
   d7d6a:	695b      	ldr	r3, [r3, #20]
   d7d6c:	9301      	str	r3, [sp, #4]
   d7d6e:	bd08      	pop	{r3, pc}
   d7d70:	00030264 	.word	0x00030264

000d7d74 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7d74:	b508      	push	{r3, lr}
   d7d76:	4b02      	ldr	r3, [pc, #8]	; (d7d80 <netdb_freeaddrinfo+0xc>)
   d7d78:	681b      	ldr	r3, [r3, #0]
   d7d7a:	689b      	ldr	r3, [r3, #8]
   d7d7c:	9301      	str	r3, [sp, #4]
   d7d7e:	bd08      	pop	{r3, pc}
   d7d80:	00030268 	.word	0x00030268

000d7d84 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7d84:	b508      	push	{r3, lr}
   d7d86:	4b02      	ldr	r3, [pc, #8]	; (d7d90 <netdb_getaddrinfo+0xc>)
   d7d88:	681b      	ldr	r3, [r3, #0]
   d7d8a:	68db      	ldr	r3, [r3, #12]
   d7d8c:	9301      	str	r3, [sp, #4]
   d7d8e:	bd08      	pop	{r3, pc}
   d7d90:	00030268 	.word	0x00030268

000d7d94 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7d94:	b508      	push	{r3, lr}
   d7d96:	4b02      	ldr	r3, [pc, #8]	; (d7da0 <hal_spi_init+0xc>)
   d7d98:	681b      	ldr	r3, [r3, #0]
   d7d9a:	69db      	ldr	r3, [r3, #28]
   d7d9c:	9301      	str	r3, [sp, #4]
   d7d9e:	bd08      	pop	{r3, pc}
   d7da0:	00030230 	.word	0x00030230

000d7da4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7da4:	b508      	push	{r3, lr}
   d7da6:	4b02      	ldr	r3, [pc, #8]	; (d7db0 <hal_spi_is_enabled+0xc>)
   d7da8:	681b      	ldr	r3, [r3, #0]
   d7daa:	6a1b      	ldr	r3, [r3, #32]
   d7dac:	9301      	str	r3, [sp, #4]
   d7dae:	bd08      	pop	{r3, pc}
   d7db0:	00030230 	.word	0x00030230

000d7db4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7db4:	b508      	push	{r3, lr}
   d7db6:	4b02      	ldr	r3, [pc, #8]	; (d7dc0 <hal_usart_init+0xc>)
   d7db8:	681b      	ldr	r3, [r3, #0]
   d7dba:	681b      	ldr	r3, [r3, #0]
   d7dbc:	9301      	str	r3, [sp, #4]
   d7dbe:	bd08      	pop	{r3, pc}
   d7dc0:	0003023c 	.word	0x0003023c

000d7dc4 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d7dc4:	b508      	push	{r3, lr}
   d7dc6:	4b02      	ldr	r3, [pc, #8]	; (d7dd0 <hal_usart_end+0xc>)
   d7dc8:	681b      	ldr	r3, [r3, #0]
   d7dca:	689b      	ldr	r3, [r3, #8]
   d7dcc:	9301      	str	r3, [sp, #4]
   d7dce:	bd08      	pop	{r3, pc}
   d7dd0:	0003023c 	.word	0x0003023c

000d7dd4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7dd4:	b508      	push	{r3, lr}
   d7dd6:	4b02      	ldr	r3, [pc, #8]	; (d7de0 <hal_usart_write+0xc>)
   d7dd8:	681b      	ldr	r3, [r3, #0]
   d7dda:	68db      	ldr	r3, [r3, #12]
   d7ddc:	9301      	str	r3, [sp, #4]
   d7dde:	bd08      	pop	{r3, pc}
   d7de0:	0003023c 	.word	0x0003023c

000d7de4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7de4:	b508      	push	{r3, lr}
   d7de6:	4b02      	ldr	r3, [pc, #8]	; (d7df0 <hal_usart_available+0xc>)
   d7de8:	681b      	ldr	r3, [r3, #0]
   d7dea:	691b      	ldr	r3, [r3, #16]
   d7dec:	9301      	str	r3, [sp, #4]
   d7dee:	bd08      	pop	{r3, pc}
   d7df0:	0003023c 	.word	0x0003023c

000d7df4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7df4:	b508      	push	{r3, lr}
   d7df6:	4b02      	ldr	r3, [pc, #8]	; (d7e00 <hal_usart_read+0xc>)
   d7df8:	681b      	ldr	r3, [r3, #0]
   d7dfa:	695b      	ldr	r3, [r3, #20]
   d7dfc:	9301      	str	r3, [sp, #4]
   d7dfe:	bd08      	pop	{r3, pc}
   d7e00:	0003023c 	.word	0x0003023c

000d7e04 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7e04:	b508      	push	{r3, lr}
   d7e06:	4b02      	ldr	r3, [pc, #8]	; (d7e10 <hal_usart_peek+0xc>)
   d7e08:	681b      	ldr	r3, [r3, #0]
   d7e0a:	699b      	ldr	r3, [r3, #24]
   d7e0c:	9301      	str	r3, [sp, #4]
   d7e0e:	bd08      	pop	{r3, pc}
   d7e10:	0003023c 	.word	0x0003023c

000d7e14 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7e14:	b508      	push	{r3, lr}
   d7e16:	4b02      	ldr	r3, [pc, #8]	; (d7e20 <hal_usart_flush+0xc>)
   d7e18:	681b      	ldr	r3, [r3, #0]
   d7e1a:	69db      	ldr	r3, [r3, #28]
   d7e1c:	9301      	str	r3, [sp, #4]
   d7e1e:	bd08      	pop	{r3, pc}
   d7e20:	0003023c 	.word	0x0003023c

000d7e24 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7e24:	b508      	push	{r3, lr}
   d7e26:	4b02      	ldr	r3, [pc, #8]	; (d7e30 <hal_usart_is_enabled+0xc>)
   d7e28:	681b      	ldr	r3, [r3, #0]
   d7e2a:	6a1b      	ldr	r3, [r3, #32]
   d7e2c:	9301      	str	r3, [sp, #4]
   d7e2e:	bd08      	pop	{r3, pc}
   d7e30:	0003023c 	.word	0x0003023c

000d7e34 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7e34:	b508      	push	{r3, lr}
   d7e36:	4b02      	ldr	r3, [pc, #8]	; (d7e40 <hal_usart_available_data_for_write+0xc>)
   d7e38:	681b      	ldr	r3, [r3, #0]
   d7e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e3c:	9301      	str	r3, [sp, #4]
   d7e3e:	bd08      	pop	{r3, pc}
   d7e40:	0003023c 	.word	0x0003023c

000d7e44 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d7e44:	b508      	push	{r3, lr}
   d7e46:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <hal_usart_begin_config+0xc>)
   d7e48:	681b      	ldr	r3, [r3, #0]
   d7e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e4c:	9301      	str	r3, [sp, #4]
   d7e4e:	bd08      	pop	{r3, pc}
   d7e50:	0003023c 	.word	0x0003023c

000d7e54 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7e54:	b508      	push	{r3, lr}
   d7e56:	4b02      	ldr	r3, [pc, #8]	; (d7e60 <HAL_USB_USART_Init+0xc>)
   d7e58:	681b      	ldr	r3, [r3, #0]
   d7e5a:	681b      	ldr	r3, [r3, #0]
   d7e5c:	9301      	str	r3, [sp, #4]
   d7e5e:	bd08      	pop	{r3, pc}
   d7e60:	0003024c 	.word	0x0003024c

000d7e64 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7e64:	b508      	push	{r3, lr}
   d7e66:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <HAL_USB_USART_Begin+0xc>)
   d7e68:	681b      	ldr	r3, [r3, #0]
   d7e6a:	685b      	ldr	r3, [r3, #4]
   d7e6c:	9301      	str	r3, [sp, #4]
   d7e6e:	bd08      	pop	{r3, pc}
   d7e70:	0003024c 	.word	0x0003024c

000d7e74 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d7e74:	b508      	push	{r3, lr}
   d7e76:	4b02      	ldr	r3, [pc, #8]	; (d7e80 <HAL_USB_USART_End+0xc>)
   d7e78:	681b      	ldr	r3, [r3, #0]
   d7e7a:	689b      	ldr	r3, [r3, #8]
   d7e7c:	9301      	str	r3, [sp, #4]
   d7e7e:	bd08      	pop	{r3, pc}
   d7e80:	0003024c 	.word	0x0003024c

000d7e84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7e84:	b508      	push	{r3, lr}
   d7e86:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <HAL_USB_USART_Available_Data+0xc>)
   d7e88:	681b      	ldr	r3, [r3, #0]
   d7e8a:	691b      	ldr	r3, [r3, #16]
   d7e8c:	9301      	str	r3, [sp, #4]
   d7e8e:	bd08      	pop	{r3, pc}
   d7e90:	0003024c 	.word	0x0003024c

000d7e94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7e94:	b508      	push	{r3, lr}
   d7e96:	4b02      	ldr	r3, [pc, #8]	; (d7ea0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7e98:	681b      	ldr	r3, [r3, #0]
   d7e9a:	695b      	ldr	r3, [r3, #20]
   d7e9c:	9301      	str	r3, [sp, #4]
   d7e9e:	bd08      	pop	{r3, pc}
   d7ea0:	0003024c 	.word	0x0003024c

000d7ea4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7ea4:	b508      	push	{r3, lr}
   d7ea6:	4b02      	ldr	r3, [pc, #8]	; (d7eb0 <HAL_USB_USART_Receive_Data+0xc>)
   d7ea8:	681b      	ldr	r3, [r3, #0]
   d7eaa:	699b      	ldr	r3, [r3, #24]
   d7eac:	9301      	str	r3, [sp, #4]
   d7eae:	bd08      	pop	{r3, pc}
   d7eb0:	0003024c 	.word	0x0003024c

000d7eb4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7eb4:	b508      	push	{r3, lr}
   d7eb6:	4b02      	ldr	r3, [pc, #8]	; (d7ec0 <HAL_USB_USART_Send_Data+0xc>)
   d7eb8:	681b      	ldr	r3, [r3, #0]
   d7eba:	69db      	ldr	r3, [r3, #28]
   d7ebc:	9301      	str	r3, [sp, #4]
   d7ebe:	bd08      	pop	{r3, pc}
   d7ec0:	0003024c 	.word	0x0003024c

000d7ec4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7ec4:	b508      	push	{r3, lr}
   d7ec6:	4b02      	ldr	r3, [pc, #8]	; (d7ed0 <HAL_USB_USART_Flush_Data+0xc>)
   d7ec8:	681b      	ldr	r3, [r3, #0]
   d7eca:	6a1b      	ldr	r3, [r3, #32]
   d7ecc:	9301      	str	r3, [sp, #4]
   d7ece:	bd08      	pop	{r3, pc}
   d7ed0:	0003024c 	.word	0x0003024c

000d7ed4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7ed4:	b508      	push	{r3, lr}
   d7ed6:	4b02      	ldr	r3, [pc, #8]	; (d7ee0 <panic_+0xc>)
   d7ed8:	681b      	ldr	r3, [r3, #0]
   d7eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7edc:	9301      	str	r3, [sp, #4]
   d7ede:	bd08      	pop	{r3, pc}
   d7ee0:	00030260 	.word	0x00030260

000d7ee4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7ee4:	b508      	push	{r3, lr}
   d7ee6:	4b02      	ldr	r3, [pc, #8]	; (d7ef0 <log_message+0xc>)
   d7ee8:	681b      	ldr	r3, [r3, #0]
   d7eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7eec:	9301      	str	r3, [sp, #4]
   d7eee:	bd08      	pop	{r3, pc}
   d7ef0:	00030260 	.word	0x00030260

000d7ef4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d7ef4:	b508      	push	{r3, lr}
   d7ef6:	4b02      	ldr	r3, [pc, #8]	; (d7f00 <log_message_v+0xc>)
   d7ef8:	681b      	ldr	r3, [r3, #0]
   d7efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7efc:	9301      	str	r3, [sp, #4]
   d7efe:	bd08      	pop	{r3, pc}
   d7f00:	00030260 	.word	0x00030260

000d7f04 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d7f04:	b508      	push	{r3, lr}
   d7f06:	4b02      	ldr	r3, [pc, #8]	; (d7f10 <log_level_name+0xc>)
   d7f08:	681b      	ldr	r3, [r3, #0]
   d7f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7f0c:	9301      	str	r3, [sp, #4]
   d7f0e:	bd08      	pop	{r3, pc}
   d7f10:	00030260 	.word	0x00030260

000d7f14 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d7f14:	b508      	push	{r3, lr}
   d7f16:	4b02      	ldr	r3, [pc, #8]	; (d7f20 <log_set_callbacks+0xc>)
   d7f18:	681b      	ldr	r3, [r3, #0]
   d7f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7f1c:	9301      	str	r3, [sp, #4]
   d7f1e:	bd08      	pop	{r3, pc}
   d7f20:	00030260 	.word	0x00030260

000d7f24 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d7f24:	b508      	push	{r3, lr}
   d7f26:	4b03      	ldr	r3, [pc, #12]	; (d7f34 <diag_get_source+0x10>)
   d7f28:	681b      	ldr	r3, [r3, #0]
   d7f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7f2e:	9301      	str	r3, [sp, #4]
   d7f30:	bd08      	pop	{r3, pc}
   d7f32:	0000      	.short	0x0000
   d7f34:	00030260 	.word	0x00030260

000d7f38 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7f38:	b508      	push	{r3, lr}
   d7f3a:	4b02      	ldr	r3, [pc, #8]	; (d7f44 <system_mode+0xc>)
   d7f3c:	681b      	ldr	r3, [r3, #0]
   d7f3e:	681b      	ldr	r3, [r3, #0]
   d7f40:	9301      	str	r3, [sp, #4]
   d7f42:	bd08      	pop	{r3, pc}
   d7f44:	00030220 	.word	0x00030220

000d7f48 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7f48:	b508      	push	{r3, lr}
   d7f4a:	4b02      	ldr	r3, [pc, #8]	; (d7f54 <set_system_mode+0xc>)
   d7f4c:	681b      	ldr	r3, [r3, #0]
   d7f4e:	685b      	ldr	r3, [r3, #4]
   d7f50:	9301      	str	r3, [sp, #4]
   d7f52:	bd08      	pop	{r3, pc}
   d7f54:	00030220 	.word	0x00030220

000d7f58 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7f58:	b508      	push	{r3, lr}
   d7f5a:	4b02      	ldr	r3, [pc, #8]	; (d7f64 <system_delay_ms+0xc>)
   d7f5c:	681b      	ldr	r3, [r3, #0]
   d7f5e:	695b      	ldr	r3, [r3, #20]
   d7f60:	9301      	str	r3, [sp, #4]
   d7f62:	bd08      	pop	{r3, pc}
   d7f64:	00030220 	.word	0x00030220

000d7f68 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d7f68:	b508      	push	{r3, lr}
   d7f6a:	4b02      	ldr	r3, [pc, #8]	; (d7f74 <system_subscribe_event+0xc>)
   d7f6c:	681b      	ldr	r3, [r3, #0]
   d7f6e:	6a1b      	ldr	r3, [r3, #32]
   d7f70:	9301      	str	r3, [sp, #4]
   d7f72:	bd08      	pop	{r3, pc}
   d7f74:	00030220 	.word	0x00030220

000d7f78 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7f78:	b508      	push	{r3, lr}
   d7f7a:	4b02      	ldr	r3, [pc, #8]	; (d7f84 <system_thread_set_state+0xc>)
   d7f7c:	681b      	ldr	r3, [r3, #0]
   d7f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7f80:	9301      	str	r3, [sp, #4]
   d7f82:	bd08      	pop	{r3, pc}
   d7f84:	00030220 	.word	0x00030220

000d7f88 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7f88:	b508      	push	{r3, lr}
   d7f8a:	4b02      	ldr	r3, [pc, #8]	; (d7f94 <application_thread_current+0xc>)
   d7f8c:	681b      	ldr	r3, [r3, #0]
   d7f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7f90:	9301      	str	r3, [sp, #4]
   d7f92:	bd08      	pop	{r3, pc}
   d7f94:	00030220 	.word	0x00030220

000d7f98 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7f98:	b508      	push	{r3, lr}
   d7f9a:	4b02      	ldr	r3, [pc, #8]	; (d7fa4 <application_thread_invoke+0xc>)
   d7f9c:	681b      	ldr	r3, [r3, #0]
   d7f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7fa0:	9301      	str	r3, [sp, #4]
   d7fa2:	bd08      	pop	{r3, pc}
   d7fa4:	00030220 	.word	0x00030220

000d7fa8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7fa8:	b508      	push	{r3, lr}
   d7faa:	4b02      	ldr	r3, [pc, #8]	; (d7fb4 <system_thread_get_state+0xc>)
   d7fac:	681b      	ldr	r3, [r3, #0]
   d7fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7fb0:	9301      	str	r3, [sp, #4]
   d7fb2:	bd08      	pop	{r3, pc}
   d7fb4:	00030220 	.word	0x00030220

000d7fb8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d7fb8:	b508      	push	{r3, lr}
   d7fba:	4b02      	ldr	r3, [pc, #8]	; (d7fc4 <system_notify_time_changed+0xc>)
   d7fbc:	681b      	ldr	r3, [r3, #0]
   d7fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7fc0:	9301      	str	r3, [sp, #4]
   d7fc2:	bd08      	pop	{r3, pc}
   d7fc4:	00030220 	.word	0x00030220

000d7fc8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7fc8:	b508      	push	{r3, lr}
   d7fca:	4b03      	ldr	r3, [pc, #12]	; (d7fd8 <system_ctrl_set_app_request_handler+0x10>)
   d7fcc:	681b      	ldr	r3, [r3, #0]
   d7fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7fd2:	9301      	str	r3, [sp, #4]
   d7fd4:	bd08      	pop	{r3, pc}
   d7fd6:	0000      	.short	0x0000
   d7fd8:	00030220 	.word	0x00030220

000d7fdc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7fdc:	b508      	push	{r3, lr}
   d7fde:	4b03      	ldr	r3, [pc, #12]	; (d7fec <system_ctrl_set_result+0x10>)
   d7fe0:	681b      	ldr	r3, [r3, #0]
   d7fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7fe6:	9301      	str	r3, [sp, #4]
   d7fe8:	bd08      	pop	{r3, pc}
   d7fea:	0000      	.short	0x0000
   d7fec:	00030220 	.word	0x00030220

000d7ff0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d7ff0:	b508      	push	{r3, lr}
   d7ff2:	4b03      	ldr	r3, [pc, #12]	; (d8000 <system_power_management_set_config+0x10>)
   d7ff4:	681b      	ldr	r3, [r3, #0]
   d7ff6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7ffa:	9301      	str	r3, [sp, #4]
   d7ffc:	bd08      	pop	{r3, pc}
   d7ffe:	0000      	.short	0x0000
   d8000:	00030220 	.word	0x00030220

000d8004 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d8004:	b508      	push	{r3, lr}
   d8006:	4b03      	ldr	r3, [pc, #12]	; (d8014 <system_sleep_ext+0x10>)
   d8008:	681b      	ldr	r3, [r3, #0]
   d800a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d800e:	9301      	str	r3, [sp, #4]
   d8010:	bd08      	pop	{r3, pc}
   d8012:	0000      	.short	0x0000
   d8014:	00030220 	.word	0x00030220

000d8018 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8018:	b508      	push	{r3, lr}
   d801a:	4b03      	ldr	r3, [pc, #12]	; (d8028 <system_reset+0x10>)
   d801c:	681b      	ldr	r3, [r3, #0]
   d801e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d8022:	9301      	str	r3, [sp, #4]
   d8024:	bd08      	pop	{r3, pc}
   d8026:	0000      	.short	0x0000
   d8028:	00030220 	.word	0x00030220

000d802c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d802c:	b508      	push	{r3, lr}
   d802e:	4b02      	ldr	r3, [pc, #8]	; (d8038 <spark_variable+0xc>)
   d8030:	681b      	ldr	r3, [r3, #0]
   d8032:	681b      	ldr	r3, [r3, #0]
   d8034:	9301      	str	r3, [sp, #4]
   d8036:	bd08      	pop	{r3, pc}
   d8038:	00030244 	.word	0x00030244

000d803c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d803c:	b508      	push	{r3, lr}
   d803e:	4b02      	ldr	r3, [pc, #8]	; (d8048 <spark_function+0xc>)
   d8040:	681b      	ldr	r3, [r3, #0]
   d8042:	685b      	ldr	r3, [r3, #4]
   d8044:	9301      	str	r3, [sp, #4]
   d8046:	bd08      	pop	{r3, pc}
   d8048:	00030244 	.word	0x00030244

000d804c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d804c:	b508      	push	{r3, lr}
   d804e:	4b02      	ldr	r3, [pc, #8]	; (d8058 <spark_process+0xc>)
   d8050:	681b      	ldr	r3, [r3, #0]
   d8052:	689b      	ldr	r3, [r3, #8]
   d8054:	9301      	str	r3, [sp, #4]
   d8056:	bd08      	pop	{r3, pc}
   d8058:	00030244 	.word	0x00030244

000d805c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d805c:	b508      	push	{r3, lr}
   d805e:	4b02      	ldr	r3, [pc, #8]	; (d8068 <spark_cloud_flag_connect+0xc>)
   d8060:	681b      	ldr	r3, [r3, #0]
   d8062:	68db      	ldr	r3, [r3, #12]
   d8064:	9301      	str	r3, [sp, #4]
   d8066:	bd08      	pop	{r3, pc}
   d8068:	00030244 	.word	0x00030244

000d806c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d806c:	b508      	push	{r3, lr}
   d806e:	4b02      	ldr	r3, [pc, #8]	; (d8078 <spark_cloud_flag_connected+0xc>)
   d8070:	681b      	ldr	r3, [r3, #0]
   d8072:	695b      	ldr	r3, [r3, #20]
   d8074:	9301      	str	r3, [sp, #4]
   d8076:	bd08      	pop	{r3, pc}
   d8078:	00030244 	.word	0x00030244

000d807c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d807c:	b508      	push	{r3, lr}
   d807e:	4b02      	ldr	r3, [pc, #8]	; (d8088 <spark_deviceID+0xc>)
   d8080:	681b      	ldr	r3, [r3, #0]
   d8082:	69db      	ldr	r3, [r3, #28]
   d8084:	9301      	str	r3, [sp, #4]
   d8086:	bd08      	pop	{r3, pc}
   d8088:	00030244 	.word	0x00030244

000d808c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d808c:	b508      	push	{r3, lr}
   d808e:	4b02      	ldr	r3, [pc, #8]	; (d8098 <spark_send_event+0xc>)
   d8090:	681b      	ldr	r3, [r3, #0]
   d8092:	6a1b      	ldr	r3, [r3, #32]
   d8094:	9301      	str	r3, [sp, #4]
   d8096:	bd08      	pop	{r3, pc}
   d8098:	00030244 	.word	0x00030244

000d809c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d809c:	b508      	push	{r3, lr}
   d809e:	4b02      	ldr	r3, [pc, #8]	; (d80a8 <spark_subscribe+0xc>)
   d80a0:	681b      	ldr	r3, [r3, #0]
   d80a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d80a4:	9301      	str	r3, [sp, #4]
   d80a6:	bd08      	pop	{r3, pc}
   d80a8:	00030244 	.word	0x00030244

000d80ac <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <spark_sync_time+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	00030244 	.word	0x00030244

000d80bc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <spark_sync_time_pending+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	00030244 	.word	0x00030244

000d80cc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b02      	ldr	r3, [pc, #8]	; (d80d8 <spark_sync_time_last+0xc>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d80d4:	9301      	str	r3, [sp, #4]
   d80d6:	bd08      	pop	{r3, pc}
   d80d8:	00030244 	.word	0x00030244

000d80dc <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d80dc:	b508      	push	{r3, lr}
   d80de:	4b02      	ldr	r3, [pc, #8]	; (d80e8 <spark_set_connection_property+0xc>)
   d80e0:	681b      	ldr	r3, [r3, #0]
   d80e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d80e4:	9301      	str	r3, [sp, #4]
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	00030244 	.word	0x00030244

000d80ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d80ec:	b508      	push	{r3, lr}
   d80ee:	4b02      	ldr	r3, [pc, #8]	; (d80f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d80f0:	681b      	ldr	r3, [r3, #0]
   d80f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d80f4:	9301      	str	r3, [sp, #4]
   d80f6:	bd08      	pop	{r3, pc}
   d80f8:	00030244 	.word	0x00030244

000d80fc <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d80fc:	b508      	push	{r3, lr}
   d80fe:	4b02      	ldr	r3, [pc, #8]	; (d8108 <spark_cloud_disconnect+0xc>)
   d8100:	681b      	ldr	r3, [r3, #0]
   d8102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8104:	9301      	str	r3, [sp, #4]
   d8106:	bd08      	pop	{r3, pc}
   d8108:	00030244 	.word	0x00030244

000d810c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d810c:	b508      	push	{r3, lr}
   d810e:	4b02      	ldr	r3, [pc, #8]	; (d8118 <network_connect+0xc>)
   d8110:	681b      	ldr	r3, [r3, #0]
   d8112:	685b      	ldr	r3, [r3, #4]
   d8114:	9301      	str	r3, [sp, #4]
   d8116:	bd08      	pop	{r3, pc}
   d8118:	00030240 	.word	0x00030240

000d811c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d811c:	b508      	push	{r3, lr}
   d811e:	4b02      	ldr	r3, [pc, #8]	; (d8128 <network_connecting+0xc>)
   d8120:	681b      	ldr	r3, [r3, #0]
   d8122:	689b      	ldr	r3, [r3, #8]
   d8124:	9301      	str	r3, [sp, #4]
   d8126:	bd08      	pop	{r3, pc}
   d8128:	00030240 	.word	0x00030240

000d812c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d812c:	b508      	push	{r3, lr}
   d812e:	4b02      	ldr	r3, [pc, #8]	; (d8138 <network_disconnect+0xc>)
   d8130:	681b      	ldr	r3, [r3, #0]
   d8132:	68db      	ldr	r3, [r3, #12]
   d8134:	9301      	str	r3, [sp, #4]
   d8136:	bd08      	pop	{r3, pc}
   d8138:	00030240 	.word	0x00030240

000d813c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d813c:	b508      	push	{r3, lr}
   d813e:	4b02      	ldr	r3, [pc, #8]	; (d8148 <network_ready+0xc>)
   d8140:	681b      	ldr	r3, [r3, #0]
   d8142:	691b      	ldr	r3, [r3, #16]
   d8144:	9301      	str	r3, [sp, #4]
   d8146:	bd08      	pop	{r3, pc}
   d8148:	00030240 	.word	0x00030240

000d814c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d814c:	b508      	push	{r3, lr}
   d814e:	4b02      	ldr	r3, [pc, #8]	; (d8158 <network_on+0xc>)
   d8150:	681b      	ldr	r3, [r3, #0]
   d8152:	695b      	ldr	r3, [r3, #20]
   d8154:	9301      	str	r3, [sp, #4]
   d8156:	bd08      	pop	{r3, pc}
   d8158:	00030240 	.word	0x00030240

000d815c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d815c:	b508      	push	{r3, lr}
   d815e:	4b02      	ldr	r3, [pc, #8]	; (d8168 <network_off+0xc>)
   d8160:	681b      	ldr	r3, [r3, #0]
   d8162:	699b      	ldr	r3, [r3, #24]
   d8164:	9301      	str	r3, [sp, #4]
   d8166:	bd08      	pop	{r3, pc}
   d8168:	00030240 	.word	0x00030240

000d816c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d816c:	b508      	push	{r3, lr}
   d816e:	4b02      	ldr	r3, [pc, #8]	; (d8178 <network_listen+0xc>)
   d8170:	681b      	ldr	r3, [r3, #0]
   d8172:	69db      	ldr	r3, [r3, #28]
   d8174:	9301      	str	r3, [sp, #4]
   d8176:	bd08      	pop	{r3, pc}
   d8178:	00030240 	.word	0x00030240

000d817c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d817c:	b508      	push	{r3, lr}
   d817e:	4b02      	ldr	r3, [pc, #8]	; (d8188 <network_listening+0xc>)
   d8180:	681b      	ldr	r3, [r3, #0]
   d8182:	6a1b      	ldr	r3, [r3, #32]
   d8184:	9301      	str	r3, [sp, #4]
   d8186:	bd08      	pop	{r3, pc}
   d8188:	00030240 	.word	0x00030240

000d818c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d818c:	b508      	push	{r3, lr}
   d818e:	4b02      	ldr	r3, [pc, #8]	; (d8198 <network_set_listen_timeout+0xc>)
   d8190:	681b      	ldr	r3, [r3, #0]
   d8192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8194:	9301      	str	r3, [sp, #4]
   d8196:	bd08      	pop	{r3, pc}
   d8198:	00030240 	.word	0x00030240

000d819c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d819c:	b508      	push	{r3, lr}
   d819e:	4b02      	ldr	r3, [pc, #8]	; (d81a8 <network_get_listen_timeout+0xc>)
   d81a0:	681b      	ldr	r3, [r3, #0]
   d81a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d81a4:	9301      	str	r3, [sp, #4]
   d81a6:	bd08      	pop	{r3, pc}
   d81a8:	00030240 	.word	0x00030240

000d81ac <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b02      	ldr	r3, [pc, #8]	; (d81b8 <network_is_on+0xc>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d81b4:	9301      	str	r3, [sp, #4]
   d81b6:	bd08      	pop	{r3, pc}
   d81b8:	00030240 	.word	0x00030240

000d81bc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d81bc:	b508      	push	{r3, lr}
   d81be:	4b02      	ldr	r3, [pc, #8]	; (d81c8 <network_is_off+0xc>)
   d81c0:	681b      	ldr	r3, [r3, #0]
   d81c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d81c4:	9301      	str	r3, [sp, #4]
   d81c6:	bd08      	pop	{r3, pc}
   d81c8:	00030240 	.word	0x00030240

000d81cc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d81cc:	b508      	push	{r3, lr}
   d81ce:	4b02      	ldr	r3, [pc, #8]	; (d81d8 <malloc+0xc>)
   d81d0:	681b      	ldr	r3, [r3, #0]
   d81d2:	681b      	ldr	r3, [r3, #0]
   d81d4:	9301      	str	r3, [sp, #4]
   d81d6:	bd08      	pop	{r3, pc}
   d81d8:	0003021c 	.word	0x0003021c

000d81dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d81dc:	b508      	push	{r3, lr}
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <free+0xc>)
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	685b      	ldr	r3, [r3, #4]
   d81e4:	9301      	str	r3, [sp, #4]
   d81e6:	bd08      	pop	{r3, pc}
   d81e8:	0003021c 	.word	0x0003021c

000d81ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <realloc+0xc>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	689b      	ldr	r3, [r3, #8]
   d81f4:	9301      	str	r3, [sp, #4]
   d81f6:	bd08      	pop	{r3, pc}
   d81f8:	0003021c 	.word	0x0003021c

000d81fc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d81fc:	b508      	push	{r3, lr}
   d81fe:	4b02      	ldr	r3, [pc, #8]	; (d8208 <siprintf+0xc>)
   d8200:	681b      	ldr	r3, [r3, #0]
   d8202:	691b      	ldr	r3, [r3, #16]
   d8204:	9301      	str	r3, [sp, #4]
   d8206:	bd08      	pop	{r3, pc}
   d8208:	0003021c 	.word	0x0003021c

000d820c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <snprintf+0xc>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	69db      	ldr	r3, [r3, #28]
   d8214:	9301      	str	r3, [sp, #4]
   d8216:	bd08      	pop	{r3, pc}
   d8218:	0003021c 	.word	0x0003021c

000d821c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <vsnprintf+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	0003021c 	.word	0x0003021c

000d822c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <abort+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	0003021c 	.word	0x0003021c

000d823c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <_malloc_r+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	0003021c 	.word	0x0003021c

000d824c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <newlib_impure_ptr_callback+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	0003021c 	.word	0x0003021c

000d825c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <strftime+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	0003021c 	.word	0x0003021c

000d826c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <localtime_r+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	0003021c 	.word	0x0003021c

000d827c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <gmtime_r+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	0003021c 	.word	0x0003021c

000d828c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <mktime+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	0003021c 	.word	0x0003021c

000d829c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d829c:	2100      	movs	r1, #0
   d829e:	f7ff be5b 	b.w	d7f58 <system_delay_ms>

000d82a2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d82a2:	b510      	push	{r4, lr}
      if (_M_empty())
   d82a4:	6883      	ldr	r3, [r0, #8]
   d82a6:	4604      	mov	r4, r0
   d82a8:	b90b      	cbnz	r3, d82ae <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d82aa:	f003 f94c 	bl	db546 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d82ae:	68c3      	ldr	r3, [r0, #12]
   d82b0:	4798      	blx	r3
      if (_M_manager)
   d82b2:	68a3      	ldr	r3, [r4, #8]
   d82b4:	b11b      	cbz	r3, d82be <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d82b6:	2203      	movs	r2, #3
   d82b8:	4621      	mov	r1, r4
   d82ba:	4620      	mov	r0, r4
   d82bc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d82be:	4620      	mov	r0, r4
   d82c0:	2110      	movs	r1, #16
}
   d82c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d82c6:	f003 b938 	b.w	db53a <_ZdlPvj>

000d82ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d82ca:	b510      	push	{r4, lr}
          _M_dispose();
   d82cc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d82ce:	4604      	mov	r4, r0
          _M_dispose();
   d82d0:	689b      	ldr	r3, [r3, #8]
   d82d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d82d4:	68a3      	ldr	r3, [r4, #8]
   d82d6:	3b01      	subs	r3, #1
   d82d8:	60a3      	str	r3, [r4, #8]
   d82da:	b92b      	cbnz	r3, d82e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d82dc:	6823      	ldr	r3, [r4, #0]
   d82de:	4620      	mov	r0, r4
   d82e0:	68db      	ldr	r3, [r3, #12]
    }
   d82e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d82e6:	4718      	bx	r3
    }
   d82e8:	bd10      	pop	{r4, pc}

000d82ea <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d82ea:	b510      	push	{r4, lr}
   d82ec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d82ee:	6800      	ldr	r0, [r0, #0]
   d82f0:	b108      	cbz	r0, d82f6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d82f2:	f7ff fc07 	bl	d7b04 <os_mutex_recursive_destroy>
    }
   d82f6:	4620      	mov	r0, r4
   d82f8:	bd10      	pop	{r4, pc}

000d82fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d82fa:	680b      	ldr	r3, [r1, #0]
   d82fc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d82fe:	b113      	cbz	r3, d8306 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8300:	685a      	ldr	r2, [r3, #4]
   d8302:	3201      	adds	r2, #1
   d8304:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d8306:	4770      	bx	lr

000d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d8308:	b510      	push	{r4, lr}
   d830a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d830c:	6800      	ldr	r0, [r0, #0]
   d830e:	b128      	cbz	r0, d831c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d8310:	6843      	ldr	r3, [r0, #4]
   d8312:	3b01      	subs	r3, #1
   d8314:	6043      	str	r3, [r0, #4]
   d8316:	b90b      	cbnz	r3, d831c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d8318:	f7ff ffd7 	bl	d82ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d831c:	4620      	mov	r0, r4
   d831e:	bd10      	pop	{r4, pc}

000d8320 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8320:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d8322:	4c06      	ldr	r4, [pc, #24]	; (d833c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8324:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d8326:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d8328:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d832a:	f7ff fbe3 	bl	d7af4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d832e:	4620      	mov	r0, r4
   d8330:	4a03      	ldr	r2, [pc, #12]	; (d8340 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8332:	4904      	ldr	r1, [pc, #16]	; (d8344 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d8334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d8338:	f003 b8fa 	b.w	db530 <__aeabi_atexit>
   d833c:	2003e504 	.word	0x2003e504
   d8340:	2003e310 	.word	0x2003e310
   d8344:	000d82eb 	.word	0x000d82eb

000d8348 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8348:	2200      	movs	r2, #0
   d834a:	6840      	ldr	r0, [r0, #4]
   d834c:	4611      	mov	r1, r2
   d834e:	f7ff bef5 	b.w	d813c <network_ready>

000d8352 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8352:	2200      	movs	r2, #0
   d8354:	6840      	ldr	r0, [r0, #4]
   d8356:	4611      	mov	r1, r2
   d8358:	f7ff bf10 	b.w	d817c <network_listening>

000d835c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d835c:	2200      	movs	r2, #0
   d835e:	6840      	ldr	r0, [r0, #4]
   d8360:	4611      	mov	r1, r2
   d8362:	f7ff bf1b 	b.w	d819c <network_get_listen_timeout>

000d8366 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8366:	6840      	ldr	r0, [r0, #4]
   d8368:	2200      	movs	r2, #0
   d836a:	f7ff bf0f 	b.w	d818c <network_set_listen_timeout>

000d836e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d836e:	6840      	ldr	r0, [r0, #4]
   d8370:	2200      	movs	r2, #0
   d8372:	f081 0101 	eor.w	r1, r1, #1
   d8376:	f7ff bef9 	b.w	d816c <network_listen>

000d837a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d837a:	2300      	movs	r3, #0
   d837c:	6840      	ldr	r0, [r0, #4]
   d837e:	461a      	mov	r2, r3
   d8380:	4619      	mov	r1, r3
   d8382:	f7ff bee3 	b.w	d814c <network_on>

000d8386 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8386:	2200      	movs	r2, #0
   d8388:	6840      	ldr	r0, [r0, #4]
   d838a:	4611      	mov	r1, r2
   d838c:	f7ff bec6 	b.w	d811c <network_connecting>

000d8390 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8390:	6840      	ldr	r0, [r0, #4]
   d8392:	2200      	movs	r2, #0
   d8394:	2102      	movs	r1, #2
   d8396:	f7ff bec9 	b.w	d812c <network_disconnect>

000d839a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d839a:	2300      	movs	r3, #0
   d839c:	6840      	ldr	r0, [r0, #4]
   d839e:	461a      	mov	r2, r3
   d83a0:	f7ff beb4 	b.w	d810c <network_connect>

000d83a4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d83a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d83a6:	4b1b      	ldr	r3, [pc, #108]	; (d8414 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d83a8:	6003      	str	r3, [r0, #0]
   d83aa:	2500      	movs	r5, #0
   d83ac:	460f      	mov	r7, r1
   d83ae:	3328      	adds	r3, #40	; 0x28
   d83b0:	2618      	movs	r6, #24
   d83b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d83b6:	b089      	sub	sp, #36	; 0x24
   d83b8:	6043      	str	r3, [r0, #4]
   d83ba:	4632      	mov	r2, r6
   d83bc:	4629      	mov	r1, r5
   d83be:	4604      	mov	r4, r0
   d83c0:	3010      	adds	r0, #16
   d83c2:	f003 fdcf 	bl	dbf64 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d83c6:	6878      	ldr	r0, [r7, #4]
   d83c8:	462a      	mov	r2, r5
   d83ca:	4629      	mov	r1, r5
   d83cc:	f7ff feb6 	bl	d813c <network_ready>
   d83d0:	b918      	cbnz	r0, d83da <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d83d2:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d83d4:	4620      	mov	r0, r4
   d83d6:	b009      	add	sp, #36	; 0x24
   d83d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d83da:	4629      	mov	r1, r5
   d83dc:	4632      	mov	r2, r6
   d83de:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d83e0:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d83e4:	f003 fdbe 	bl	dbf64 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d83e8:	a902      	add	r1, sp, #8
   d83ea:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d83ec:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d83f0:	f7ff fb28 	bl	d7a44 <cellular_signal>
   d83f4:	b110      	cbz	r0, d83fc <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d83f6:	2301      	movs	r3, #1
   d83f8:	60a3      	str	r3, [r4, #8]
            return sig;
   d83fa:	e7eb      	b.n	d83d4 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d83fc:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d83fe:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d8400:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d8402:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d8404:	b90b      	cbnz	r3, d840a <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d8406:	2302      	movs	r3, #2
   d8408:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d840a:	a902      	add	r1, sp, #8
   d840c:	4620      	mov	r0, r4
   d840e:	f000 f8ae 	bl	d856e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d8412:	e7df      	b.n	d83d4 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d8414:	000dcc00 	.word	0x000dcc00

000d8418 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8418:	4b08      	ldr	r3, [pc, #32]	; (d843c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d841a:	b510      	push	{r4, lr}
   d841c:	2428      	movs	r4, #40	; 0x28
   d841e:	4622      	mov	r2, r4
   d8420:	4618      	mov	r0, r3
   d8422:	2100      	movs	r1, #0
   d8424:	f003 fd9e 	bl	dbf64 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8428:	4b05      	ldr	r3, [pc, #20]	; (d8440 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d842a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d842c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8430:	6042      	str	r2, [r0, #4]
   d8432:	2204      	movs	r2, #4
   d8434:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8436:	4a03      	ldr	r2, [pc, #12]	; (d8444 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8438:	601a      	str	r2, [r3, #0]
   d843a:	bd10      	pop	{r4, pc}
   d843c:	2003e510 	.word	0x2003e510
   d8440:	2003e508 	.word	0x2003e508
   d8444:	000dcbc4 	.word	0x000dcbc4

000d8448 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8448:	4770      	bx	lr

000d844a <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d844a:	7d00      	ldrb	r0, [r0, #20]
   d844c:	4770      	bx	lr

000d844e <_ZN14CellularSignalD0Ev>:
   d844e:	b510      	push	{r4, lr}
   d8450:	2128      	movs	r1, #40	; 0x28
   d8452:	4604      	mov	r4, r0
   d8454:	f003 f871 	bl	db53a <_ZdlPvj>
   d8458:	4620      	mov	r0, r4
   d845a:	bd10      	pop	{r4, pc}

000d845c <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d845c:	7d03      	ldrb	r3, [r0, #20]
   d845e:	b17b      	cbz	r3, d8480 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8460:	69c3      	ldr	r3, [r0, #28]
   d8462:	2b00      	cmp	r3, #0
   d8464:	db0c      	blt.n	d8480 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8466:	ee07 3a90 	vmov	s15, r3
   d846a:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8488 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d846e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8472:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8476:	eddf 7a05 	vldr	s15, [pc, #20]	; d848c <_ZNK14CellularSignal11getStrengthEv+0x30>
   d847a:	ee20 0a27 	vmul.f32	s0, s0, s15
   d847e:	4770      	bx	lr
    }

    return -1.0f;
   d8480:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8484:	4770      	bx	lr
   d8486:	bf00      	nop
   d8488:	477fff00 	.word	0x477fff00
   d848c:	42c80000 	.word	0x42c80000

000d8490 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8490:	7d03      	ldrb	r3, [r0, #20]
   d8492:	b163      	cbz	r3, d84ae <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d8494:	6983      	ldr	r3, [r0, #24]
   d8496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d849a:	d008      	beq.n	d84ae <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d849c:	ee07 3a90 	vmov	s15, r3
   d84a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; d84b4 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d84a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d84a8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d84ac:	4770      	bx	lr
    }

    return 0.0f;
   d84ae:	ed9f 0a02 	vldr	s0, [pc, #8]	; d84b8 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d84b2:	4770      	bx	lr
   d84b4:	42c80000 	.word	0x42c80000
   d84b8:	00000000 	.word	0x00000000

000d84bc <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d84bc:	7d03      	ldrb	r3, [r0, #20]
   d84be:	b17b      	cbz	r3, d84e0 <_ZNK14CellularSignal10getQualityEv+0x24>
   d84c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d84c2:	2b00      	cmp	r3, #0
   d84c4:	db0c      	blt.n	d84e0 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d84c6:	ee07 3a90 	vmov	s15, r3
   d84ca:	ed9f 7a07 	vldr	s14, [pc, #28]	; d84e8 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d84ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d84d2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d84d6:	eddf 7a05 	vldr	s15, [pc, #20]	; d84ec <_ZNK14CellularSignal10getQualityEv+0x30>
   d84da:	ee20 0a27 	vmul.f32	s0, s0, s15
   d84de:	4770      	bx	lr
    }

    return -1.0f;
   d84e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d84e4:	4770      	bx	lr
   d84e6:	bf00      	nop
   d84e8:	477fff00 	.word	0x477fff00
   d84ec:	42c80000 	.word	0x42c80000

000d84f0 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d84f0:	7d03      	ldrb	r3, [r0, #20]
   d84f2:	b163      	cbz	r3, d850e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d84f4:	6a03      	ldr	r3, [r0, #32]
   d84f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d84fa:	d008      	beq.n	d850e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d84fc:	ee07 3a90 	vmov	s15, r3
   d8500:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8514 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d8504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8508:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d850c:	4770      	bx	lr
    }

    return 0.0f;
   d850e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8518 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d8512:	4770      	bx	lr
   d8514:	42c80000 	.word	0x42c80000
   d8518:	00000000 	.word	0x00000000

000d851c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d851c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d851e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8520:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d8522:	da0a      	bge.n	d853a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d8524:	212d      	movs	r1, #45	; 0x2d
   d8526:	f002 f8c8 	bl	da6ba <_ZN5Print5printEc>
            val = -n;
   d852a:	4261      	negs	r1, r4
            t = print('-');
   d852c:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d852e:	220a      	movs	r2, #10
   d8530:	4630      	mov	r0, r6
   d8532:	f002 f8d1 	bl	da6d8 <_ZN5Print11printNumberEmh>
    }
}
   d8536:	4428      	add	r0, r5
   d8538:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d853a:	4621      	mov	r1, r4
        size_t t = 0;
   d853c:	2500      	movs	r5, #0
   d853e:	e7f6      	b.n	d852e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8540 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d8540:	b570      	push	{r4, r5, r6, lr}
   d8542:	460c      	mov	r4, r1
   d8544:	4605      	mov	r5, r0
   d8546:	6881      	ldr	r1, [r0, #8]
   d8548:	4620      	mov	r0, r4
   d854a:	f7ff ffe7 	bl	d851c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d854e:	212c      	movs	r1, #44	; 0x2c
   d8550:	4606      	mov	r6, r0
   d8552:	4620      	mov	r0, r4
   d8554:	f002 f8b1 	bl	da6ba <_ZN5Print5printEc>
   d8558:	68e9      	ldr	r1, [r5, #12]
   d855a:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d855c:	4620      	mov	r0, r4
   d855e:	f7ff ffdd 	bl	d851c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d8562:	4430      	add	r0, r6
   d8564:	bd70      	pop	{r4, r5, r6, pc}

000d8566 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8566:	f1a0 0004 	sub.w	r0, r0, #4
   d856a:	f7ff bfe9 	b.w	d8540 <_ZNK14CellularSignal7printToER5Print>

000d856e <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d856e:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8570:	460d      	mov	r5, r1
   d8572:	f100 0410 	add.w	r4, r0, #16
   d8576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d857a:	e895 0003 	ldmia.w	r5, {r0, r1}
   d857e:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d8582:	2001      	movs	r0, #1
   d8584:	bd30      	pop	{r4, r5, pc}

000d8586 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8586:	4770      	bx	lr

000d8588 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8588:	2000      	movs	r0, #0
   d858a:	4770      	bx	lr

000d858c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d858c:	b510      	push	{r4, lr}
   d858e:	2110      	movs	r1, #16
   d8590:	4604      	mov	r4, r0
   d8592:	f002 ffd2 	bl	db53a <_ZdlPvj>
   d8596:	4620      	mov	r0, r4
   d8598:	bd10      	pop	{r4, pc}

000d859a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d859a:	b508      	push	{r3, lr}
      { delete this; }
   d859c:	f7ff fff6 	bl	d858c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d85a0:	bd08      	pop	{r3, pc}

000d85a2 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d85a2:	b530      	push	{r4, r5, lr}
        type_(type) {
   d85a4:	2200      	movs	r2, #0
   d85a6:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d85aa:	6002      	str	r2, [r0, #0]
   d85ac:	8084      	strh	r4, [r0, #4]
   d85ae:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d85b0:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d85b2:	680c      	ldr	r4, [r1, #0]
   d85b4:	8085      	strh	r5, [r0, #4]
   d85b6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d85b8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d85ba:	bd30      	pop	{r4, r5, pc}

000d85bc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d85bc:	b510      	push	{r4, lr}
   d85be:	4604      	mov	r4, r0
    free((void*)msg_);
   d85c0:	6800      	ldr	r0, [r0, #0]
   d85c2:	f7ff fe0b 	bl	d81dc <free>
}
   d85c6:	4620      	mov	r0, r4
   d85c8:	bd10      	pop	{r4, pc}

000d85ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d85ca:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d85cc:	68c4      	ldr	r4, [r0, #12]
   d85ce:	b1f4      	cbz	r4, d860e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d85d0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d85d2:	2b02      	cmp	r3, #2
   d85d4:	d103      	bne.n	d85de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d85d6:	f104 000c 	add.w	r0, r4, #12
   d85da:	f7ff ffef 	bl	d85bc <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d85de:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d85e0:	b135      	cbz	r5, d85f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d85e2:	4628      	mov	r0, r5
   d85e4:	f7fb fea6 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
   d85e8:	2110      	movs	r1, #16
   d85ea:	4628      	mov	r0, r5
   d85ec:	f002 ffa5 	bl	db53a <_ZdlPvj>
   d85f0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d85f2:	b135      	cbz	r5, d8602 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d85f4:	4628      	mov	r0, r5
   d85f6:	f7fb fe9d 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
   d85fa:	2110      	movs	r1, #16
   d85fc:	4628      	mov	r0, r5
   d85fe:	f002 ff9c 	bl	db53a <_ZdlPvj>
   d8602:	4620      	mov	r0, r4
   d8604:	2114      	movs	r1, #20
   d8606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d860a:	f002 bf96 	b.w	db53a <_ZdlPvj>
   d860e:	bd38      	pop	{r3, r4, r5, pc}

000d8610 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8610:	b510      	push	{r4, lr}
   d8612:	b088      	sub	sp, #32
   d8614:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8616:	4668      	mov	r0, sp
   d8618:	f002 f917 	bl	da84a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d861c:	4669      	mov	r1, sp
   d861e:	a804      	add	r0, sp, #16
   d8620:	f002 f95e 	bl	da8e0 <_ZN6StringC1ERKS_>
   d8624:	a804      	add	r0, sp, #16
   d8626:	47a0      	blx	r4
   d8628:	4604      	mov	r4, r0
   d862a:	a804      	add	r0, sp, #16
   d862c:	f002 f8c2 	bl	da7b4 <_ZN6StringD1Ev>
    String p(param);
   d8630:	4668      	mov	r0, sp
   d8632:	f002 f8bf 	bl	da7b4 <_ZN6StringD1Ev>
}
   d8636:	4620      	mov	r0, r4
   d8638:	b008      	add	sp, #32
   d863a:	bd10      	pop	{r4, pc}

000d863c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d863c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d863e:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8640:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8644:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d8646:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8648:	461a      	mov	r2, r3
   d864a:	4669      	mov	r1, sp
   d864c:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d864e:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d8652:	f8ad 4000 	strh.w	r4, [sp]
   d8656:	f7ff fcf1 	bl	d803c <spark_function>
}
   d865a:	b004      	add	sp, #16
   d865c:	bd10      	pop	{r4, pc}

000d865e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d865e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d8660:	230c      	movs	r3, #12
   d8662:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d8666:	6803      	ldr	r3, [r0, #0]
   d8668:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d866c:	7a03      	ldrb	r3, [r0, #8]
   d866e:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d8672:	6843      	ldr	r3, [r0, #4]
   d8674:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d8676:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d8678:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d867a:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d867e:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d8680:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d8684:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8688:	f7ff fd38 	bl	d80fc <spark_cloud_disconnect>
}
   d868c:	b005      	add	sp, #20
   d868e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8692 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d8692:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d8694:	220c      	movs	r2, #12
   d8696:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   d869a:	6802      	ldr	r2, [r0, #0]
   d869c:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   d86a0:	7a02      	ldrb	r2, [r0, #8]
   d86a2:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   d86a6:	6842      	ldr	r2, [r0, #4]
   d86a8:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d86aa:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   d86ac:	7a42      	ldrb	r2, [r0, #9]
   d86ae:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d86b2:	4619      	mov	r1, r3
   d86b4:	aa01      	add	r2, sp, #4
   d86b6:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   d86b8:	f8ad 300d 	strh.w	r3, [sp, #13]
   d86bc:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d86c0:	f7ff fd0c 	bl	d80dc <spark_set_connection_property>
}
   d86c4:	b005      	add	sp, #20
   d86c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d86ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d86ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d86cc:	460e      	mov	r6, r1
   d86ce:	4604      	mov	r4, r0
   d86d0:	f856 3b04 	ldr.w	r3, [r6], #4
   d86d4:	9300      	str	r3, [sp, #0]
   d86d6:	460d      	mov	r5, r1
   d86d8:	a801      	add	r0, sp, #4
   d86da:	4631      	mov	r1, r6
   d86dc:	f7ff fe0d 	bl	d82fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d86e0:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d86e2:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d86e4:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d86e6:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d86e8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d86ea:	2300      	movs	r3, #0
   d86ec:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d86ee:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d86f0:	f7ff fe0a 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d86f4:	4630      	mov	r0, r6
   d86f6:	f7ff fe07 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d86fa:	4628      	mov	r0, r5
   d86fc:	2108      	movs	r1, #8
   d86fe:	f002 ff1c 	bl	db53a <_ZdlPvj>
        return p;
    }
   d8702:	4620      	mov	r0, r4
   d8704:	b002      	add	sp, #8
   d8706:	bd70      	pop	{r4, r5, r6, pc}

000d8708 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d8708:	b513      	push	{r0, r1, r4, lr}
   d870a:	460b      	mov	r3, r1
   d870c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d870e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d8712:	466c      	mov	r4, sp
   d8714:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8718:	e893 0003 	ldmia.w	r3, {r0, r1}
   d871c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8720:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8724:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8728:	b002      	add	sp, #8
   d872a:	bd10      	pop	{r4, pc}

000d872c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d872c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d872e:	b510      	push	{r4, lr}
      if (_M_empty())
   d8730:	b90a      	cbnz	r2, d8736 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8732:	f002 ff08 	bl	db546 <_ZSt25__throw_bad_function_callv>
    }
   d8736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d873a:	68c3      	ldr	r3, [r0, #12]
   d873c:	4718      	bx	r3

000d873e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d873e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8740:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8742:	f100 0110 	add.w	r1, r0, #16
   d8746:	f7ff fff1 	bl	d872c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d874a:	bd08      	pop	{r3, pc}

000d874c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d874c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d874e:	b510      	push	{r4, lr}
      if (_M_empty())
   d8750:	b90a      	cbnz	r2, d8756 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8752:	f002 fef8 	bl	db546 <_ZSt25__throw_bad_function_callv>
    }
   d8756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d875a:	68c3      	ldr	r3, [r0, #12]
   d875c:	4718      	bx	r3

000d875e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d875e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8760:	6800      	ldr	r0, [r0, #0]
   d8762:	f100 0110 	add.w	r1, r0, #16
   d8766:	f7ff fff1 	bl	d874c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d876a:	bd08      	pop	{r3, pc}

000d876c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d876c:	b538      	push	{r3, r4, r5, lr}
   d876e:	2300      	movs	r3, #0
   d8770:	4604      	mov	r4, r0
   d8772:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8774:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8776:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8778:	f7fb fc8d 	bl	d4096 <_Znwj>
   d877c:	b128      	cbz	r0, d878a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d877e:	2301      	movs	r3, #1
   d8780:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8784:	4b02      	ldr	r3, [pc, #8]	; (d8790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8786:	6003      	str	r3, [r0, #0]
   d8788:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d878a:	6020      	str	r0, [r4, #0]
	}
   d878c:	4620      	mov	r0, r4
   d878e:	bd38      	pop	{r3, r4, r5, pc}
   d8790:	000dcc34 	.word	0x000dcc34

000d8794 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8794:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8796:	2300      	movs	r3, #0
   d8798:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d879a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d879c:	4604      	mov	r4, r0
   d879e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d87a0:	b12b      	cbz	r3, d87ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d87a2:	2202      	movs	r2, #2
   d87a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d87a6:	68eb      	ldr	r3, [r5, #12]
   d87a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d87aa:	68ab      	ldr	r3, [r5, #8]
   d87ac:	60a3      	str	r3, [r4, #8]
    }
   d87ae:	4620      	mov	r0, r4
   d87b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d87b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d87b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d87b6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d87b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d87ba:	4668      	mov	r0, sp
   d87bc:	f7ff fef1 	bl	d85a2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d87c0:	f04f 0302 	mov.w	r3, #2
   d87c4:	e8d4 2f4f 	ldrexb	r2, [r4]
   d87c8:	2a00      	cmp	r2, #0
   d87ca:	d103      	bne.n	d87d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d87cc:	e8c4 3f41 	strexb	r1, r3, [r4]
   d87d0:	2900      	cmp	r1, #0
   d87d2:	d1f7      	bne.n	d87c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d87d4:	d125      	bne.n	d8822 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d87d6:	f104 050c 	add.w	r5, r4, #12
   d87da:	4669      	mov	r1, sp
   d87dc:	4628      	mov	r0, r5
   d87de:	f7ff fee0 	bl	d85a2 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d87e2:	f3bf 8f5b 	dmb	ish
   d87e6:	2301      	movs	r3, #1
   d87e8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d87ea:	2000      	movs	r0, #0
   d87ec:	f104 0308 	add.w	r3, r4, #8
   d87f0:	f3bf 8f5b 	dmb	ish
   d87f4:	e853 6f00 	ldrex	r6, [r3]
   d87f8:	e843 0200 	strex	r2, r0, [r3]
   d87fc:	2a00      	cmp	r2, #0
   d87fe:	d1f9      	bne.n	d87f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8800:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8804:	b16e      	cbz	r6, d8822 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8806:	f7ff fbbf 	bl	d7f88 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d880a:	b178      	cbz	r0, d882c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d880c:	4629      	mov	r1, r5
   d880e:	4630      	mov	r0, r6
   d8810:	f7ff ff8c 	bl	d872c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8814:	4630      	mov	r0, r6
   d8816:	f7fb fd8d 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d881a:	2110      	movs	r1, #16
   d881c:	4630      	mov	r0, r6
   d881e:	f002 fe8c 	bl	db53a <_ZdlPvj>
        p_->setError(std::move(error));
   d8822:	4668      	mov	r0, sp
   d8824:	f7ff feca 	bl	d85bc <_ZN8particle5ErrorD1Ev>
    }
   d8828:	b009      	add	sp, #36	; 0x24
   d882a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d882c:	4631      	mov	r1, r6
   d882e:	a802      	add	r0, sp, #8
   d8830:	f7ff ffb0 	bl	d8794 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8834:	68e0      	ldr	r0, [r4, #12]
   d8836:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d883a:	b108      	cbz	r0, d8840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d883c:	f003 fbe8 	bl	dc010 <strdup>
        type_(type) {
   d8840:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8842:	2010      	movs	r0, #16
   d8844:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8848:	f7fb fc25 	bl	d4096 <_Znwj>
   d884c:	4605      	mov	r5, r0
   d884e:	b1e8      	cbz	r0, d888c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8850:	2700      	movs	r7, #0
   d8852:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8854:	2018      	movs	r0, #24
   d8856:	f7fb fc1e 	bl	d4096 <_Znwj>
   d885a:	4604      	mov	r4, r0
   d885c:	b188      	cbz	r0, d8882 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d885e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8860:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8862:	a802      	add	r0, sp, #8
   d8864:	f7ff ff50 	bl	d8708 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8868:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d886a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d886c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d886e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8870:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8872:	a906      	add	r1, sp, #24
   d8874:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8876:	60e3      	str	r3, [r4, #12]
   d8878:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d887c:	9205      	str	r2, [sp, #20]
   d887e:	f7ff fe90 	bl	d85a2 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8882:	4b08      	ldr	r3, [pc, #32]	; (d88a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8884:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8886:	4b08      	ldr	r3, [pc, #32]	; (d88a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8888:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d888a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d888c:	a806      	add	r0, sp, #24
   d888e:	f7ff fe95 	bl	d85bc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8892:	a802      	add	r0, sp, #8
   d8894:	f7fb fd4e 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8898:	2200      	movs	r2, #0
   d889a:	4629      	mov	r1, r5
   d889c:	4803      	ldr	r0, [pc, #12]	; (d88ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d889e:	f7ff fb7b 	bl	d7f98 <application_thread_invoke>
   d88a2:	e7b7      	b.n	d8814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d88a4:	000d873f 	.word	0x000d873f
   d88a8:	000d89d5 	.word	0x000d89d5
   d88ac:	000d82a3 	.word	0x000d82a3

000d88b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d88b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d88b4:	b08a      	sub	sp, #40	; 0x28
   d88b6:	4605      	mov	r5, r0
   d88b8:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d88bc:	460c      	mov	r4, r1
   d88be:	4617      	mov	r7, r2
   d88c0:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d88c2:	f7ff fbd3 	bl	d806c <spark_cloud_flag_connected>
   d88c6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d88c8:	4682      	mov	sl, r0
   d88ca:	bb38      	cbnz	r0, d891c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d88cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d88d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d88d2:	a905      	add	r1, sp, #20
   d88d4:	4630      	mov	r0, r6
   d88d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d88da:	f7ff fe62 	bl	d85a2 <_ZN8particle5ErrorC1EOS0_>
   d88de:	2014      	movs	r0, #20
   d88e0:	f7fb fbd9 	bl	d4096 <_Znwj>
   d88e4:	4604      	mov	r4, r0
   d88e6:	b148      	cbz	r0, d88fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d88e8:	2302      	movs	r3, #2
   d88ea:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d88ec:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d88ee:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d88f2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d88f4:	4631      	mov	r1, r6
   d88f6:	300c      	adds	r0, #12
   d88f8:	f7ff fe53 	bl	d85a2 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d88fc:	4628      	mov	r0, r5
	: __shared_count(__p)
   d88fe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8900:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8904:	f7ff ff32 	bl	d876c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8908:	4630      	mov	r0, r6
   d890a:	f7ff fe57 	bl	d85bc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d890e:	a805      	add	r0, sp, #20
   d8910:	f7ff fe54 	bl	d85bc <_ZN8particle5ErrorD1Ev>
}
   d8914:	4628      	mov	r0, r5
   d8916:	b00a      	add	sp, #40	; 0x28
   d8918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d891c:	230c      	movs	r3, #12
   d891e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8922:	2014      	movs	r0, #20
   d8924:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8928:	9307      	str	r3, [sp, #28]
   d892a:	f7fb fbb4 	bl	d4096 <_Znwj>
   d892e:	4601      	mov	r1, r0
   d8930:	b128      	cbz	r0, d893e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8932:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8936:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d893a:	f880 a001 	strb.w	sl, [r0, #1]
   d893e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8940:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8942:	f7ff ff13 	bl	d876c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8946:	4b22      	ldr	r3, [pc, #136]	; (d89d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8948:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d894a:	2008      	movs	r0, #8
   d894c:	f7fb fba3 	bl	d4096 <_Znwj>
   d8950:	4682      	mov	sl, r0
   d8952:	b128      	cbz	r0, d8960 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8954:	9b03      	ldr	r3, [sp, #12]
   d8956:	f840 3b04 	str.w	r3, [r0], #4
   d895a:	a904      	add	r1, sp, #16
   d895c:	f7ff fccd 	bl	d82fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8960:	9600      	str	r6, [sp, #0]
   d8962:	fa5f f389 	uxtb.w	r3, r9
   d8966:	4642      	mov	r2, r8
   d8968:	4639      	mov	r1, r7
   d896a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d896c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8970:	f7ff fb8c 	bl	d808c <spark_send_event>
   d8974:	b9b8      	cbnz	r0, d89a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8976:	9b03      	ldr	r3, [sp, #12]
   d8978:	785b      	ldrb	r3, [r3, #1]
   d897a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d897e:	b993      	cbnz	r3, d89a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8980:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8984:	a905      	add	r1, sp, #20
   d8986:	a803      	add	r0, sp, #12
   d8988:	9205      	str	r2, [sp, #20]
   d898a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d898e:	f7ff ff11 	bl	d87b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8992:	a805      	add	r0, sp, #20
   d8994:	f7ff fe12 	bl	d85bc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8998:	a805      	add	r0, sp, #20
   d899a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d899c:	f7ff fe95 	bl	d86ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d89a0:	a806      	add	r0, sp, #24
   d89a2:	f7ff fcb1 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d89a6:	9b03      	ldr	r3, [sp, #12]
   d89a8:	9305      	str	r3, [sp, #20]
   d89aa:	a904      	add	r1, sp, #16
   d89ac:	a806      	add	r0, sp, #24
   d89ae:	f7ff fca4 	bl	d82fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d89b2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d89b4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d89b6:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d89b8:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d89ba:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d89bc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d89be:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d89c0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d89c2:	f7ff fca1 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d89c6:	a804      	add	r0, sp, #16
   d89c8:	f7ff fc9e 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d89cc:	e7a2      	b.n	d8914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d89ce:	bf00      	nop
   d89d0:	000d8a99 	.word	0x000d8a99

000d89d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d89d4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d89d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d89d8:	4605      	mov	r5, r0
	  switch (__op)
   d89da:	d007      	beq.n	d89ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d89dc:	2a03      	cmp	r2, #3
   d89de:	d018      	beq.n	d8a12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d89e0:	2a01      	cmp	r2, #1
   d89e2:	d101      	bne.n	d89e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d89e4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d89e6:	6003      	str	r3, [r0, #0]
	}
   d89e8:	2000      	movs	r0, #0
   d89ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d89ec:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d89ee:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d89f0:	f7fb fb51 	bl	d4096 <_Znwj>
   d89f4:	4604      	mov	r4, r0
   d89f6:	b150      	cbz	r0, d8a0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d89f8:	4631      	mov	r1, r6
   d89fa:	f7ff fecb 	bl	d8794 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d89fe:	6930      	ldr	r0, [r6, #16]
   d8a00:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8a04:	b108      	cbz	r0, d8a0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8a06:	f003 fb03 	bl	dc010 <strdup>
        type_(type) {
   d8a0a:	6120      	str	r0, [r4, #16]
   d8a0c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8a0e:	602c      	str	r4, [r5, #0]
	}
   d8a10:	e7ea      	b.n	d89e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8a12:	6804      	ldr	r4, [r0, #0]
   d8a14:	2c00      	cmp	r4, #0
   d8a16:	d0e7      	beq.n	d89e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8a18:	f104 0010 	add.w	r0, r4, #16
   d8a1c:	f7ff fdce 	bl	d85bc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8a20:	4620      	mov	r0, r4
   d8a22:	f7fb fc87 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8a26:	2118      	movs	r1, #24
   d8a28:	4620      	mov	r0, r4
   d8a2a:	f002 fd86 	bl	db53a <_ZdlPvj>
   d8a2e:	e7db      	b.n	d89e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8a30 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8a30:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8a32:	2300      	movs	r3, #0
   d8a34:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8a36:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8a38:	4604      	mov	r4, r0
   d8a3a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8a3c:	b12b      	cbz	r3, d8a4a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8a3e:	2202      	movs	r2, #2
   d8a40:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8a42:	68eb      	ldr	r3, [r5, #12]
   d8a44:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8a46:	68ab      	ldr	r3, [r5, #8]
   d8a48:	60a3      	str	r3, [r4, #8]
    }
   d8a4a:	4620      	mov	r0, r4
   d8a4c:	bd38      	pop	{r3, r4, r5, pc}

000d8a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8a4e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8a50:	b570      	push	{r4, r5, r6, lr}
   d8a52:	4604      	mov	r4, r0
	  switch (__op)
   d8a54:	d007      	beq.n	d8a66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8a56:	2a03      	cmp	r2, #3
   d8a58:	d012      	beq.n	d8a80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8a5a:	2a01      	cmp	r2, #1
   d8a5c:	d101      	bne.n	d8a62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8a5e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8a60:	6003      	str	r3, [r0, #0]
	}
   d8a62:	2000      	movs	r0, #0
   d8a64:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a66:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8a68:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8a6a:	f7fb fb14 	bl	d4096 <_Znwj>
   d8a6e:	4605      	mov	r5, r0
   d8a70:	b120      	cbz	r0, d8a7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8a72:	4631      	mov	r1, r6
   d8a74:	f7ff ffdc 	bl	d8a30 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8a78:	7c33      	ldrb	r3, [r6, #16]
   d8a7a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8a7c:	6025      	str	r5, [r4, #0]
	}
   d8a7e:	e7f0      	b.n	d8a62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8a80:	6804      	ldr	r4, [r0, #0]
   d8a82:	2c00      	cmp	r4, #0
   d8a84:	d0ed      	beq.n	d8a62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8a86:	4620      	mov	r0, r4
   d8a88:	f7fb fc54 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8a8c:	2114      	movs	r1, #20
   d8a8e:	4620      	mov	r0, r4
   d8a90:	f002 fd53 	bl	db53a <_ZdlPvj>
   d8a94:	e7e5      	b.n	d8a62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8a98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8a9a:	b089      	sub	sp, #36	; 0x24
   d8a9c:	4604      	mov	r4, r0
   d8a9e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8aa0:	a801      	add	r0, sp, #4
   d8aa2:	4611      	mov	r1, r2
   d8aa4:	f7ff fe11 	bl	d86ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8aa8:	b1a4      	cbz	r4, d8ad4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8aaa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8aac:	b11d      	cbz	r5, d8ab6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8aae:	4628      	mov	r0, r5
   d8ab0:	f003 faae 	bl	dc010 <strdup>
   d8ab4:	4605      	mov	r5, r0
   d8ab6:	a801      	add	r0, sp, #4
   d8ab8:	a903      	add	r1, sp, #12
        type_(type) {
   d8aba:	9503      	str	r5, [sp, #12]
   d8abc:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8ac0:	f7ff fe78 	bl	d87b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8ac4:	a803      	add	r0, sp, #12
   d8ac6:	f7ff fd79 	bl	d85bc <_ZN8particle5ErrorD1Ev>
   d8aca:	a802      	add	r0, sp, #8
   d8acc:	f7ff fc1c 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8ad0:	b009      	add	sp, #36	; 0x24
   d8ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8ad4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8ad6:	2301      	movs	r3, #1
   d8ad8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8adc:	2a00      	cmp	r2, #0
   d8ade:	d103      	bne.n	d8ae8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8ae0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8ae4:	2900      	cmp	r1, #0
   d8ae6:	d1f7      	bne.n	d8ad8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8ae8:	d1ef      	bne.n	d8aca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8aea:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8aec:	f3bf 8f5b 	dmb	ish
   d8af0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8af2:	1d2b      	adds	r3, r5, #4
   d8af4:	f3bf 8f5b 	dmb	ish
   d8af8:	e853 6f00 	ldrex	r6, [r3]
   d8afc:	e843 4200 	strex	r2, r4, [r3]
   d8b00:	2a00      	cmp	r2, #0
   d8b02:	d1f9      	bne.n	d8af8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8b04:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8b08:	2e00      	cmp	r6, #0
   d8b0a:	d0de      	beq.n	d8aca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8b0c:	4620      	mov	r0, r4
   d8b0e:	f7ff fa3b 	bl	d7f88 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8b12:	4607      	mov	r7, r0
   d8b14:	b160      	cbz	r0, d8b30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8b16:	f105 010c 	add.w	r1, r5, #12
   d8b1a:	4630      	mov	r0, r6
   d8b1c:	f7ff fe16 	bl	d874c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8b20:	4630      	mov	r0, r6
   d8b22:	f7fb fc07 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8b26:	2110      	movs	r1, #16
   d8b28:	4630      	mov	r0, r6
   d8b2a:	f002 fd06 	bl	db53a <_ZdlPvj>
   d8b2e:	e7cc      	b.n	d8aca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8b30:	4631      	mov	r1, r6
   d8b32:	a803      	add	r0, sp, #12
   d8b34:	f7ff ff7c 	bl	d8a30 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8b38:	7b2b      	ldrb	r3, [r5, #12]
   d8b3a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8b3e:	2010      	movs	r0, #16
   d8b40:	f7fb faa9 	bl	d4096 <_Znwj>
   d8b44:	4605      	mov	r5, r0
   d8b46:	b1d0      	cbz	r0, d8b7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8b48:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b4a:	2014      	movs	r0, #20
   d8b4c:	f7fb faa3 	bl	d4096 <_Znwj>
   d8b50:	4604      	mov	r4, r0
   d8b52:	b178      	cbz	r0, d8b74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8b54:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8b56:	4601      	mov	r1, r0
   d8b58:	a803      	add	r0, sp, #12
   d8b5a:	f7ff fdd5 	bl	d8708 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b5e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8b60:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b62:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b64:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8b66:	9205      	str	r2, [sp, #20]
   d8b68:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b6a:	60e3      	str	r3, [r4, #12]
   d8b6c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8b70:	9206      	str	r2, [sp, #24]
   d8b72:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8b74:	4b06      	ldr	r3, [pc, #24]	; (d8b90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8b76:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8b78:	4b06      	ldr	r3, [pc, #24]	; (d8b94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b7a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8b7c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8b7e:	a803      	add	r0, sp, #12
   d8b80:	f7fb fbd8 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8b84:	2200      	movs	r2, #0
   d8b86:	4629      	mov	r1, r5
   d8b88:	4803      	ldr	r0, [pc, #12]	; (d8b98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8b8a:	f7ff fa05 	bl	d7f98 <application_thread_invoke>
   d8b8e:	e7c7      	b.n	d8b20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8b90:	000d875f 	.word	0x000d875f
   d8b94:	000d8a4f 	.word	0x000d8a4f
   d8b98:	000d82a3 	.word	0x000d82a3

000d8b9c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8b9c:	2200      	movs	r2, #0
   d8b9e:	6840      	ldr	r0, [r0, #4]
   d8ba0:	4611      	mov	r1, r2
   d8ba2:	f7ff baeb 	b.w	d817c <network_listening>

000d8ba6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8ba6:	2200      	movs	r2, #0
   d8ba8:	6840      	ldr	r0, [r0, #4]
   d8baa:	4611      	mov	r1, r2
   d8bac:	f7ff baf6 	b.w	d819c <network_get_listen_timeout>

000d8bb0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8bb0:	6840      	ldr	r0, [r0, #4]
   d8bb2:	2200      	movs	r2, #0
   d8bb4:	f7ff baea 	b.w	d818c <network_set_listen_timeout>

000d8bb8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8bb8:	6840      	ldr	r0, [r0, #4]
   d8bba:	2200      	movs	r2, #0
   d8bbc:	f081 0101 	eor.w	r1, r1, #1
   d8bc0:	f7ff bad4 	b.w	d816c <network_listen>

000d8bc4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8bc4:	2300      	movs	r3, #0
   d8bc6:	6840      	ldr	r0, [r0, #4]
   d8bc8:	461a      	mov	r2, r3
   d8bca:	4619      	mov	r1, r3
   d8bcc:	f7ff bac6 	b.w	d815c <network_off>

000d8bd0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8bd0:	2300      	movs	r3, #0
   d8bd2:	6840      	ldr	r0, [r0, #4]
   d8bd4:	461a      	mov	r2, r3
   d8bd6:	4619      	mov	r1, r3
   d8bd8:	f7ff bab8 	b.w	d814c <network_on>

000d8bdc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8bdc:	2200      	movs	r2, #0
   d8bde:	6840      	ldr	r0, [r0, #4]
   d8be0:	4611      	mov	r1, r2
   d8be2:	f7ff baab 	b.w	d813c <network_ready>

000d8be6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8be6:	2200      	movs	r2, #0
   d8be8:	6840      	ldr	r0, [r0, #4]
   d8bea:	4611      	mov	r1, r2
   d8bec:	f7ff ba96 	b.w	d811c <network_connecting>

000d8bf0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8bf0:	6840      	ldr	r0, [r0, #4]
   d8bf2:	2200      	movs	r2, #0
   d8bf4:	2102      	movs	r1, #2
   d8bf6:	f7ff ba99 	b.w	d812c <network_disconnect>

000d8bfa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8bfa:	2300      	movs	r3, #0
   d8bfc:	6840      	ldr	r0, [r0, #4]
   d8bfe:	461a      	mov	r2, r3
   d8c00:	f7ff ba84 	b.w	d810c <network_connect>

000d8c04 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8c04:	4b02      	ldr	r3, [pc, #8]	; (d8c10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8c06:	2203      	movs	r2, #3
   d8c08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8c0a:	4a02      	ldr	r2, [pc, #8]	; (d8c14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8c0c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8c0e:	4770      	bx	lr
   d8c10:	2003e538 	.word	0x2003e538
   d8c14:	000dcc50 	.word	0x000dcc50

000d8c18 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8c18:	6800      	ldr	r0, [r0, #0]
   d8c1a:	f000 b95d 	b.w	d8ed8 <_ZN7TwoWire4lockEv>

000d8c1e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8c1e:	b510      	push	{r4, lr}
   d8c20:	4604      	mov	r4, r0
      lock_(_lock) {
   d8c22:	6001      	str	r1, [r0, #0]
   d8c24:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d8c26:	b10a      	cbz	r2, d8c2c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8c28:	f7ff fff6 	bl	d8c18 <_ZN9FuelGauge4lockEv>
}
   d8c2c:	4620      	mov	r0, r4
   d8c2e:	bd10      	pop	{r4, pc}

000d8c30 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d8c30:	b513      	push	{r0, r1, r4, lr}
   d8c32:	4604      	mov	r4, r0
   d8c34:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d8c36:	f002 fc53 	bl	db4e0 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d8c3a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d8c3c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d8c3e:	4620      	mov	r0, r4
   d8c40:	f7ff ffed 	bl	d8c1e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d8c44:	4620      	mov	r0, r4
   d8c46:	b002      	add	sp, #8
   d8c48:	bd10      	pop	{r4, pc}

000d8c4a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d8c4a:	6800      	ldr	r0, [r0, #0]
   d8c4c:	f000 b94d 	b.w	d8eea <_ZN7TwoWire6unlockEv>

000d8c50 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d8c50:	b510      	push	{r4, lr}
    if (lock_) {
   d8c52:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d8c54:	4604      	mov	r4, r0
    if (lock_) {
   d8c56:	b10b      	cbz	r3, d8c5c <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d8c58:	f7ff fff7 	bl	d8c4a <_ZN9FuelGauge6unlockEv>
}
   d8c5c:	4620      	mov	r0, r4
   d8c5e:	bd10      	pop	{r4, pc}

000d8c60 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d8c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8c64:	4604      	mov	r4, r0
   d8c66:	460d      	mov	r5, r1
   d8c68:	4617      	mov	r7, r2
   d8c6a:	461e      	mov	r6, r3
   d8c6c:	f7ff ffd4 	bl	d8c18 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8c70:	2336      	movs	r3, #54	; 0x36
   d8c72:	f88d 3000 	strb.w	r3, [sp]
   d8c76:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8c78:	6820      	ldr	r0, [r4, #0]
   d8c7a:	9301      	str	r3, [sp, #4]
   d8c7c:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d8c80:	230a      	movs	r3, #10
   d8c82:	4669      	mov	r1, sp
   d8c84:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8c86:	f88d 8008 	strb.w	r8, [sp, #8]
   d8c8a:	f000 f906 	bl	d8e9a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d8c8e:	6820      	ldr	r0, [r4, #0]
   d8c90:	6803      	ldr	r3, [r0, #0]
   d8c92:	4629      	mov	r1, r5
   d8c94:	689b      	ldr	r3, [r3, #8]
   d8c96:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8c98:	6820      	ldr	r0, [r4, #0]
   d8c9a:	4641      	mov	r1, r8
   d8c9c:	f000 f915 	bl	d8eca <_ZN7TwoWire15endTransmissionEh>
   d8ca0:	4605      	mov	r5, r0
   d8ca2:	b140      	cbz	r0, d8cb6 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d8ca4:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d8ca8:	4620      	mov	r0, r4
   d8caa:	f7ff ffce 	bl	d8c4a <_ZN9FuelGauge6unlockEv>
}
   d8cae:	4628      	mov	r0, r5
   d8cb0:	b004      	add	sp, #16
   d8cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d8cb6:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d8cb8:	6820      	ldr	r0, [r4, #0]
   d8cba:	9301      	str	r3, [sp, #4]
   d8cbc:	4669      	mov	r1, sp
   d8cbe:	f000 f8b9 	bl	d8e34 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d8cc2:	2802      	cmp	r0, #2
   d8cc4:	d1ee      	bne.n	d8ca4 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d8cc6:	6820      	ldr	r0, [r4, #0]
   d8cc8:	6803      	ldr	r3, [r0, #0]
   d8cca:	695b      	ldr	r3, [r3, #20]
   d8ccc:	4798      	blx	r3
   d8cce:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d8cd0:	6820      	ldr	r0, [r4, #0]
   d8cd2:	6803      	ldr	r3, [r0, #0]
   d8cd4:	695b      	ldr	r3, [r3, #20]
   d8cd6:	4798      	blx	r3
   d8cd8:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d8cda:	e7e5      	b.n	d8ca8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d8cdc <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   d8cdc:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   d8cde:	460a      	mov	r2, r1
   d8ce0:	210c      	movs	r1, #12
   d8ce2:	f7ff bfbd 	b.w	d8c60 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d8ce6 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d8ce6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8cea:	4616      	mov	r6, r2
   d8cec:	4604      	mov	r4, r0
   d8cee:	461d      	mov	r5, r3
   d8cf0:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d8cf2:	f7ff ff91 	bl	d8c18 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8cf6:	2336      	movs	r3, #54	; 0x36
   d8cf8:	f88d 3000 	strb.w	r3, [sp]
   d8cfc:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8cfe:	6820      	ldr	r0, [r4, #0]
   d8d00:	9301      	str	r3, [sp, #4]
   d8d02:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d8d06:	230a      	movs	r3, #10
   d8d08:	4669      	mov	r1, sp
   d8d0a:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8d0c:	f88d 8008 	strb.w	r8, [sp, #8]
   d8d10:	f000 f8c3 	bl	d8e9a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d8d14:	6820      	ldr	r0, [r4, #0]
   d8d16:	6803      	ldr	r3, [r0, #0]
   d8d18:	4639      	mov	r1, r7
   d8d1a:	689b      	ldr	r3, [r3, #8]
   d8d1c:	4798      	blx	r3
    i2c_.write(MSB);
   d8d1e:	6820      	ldr	r0, [r4, #0]
   d8d20:	6803      	ldr	r3, [r0, #0]
   d8d22:	4631      	mov	r1, r6
   d8d24:	689b      	ldr	r3, [r3, #8]
   d8d26:	4798      	blx	r3
    i2c_.write(LSB);
   d8d28:	6820      	ldr	r0, [r4, #0]
   d8d2a:	6803      	ldr	r3, [r0, #0]
   d8d2c:	4629      	mov	r1, r5
   d8d2e:	689b      	ldr	r3, [r3, #8]
   d8d30:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8d32:	4641      	mov	r1, r8
   d8d34:	6820      	ldr	r0, [r4, #0]
   d8d36:	f000 f8c8 	bl	d8eca <_ZN7TwoWire15endTransmissionEh>
   d8d3a:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d8d3c:	4620      	mov	r0, r4
   d8d3e:	bf0c      	ite	eq
   d8d40:	2500      	moveq	r5, #0
   d8d42:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d8d46:	f7ff ff80 	bl	d8c4a <_ZN9FuelGauge6unlockEv>
}
   d8d4a:	4628      	mov	r0, r5
   d8d4c:	b004      	add	sp, #16
   d8d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8d52 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d8d52:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d8d54:	2240      	movs	r2, #64	; 0x40
   d8d56:	2300      	movs	r3, #0
   d8d58:	2106      	movs	r1, #6
   d8d5a:	f7ff ffc4 	bl	d8ce6 <_ZN9FuelGauge13writeRegisterEhhh>
}
   d8d5e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d8d62:	bd08      	pop	{r3, pc}

000d8d64 <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   d8d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8d66:	4605      	mov	r5, r0
      { _M_device.lock(); }
   d8d68:	f7ff ff56 	bl	d8c18 <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   d8d6c:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   d8d6e:	f10d 0207 	add.w	r2, sp, #7
   d8d72:	f10d 0106 	add.w	r1, sp, #6
   d8d76:	4628      	mov	r0, r5
    byte MSB = 0;
   d8d78:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d8d7c:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   d8d80:	f7ff ffac 	bl	d8cdc <_ZN9FuelGauge18readConfigRegisterERhS0_>
   d8d84:	1e04      	subs	r4, r0, #0
   d8d86:	db0b      	blt.n	d8da0 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   d8d88:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d8d8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d8d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d8d94:	210c      	movs	r1, #12
   d8d96:	4628      	mov	r0, r5
   d8d98:	f7ff ffa5 	bl	d8ce6 <_ZN9FuelGauge13writeRegisterEhhh>
   d8d9c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   d8da0:	4628      	mov	r0, r5
   d8da2:	f7ff ff52 	bl	d8c4a <_ZN9FuelGauge6unlockEv>
}
   d8da6:	4620      	mov	r0, r4
   d8da8:	b003      	add	sp, #12
   d8daa:	bd30      	pop	{r4, r5, pc}

000d8dac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8dac:	4770      	bx	lr

000d8dae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8db0:	4606      	mov	r6, r0
   d8db2:	4615      	mov	r5, r2
   d8db4:	460c      	mov	r4, r1
   d8db6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8db8:	42bc      	cmp	r4, r7
   d8dba:	d006      	beq.n	d8dca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8dbc:	6833      	ldr	r3, [r6, #0]
   d8dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8dc2:	689b      	ldr	r3, [r3, #8]
   d8dc4:	4630      	mov	r0, r6
   d8dc6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8dc8:	e7f6      	b.n	d8db8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8dca:	4628      	mov	r0, r5
   d8dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8dce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8dce:	7c00      	ldrb	r0, [r0, #16]
   d8dd0:	2200      	movs	r2, #0
   d8dd2:	f7fe bf77 	b.w	d7cc4 <hal_i2c_write>

000d8dd6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8dd6:	7c00      	ldrb	r0, [r0, #16]
   d8dd8:	2100      	movs	r1, #0
   d8dda:	f7fe bf7b 	b.w	d7cd4 <hal_i2c_available>

000d8dde <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8dde:	7c00      	ldrb	r0, [r0, #16]
   d8de0:	2100      	movs	r1, #0
   d8de2:	f7fe bf7f 	b.w	d7ce4 <hal_i2c_read>

000d8de6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8de6:	7c00      	ldrb	r0, [r0, #16]
   d8de8:	2100      	movs	r1, #0
   d8dea:	f7fe bf83 	b.w	d7cf4 <hal_i2c_peek>

000d8dee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8dee:	7c00      	ldrb	r0, [r0, #16]
   d8df0:	2100      	movs	r1, #0
   d8df2:	f7fe bf87 	b.w	d7d04 <hal_i2c_flush>

000d8df6 <_ZN7TwoWireD0Ev>:
   d8df6:	b510      	push	{r4, lr}
   d8df8:	2114      	movs	r1, #20
   d8dfa:	4604      	mov	r4, r0
   d8dfc:	f002 fb9d 	bl	db53a <_ZdlPvj>
   d8e00:	4620      	mov	r0, r4
   d8e02:	bd10      	pop	{r4, pc}

000d8e04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8e04:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8e0a:	4604      	mov	r4, r0
   d8e0c:	4608      	mov	r0, r1
   d8e0e:	2100      	movs	r1, #0
   d8e10:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8e14:	4b03      	ldr	r3, [pc, #12]	; (d8e24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8e16:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8e18:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8e1a:	4611      	mov	r1, r2
   d8e1c:	f7fe ff82 	bl	d7d24 <hal_i2c_init>
}
   d8e20:	4620      	mov	r0, r4
   d8e22:	bd10      	pop	{r4, pc}
   d8e24:	000dcc8c 	.word	0x000dcc8c

000d8e28 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8e28:	2300      	movs	r3, #0
   d8e2a:	7c00      	ldrb	r0, [r0, #16]
   d8e2c:	461a      	mov	r2, r3
   d8e2e:	4619      	mov	r1, r3
   d8e30:	f7fe bf30 	b.w	d7c94 <hal_i2c_begin>

000d8e34 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8e34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8e36:	2200      	movs	r2, #0
   d8e38:	2314      	movs	r3, #20
   d8e3a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8e3e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8e42:	780b      	ldrb	r3, [r1, #0]
   d8e44:	f88d 3008 	strb.w	r3, [sp, #8]
   d8e48:	684b      	ldr	r3, [r1, #4]
   d8e4a:	9303      	str	r3, [sp, #12]
   d8e4c:	68cb      	ldr	r3, [r1, #12]
   d8e4e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8e50:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8e52:	7a0b      	ldrb	r3, [r1, #8]
   d8e54:	9305      	str	r3, [sp, #20]
   d8e56:	a901      	add	r1, sp, #4
   d8e58:	f7fe ff7c 	bl	d7d54 <hal_i2c_request_ex>
}
   d8e5c:	b007      	add	sp, #28
   d8e5e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8e62 <_ZN7TwoWire11requestFromEhjh>:
{
   d8e62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8e64:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8e66:	f88d 1000 	strb.w	r1, [sp]
   d8e6a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8e6e:	9103      	str	r1, [sp, #12]
   d8e70:	bf18      	it	ne
   d8e72:	2301      	movne	r3, #1
   d8e74:	4669      	mov	r1, sp
    size_ = size;
   d8e76:	9201      	str	r2, [sp, #4]
   d8e78:	f88d 3008 	strb.w	r3, [sp, #8]
   d8e7c:	f7ff ffda 	bl	d8e34 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8e80:	b005      	add	sp, #20
   d8e82:	f85d fb04 	ldr.w	pc, [sp], #4

000d8e86 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d8e86:	2301      	movs	r3, #1
   d8e88:	f7ff bfeb 	b.w	d8e62 <_ZN7TwoWire11requestFromEhjh>

000d8e8c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8e8c:	7c00      	ldrb	r0, [r0, #16]
   d8e8e:	2200      	movs	r2, #0
   d8e90:	f7fe bf08 	b.w	d7ca4 <hal_i2c_begin_transmission>

000d8e94 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8e94:	b2c9      	uxtb	r1, r1
   d8e96:	f7ff bff9 	b.w	d8e8c <_ZN7TwoWire17beginTransmissionEh>

000d8e9a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d8e9a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8e9c:	2300      	movs	r3, #0
   d8e9e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d8ea2:	684a      	ldr	r2, [r1, #4]
   d8ea4:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d8ea6:	2314      	movs	r3, #20
    };
   d8ea8:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8eaa:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d8eae:	780b      	ldrb	r3, [r1, #0]
    };
   d8eb0:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8eb2:	7a0a      	ldrb	r2, [r1, #8]
   d8eb4:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d8eb6:	7c00      	ldrb	r0, [r0, #16]
    };
   d8eb8:	f88d 3008 	strb.w	r3, [sp, #8]
   d8ebc:	aa01      	add	r2, sp, #4
   d8ebe:	4619      	mov	r1, r3
   d8ec0:	f7fe fef0 	bl	d7ca4 <hal_i2c_begin_transmission>
}
   d8ec4:	b007      	add	sp, #28
   d8ec6:	f85d fb04 	ldr.w	pc, [sp], #4

000d8eca <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8eca:	7c00      	ldrb	r0, [r0, #16]
   d8ecc:	2200      	movs	r2, #0
   d8ece:	f7fe bef1 	b.w	d7cb4 <hal_i2c_end_transmission>

000d8ed2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8ed2:	2101      	movs	r1, #1
   d8ed4:	f7ff bff9 	b.w	d8eca <_ZN7TwoWire15endTransmissionEh>

000d8ed8 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8ed8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8eda:	2100      	movs	r1, #0
   d8edc:	7c00      	ldrb	r0, [r0, #16]
   d8ede:	f7fe ff29 	bl	d7d34 <hal_i2c_lock>
}
   d8ee2:	fab0 f080 	clz	r0, r0
   d8ee6:	0940      	lsrs	r0, r0, #5
   d8ee8:	bd08      	pop	{r3, pc}

000d8eea <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8eea:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8eec:	2100      	movs	r1, #0
   d8eee:	7c00      	ldrb	r0, [r0, #16]
   d8ef0:	f7fe ff28 	bl	d7d44 <hal_i2c_unlock>
}
   d8ef4:	fab0 f080 	clz	r0, r0
   d8ef8:	0940      	lsrs	r0, r0, #5
   d8efa:	bd08      	pop	{r3, pc}

000d8efc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8efc:	4700      	bx	r0
	...

000d8f00 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8f00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8f04:	2400      	movs	r4, #0
{
   d8f06:	461d      	mov	r5, r3
   d8f08:	460f      	mov	r7, r1
   d8f0a:	4690      	mov	r8, r2
   d8f0c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8f0e:	f7fe feb1 	bl	d7c74 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8f12:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8f14:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8f18:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8f1c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8f20:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8f24:	bfa2      	ittt	ge
   d8f26:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8f2a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8f2e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8f30:	4907      	ldr	r1, [pc, #28]	; (d8f50 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8f32:	9400      	str	r4, [sp, #0]
   d8f34:	4643      	mov	r3, r8
   d8f36:	463a      	mov	r2, r7
   d8f38:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8f3a:	bfa8      	it	ge
   d8f3c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8f40:	f7fe fe90 	bl	d7c64 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8f44:	fab0 f080 	clz	r0, r0
   d8f48:	0940      	lsrs	r0, r0, #5
   d8f4a:	b004      	add	sp, #16
   d8f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8f50:	000d8efd 	.word	0x000d8efd

000d8f54 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d8f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f56:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d8f58:	f7fe fe8c 	bl	d7c74 <HAL_Interrupts_Detach>
   d8f5c:	4605      	mov	r5, r0
   d8f5e:	b970      	cbnz	r0, d8f7e <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   d8f60:	4f08      	ldr	r7, [pc, #32]	; (d8f84 <_Z15detachInterruptt+0x30>)
   d8f62:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   d8f66:	b146      	cbz	r6, d8f7a <_Z15detachInterruptt+0x26>
   d8f68:	4630      	mov	r0, r6
   d8f6a:	f7fb f9e3 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d8f6e:	2110      	movs	r1, #16
   d8f70:	4630      	mov	r0, r6
   d8f72:	f002 fae2 	bl	db53a <_ZdlPvj>
        handlers[pin] = nullptr;
   d8f76:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   d8f7a:	2001      	movs	r0, #1
   d8f7c:	e000      	b.n	d8f80 <_Z15detachInterruptt+0x2c>
        return false;
   d8f7e:	2000      	movs	r0, #0
    }
    return true;
}
   d8f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8f82:	bf00      	nop
   d8f84:	2003e540 	.word	0x2003e540

000d8f88 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8f88:	4770      	bx	lr

000d8f8a <_ZN9IPAddressD0Ev>:
   d8f8a:	b510      	push	{r4, lr}
   d8f8c:	2118      	movs	r1, #24
   d8f8e:	4604      	mov	r4, r0
   d8f90:	f002 fad3 	bl	db53a <_ZdlPvj>
   d8f94:	4620      	mov	r0, r4
   d8f96:	bd10      	pop	{r4, pc}

000d8f98 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8f98:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8f9a:	7d03      	ldrb	r3, [r0, #20]
   d8f9c:	2b06      	cmp	r3, #6
{
   d8f9e:	b08d      	sub	sp, #52	; 0x34
   d8fa0:	460e      	mov	r6, r1
   d8fa2:	f100 0704 	add.w	r7, r0, #4
   d8fa6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8faa:	d012      	beq.n	d8fd2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d8fac:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8fb0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8fb4:	220a      	movs	r2, #10
   d8fb6:	4630      	mov	r0, r6
   d8fb8:	f001 fb8e 	bl	da6d8 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8fbc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8fbe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8fc0:	d019      	beq.n	d8ff6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8fc2:	2c00      	cmp	r4, #0
   d8fc4:	d0f4      	beq.n	d8fb0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8fc6:	212e      	movs	r1, #46	; 0x2e
   d8fc8:	4630      	mov	r0, r6
   d8fca:	f001 fb76 	bl	da6ba <_ZN5Print5printEc>
   d8fce:	4404      	add	r4, r0
   d8fd0:	e7ee      	b.n	d8fb0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8fd2:	232f      	movs	r3, #47	; 0x2f
   d8fd4:	466a      	mov	r2, sp
   d8fd6:	4639      	mov	r1, r7
   d8fd8:	200a      	movs	r0, #10
		buf[0] = 0;
   d8fda:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8fde:	f7fe fec1 	bl	d7d64 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8fe2:	4668      	mov	r0, sp
   d8fe4:	f003 f831 	bl	dc04a <strlen>
   d8fe8:	6833      	ldr	r3, [r6, #0]
   d8fea:	4602      	mov	r2, r0
   d8fec:	68db      	ldr	r3, [r3, #12]
   d8fee:	4669      	mov	r1, sp
   d8ff0:	4630      	mov	r0, r6
   d8ff2:	4798      	blx	r3
   d8ff4:	4604      	mov	r4, r0
    }
    return n;
}
   d8ff6:	4620      	mov	r0, r4
   d8ff8:	b00d      	add	sp, #52	; 0x34
   d8ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8ffc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8ffc:	b510      	push	{r4, lr}
   d8ffe:	4b05      	ldr	r3, [pc, #20]	; (d9014 <_ZN9IPAddressC1Ev+0x18>)
   d9000:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9002:	2211      	movs	r2, #17
   d9004:	f840 3b04 	str.w	r3, [r0], #4
   d9008:	2100      	movs	r1, #0
   d900a:	f002 ffab 	bl	dbf64 <memset>
}
   d900e:	4620      	mov	r0, r4
   d9010:	bd10      	pop	{r4, pc}
   d9012:	bf00      	nop
   d9014:	000dccb4 	.word	0x000dccb4

000d9018 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9018:	4603      	mov	r3, r0
   d901a:	4a07      	ldr	r2, [pc, #28]	; (d9038 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d901c:	b510      	push	{r4, lr}
   d901e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d9022:	f101 0210 	add.w	r2, r1, #16
   d9026:	f851 4b04 	ldr.w	r4, [r1], #4
   d902a:	f843 4b04 	str.w	r4, [r3], #4
   d902e:	4291      	cmp	r1, r2
   d9030:	d1f9      	bne.n	d9026 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9032:	780a      	ldrb	r2, [r1, #0]
   d9034:	701a      	strb	r2, [r3, #0]
}
   d9036:	bd10      	pop	{r4, pc}
   d9038:	000dccb4 	.word	0x000dccb4

000d903c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d903c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d903e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9042:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9046:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d904a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d904e:	2304      	movs	r3, #4
   d9050:	6041      	str	r1, [r0, #4]
   d9052:	7503      	strb	r3, [r0, #20]
}
   d9054:	bd10      	pop	{r4, pc}

000d9056 <_ZN9IPAddressaSEPKh>:
{
   d9056:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9058:	78cb      	ldrb	r3, [r1, #3]
   d905a:	9300      	str	r3, [sp, #0]
   d905c:	788b      	ldrb	r3, [r1, #2]
   d905e:	784a      	ldrb	r2, [r1, #1]
   d9060:	7809      	ldrb	r1, [r1, #0]
   d9062:	f7ff ffeb 	bl	d903c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9066:	b002      	add	sp, #8
   d9068:	bd10      	pop	{r4, pc}

000d906a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d906a:	f100 0310 	add.w	r3, r0, #16
   d906e:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d9070:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d9074:	2901      	cmp	r1, #1
   d9076:	4618      	mov	r0, r3
   d9078:	d108      	bne.n	d908c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d907a:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d907e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d9082:	3a01      	subs	r2, #1
   d9084:	f103 0310 	add.w	r3, r3, #16
   d9088:	d1f2      	bne.n	d9070 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d908a:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d908c:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d908e:	bf04      	itt	eq
   d9090:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d9094:	1852      	addeq	r2, r2, r1
   d9096:	e7f4      	b.n	d9082 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d9098 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d9098:	b40e      	push	{r1, r2, r3}
   d909a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d909c:	b088      	sub	sp, #32
   d909e:	af00      	add	r7, sp, #0
   d90a0:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d90a4:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d90a6:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d90aa:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d90ac:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d90ae:	462b      	mov	r3, r5
   d90b0:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d90b2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d90b4:	f7ff f8b2 	bl	d821c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d90b8:	280f      	cmp	r0, #15
   d90ba:	687a      	ldr	r2, [r7, #4]
   d90bc:	d91a      	bls.n	d90f4 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d90be:	f100 0308 	add.w	r3, r0, #8
   d90c2:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d90c6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d90c8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d90cc:	1c41      	adds	r1, r0, #1
   d90ce:	462b      	mov	r3, r5
   d90d0:	4668      	mov	r0, sp
        va_start(args, fmt);
   d90d2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d90d4:	f7ff f8a2 	bl	d821c <vsnprintf>
        if (n > 0) {
   d90d8:	1e02      	subs	r2, r0, #0
   d90da:	dd04      	ble.n	d90e6 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d90dc:	6823      	ldr	r3, [r4, #0]
   d90de:	4669      	mov	r1, sp
   d90e0:	689b      	ldr	r3, [r3, #8]
   d90e2:	4620      	mov	r0, r4
   d90e4:	4798      	blx	r3
   d90e6:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d90e8:	3720      	adds	r7, #32
   d90ea:	46bd      	mov	sp, r7
   d90ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d90f0:	b003      	add	sp, #12
   d90f2:	4770      	bx	lr
    } else if (n > 0) {
   d90f4:	2800      	cmp	r0, #0
   d90f6:	d0f7      	beq.n	d90e8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d90f8:	6823      	ldr	r3, [r4, #0]
   d90fa:	4602      	mov	r2, r0
   d90fc:	689b      	ldr	r3, [r3, #8]
   d90fe:	f107 0110 	add.w	r1, r7, #16
   d9102:	4620      	mov	r0, r4
   d9104:	4798      	blx	r3
}
   d9106:	e7ef      	b.n	d90e8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d9108 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9108:	b510      	push	{r4, lr}
          _M_dispose();
   d910a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d910c:	4604      	mov	r4, r0
          _M_dispose();
   d910e:	689b      	ldr	r3, [r3, #8]
   d9110:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d9112:	68a3      	ldr	r3, [r4, #8]
   d9114:	3b01      	subs	r3, #1
   d9116:	60a3      	str	r3, [r4, #8]
   d9118:	b92b      	cbnz	r3, d9126 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d911a:	6823      	ldr	r3, [r4, #0]
   d911c:	4620      	mov	r0, r4
   d911e:	68db      	ldr	r3, [r3, #12]
    }
   d9120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d9124:	4718      	bx	r3
    }
   d9126:	bd10      	pop	{r4, pc}

000d9128 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9128:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d912a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d912c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d9130:	689b      	ldr	r3, [r3, #8]
   d9132:	2201      	movs	r2, #1
   d9134:	f10d 0107 	add.w	r1, sp, #7
   d9138:	4798      	blx	r3
}
   d913a:	b003      	add	sp, #12
   d913c:	f85d fb04 	ldr.w	pc, [sp], #4

000d9140 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d9140:	b538      	push	{r3, r4, r5, lr}
   d9142:	680b      	ldr	r3, [r1, #0]
   d9144:	6003      	str	r3, [r0, #0]
   d9146:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d9148:	6843      	ldr	r3, [r0, #4]
   d914a:	429d      	cmp	r5, r3
    class __shared_ptr
   d914c:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d914e:	d00c      	beq.n	d916a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d9150:	b115      	cbz	r5, d9158 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d9152:	686b      	ldr	r3, [r5, #4]
   d9154:	3301      	adds	r3, #1
   d9156:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d9158:	6860      	ldr	r0, [r4, #4]
   d915a:	b128      	cbz	r0, d9168 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d915c:	6843      	ldr	r3, [r0, #4]
   d915e:	3b01      	subs	r3, #1
   d9160:	6043      	str	r3, [r0, #4]
   d9162:	b90b      	cbnz	r3, d9168 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d9164:	f7ff ffd0 	bl	d9108 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d9168:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d916a:	4620      	mov	r0, r4
   d916c:	bd38      	pop	{r3, r4, r5, pc}

000d916e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d916e:	460b      	mov	r3, r1
   d9170:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d9172:	2200      	movs	r2, #0
   d9174:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d9176:	e9c0 2200 	strd	r2, r2, [r0]
   d917a:	4604      	mov	r4, r0
        t_ = t;
   d917c:	6083      	str	r3, [r0, #8]
    if (t) {
   d917e:	b90b      	cbnz	r3, d9184 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d9180:	4620      	mov	r0, r4
   d9182:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d9184:	f7ff ffdc 	bl	d9140 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d9188:	e7fa      	b.n	d9180 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d918a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d918a:	6883      	ldr	r3, [r0, #8]
   d918c:	b1eb      	cbz	r3, d91ca <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d918e:	781a      	ldrb	r2, [r3, #0]
   d9190:	2a03      	cmp	r2, #3
   d9192:	d81a      	bhi.n	d91ca <_ZNK5spark9JSONValue4typeEv+0x40>
   d9194:	e8df f002 	tbb	[pc, r2]
   d9198:	1b021704 	.word	0x1b021704
   d919c:	2005      	movs	r0, #5
   d919e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d91a0:	6802      	ldr	r2, [r0, #0]
   d91a2:	685b      	ldr	r3, [r3, #4]
   d91a4:	6852      	ldr	r2, [r2, #4]
   d91a6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d91a8:	282d      	cmp	r0, #45	; 0x2d
   d91aa:	d012      	beq.n	d91d2 <_ZNK5spark9JSONValue4typeEv+0x48>
   d91ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d91b0:	2b09      	cmp	r3, #9
   d91b2:	d90e      	bls.n	d91d2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d91b4:	2874      	cmp	r0, #116	; 0x74
   d91b6:	d00e      	beq.n	d91d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d91b8:	2866      	cmp	r0, #102	; 0x66
   d91ba:	d00c      	beq.n	d91d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d91bc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d91c0:	4258      	negs	r0, r3
   d91c2:	4158      	adcs	r0, r3
   d91c4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d91c6:	2006      	movs	r0, #6
   d91c8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d91ca:	2000      	movs	r0, #0
   d91cc:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d91ce:	2004      	movs	r0, #4
   d91d0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d91d2:	2003      	movs	r0, #3
   d91d4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d91d6:	2002      	movs	r0, #2
}
   d91d8:	4770      	bx	lr

000d91da <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d91da:	b510      	push	{r4, lr}
   d91dc:	4604      	mov	r4, r0
    switch (type()) {
   d91de:	f7ff ffd4 	bl	d918a <_ZNK5spark9JSONValue4typeEv>
   d91e2:	2802      	cmp	r0, #2
   d91e4:	d00e      	beq.n	d9204 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d91e6:	1ec3      	subs	r3, r0, #3
   d91e8:	b2db      	uxtb	r3, r3
   d91ea:	2b01      	cmp	r3, #1
   d91ec:	d814      	bhi.n	d9218 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d91ee:	6822      	ldr	r2, [r4, #0]
   d91f0:	68a3      	ldr	r3, [r4, #8]
   d91f2:	6850      	ldr	r0, [r2, #4]
   d91f4:	685b      	ldr	r3, [r3, #4]
}
   d91f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d91fa:	220a      	movs	r2, #10
   d91fc:	2100      	movs	r1, #0
   d91fe:	4418      	add	r0, r3
   d9200:	f002 bfde 	b.w	dc1c0 <strtol>
        const char* const s = d_->json + t_->start;
   d9204:	6822      	ldr	r2, [r4, #0]
   d9206:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d9208:	6852      	ldr	r2, [r2, #4]
   d920a:	685b      	ldr	r3, [r3, #4]
   d920c:	5cd0      	ldrb	r0, [r2, r3]
   d920e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d9212:	4258      	negs	r0, r3
   d9214:	4158      	adcs	r0, r3
}
   d9216:	bd10      	pop	{r4, pc}
    switch (type()) {
   d9218:	2000      	movs	r0, #0
   d921a:	e7fc      	b.n	d9216 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d921c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d921c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d921e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d9220:	e9c0 3300 	strd	r3, r3, [r0]
   d9224:	4604      	mov	r4, r0
        n_(0) {
   d9226:	480e      	ldr	r0, [pc, #56]	; (d9260 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9228:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d922c:	b1a9      	cbz	r1, d925a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d922e:	780b      	ldrb	r3, [r1, #0]
   d9230:	2b03      	cmp	r3, #3
   d9232:	d006      	beq.n	d9242 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d9234:	b98b      	cbnz	r3, d925a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d9236:	6813      	ldr	r3, [r2, #0]
   d9238:	6858      	ldr	r0, [r3, #4]
   d923a:	684b      	ldr	r3, [r1, #4]
   d923c:	5cc3      	ldrb	r3, [r0, r3]
   d923e:	2b6e      	cmp	r3, #110	; 0x6e
   d9240:	d007      	beq.n	d9252 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d9242:	6813      	ldr	r3, [r2, #0]
   d9244:	684d      	ldr	r5, [r1, #4]
   d9246:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9248:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d924a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d924c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d924e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d9250:	60e3      	str	r3, [r4, #12]
   d9252:	4611      	mov	r1, r2
   d9254:	4620      	mov	r0, r4
   d9256:	f7ff ff73 	bl	d9140 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d925a:	4620      	mov	r0, r4
   d925c:	bd38      	pop	{r3, r4, r5, pc}
   d925e:	bf00      	nop
   d9260:	000dcd1d 	.word	0x000dcd1d

000d9264 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9264:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9266:	2500      	movs	r5, #0
   d9268:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d926a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d926e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d9272:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d9276:	4604      	mov	r4, r0
   d9278:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d927a:	b14b      	cbz	r3, d9290 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d927c:	781a      	ldrb	r2, [r3, #0]
   d927e:	2a01      	cmp	r2, #1
   d9280:	d106      	bne.n	d9290 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d9282:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d9286:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d9288:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d928a:	6143      	str	r3, [r0, #20]
   d928c:	f7ff ff58 	bl	d9140 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9290:	4620      	mov	r0, r4
   d9292:	bd38      	pop	{r3, r4, r5, pc}

000d9294 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d9294:	b510      	push	{r4, lr}
    if (!n_) {
   d9296:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d9298:	4604      	mov	r4, r0
    if (!n_) {
   d929a:	b163      	cbz	r3, d92b6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d929c:	6880      	ldr	r0, [r0, #8]
   d929e:	60e0      	str	r0, [r4, #12]
    --n_;
   d92a0:	3b01      	subs	r3, #1
    ++t_;
   d92a2:	3010      	adds	r0, #16
   d92a4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d92a6:	6120      	str	r0, [r4, #16]
    --n_;
   d92a8:	6163      	str	r3, [r4, #20]
    if (n_) {
   d92aa:	b113      	cbz	r3, d92b2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d92ac:	f7ff fedd 	bl	d906a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d92b0:	60a0      	str	r0, [r4, #8]
    return true;
   d92b2:	2001      	movs	r0, #1
   d92b4:	e000      	b.n	d92b8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d92b6:	4618      	mov	r0, r3
}
   d92b8:	bd10      	pop	{r4, pc}

000d92ba <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d92ba:	b510      	push	{r4, lr}
    write('}');
   d92bc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d92be:	4604      	mov	r4, r0
    write('}');
   d92c0:	f7ff ff32 	bl	d9128 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d92c4:	2301      	movs	r3, #1
   d92c6:	7123      	strb	r3, [r4, #4]
}
   d92c8:	4620      	mov	r0, r4
   d92ca:	bd10      	pop	{r4, pc}

000d92cc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d92cc:	b508      	push	{r3, lr}
    switch (state_) {
   d92ce:	7903      	ldrb	r3, [r0, #4]
   d92d0:	2b01      	cmp	r3, #1
   d92d2:	d002      	beq.n	d92da <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d92d4:	2b02      	cmp	r3, #2
   d92d6:	d004      	beq.n	d92e2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d92d8:	bd08      	pop	{r3, pc}
        write(',');
   d92da:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d92dc:	f7ff ff24 	bl	d9128 <_ZN5spark10JSONWriter5writeEc>
}
   d92e0:	e7fa      	b.n	d92d8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d92e2:	213a      	movs	r1, #58	; 0x3a
   d92e4:	e7fa      	b.n	d92dc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d92e6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d92e6:	b510      	push	{r4, lr}
   d92e8:	4604      	mov	r4, r0
    writeSeparator();
   d92ea:	f7ff ffef 	bl	d92cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d92ee:	4620      	mov	r0, r4
   d92f0:	217b      	movs	r1, #123	; 0x7b
   d92f2:	f7ff ff19 	bl	d9128 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d92f6:	2300      	movs	r3, #0
   d92f8:	7123      	strb	r3, [r4, #4]
}
   d92fa:	4620      	mov	r0, r4
   d92fc:	bd10      	pop	{r4, pc}
	...

000d9300 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d9300:	b513      	push	{r0, r1, r4, lr}
   d9302:	4604      	mov	r4, r0
   d9304:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9306:	f7ff ffe1 	bl	d92cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d930a:	6823      	ldr	r3, [r4, #0]
   d930c:	9a01      	ldr	r2, [sp, #4]
   d930e:	68db      	ldr	r3, [r3, #12]
   d9310:	4903      	ldr	r1, [pc, #12]	; (d9320 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d9312:	4620      	mov	r0, r4
   d9314:	4798      	blx	r3
    state_ = NEXT;
   d9316:	2301      	movs	r3, #1
}
   d9318:	4620      	mov	r0, r4
    state_ = NEXT;
   d931a:	7123      	strb	r3, [r4, #4]
}
   d931c:	b002      	add	sp, #8
   d931e:	bd10      	pop	{r4, pc}
   d9320:	000dc8a0 	.word	0x000dc8a0

000d9324 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d9324:	b513      	push	{r0, r1, r4, lr}
   d9326:	4604      	mov	r4, r0
   d9328:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d932a:	f7ff ffcf 	bl	d92cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d932e:	6823      	ldr	r3, [r4, #0]
   d9330:	9a01      	ldr	r2, [sp, #4]
   d9332:	68db      	ldr	r3, [r3, #12]
   d9334:	4903      	ldr	r1, [pc, #12]	; (d9344 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d9336:	4620      	mov	r0, r4
   d9338:	4798      	blx	r3
    state_ = NEXT;
   d933a:	2301      	movs	r3, #1
}
   d933c:	4620      	mov	r0, r4
    state_ = NEXT;
   d933e:	7123      	strb	r3, [r4, #4]
}
   d9340:	b002      	add	sp, #8
   d9342:	bd10      	pop	{r4, pc}
   d9344:	000dca8f 	.word	0x000dca8f

000d9348 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d934c:	460d      	mov	r5, r1
   d934e:	4617      	mov	r7, r2
    write('"');
   d9350:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d9352:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d93f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9356:	4604      	mov	r4, r0
    const char* const end = str + size;
   d9358:	442f      	add	r7, r5
    write('"');
   d935a:	f7ff fee5 	bl	d9128 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d935e:	4629      	mov	r1, r5
    while (s != end) {
   d9360:	42bd      	cmp	r5, r7
   d9362:	462a      	mov	r2, r5
   d9364:	d038      	beq.n	d93d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d9366:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d936a:	2e22      	cmp	r6, #34	; 0x22
   d936c:	d003      	beq.n	d9376 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d936e:	2e5c      	cmp	r6, #92	; 0x5c
   d9370:	d001      	beq.n	d9376 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d9372:	2e1f      	cmp	r6, #31
   d9374:	d8f4      	bhi.n	d9360 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d9376:	6823      	ldr	r3, [r4, #0]
   d9378:	1a52      	subs	r2, r2, r1
   d937a:	689b      	ldr	r3, [r3, #8]
   d937c:	4620      	mov	r0, r4
   d937e:	4798      	blx	r3
            write('\\');
   d9380:	215c      	movs	r1, #92	; 0x5c
   d9382:	4620      	mov	r0, r4
   d9384:	f7ff fed0 	bl	d9128 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d9388:	2e0d      	cmp	r6, #13
   d938a:	d80a      	bhi.n	d93a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d938c:	2e07      	cmp	r6, #7
   d938e:	d91c      	bls.n	d93ca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9390:	f1a6 0308 	sub.w	r3, r6, #8
   d9394:	2b05      	cmp	r3, #5
   d9396:	d818      	bhi.n	d93ca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9398:	e8df f003 	tbb	[pc, r3]
   d939c:	17110f0d 	.word	0x17110f0d
   d93a0:	1513      	.short	0x1513
   d93a2:	2e22      	cmp	r6, #34	; 0x22
   d93a4:	d001      	beq.n	d93aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d93a6:	2e5c      	cmp	r6, #92	; 0x5c
   d93a8:	d10f      	bne.n	d93ca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d93aa:	4631      	mov	r1, r6
                write('b');
   d93ac:	4620      	mov	r0, r4
   d93ae:	f7ff febb 	bl	d9128 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d93b2:	4629      	mov	r1, r5
    while (s != end) {
   d93b4:	e7d4      	b.n	d9360 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d93b6:	2162      	movs	r1, #98	; 0x62
   d93b8:	e7f8      	b.n	d93ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d93ba:	2174      	movs	r1, #116	; 0x74
   d93bc:	e7f6      	b.n	d93ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d93be:	216e      	movs	r1, #110	; 0x6e
   d93c0:	e7f4      	b.n	d93ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d93c2:	2166      	movs	r1, #102	; 0x66
   d93c4:	e7f2      	b.n	d93ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d93c6:	2172      	movs	r1, #114	; 0x72
   d93c8:	e7f0      	b.n	d93ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d93ca:	6823      	ldr	r3, [r4, #0]
   d93cc:	4632      	mov	r2, r6
   d93ce:	68db      	ldr	r3, [r3, #12]
   d93d0:	4641      	mov	r1, r8
   d93d2:	4620      	mov	r0, r4
   d93d4:	4798      	blx	r3
                break;
   d93d6:	e7ec      	b.n	d93b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d93d8:	428d      	cmp	r5, r1
   d93da:	d004      	beq.n	d93e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d93dc:	6823      	ldr	r3, [r4, #0]
   d93de:	1a6a      	subs	r2, r5, r1
   d93e0:	689b      	ldr	r3, [r3, #8]
   d93e2:	4620      	mov	r0, r4
   d93e4:	4798      	blx	r3
    }
    write('"');
   d93e6:	2122      	movs	r1, #34	; 0x22
   d93e8:	4620      	mov	r0, r4
   d93ea:	f7ff fe9d 	bl	d9128 <_ZN5spark10JSONWriter5writeEc>
}
   d93ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d93f2:	bf00      	nop
   d93f4:	000dccc0 	.word	0x000dccc0

000d93f8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d93f8:	b513      	push	{r0, r1, r4, lr}
   d93fa:	4604      	mov	r4, r0
   d93fc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9400:	f7ff ff64 	bl	d92cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d9404:	4620      	mov	r0, r4
   d9406:	e9dd 2100 	ldrd	r2, r1, [sp]
   d940a:	f7ff ff9d 	bl	d9348 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d940e:	2302      	movs	r3, #2
}
   d9410:	4620      	mov	r0, r4
    state_ = VALUE;
   d9412:	7123      	strb	r3, [r4, #4]
}
   d9414:	b002      	add	sp, #8
   d9416:	bd10      	pop	{r4, pc}

000d9418 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9418:	b513      	push	{r0, r1, r4, lr}
   d941a:	4604      	mov	r4, r0
   d941c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9420:	f7ff ff54 	bl	d92cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d9424:	4620      	mov	r0, r4
   d9426:	e9dd 2100 	ldrd	r2, r1, [sp]
   d942a:	f7ff ff8d 	bl	d9348 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d942e:	2301      	movs	r3, #1
}
   d9430:	4620      	mov	r0, r4
    state_ = NEXT;
   d9432:	7123      	strb	r3, [r4, #4]
}
   d9434:	b002      	add	sp, #8
   d9436:	bd10      	pop	{r4, pc}

000d9438 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d9438:	6880      	ldr	r0, [r0, #8]
   d943a:	6803      	ldr	r3, [r0, #0]
   d943c:	68db      	ldr	r3, [r3, #12]
   d943e:	4718      	bx	r3

000d9440 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d9440:	4770      	bx	lr

000d9442 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d9442:	4608      	mov	r0, r1
   d9444:	b111      	cbz	r1, d944c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d9446:	680b      	ldr	r3, [r1, #0]
   d9448:	685b      	ldr	r3, [r3, #4]
   d944a:	4718      	bx	r3
}
   d944c:	4770      	bx	lr

000d944e <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d944e:	4770      	bx	lr

000d9450 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d9450:	4770      	bx	lr

000d9452 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d9452:	4770      	bx	lr

000d9454 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d9454:	b538      	push	{r3, r4, r5, lr}
   d9456:	4604      	mov	r4, r0
   d9458:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d945a:	6800      	ldr	r0, [r0, #0]
   d945c:	212e      	movs	r1, #46	; 0x2e
   d945e:	f002 fdba 	bl	dbfd6 <strchrnul>
    size = s - category;
   d9462:	6823      	ldr	r3, [r4, #0]
   d9464:	1ac3      	subs	r3, r0, r3
   d9466:	602b      	str	r3, [r5, #0]
    if (size) {
   d9468:	b123      	cbz	r3, d9474 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d946a:	7803      	ldrb	r3, [r0, #0]
   d946c:	b103      	cbz	r3, d9470 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d946e:	3001      	adds	r0, #1
   d9470:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d9472:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d9474:	4618      	mov	r0, r3
   d9476:	bd38      	pop	{r3, r4, r5, pc}

000d9478 <_ZN5spark16JSONStreamWriterD0Ev>:
   d9478:	b510      	push	{r4, lr}
   d947a:	210c      	movs	r1, #12
   d947c:	4604      	mov	r4, r0
   d947e:	f002 f85c 	bl	db53a <_ZdlPvj>
   d9482:	4620      	mov	r0, r4
   d9484:	bd10      	pop	{r4, pc}

000d9486 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d9486:	b510      	push	{r4, lr}
   d9488:	2104      	movs	r1, #4
   d948a:	4604      	mov	r4, r0
   d948c:	f002 f855 	bl	db53a <_ZdlPvj>
   d9490:	4620      	mov	r0, r4
   d9492:	bd10      	pop	{r4, pc}

000d9494 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d9494:	b510      	push	{r4, lr}
   d9496:	2104      	movs	r1, #4
   d9498:	4604      	mov	r4, r0
   d949a:	f002 f84e 	bl	db53a <_ZdlPvj>
   d949e:	4620      	mov	r0, r4
   d94a0:	bd10      	pop	{r4, pc}

000d94a2 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d94a2:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d94a4:	f002 fda1 	bl	dbfea <strcmp>
}
   d94a8:	fab0 f080 	clz	r0, r0
   d94ac:	0940      	lsrs	r0, r0, #5
   d94ae:	bd08      	pop	{r3, pc}

000d94b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d94b0:	b510      	push	{r4, lr}
   d94b2:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d94b4:	f001 fe56 	bl	db164 <_Z16_fetch_usbserialv>
   d94b8:	4284      	cmp	r4, r0
   d94ba:	d010      	beq.n	d94de <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d94bc:	f001 fdc6 	bl	db04c <_Z22__fetch_global_Serial1v>
   d94c0:	4284      	cmp	r4, r0
   d94c2:	d105      	bne.n	d94d0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d94c4:	f001 fdc2 	bl	db04c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d94c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d94cc:	f001 bdbb 	b.w	db046 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d94d0:	b12c      	cbz	r4, d94de <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d94d2:	6823      	ldr	r3, [r4, #0]
   d94d4:	4620      	mov	r0, r4
   d94d6:	685b      	ldr	r3, [r3, #4]
}
   d94d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d94dc:	4718      	bx	r3
   d94de:	bd10      	pop	{r4, pc}

000d94e0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d94e0:	b513      	push	{r0, r1, r4, lr}
   d94e2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d94e4:	4608      	mov	r0, r1
   d94e6:	9101      	str	r1, [sp, #4]
   d94e8:	f002 fdaf 	bl	dc04a <strlen>
   d94ec:	9901      	ldr	r1, [sp, #4]
   d94ee:	4602      	mov	r2, r0
   d94f0:	4620      	mov	r0, r4
}
   d94f2:	b002      	add	sp, #8
   d94f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d94f8:	f7ff bf8e 	b.w	d9418 <_ZN5spark10JSONWriter5valueEPKcj>

000d94fc <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d94fc:	b513      	push	{r0, r1, r4, lr}
   d94fe:	4604      	mov	r4, r0
    write(str, strlen(str));
   d9500:	4608      	mov	r0, r1
   d9502:	9101      	str	r1, [sp, #4]
   d9504:	f002 fda1 	bl	dc04a <strlen>
   d9508:	6823      	ldr	r3, [r4, #0]
   d950a:	9901      	ldr	r1, [sp, #4]
   d950c:	68db      	ldr	r3, [r3, #12]
   d950e:	4602      	mov	r2, r0
   d9510:	4620      	mov	r0, r4
}
   d9512:	b002      	add	sp, #8
   d9514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d9518:	4718      	bx	r3

000d951a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d951a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d951c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d951e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d9522:	68db      	ldr	r3, [r3, #12]
   d9524:	2201      	movs	r2, #1
   d9526:	f10d 0107 	add.w	r1, sp, #7
   d952a:	4798      	blx	r3
}
   d952c:	b003      	add	sp, #12
   d952e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9532 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d9532:	b40e      	push	{r1, r2, r3}
   d9534:	b503      	push	{r0, r1, lr}
   d9536:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d9538:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d953a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d953e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d9540:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d9542:	f001 f8e7 	bl	da714 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d9546:	b002      	add	sp, #8
   d9548:	f85d eb04 	ldr.w	lr, [sp], #4
   d954c:	b003      	add	sp, #12
   d954e:	4770      	bx	lr

000d9550 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d9550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d9554:	e9d0 9500 	ldrd	r9, r5, [r0]
   d9558:	f04f 0814 	mov.w	r8, #20
   d955c:	fb08 f505 	mul.w	r5, r8, r5
   d9560:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d9562:	10ab      	asrs	r3, r5, #2
   d9564:	4d18      	ldr	r5, [pc, #96]	; (d95c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d9566:	4617      	mov	r7, r2
   d9568:	435d      	muls	r5, r3
   d956a:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d956c:	2d00      	cmp	r5, #0
   d956e:	dd23      	ble.n	d95b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d9570:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d9572:	fb08 f006 	mul.w	r0, r8, r6
   d9576:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d957a:	463a      	mov	r2, r7
   d957c:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d9580:	5820      	ldr	r0, [r4, r0]
   d9582:	9101      	str	r1, [sp, #4]
   d9584:	455f      	cmp	r7, fp
   d9586:	bf28      	it	cs
   d9588:	465a      	movcs	r2, fp
   d958a:	f002 fd66 	bl	dc05a <strncmp>
                if (cmp == 0) {
   d958e:	9901      	ldr	r1, [sp, #4]
   d9590:	2301      	movs	r3, #1
   d9592:	b978      	cbnz	r0, d95b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d9594:	455f      	cmp	r7, fp
   d9596:	d103      	bne.n	d95a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d9598:	9a00      	ldr	r2, [sp, #0]
   d959a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d959c:	4635      	mov	r5, r6
   d959e:	e7e5      	b.n	d956c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d95a0:	bf8c      	ite	hi
   d95a2:	2001      	movhi	r0, #1
   d95a4:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d95a6:	2800      	cmp	r0, #0
   d95a8:	d0f8      	beq.n	d959c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d95aa:	1bae      	subs	r6, r5, r6
	      ++__first;
   d95ac:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d95b0:	3e01      	subs	r6, #1
   d95b2:	e7f3      	b.n	d959c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d95b4:	0fc0      	lsrs	r0, r0, #31
   d95b6:	e7f6      	b.n	d95a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d95b8:	eba4 0409 	sub.w	r4, r4, r9
}
   d95bc:	4802      	ldr	r0, [pc, #8]	; (d95c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d95be:	10a4      	asrs	r4, r4, #2
   d95c0:	4360      	muls	r0, r4
   d95c2:	b003      	add	sp, #12
   d95c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d95c8:	cccccccd 	.word	0xcccccccd

000d95cc <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d95cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d95ce:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d95d0:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d95d2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d95d4:	b30b      	cbz	r3, d961a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d95d6:	b301      	cbz	r1, d961a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d95d8:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d95da:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d95de:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d95e0:	a903      	add	r1, sp, #12
   d95e2:	a801      	add	r0, sp, #4
   d95e4:	f7ff ff36 	bl	d9454 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d95e8:	4601      	mov	r1, r0
   d95ea:	b1b0      	cbz	r0, d961a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d95ec:	f10d 030b 	add.w	r3, sp, #11
   d95f0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d95f2:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d95f6:	4620      	mov	r0, r4
   d95f8:	f7ff ffaa 	bl	d9550 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d95fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d9600:	b15b      	cbz	r3, d961a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d9602:	6824      	ldr	r4, [r4, #0]
   d9604:	2314      	movs	r3, #20
   d9606:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d960a:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d960e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d9612:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d9614:	bfa8      	it	ge
   d9616:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d9618:	e7e2      	b.n	d95e0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d961a:	4630      	mov	r0, r6
   d961c:	b004      	add	sp, #16
   d961e:	bd70      	pop	{r4, r5, r6, pc}

000d9620 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d9620:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d9622:	4c0a      	ldr	r4, [pc, #40]	; (d964c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d9624:	7823      	ldrb	r3, [r4, #0]
   d9626:	f3bf 8f5b 	dmb	ish
   d962a:	07db      	lsls	r3, r3, #31
   d962c:	d40b      	bmi.n	d9646 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d962e:	4620      	mov	r0, r4
   d9630:	f7fa fd42 	bl	d40b8 <__cxa_guard_acquire>
   d9634:	b138      	cbz	r0, d9646 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d9636:	4620      	mov	r0, r4
   d9638:	f7fa fd43 	bl	d40c2 <__cxa_guard_release>
   d963c:	4a04      	ldr	r2, [pc, #16]	; (d9650 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d963e:	4905      	ldr	r1, [pc, #20]	; (d9654 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d9640:	4805      	ldr	r0, [pc, #20]	; (d9658 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d9642:	f001 ff75 	bl	db530 <__aeabi_atexit>
}
   d9646:	4804      	ldr	r0, [pc, #16]	; (d9658 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d9648:	bd10      	pop	{r4, pc}
   d964a:	bf00      	nop
   d964c:	2003e5d4 	.word	0x2003e5d4
   d9650:	2003e310 	.word	0x2003e310
   d9654:	000d9451 	.word	0x000d9451
   d9658:	2003e294 	.word	0x2003e294

000d965c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d965c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d965e:	4c0a      	ldr	r4, [pc, #40]	; (d9688 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d9660:	7823      	ldrb	r3, [r4, #0]
   d9662:	f3bf 8f5b 	dmb	ish
   d9666:	07db      	lsls	r3, r3, #31
   d9668:	d40b      	bmi.n	d9682 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d966a:	4620      	mov	r0, r4
   d966c:	f7fa fd24 	bl	d40b8 <__cxa_guard_acquire>
   d9670:	b138      	cbz	r0, d9682 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d9672:	4620      	mov	r0, r4
   d9674:	f7fa fd25 	bl	d40c2 <__cxa_guard_release>
   d9678:	4a04      	ldr	r2, [pc, #16]	; (d968c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d967a:	4905      	ldr	r1, [pc, #20]	; (d9690 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d967c:	4805      	ldr	r0, [pc, #20]	; (d9694 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d967e:	f001 ff57 	bl	db530 <__aeabi_atexit>
    return &factory;
}
   d9682:	4804      	ldr	r0, [pc, #16]	; (d9694 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d9684:	bd10      	pop	{r4, pc}
   d9686:	bf00      	nop
   d9688:	2003e5d8 	.word	0x2003e5d8
   d968c:	2003e310 	.word	0x2003e310
   d9690:	000d944f 	.word	0x000d944f
   d9694:	2003e298 	.word	0x2003e298

000d9698 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d9698:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d969a:	2500      	movs	r5, #0
   d969c:	4604      	mov	r4, r0
   d969e:	e9c0 5500 	strd	r5, r5, [r0]
   d96a2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d96a6:	6085      	str	r5, [r0, #8]
   d96a8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d96aa:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d96ae:	f7fe fa21 	bl	d7af4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d96b2:	f7ff ffb5 	bl	d9620 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d96b6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d96b8:	f7ff ffd0 	bl	d965c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d96bc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d96be:	6220      	str	r0, [r4, #32]
}
   d96c0:	4620      	mov	r0, r4
   d96c2:	bd38      	pop	{r3, r4, r5, pc}

000d96c4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d96c4:	b510      	push	{r4, lr}
    static LogManager mgr;
   d96c6:	4c0b      	ldr	r4, [pc, #44]	; (d96f4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d96c8:	7823      	ldrb	r3, [r4, #0]
   d96ca:	f3bf 8f5b 	dmb	ish
   d96ce:	07db      	lsls	r3, r3, #31
   d96d0:	d40e      	bmi.n	d96f0 <_ZN5spark10LogManager8instanceEv+0x2c>
   d96d2:	4620      	mov	r0, r4
   d96d4:	f7fa fcf0 	bl	d40b8 <__cxa_guard_acquire>
   d96d8:	b150      	cbz	r0, d96f0 <_ZN5spark10LogManager8instanceEv+0x2c>
   d96da:	4807      	ldr	r0, [pc, #28]	; (d96f8 <_ZN5spark10LogManager8instanceEv+0x34>)
   d96dc:	f7ff ffdc 	bl	d9698 <_ZN5spark10LogManagerC1Ev>
   d96e0:	4620      	mov	r0, r4
   d96e2:	f7fa fcee 	bl	d40c2 <__cxa_guard_release>
   d96e6:	4a05      	ldr	r2, [pc, #20]	; (d96fc <_ZN5spark10LogManager8instanceEv+0x38>)
   d96e8:	4905      	ldr	r1, [pc, #20]	; (d9700 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d96ea:	4803      	ldr	r0, [pc, #12]	; (d96f8 <_ZN5spark10LogManager8instanceEv+0x34>)
   d96ec:	f001 ff20 	bl	db530 <__aeabi_atexit>
    return &mgr;
}
   d96f0:	4801      	ldr	r0, [pc, #4]	; (d96f8 <_ZN5spark10LogManager8instanceEv+0x34>)
   d96f2:	bd10      	pop	{r4, pc}
   d96f4:	2003e5d0 	.word	0x2003e5d0
   d96f8:	2003e5e0 	.word	0x2003e5e0
   d96fc:	2003e310 	.word	0x2003e310
   d9700:	000d9b59 	.word	0x000d9b59

000d9704 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d9704:	4a02      	ldr	r2, [pc, #8]	; (d9710 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d9706:	4903      	ldr	r1, [pc, #12]	; (d9714 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d9708:	4803      	ldr	r0, [pc, #12]	; (d9718 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d970a:	2300      	movs	r3, #0
   d970c:	f7fe bc02 	b.w	d7f14 <log_set_callbacks>
   d9710:	000d9a35 	.word	0x000d9a35
   d9714:	000d99c1 	.word	0x000d99c1
   d9718:	000d9941 	.word	0x000d9941

000d971c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d971c:	2300      	movs	r3, #0
   d971e:	461a      	mov	r2, r3
   d9720:	4619      	mov	r1, r3
   d9722:	4618      	mov	r0, r3
   d9724:	f7fe bbf6 	b.w	d7f14 <log_set_callbacks>

000d9728 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9728:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d972a:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d972c:	f851 3b04 	ldr.w	r3, [r1], #4
   d9730:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9732:	4604      	mov	r4, r0
   d9734:	a801      	add	r0, sp, #4
   d9736:	f7fe fde0 	bl	d82fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d973a:	466a      	mov	r2, sp
   d973c:	4629      	mov	r1, r5
   d973e:	4620      	mov	r0, r4
   d9740:	f7ff fd15 	bl	d916e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9744:	a801      	add	r0, sp, #4
   d9746:	f7fe fddf 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d974a:	4620      	mov	r0, r4
   d974c:	b003      	add	sp, #12
   d974e:	bd30      	pop	{r4, r5, pc}

000d9750 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9750:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d9752:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9754:	f851 3b04 	ldr.w	r3, [r1], #4
   d9758:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d975a:	4604      	mov	r4, r0
   d975c:	a801      	add	r0, sp, #4
   d975e:	f7fe fdcc 	bl	d82fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d9762:	466a      	mov	r2, sp
   d9764:	4629      	mov	r1, r5
   d9766:	4620      	mov	r0, r4
   d9768:	f7ff fd7c 	bl	d9264 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d976c:	a801      	add	r0, sp, #4
   d976e:	f7fe fdcb 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9772:	4620      	mov	r0, r4
   d9774:	b003      	add	sp, #12
   d9776:	bd30      	pop	{r4, r5, pc}

000d9778 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9778:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d977a:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d977c:	f851 3b04 	ldr.w	r3, [r1], #4
   d9780:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9782:	4604      	mov	r4, r0
   d9784:	a801      	add	r0, sp, #4
   d9786:	f7fe fdb8 	bl	d82fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d978a:	466a      	mov	r2, sp
   d978c:	4629      	mov	r1, r5
   d978e:	4620      	mov	r0, r4
   d9790:	f7ff fd44 	bl	d921c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9794:	a801      	add	r0, sp, #4
   d9796:	f7fe fdb7 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d979a:	4620      	mov	r0, r4
   d979c:	b003      	add	sp, #12
   d979e:	bd30      	pop	{r4, r5, pc}

000d97a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d97a0:	b570      	push	{r4, r5, r6, lr}
   d97a2:	b08a      	sub	sp, #40	; 0x28
   d97a4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d97a6:	4601      	mov	r1, r0
   d97a8:	a804      	add	r0, sp, #16
   d97aa:	f7ff ffd1 	bl	d9750 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d97ae:	4e14      	ldr	r6, [pc, #80]	; (d9800 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d97b0:	a804      	add	r0, sp, #16
   d97b2:	f7ff fd6f 	bl	d9294 <_ZN5spark18JSONObjectIterator4nextEv>
   d97b6:	b1e8      	cbz	r0, d97f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d97b8:	a904      	add	r1, sp, #16
   d97ba:	4668      	mov	r0, sp
   d97bc:	f7ff ffdc 	bl	d9778 <_ZNK5spark18JSONObjectIterator4nameEv>
   d97c0:	9802      	ldr	r0, [sp, #8]
   d97c2:	4631      	mov	r1, r6
   d97c4:	f7ff fe6d 	bl	d94a2 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d97c8:	4604      	mov	r4, r0
   d97ca:	b110      	cbz	r0, d97d2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d97cc:	1e2c      	subs	r4, r5, #0
   d97ce:	bf18      	it	ne
   d97d0:	2401      	movne	r4, #1
   d97d2:	a801      	add	r0, sp, #4
   d97d4:	f7fe fd98 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d97d8:	2c00      	cmp	r4, #0
   d97da:	d0e9      	beq.n	d97b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d97dc:	a904      	add	r1, sp, #16
   d97de:	4668      	mov	r0, sp
   d97e0:	f7ff ffa2 	bl	d9728 <_ZNK5spark18JSONObjectIterator5valueEv>
   d97e4:	4668      	mov	r0, sp
   d97e6:	f7ff fcf8 	bl	d91da <_ZNK5spark9JSONValue5toIntEv>
   d97ea:	6028      	str	r0, [r5, #0]
   d97ec:	a801      	add	r0, sp, #4
   d97ee:	f7fe fd8b 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d97f2:	e7dd      	b.n	d97b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d97f4:	a805      	add	r0, sp, #20
   d97f6:	f7fe fd87 	bl	d8308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d97fa:	b00a      	add	sp, #40	; 0x28
   d97fc:	bd70      	pop	{r4, r5, r6, pc}
   d97fe:	bf00      	nop
   d9800:	000dccc6 	.word	0x000dccc6

000d9804 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9806:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d9808:	4620      	mov	r0, r4
   d980a:	4912      	ldr	r1, [pc, #72]	; (d9854 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d980c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d980e:	f002 fbec 	bl	dbfea <strcmp>
   d9812:	b948      	cbnz	r0, d9828 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d9814:	f001 fca6 	bl	db164 <_Z16_fetch_usbserialv>
   d9818:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d981c:	f001 fc92 	bl	db144 <_ZN9USBSerial5beginEl>
        return &Serial;
   d9820:	f001 fca0 	bl	db164 <_Z16_fetch_usbserialv>
}
   d9824:	b003      	add	sp, #12
   d9826:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d9828:	490b      	ldr	r1, [pc, #44]	; (d9858 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d982a:	4620      	mov	r0, r4
   d982c:	f002 fbdd 	bl	dbfea <strcmp>
   d9830:	b970      	cbnz	r0, d9850 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d9832:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d9836:	a901      	add	r1, sp, #4
   d9838:	4628      	mov	r0, r5
        int baud = 9600;
   d983a:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d983c:	f7ff ffb0 	bl	d97a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d9840:	f001 fc04 	bl	db04c <_Z22__fetch_global_Serial1v>
   d9844:	9901      	ldr	r1, [sp, #4]
   d9846:	f001 fbfb 	bl	db040 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d984a:	f001 fbff 	bl	db04c <_Z22__fetch_global_Serial1v>
   d984e:	e7e9      	b.n	d9824 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d9850:	2000      	movs	r0, #0
   d9852:	e7e7      	b.n	d9824 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d9854:	000dcccb 	.word	0x000dcccb
   d9858:	000dccd2 	.word	0x000dccd2

000d985c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d985c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d985e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d9862:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9864:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9866:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d986a:	42ae      	cmp	r6, r5
   d986c:	d005      	beq.n	d987a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d986e:	f105 0008 	add.w	r0, r5, #8
   d9872:	f7ff fff3 	bl	d985c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9876:	3514      	adds	r5, #20
   d9878:	e7f7      	b.n	d986a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d987a:	6820      	ldr	r0, [r4, #0]
   d987c:	f7fe fcae 	bl	d81dc <free>
}
   d9880:	4620      	mov	r0, r4
   d9882:	bd70      	pop	{r4, r5, r6, pc}

000d9884 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9884:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9886:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d988a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d988c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d9890:	42ae      	cmp	r6, r5
   d9892:	d004      	beq.n	d989e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d9894:	4628      	mov	r0, r5
   d9896:	f000 ff8d 	bl	da7b4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d989a:	3510      	adds	r5, #16
   d989c:	e7f8      	b.n	d9890 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d989e:	6820      	ldr	r0, [r4, #0]
   d98a0:	f7fe fc9c 	bl	d81dc <free>
}
   d98a4:	4620      	mov	r0, r4
   d98a6:	bd70      	pop	{r4, r5, r6, pc}

000d98a8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d98a8:	b510      	push	{r4, lr}
   d98aa:	4604      	mov	r4, r0
   d98ac:	300c      	adds	r0, #12
   d98ae:	f7ff ffd5 	bl	d985c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d98b2:	4620      	mov	r0, r4
   d98b4:	f7ff ffe6 	bl	d9884 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d98b8:	4620      	mov	r0, r4
   d98ba:	bd10      	pop	{r4, pc}

000d98bc <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d98bc:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d98be:	4b04      	ldr	r3, [pc, #16]	; (d98d0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d98c0:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d98c2:	f840 3b04 	str.w	r3, [r0], #4
   d98c6:	f7ff ffef 	bl	d98a8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d98ca:	4620      	mov	r0, r4
   d98cc:	bd10      	pop	{r4, pc}
   d98ce:	bf00      	nop
   d98d0:	000dc74c 	.word	0x000dc74c

000d98d4 <_ZN5spark16StreamLogHandlerD0Ev>:
   d98d4:	b510      	push	{r4, lr}
   d98d6:	4604      	mov	r4, r0
   d98d8:	f7ff fff0 	bl	d98bc <_ZN5spark16StreamLogHandlerD1Ev>
   d98dc:	4620      	mov	r0, r4
   d98de:	2124      	movs	r1, #36	; 0x24
   d98e0:	f001 fe2b 	bl	db53a <_ZdlPvj>
   d98e4:	4620      	mov	r0, r4
   d98e6:	bd10      	pop	{r4, pc}

000d98e8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d98e8:	b510      	push	{r4, lr}
   d98ea:	4b03      	ldr	r3, [pc, #12]	; (d98f8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d98ec:	6003      	str	r3, [r0, #0]
   d98ee:	4604      	mov	r4, r0
   d98f0:	f7ff ffe4 	bl	d98bc <_ZN5spark16StreamLogHandlerD1Ev>
   d98f4:	4620      	mov	r0, r4
   d98f6:	bd10      	pop	{r4, pc}
   d98f8:	000dcd6c 	.word	0x000dcd6c

000d98fc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d98fc:	b510      	push	{r4, lr}
   d98fe:	4604      	mov	r4, r0
   d9900:	f7ff fff2 	bl	d98e8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d9904:	4620      	mov	r0, r4
   d9906:	2124      	movs	r1, #36	; 0x24
   d9908:	f001 fe17 	bl	db53a <_ZdlPvj>
   d990c:	4620      	mov	r0, r4
   d990e:	bd10      	pop	{r4, pc}

000d9910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d9910:	2200      	movs	r2, #0
   d9912:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d9916:	b510      	push	{r4, lr}
        capacity_(0) {
   d9918:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d991a:	680c      	ldr	r4, [r1, #0]
   d991c:	6004      	str	r4, [r0, #0]
   d991e:	684c      	ldr	r4, [r1, #4]
   d9920:	6044      	str	r4, [r0, #4]
   d9922:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9924:	600a      	str	r2, [r1, #0]
   d9926:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9928:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d992a:	608a      	str	r2, [r1, #8]
}
   d992c:	bd10      	pop	{r4, pc}

000d992e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d992e:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d9930:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d9932:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9934:	6818      	ldr	r0, [r3, #0]
   d9936:	f7fe f8f5 	bl	d7b24 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d993a:	4620      	mov	r0, r4
   d993c:	bd10      	pop	{r4, pc}
	...

000d9940 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9944:	b087      	sub	sp, #28
   d9946:	4680      	mov	r8, r0
   d9948:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d994a:	4b1c      	ldr	r3, [pc, #112]	; (d99bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d994c:	685b      	ldr	r3, [r3, #4]
   d994e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9952:	4689      	mov	r9, r1
   d9954:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9956:	b96b      	cbnz	r3, d9974 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d9958:	f7ff feb4 	bl	d96c4 <_ZN5spark10LogManager8instanceEv>
   d995c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d995e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d9962:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9964:	9305      	str	r3, [sp, #20]
   d9966:	f7fe f8d5 	bl	d7b14 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d996a:	7b23      	ldrb	r3, [r4, #12]
   d996c:	b12b      	cbz	r3, d997a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d996e:	a805      	add	r0, sp, #20
   d9970:	f7ff ffdd 	bl	d992e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9974:	b007      	add	sp, #28
   d9976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d997a:	2301      	movs	r3, #1
   d997c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d997e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d9982:	fa5f f989 	uxtb.w	r9, r9
   d9986:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d998a:	45aa      	cmp	sl, r5
   d998c:	d012      	beq.n	d99b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d998e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d9992:	4631      	mov	r1, r6
   d9994:	1d38      	adds	r0, r7, #4
   d9996:	f7ff fe19 	bl	d95cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d999a:	4581      	cmp	r9, r0
   d999c:	d3f5      	bcc.n	d998a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d999e:	683b      	ldr	r3, [r7, #0]
   d99a0:	9a03      	ldr	r2, [sp, #12]
   d99a2:	9200      	str	r2, [sp, #0]
   d99a4:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d99a8:	464a      	mov	r2, r9
   d99aa:	4633      	mov	r3, r6
   d99ac:	4641      	mov	r1, r8
   d99ae:	4638      	mov	r0, r7
   d99b0:	47d8      	blx	fp
   d99b2:	e7ea      	b.n	d998a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d99b4:	2300      	movs	r3, #0
   d99b6:	7323      	strb	r3, [r4, #12]
   d99b8:	e7d9      	b.n	d996e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d99ba:	bf00      	nop
   d99bc:	e000ed00 	.word	0xe000ed00

000d99c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d99c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99c4:	469b      	mov	fp, r3
   d99c6:	4b1a      	ldr	r3, [pc, #104]	; (d9a30 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d99c8:	685b      	ldr	r3, [r3, #4]
   d99ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d99ce:	4680      	mov	r8, r0
   d99d0:	4689      	mov	r9, r1
   d99d2:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d99d4:	b96b      	cbnz	r3, d99f2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d99d6:	f7ff fe75 	bl	d96c4 <_ZN5spark10LogManager8instanceEv>
   d99da:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d99dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d99e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d99e2:	9301      	str	r3, [sp, #4]
   d99e4:	f7fe f896 	bl	d7b14 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d99e8:	7b23      	ldrb	r3, [r4, #12]
   d99ea:	b12b      	cbz	r3, d99f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d99ec:	a801      	add	r0, sp, #4
   d99ee:	f7ff ff9e 	bl	d992e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d99f2:	b003      	add	sp, #12
   d99f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d99f8:	2301      	movs	r3, #1
   d99fa:	7323      	strb	r3, [r4, #12]
   d99fc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d9a00:	b2f6      	uxtb	r6, r6
   d9a02:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9a06:	4555      	cmp	r5, sl
   d9a08:	d00e      	beq.n	d9a28 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d9a0a:	f855 7b04 	ldr.w	r7, [r5], #4
   d9a0e:	4659      	mov	r1, fp
   d9a10:	1d38      	adds	r0, r7, #4
   d9a12:	f7ff fddb 	bl	d95cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9a16:	4286      	cmp	r6, r0
   d9a18:	d3f5      	bcc.n	d9a06 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d9a1a:	683b      	ldr	r3, [r7, #0]
   d9a1c:	464a      	mov	r2, r9
   d9a1e:	68db      	ldr	r3, [r3, #12]
   d9a20:	4641      	mov	r1, r8
   d9a22:	4638      	mov	r0, r7
   d9a24:	4798      	blx	r3
   d9a26:	e7ee      	b.n	d9a06 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d9a28:	2300      	movs	r3, #0
   d9a2a:	7323      	strb	r3, [r4, #12]
   d9a2c:	e7de      	b.n	d99ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d9a2e:	bf00      	nop
   d9a30:	e000ed00 	.word	0xe000ed00

000d9a34 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d9a34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9a38:	4b16      	ldr	r3, [pc, #88]	; (d9a94 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d9a3a:	685b      	ldr	r3, [r3, #4]
   d9a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9a40:	4605      	mov	r5, r0
   d9a42:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d9a44:	bb1b      	cbnz	r3, d9a8e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d9a46:	f7ff fe3d 	bl	d96c4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d9a4a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d9a4e:	4604      	mov	r4, r0
   d9a50:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9a52:	9301      	str	r3, [sp, #4]
   d9a54:	f7fe f85e 	bl	d7b14 <os_mutex_recursive_lock>
   d9a58:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d9a5c:	2446      	movs	r4, #70	; 0x46
   d9a5e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9a62:	45b0      	cmp	r8, r6
   d9a64:	d109      	bne.n	d9a7a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d9a66:	a801      	add	r0, sp, #4
   d9a68:	f7ff ff61 	bl	d992e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d9a6c:	42a5      	cmp	r5, r4
   d9a6e:	bfb4      	ite	lt
   d9a70:	2000      	movlt	r0, #0
   d9a72:	2001      	movge	r0, #1
}
   d9a74:	b002      	add	sp, #8
   d9a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d9a7a:	f856 0b04 	ldr.w	r0, [r6], #4
   d9a7e:	4639      	mov	r1, r7
   d9a80:	3004      	adds	r0, #4
   d9a82:	f7ff fda3 	bl	d95cc <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d9a86:	4284      	cmp	r4, r0
   d9a88:	bfa8      	it	ge
   d9a8a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d9a8c:	e7e9      	b.n	d9a62 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d9a8e:	2000      	movs	r0, #0
   d9a90:	e7f0      	b.n	d9a74 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9a92:	bf00      	nop
   d9a94:	e000ed00 	.word	0xe000ed00

000d9a98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9a98:	b570      	push	{r4, r5, r6, lr}
   d9a9a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9a9c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9aa0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9aa2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d9aa6:	4282      	cmp	r2, r0
   d9aa8:	d007      	beq.n	d9aba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d9aaa:	4601      	mov	r1, r0
            if (*p == value) {
   d9aac:	681d      	ldr	r5, [r3, #0]
   d9aae:	f851 6b04 	ldr.w	r6, [r1], #4
   d9ab2:	42ae      	cmp	r6, r5
   d9ab4:	d003      	beq.n	d9abe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d9ab6:	4608      	mov	r0, r1
   d9ab8:	e7f5      	b.n	d9aa6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d9aba:	2000      	movs	r0, #0
}
   d9abc:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9abe:	1a52      	subs	r2, r2, r1
   d9ac0:	f002 fa36 	bl	dbf30 <memmove>
    --size_;
   d9ac4:	6863      	ldr	r3, [r4, #4]
   d9ac6:	3b01      	subs	r3, #1
   d9ac8:	6063      	str	r3, [r4, #4]
    return true;
   d9aca:	2001      	movs	r0, #1
   d9acc:	e7f6      	b.n	d9abc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d9ace <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9ace:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9ad0:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9ad4:	4604      	mov	r4, r0
   d9ad6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9ad8:	9101      	str	r1, [sp, #4]
   d9ada:	9303      	str	r3, [sp, #12]
   d9adc:	f7fe f81a 	bl	d7b14 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9ae0:	a901      	add	r1, sp, #4
   d9ae2:	4620      	mov	r0, r4
   d9ae4:	f7ff ffd8 	bl	d9a98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d9ae8:	b118      	cbz	r0, d9af2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d9aea:	6863      	ldr	r3, [r4, #4]
   d9aec:	b90b      	cbnz	r3, d9af2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d9aee:	f7ff fe15 	bl	d971c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9af2:	a803      	add	r0, sp, #12
   d9af4:	f7ff ff1b 	bl	d992e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9af8:	b004      	add	sp, #16
   d9afa:	bd10      	pop	{r4, pc}

000d9afc <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d9afc:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d9afe:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d9b02:	2318      	movs	r3, #24
   d9b04:	4604      	mov	r4, r0
   d9b06:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9b0a:	42ae      	cmp	r6, r5
   d9b0c:	d015      	beq.n	d9b3a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9b0e:	f105 0110 	add.w	r1, r5, #16
   d9b12:	4620      	mov	r0, r4
   d9b14:	f7ff ffc0 	bl	d9a98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9b18:	6863      	ldr	r3, [r4, #4]
   d9b1a:	b90b      	cbnz	r3, d9b20 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9b1c:	f7ff fdfe 	bl	d971c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d9b20:	69e0      	ldr	r0, [r4, #28]
   d9b22:	6929      	ldr	r1, [r5, #16]
   d9b24:	6803      	ldr	r3, [r0, #0]
   d9b26:	68db      	ldr	r3, [r3, #12]
   d9b28:	4798      	blx	r3
        if (h.stream) {
   d9b2a:	6969      	ldr	r1, [r5, #20]
   d9b2c:	b119      	cbz	r1, d9b36 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d9b2e:	6a20      	ldr	r0, [r4, #32]
   d9b30:	6803      	ldr	r3, [r0, #0]
   d9b32:	68db      	ldr	r3, [r3, #12]
   d9b34:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d9b36:	3518      	adds	r5, #24
   d9b38:	e7e7      	b.n	d9b0a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d9b3a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9b3e:	2618      	movs	r6, #24
   d9b40:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9b44:	42ae      	cmp	r6, r5
   d9b46:	d004      	beq.n	d9b52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9b48:	4628      	mov	r0, r5
   d9b4a:	f000 fe33 	bl	da7b4 <_ZN6StringD1Ev>
   d9b4e:	3518      	adds	r5, #24
   d9b50:	e7f8      	b.n	d9b44 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d9b52:	2300      	movs	r3, #0
   d9b54:	6163      	str	r3, [r4, #20]
}
   d9b56:	bd70      	pop	{r4, r5, r6, pc}

000d9b58 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9b5a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d9b5c:	f7ff fdde 	bl	d971c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9b60:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9b64:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9b66:	9301      	str	r3, [sp, #4]
   d9b68:	f7fd ffd4 	bl	d7b14 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d9b6c:	4620      	mov	r0, r4
   d9b6e:	f7ff ffc5 	bl	d9afc <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d9b72:	a801      	add	r0, sp, #4
   d9b74:	f7ff fedb 	bl	d992e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9b78:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9b7a:	b108      	cbz	r0, d9b80 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9b7c:	f7fd ffc2 	bl	d7b04 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9b80:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9b84:	2618      	movs	r6, #24
   d9b86:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9b8a:	42ae      	cmp	r6, r5
   d9b8c:	d004      	beq.n	d9b98 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d9b8e:	4628      	mov	r0, r5
   d9b90:	f000 fe10 	bl	da7b4 <_ZN6StringD1Ev>
   d9b94:	3518      	adds	r5, #24
   d9b96:	e7f8      	b.n	d9b8a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9b98:	6920      	ldr	r0, [r4, #16]
   d9b9a:	f7fe fb1f 	bl	d81dc <free>
   d9b9e:	6820      	ldr	r0, [r4, #0]
   d9ba0:	f7fe fb1c 	bl	d81dc <free>
}
   d9ba4:	4620      	mov	r0, r4
   d9ba6:	b002      	add	sp, #8
   d9ba8:	bd70      	pop	{r4, r5, r6, pc}

000d9baa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9baa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9bae:	4606      	mov	r6, r0
   d9bb0:	460c      	mov	r4, r1
   d9bb2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9bb4:	d927      	bls.n	d9c06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9bb6:	4290      	cmp	r0, r2
   d9bb8:	d226      	bcs.n	d9c08 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9bba:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9bbe:	1a6c      	subs	r4, r5, r1
   d9bc0:	f1a1 0714 	sub.w	r7, r1, #20
   d9bc4:	4404      	add	r4, r0
        capacity_(0) {
   d9bc6:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d9bc8:	42af      	cmp	r7, r5
   d9bca:	d03d      	beq.n	d9c48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d9bcc:	b1a4      	cbz	r4, d9bf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9bce:	682b      	ldr	r3, [r5, #0]
   d9bd0:	6023      	str	r3, [r4, #0]
   d9bd2:	88ab      	ldrh	r3, [r5, #4]
   d9bd4:	80a3      	strh	r3, [r4, #4]
   d9bd6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d9bda:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d9bdc:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9be0:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9be2:	68ab      	ldr	r3, [r5, #8]
   d9be4:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9be6:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9be8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9bea:	68ea      	ldr	r2, [r5, #12]
   d9bec:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9bee:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9bf0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9bf2:	692a      	ldr	r2, [r5, #16]
   d9bf4:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9bf6:	612b      	str	r3, [r5, #16]
   d9bf8:	f105 0008 	add.w	r0, r5, #8
   d9bfc:	f7ff fe2e 	bl	d985c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d9c00:	3d14      	subs	r5, #20
   d9c02:	3c14      	subs	r4, #20
   d9c04:	e7e0      	b.n	d9bc8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d9c06:	d01f      	beq.n	d9c48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d9c08:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d9c0a:	42ac      	cmp	r4, r5
   d9c0c:	d01c      	beq.n	d9c48 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d9c0e:	b1a6      	cbz	r6, d9c3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d9c10:	6823      	ldr	r3, [r4, #0]
   d9c12:	6033      	str	r3, [r6, #0]
   d9c14:	88a3      	ldrh	r3, [r4, #4]
   d9c16:	80b3      	strh	r3, [r6, #4]
   d9c18:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d9c1c:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d9c1e:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d9c22:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9c24:	68a3      	ldr	r3, [r4, #8]
   d9c26:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c28:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9c2a:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9c2c:	68e2      	ldr	r2, [r4, #12]
   d9c2e:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c30:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9c32:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9c34:	6922      	ldr	r2, [r4, #16]
   d9c36:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c38:	6123      	str	r3, [r4, #16]
   d9c3a:	f104 0008 	add.w	r0, r4, #8
   d9c3e:	f7ff fe0d 	bl	d985c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d9c42:	3414      	adds	r4, #20
   d9c44:	3614      	adds	r6, #20
   d9c46:	e7e0      	b.n	d9c0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d9c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9c4a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9c4c:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d9c50:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9c52:	4604      	mov	r4, r0
   d9c54:	460e      	mov	r6, r1
   d9c56:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9c58:	db0d      	blt.n	d9c76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9c5a:	3501      	adds	r5, #1
        if (n > 0) {
   d9c5c:	2d00      	cmp	r5, #0
   d9c5e:	6800      	ldr	r0, [r0, #0]
   d9c60:	dd04      	ble.n	d9c6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9c62:	00a9      	lsls	r1, r5, #2
   d9c64:	f7fe fac2 	bl	d81ec <realloc>
            if (!d) {
   d9c68:	b918      	cbnz	r0, d9c72 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d9c6c:	f7fe fab6 	bl	d81dc <free>
        T* d = nullptr;
   d9c70:	2000      	movs	r0, #0
        data_ = d;
   d9c72:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9c74:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9c76:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9c78:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9c7a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d9c7e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9c80:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9c84:	1d08      	adds	r0, r1, #4
   d9c86:	f002 f953 	bl	dbf30 <memmove>
    new(p) T(std::move(value));
   d9c8a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9c8e:	6863      	ldr	r3, [r4, #4]
   d9c90:	3301      	adds	r3, #1
   d9c92:	6063      	str	r3, [r4, #4]
    return true;
   d9c94:	2001      	movs	r0, #1
   d9c96:	e7e8      	b.n	d9c6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d9c98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9c9a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9c9e:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9ca0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9ca2:	9301      	str	r3, [sp, #4]
   d9ca4:	460d      	mov	r5, r1
   d9ca6:	f7fd ff35 	bl	d7b14 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9caa:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9cae:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9cb2:	4283      	cmp	r3, r0
   d9cb4:	461a      	mov	r2, r3
   d9cb6:	d00b      	beq.n	d9cd0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d9cb8:	6812      	ldr	r2, [r2, #0]
   d9cba:	42aa      	cmp	r2, r5
   d9cbc:	f103 0304 	add.w	r3, r3, #4
   d9cc0:	d1f7      	bne.n	d9cb2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9cc2:	a801      	add	r0, sp, #4
   d9cc4:	f7ff fe33 	bl	d992e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d9cc8:	2500      	movs	r5, #0
}
   d9cca:	4628      	mov	r0, r5
   d9ccc:	b003      	add	sp, #12
   d9cce:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d9cd0:	462a      	mov	r2, r5
   d9cd2:	4620      	mov	r0, r4
   d9cd4:	f7ff ffb9 	bl	d9c4a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d9cd8:	4605      	mov	r5, r0
   d9cda:	2800      	cmp	r0, #0
   d9cdc:	d0f1      	beq.n	d9cc2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d9cde:	6863      	ldr	r3, [r4, #4]
   d9ce0:	2b01      	cmp	r3, #1
   d9ce2:	d101      	bne.n	d9ce8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d9ce4:	f7ff fd0e 	bl	d9704 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9ce8:	a801      	add	r0, sp, #4
   d9cea:	f7ff fe20 	bl	d992e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d9cee:	e7ec      	b.n	d9cca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d9cf0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d9cf0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9cf4:	4604      	mov	r4, r0
   d9cf6:	460d      	mov	r5, r1
   d9cf8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d9cfa:	d914      	bls.n	d9d26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d9cfc:	4290      	cmp	r0, r2
   d9cfe:	d213      	bcs.n	d9d28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d9d00:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d9d04:	1a75      	subs	r5, r6, r1
   d9d06:	f1a1 0710 	sub.w	r7, r1, #16
   d9d0a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d9d0c:	42b7      	cmp	r7, r6
   d9d0e:	d018      	beq.n	d9d42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d9d10:	b11c      	cbz	r4, d9d1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d9d12:	4631      	mov	r1, r6
   d9d14:	4620      	mov	r0, r4
   d9d16:	f000 fdc9 	bl	da8ac <_ZN6StringC1EOS_>
                end->~T();
   d9d1a:	4630      	mov	r0, r6
   d9d1c:	f000 fd4a 	bl	da7b4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d9d20:	3e10      	subs	r6, #16
   d9d22:	3c10      	subs	r4, #16
   d9d24:	e7f2      	b.n	d9d0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d9d26:	d00c      	beq.n	d9d42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d9d28:	42b5      	cmp	r5, r6
   d9d2a:	d00a      	beq.n	d9d42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d9d2c:	b11c      	cbz	r4, d9d36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d9d2e:	4629      	mov	r1, r5
   d9d30:	4620      	mov	r0, r4
   d9d32:	f000 fdbb 	bl	da8ac <_ZN6StringC1EOS_>
                p->~T();
   d9d36:	4628      	mov	r0, r5
   d9d38:	f000 fd3c 	bl	da7b4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d9d3c:	3510      	adds	r5, #16
   d9d3e:	3410      	adds	r4, #16
   d9d40:	e7f2      	b.n	d9d28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d9d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9d44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d9d44:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d9d46:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d9d48:	4605      	mov	r5, r0
        if (n > 0) {
   d9d4a:	dd11      	ble.n	d9d70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d9d4c:	0130      	lsls	r0, r6, #4
   d9d4e:	f7fe fa3d 	bl	d81cc <malloc>
            if (!d) {
   d9d52:	4604      	mov	r4, r0
   d9d54:	b158      	cbz	r0, d9d6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d9d56:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9d5a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d9d5e:	f7ff ffc7 	bl	d9cf0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d9d62:	6828      	ldr	r0, [r5, #0]
   d9d64:	f7fe fa3a 	bl	d81dc <free>
        data_ = d;
   d9d68:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9d6a:	60ae      	str	r6, [r5, #8]
        return true;
   d9d6c:	2001      	movs	r0, #1
    }
   d9d6e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d9d70:	2400      	movs	r4, #0
   d9d72:	e7f6      	b.n	d9d62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9d74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d78:	4691      	mov	r9, r2
   d9d7a:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d9d7c:	2300      	movs	r3, #0
   d9d7e:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d9d80:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9d84:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9d86:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d9d88:	4299      	cmp	r1, r3
        capacity_(0) {
   d9d8a:	e9c0 3300 	strd	r3, r3, [r0]
   d9d8e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9d96:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9d9a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9d9c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d9d9e:	dc23      	bgt.n	d9de8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d9da0:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9da4:	2314      	movs	r3, #20
   d9da6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d9daa:	42af      	cmp	r7, r5
   d9dac:	d03b      	beq.n	d9e26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9dae:	4629      	mov	r1, r5
   d9db0:	a80d      	add	r0, sp, #52	; 0x34
   d9db2:	f000 fd7b 	bl	da8ac <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9db6:	a90d      	add	r1, sp, #52	; 0x34
   d9db8:	a811      	add	r0, sp, #68	; 0x44
   d9dba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d9dbc:	f000 fd76 	bl	da8ac <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9dc0:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9dc4:	4299      	cmp	r1, r3
   d9dc6:	da1b      	bge.n	d9e00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d9dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d9dca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d9dcc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9dd0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d9dd4:	4631      	mov	r1, r6
   d9dd6:	f106 0010 	add.w	r0, r6, #16
   d9dda:	f7ff ff89 	bl	d9cf0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9dde:	b9ee      	cbnz	r6, d9e1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d9de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9de2:	3301      	adds	r3, #1
   d9de4:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d9de6:	e011      	b.n	d9e0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d9de8:	a80a      	add	r0, sp, #40	; 0x28
   d9dea:	f7ff ffab 	bl	d9d44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9dee:	2800      	cmp	r0, #0
   d9df0:	d1d6      	bne.n	d9da0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d9df2:	a80a      	add	r0, sp, #40	; 0x28
   d9df4:	f7ff fd46 	bl	d9884 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9df8:	4620      	mov	r0, r4
   d9dfa:	b017      	add	sp, #92	; 0x5c
   d9dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9e00:	3101      	adds	r1, #1
   d9e02:	a80a      	add	r0, sp, #40	; 0x28
   d9e04:	f7ff ff9e 	bl	d9d44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9e08:	2800      	cmp	r0, #0
   d9e0a:	d1dd      	bne.n	d9dc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d9e0c:	a811      	add	r0, sp, #68	; 0x44
   d9e0e:	f000 fcd1 	bl	da7b4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d9e12:	a80d      	add	r0, sp, #52	; 0x34
   d9e14:	f000 fcce 	bl	da7b4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d9e18:	3514      	adds	r5, #20
   d9e1a:	e7c6      	b.n	d9daa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d9e1c:	a911      	add	r1, sp, #68	; 0x44
   d9e1e:	4630      	mov	r0, r6
   d9e20:	f000 fd44 	bl	da8ac <_ZN6StringC1EOS_>
   d9e24:	e7dc      	b.n	d9de0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d9e26:	2600      	movs	r6, #0
   d9e28:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d9e2c:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d9e2e:	4637      	mov	r7, r6
   d9e30:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d9e34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9e38:	429e      	cmp	r6, r3
   d9e3a:	f280 8097 	bge.w	d9f6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d9e3e:	0133      	lsls	r3, r6, #4
   d9e40:	58d3      	ldr	r3, [r2, r3]
   d9e42:	9308      	str	r3, [sp, #32]
        if (!category) {
   d9e44:	b90b      	cbnz	r3, d9e4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d9e46:	3601      	adds	r6, #1
   d9e48:	e7f4      	b.n	d9e34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d9e4a:	fb0a f306 	mul.w	r3, sl, r6
   d9e4e:	9709      	str	r7, [sp, #36]	; 0x24
   d9e50:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d9e52:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d9e54:	a909      	add	r1, sp, #36	; 0x24
   d9e56:	a808      	add	r0, sp, #32
   d9e58:	f7ff fafc 	bl	d9454 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9e5c:	4683      	mov	fp, r0
   d9e5e:	2800      	cmp	r0, #0
   d9e60:	d0f1      	beq.n	d9e46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9e62:	4601      	mov	r1, r0
   d9e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d9e66:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9e6a:	f10d 031f 	add.w	r3, sp, #31
   d9e6e:	4628      	mov	r0, r5
   d9e70:	f7ff fb6e 	bl	d9550 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9e74:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9e78:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9e7a:	f1b8 0f00 	cmp.w	r8, #0
   d9e7e:	d166      	bne.n	d9f4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d9e80:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d9e84:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d9e88:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d9e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9e90:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d9e94:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d9e98:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9e9c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d9ea0:	4293      	cmp	r3, r2
   d9ea2:	db1a      	blt.n	d9eda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d9ea4:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d9ea8:	f1bb 0f00 	cmp.w	fp, #0
   d9eac:	dd4a      	ble.n	d9f44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d9eae:	fb0a f00b 	mul.w	r0, sl, fp
   d9eb2:	f7fe f98b 	bl	d81cc <malloc>
            if (!d) {
   d9eb6:	9004      	str	r0, [sp, #16]
   d9eb8:	2800      	cmp	r0, #0
   d9eba:	d045      	beq.n	d9f48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d9ebc:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9ec0:	fb0a 1202 	mla	r2, sl, r2, r1
   d9ec4:	f7ff fe71 	bl	d9baa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d9ec8:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d9eca:	6828      	ldr	r0, [r5, #0]
   d9ecc:	9304      	str	r3, [sp, #16]
   d9ece:	f7fe f985 	bl	d81dc <free>
        data_ = d;
   d9ed2:	9b04      	ldr	r3, [sp, #16]
   d9ed4:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d9ed6:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d9eda:	9b01      	ldr	r3, [sp, #4]
   d9edc:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d9ee0:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d9ee2:	fb0a f303 	mul.w	r3, sl, r3
   d9ee6:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d9eea:	f101 0014 	add.w	r0, r1, #20
   d9eee:	fb0a b202 	mla	r2, sl, r2, fp
   d9ef2:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d9ef4:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d9ef6:	f7ff fe58 	bl	d9baa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d9efa:	9904      	ldr	r1, [sp, #16]
   d9efc:	b1a9      	cbz	r1, d9f2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d9efe:	9b05      	ldr	r3, [sp, #20]
   d9f00:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9f02:	f84b 2003 	str.w	r2, [fp, r3]
   d9f06:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d9f0a:	808b      	strh	r3, [r1, #4]
   d9f0c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d9f10:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d9f12:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d9f16:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9f18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9f1a:	608b      	str	r3, [r1, #8]
   d9f1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d9f1e:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d9f20:	60cb      	str	r3, [r1, #12]
   d9f22:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d9f24:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d9f26:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9f28:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d9f2a:	686b      	ldr	r3, [r5, #4]
   d9f2c:	3301      	adds	r3, #1
   d9f2e:	606b      	str	r3, [r5, #4]
   d9f30:	a813      	add	r0, sp, #76	; 0x4c
   d9f32:	f7ff fc93 	bl	d985c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9f36:	f1b8 0f00 	cmp.w	r8, #0
   d9f3a:	d008      	beq.n	d9f4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d9f3c:	a80d      	add	r0, sp, #52	; 0x34
   d9f3e:	f7ff fc8d 	bl	d985c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9f42:	e756      	b.n	d9df2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d9f44:	4643      	mov	r3, r8
   d9f46:	e7c0      	b.n	d9eca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9f48:	f04f 0801 	mov.w	r8, #1
   d9f4c:	e7f0      	b.n	d9f30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d9f4e:	9b01      	ldr	r3, [sp, #4]
   d9f50:	682d      	ldr	r5, [r5, #0]
   d9f52:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d9f56:	9b08      	ldr	r3, [sp, #32]
   d9f58:	781b      	ldrb	r3, [r3, #0]
   d9f5a:	b92b      	cbnz	r3, d9f68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d9f5c:	f8d9 3000 	ldr.w	r3, [r9]
   d9f60:	9a02      	ldr	r2, [sp, #8]
   d9f62:	4413      	add	r3, r2
   d9f64:	7c1b      	ldrb	r3, [r3, #16]
   d9f66:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d9f68:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d9f6a:	e773      	b.n	d9e54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f6c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9f6e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f70:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9f72:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f74:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9f76:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d9f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d9f7a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f7c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9f7e:	60a2      	str	r2, [r4, #8]
   d9f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d9f82:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f84:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9f86:	60e2      	str	r2, [r4, #12]
   d9f88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d9f8a:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f8c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9f8e:	6122      	str	r2, [r4, #16]
   d9f90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d9f92:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d9f94:	9b03      	ldr	r3, [sp, #12]
   d9f96:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d9f98:	6162      	str	r2, [r4, #20]
   d9f9a:	7623      	strb	r3, [r4, #24]
   d9f9c:	e7ce      	b.n	d9f3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d9fa0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d9fa2:	4605      	mov	r5, r0
   d9fa4:	4b09      	ldr	r3, [pc, #36]	; (d9fcc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d9fa6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9faa:	4604      	mov	r4, r0
   d9fac:	460e      	mov	r6, r1
        filter_(level, filters) {
   d9fae:	a801      	add	r0, sp, #4
   d9fb0:	4611      	mov	r1, r2
   d9fb2:	f7fb fb49 	bl	d5648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9fb6:	aa01      	add	r2, sp, #4
   d9fb8:	4631      	mov	r1, r6
   d9fba:	4628      	mov	r0, r5
   d9fbc:	f7ff feda 	bl	d9d74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9fc0:	a801      	add	r0, sp, #4
   d9fc2:	f7fb f869 	bl	d5098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d9fc6:	4620      	mov	r0, r4
   d9fc8:	b004      	add	sp, #16
   d9fca:	bd70      	pop	{r4, r5, r6, pc}
   d9fcc:	000dc74c 	.word	0x000dc74c

000d9fd0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d9fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9fd2:	460f      	mov	r7, r1
   d9fd4:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9fd6:	4926      	ldr	r1, [pc, #152]	; (da070 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d9fd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9fda:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d9fdc:	4616      	mov	r6, r2
   d9fde:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9fe0:	f002 f803 	bl	dbfea <strcmp>
   d9fe4:	bb00      	cbnz	r0, da028 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d9fe6:	b1e4      	cbz	r4, da022 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d9fe8:	4629      	mov	r1, r5
   d9fea:	4668      	mov	r0, sp
   d9fec:	f7ff fc90 	bl	d9910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d9ff0:	4920      	ldr	r1, [pc, #128]	; (da074 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d9ff2:	2024      	movs	r0, #36	; 0x24
   d9ff4:	f001 faa3 	bl	db53e <_ZnwjRKSt9nothrow_t>
   d9ff8:	4605      	mov	r5, r0
   d9ffa:	b170      	cbz	r0, da01a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d9ffc:	4669      	mov	r1, sp
   d9ffe:	a803      	add	r0, sp, #12
   da000:	f7fb fb22 	bl	d5648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da004:	aa03      	add	r2, sp, #12
   da006:	4631      	mov	r1, r6
   da008:	4628      	mov	r0, r5
   da00a:	f7ff ffc9 	bl	d9fa0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da00e:	a803      	add	r0, sp, #12
   da010:	f7fb f842 	bl	d5098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   da014:	4b18      	ldr	r3, [pc, #96]	; (da078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   da016:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   da018:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da01a:	4668      	mov	r0, sp
   da01c:	f7fb f83c 	bl	d5098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da020:	462c      	mov	r4, r5
}
   da022:	4620      	mov	r0, r4
   da024:	b007      	add	sp, #28
   da026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   da028:	4914      	ldr	r1, [pc, #80]	; (da07c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   da02a:	4638      	mov	r0, r7
   da02c:	f001 ffdd 	bl	dbfea <strcmp>
   da030:	b9e0      	cbnz	r0, da06c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   da032:	2c00      	cmp	r4, #0
   da034:	d0f5      	beq.n	da022 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da036:	4629      	mov	r1, r5
   da038:	4668      	mov	r0, sp
   da03a:	f7ff fc69 	bl	d9910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da03e:	490d      	ldr	r1, [pc, #52]	; (da074 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da040:	2024      	movs	r0, #36	; 0x24
   da042:	f001 fa7c 	bl	db53e <_ZnwjRKSt9nothrow_t>
   da046:	4605      	mov	r5, r0
   da048:	2800      	cmp	r0, #0
   da04a:	d0e6      	beq.n	da01a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da04c:	4669      	mov	r1, sp
   da04e:	a803      	add	r0, sp, #12
   da050:	f7fb fafa 	bl	d5648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da054:	aa03      	add	r2, sp, #12
   da056:	4631      	mov	r1, r6
   da058:	4628      	mov	r0, r5
   da05a:	f7ff ffa1 	bl	d9fa0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da05e:	a803      	add	r0, sp, #12
   da060:	f7fb f81a 	bl	d5098 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da064:	4b06      	ldr	r3, [pc, #24]	; (da080 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   da066:	602b      	str	r3, [r5, #0]
   da068:	622c      	str	r4, [r5, #32]
}
   da06a:	e7d6      	b.n	da01a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   da06c:	2400      	movs	r4, #0
   da06e:	e7d8      	b.n	da022 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   da070:	000dccda 	.word	0x000dccda
   da074:	000dcea0 	.word	0x000dcea0
   da078:	000dcd6c 	.word	0x000dcd6c
   da07c:	000dccde 	.word	0x000dccde
   da080:	000dcd54 	.word	0x000dcd54

000da084 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   da084:	4b01      	ldr	r3, [pc, #4]	; (da08c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da086:	4a02      	ldr	r2, [pc, #8]	; (da090 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da088:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   da08a:	4770      	bx	lr
   da08c:	2003e5dc 	.word	0x2003e5dc
   da090:	000dccef 	.word	0x000dccef

000da094 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da098:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   da09a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da09e:	4604      	mov	r4, r0
   da0a0:	460e      	mov	r6, r1
   da0a2:	4617      	mov	r7, r2
   da0a4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   da0a6:	f001 f85d 	bl	db164 <_Z16_fetch_usbserialv>
   da0aa:	4581      	cmp	r9, r0
   da0ac:	d04c      	beq.n	da148 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   da0ae:	792b      	ldrb	r3, [r5, #4]
   da0b0:	0719      	lsls	r1, r3, #28
   da0b2:	d504      	bpl.n	da0be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   da0b4:	696a      	ldr	r2, [r5, #20]
   da0b6:	4954      	ldr	r1, [pc, #336]	; (da208 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   da0b8:	4620      	mov	r0, r4
   da0ba:	f7ff fa3a 	bl	d9532 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   da0be:	f1b8 0f00 	cmp.w	r8, #0
   da0c2:	d00d      	beq.n	da0e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   da0c4:	215b      	movs	r1, #91	; 0x5b
   da0c6:	4620      	mov	r0, r4
   da0c8:	f7ff fa27 	bl	d951a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   da0cc:	4641      	mov	r1, r8
   da0ce:	4620      	mov	r0, r4
   da0d0:	f7ff fa14 	bl	d94fc <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   da0d4:	6823      	ldr	r3, [r4, #0]
   da0d6:	494d      	ldr	r1, [pc, #308]	; (da20c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   da0d8:	68db      	ldr	r3, [r3, #12]
   da0da:	2202      	movs	r2, #2
   da0dc:	4620      	mov	r0, r4
   da0de:	4798      	blx	r3
    if (attr.has_file) {
   da0e0:	792b      	ldrb	r3, [r5, #4]
   da0e2:	07da      	lsls	r2, r3, #31
   da0e4:	d523      	bpl.n	da12e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   da0e6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   da0ea:	212f      	movs	r1, #47	; 0x2f
   da0ec:	4640      	mov	r0, r8
   da0ee:	f001 ffd9 	bl	dc0a4 <strrchr>
    if (s1) {
   da0f2:	b108      	cbz	r0, da0f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   da0f4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   da0f8:	4641      	mov	r1, r8
   da0fa:	4620      	mov	r0, r4
   da0fc:	f7ff f9fe 	bl	d94fc <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   da100:	792b      	ldrb	r3, [r5, #4]
   da102:	079b      	lsls	r3, r3, #30
   da104:	d508      	bpl.n	da118 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   da106:	213a      	movs	r1, #58	; 0x3a
   da108:	4620      	mov	r0, r4
   da10a:	f7ff fa06 	bl	d951a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   da10e:	68ea      	ldr	r2, [r5, #12]
   da110:	493f      	ldr	r1, [pc, #252]	; (da210 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   da112:	4620      	mov	r0, r4
   da114:	f7ff fa0d 	bl	d9532 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   da118:	792a      	ldrb	r2, [r5, #4]
   da11a:	6823      	ldr	r3, [r4, #0]
   da11c:	f012 0f04 	tst.w	r2, #4
   da120:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   da122:	bf14      	ite	ne
   da124:	493b      	ldrne	r1, [pc, #236]	; (da214 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   da126:	493c      	ldreq	r1, [pc, #240]	; (da218 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   da128:	2202      	movs	r2, #2
            write(": ", 2);
   da12a:	4620      	mov	r0, r4
   da12c:	4798      	blx	r3
    if (attr.has_function) {
   da12e:	792b      	ldrb	r3, [r5, #4]
   da130:	0758      	lsls	r0, r3, #29
   da132:	d51d      	bpl.n	da170 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da134:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da136:	460b      	mov	r3, r1
   da138:	461a      	mov	r2, r3
    for (; *s; ++s) {
   da13a:	f813 0b01 	ldrb.w	r0, [r3], #1
   da13e:	b160      	cbz	r0, da15a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   da140:	2820      	cmp	r0, #32
   da142:	d108      	bne.n	da156 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   da144:	4619      	mov	r1, r3
   da146:	e7f7      	b.n	da138 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   da148:	4834      	ldr	r0, [pc, #208]	; (da21c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   da14a:	f000 f966 	bl	da41a <_ZN5spark12NetworkClass9listeningEv>
   da14e:	2800      	cmp	r0, #0
   da150:	d0ad      	beq.n	da0ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   da152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   da156:	2828      	cmp	r0, #40	; 0x28
   da158:	d1ee      	bne.n	da138 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   da15a:	6823      	ldr	r3, [r4, #0]
   da15c:	1a52      	subs	r2, r2, r1
   da15e:	68db      	ldr	r3, [r3, #12]
   da160:	4620      	mov	r0, r4
   da162:	4798      	blx	r3
        write("(): ", 4);
   da164:	6823      	ldr	r3, [r4, #0]
   da166:	492e      	ldr	r1, [pc, #184]	; (da220 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   da168:	68db      	ldr	r3, [r3, #12]
   da16a:	2204      	movs	r2, #4
   da16c:	4620      	mov	r0, r4
   da16e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   da170:	2100      	movs	r1, #0
   da172:	4638      	mov	r0, r7
   da174:	f7fd fec6 	bl	d7f04 <log_level_name>
   da178:	4601      	mov	r1, r0
    write(s);
   da17a:	4620      	mov	r0, r4
   da17c:	f7ff f9be 	bl	d94fc <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   da180:	6823      	ldr	r3, [r4, #0]
   da182:	4925      	ldr	r1, [pc, #148]	; (da218 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   da184:	68db      	ldr	r3, [r3, #12]
   da186:	2202      	movs	r2, #2
   da188:	4620      	mov	r0, r4
   da18a:	4798      	blx	r3
    if (msg) {
   da18c:	b11e      	cbz	r6, da196 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   da18e:	4631      	mov	r1, r6
   da190:	4620      	mov	r0, r4
   da192:	f7ff f9b3 	bl	d94fc <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   da196:	792b      	ldrb	r3, [r5, #4]
   da198:	f013 0f30 	tst.w	r3, #48	; 0x30
   da19c:	d02c      	beq.n	da1f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   da19e:	6823      	ldr	r3, [r4, #0]
   da1a0:	4920      	ldr	r1, [pc, #128]	; (da224 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   da1a2:	68db      	ldr	r3, [r3, #12]
   da1a4:	2202      	movs	r2, #2
   da1a6:	4620      	mov	r0, r4
   da1a8:	4798      	blx	r3
        if (attr.has_code) {
   da1aa:	792b      	ldrb	r3, [r5, #4]
   da1ac:	06d9      	lsls	r1, r3, #27
   da1ae:	d50a      	bpl.n	da1c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   da1b0:	6823      	ldr	r3, [r4, #0]
   da1b2:	491d      	ldr	r1, [pc, #116]	; (da228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da1b4:	68db      	ldr	r3, [r3, #12]
   da1b6:	2207      	movs	r2, #7
   da1b8:	4620      	mov	r0, r4
   da1ba:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   da1bc:	69aa      	ldr	r2, [r5, #24]
   da1be:	491b      	ldr	r1, [pc, #108]	; (da22c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   da1c0:	4620      	mov	r0, r4
   da1c2:	f7ff f9b6 	bl	d9532 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   da1c6:	792b      	ldrb	r3, [r5, #4]
   da1c8:	069a      	lsls	r2, r3, #26
   da1ca:	d511      	bpl.n	da1f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   da1cc:	06db      	lsls	r3, r3, #27
   da1ce:	d505      	bpl.n	da1dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   da1d0:	6823      	ldr	r3, [r4, #0]
   da1d2:	4910      	ldr	r1, [pc, #64]	; (da214 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   da1d4:	68db      	ldr	r3, [r3, #12]
   da1d6:	2202      	movs	r2, #2
   da1d8:	4620      	mov	r0, r4
   da1da:	4798      	blx	r3
            write("details = ", 10);
   da1dc:	6823      	ldr	r3, [r4, #0]
   da1de:	4914      	ldr	r1, [pc, #80]	; (da230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   da1e0:	68db      	ldr	r3, [r3, #12]
   da1e2:	4620      	mov	r0, r4
   da1e4:	220a      	movs	r2, #10
   da1e6:	4798      	blx	r3
            write(attr.details);
   da1e8:	69e9      	ldr	r1, [r5, #28]
   da1ea:	4620      	mov	r0, r4
   da1ec:	f7ff f986 	bl	d94fc <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   da1f0:	215d      	movs	r1, #93	; 0x5d
   da1f2:	4620      	mov	r0, r4
   da1f4:	f7ff f991 	bl	d951a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   da1f8:	6823      	ldr	r3, [r4, #0]
   da1fa:	490e      	ldr	r1, [pc, #56]	; (da234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   da1fc:	68db      	ldr	r3, [r3, #12]
   da1fe:	4620      	mov	r0, r4
   da200:	2202      	movs	r2, #2
}
   da202:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   da206:	4718      	bx	r3
   da208:	000dccf3 	.word	0x000dccf3
   da20c:	000dccfa 	.word	0x000dccfa
   da210:	000dc8a0 	.word	0x000dc8a0
   da214:	000dccfd 	.word	0x000dccfd
   da218:	000dcd02 	.word	0x000dcd02
   da21c:	2003e608 	.word	0x2003e608
   da220:	000dcd00 	.word	0x000dcd00
   da224:	000dcd05 	.word	0x000dcd05
   da228:	000dcd08 	.word	0x000dcd08
   da22c:	000dc35c 	.word	0x000dc35c
   da230:	000dcd10 	.word	0x000dcd10
   da234:	000dcd1b 	.word	0x000dcd1b

000da238 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da23c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   da23e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da242:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   da244:	4605      	mov	r5, r0
   da246:	460f      	mov	r7, r1
   da248:	4690      	mov	r8, r2
   da24a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   da24c:	f000 ff8a 	bl	db164 <_Z16_fetch_usbserialv>
   da250:	4581      	cmp	r9, r0
   da252:	d105      	bne.n	da260 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   da254:	4849      	ldr	r0, [pc, #292]	; (da37c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   da256:	f000 f8e0 	bl	da41a <_ZN5spark12NetworkClass9listeningEv>
   da25a:	2800      	cmp	r0, #0
   da25c:	f040 808a 	bne.w	da374 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   da260:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   da262:	4a47      	ldr	r2, [pc, #284]	; (da380 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   da264:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   da266:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   da26a:	a801      	add	r0, sp, #4
        strm_(stream) {
   da26c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   da26e:	f88d 9008 	strb.w	r9, [sp, #8]
   da272:	f7ff f838 	bl	d92e6 <_ZN5spark10JSONWriter11beginObjectEv>
   da276:	4649      	mov	r1, r9
   da278:	4640      	mov	r0, r8
   da27a:	f7fd fe43 	bl	d7f04 <log_level_name>
    json.name("l", 1).value(s);
   da27e:	4941      	ldr	r1, [pc, #260]	; (da384 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   da280:	4680      	mov	r8, r0
   da282:	2201      	movs	r2, #1
   da284:	a801      	add	r0, sp, #4
   da286:	f7ff f8b7 	bl	d93f8 <_ZN5spark10JSONWriter4nameEPKcj>
   da28a:	4641      	mov	r1, r8
   da28c:	f7ff f928 	bl	d94e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   da290:	b13f      	cbz	r7, da2a2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   da292:	493d      	ldr	r1, [pc, #244]	; (da388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   da294:	2201      	movs	r2, #1
   da296:	a801      	add	r0, sp, #4
   da298:	f7ff f8ae 	bl	d93f8 <_ZN5spark10JSONWriter4nameEPKcj>
   da29c:	4639      	mov	r1, r7
   da29e:	f7ff f91f 	bl	d94e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   da2a2:	b13e      	cbz	r6, da2b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   da2a4:	4939      	ldr	r1, [pc, #228]	; (da38c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   da2a6:	2201      	movs	r2, #1
   da2a8:	a801      	add	r0, sp, #4
   da2aa:	f7ff f8a5 	bl	d93f8 <_ZN5spark10JSONWriter4nameEPKcj>
   da2ae:	4631      	mov	r1, r6
   da2b0:	f7ff f916 	bl	d94e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   da2b4:	7923      	ldrb	r3, [r4, #4]
   da2b6:	07df      	lsls	r7, r3, #31
   da2b8:	d50e      	bpl.n	da2d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   da2ba:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   da2bc:	212f      	movs	r1, #47	; 0x2f
   da2be:	4630      	mov	r0, r6
   da2c0:	f001 fef0 	bl	dc0a4 <strrchr>
    if (s1) {
   da2c4:	b100      	cbz	r0, da2c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   da2c6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   da2c8:	4931      	ldr	r1, [pc, #196]	; (da390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   da2ca:	2201      	movs	r2, #1
   da2cc:	a801      	add	r0, sp, #4
   da2ce:	f7ff f893 	bl	d93f8 <_ZN5spark10JSONWriter4nameEPKcj>
   da2d2:	4631      	mov	r1, r6
   da2d4:	f7ff f904 	bl	d94e0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   da2d8:	7923      	ldrb	r3, [r4, #4]
   da2da:	079e      	lsls	r6, r3, #30
   da2dc:	d507      	bpl.n	da2ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   da2de:	492d      	ldr	r1, [pc, #180]	; (da394 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   da2e0:	2202      	movs	r2, #2
   da2e2:	a801      	add	r0, sp, #4
   da2e4:	f7ff f888 	bl	d93f8 <_ZN5spark10JSONWriter4nameEPKcj>
   da2e8:	68e1      	ldr	r1, [r4, #12]
   da2ea:	f7ff f809 	bl	d9300 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   da2ee:	7923      	ldrb	r3, [r4, #4]
   da2f0:	0758      	lsls	r0, r3, #29
   da2f2:	d514      	bpl.n	da31e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da2f4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da2f6:	4633      	mov	r3, r6
   da2f8:	461f      	mov	r7, r3
    for (; *s; ++s) {
   da2fa:	f813 2b01 	ldrb.w	r2, [r3], #1
   da2fe:	b12a      	cbz	r2, da30c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   da300:	2a20      	cmp	r2, #32
   da302:	d101      	bne.n	da308 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   da304:	461e      	mov	r6, r3
   da306:	e7f7      	b.n	da2f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   da308:	2a28      	cmp	r2, #40	; 0x28
   da30a:	d1f5      	bne.n	da2f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   da30c:	4922      	ldr	r1, [pc, #136]	; (da398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   da30e:	2202      	movs	r2, #2
   da310:	a801      	add	r0, sp, #4
   da312:	f7ff f871 	bl	d93f8 <_ZN5spark10JSONWriter4nameEPKcj>
   da316:	1bba      	subs	r2, r7, r6
   da318:	4631      	mov	r1, r6
   da31a:	f7ff f87d 	bl	d9418 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   da31e:	7923      	ldrb	r3, [r4, #4]
   da320:	0719      	lsls	r1, r3, #28
   da322:	d507      	bpl.n	da334 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   da324:	491d      	ldr	r1, [pc, #116]	; (da39c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   da326:	2201      	movs	r2, #1
   da328:	a801      	add	r0, sp, #4
   da32a:	f7ff f865 	bl	d93f8 <_ZN5spark10JSONWriter4nameEPKcj>
   da32e:	6961      	ldr	r1, [r4, #20]
   da330:	f7fe fff8 	bl	d9324 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   da334:	7923      	ldrb	r3, [r4, #4]
   da336:	06da      	lsls	r2, r3, #27
   da338:	d508      	bpl.n	da34c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   da33a:	2204      	movs	r2, #4
   da33c:	4918      	ldr	r1, [pc, #96]	; (da3a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   da33e:	eb0d 0002 	add.w	r0, sp, r2
   da342:	f7ff f859 	bl	d93f8 <_ZN5spark10JSONWriter4nameEPKcj>
   da346:	69a1      	ldr	r1, [r4, #24]
   da348:	f7fe ffda 	bl	d9300 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   da34c:	7923      	ldrb	r3, [r4, #4]
   da34e:	069b      	lsls	r3, r3, #26
   da350:	d507      	bpl.n	da362 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   da352:	4914      	ldr	r1, [pc, #80]	; (da3a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   da354:	2206      	movs	r2, #6
   da356:	a801      	add	r0, sp, #4
   da358:	f7ff f84e 	bl	d93f8 <_ZN5spark10JSONWriter4nameEPKcj>
   da35c:	69e1      	ldr	r1, [r4, #28]
   da35e:	f7ff f8bf 	bl	d94e0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   da362:	a801      	add	r0, sp, #4
   da364:	f7fe ffa9 	bl	d92ba <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   da368:	6a28      	ldr	r0, [r5, #32]
   da36a:	490f      	ldr	r1, [pc, #60]	; (da3a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   da36c:	6803      	ldr	r3, [r0, #0]
   da36e:	2202      	movs	r2, #2
   da370:	68db      	ldr	r3, [r3, #12]
   da372:	4798      	blx	r3
}
   da374:	b005      	add	sp, #20
   da376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da37a:	bf00      	nop
   da37c:	2003e608 	.word	0x2003e608
   da380:	000dcd3c 	.word	0x000dcd3c
   da384:	000dccd0 	.word	0x000dccd0
   da388:	000dcd1e 	.word	0x000dcd1e
   da38c:	000dc6e0 	.word	0x000dc6e0
   da390:	000dc807 	.word	0x000dc807
   da394:	000dcd20 	.word	0x000dcd20
   da398:	000dcd23 	.word	0x000dcd23
   da39c:	000dc675 	.word	0x000dc675
   da3a0:	000dcd26 	.word	0x000dcd26
   da3a4:	000dcd2b 	.word	0x000dcd2b
   da3a8:	000dcd1b 	.word	0x000dcd1b

000da3ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da3ac:	2300      	movs	r3, #0
   da3ae:	6840      	ldr	r0, [r0, #4]
   da3b0:	461a      	mov	r2, r3
   da3b2:	f7fd beab 	b.w	d810c <network_connect>

000da3b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da3b6:	6840      	ldr	r0, [r0, #4]
   da3b8:	2200      	movs	r2, #0
   da3ba:	2102      	movs	r1, #2
   da3bc:	f7fd beb6 	b.w	d812c <network_disconnect>

000da3c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da3c0:	2200      	movs	r2, #0
   da3c2:	6840      	ldr	r0, [r0, #4]
   da3c4:	4611      	mov	r1, r2
   da3c6:	f7fd bea9 	b.w	d811c <network_connecting>

000da3ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da3ca:	2200      	movs	r2, #0
   da3cc:	6840      	ldr	r0, [r0, #4]
   da3ce:	4611      	mov	r1, r2
   da3d0:	f7fd beb4 	b.w	d813c <network_ready>

000da3d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da3d4:	2300      	movs	r3, #0
   da3d6:	6840      	ldr	r0, [r0, #4]
   da3d8:	461a      	mov	r2, r3
   da3da:	4619      	mov	r1, r3
   da3dc:	f7fd beb6 	b.w	d814c <network_on>

000da3e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da3e0:	2300      	movs	r3, #0
   da3e2:	6840      	ldr	r0, [r0, #4]
   da3e4:	461a      	mov	r2, r3
   da3e6:	4619      	mov	r1, r3
   da3e8:	f7fd beb8 	b.w	d815c <network_off>

000da3ec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   da3ec:	6840      	ldr	r0, [r0, #4]
   da3ee:	2100      	movs	r1, #0
   da3f0:	f7fd bedc 	b.w	d81ac <network_is_on>

000da3f4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   da3f4:	6840      	ldr	r0, [r0, #4]
   da3f6:	2100      	movs	r1, #0
   da3f8:	f7fd bee0 	b.w	d81bc <network_is_off>

000da3fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da3fc:	6840      	ldr	r0, [r0, #4]
   da3fe:	2200      	movs	r2, #0
   da400:	f081 0101 	eor.w	r1, r1, #1
   da404:	f7fd beb2 	b.w	d816c <network_listen>

000da408 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da408:	6840      	ldr	r0, [r0, #4]
   da40a:	2200      	movs	r2, #0
   da40c:	f7fd bebe 	b.w	d818c <network_set_listen_timeout>

000da410 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da410:	2200      	movs	r2, #0
   da412:	6840      	ldr	r0, [r0, #4]
   da414:	4611      	mov	r1, r2
   da416:	f7fd bec1 	b.w	d819c <network_get_listen_timeout>

000da41a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da41a:	2200      	movs	r2, #0
   da41c:	6840      	ldr	r0, [r0, #4]
   da41e:	4611      	mov	r1, r2
   da420:	f7fd beac 	b.w	d817c <network_listening>

000da424 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da428:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   da42a:	b095      	sub	sp, #84	; 0x54
   da42c:	4616      	mov	r6, r2
   da42e:	460d      	mov	r5, r1
   da430:	4607      	mov	r7, r0
    IPAddress addr;
   da432:	f7fe fde3 	bl	d8ffc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   da436:	4621      	mov	r1, r4
   da438:	2218      	movs	r2, #24
   da43a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   da43c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da43e:	f001 fd91 	bl	dbf64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da442:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   da444:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da448:	4621      	mov	r1, r4
   da44a:	466b      	mov	r3, sp
   da44c:	aa0c      	add	r2, sp, #48	; 0x30
   da44e:	4630      	mov	r0, r6
   da450:	f7fd fc98 	bl	d7d84 <netdb_getaddrinfo>
    if (!r) {
   da454:	4604      	mov	r4, r0
   da456:	2800      	cmp	r0, #0
   da458:	d146      	bne.n	da4e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da45a:	4602      	mov	r2, r0
   da45c:	2101      	movs	r1, #1
   da45e:	6868      	ldr	r0, [r5, #4]
   da460:	f7fd fe6c 	bl	d813c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da464:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da466:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da468:	4622      	mov	r2, r4
   da46a:	6868      	ldr	r0, [r5, #4]
   da46c:	f7fd fe66 	bl	d813c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da470:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da472:	4681      	mov	r9, r0
        bool ok = false;
   da474:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da476:	2e00      	cmp	r6, #0
   da478:	d036      	beq.n	da4e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   da47a:	2900      	cmp	r1, #0
   da47c:	d134      	bne.n	da4e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da47e:	6873      	ldr	r3, [r6, #4]
   da480:	2b02      	cmp	r3, #2
   da482:	d003      	beq.n	da48c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   da484:	2b0a      	cmp	r3, #10
   da486:	d00b      	beq.n	da4a0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da488:	69f6      	ldr	r6, [r6, #28]
   da48a:	e7f4      	b.n	da476 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   da48c:	f1b8 0f00 	cmp.w	r8, #0
   da490:	d004      	beq.n	da49c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da492:	6971      	ldr	r1, [r6, #20]
   da494:	4638      	mov	r0, r7
   da496:	3104      	adds	r1, #4
   da498:	f7fe fddd 	bl	d9056 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   da49c:	4641      	mov	r1, r8
   da49e:	e7f3      	b.n	da488 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   da4a0:	f1b9 0f00 	cmp.w	r9, #0
   da4a4:	d101      	bne.n	da4aa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   da4a6:	4649      	mov	r1, r9
   da4a8:	e7ee      	b.n	da488 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da4aa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da4ac:	2210      	movs	r2, #16
   da4ae:	a801      	add	r0, sp, #4
   da4b0:	f001 fd58 	bl	dbf64 <memset>
                    a.v = 6;
   da4b4:	2306      	movs	r3, #6
   da4b6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da4ba:	ad01      	add	r5, sp, #4
   da4bc:	f104 0308 	add.w	r3, r4, #8
   da4c0:	3418      	adds	r4, #24
   da4c2:	6818      	ldr	r0, [r3, #0]
   da4c4:	6859      	ldr	r1, [r3, #4]
   da4c6:	462a      	mov	r2, r5
   da4c8:	c203      	stmia	r2!, {r0, r1}
   da4ca:	3308      	adds	r3, #8
   da4cc:	42a3      	cmp	r3, r4
   da4ce:	4615      	mov	r5, r2
   da4d0:	d1f7      	bne.n	da4c2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   da4d2:	a901      	add	r1, sp, #4
   da4d4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   da4d6:	ad07      	add	r5, sp, #28
   da4d8:	f7fe fd9e 	bl	d9018 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da4dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da4de:	1d3c      	adds	r4, r7, #4
   da4e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da4e2:	682b      	ldr	r3, [r5, #0]
   da4e4:	7023      	strb	r3, [r4, #0]
   da4e6:	e7de      	b.n	da4a6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da4e8:	9800      	ldr	r0, [sp, #0]
   da4ea:	f7fd fc43 	bl	d7d74 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da4ee:	4638      	mov	r0, r7
   da4f0:	b015      	add	sp, #84	; 0x54
   da4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da4f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da4f8:	4b02      	ldr	r3, [pc, #8]	; (da504 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da4fa:	4a03      	ldr	r2, [pc, #12]	; (da508 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da4fc:	601a      	str	r2, [r3, #0]
   da4fe:	2200      	movs	r2, #0
   da500:	605a      	str	r2, [r3, #4]

} // spark
   da502:	4770      	bx	lr
   da504:	2003e608 	.word	0x2003e608
   da508:	000dcdb4 	.word	0x000dcdb4

000da50c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   da50c:	b508      	push	{r3, lr}
            return &Wire1;
   da50e:	f000 ffe7 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   da512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   da516:	f7fe bcdf 	b.w	d8ed8 <_ZN7TwoWire4lockEv>

000da51a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   da51a:	b510      	push	{r4, lr}
   da51c:	4604      	mov	r4, r0
    lock_(_lock)
   da51e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   da520:	b109      	cbz	r1, da526 <_ZN4PMICC1Eb+0xc>
        lock();
   da522:	f7ff fff3 	bl	da50c <_ZN4PMIC4lockEv.constprop.0>
}
   da526:	4620      	mov	r0, r4
   da528:	bd10      	pop	{r4, pc}

000da52a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   da52a:	b508      	push	{r3, lr}
            return &Wire1;
   da52c:	f000 ffd8 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   da530:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   da534:	f7fe bcd9 	b.w	d8eea <_ZN7TwoWire6unlockEv>

000da538 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   da538:	b510      	push	{r4, lr}
    if (lock_) {
   da53a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   da53c:	4604      	mov	r4, r0
    if (lock_) {
   da53e:	b10b      	cbz	r3, da544 <_ZN4PMICD1Ev+0xc>
        unlock();
   da540:	f7ff fff3 	bl	da52a <_ZN4PMIC6unlockEv>
}
   da544:	4620      	mov	r0, r4
   da546:	bd10      	pop	{r4, pc}

000da548 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   da548:	b510      	push	{r4, lr}
   da54a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   da54c:	6800      	ldr	r0, [r0, #0]
   da54e:	f7ff ffec 	bl	da52a <_ZN4PMIC6unlockEv>
   da552:	4620      	mov	r0, r4
   da554:	bd10      	pop	{r4, pc}

000da556 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   da556:	b530      	push	{r4, r5, lr}
   da558:	b087      	sub	sp, #28
   da55a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da55c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da55e:	f7ff ffd5 	bl	da50c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da562:	236b      	movs	r3, #107	; 0x6b
   da564:	f88d 3008 	strb.w	r3, [sp, #8]
   da568:	2300      	movs	r3, #0
   da56a:	2401      	movs	r4, #1
   da56c:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   da56e:	230a      	movs	r3, #10
   da570:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da572:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   da576:	f000 ffb3 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da57a:	a902      	add	r1, sp, #8
   da57c:	f7fe fc8d 	bl	d8e9a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da580:	f000 ffae 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   da584:	6803      	ldr	r3, [r0, #0]
   da586:	4629      	mov	r1, r5
   da588:	689b      	ldr	r3, [r3, #8]
   da58a:	4798      	blx	r3
            return &Wire1;
   da58c:	f000 ffa8 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da590:	4621      	mov	r1, r4
   da592:	f7fe fc9a 	bl	d8eca <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   da596:	9403      	str	r4, [sp, #12]
            return &Wire1;
   da598:	f000 ffa2 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   da59c:	a902      	add	r1, sp, #8
   da59e:	f7fe fc49 	bl	d8e34 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   da5a2:	f000 ff9d 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   da5a6:	6803      	ldr	r3, [r0, #0]
   da5a8:	695b      	ldr	r3, [r3, #20]
   da5aa:	4798      	blx	r3
   da5ac:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   da5ae:	a801      	add	r0, sp, #4
   da5b0:	f7ff ffca 	bl	da548 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da5b4:	b2e0      	uxtb	r0, r4
   da5b6:	b007      	add	sp, #28
   da5b8:	bd30      	pop	{r4, r5, pc}

000da5ba <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   da5ba:	b570      	push	{r4, r5, r6, lr}
   da5bc:	b086      	sub	sp, #24
   da5be:	4614      	mov	r4, r2
   da5c0:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da5c2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da5c4:	f7ff ffa2 	bl	da50c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da5c8:	236b      	movs	r3, #107	; 0x6b
   da5ca:	f88d 3008 	strb.w	r3, [sp, #8]
   da5ce:	2300      	movs	r3, #0
   da5d0:	9303      	str	r3, [sp, #12]
   da5d2:	2601      	movs	r6, #1
    timeout_ = ms;
   da5d4:	230a      	movs	r3, #10
   da5d6:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da5d8:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   da5dc:	f000 ff80 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da5e0:	a902      	add	r1, sp, #8
   da5e2:	f7fe fc5a 	bl	d8e9a <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da5e6:	f000 ff7b 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   da5ea:	6803      	ldr	r3, [r0, #0]
   da5ec:	4629      	mov	r1, r5
   da5ee:	689b      	ldr	r3, [r3, #8]
   da5f0:	4798      	blx	r3
            return &Wire1;
   da5f2:	f000 ff75 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   da5f6:	6803      	ldr	r3, [r0, #0]
   da5f8:	4621      	mov	r1, r4
   da5fa:	689b      	ldr	r3, [r3, #8]
   da5fc:	4798      	blx	r3
            return &Wire1;
   da5fe:	f000 ff6f 	bl	db4e0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da602:	4631      	mov	r1, r6
   da604:	f7fe fc61 	bl	d8eca <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   da608:	a801      	add	r0, sp, #4
   da60a:	f7ff ff9d 	bl	da548 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da60e:	b006      	add	sp, #24
   da610:	bd70      	pop	{r4, r5, r6, pc}

000da612 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   da612:	b513      	push	{r0, r1, r4, lr}
   da614:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da616:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da618:	f7ff ff78 	bl	da50c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da61c:	2101      	movs	r1, #1
   da61e:	4620      	mov	r0, r4
   da620:	f7ff ff99 	bl	da556 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   da624:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   da628:	f040 0210 	orr.w	r2, r0, #16
   da62c:	2101      	movs	r1, #1
   da62e:	4620      	mov	r0, r4
   da630:	f7ff ffc3 	bl	da5ba <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da634:	a801      	add	r0, sp, #4
   da636:	f7ff ff87 	bl	da548 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da63a:	2001      	movs	r0, #1
   da63c:	b002      	add	sp, #8
   da63e:	bd10      	pop	{r4, pc}

000da640 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   da640:	b513      	push	{r0, r1, r4, lr}
   da642:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da644:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da646:	f7ff ff61 	bl	da50c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da64a:	2101      	movs	r1, #1
   da64c:	4620      	mov	r0, r4
   da64e:	f7ff ff82 	bl	da556 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   da652:	2101      	movs	r1, #1
   da654:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   da658:	4620      	mov	r0, r4
   da65a:	f7ff ffae 	bl	da5ba <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da65e:	a801      	add	r0, sp, #4
   da660:	f7ff ff72 	bl	da548 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da664:	2001      	movs	r0, #1
   da666:	b002      	add	sp, #8
   da668:	bd10      	pop	{r4, pc}

000da66a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da66c:	4606      	mov	r6, r0
   da66e:	460d      	mov	r5, r1
  size_t n = 0;
   da670:	188f      	adds	r7, r1, r2
   da672:	2400      	movs	r4, #0
  while (size--) {
   da674:	42bd      	cmp	r5, r7
   da676:	d00c      	beq.n	da692 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da678:	6833      	ldr	r3, [r6, #0]
   da67a:	f815 1b01 	ldrb.w	r1, [r5], #1
   da67e:	689b      	ldr	r3, [r3, #8]
   da680:	4630      	mov	r0, r6
   da682:	4798      	blx	r3
     if (chunk>=0)
   da684:	1e03      	subs	r3, r0, #0
   da686:	db01      	blt.n	da68c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da688:	441c      	add	r4, r3
  while (size--) {
   da68a:	e7f3      	b.n	da674 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da68c:	2c00      	cmp	r4, #0
   da68e:	bf08      	it	eq
   da690:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   da692:	4620      	mov	r0, r4
   da694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da696 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   da696:	b513      	push	{r0, r1, r4, lr}
   da698:	4604      	mov	r4, r0
    }
   da69a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   da69c:	b159      	cbz	r1, da6b6 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   da69e:	9101      	str	r1, [sp, #4]
   da6a0:	f001 fcd3 	bl	dc04a <strlen>
   da6a4:	6823      	ldr	r3, [r4, #0]
   da6a6:	9901      	ldr	r1, [sp, #4]
   da6a8:	68db      	ldr	r3, [r3, #12]
   da6aa:	4602      	mov	r2, r0
   da6ac:	4620      	mov	r0, r4
    }
   da6ae:	b002      	add	sp, #8
   da6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   da6b4:	4718      	bx	r3
    }
   da6b6:	b002      	add	sp, #8
   da6b8:	bd10      	pop	{r4, pc}

000da6ba <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da6ba:	6803      	ldr	r3, [r0, #0]
   da6bc:	689b      	ldr	r3, [r3, #8]
   da6be:	4718      	bx	r3

000da6c0 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da6c0:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da6c2:	210d      	movs	r1, #13
{
   da6c4:	4605      	mov	r5, r0
  size_t n = print('\r');
   da6c6:	f7ff fff8 	bl	da6ba <_ZN5Print5printEc>
  n += print('\n');
   da6ca:	210a      	movs	r1, #10
  size_t n = print('\r');
   da6cc:	4604      	mov	r4, r0
  n += print('\n');
   da6ce:	4628      	mov	r0, r5
   da6d0:	f7ff fff3 	bl	da6ba <_ZN5Print5printEc>
  return n;
}
   da6d4:	4420      	add	r0, r4
   da6d6:	bd38      	pop	{r3, r4, r5, pc}

000da6d8 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da6d8:	b530      	push	{r4, r5, lr}
   da6da:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da6dc:	2300      	movs	r3, #0
   da6de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da6e2:	2a01      	cmp	r2, #1
   da6e4:	bf98      	it	ls
   da6e6:	220a      	movls	r2, #10
   da6e8:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   da6ea:	460d      	mov	r5, r1
   da6ec:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   da6f0:	fb01 5312 	mls	r3, r1, r2, r5
   da6f4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da6f8:	2b09      	cmp	r3, #9
   da6fa:	bf94      	ite	ls
   da6fc:	3330      	addls	r3, #48	; 0x30
   da6fe:	3337      	addhi	r3, #55	; 0x37
   da700:	b2db      	uxtb	r3, r3
  } while(n);
   da702:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da704:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   da708:	d9ef      	bls.n	da6ea <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   da70a:	4621      	mov	r1, r4
   da70c:	f7ff ffc3 	bl	da696 <_ZN5Print5writeEPKc>
}
   da710:	b00b      	add	sp, #44	; 0x2c
   da712:	bd30      	pop	{r4, r5, pc}

000da714 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   da714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da718:	b086      	sub	sp, #24
   da71a:	af00      	add	r7, sp, #0
   da71c:	4605      	mov	r5, r0
   da71e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   da720:	1d38      	adds	r0, r7, #4
   da722:	2114      	movs	r1, #20
{
   da724:	4614      	mov	r4, r2
    va_copy(args2, args);
   da726:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   da728:	f7fd fd78 	bl	d821c <vsnprintf>

    if (n<bufsize)
   da72c:	2813      	cmp	r0, #19
   da72e:	d80e      	bhi.n	da74e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   da730:	1d39      	adds	r1, r7, #4
   da732:	4628      	mov	r0, r5
   da734:	f7ff ffaf 	bl	da696 <_ZN5Print5writeEPKc>
   da738:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   da73a:	b11e      	cbz	r6, da744 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   da73c:	4628      	mov	r0, r5
   da73e:	f7ff ffbf 	bl	da6c0 <_ZN5Print7printlnEv>
   da742:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   da744:	4620      	mov	r0, r4
   da746:	3718      	adds	r7, #24
   da748:	46bd      	mov	sp, r7
   da74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   da74e:	f100 0308 	add.w	r3, r0, #8
   da752:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   da756:	46e8      	mov	r8, sp
        char bigger[n+1];
   da758:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   da75c:	4622      	mov	r2, r4
   da75e:	1c41      	adds	r1, r0, #1
   da760:	683b      	ldr	r3, [r7, #0]
   da762:	4668      	mov	r0, sp
   da764:	f7fd fd5a 	bl	d821c <vsnprintf>
  return write(str);
   da768:	4669      	mov	r1, sp
   da76a:	4628      	mov	r0, r5
   da76c:	f7ff ff93 	bl	da696 <_ZN5Print5writeEPKc>
   da770:	4604      	mov	r4, r0
   da772:	46c5      	mov	sp, r8
   da774:	e7e1      	b.n	da73a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000da776 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da776:	b510      	push	{r4, lr}
   da778:	4604      	mov	r4, r0
   da77a:	f7f9 fddb 	bl	d4334 <_ZNSt14_Function_baseD1Ev>
   da77e:	4620      	mov	r0, r4
   da780:	bd10      	pop	{r4, pc}
	...

000da784 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   da784:	4803      	ldr	r0, [pc, #12]	; (da794 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da786:	4a04      	ldr	r2, [pc, #16]	; (da798 <_GLOBAL__sub_I_RGB+0x14>)
   da788:	4904      	ldr	r1, [pc, #16]	; (da79c <_GLOBAL__sub_I_RGB+0x18>)
   da78a:	2300      	movs	r3, #0
   da78c:	6083      	str	r3, [r0, #8]
   da78e:	f000 becf 	b.w	db530 <__aeabi_atexit>
   da792:	bf00      	nop
   da794:	2003e610 	.word	0x2003e610
   da798:	2003e310 	.word	0x2003e310
   da79c:	000da777 	.word	0x000da777

000da7a0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   da7a0:	b510      	push	{r4, lr}
   da7a2:	4604      	mov	r4, r0
   da7a4:	4608      	mov	r0, r1
{
    _spi = spi;
   da7a6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   da7a8:	f7fd faf4 	bl	d7d94 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   da7ac:	2300      	movs	r3, #0
   da7ae:	6063      	str	r3, [r4, #4]
}
   da7b0:	4620      	mov	r0, r4
   da7b2:	bd10      	pop	{r4, pc}

000da7b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   da7b4:	b510      	push	{r4, lr}
   da7b6:	4604      	mov	r4, r0
{
	free(buffer);
   da7b8:	6800      	ldr	r0, [r0, #0]
   da7ba:	f7fd fd0f 	bl	d81dc <free>
}
   da7be:	4620      	mov	r0, r4
   da7c0:	bd10      	pop	{r4, pc}

000da7c2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   da7c2:	b510      	push	{r4, lr}
   da7c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   da7c6:	6800      	ldr	r0, [r0, #0]
   da7c8:	b108      	cbz	r0, da7ce <_ZN6String10invalidateEv+0xc>
   da7ca:	f7fd fd07 	bl	d81dc <free>
	buffer = NULL;
   da7ce:	2300      	movs	r3, #0
	capacity = len = 0;
   da7d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   da7d4:	6023      	str	r3, [r4, #0]
}
   da7d6:	bd10      	pop	{r4, pc}

000da7d8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   da7d8:	b538      	push	{r3, r4, r5, lr}
   da7da:	4604      	mov	r4, r0
   da7dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   da7de:	6800      	ldr	r0, [r0, #0]
   da7e0:	3101      	adds	r1, #1
   da7e2:	f7fd fd03 	bl	d81ec <realloc>
	if (newbuffer) {
   da7e6:	b110      	cbz	r0, da7ee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   da7e8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   da7ec:	2001      	movs	r0, #1
	}
	return 0;
}
   da7ee:	bd38      	pop	{r3, r4, r5, pc}

000da7f0 <_ZN6String7reserveEj>:
{
   da7f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da7f2:	6803      	ldr	r3, [r0, #0]
{
   da7f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da7f6:	b123      	cbz	r3, da802 <_ZN6String7reserveEj+0x12>
   da7f8:	6843      	ldr	r3, [r0, #4]
   da7fa:	428b      	cmp	r3, r1
   da7fc:	d301      	bcc.n	da802 <_ZN6String7reserveEj+0x12>
   da7fe:	2001      	movs	r0, #1
}
   da800:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   da802:	4620      	mov	r0, r4
   da804:	f7ff ffe8 	bl	da7d8 <_ZN6String12changeBufferEj>
   da808:	2800      	cmp	r0, #0
   da80a:	d0f9      	beq.n	da800 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   da80c:	68a3      	ldr	r3, [r4, #8]
   da80e:	2b00      	cmp	r3, #0
   da810:	d1f5      	bne.n	da7fe <_ZN6String7reserveEj+0xe>
   da812:	6822      	ldr	r2, [r4, #0]
   da814:	7013      	strb	r3, [r2, #0]
   da816:	e7f2      	b.n	da7fe <_ZN6String7reserveEj+0xe>

000da818 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da818:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da81a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   da81c:	4611      	mov	r1, r2
   da81e:	9201      	str	r2, [sp, #4]
{
   da820:	4604      	mov	r4, r0
	if (!reserve(length)) {
   da822:	f7ff ffe5 	bl	da7f0 <_ZN6String7reserveEj>
   da826:	9a01      	ldr	r2, [sp, #4]
   da828:	b928      	cbnz	r0, da836 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   da82a:	4620      	mov	r0, r4
   da82c:	f7ff ffc9 	bl	da7c2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   da830:	4620      	mov	r0, r4
   da832:	b003      	add	sp, #12
   da834:	bd30      	pop	{r4, r5, pc}
	len = length;
   da836:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   da838:	4629      	mov	r1, r5
   da83a:	6820      	ldr	r0, [r4, #0]
   da83c:	f001 fb6a 	bl	dbf14 <memcpy>
	buffer[len] = 0;
   da840:	6822      	ldr	r2, [r4, #0]
   da842:	68a3      	ldr	r3, [r4, #8]
   da844:	2100      	movs	r1, #0
   da846:	54d1      	strb	r1, [r2, r3]
	return *this;
   da848:	e7f2      	b.n	da830 <_ZN6String4copyEPKcj+0x18>

000da84a <_ZN6StringC1EPKc>:
	buffer = NULL;
   da84a:	2300      	movs	r3, #0
String::String(const char *cstr)
   da84c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   da84e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   da852:	4604      	mov	r4, r0
	len = 0;
   da854:	6083      	str	r3, [r0, #8]
	flags = 0;
   da856:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   da858:	b141      	cbz	r1, da86c <_ZN6StringC1EPKc+0x22>
   da85a:	4608      	mov	r0, r1
   da85c:	9101      	str	r1, [sp, #4]
   da85e:	f001 fbf4 	bl	dc04a <strlen>
   da862:	9901      	ldr	r1, [sp, #4]
   da864:	4602      	mov	r2, r0
   da866:	4620      	mov	r0, r4
   da868:	f7ff ffd6 	bl	da818 <_ZN6String4copyEPKcj>
}
   da86c:	4620      	mov	r0, r4
   da86e:	b002      	add	sp, #8
   da870:	bd10      	pop	{r4, pc}

000da872 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da872:	b538      	push	{r3, r4, r5, lr}
   da874:	4605      	mov	r5, r0
	if (buffer) {
   da876:	6800      	ldr	r0, [r0, #0]
{
   da878:	460c      	mov	r4, r1
	if (buffer) {
   da87a:	b168      	cbz	r0, da898 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   da87c:	686a      	ldr	r2, [r5, #4]
   da87e:	688b      	ldr	r3, [r1, #8]
   da880:	429a      	cmp	r2, r3
   da882:	d307      	bcc.n	da894 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   da884:	6809      	ldr	r1, [r1, #0]
   da886:	f001 fbba 	bl	dbffe <strcpy>
			len = rhs.len;
   da88a:	68a3      	ldr	r3, [r4, #8]
   da88c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   da88e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   da890:	60a3      	str	r3, [r4, #8]
}
   da892:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   da894:	f7fd fca2 	bl	d81dc <free>
	buffer = rhs.buffer;
   da898:	6823      	ldr	r3, [r4, #0]
   da89a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   da89c:	6863      	ldr	r3, [r4, #4]
   da89e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   da8a0:	68a3      	ldr	r3, [r4, #8]
   da8a2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   da8a4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   da8a6:	e9c4 3300 	strd	r3, r3, [r4]
   da8aa:	e7f1      	b.n	da890 <_ZN6String4moveERS_+0x1e>

000da8ac <_ZN6StringC1EOS_>:
String::String(String &&rval)
   da8ac:	b510      	push	{r4, lr}
	buffer = NULL;
   da8ae:	2300      	movs	r3, #0
	capacity = 0;
   da8b0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   da8b4:	4604      	mov	r4, r0
	len = 0;
   da8b6:	6083      	str	r3, [r0, #8]
	flags = 0;
   da8b8:	7303      	strb	r3, [r0, #12]
	move(rval);
   da8ba:	f7ff ffda 	bl	da872 <_ZN6String4moveERS_>
}
   da8be:	4620      	mov	r0, r4
   da8c0:	bd10      	pop	{r4, pc}

000da8c2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da8c2:	4288      	cmp	r0, r1
{
   da8c4:	b510      	push	{r4, lr}
   da8c6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da8c8:	d005      	beq.n	da8d6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da8ca:	680b      	ldr	r3, [r1, #0]
   da8cc:	b12b      	cbz	r3, da8da <_ZN6StringaSERKS_+0x18>
   da8ce:	688a      	ldr	r2, [r1, #8]
   da8d0:	4619      	mov	r1, r3
   da8d2:	f7ff ffa1 	bl	da818 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da8d6:	4620      	mov	r0, r4
   da8d8:	bd10      	pop	{r4, pc}
	else invalidate();
   da8da:	f7ff ff72 	bl	da7c2 <_ZN6String10invalidateEv>
   da8de:	e7fa      	b.n	da8d6 <_ZN6StringaSERKS_+0x14>

000da8e0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   da8e0:	b510      	push	{r4, lr}
	buffer = NULL;
   da8e2:	2300      	movs	r3, #0
String::String(const String &value)
   da8e4:	4604      	mov	r4, r0
	capacity = 0;
   da8e6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   da8ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   da8ec:	7303      	strb	r3, [r0, #12]
	*this = value;
   da8ee:	f7ff ffe8 	bl	da8c2 <_ZN6StringaSERKS_>
}
   da8f2:	4620      	mov	r0, r4
   da8f4:	bd10      	pop	{r4, pc}

000da8f6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da8f6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da8f8:	6882      	ldr	r2, [r0, #8]
   da8fa:	b93a      	cbnz	r2, da90c <_ZNK6String6equalsEPKc+0x16>
   da8fc:	b121      	cbz	r1, da908 <_ZNK6String6equalsEPKc+0x12>
   da8fe:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   da900:	fab0 f080 	clz	r0, r0
   da904:	0940      	lsrs	r0, r0, #5
   da906:	e000      	b.n	da90a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da908:	2001      	movs	r0, #1
}
   da90a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   da90c:	6800      	ldr	r0, [r0, #0]
   da90e:	b909      	cbnz	r1, da914 <_ZNK6String6equalsEPKc+0x1e>
   da910:	7800      	ldrb	r0, [r0, #0]
   da912:	e7f5      	b.n	da900 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   da914:	f001 fb69 	bl	dbfea <strcmp>
   da918:	e7f2      	b.n	da900 <_ZNK6String6equalsEPKc+0xa>

000da91a <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   da91a:	b558      	push	{r3, r4, r6, lr}
   da91c:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   da91e:	b12a      	cbz	r2, da92c <_ZNK6String8getBytesEPhjj+0x12>
   da920:	b121      	cbz	r1, da92c <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   da922:	6884      	ldr	r4, [r0, #8]
   da924:	42a3      	cmp	r3, r4
   da926:	d302      	bcc.n	da92e <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   da928:	2300      	movs	r3, #0
   da92a:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   da92c:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   da92e:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   da930:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   da932:	6801      	ldr	r1, [r0, #0]
   da934:	4294      	cmp	r4, r2
   da936:	bf28      	it	cs
   da938:	4614      	movcs	r4, r2
   da93a:	4419      	add	r1, r3
   da93c:	4622      	mov	r2, r4
   da93e:	4630      	mov	r0, r6
   da940:	f001 fb9d 	bl	dc07e <strncpy>
	buf[n] = 0;
   da944:	2300      	movs	r3, #0
   da946:	5533      	strb	r3, [r6, r4]
   da948:	e7f0      	b.n	da92c <_ZNK6String8getBytesEPhjj+0x12>
	...

000da94c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   da94c:	b40e      	push	{r1, r2, r3}
   da94e:	b570      	push	{r4, r5, r6, lr}
   da950:	b087      	sub	sp, #28
   da952:	ad0b      	add	r5, sp, #44	; 0x2c
   da954:	4604      	mov	r4, r0
   da956:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da95a:	9201      	str	r2, [sp, #4]
   da95c:	462b      	mov	r3, r5
   da95e:	2105      	movs	r1, #5
   da960:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   da962:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da964:	f7fd fc5a 	bl	d821c <vsnprintf>
    va_end(marker);

    String result;
   da968:	490b      	ldr	r1, [pc, #44]	; (da998 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da96a:	4606      	mov	r6, r0
    String result;
   da96c:	4620      	mov	r0, r4
   da96e:	f7ff ff6c 	bl	da84a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   da972:	4631      	mov	r1, r6
   da974:	4620      	mov	r0, r4
   da976:	f7ff ff3b 	bl	da7f0 <_ZN6String7reserveEj>
    if (result.buffer) {
   da97a:	6820      	ldr	r0, [r4, #0]
   da97c:	b130      	cbz	r0, da98c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da97e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   da980:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da982:	462b      	mov	r3, r5
   da984:	1c71      	adds	r1, r6, #1
   da986:	f7fd fc49 	bl	d821c <vsnprintf>
        va_end(marker);
        result.len = n;
   da98a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   da98c:	4620      	mov	r0, r4
   da98e:	b007      	add	sp, #28
   da990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da994:	b003      	add	sp, #12
   da996:	4770      	bx	lr
   da998:	000dcd1d 	.word	0x000dcd1d

000da99c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   da99c:	b510      	push	{r4, lr}
   da99e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   da9a0:	6800      	ldr	r0, [r0, #0]
   da9a2:	b118      	cbz	r0, da9ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   da9a4:	f7fd fc1a 	bl	d81dc <free>
            wakeupSource_ = nullptr;
   da9a8:	2300      	movs	r3, #0
   da9aa:	6023      	str	r3, [r4, #0]
        }
    }
   da9ac:	bd10      	pop	{r4, pc}

000da9ae <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da9ae:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   da9b0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   da9b4:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   da9b6:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da9b8:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   da9ba:	f853 2f06 	ldr.w	r2, [r3, #6]!
   da9be:	f8c0 2006 	str.w	r2, [r0, #6]
   da9c2:	889b      	ldrh	r3, [r3, #4]
   da9c4:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da9c6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   da9c8:	f7ff ffe8 	bl	da99c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   da9cc:	682b      	ldr	r3, [r5, #0]
   da9ce:	b113      	cbz	r3, da9d6 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   da9d0:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   da9d2:	2300      	movs	r3, #0
   da9d4:	602b      	str	r3, [r5, #0]
    }
   da9d6:	4620      	mov	r0, r4
   da9d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000da9dc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   da9dc:	b538      	push	{r3, r4, r5, lr}
   da9de:	460c      	mov	r4, r1
   da9e0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   da9e2:	f7ff ffdb 	bl	da99c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   da9e6:	b144      	cbz	r4, da9fa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   da9e8:	8820      	ldrh	r0, [r4, #0]
   da9ea:	f7fd fbef 	bl	d81cc <malloc>
   da9ee:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   da9f0:	b128      	cbz	r0, da9fe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   da9f2:	8822      	ldrh	r2, [r4, #0]
   da9f4:	4621      	mov	r1, r4
   da9f6:	f001 fa8d 	bl	dbf14 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   da9fa:	2000      	movs	r0, #0
    }
   da9fc:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   da9fe:	4801      	ldr	r0, [pc, #4]	; (daa04 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   daa00:	e7fc      	b.n	da9fc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   daa02:	bf00      	nop
   daa04:	fffffefc 	.word	0xfffffefc

000daa08 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   daa08:	b507      	push	{r0, r1, r2, lr}
   daa0a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   daa0c:	2100      	movs	r1, #0
{
   daa0e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   daa10:	9100      	str	r1, [sp, #0]
   daa12:	2001      	movs	r0, #1
   daa14:	218c      	movs	r1, #140	; 0x8c
   daa16:	f7fd faff 	bl	d8018 <system_reset>
}
   daa1a:	b003      	add	sp, #12
   daa1c:	f85d fb04 	ldr.w	pc, [sp], #4

000daa20 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   daa20:	4601      	mov	r1, r0
    reset(0, flags);
   daa22:	2000      	movs	r0, #0
   daa24:	f7ff bff0 	b.w	daa08 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000daa28 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   daa28:	2000      	movs	r0, #0
   daa2a:	f7ff bff9 	b.w	daa20 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000daa30 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   daa30:	b5f0      	push	{r4, r5, r6, r7, lr}
   daa32:	4d2d      	ldr	r5, [pc, #180]	; (daae8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   daa34:	7d0b      	ldrb	r3, [r1, #20]
   daa36:	4604      	mov	r4, r0
   daa38:	b08b      	sub	sp, #44	; 0x2c
   daa3a:	4608      	mov	r0, r1
   daa3c:	1daf      	adds	r7, r5, #6
   daa3e:	2b00      	cmp	r3, #0
   daa40:	d038      	beq.n	daab4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   daa42:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   daa44:	791b      	ldrb	r3, [r3, #4]
   daa46:	2b00      	cmp	r3, #0
   daa48:	d034      	beq.n	daab4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   daa4a:	2200      	movs	r2, #0
    SleepResult() {}
   daa4c:	4b27      	ldr	r3, [pc, #156]	; (daaec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   daa4e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   daa50:	a902      	add	r1, sp, #8
   daa52:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   daa54:	9202      	str	r2, [sp, #8]
   daa56:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   daa5a:	f88d 200e 	strb.w	r2, [sp, #14]
   daa5e:	f7fd fad1 	bl	d8004 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   daa62:	f8dd 300e 	ldr.w	r3, [sp, #14]
   daa66:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   daa6a:	b200      	sxth	r0, r0
   daa6c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   daa70:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   daa74:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   daa76:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   daa78:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   daa7a:	4628      	mov	r0, r5
   daa7c:	f7ff ffae 	bl	da9dc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   daa80:	a802      	add	r0, sp, #8
   daa82:	f7ff ff8b 	bl	da99c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   daa86:	2300      	movs	r3, #0
   daa88:	6023      	str	r3, [r4, #0]
   daa8a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   daa8c:	71a3      	strb	r3, [r4, #6]
   daa8e:	8123      	strh	r3, [r4, #8]
   daa90:	f64f 73ff 	movw	r3, #65535	; 0xffff
   daa94:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   daa96:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   daa9a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   daa9c:	683b      	ldr	r3, [r7, #0]
   daa9e:	f8c4 3006 	str.w	r3, [r4, #6]
   daaa2:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   daaa4:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   daaa6:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   daaa8:	4620      	mov	r0, r4
   daaaa:	f7ff ff97 	bl	da9dc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   daaae:	4620      	mov	r0, r4
   daab0:	b00b      	add	sp, #44	; 0x2c
   daab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   daab4:	2600      	movs	r6, #0
   daab6:	2320      	movs	r3, #32
   daab8:	e9cd 3602 	strd	r3, r6, [sp, #8]
   daabc:	4b0c      	ldr	r3, [pc, #48]	; (daaf0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   daabe:	9300      	str	r3, [sp, #0]
   daac0:	490c      	ldr	r1, [pc, #48]	; (daaf4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   daac2:	4633      	mov	r3, r6
   daac4:	aa02      	add	r2, sp, #8
   daac6:	2032      	movs	r0, #50	; 0x32
   daac8:	f7fd fa0c 	bl	d7ee4 <log_message>
    SleepResult() {}
   daacc:	4b07      	ldr	r3, [pc, #28]	; (daaec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   daace:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   daad0:	a902      	add	r1, sp, #8
        error_ = error;
   daad2:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   daad6:	4804      	ldr	r0, [pc, #16]	; (daae8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   daad8:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   daada:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   daade:	f8ad 300c 	strh.w	r3, [sp, #12]
   daae2:	f7ff ff64 	bl	da9ae <_ZN17SystemSleepResultaSEOS_>
   daae6:	e7cb      	b.n	daa80 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   daae8:	2003e620 	.word	0x2003e620
   daaec:	ffff0000 	.word	0xffff0000
   daaf0:	000dcdef 	.word	0x000dcdef
   daaf4:	000dcde8 	.word	0x000dcde8

000daaf8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   daaf8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   daafa:	4b09      	ldr	r3, [pc, #36]	; (dab20 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   daafc:	4c09      	ldr	r4, [pc, #36]	; (dab24 <_GLOBAL__sub_I_System+0x2c>)
   daafe:	2202      	movs	r2, #2
   dab00:	2000      	movs	r0, #0
   dab02:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   dab04:	4b08      	ldr	r3, [pc, #32]	; (dab28 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   dab06:	6020      	str	r0, [r4, #0]
   dab08:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   dab0a:	71a0      	strb	r0, [r4, #6]
   dab0c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dab0e:	f7fd fa1b 	bl	d7f48 <set_system_mode>
SystemClass System;
   dab12:	4620      	mov	r0, r4
   dab14:	4a05      	ldr	r2, [pc, #20]	; (dab2c <_GLOBAL__sub_I_System+0x34>)
   dab16:	4906      	ldr	r1, [pc, #24]	; (dab30 <_GLOBAL__sub_I_System+0x38>)
   dab18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   dab1c:	f000 bd08 	b.w	db530 <__aeabi_atexit>
   dab20:	2003e62c 	.word	0x2003e62c
   dab24:	2003e620 	.word	0x2003e620
   dab28:	ffff0000 	.word	0xffff0000
   dab2c:	2003e310 	.word	0x2003e310
   dab30:	000d427b 	.word	0x000d427b

000dab34 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dab34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   dab38:	4a15      	ldr	r2, [pc, #84]	; (dab90 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dab3a:	f8df 8060 	ldr.w	r8, [pc, #96]	; dab9c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   dab3e:	e9d2 3200 	ldrd	r3, r2, [r2]
   dab42:	18c0      	adds	r0, r0, r3
   dab44:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   dab48:	4a12      	ldr	r2, [pc, #72]	; (dab94 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   dab4a:	e9d2 3200 	ldrd	r3, r2, [r2]
   dab4e:	18c6      	adds	r6, r0, r3
   dab50:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   dab54:	e9d8 2300 	ldrd	r2, r3, [r8]
   dab58:	42bb      	cmp	r3, r7
   dab5a:	bf08      	it	eq
   dab5c:	42b2      	cmpeq	r2, r6
{
   dab5e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   dab60:	d013      	beq.n	dab8a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   dab62:	a903      	add	r1, sp, #12
   dab64:	4668      	mov	r0, sp
   dab66:	e9cd 6700 	strd	r6, r7, [sp]
   dab6a:	f7fd fb7f 	bl	d826c <localtime_r>
	calendar_time.tm_year += 1900;
   dab6e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dab70:	4d09      	ldr	r5, [pc, #36]	; (dab98 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   dab72:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dab76:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   dab78:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dab7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dab7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dab7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dab80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dab82:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dab86:	6823      	ldr	r3, [r4, #0]
   dab88:	602b      	str	r3, [r5, #0]
    }
}
   dab8a:	b00c      	add	sp, #48	; 0x30
   dab8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dab90:	2003e668 	.word	0x2003e668
   dab94:	2003e660 	.word	0x2003e660
   dab98:	2003e638 	.word	0x2003e638
   dab9c:	2003e670 	.word	0x2003e670

000daba0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   daba0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   daba2:	2000      	movs	r0, #0
   daba4:	f7fd fa8a 	bl	d80bc <spark_sync_time_pending>
   daba8:	b128      	cbz	r0, dabb6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dabaa:	f7fd fa5f 	bl	d806c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dabae:	f080 0001 	eor.w	r0, r0, #1
   dabb2:	b2c0      	uxtb	r0, r0
    }
   dabb4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dabb6:	2001      	movs	r0, #1
   dabb8:	e7fc      	b.n	dabb4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000dabbc <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   dabbc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dabbe:	f7ff ffb9 	bl	dab34 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   dabc2:	4b01      	ldr	r3, [pc, #4]	; (dabc8 <_ZN9TimeClass4hourEx+0xc>)
   dabc4:	6898      	ldr	r0, [r3, #8]
   dabc6:	bd08      	pop	{r3, pc}
   dabc8:	2003e638 	.word	0x2003e638

000dabcc <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   dabcc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dabce:	f7ff ffb1 	bl	dab34 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   dabd2:	4b01      	ldr	r3, [pc, #4]	; (dabd8 <_ZN9TimeClass3dayEx+0xc>)
   dabd4:	68d8      	ldr	r0, [r3, #12]
   dabd6:	bd08      	pop	{r3, pc}
   dabd8:	2003e638 	.word	0x2003e638

000dabdc <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   dabdc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dabde:	f7ff ffa9 	bl	dab34 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   dabe2:	4b02      	ldr	r3, [pc, #8]	; (dabec <_ZN9TimeClass7weekdayEx+0x10>)
   dabe4:	6998      	ldr	r0, [r3, #24]
}
   dabe6:	3001      	adds	r0, #1
   dabe8:	bd08      	pop	{r3, pc}
   dabea:	bf00      	nop
   dabec:	2003e638 	.word	0x2003e638

000dabf0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dabf0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dabf2:	f7ff ff9f 	bl	dab34 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dabf6:	4b02      	ldr	r3, [pc, #8]	; (dac00 <_ZN9TimeClass5monthEx+0x10>)
   dabf8:	6918      	ldr	r0, [r3, #16]
}
   dabfa:	3001      	adds	r0, #1
   dabfc:	bd08      	pop	{r3, pc}
   dabfe:	bf00      	nop
   dac00:	2003e638 	.word	0x2003e638

000dac04 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dac04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   dac08:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dac0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dac10:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dac12:	d411      	bmi.n	dac38 <_ZN9TimeClass4zoneEf+0x34>
   dac14:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   dac18:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dac1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dac20:	dc0a      	bgt.n	dac38 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   dac22:	eddf 7a06 	vldr	s15, [pc, #24]	; dac3c <_ZN9TimeClass4zoneEf+0x38>
   dac26:	ee60 7a27 	vmul.f32	s15, s0, s15
   dac2a:	ee17 0a90 	vmov	r0, s15
   dac2e:	f001 f8f3 	bl	dbe18 <__aeabi_f2lz>
   dac32:	4b03      	ldr	r3, [pc, #12]	; (dac40 <_ZN9TimeClass4zoneEf+0x3c>)
   dac34:	e9c3 0100 	strd	r0, r1, [r3]
}
   dac38:	bd08      	pop	{r3, pc}
   dac3a:	bf00      	nop
   dac3c:	45610000 	.word	0x45610000
   dac40:	2003e668 	.word	0x2003e668

000dac44 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   dac44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   dac48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dac4c:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   dac4e:	d411      	bmi.n	dac74 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   dac50:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dac54:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dac58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dac5c:	dc0a      	bgt.n	dac74 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   dac5e:	eddf 7a06 	vldr	s15, [pc, #24]	; dac78 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   dac62:	ee60 7a27 	vmul.f32	s15, s0, s15
   dac66:	ee17 0a90 	vmov	r0, s15
   dac6a:	f001 f8d5 	bl	dbe18 <__aeabi_f2lz>
   dac6e:	4b03      	ldr	r3, [pc, #12]	; (dac7c <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   dac70:	e9c3 0100 	strd	r0, r1, [r3]
}
   dac74:	bd08      	pop	{r3, pc}
   dac76:	bf00      	nop
   dac78:	45610000 	.word	0x45610000
   dac7c:	2003e2a0 	.word	0x2003e2a0

000dac80 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   dac80:	4b03      	ldr	r3, [pc, #12]	; (dac90 <_ZN9TimeClass8beginDSTEv+0x10>)
   dac82:	e9d3 0100 	ldrd	r0, r1, [r3]
   dac86:	4b03      	ldr	r3, [pc, #12]	; (dac94 <_ZN9TimeClass8beginDSTEv+0x14>)
   dac88:	e9c3 0100 	strd	r0, r1, [r3]
}
   dac8c:	4770      	bx	lr
   dac8e:	bf00      	nop
   dac90:	2003e2a0 	.word	0x2003e2a0
   dac94:	2003e660 	.word	0x2003e660

000dac98 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   dac98:	4b02      	ldr	r3, [pc, #8]	; (daca4 <_ZN9TimeClass6endDSTEv+0xc>)
   dac9a:	2000      	movs	r0, #0
   dac9c:	2100      	movs	r1, #0
   dac9e:	e9c3 0100 	strd	r0, r1, [r3]
}
   daca2:	4770      	bx	lr
   daca4:	2003e660 	.word	0x2003e660

000daca8 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   daca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dacaa:	4602      	mov	r2, r0
   dacac:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dacae:	4668      	mov	r0, sp
    struct timeval tv = {
   dacb0:	2100      	movs	r1, #0
    };
   dacb2:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dacb6:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dacba:	f7fc ff9b 	bl	d7bf4 <hal_rtc_set_time>
   dacbe:	4602      	mov	r2, r0
   dacc0:	b910      	cbnz	r0, dacc8 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dacc2:	4601      	mov	r1, r0
   dacc4:	f7fd f978 	bl	d7fb8 <system_notify_time_changed>
    }
}
   dacc8:	b005      	add	sp, #20
   dacca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dacd0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dacd0:	b530      	push	{r4, r5, lr}
   dacd2:	4604      	mov	r4, r0
    t += time_zone_cache;
   dacd4:	4818      	ldr	r0, [pc, #96]	; (dad38 <_ZN9TimeClass7timeStrEx+0x68>)
   dacd6:	e9d0 1000 	ldrd	r1, r0, [r0]
   dacda:	1852      	adds	r2, r2, r1
   dacdc:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dace0:	4816      	ldr	r0, [pc, #88]	; (dad3c <_ZN9TimeClass7timeStrEx+0x6c>)
   dace2:	e9d0 1000 	ldrd	r1, r0, [r0]
   dace6:	1852      	adds	r2, r2, r1
{
   dace8:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dacea:	eb40 0303 	adc.w	r3, r0, r3
   dacee:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dacf2:	2224      	movs	r2, #36	; 0x24
   dacf4:	eb0d 0002 	add.w	r0, sp, r2
   dacf8:	2100      	movs	r1, #0
   dacfa:	f001 f933 	bl	dbf64 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dacfe:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dad00:	a909      	add	r1, sp, #36	; 0x24
   dad02:	4668      	mov	r0, sp
   dad04:	f7fd fab2 	bl	d826c <localtime_r>
    char ascstr[26] = {};
   dad08:	2216      	movs	r2, #22
   dad0a:	4629      	mov	r1, r5
   dad0c:	a803      	add	r0, sp, #12
   dad0e:	9502      	str	r5, [sp, #8]
   dad10:	f001 f928 	bl	dbf64 <memset>
    asctime_r(&calendar_time, ascstr);
   dad14:	a902      	add	r1, sp, #8
   dad16:	a809      	add	r0, sp, #36	; 0x24
   dad18:	f001 f8b2 	bl	dbe80 <asctime_r>
    int len = strlen(ascstr);
   dad1c:	a802      	add	r0, sp, #8
   dad1e:	f001 f994 	bl	dc04a <strlen>
    ascstr[len-1] = 0; // remove final newline
   dad22:	ab12      	add	r3, sp, #72	; 0x48
   dad24:	4418      	add	r0, r3
    return String(ascstr);
   dad26:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dad28:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dad2c:	4620      	mov	r0, r4
   dad2e:	f7ff fd8c 	bl	da84a <_ZN6StringC1EPKc>
}
   dad32:	4620      	mov	r0, r4
   dad34:	b013      	add	sp, #76	; 0x4c
   dad36:	bd30      	pop	{r4, r5, pc}
   dad38:	2003e668 	.word	0x2003e668
   dad3c:	2003e660 	.word	0x2003e660

000dad40 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dad44:	b0a5      	sub	sp, #148	; 0x94
   dad46:	4607      	mov	r7, r0
   dad48:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dad4a:	a814      	add	r0, sp, #80	; 0x50
{
   dad4c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dad4e:	223f      	movs	r2, #63	; 0x3f
{
   dad50:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dad52:	f001 f994 	bl	dc07e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dad56:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dad58:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dad5a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dad5e:	f001 f974 	bl	dc04a <strlen>
   dad62:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dad64:	bb5d      	cbnz	r5, dadbe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dad66:	492a      	ldr	r1, [pc, #168]	; (dae10 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dad68:	a803      	add	r0, sp, #12
   dad6a:	f001 f948 	bl	dbffe <strcpy>
   dad6e:	ae14      	add	r6, sp, #80	; 0x50
{
   dad70:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dad72:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dad76:	45ab      	cmp	fp, r5
   dad78:	d936      	bls.n	dade8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dad7a:	46b1      	mov	r9, r6
   dad7c:	f105 0a01 	add.w	sl, r5, #1
   dad80:	f819 3b01 	ldrb.w	r3, [r9], #1
   dad84:	2b25      	cmp	r3, #37	; 0x25
   dad86:	d117      	bne.n	dadb8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dad88:	7873      	ldrb	r3, [r6, #1]
   dad8a:	2b7a      	cmp	r3, #122	; 0x7a
   dad8c:	d114      	bne.n	dadb8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dad8e:	a803      	add	r0, sp, #12
   dad90:	f001 f95b 	bl	dc04a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dad94:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dad96:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dad98:	1828      	adds	r0, r5, r0
   dad9a:	4418      	add	r0, r3
   dad9c:	ebab 0205 	sub.w	r2, fp, r5
   dada0:	1cb1      	adds	r1, r6, #2
   dada2:	f001 f8b7 	bl	dbf14 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dada6:	4622      	mov	r2, r4
   dada8:	a903      	add	r1, sp, #12
   dadaa:	4630      	mov	r0, r6
   dadac:	f001 f8b2 	bl	dbf14 <memcpy>
            len = strlen(format_str);
   dadb0:	a814      	add	r0, sp, #80	; 0x50
   dadb2:	f001 f94a 	bl	dc04a <strlen>
   dadb6:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dadb8:	464e      	mov	r6, r9
   dadba:	4655      	mov	r5, sl
   dadbc:	e7d9      	b.n	dad72 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dadbe:	213c      	movs	r1, #60	; 0x3c
   dadc0:	fb95 f3f1 	sdiv	r3, r5, r1
   dadc4:	2b00      	cmp	r3, #0
   dadc6:	bfb8      	it	lt
   dadc8:	425b      	neglt	r3, r3
   dadca:	fbb3 f2f1 	udiv	r2, r3, r1
   dadce:	fb01 3312 	mls	r3, r1, r2, r3
   dadd2:	9300      	str	r3, [sp, #0]
   dadd4:	4a0f      	ldr	r2, [pc, #60]	; (dae14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dadd6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dadda:	2110      	movs	r1, #16
   daddc:	a803      	add	r0, sp, #12
   dadde:	fb95 f3f3 	sdiv	r3, r5, r3
   dade2:	f7fd fa13 	bl	d820c <snprintf>
   dade6:	e7c2      	b.n	dad6e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dade8:	2100      	movs	r1, #0
   dadea:	222e      	movs	r2, #46	; 0x2e
   dadec:	a808      	add	r0, sp, #32
   dadee:	9107      	str	r1, [sp, #28]
   dadf0:	f001 f8b8 	bl	dbf64 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dadf4:	4643      	mov	r3, r8
   dadf6:	aa14      	add	r2, sp, #80	; 0x50
   dadf8:	2132      	movs	r1, #50	; 0x32
   dadfa:	a807      	add	r0, sp, #28
   dadfc:	f7fd fa2e 	bl	d825c <strftime>
    return String(buf);
   dae00:	a907      	add	r1, sp, #28
   dae02:	4638      	mov	r0, r7
   dae04:	f7ff fd21 	bl	da84a <_ZN6StringC1EPKc>
}
   dae08:	4638      	mov	r0, r7
   dae0a:	b025      	add	sp, #148	; 0x94
   dae0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dae10:	000dce16 	.word	0x000dce16
   dae14:	000dce18 	.word	0x000dce18

000dae18 <_ZN9TimeClass6formatExPKc>:
{
   dae18:	b5f0      	push	{r4, r5, r6, r7, lr}
   dae1a:	b08d      	sub	sp, #52	; 0x34
   dae1c:	e9cd 2300 	strd	r2, r3, [sp]
   dae20:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dae22:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dae24:	b915      	cbnz	r5, dae2c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dae26:	4b19      	ldr	r3, [pc, #100]	; (dae8c <_ZN9TimeClass6formatExPKc+0x74>)
   dae28:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dae2a:	b12d      	cbz	r5, dae38 <_ZN9TimeClass6formatExPKc+0x20>
   dae2c:	4b18      	ldr	r3, [pc, #96]	; (dae90 <_ZN9TimeClass6formatExPKc+0x78>)
   dae2e:	4628      	mov	r0, r5
   dae30:	6819      	ldr	r1, [r3, #0]
   dae32:	f001 f8da 	bl	dbfea <strcmp>
   dae36:	b938      	cbnz	r0, dae48 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dae38:	e9dd 2300 	ldrd	r2, r3, [sp]
   dae3c:	4620      	mov	r0, r4
   dae3e:	f7ff ff47 	bl	dacd0 <_ZN9TimeClass7timeStrEx>
}
   dae42:	4620      	mov	r0, r4
   dae44:	b00d      	add	sp, #52	; 0x34
   dae46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   dae48:	4e12      	ldr	r6, [pc, #72]	; (dae94 <_ZN9TimeClass6formatExPKc+0x7c>)
   dae4a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   dae4c:	4f12      	ldr	r7, [pc, #72]	; (dae98 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   dae4e:	e9d6 3200 	ldrd	r3, r2, [r6]
   dae52:	185b      	adds	r3, r3, r1
   dae54:	9901      	ldr	r1, [sp, #4]
   dae56:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dae5a:	e9d7 0100 	ldrd	r0, r1, [r7]
   dae5e:	181b      	adds	r3, r3, r0
   dae60:	eb41 0202 	adc.w	r2, r1, r2
   dae64:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   dae68:	2100      	movs	r1, #0
   dae6a:	2224      	movs	r2, #36	; 0x24
   dae6c:	a803      	add	r0, sp, #12
   dae6e:	f001 f879 	bl	dbf64 <memset>
    localtime_r(&t, &calendar_time);
   dae72:	a903      	add	r1, sp, #12
   dae74:	4668      	mov	r0, sp
   dae76:	f7fd f9f9 	bl	d826c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dae7a:	6832      	ldr	r2, [r6, #0]
   dae7c:	683b      	ldr	r3, [r7, #0]
   dae7e:	a903      	add	r1, sp, #12
   dae80:	4413      	add	r3, r2
   dae82:	4620      	mov	r0, r4
   dae84:	462a      	mov	r2, r5
   dae86:	f7ff ff5b 	bl	dad40 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   dae8a:	e7da      	b.n	dae42 <_ZN9TimeClass6formatExPKc+0x2a>
   dae8c:	2003e634 	.word	0x2003e634
   dae90:	2003e29c 	.word	0x2003e29c
   dae94:	2003e668 	.word	0x2003e668
   dae98:	2003e660 	.word	0x2003e660

000dae9c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   dae9c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   dae9e:	2000      	movs	r0, #0
   daea0:	f7fc fe90 	bl	d7bc4 <hal_rtc_time_is_valid>
    if (rtcstate)
   daea4:	4604      	mov	r4, r0
   daea6:	b9a0      	cbnz	r0, daed2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   daea8:	f7fd f846 	bl	d7f38 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   daeac:	2801      	cmp	r0, #1
   daeae:	d110      	bne.n	daed2 <_ZN9TimeClass7isValidEv+0x36>
   daeb0:	4620      	mov	r0, r4
   daeb2:	f7fd f879 	bl	d7fa8 <system_thread_get_state>
   daeb6:	b960      	cbnz	r0, daed2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   daeb8:	f7ff fe72 	bl	daba0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   daebc:	b910      	cbnz	r0, daec4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   daebe:	f7fd f8c5 	bl	d804c <spark_process>
        while (_while() && !_condition()) {
   daec2:	e7f9      	b.n	daeb8 <_ZN9TimeClass7isValidEv+0x1c>
   daec4:	f7ff fe6c 	bl	daba0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   daec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   daecc:	2000      	movs	r0, #0
   daece:	f7fc be79 	b.w	d7bc4 <hal_rtc_time_is_valid>
}
   daed2:	4620      	mov	r0, r4
   daed4:	bd10      	pop	{r4, pc}

000daed6 <_ZN9TimeClass3nowEv>:
{
   daed6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   daed8:	f7ff ffe0 	bl	dae9c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   daedc:	2210      	movs	r2, #16
   daede:	2100      	movs	r1, #0
   daee0:	4668      	mov	r0, sp
   daee2:	f001 f83f 	bl	dbf64 <memset>
    hal_rtc_get_time(&tv, nullptr);
   daee6:	2100      	movs	r1, #0
   daee8:	4668      	mov	r0, sp
   daeea:	f7fc fe7b 	bl	d7be4 <hal_rtc_get_time>
}
   daeee:	9800      	ldr	r0, [sp, #0]
   daef0:	b005      	add	sp, #20
   daef2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000daef8 <_ZN9TimeClass4hourEv>:
{
   daef8:	b508      	push	{r3, lr}
	return hour(now());
   daefa:	f7ff ffec 	bl	daed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   daefe:	17c1      	asrs	r1, r0, #31
   daf00:	f7ff fe18 	bl	dab34 <_ZL22Refresh_UnixTime_Cachex>
}
   daf04:	4b01      	ldr	r3, [pc, #4]	; (daf0c <_ZN9TimeClass4hourEv+0x14>)
   daf06:	6898      	ldr	r0, [r3, #8]
   daf08:	bd08      	pop	{r3, pc}
   daf0a:	bf00      	nop
   daf0c:	2003e638 	.word	0x2003e638

000daf10 <_ZN9TimeClass6minuteEv>:
{
   daf10:	b508      	push	{r3, lr}
	return minute(now());
   daf12:	f7ff ffe0 	bl	daed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   daf16:	17c1      	asrs	r1, r0, #31
   daf18:	f7ff fe0c 	bl	dab34 <_ZL22Refresh_UnixTime_Cachex>
}
   daf1c:	4b01      	ldr	r3, [pc, #4]	; (daf24 <_ZN9TimeClass6minuteEv+0x14>)
   daf1e:	6858      	ldr	r0, [r3, #4]
   daf20:	bd08      	pop	{r3, pc}
   daf22:	bf00      	nop
   daf24:	2003e638 	.word	0x2003e638

000daf28 <_ZN9TimeClass3dayEv>:
{
   daf28:	b508      	push	{r3, lr}
	return day(now());
   daf2a:	f7ff ffd4 	bl	daed6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   daf2e:	17c1      	asrs	r1, r0, #31
   daf30:	f7ff fe00 	bl	dab34 <_ZL22Refresh_UnixTime_Cachex>
}
   daf34:	4b01      	ldr	r3, [pc, #4]	; (daf3c <_ZN9TimeClass3dayEv+0x14>)
   daf36:	68d8      	ldr	r0, [r3, #12]
   daf38:	bd08      	pop	{r3, pc}
   daf3a:	bf00      	nop
   daf3c:	2003e638 	.word	0x2003e638

000daf40 <_ZN9TimeClass7weekdayEv>:
{
   daf40:	b508      	push	{r3, lr}
	return weekday(now());
   daf42:	f7ff ffc8 	bl	daed6 <_ZN9TimeClass3nowEv>
}
   daf46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   daf4a:	17c1      	asrs	r1, r0, #31
   daf4c:	f7ff be46 	b.w	dabdc <_ZN9TimeClass7weekdayEx>

000daf50 <_ZN9TimeClass5monthEv>:
{
   daf50:	b508      	push	{r3, lr}
	return month(now());
   daf52:	f7ff ffc0 	bl	daed6 <_ZN9TimeClass3nowEv>
}
   daf56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   daf5a:	17c1      	asrs	r1, r0, #31
   daf5c:	f7ff be48 	b.w	dabf0 <_ZN9TimeClass5monthEx>

000daf60 <_ZN9TimeClass5localEv>:
{
   daf60:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   daf62:	f7ff ffb8 	bl	daed6 <_ZN9TimeClass3nowEv>
   daf66:	4b03      	ldr	r3, [pc, #12]	; (daf74 <_ZN9TimeClass5localEv+0x14>)
   daf68:	4a03      	ldr	r2, [pc, #12]	; (daf78 <_ZN9TimeClass5localEv+0x18>)
   daf6a:	681b      	ldr	r3, [r3, #0]
   daf6c:	6812      	ldr	r2, [r2, #0]
   daf6e:	4413      	add	r3, r2
}
   daf70:	4418      	add	r0, r3
   daf72:	bd08      	pop	{r3, pc}
   daf74:	2003e668 	.word	0x2003e668
   daf78:	2003e660 	.word	0x2003e660

000daf7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   daf7c:	4b02      	ldr	r3, [pc, #8]	; (daf88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   daf7e:	681a      	ldr	r2, [r3, #0]
   daf80:	4b02      	ldr	r3, [pc, #8]	; (daf8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   daf82:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   daf84:	4770      	bx	lr
   daf86:	bf00      	nop
   daf88:	2003e29c 	.word	0x2003e29c
   daf8c:	2003e634 	.word	0x2003e634

000daf90 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   daf90:	4770      	bx	lr

000daf92 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   daf92:	7441      	strb	r1, [r0, #17]
}
   daf94:	4770      	bx	lr

000daf96 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   daf96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   daf98:	7c00      	ldrb	r0, [r0, #16]
   daf9a:	f7fc ff4b 	bl	d7e34 <hal_usart_available_data_for_write>
}
   daf9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafa2:	bd08      	pop	{r3, pc}

000dafa4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dafa4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dafa6:	7c00      	ldrb	r0, [r0, #16]
   dafa8:	f7fc ff1c 	bl	d7de4 <hal_usart_available>
}
   dafac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafb0:	bd08      	pop	{r3, pc}

000dafb2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dafb2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dafb4:	7c00      	ldrb	r0, [r0, #16]
   dafb6:	f7fc ff25 	bl	d7e04 <hal_usart_peek>
}
   dafba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dafbe:	bd08      	pop	{r3, pc}

000dafc0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dafc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dafc2:	7c00      	ldrb	r0, [r0, #16]
   dafc4:	f7fc ff16 	bl	d7df4 <hal_usart_read>
}
   dafc8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dafcc:	bd08      	pop	{r3, pc}

000dafce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   dafce:	7c00      	ldrb	r0, [r0, #16]
   dafd0:	f7fc bf20 	b.w	d7e14 <hal_usart_flush>

000dafd4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dafd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dafd6:	7c45      	ldrb	r5, [r0, #17]
{
   dafd8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dafda:	b12d      	cbz	r5, dafe8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   dafdc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dafde:	b003      	add	sp, #12
   dafe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   dafe4:	f7fc bef6 	b.w	d7dd4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dafe8:	7c00      	ldrb	r0, [r0, #16]
   dafea:	9101      	str	r1, [sp, #4]
   dafec:	f7fc ff22 	bl	d7e34 <hal_usart_available_data_for_write>
   daff0:	2800      	cmp	r0, #0
   daff2:	9901      	ldr	r1, [sp, #4]
   daff4:	dcf2      	bgt.n	dafdc <_ZN11USARTSerial5writeEh+0x8>
}
   daff6:	4628      	mov	r0, r5
   daff8:	b003      	add	sp, #12
   daffa:	bd30      	pop	{r4, r5, pc}

000daffc <_ZN11USARTSerialD0Ev>:
   daffc:	b510      	push	{r4, lr}
   daffe:	2114      	movs	r1, #20
   db000:	4604      	mov	r4, r0
   db002:	f000 fa9a 	bl	db53a <_ZdlPvj>
   db006:	4620      	mov	r0, r4
   db008:	bd10      	pop	{r4, pc}
	...

000db00c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db00c:	b510      	push	{r4, lr}
   db00e:	f04f 0c00 	mov.w	ip, #0
   db012:	4604      	mov	r4, r0
   db014:	4608      	mov	r0, r1
   db016:	4611      	mov	r1, r2
   db018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db01c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db020:	4a04      	ldr	r2, [pc, #16]	; (db034 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db022:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db024:	2201      	movs	r2, #1
  _serial = serial;
   db026:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db028:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db02a:	461a      	mov	r2, r3
   db02c:	f7fc fec2 	bl	d7db4 <hal_usart_init>
}
   db030:	4620      	mov	r0, r4
   db032:	bd10      	pop	{r4, pc}
   db034:	000dce48 	.word	0x000dce48

000db038 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   db038:	7c00      	ldrb	r0, [r0, #16]
   db03a:	2300      	movs	r3, #0
   db03c:	f7fc bf02 	b.w	d7e44 <hal_usart_begin_config>

000db040 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   db040:	2200      	movs	r2, #0
   db042:	f7ff bff9 	b.w	db038 <_ZN11USARTSerial5beginEmm>

000db046 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   db046:	7c00      	ldrb	r0, [r0, #16]
   db048:	f7fc bebc 	b.w	d7dc4 <hal_usart_end>

000db04c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db04c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db04e:	4c0e      	ldr	r4, [pc, #56]	; (db088 <_Z22__fetch_global_Serial1v+0x3c>)
   db050:	7821      	ldrb	r1, [r4, #0]
   db052:	f3bf 8f5b 	dmb	ish
   db056:	f011 0101 	ands.w	r1, r1, #1
   db05a:	d112      	bne.n	db082 <_Z22__fetch_global_Serial1v+0x36>
   db05c:	4620      	mov	r0, r4
   db05e:	9101      	str	r1, [sp, #4]
   db060:	f7f9 f82a 	bl	d40b8 <__cxa_guard_acquire>
   db064:	9901      	ldr	r1, [sp, #4]
   db066:	b160      	cbz	r0, db082 <_Z22__fetch_global_Serial1v+0x36>
   db068:	4a08      	ldr	r2, [pc, #32]	; (db08c <_Z22__fetch_global_Serial1v+0x40>)
   db06a:	4b09      	ldr	r3, [pc, #36]	; (db090 <_Z22__fetch_global_Serial1v+0x44>)
   db06c:	4809      	ldr	r0, [pc, #36]	; (db094 <_Z22__fetch_global_Serial1v+0x48>)
   db06e:	f7ff ffcd 	bl	db00c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db072:	4620      	mov	r0, r4
   db074:	f7f9 f825 	bl	d40c2 <__cxa_guard_release>
   db078:	4a07      	ldr	r2, [pc, #28]	; (db098 <_Z22__fetch_global_Serial1v+0x4c>)
   db07a:	4908      	ldr	r1, [pc, #32]	; (db09c <_Z22__fetch_global_Serial1v+0x50>)
   db07c:	4805      	ldr	r0, [pc, #20]	; (db094 <_Z22__fetch_global_Serial1v+0x48>)
   db07e:	f000 fa57 	bl	db530 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db082:	4804      	ldr	r0, [pc, #16]	; (db094 <_Z22__fetch_global_Serial1v+0x48>)
   db084:	b002      	add	sp, #8
   db086:	bd10      	pop	{r4, pc}
   db088:	2003e678 	.word	0x2003e678
   db08c:	2003e67c 	.word	0x2003e67c
   db090:	2003e700 	.word	0x2003e700
   db094:	2003e784 	.word	0x2003e784
   db098:	2003e310 	.word	0x2003e310
   db09c:	000daf91 	.word	0x000daf91

000db0a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db0a0:	7441      	strb	r1, [r0, #17]
}
   db0a2:	4770      	bx	lr

000db0a4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db0a4:	4770      	bx	lr

000db0a6 <_ZN9USBSerial4readEv>:
{
   db0a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db0a8:	2100      	movs	r1, #0
   db0aa:	7c00      	ldrb	r0, [r0, #16]
   db0ac:	f7fc fefa 	bl	d7ea4 <HAL_USB_USART_Receive_Data>
}
   db0b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db0b4:	bd08      	pop	{r3, pc}

000db0b6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   db0b6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db0b8:	2101      	movs	r1, #1
   db0ba:	7c00      	ldrb	r0, [r0, #16]
   db0bc:	f7fc fef2 	bl	d7ea4 <HAL_USB_USART_Receive_Data>
}
   db0c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db0c4:	bd08      	pop	{r3, pc}

000db0c6 <_ZN9USBSerial17availableForWriteEv>:
{
   db0c6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db0c8:	7c00      	ldrb	r0, [r0, #16]
   db0ca:	f7fc fee3 	bl	d7e94 <HAL_USB_USART_Available_Data_For_Write>
}
   db0ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db0d2:	bd08      	pop	{r3, pc}

000db0d4 <_ZN9USBSerial9availableEv>:
{
   db0d4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db0d6:	7c00      	ldrb	r0, [r0, #16]
   db0d8:	f7fc fed4 	bl	d7e84 <HAL_USB_USART_Available_Data>
}
   db0dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db0e0:	bd08      	pop	{r3, pc}

000db0e2 <_ZN9USBSerial5writeEh>:
{
   db0e2:	b513      	push	{r0, r1, r4, lr}
   db0e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db0e6:	7c00      	ldrb	r0, [r0, #16]
{
   db0e8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db0ea:	f7fc fed3 	bl	d7e94 <HAL_USB_USART_Available_Data_For_Write>
   db0ee:	2800      	cmp	r0, #0
   db0f0:	9901      	ldr	r1, [sp, #4]
   db0f2:	dc01      	bgt.n	db0f8 <_ZN9USBSerial5writeEh+0x16>
   db0f4:	7c60      	ldrb	r0, [r4, #17]
   db0f6:	b120      	cbz	r0, db102 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db0f8:	7c20      	ldrb	r0, [r4, #16]
   db0fa:	f7fc fedb 	bl	d7eb4 <HAL_USB_USART_Send_Data>
   db0fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db102:	b002      	add	sp, #8
   db104:	bd10      	pop	{r4, pc}

000db106 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db106:	7c00      	ldrb	r0, [r0, #16]
   db108:	f7fc bedc 	b.w	d7ec4 <HAL_USB_USART_Flush_Data>

000db10c <_ZN9USBSerialD0Ev>:
   db10c:	b510      	push	{r4, lr}
   db10e:	2114      	movs	r1, #20
   db110:	4604      	mov	r4, r0
   db112:	f000 fa12 	bl	db53a <_ZdlPvj>
   db116:	4620      	mov	r0, r4
   db118:	bd10      	pop	{r4, pc}
	...

000db11c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db11c:	b510      	push	{r4, lr}
   db11e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db122:	4604      	mov	r4, r0
   db124:	4608      	mov	r0, r1
   db126:	2100      	movs	r1, #0
   db128:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db12c:	4b04      	ldr	r3, [pc, #16]	; (db140 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db12e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db130:	2301      	movs	r3, #1
  _serial = serial;
   db132:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db134:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db136:	4611      	mov	r1, r2
   db138:	f7fc fe8c 	bl	d7e54 <HAL_USB_USART_Init>
}
   db13c:	4620      	mov	r0, r4
   db13e:	bd10      	pop	{r4, pc}
   db140:	000dce78 	.word	0x000dce78

000db144 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db144:	7c00      	ldrb	r0, [r0, #16]
   db146:	2200      	movs	r2, #0
   db148:	f7fc be8c 	b.w	d7e64 <HAL_USB_USART_Begin>

000db14c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   db14c:	7c00      	ldrb	r0, [r0, #16]
   db14e:	f7fc be91 	b.w	d7e74 <HAL_USB_USART_End>

000db152 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db152:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db154:	2214      	movs	r2, #20
{
   db156:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db158:	2100      	movs	r1, #0
   db15a:	f000 ff03 	bl	dbf64 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db15e:	4620      	mov	r0, r4
   db160:	bd10      	pop	{r4, pc}
	...

000db164 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db164:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db166:	4c10      	ldr	r4, [pc, #64]	; (db1a8 <_Z16_fetch_usbserialv+0x44>)
{
   db168:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db16a:	a803      	add	r0, sp, #12
   db16c:	f7ff fff1 	bl	db152 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db170:	7821      	ldrb	r1, [r4, #0]
   db172:	f3bf 8f5b 	dmb	ish
   db176:	f011 0101 	ands.w	r1, r1, #1
   db17a:	d111      	bne.n	db1a0 <_Z16_fetch_usbserialv+0x3c>
   db17c:	4620      	mov	r0, r4
   db17e:	9101      	str	r1, [sp, #4]
   db180:	f7f8 ff9a 	bl	d40b8 <__cxa_guard_acquire>
   db184:	9901      	ldr	r1, [sp, #4]
   db186:	b158      	cbz	r0, db1a0 <_Z16_fetch_usbserialv+0x3c>
   db188:	aa03      	add	r2, sp, #12
   db18a:	4808      	ldr	r0, [pc, #32]	; (db1ac <_Z16_fetch_usbserialv+0x48>)
   db18c:	f7ff ffc6 	bl	db11c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db190:	4620      	mov	r0, r4
   db192:	f7f8 ff96 	bl	d40c2 <__cxa_guard_release>
   db196:	4a06      	ldr	r2, [pc, #24]	; (db1b0 <_Z16_fetch_usbserialv+0x4c>)
   db198:	4906      	ldr	r1, [pc, #24]	; (db1b4 <_Z16_fetch_usbserialv+0x50>)
   db19a:	4804      	ldr	r0, [pc, #16]	; (db1ac <_Z16_fetch_usbserialv+0x48>)
   db19c:	f000 f9c8 	bl	db530 <__aeabi_atexit>
	return _usbserial;
}
   db1a0:	4802      	ldr	r0, [pc, #8]	; (db1ac <_Z16_fetch_usbserialv+0x48>)
   db1a2:	b008      	add	sp, #32
   db1a4:	bd10      	pop	{r4, pc}
   db1a6:	bf00      	nop
   db1a8:	2003e798 	.word	0x2003e798
   db1ac:	2003e79c 	.word	0x2003e79c
   db1b0:	2003e310 	.word	0x2003e310
   db1b4:	000db0a5 	.word	0x000db0a5

000db1b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db1b8:	4b01      	ldr	r3, [pc, #4]	; (db1c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db1ba:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db1bc:	4770      	bx	lr
   db1be:	bf00      	nop
   db1c0:	2003e2a8 	.word	0x2003e2a8

000db1c4 <serialEventRun>:
{
   db1c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db1c6:	4b0b      	ldr	r3, [pc, #44]	; (db1f4 <serialEventRun+0x30>)
   db1c8:	b143      	cbz	r3, db1dc <serialEventRun+0x18>
   db1ca:	f7ff ffcb 	bl	db164 <_Z16_fetch_usbserialv>
   db1ce:	6803      	ldr	r3, [r0, #0]
   db1d0:	691b      	ldr	r3, [r3, #16]
   db1d2:	4798      	blx	r3
   db1d4:	2800      	cmp	r0, #0
   db1d6:	dd01      	ble.n	db1dc <serialEventRun+0x18>
        serialEvent();
   db1d8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db1dc:	4b06      	ldr	r3, [pc, #24]	; (db1f8 <serialEventRun+0x34>)
   db1de:	b143      	cbz	r3, db1f2 <serialEventRun+0x2e>
   db1e0:	f7ff ff34 	bl	db04c <_Z22__fetch_global_Serial1v>
   db1e4:	6803      	ldr	r3, [r0, #0]
   db1e6:	691b      	ldr	r3, [r3, #16]
   db1e8:	4798      	blx	r3
   db1ea:	2800      	cmp	r0, #0
   db1ec:	dd01      	ble.n	db1f2 <serialEventRun+0x2e>
        serialEvent1();
   db1ee:	f3af 8000 	nop.w
}
   db1f2:	bd08      	pop	{r3, pc}
	...

000db1fc <_post_loop>:
{
   db1fc:	b508      	push	{r3, lr}
	serialEventRun();
   db1fe:	f7ff ffe1 	bl	db1c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db202:	f7fc fcd7 	bl	d7bb4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db206:	4b01      	ldr	r3, [pc, #4]	; (db20c <_post_loop+0x10>)
   db208:	6018      	str	r0, [r3, #0]
}
   db20a:	bd08      	pop	{r3, pc}
   db20c:	2003e7c4 	.word	0x2003e7c4

000db210 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db210:	4802      	ldr	r0, [pc, #8]	; (db21c <_Z33system_initialize_user_backup_ramv+0xc>)
   db212:	4a03      	ldr	r2, [pc, #12]	; (db220 <_Z33system_initialize_user_backup_ramv+0x10>)
   db214:	4903      	ldr	r1, [pc, #12]	; (db224 <_Z33system_initialize_user_backup_ramv+0x14>)
   db216:	1a12      	subs	r2, r2, r0
   db218:	f000 be7c 	b.w	dbf14 <memcpy>
   db21c:	2003f400 	.word	0x2003f400
   db220:	2003fc04 	.word	0x2003fc04
   db224:	000dd030 	.word	0x000dd030

000db228 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db228:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db22a:	2300      	movs	r3, #0
   db22c:	9300      	str	r3, [sp, #0]
   db22e:	461a      	mov	r2, r3
   db230:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db234:	f7fc fed2 	bl	d7fdc <system_ctrl_set_result>
}
   db238:	b003      	add	sp, #12
   db23a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db240 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db240:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db242:	8843      	ldrh	r3, [r0, #2]
   db244:	2b0a      	cmp	r3, #10
   db246:	d008      	beq.n	db25a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db248:	2b50      	cmp	r3, #80	; 0x50
   db24a:	d10b      	bne.n	db264 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db24c:	4b09      	ldr	r3, [pc, #36]	; (db274 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db24e:	681b      	ldr	r3, [r3, #0]
   db250:	b14b      	cbz	r3, db266 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db252:	b003      	add	sp, #12
   db254:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db258:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db25a:	f7ff ffe5 	bl	db228 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db25e:	b003      	add	sp, #12
   db260:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db264:	2300      	movs	r3, #0
   db266:	9300      	str	r3, [sp, #0]
   db268:	461a      	mov	r2, r3
   db26a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db26e:	f7fc feb5 	bl	d7fdc <system_ctrl_set_result>
}
   db272:	e7f4      	b.n	db25e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db274:	2003e7b4 	.word	0x2003e7b4

000db278 <module_user_init_hook>:
{
   db278:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db27a:	4c12      	ldr	r4, [pc, #72]	; (db2c4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db27c:	4812      	ldr	r0, [pc, #72]	; (db2c8 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db27e:	4d13      	ldr	r5, [pc, #76]	; (db2cc <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db280:	2100      	movs	r1, #0
   db282:	f7fc ffe3 	bl	d824c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db286:	6823      	ldr	r3, [r4, #0]
   db288:	42ab      	cmp	r3, r5
   db28a:	4b11      	ldr	r3, [pc, #68]	; (db2d0 <module_user_init_hook+0x58>)
   db28c:	bf0c      	ite	eq
   db28e:	2201      	moveq	r2, #1
   db290:	2200      	movne	r2, #0
   db292:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db294:	d002      	beq.n	db29c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   db296:	f7ff ffbb 	bl	db210 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   db29a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db29c:	f7fc fc72 	bl	d7b84 <HAL_RNG_GetRandomNumber>
   db2a0:	4604      	mov	r4, r0
    srand(seed);
   db2a2:	f000 fe67 	bl	dbf74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db2a6:	4b0b      	ldr	r3, [pc, #44]	; (db2d4 <module_user_init_hook+0x5c>)
   db2a8:	b113      	cbz	r3, db2b0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   db2aa:	4620      	mov	r0, r4
   db2ac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db2b0:	2100      	movs	r1, #0
   db2b2:	4808      	ldr	r0, [pc, #32]	; (db2d4 <module_user_init_hook+0x5c>)
   db2b4:	f7fc ff1a 	bl	d80ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db2b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db2bc:	4806      	ldr	r0, [pc, #24]	; (db2d8 <module_user_init_hook+0x60>)
   db2be:	2100      	movs	r1, #0
   db2c0:	f7fc be82 	b.w	d7fc8 <system_ctrl_set_app_request_handler>
   db2c4:	2003fc00 	.word	0x2003fc00
   db2c8:	000db1b9 	.word	0x000db1b9
   db2cc:	9a271c1e 	.word	0x9a271c1e
   db2d0:	2003e7b0 	.word	0x2003e7b0
   db2d4:	00000000 	.word	0x00000000
   db2d8:	000db241 	.word	0x000db241

000db2dc <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   db2dc:	b508      	push	{r3, lr}
   db2de:	4b02      	ldr	r3, [pc, #8]	; (db2e8 <spark_protocol_instance+0xc>)
   db2e0:	681b      	ldr	r3, [r3, #0]
   db2e2:	681b      	ldr	r3, [r3, #0]
   db2e4:	9301      	str	r3, [sp, #4]
   db2e6:	bd08      	pop	{r3, pc}
   db2e8:	0003025c 	.word	0x0003025c

000db2ec <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   db2ec:	b508      	push	{r3, lr}
   db2ee:	4b02      	ldr	r3, [pc, #8]	; (db2f8 <spark_protocol_set_product_id+0xc>)
   db2f0:	681b      	ldr	r3, [r3, #0]
   db2f2:	685b      	ldr	r3, [r3, #4]
   db2f4:	9301      	str	r3, [sp, #4]
   db2f6:	bd08      	pop	{r3, pc}
   db2f8:	0003025c 	.word	0x0003025c

000db2fc <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   db2fc:	b508      	push	{r3, lr}
   db2fe:	4b02      	ldr	r3, [pc, #8]	; (db308 <spark_protocol_set_product_firmware_version+0xc>)
   db300:	681b      	ldr	r3, [r3, #0]
   db302:	689b      	ldr	r3, [r3, #8]
   db304:	9301      	str	r3, [sp, #4]
   db306:	bd08      	pop	{r3, pc}
   db308:	0003025c 	.word	0x0003025c

000db30c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db30c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db30e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db310:	d902      	bls.n	db318 <pinAvailable+0xc>
    return false;
   db312:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db314:	b002      	add	sp, #8
   db316:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db318:	f1a0 030b 	sub.w	r3, r0, #11
   db31c:	2b02      	cmp	r3, #2
   db31e:	d81a      	bhi.n	db356 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db320:	4c17      	ldr	r4, [pc, #92]	; (db380 <pinAvailable+0x74>)
   db322:	7821      	ldrb	r1, [r4, #0]
   db324:	f3bf 8f5b 	dmb	ish
   db328:	f011 0101 	ands.w	r1, r1, #1
   db32c:	d10b      	bne.n	db346 <pinAvailable+0x3a>
   db32e:	4620      	mov	r0, r4
   db330:	9101      	str	r1, [sp, #4]
   db332:	f7f8 fec1 	bl	d40b8 <__cxa_guard_acquire>
   db336:	9901      	ldr	r1, [sp, #4]
   db338:	b128      	cbz	r0, db346 <pinAvailable+0x3a>
   db33a:	4812      	ldr	r0, [pc, #72]	; (db384 <pinAvailable+0x78>)
   db33c:	f7ff fa30 	bl	da7a0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   db340:	4620      	mov	r0, r4
   db342:	f7f8 febe 	bl	d40c2 <__cxa_guard_release>
   db346:	4b0f      	ldr	r3, [pc, #60]	; (db384 <pinAvailable+0x78>)
   db348:	7818      	ldrb	r0, [r3, #0]
   db34a:	f7fc fd2b 	bl	d7da4 <hal_spi_is_enabled>
   db34e:	2800      	cmp	r0, #0
   db350:	d1df      	bne.n	db312 <pinAvailable+0x6>
  return true; // 'pin' is available
   db352:	2001      	movs	r0, #1
   db354:	e7de      	b.n	db314 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db356:	2801      	cmp	r0, #1
   db358:	d809      	bhi.n	db36e <pinAvailable+0x62>
   db35a:	f000 f899 	bl	db490 <_Z19__fetch_global_Wirev>
   db35e:	2100      	movs	r1, #0
   db360:	7c00      	ldrb	r0, [r0, #16]
   db362:	f7fc fcd7 	bl	d7d14 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db366:	f080 0001 	eor.w	r0, r0, #1
   db36a:	b2c0      	uxtb	r0, r0
   db36c:	e7d2      	b.n	db314 <pinAvailable+0x8>
   db36e:	3809      	subs	r0, #9
   db370:	2801      	cmp	r0, #1
   db372:	d8ee      	bhi.n	db352 <pinAvailable+0x46>
   db374:	f7ff fe6a 	bl	db04c <_Z22__fetch_global_Serial1v>
   db378:	7c00      	ldrb	r0, [r0, #16]
   db37a:	f7fc fd53 	bl	d7e24 <hal_usart_is_enabled>
   db37e:	e7f2      	b.n	db366 <pinAvailable+0x5a>
   db380:	2003e7b8 	.word	0x2003e7b8
   db384:	2003e7bc 	.word	0x2003e7bc

000db388 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db388:	2823      	cmp	r0, #35	; 0x23
{
   db38a:	b538      	push	{r3, r4, r5, lr}
   db38c:	4604      	mov	r4, r0
   db38e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db390:	d80a      	bhi.n	db3a8 <pinMode+0x20>
   db392:	29ff      	cmp	r1, #255	; 0xff
   db394:	d008      	beq.n	db3a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db396:	f7ff ffb9 	bl	db30c <pinAvailable>
   db39a:	b128      	cbz	r0, db3a8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db39c:	4629      	mov	r1, r5
   db39e:	4620      	mov	r0, r4
}
   db3a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db3a4:	f7fc bc3e 	b.w	d7c24 <HAL_Pin_Mode>
}
   db3a8:	bd38      	pop	{r3, r4, r5, pc}

000db3aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db3aa:	b538      	push	{r3, r4, r5, lr}
   db3ac:	4604      	mov	r4, r0
   db3ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db3b0:	f7fc fc40 	bl	d7c34 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db3b4:	28ff      	cmp	r0, #255	; 0xff
   db3b6:	d010      	beq.n	db3da <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db3b8:	2806      	cmp	r0, #6
   db3ba:	d804      	bhi.n	db3c6 <digitalWrite+0x1c>
   db3bc:	234d      	movs	r3, #77	; 0x4d
   db3be:	fa23 f000 	lsr.w	r0, r3, r0
   db3c2:	07c3      	lsls	r3, r0, #31
   db3c4:	d409      	bmi.n	db3da <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db3c6:	4620      	mov	r0, r4
   db3c8:	f7ff ffa0 	bl	db30c <pinAvailable>
   db3cc:	b128      	cbz	r0, db3da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db3ce:	4629      	mov	r1, r5
   db3d0:	4620      	mov	r0, r4
}
   db3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db3d6:	f7fc bc35 	b.w	d7c44 <HAL_GPIO_Write>
}
   db3da:	bd38      	pop	{r3, r4, r5, pc}

000db3dc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   db3dc:	b510      	push	{r4, lr}
   db3de:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db3e0:	f7fc fc28 	bl	d7c34 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   db3e4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   db3e6:	b2db      	uxtb	r3, r3
   db3e8:	2b01      	cmp	r3, #1
   db3ea:	d908      	bls.n	db3fe <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   db3ec:	4620      	mov	r0, r4
   db3ee:	f7ff ff8d 	bl	db30c <pinAvailable>
   db3f2:	b120      	cbz	r0, db3fe <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   db3f4:	4620      	mov	r0, r4
}
   db3f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   db3fa:	f7fc bc2b 	b.w	d7c54 <HAL_GPIO_Read>
}
   db3fe:	2000      	movs	r0, #0
   db400:	bd10      	pop	{r4, pc}

000db402 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db402:	280d      	cmp	r0, #13
{
   db404:	b510      	push	{r4, lr}
   db406:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   db408:	bf9c      	itt	ls
   db40a:	340e      	addls	r4, #14
   db40c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db40e:	4620      	mov	r0, r4
   db410:	f7ff ff7c 	bl	db30c <pinAvailable>
   db414:	b150      	cbz	r0, db42c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db416:	2103      	movs	r1, #3
   db418:	4620      	mov	r0, r4
   db41a:	f7fc fbfb 	bl	d7c14 <HAL_Validate_Pin_Function>
   db41e:	2803      	cmp	r0, #3
   db420:	d104      	bne.n	db42c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   db422:	4620      	mov	r0, r4
}
   db424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   db428:	f7fc bc2c 	b.w	d7c84 <hal_adc_read>
}
   db42c:	2000      	movs	r0, #0
   db42e:	bd10      	pop	{r4, pc}

000db430 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   db430:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   db432:	2300      	movs	r3, #0
   db434:	2520      	movs	r5, #32
   db436:	8043      	strh	r3, [r0, #2]
   db438:	2314      	movs	r3, #20
{
   db43a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   db43c:	8003      	strh	r3, [r0, #0]
   db43e:	6085      	str	r5, [r0, #8]
   db440:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db442:	4906      	ldr	r1, [pc, #24]	; (db45c <_Z17acquireWireBufferv+0x2c>)
   db444:	4628      	mov	r0, r5
   db446:	f000 f87c 	bl	db542 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db44a:	4904      	ldr	r1, [pc, #16]	; (db45c <_Z17acquireWireBufferv+0x2c>)
	};
   db44c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db44e:	4628      	mov	r0, r5
   db450:	f000 f877 	bl	db542 <_ZnajRKSt9nothrow_t>
	};
   db454:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   db456:	4620      	mov	r0, r4
   db458:	bd38      	pop	{r3, r4, r5, pc}
   db45a:	bf00      	nop
   db45c:	000dcea0 	.word	0x000dcea0

000db460 <_Z18acquireWire1Bufferv>:
   db460:	b538      	push	{r3, r4, r5, lr}
   db462:	2300      	movs	r3, #0
   db464:	2520      	movs	r5, #32
   db466:	8043      	strh	r3, [r0, #2]
   db468:	2314      	movs	r3, #20
   db46a:	4604      	mov	r4, r0
   db46c:	8003      	strh	r3, [r0, #0]
   db46e:	6085      	str	r5, [r0, #8]
   db470:	6105      	str	r5, [r0, #16]
   db472:	4906      	ldr	r1, [pc, #24]	; (db48c <_Z18acquireWire1Bufferv+0x2c>)
   db474:	4628      	mov	r0, r5
   db476:	f000 f864 	bl	db542 <_ZnajRKSt9nothrow_t>
   db47a:	4904      	ldr	r1, [pc, #16]	; (db48c <_Z18acquireWire1Bufferv+0x2c>)
   db47c:	6060      	str	r0, [r4, #4]
   db47e:	4628      	mov	r0, r5
   db480:	f000 f85f 	bl	db542 <_ZnajRKSt9nothrow_t>
   db484:	60e0      	str	r0, [r4, #12]
   db486:	4620      	mov	r0, r4
   db488:	bd38      	pop	{r3, r4, r5, pc}
   db48a:	bf00      	nop
   db48c:	000dcea0 	.word	0x000dcea0

000db490 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db490:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db492:	4d0f      	ldr	r5, [pc, #60]	; (db4d0 <_Z19__fetch_global_Wirev+0x40>)
   db494:	7829      	ldrb	r1, [r5, #0]
   db496:	f3bf 8f5b 	dmb	ish
   db49a:	f011 0401 	ands.w	r4, r1, #1
{
   db49e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db4a0:	d113      	bne.n	db4ca <_Z19__fetch_global_Wirev+0x3a>
   db4a2:	4628      	mov	r0, r5
   db4a4:	f7f8 fe08 	bl	d40b8 <__cxa_guard_acquire>
   db4a8:	b178      	cbz	r0, db4ca <_Z19__fetch_global_Wirev+0x3a>
   db4aa:	a801      	add	r0, sp, #4
   db4ac:	f7ff ffc0 	bl	db430 <_Z17acquireWireBufferv>
   db4b0:	aa01      	add	r2, sp, #4
   db4b2:	4621      	mov	r1, r4
   db4b4:	4807      	ldr	r0, [pc, #28]	; (db4d4 <_Z19__fetch_global_Wirev+0x44>)
   db4b6:	f7fd fca5 	bl	d8e04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db4ba:	4628      	mov	r0, r5
   db4bc:	f7f8 fe01 	bl	d40c2 <__cxa_guard_release>
   db4c0:	4a05      	ldr	r2, [pc, #20]	; (db4d8 <_Z19__fetch_global_Wirev+0x48>)
   db4c2:	4906      	ldr	r1, [pc, #24]	; (db4dc <_Z19__fetch_global_Wirev+0x4c>)
   db4c4:	4803      	ldr	r0, [pc, #12]	; (db4d4 <_Z19__fetch_global_Wirev+0x44>)
   db4c6:	f000 f833 	bl	db530 <__aeabi_atexit>
	return wire;
}
   db4ca:	4802      	ldr	r0, [pc, #8]	; (db4d4 <_Z19__fetch_global_Wirev+0x44>)
   db4cc:	b007      	add	sp, #28
   db4ce:	bd30      	pop	{r4, r5, pc}
   db4d0:	2003e7c8 	.word	0x2003e7c8
   db4d4:	2003e7d0 	.word	0x2003e7d0
   db4d8:	2003e310 	.word	0x2003e310
   db4dc:	000d8dad 	.word	0x000d8dad

000db4e0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   db4e0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db4e2:	4c0f      	ldr	r4, [pc, #60]	; (db520 <_Z20__fetch_global_Wire1v+0x40>)
   db4e4:	7823      	ldrb	r3, [r4, #0]
   db4e6:	f3bf 8f5b 	dmb	ish
   db4ea:	07db      	lsls	r3, r3, #31
{
   db4ec:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db4ee:	d413      	bmi.n	db518 <_Z20__fetch_global_Wire1v+0x38>
   db4f0:	4620      	mov	r0, r4
   db4f2:	f7f8 fde1 	bl	d40b8 <__cxa_guard_acquire>
   db4f6:	b178      	cbz	r0, db518 <_Z20__fetch_global_Wire1v+0x38>
   db4f8:	a801      	add	r0, sp, #4
   db4fa:	f7ff ffb1 	bl	db460 <_Z18acquireWire1Bufferv>
   db4fe:	aa01      	add	r2, sp, #4
   db500:	2101      	movs	r1, #1
   db502:	4808      	ldr	r0, [pc, #32]	; (db524 <_Z20__fetch_global_Wire1v+0x44>)
   db504:	f7fd fc7e 	bl	d8e04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db508:	4620      	mov	r0, r4
   db50a:	f7f8 fdda 	bl	d40c2 <__cxa_guard_release>
   db50e:	4a06      	ldr	r2, [pc, #24]	; (db528 <_Z20__fetch_global_Wire1v+0x48>)
   db510:	4906      	ldr	r1, [pc, #24]	; (db52c <_Z20__fetch_global_Wire1v+0x4c>)
   db512:	4804      	ldr	r0, [pc, #16]	; (db524 <_Z20__fetch_global_Wire1v+0x44>)
   db514:	f000 f80c 	bl	db530 <__aeabi_atexit>
	return wire;
}
   db518:	4802      	ldr	r0, [pc, #8]	; (db524 <_Z20__fetch_global_Wire1v+0x44>)
   db51a:	b006      	add	sp, #24
   db51c:	bd10      	pop	{r4, pc}
   db51e:	bf00      	nop
   db520:	2003e7cc 	.word	0x2003e7cc
   db524:	2003e7e4 	.word	0x2003e7e4
   db528:	2003e310 	.word	0x2003e310
   db52c:	000d8dad 	.word	0x000d8dad

000db530 <__aeabi_atexit>:
   db530:	460b      	mov	r3, r1
   db532:	4601      	mov	r1, r0
   db534:	4618      	mov	r0, r3
   db536:	f000 bccd 	b.w	dbed4 <__cxa_atexit>

000db53a <_ZdlPvj>:
   db53a:	f7f8 bdb0 	b.w	d409e <_ZdlPv>

000db53e <_ZnwjRKSt9nothrow_t>:
   db53e:	f7f8 bdaa 	b.w	d4096 <_Znwj>

000db542 <_ZnajRKSt9nothrow_t>:
   db542:	f7f8 bdaa 	b.w	d409a <_Znaj>

000db546 <_ZSt25__throw_bad_function_callv>:
   db546:	b508      	push	{r3, lr}
   db548:	f7fc fe70 	bl	d822c <abort>

000db54c <__aeabi_drsub>:
   db54c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db550:	e002      	b.n	db558 <__adddf3>
   db552:	bf00      	nop

000db554 <__aeabi_dsub>:
   db554:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db558 <__adddf3>:
   db558:	b530      	push	{r4, r5, lr}
   db55a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db55e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db562:	ea94 0f05 	teq	r4, r5
   db566:	bf08      	it	eq
   db568:	ea90 0f02 	teqeq	r0, r2
   db56c:	bf1f      	itttt	ne
   db56e:	ea54 0c00 	orrsne.w	ip, r4, r0
   db572:	ea55 0c02 	orrsne.w	ip, r5, r2
   db576:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db57a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db57e:	f000 80e2 	beq.w	db746 <__adddf3+0x1ee>
   db582:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db586:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db58a:	bfb8      	it	lt
   db58c:	426d      	neglt	r5, r5
   db58e:	dd0c      	ble.n	db5aa <__adddf3+0x52>
   db590:	442c      	add	r4, r5
   db592:	ea80 0202 	eor.w	r2, r0, r2
   db596:	ea81 0303 	eor.w	r3, r1, r3
   db59a:	ea82 0000 	eor.w	r0, r2, r0
   db59e:	ea83 0101 	eor.w	r1, r3, r1
   db5a2:	ea80 0202 	eor.w	r2, r0, r2
   db5a6:	ea81 0303 	eor.w	r3, r1, r3
   db5aa:	2d36      	cmp	r5, #54	; 0x36
   db5ac:	bf88      	it	hi
   db5ae:	bd30      	pophi	{r4, r5, pc}
   db5b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db5b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db5b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db5bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db5c0:	d002      	beq.n	db5c8 <__adddf3+0x70>
   db5c2:	4240      	negs	r0, r0
   db5c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db5c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db5cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db5d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db5d4:	d002      	beq.n	db5dc <__adddf3+0x84>
   db5d6:	4252      	negs	r2, r2
   db5d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db5dc:	ea94 0f05 	teq	r4, r5
   db5e0:	f000 80a7 	beq.w	db732 <__adddf3+0x1da>
   db5e4:	f1a4 0401 	sub.w	r4, r4, #1
   db5e8:	f1d5 0e20 	rsbs	lr, r5, #32
   db5ec:	db0d      	blt.n	db60a <__adddf3+0xb2>
   db5ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   db5f2:	fa22 f205 	lsr.w	r2, r2, r5
   db5f6:	1880      	adds	r0, r0, r2
   db5f8:	f141 0100 	adc.w	r1, r1, #0
   db5fc:	fa03 f20e 	lsl.w	r2, r3, lr
   db600:	1880      	adds	r0, r0, r2
   db602:	fa43 f305 	asr.w	r3, r3, r5
   db606:	4159      	adcs	r1, r3
   db608:	e00e      	b.n	db628 <__adddf3+0xd0>
   db60a:	f1a5 0520 	sub.w	r5, r5, #32
   db60e:	f10e 0e20 	add.w	lr, lr, #32
   db612:	2a01      	cmp	r2, #1
   db614:	fa03 fc0e 	lsl.w	ip, r3, lr
   db618:	bf28      	it	cs
   db61a:	f04c 0c02 	orrcs.w	ip, ip, #2
   db61e:	fa43 f305 	asr.w	r3, r3, r5
   db622:	18c0      	adds	r0, r0, r3
   db624:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db62c:	d507      	bpl.n	db63e <__adddf3+0xe6>
   db62e:	f04f 0e00 	mov.w	lr, #0
   db632:	f1dc 0c00 	rsbs	ip, ip, #0
   db636:	eb7e 0000 	sbcs.w	r0, lr, r0
   db63a:	eb6e 0101 	sbc.w	r1, lr, r1
   db63e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db642:	d31b      	bcc.n	db67c <__adddf3+0x124>
   db644:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db648:	d30c      	bcc.n	db664 <__adddf3+0x10c>
   db64a:	0849      	lsrs	r1, r1, #1
   db64c:	ea5f 0030 	movs.w	r0, r0, rrx
   db650:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db654:	f104 0401 	add.w	r4, r4, #1
   db658:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db65c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db660:	f080 809a 	bcs.w	db798 <__adddf3+0x240>
   db664:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db668:	bf08      	it	eq
   db66a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db66e:	f150 0000 	adcs.w	r0, r0, #0
   db672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db676:	ea41 0105 	orr.w	r1, r1, r5
   db67a:	bd30      	pop	{r4, r5, pc}
   db67c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db680:	4140      	adcs	r0, r0
   db682:	eb41 0101 	adc.w	r1, r1, r1
   db686:	3c01      	subs	r4, #1
   db688:	bf28      	it	cs
   db68a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db68e:	d2e9      	bcs.n	db664 <__adddf3+0x10c>
   db690:	f091 0f00 	teq	r1, #0
   db694:	bf04      	itt	eq
   db696:	4601      	moveq	r1, r0
   db698:	2000      	moveq	r0, #0
   db69a:	fab1 f381 	clz	r3, r1
   db69e:	bf08      	it	eq
   db6a0:	3320      	addeq	r3, #32
   db6a2:	f1a3 030b 	sub.w	r3, r3, #11
   db6a6:	f1b3 0220 	subs.w	r2, r3, #32
   db6aa:	da0c      	bge.n	db6c6 <__adddf3+0x16e>
   db6ac:	320c      	adds	r2, #12
   db6ae:	dd08      	ble.n	db6c2 <__adddf3+0x16a>
   db6b0:	f102 0c14 	add.w	ip, r2, #20
   db6b4:	f1c2 020c 	rsb	r2, r2, #12
   db6b8:	fa01 f00c 	lsl.w	r0, r1, ip
   db6bc:	fa21 f102 	lsr.w	r1, r1, r2
   db6c0:	e00c      	b.n	db6dc <__adddf3+0x184>
   db6c2:	f102 0214 	add.w	r2, r2, #20
   db6c6:	bfd8      	it	le
   db6c8:	f1c2 0c20 	rsble	ip, r2, #32
   db6cc:	fa01 f102 	lsl.w	r1, r1, r2
   db6d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   db6d4:	bfdc      	itt	le
   db6d6:	ea41 010c 	orrle.w	r1, r1, ip
   db6da:	4090      	lslle	r0, r2
   db6dc:	1ae4      	subs	r4, r4, r3
   db6de:	bfa2      	ittt	ge
   db6e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db6e4:	4329      	orrge	r1, r5
   db6e6:	bd30      	popge	{r4, r5, pc}
   db6e8:	ea6f 0404 	mvn.w	r4, r4
   db6ec:	3c1f      	subs	r4, #31
   db6ee:	da1c      	bge.n	db72a <__adddf3+0x1d2>
   db6f0:	340c      	adds	r4, #12
   db6f2:	dc0e      	bgt.n	db712 <__adddf3+0x1ba>
   db6f4:	f104 0414 	add.w	r4, r4, #20
   db6f8:	f1c4 0220 	rsb	r2, r4, #32
   db6fc:	fa20 f004 	lsr.w	r0, r0, r4
   db700:	fa01 f302 	lsl.w	r3, r1, r2
   db704:	ea40 0003 	orr.w	r0, r0, r3
   db708:	fa21 f304 	lsr.w	r3, r1, r4
   db70c:	ea45 0103 	orr.w	r1, r5, r3
   db710:	bd30      	pop	{r4, r5, pc}
   db712:	f1c4 040c 	rsb	r4, r4, #12
   db716:	f1c4 0220 	rsb	r2, r4, #32
   db71a:	fa20 f002 	lsr.w	r0, r0, r2
   db71e:	fa01 f304 	lsl.w	r3, r1, r4
   db722:	ea40 0003 	orr.w	r0, r0, r3
   db726:	4629      	mov	r1, r5
   db728:	bd30      	pop	{r4, r5, pc}
   db72a:	fa21 f004 	lsr.w	r0, r1, r4
   db72e:	4629      	mov	r1, r5
   db730:	bd30      	pop	{r4, r5, pc}
   db732:	f094 0f00 	teq	r4, #0
   db736:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db73a:	bf06      	itte	eq
   db73c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db740:	3401      	addeq	r4, #1
   db742:	3d01      	subne	r5, #1
   db744:	e74e      	b.n	db5e4 <__adddf3+0x8c>
   db746:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db74a:	bf18      	it	ne
   db74c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db750:	d029      	beq.n	db7a6 <__adddf3+0x24e>
   db752:	ea94 0f05 	teq	r4, r5
   db756:	bf08      	it	eq
   db758:	ea90 0f02 	teqeq	r0, r2
   db75c:	d005      	beq.n	db76a <__adddf3+0x212>
   db75e:	ea54 0c00 	orrs.w	ip, r4, r0
   db762:	bf04      	itt	eq
   db764:	4619      	moveq	r1, r3
   db766:	4610      	moveq	r0, r2
   db768:	bd30      	pop	{r4, r5, pc}
   db76a:	ea91 0f03 	teq	r1, r3
   db76e:	bf1e      	ittt	ne
   db770:	2100      	movne	r1, #0
   db772:	2000      	movne	r0, #0
   db774:	bd30      	popne	{r4, r5, pc}
   db776:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db77a:	d105      	bne.n	db788 <__adddf3+0x230>
   db77c:	0040      	lsls	r0, r0, #1
   db77e:	4149      	adcs	r1, r1
   db780:	bf28      	it	cs
   db782:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db786:	bd30      	pop	{r4, r5, pc}
   db788:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db78c:	bf3c      	itt	cc
   db78e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db792:	bd30      	popcc	{r4, r5, pc}
   db794:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db798:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db79c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db7a0:	f04f 0000 	mov.w	r0, #0
   db7a4:	bd30      	pop	{r4, r5, pc}
   db7a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db7aa:	bf1a      	itte	ne
   db7ac:	4619      	movne	r1, r3
   db7ae:	4610      	movne	r0, r2
   db7b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db7b4:	bf1c      	itt	ne
   db7b6:	460b      	movne	r3, r1
   db7b8:	4602      	movne	r2, r0
   db7ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db7be:	bf06      	itte	eq
   db7c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db7c4:	ea91 0f03 	teqeq	r1, r3
   db7c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db7cc:	bd30      	pop	{r4, r5, pc}
   db7ce:	bf00      	nop

000db7d0 <__aeabi_ui2d>:
   db7d0:	f090 0f00 	teq	r0, #0
   db7d4:	bf04      	itt	eq
   db7d6:	2100      	moveq	r1, #0
   db7d8:	4770      	bxeq	lr
   db7da:	b530      	push	{r4, r5, lr}
   db7dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db7e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db7e4:	f04f 0500 	mov.w	r5, #0
   db7e8:	f04f 0100 	mov.w	r1, #0
   db7ec:	e750      	b.n	db690 <__adddf3+0x138>
   db7ee:	bf00      	nop

000db7f0 <__aeabi_i2d>:
   db7f0:	f090 0f00 	teq	r0, #0
   db7f4:	bf04      	itt	eq
   db7f6:	2100      	moveq	r1, #0
   db7f8:	4770      	bxeq	lr
   db7fa:	b530      	push	{r4, r5, lr}
   db7fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db800:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db804:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db808:	bf48      	it	mi
   db80a:	4240      	negmi	r0, r0
   db80c:	f04f 0100 	mov.w	r1, #0
   db810:	e73e      	b.n	db690 <__adddf3+0x138>
   db812:	bf00      	nop

000db814 <__aeabi_f2d>:
   db814:	0042      	lsls	r2, r0, #1
   db816:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db81a:	ea4f 0131 	mov.w	r1, r1, rrx
   db81e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db822:	bf1f      	itttt	ne
   db824:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db828:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db82c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db830:	4770      	bxne	lr
   db832:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db836:	bf08      	it	eq
   db838:	4770      	bxeq	lr
   db83a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db83e:	bf04      	itt	eq
   db840:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db844:	4770      	bxeq	lr
   db846:	b530      	push	{r4, r5, lr}
   db848:	f44f 7460 	mov.w	r4, #896	; 0x380
   db84c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db850:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db854:	e71c      	b.n	db690 <__adddf3+0x138>
   db856:	bf00      	nop

000db858 <__aeabi_ul2d>:
   db858:	ea50 0201 	orrs.w	r2, r0, r1
   db85c:	bf08      	it	eq
   db85e:	4770      	bxeq	lr
   db860:	b530      	push	{r4, r5, lr}
   db862:	f04f 0500 	mov.w	r5, #0
   db866:	e00a      	b.n	db87e <__aeabi_l2d+0x16>

000db868 <__aeabi_l2d>:
   db868:	ea50 0201 	orrs.w	r2, r0, r1
   db86c:	bf08      	it	eq
   db86e:	4770      	bxeq	lr
   db870:	b530      	push	{r4, r5, lr}
   db872:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db876:	d502      	bpl.n	db87e <__aeabi_l2d+0x16>
   db878:	4240      	negs	r0, r0
   db87a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db87e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db882:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db886:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db88a:	f43f aed8 	beq.w	db63e <__adddf3+0xe6>
   db88e:	f04f 0203 	mov.w	r2, #3
   db892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db896:	bf18      	it	ne
   db898:	3203      	addne	r2, #3
   db89a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db89e:	bf18      	it	ne
   db8a0:	3203      	addne	r2, #3
   db8a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db8a6:	f1c2 0320 	rsb	r3, r2, #32
   db8aa:	fa00 fc03 	lsl.w	ip, r0, r3
   db8ae:	fa20 f002 	lsr.w	r0, r0, r2
   db8b2:	fa01 fe03 	lsl.w	lr, r1, r3
   db8b6:	ea40 000e 	orr.w	r0, r0, lr
   db8ba:	fa21 f102 	lsr.w	r1, r1, r2
   db8be:	4414      	add	r4, r2
   db8c0:	e6bd      	b.n	db63e <__adddf3+0xe6>
   db8c2:	bf00      	nop

000db8c4 <__aeabi_dmul>:
   db8c4:	b570      	push	{r4, r5, r6, lr}
   db8c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db8ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db8ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db8d2:	bf1d      	ittte	ne
   db8d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db8d8:	ea94 0f0c 	teqne	r4, ip
   db8dc:	ea95 0f0c 	teqne	r5, ip
   db8e0:	f000 f8de 	bleq	dbaa0 <__aeabi_dmul+0x1dc>
   db8e4:	442c      	add	r4, r5
   db8e6:	ea81 0603 	eor.w	r6, r1, r3
   db8ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db8ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db8f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db8f6:	bf18      	it	ne
   db8f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db8fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db904:	d038      	beq.n	db978 <__aeabi_dmul+0xb4>
   db906:	fba0 ce02 	umull	ip, lr, r0, r2
   db90a:	f04f 0500 	mov.w	r5, #0
   db90e:	fbe1 e502 	umlal	lr, r5, r1, r2
   db912:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db916:	fbe0 e503 	umlal	lr, r5, r0, r3
   db91a:	f04f 0600 	mov.w	r6, #0
   db91e:	fbe1 5603 	umlal	r5, r6, r1, r3
   db922:	f09c 0f00 	teq	ip, #0
   db926:	bf18      	it	ne
   db928:	f04e 0e01 	orrne.w	lr, lr, #1
   db92c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db930:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db934:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db938:	d204      	bcs.n	db944 <__aeabi_dmul+0x80>
   db93a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db93e:	416d      	adcs	r5, r5
   db940:	eb46 0606 	adc.w	r6, r6, r6
   db944:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db948:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db94c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db950:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db954:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db958:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db95c:	bf88      	it	hi
   db95e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db962:	d81e      	bhi.n	db9a2 <__aeabi_dmul+0xde>
   db964:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db968:	bf08      	it	eq
   db96a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db96e:	f150 0000 	adcs.w	r0, r0, #0
   db972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db976:	bd70      	pop	{r4, r5, r6, pc}
   db978:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db97c:	ea46 0101 	orr.w	r1, r6, r1
   db980:	ea40 0002 	orr.w	r0, r0, r2
   db984:	ea81 0103 	eor.w	r1, r1, r3
   db988:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db98c:	bfc2      	ittt	gt
   db98e:	ebd4 050c 	rsbsgt	r5, r4, ip
   db992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db996:	bd70      	popgt	{r4, r5, r6, pc}
   db998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db99c:	f04f 0e00 	mov.w	lr, #0
   db9a0:	3c01      	subs	r4, #1
   db9a2:	f300 80ab 	bgt.w	dbafc <__aeabi_dmul+0x238>
   db9a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db9aa:	bfde      	ittt	le
   db9ac:	2000      	movle	r0, #0
   db9ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db9b2:	bd70      	pople	{r4, r5, r6, pc}
   db9b4:	f1c4 0400 	rsb	r4, r4, #0
   db9b8:	3c20      	subs	r4, #32
   db9ba:	da35      	bge.n	dba28 <__aeabi_dmul+0x164>
   db9bc:	340c      	adds	r4, #12
   db9be:	dc1b      	bgt.n	db9f8 <__aeabi_dmul+0x134>
   db9c0:	f104 0414 	add.w	r4, r4, #20
   db9c4:	f1c4 0520 	rsb	r5, r4, #32
   db9c8:	fa00 f305 	lsl.w	r3, r0, r5
   db9cc:	fa20 f004 	lsr.w	r0, r0, r4
   db9d0:	fa01 f205 	lsl.w	r2, r1, r5
   db9d4:	ea40 0002 	orr.w	r0, r0, r2
   db9d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db9dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db9e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db9e4:	fa21 f604 	lsr.w	r6, r1, r4
   db9e8:	eb42 0106 	adc.w	r1, r2, r6
   db9ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db9f0:	bf08      	it	eq
   db9f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db9f6:	bd70      	pop	{r4, r5, r6, pc}
   db9f8:	f1c4 040c 	rsb	r4, r4, #12
   db9fc:	f1c4 0520 	rsb	r5, r4, #32
   dba00:	fa00 f304 	lsl.w	r3, r0, r4
   dba04:	fa20 f005 	lsr.w	r0, r0, r5
   dba08:	fa01 f204 	lsl.w	r2, r1, r4
   dba0c:	ea40 0002 	orr.w	r0, r0, r2
   dba10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dba14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dba18:	f141 0100 	adc.w	r1, r1, #0
   dba1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dba20:	bf08      	it	eq
   dba22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dba26:	bd70      	pop	{r4, r5, r6, pc}
   dba28:	f1c4 0520 	rsb	r5, r4, #32
   dba2c:	fa00 f205 	lsl.w	r2, r0, r5
   dba30:	ea4e 0e02 	orr.w	lr, lr, r2
   dba34:	fa20 f304 	lsr.w	r3, r0, r4
   dba38:	fa01 f205 	lsl.w	r2, r1, r5
   dba3c:	ea43 0302 	orr.w	r3, r3, r2
   dba40:	fa21 f004 	lsr.w	r0, r1, r4
   dba44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dba48:	fa21 f204 	lsr.w	r2, r1, r4
   dba4c:	ea20 0002 	bic.w	r0, r0, r2
   dba50:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dba54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dba58:	bf08      	it	eq
   dba5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dba5e:	bd70      	pop	{r4, r5, r6, pc}
   dba60:	f094 0f00 	teq	r4, #0
   dba64:	d10f      	bne.n	dba86 <__aeabi_dmul+0x1c2>
   dba66:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dba6a:	0040      	lsls	r0, r0, #1
   dba6c:	eb41 0101 	adc.w	r1, r1, r1
   dba70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dba74:	bf08      	it	eq
   dba76:	3c01      	subeq	r4, #1
   dba78:	d0f7      	beq.n	dba6a <__aeabi_dmul+0x1a6>
   dba7a:	ea41 0106 	orr.w	r1, r1, r6
   dba7e:	f095 0f00 	teq	r5, #0
   dba82:	bf18      	it	ne
   dba84:	4770      	bxne	lr
   dba86:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dba8a:	0052      	lsls	r2, r2, #1
   dba8c:	eb43 0303 	adc.w	r3, r3, r3
   dba90:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dba94:	bf08      	it	eq
   dba96:	3d01      	subeq	r5, #1
   dba98:	d0f7      	beq.n	dba8a <__aeabi_dmul+0x1c6>
   dba9a:	ea43 0306 	orr.w	r3, r3, r6
   dba9e:	4770      	bx	lr
   dbaa0:	ea94 0f0c 	teq	r4, ip
   dbaa4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbaa8:	bf18      	it	ne
   dbaaa:	ea95 0f0c 	teqne	r5, ip
   dbaae:	d00c      	beq.n	dbaca <__aeabi_dmul+0x206>
   dbab0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbab4:	bf18      	it	ne
   dbab6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbaba:	d1d1      	bne.n	dba60 <__aeabi_dmul+0x19c>
   dbabc:	ea81 0103 	eor.w	r1, r1, r3
   dbac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbac4:	f04f 0000 	mov.w	r0, #0
   dbac8:	bd70      	pop	{r4, r5, r6, pc}
   dbaca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbace:	bf06      	itte	eq
   dbad0:	4610      	moveq	r0, r2
   dbad2:	4619      	moveq	r1, r3
   dbad4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbad8:	d019      	beq.n	dbb0e <__aeabi_dmul+0x24a>
   dbada:	ea94 0f0c 	teq	r4, ip
   dbade:	d102      	bne.n	dbae6 <__aeabi_dmul+0x222>
   dbae0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dbae4:	d113      	bne.n	dbb0e <__aeabi_dmul+0x24a>
   dbae6:	ea95 0f0c 	teq	r5, ip
   dbaea:	d105      	bne.n	dbaf8 <__aeabi_dmul+0x234>
   dbaec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dbaf0:	bf1c      	itt	ne
   dbaf2:	4610      	movne	r0, r2
   dbaf4:	4619      	movne	r1, r3
   dbaf6:	d10a      	bne.n	dbb0e <__aeabi_dmul+0x24a>
   dbaf8:	ea81 0103 	eor.w	r1, r1, r3
   dbafc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbb00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbb04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbb08:	f04f 0000 	mov.w	r0, #0
   dbb0c:	bd70      	pop	{r4, r5, r6, pc}
   dbb0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbb12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dbb16:	bd70      	pop	{r4, r5, r6, pc}

000dbb18 <__aeabi_ddiv>:
   dbb18:	b570      	push	{r4, r5, r6, lr}
   dbb1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbb1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbb22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbb26:	bf1d      	ittte	ne
   dbb28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbb2c:	ea94 0f0c 	teqne	r4, ip
   dbb30:	ea95 0f0c 	teqne	r5, ip
   dbb34:	f000 f8a7 	bleq	dbc86 <__aeabi_ddiv+0x16e>
   dbb38:	eba4 0405 	sub.w	r4, r4, r5
   dbb3c:	ea81 0e03 	eor.w	lr, r1, r3
   dbb40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbb44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbb48:	f000 8088 	beq.w	dbc5c <__aeabi_ddiv+0x144>
   dbb4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbb50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dbb54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dbb58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dbb5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dbb60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dbb64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dbb68:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dbb6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dbb70:	429d      	cmp	r5, r3
   dbb72:	bf08      	it	eq
   dbb74:	4296      	cmpeq	r6, r2
   dbb76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dbb7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dbb7e:	d202      	bcs.n	dbb86 <__aeabi_ddiv+0x6e>
   dbb80:	085b      	lsrs	r3, r3, #1
   dbb82:	ea4f 0232 	mov.w	r2, r2, rrx
   dbb86:	1ab6      	subs	r6, r6, r2
   dbb88:	eb65 0503 	sbc.w	r5, r5, r3
   dbb8c:	085b      	lsrs	r3, r3, #1
   dbb8e:	ea4f 0232 	mov.w	r2, r2, rrx
   dbb92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dbb96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dbb9a:	ebb6 0e02 	subs.w	lr, r6, r2
   dbb9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbba2:	bf22      	ittt	cs
   dbba4:	1ab6      	subcs	r6, r6, r2
   dbba6:	4675      	movcs	r5, lr
   dbba8:	ea40 000c 	orrcs.w	r0, r0, ip
   dbbac:	085b      	lsrs	r3, r3, #1
   dbbae:	ea4f 0232 	mov.w	r2, r2, rrx
   dbbb2:	ebb6 0e02 	subs.w	lr, r6, r2
   dbbb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbbba:	bf22      	ittt	cs
   dbbbc:	1ab6      	subcs	r6, r6, r2
   dbbbe:	4675      	movcs	r5, lr
   dbbc0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dbbc4:	085b      	lsrs	r3, r3, #1
   dbbc6:	ea4f 0232 	mov.w	r2, r2, rrx
   dbbca:	ebb6 0e02 	subs.w	lr, r6, r2
   dbbce:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbbd2:	bf22      	ittt	cs
   dbbd4:	1ab6      	subcs	r6, r6, r2
   dbbd6:	4675      	movcs	r5, lr
   dbbd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dbbdc:	085b      	lsrs	r3, r3, #1
   dbbde:	ea4f 0232 	mov.w	r2, r2, rrx
   dbbe2:	ebb6 0e02 	subs.w	lr, r6, r2
   dbbe6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbbea:	bf22      	ittt	cs
   dbbec:	1ab6      	subcs	r6, r6, r2
   dbbee:	4675      	movcs	r5, lr
   dbbf0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbbf4:	ea55 0e06 	orrs.w	lr, r5, r6
   dbbf8:	d018      	beq.n	dbc2c <__aeabi_ddiv+0x114>
   dbbfa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dbbfe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dbc02:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dbc06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dbc0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dbc0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dbc12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dbc16:	d1c0      	bne.n	dbb9a <__aeabi_ddiv+0x82>
   dbc18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbc1c:	d10b      	bne.n	dbc36 <__aeabi_ddiv+0x11e>
   dbc1e:	ea41 0100 	orr.w	r1, r1, r0
   dbc22:	f04f 0000 	mov.w	r0, #0
   dbc26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dbc2a:	e7b6      	b.n	dbb9a <__aeabi_ddiv+0x82>
   dbc2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbc30:	bf04      	itt	eq
   dbc32:	4301      	orreq	r1, r0
   dbc34:	2000      	moveq	r0, #0
   dbc36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbc3a:	bf88      	it	hi
   dbc3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbc40:	f63f aeaf 	bhi.w	db9a2 <__aeabi_dmul+0xde>
   dbc44:	ebb5 0c03 	subs.w	ip, r5, r3
   dbc48:	bf04      	itt	eq
   dbc4a:	ebb6 0c02 	subseq.w	ip, r6, r2
   dbc4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbc52:	f150 0000 	adcs.w	r0, r0, #0
   dbc56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbc5a:	bd70      	pop	{r4, r5, r6, pc}
   dbc5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dbc60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dbc64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dbc68:	bfc2      	ittt	gt
   dbc6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbc6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbc72:	bd70      	popgt	{r4, r5, r6, pc}
   dbc74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbc78:	f04f 0e00 	mov.w	lr, #0
   dbc7c:	3c01      	subs	r4, #1
   dbc7e:	e690      	b.n	db9a2 <__aeabi_dmul+0xde>
   dbc80:	ea45 0e06 	orr.w	lr, r5, r6
   dbc84:	e68d      	b.n	db9a2 <__aeabi_dmul+0xde>
   dbc86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbc8a:	ea94 0f0c 	teq	r4, ip
   dbc8e:	bf08      	it	eq
   dbc90:	ea95 0f0c 	teqeq	r5, ip
   dbc94:	f43f af3b 	beq.w	dbb0e <__aeabi_dmul+0x24a>
   dbc98:	ea94 0f0c 	teq	r4, ip
   dbc9c:	d10a      	bne.n	dbcb4 <__aeabi_ddiv+0x19c>
   dbc9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbca2:	f47f af34 	bne.w	dbb0e <__aeabi_dmul+0x24a>
   dbca6:	ea95 0f0c 	teq	r5, ip
   dbcaa:	f47f af25 	bne.w	dbaf8 <__aeabi_dmul+0x234>
   dbcae:	4610      	mov	r0, r2
   dbcb0:	4619      	mov	r1, r3
   dbcb2:	e72c      	b.n	dbb0e <__aeabi_dmul+0x24a>
   dbcb4:	ea95 0f0c 	teq	r5, ip
   dbcb8:	d106      	bne.n	dbcc8 <__aeabi_ddiv+0x1b0>
   dbcba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbcbe:	f43f aefd 	beq.w	dbabc <__aeabi_dmul+0x1f8>
   dbcc2:	4610      	mov	r0, r2
   dbcc4:	4619      	mov	r1, r3
   dbcc6:	e722      	b.n	dbb0e <__aeabi_dmul+0x24a>
   dbcc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbccc:	bf18      	it	ne
   dbcce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbcd2:	f47f aec5 	bne.w	dba60 <__aeabi_dmul+0x19c>
   dbcd6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dbcda:	f47f af0d 	bne.w	dbaf8 <__aeabi_dmul+0x234>
   dbcde:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dbce2:	f47f aeeb 	bne.w	dbabc <__aeabi_dmul+0x1f8>
   dbce6:	e712      	b.n	dbb0e <__aeabi_dmul+0x24a>

000dbce8 <__aeabi_d2iz>:
   dbce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbcec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbcf0:	d215      	bcs.n	dbd1e <__aeabi_d2iz+0x36>
   dbcf2:	d511      	bpl.n	dbd18 <__aeabi_d2iz+0x30>
   dbcf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbcf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbcfc:	d912      	bls.n	dbd24 <__aeabi_d2iz+0x3c>
   dbcfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbd02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbd06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbd0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbd0e:	fa23 f002 	lsr.w	r0, r3, r2
   dbd12:	bf18      	it	ne
   dbd14:	4240      	negne	r0, r0
   dbd16:	4770      	bx	lr
   dbd18:	f04f 0000 	mov.w	r0, #0
   dbd1c:	4770      	bx	lr
   dbd1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbd22:	d105      	bne.n	dbd30 <__aeabi_d2iz+0x48>
   dbd24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dbd28:	bf08      	it	eq
   dbd2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbd2e:	4770      	bx	lr
   dbd30:	f04f 0000 	mov.w	r0, #0
   dbd34:	4770      	bx	lr
   dbd36:	bf00      	nop

000dbd38 <__aeabi_d2uiz>:
   dbd38:	004a      	lsls	r2, r1, #1
   dbd3a:	d211      	bcs.n	dbd60 <__aeabi_d2uiz+0x28>
   dbd3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbd40:	d211      	bcs.n	dbd66 <__aeabi_d2uiz+0x2e>
   dbd42:	d50d      	bpl.n	dbd60 <__aeabi_d2uiz+0x28>
   dbd44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbd48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbd4c:	d40e      	bmi.n	dbd6c <__aeabi_d2uiz+0x34>
   dbd4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbd52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbd56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbd5a:	fa23 f002 	lsr.w	r0, r3, r2
   dbd5e:	4770      	bx	lr
   dbd60:	f04f 0000 	mov.w	r0, #0
   dbd64:	4770      	bx	lr
   dbd66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbd6a:	d102      	bne.n	dbd72 <__aeabi_d2uiz+0x3a>
   dbd6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbd70:	4770      	bx	lr
   dbd72:	f04f 0000 	mov.w	r0, #0
   dbd76:	4770      	bx	lr

000dbd78 <__aeabi_d2f>:
   dbd78:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbd7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dbd80:	bf24      	itt	cs
   dbd82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dbd86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dbd8a:	d90d      	bls.n	dbda8 <__aeabi_d2f+0x30>
   dbd8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dbd90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dbd94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dbd98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dbd9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dbda0:	bf08      	it	eq
   dbda2:	f020 0001 	biceq.w	r0, r0, #1
   dbda6:	4770      	bx	lr
   dbda8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dbdac:	d121      	bne.n	dbdf2 <__aeabi_d2f+0x7a>
   dbdae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dbdb2:	bfbc      	itt	lt
   dbdb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dbdb8:	4770      	bxlt	lr
   dbdba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbdbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dbdc2:	f1c2 0218 	rsb	r2, r2, #24
   dbdc6:	f1c2 0c20 	rsb	ip, r2, #32
   dbdca:	fa10 f30c 	lsls.w	r3, r0, ip
   dbdce:	fa20 f002 	lsr.w	r0, r0, r2
   dbdd2:	bf18      	it	ne
   dbdd4:	f040 0001 	orrne.w	r0, r0, #1
   dbdd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbddc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dbde0:	fa03 fc0c 	lsl.w	ip, r3, ip
   dbde4:	ea40 000c 	orr.w	r0, r0, ip
   dbde8:	fa23 f302 	lsr.w	r3, r3, r2
   dbdec:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dbdf0:	e7cc      	b.n	dbd8c <__aeabi_d2f+0x14>
   dbdf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dbdf6:	d107      	bne.n	dbe08 <__aeabi_d2f+0x90>
   dbdf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dbdfc:	bf1e      	ittt	ne
   dbdfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dbe02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dbe06:	4770      	bxne	lr
   dbe08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dbe0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dbe10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dbe14:	4770      	bx	lr
   dbe16:	bf00      	nop

000dbe18 <__aeabi_f2lz>:
   dbe18:	ee07 0a90 	vmov	s15, r0
   dbe1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dbe20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbe24:	d401      	bmi.n	dbe2a <__aeabi_f2lz+0x12>
   dbe26:	f000 b80b 	b.w	dbe40 <__aeabi_f2ulz>
   dbe2a:	eef1 7a67 	vneg.f32	s15, s15
   dbe2e:	b508      	push	{r3, lr}
   dbe30:	ee17 0a90 	vmov	r0, s15
   dbe34:	f000 f804 	bl	dbe40 <__aeabi_f2ulz>
   dbe38:	4240      	negs	r0, r0
   dbe3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbe3e:	bd08      	pop	{r3, pc}

000dbe40 <__aeabi_f2ulz>:
   dbe40:	b5d0      	push	{r4, r6, r7, lr}
   dbe42:	f7ff fce7 	bl	db814 <__aeabi_f2d>
   dbe46:	4b0c      	ldr	r3, [pc, #48]	; (dbe78 <__aeabi_f2ulz+0x38>)
   dbe48:	2200      	movs	r2, #0
   dbe4a:	4606      	mov	r6, r0
   dbe4c:	460f      	mov	r7, r1
   dbe4e:	f7ff fd39 	bl	db8c4 <__aeabi_dmul>
   dbe52:	f7ff ff71 	bl	dbd38 <__aeabi_d2uiz>
   dbe56:	4604      	mov	r4, r0
   dbe58:	f7ff fcba 	bl	db7d0 <__aeabi_ui2d>
   dbe5c:	4b07      	ldr	r3, [pc, #28]	; (dbe7c <__aeabi_f2ulz+0x3c>)
   dbe5e:	2200      	movs	r2, #0
   dbe60:	f7ff fd30 	bl	db8c4 <__aeabi_dmul>
   dbe64:	4602      	mov	r2, r0
   dbe66:	460b      	mov	r3, r1
   dbe68:	4630      	mov	r0, r6
   dbe6a:	4639      	mov	r1, r7
   dbe6c:	f7ff fb72 	bl	db554 <__aeabi_dsub>
   dbe70:	f7ff ff62 	bl	dbd38 <__aeabi_d2uiz>
   dbe74:	4621      	mov	r1, r4
   dbe76:	bdd0      	pop	{r4, r6, r7, pc}
   dbe78:	3df00000 	.word	0x3df00000
   dbe7c:	41f00000 	.word	0x41f00000

000dbe80 <asctime_r>:
   dbe80:	b510      	push	{r4, lr}
   dbe82:	460c      	mov	r4, r1
   dbe84:	6941      	ldr	r1, [r0, #20]
   dbe86:	6903      	ldr	r3, [r0, #16]
   dbe88:	6982      	ldr	r2, [r0, #24]
   dbe8a:	b086      	sub	sp, #24
   dbe8c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dbe90:	9104      	str	r1, [sp, #16]
   dbe92:	6801      	ldr	r1, [r0, #0]
   dbe94:	9103      	str	r1, [sp, #12]
   dbe96:	6841      	ldr	r1, [r0, #4]
   dbe98:	9102      	str	r1, [sp, #8]
   dbe9a:	6881      	ldr	r1, [r0, #8]
   dbe9c:	9101      	str	r1, [sp, #4]
   dbe9e:	68c1      	ldr	r1, [r0, #12]
   dbea0:	9100      	str	r1, [sp, #0]
   dbea2:	4907      	ldr	r1, [pc, #28]	; (dbec0 <asctime_r+0x40>)
   dbea4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dbea8:	440b      	add	r3, r1
   dbeaa:	4906      	ldr	r1, [pc, #24]	; (dbec4 <asctime_r+0x44>)
   dbeac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dbeb0:	440a      	add	r2, r1
   dbeb2:	4620      	mov	r0, r4
   dbeb4:	4904      	ldr	r1, [pc, #16]	; (dbec8 <asctime_r+0x48>)
   dbeb6:	f7fc f9a1 	bl	d81fc <siprintf>
   dbeba:	4620      	mov	r0, r4
   dbebc:	b006      	add	sp, #24
   dbebe:	bd10      	pop	{r4, pc}
   dbec0:	000dced6 	.word	0x000dced6
   dbec4:	000dcec1 	.word	0x000dcec1
   dbec8:	000dcea1 	.word	0x000dcea1

000dbecc <atoi>:
   dbecc:	220a      	movs	r2, #10
   dbece:	2100      	movs	r1, #0
   dbed0:	f000 b976 	b.w	dc1c0 <strtol>

000dbed4 <__cxa_atexit>:
   dbed4:	b510      	push	{r4, lr}
   dbed6:	4c05      	ldr	r4, [pc, #20]	; (dbeec <__cxa_atexit+0x18>)
   dbed8:	4613      	mov	r3, r2
   dbeda:	b12c      	cbz	r4, dbee8 <__cxa_atexit+0x14>
   dbedc:	460a      	mov	r2, r1
   dbede:	4601      	mov	r1, r0
   dbee0:	2002      	movs	r0, #2
   dbee2:	f3af 8000 	nop.w
   dbee6:	bd10      	pop	{r4, pc}
   dbee8:	4620      	mov	r0, r4
   dbeea:	e7fc      	b.n	dbee6 <__cxa_atexit+0x12>
   dbeec:	00000000 	.word	0x00000000

000dbef0 <gmtime>:
   dbef0:	b538      	push	{r3, r4, r5, lr}
   dbef2:	4b07      	ldr	r3, [pc, #28]	; (dbf10 <gmtime+0x20>)
   dbef4:	681d      	ldr	r5, [r3, #0]
   dbef6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dbef8:	4604      	mov	r4, r0
   dbefa:	b91b      	cbnz	r3, dbf04 <gmtime+0x14>
   dbefc:	2024      	movs	r0, #36	; 0x24
   dbefe:	f7fc f965 	bl	d81cc <malloc>
   dbf02:	63e8      	str	r0, [r5, #60]	; 0x3c
   dbf04:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dbf06:	4620      	mov	r0, r4
   dbf08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbf0c:	f7fc b9b6 	b.w	d827c <gmtime_r>
   dbf10:	2003e2a8 	.word	0x2003e2a8

000dbf14 <memcpy>:
   dbf14:	440a      	add	r2, r1
   dbf16:	4291      	cmp	r1, r2
   dbf18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dbf1c:	d100      	bne.n	dbf20 <memcpy+0xc>
   dbf1e:	4770      	bx	lr
   dbf20:	b510      	push	{r4, lr}
   dbf22:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbf26:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbf2a:	4291      	cmp	r1, r2
   dbf2c:	d1f9      	bne.n	dbf22 <memcpy+0xe>
   dbf2e:	bd10      	pop	{r4, pc}

000dbf30 <memmove>:
   dbf30:	4288      	cmp	r0, r1
   dbf32:	b510      	push	{r4, lr}
   dbf34:	eb01 0402 	add.w	r4, r1, r2
   dbf38:	d902      	bls.n	dbf40 <memmove+0x10>
   dbf3a:	4284      	cmp	r4, r0
   dbf3c:	4623      	mov	r3, r4
   dbf3e:	d807      	bhi.n	dbf50 <memmove+0x20>
   dbf40:	1e43      	subs	r3, r0, #1
   dbf42:	42a1      	cmp	r1, r4
   dbf44:	d008      	beq.n	dbf58 <memmove+0x28>
   dbf46:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbf4a:	f803 2f01 	strb.w	r2, [r3, #1]!
   dbf4e:	e7f8      	b.n	dbf42 <memmove+0x12>
   dbf50:	4402      	add	r2, r0
   dbf52:	4601      	mov	r1, r0
   dbf54:	428a      	cmp	r2, r1
   dbf56:	d100      	bne.n	dbf5a <memmove+0x2a>
   dbf58:	bd10      	pop	{r4, pc}
   dbf5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dbf5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dbf62:	e7f7      	b.n	dbf54 <memmove+0x24>

000dbf64 <memset>:
   dbf64:	4402      	add	r2, r0
   dbf66:	4603      	mov	r3, r0
   dbf68:	4293      	cmp	r3, r2
   dbf6a:	d100      	bne.n	dbf6e <memset+0xa>
   dbf6c:	4770      	bx	lr
   dbf6e:	f803 1b01 	strb.w	r1, [r3], #1
   dbf72:	e7f9      	b.n	dbf68 <memset+0x4>

000dbf74 <srand>:
   dbf74:	b538      	push	{r3, r4, r5, lr}
   dbf76:	4b0d      	ldr	r3, [pc, #52]	; (dbfac <srand+0x38>)
   dbf78:	681d      	ldr	r5, [r3, #0]
   dbf7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbf7c:	4604      	mov	r4, r0
   dbf7e:	b97b      	cbnz	r3, dbfa0 <srand+0x2c>
   dbf80:	2018      	movs	r0, #24
   dbf82:	f7fc f923 	bl	d81cc <malloc>
   dbf86:	4a0a      	ldr	r2, [pc, #40]	; (dbfb0 <srand+0x3c>)
   dbf88:	4b0a      	ldr	r3, [pc, #40]	; (dbfb4 <srand+0x40>)
   dbf8a:	63a8      	str	r0, [r5, #56]	; 0x38
   dbf8c:	e9c0 2300 	strd	r2, r3, [r0]
   dbf90:	4b09      	ldr	r3, [pc, #36]	; (dbfb8 <srand+0x44>)
   dbf92:	6083      	str	r3, [r0, #8]
   dbf94:	230b      	movs	r3, #11
   dbf96:	8183      	strh	r3, [r0, #12]
   dbf98:	2201      	movs	r2, #1
   dbf9a:	2300      	movs	r3, #0
   dbf9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbfa0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbfa2:	2200      	movs	r2, #0
   dbfa4:	611c      	str	r4, [r3, #16]
   dbfa6:	615a      	str	r2, [r3, #20]
   dbfa8:	bd38      	pop	{r3, r4, r5, pc}
   dbfaa:	bf00      	nop
   dbfac:	2003e2a8 	.word	0x2003e2a8
   dbfb0:	abcd330e 	.word	0xabcd330e
   dbfb4:	e66d1234 	.word	0xe66d1234
   dbfb8:	0005deec 	.word	0x0005deec

000dbfbc <strchr>:
   dbfbc:	b2c9      	uxtb	r1, r1
   dbfbe:	4603      	mov	r3, r0
   dbfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbfc4:	b11a      	cbz	r2, dbfce <strchr+0x12>
   dbfc6:	428a      	cmp	r2, r1
   dbfc8:	d1f9      	bne.n	dbfbe <strchr+0x2>
   dbfca:	4618      	mov	r0, r3
   dbfcc:	4770      	bx	lr
   dbfce:	2900      	cmp	r1, #0
   dbfd0:	bf18      	it	ne
   dbfd2:	2300      	movne	r3, #0
   dbfd4:	e7f9      	b.n	dbfca <strchr+0xe>

000dbfd6 <strchrnul>:
   dbfd6:	b510      	push	{r4, lr}
   dbfd8:	4604      	mov	r4, r0
   dbfda:	f7ff ffef 	bl	dbfbc <strchr>
   dbfde:	b918      	cbnz	r0, dbfe8 <strchrnul+0x12>
   dbfe0:	4620      	mov	r0, r4
   dbfe2:	f000 f832 	bl	dc04a <strlen>
   dbfe6:	4420      	add	r0, r4
   dbfe8:	bd10      	pop	{r4, pc}

000dbfea <strcmp>:
   dbfea:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbfee:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbff2:	2a01      	cmp	r2, #1
   dbff4:	bf28      	it	cs
   dbff6:	429a      	cmpcs	r2, r3
   dbff8:	d0f7      	beq.n	dbfea <strcmp>
   dbffa:	1ad0      	subs	r0, r2, r3
   dbffc:	4770      	bx	lr

000dbffe <strcpy>:
   dbffe:	4603      	mov	r3, r0
   dc000:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc004:	f803 2b01 	strb.w	r2, [r3], #1
   dc008:	2a00      	cmp	r2, #0
   dc00a:	d1f9      	bne.n	dc000 <strcpy+0x2>
   dc00c:	4770      	bx	lr
	...

000dc010 <strdup>:
   dc010:	4b02      	ldr	r3, [pc, #8]	; (dc01c <strdup+0xc>)
   dc012:	4601      	mov	r1, r0
   dc014:	6818      	ldr	r0, [r3, #0]
   dc016:	f000 b803 	b.w	dc020 <_strdup_r>
   dc01a:	bf00      	nop
   dc01c:	2003e2a8 	.word	0x2003e2a8

000dc020 <_strdup_r>:
   dc020:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc022:	4604      	mov	r4, r0
   dc024:	4608      	mov	r0, r1
   dc026:	460d      	mov	r5, r1
   dc028:	f000 f80f 	bl	dc04a <strlen>
   dc02c:	1c42      	adds	r2, r0, #1
   dc02e:	4611      	mov	r1, r2
   dc030:	4620      	mov	r0, r4
   dc032:	9201      	str	r2, [sp, #4]
   dc034:	f7fc f902 	bl	d823c <_malloc_r>
   dc038:	4604      	mov	r4, r0
   dc03a:	b118      	cbz	r0, dc044 <_strdup_r+0x24>
   dc03c:	9a01      	ldr	r2, [sp, #4]
   dc03e:	4629      	mov	r1, r5
   dc040:	f7ff ff68 	bl	dbf14 <memcpy>
   dc044:	4620      	mov	r0, r4
   dc046:	b003      	add	sp, #12
   dc048:	bd30      	pop	{r4, r5, pc}

000dc04a <strlen>:
   dc04a:	4603      	mov	r3, r0
   dc04c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc050:	2a00      	cmp	r2, #0
   dc052:	d1fb      	bne.n	dc04c <strlen+0x2>
   dc054:	1a18      	subs	r0, r3, r0
   dc056:	3801      	subs	r0, #1
   dc058:	4770      	bx	lr

000dc05a <strncmp>:
   dc05a:	b510      	push	{r4, lr}
   dc05c:	b16a      	cbz	r2, dc07a <strncmp+0x20>
   dc05e:	3901      	subs	r1, #1
   dc060:	1884      	adds	r4, r0, r2
   dc062:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc066:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dc06a:	4293      	cmp	r3, r2
   dc06c:	d103      	bne.n	dc076 <strncmp+0x1c>
   dc06e:	42a0      	cmp	r0, r4
   dc070:	d001      	beq.n	dc076 <strncmp+0x1c>
   dc072:	2b00      	cmp	r3, #0
   dc074:	d1f5      	bne.n	dc062 <strncmp+0x8>
   dc076:	1a98      	subs	r0, r3, r2
   dc078:	bd10      	pop	{r4, pc}
   dc07a:	4610      	mov	r0, r2
   dc07c:	e7fc      	b.n	dc078 <strncmp+0x1e>

000dc07e <strncpy>:
   dc07e:	b510      	push	{r4, lr}
   dc080:	3901      	subs	r1, #1
   dc082:	4603      	mov	r3, r0
   dc084:	b132      	cbz	r2, dc094 <strncpy+0x16>
   dc086:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc08a:	f803 4b01 	strb.w	r4, [r3], #1
   dc08e:	3a01      	subs	r2, #1
   dc090:	2c00      	cmp	r4, #0
   dc092:	d1f7      	bne.n	dc084 <strncpy+0x6>
   dc094:	441a      	add	r2, r3
   dc096:	2100      	movs	r1, #0
   dc098:	4293      	cmp	r3, r2
   dc09a:	d100      	bne.n	dc09e <strncpy+0x20>
   dc09c:	bd10      	pop	{r4, pc}
   dc09e:	f803 1b01 	strb.w	r1, [r3], #1
   dc0a2:	e7f9      	b.n	dc098 <strncpy+0x1a>

000dc0a4 <strrchr>:
   dc0a4:	b538      	push	{r3, r4, r5, lr}
   dc0a6:	4603      	mov	r3, r0
   dc0a8:	460c      	mov	r4, r1
   dc0aa:	b969      	cbnz	r1, dc0c8 <strrchr+0x24>
   dc0ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc0b0:	f7ff bf84 	b.w	dbfbc <strchr>
   dc0b4:	1c43      	adds	r3, r0, #1
   dc0b6:	4605      	mov	r5, r0
   dc0b8:	4621      	mov	r1, r4
   dc0ba:	4618      	mov	r0, r3
   dc0bc:	f7ff ff7e 	bl	dbfbc <strchr>
   dc0c0:	2800      	cmp	r0, #0
   dc0c2:	d1f7      	bne.n	dc0b4 <strrchr+0x10>
   dc0c4:	4628      	mov	r0, r5
   dc0c6:	bd38      	pop	{r3, r4, r5, pc}
   dc0c8:	2500      	movs	r5, #0
   dc0ca:	e7f5      	b.n	dc0b8 <strrchr+0x14>

000dc0cc <_strtol_l.isra.0>:
   dc0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc0d0:	4e3a      	ldr	r6, [pc, #232]	; (dc1bc <_strtol_l.isra.0+0xf0>)
   dc0d2:	4686      	mov	lr, r0
   dc0d4:	468c      	mov	ip, r1
   dc0d6:	4660      	mov	r0, ip
   dc0d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc0dc:	5da5      	ldrb	r5, [r4, r6]
   dc0de:	f015 0508 	ands.w	r5, r5, #8
   dc0e2:	d1f8      	bne.n	dc0d6 <_strtol_l.isra.0+0xa>
   dc0e4:	2c2d      	cmp	r4, #45	; 0x2d
   dc0e6:	d133      	bne.n	dc150 <_strtol_l.isra.0+0x84>
   dc0e8:	f89c 4000 	ldrb.w	r4, [ip]
   dc0ec:	f04f 0801 	mov.w	r8, #1
   dc0f0:	f100 0c02 	add.w	ip, r0, #2
   dc0f4:	2b00      	cmp	r3, #0
   dc0f6:	d05c      	beq.n	dc1b2 <_strtol_l.isra.0+0xe6>
   dc0f8:	2b10      	cmp	r3, #16
   dc0fa:	d10c      	bne.n	dc116 <_strtol_l.isra.0+0x4a>
   dc0fc:	2c30      	cmp	r4, #48	; 0x30
   dc0fe:	d10a      	bne.n	dc116 <_strtol_l.isra.0+0x4a>
   dc100:	f89c 0000 	ldrb.w	r0, [ip]
   dc104:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc108:	2858      	cmp	r0, #88	; 0x58
   dc10a:	d14d      	bne.n	dc1a8 <_strtol_l.isra.0+0xdc>
   dc10c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc110:	2310      	movs	r3, #16
   dc112:	f10c 0c02 	add.w	ip, ip, #2
   dc116:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dc11a:	3f01      	subs	r7, #1
   dc11c:	2600      	movs	r6, #0
   dc11e:	fbb7 f9f3 	udiv	r9, r7, r3
   dc122:	4630      	mov	r0, r6
   dc124:	fb03 7a19 	mls	sl, r3, r9, r7
   dc128:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dc12c:	2d09      	cmp	r5, #9
   dc12e:	d818      	bhi.n	dc162 <_strtol_l.isra.0+0x96>
   dc130:	462c      	mov	r4, r5
   dc132:	42a3      	cmp	r3, r4
   dc134:	dd24      	ble.n	dc180 <_strtol_l.isra.0+0xb4>
   dc136:	1c75      	adds	r5, r6, #1
   dc138:	d007      	beq.n	dc14a <_strtol_l.isra.0+0x7e>
   dc13a:	4581      	cmp	r9, r0
   dc13c:	d31d      	bcc.n	dc17a <_strtol_l.isra.0+0xae>
   dc13e:	d101      	bne.n	dc144 <_strtol_l.isra.0+0x78>
   dc140:	45a2      	cmp	sl, r4
   dc142:	db1a      	blt.n	dc17a <_strtol_l.isra.0+0xae>
   dc144:	fb00 4003 	mla	r0, r0, r3, r4
   dc148:	2601      	movs	r6, #1
   dc14a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc14e:	e7eb      	b.n	dc128 <_strtol_l.isra.0+0x5c>
   dc150:	2c2b      	cmp	r4, #43	; 0x2b
   dc152:	bf08      	it	eq
   dc154:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc158:	46a8      	mov	r8, r5
   dc15a:	bf08      	it	eq
   dc15c:	f100 0c02 	addeq.w	ip, r0, #2
   dc160:	e7c8      	b.n	dc0f4 <_strtol_l.isra.0+0x28>
   dc162:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dc166:	2d19      	cmp	r5, #25
   dc168:	d801      	bhi.n	dc16e <_strtol_l.isra.0+0xa2>
   dc16a:	3c37      	subs	r4, #55	; 0x37
   dc16c:	e7e1      	b.n	dc132 <_strtol_l.isra.0+0x66>
   dc16e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dc172:	2d19      	cmp	r5, #25
   dc174:	d804      	bhi.n	dc180 <_strtol_l.isra.0+0xb4>
   dc176:	3c57      	subs	r4, #87	; 0x57
   dc178:	e7db      	b.n	dc132 <_strtol_l.isra.0+0x66>
   dc17a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc17e:	e7e4      	b.n	dc14a <_strtol_l.isra.0+0x7e>
   dc180:	1c73      	adds	r3, r6, #1
   dc182:	d106      	bne.n	dc192 <_strtol_l.isra.0+0xc6>
   dc184:	2322      	movs	r3, #34	; 0x22
   dc186:	f8ce 3000 	str.w	r3, [lr]
   dc18a:	4638      	mov	r0, r7
   dc18c:	b942      	cbnz	r2, dc1a0 <_strtol_l.isra.0+0xd4>
   dc18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc192:	f1b8 0f00 	cmp.w	r8, #0
   dc196:	d000      	beq.n	dc19a <_strtol_l.isra.0+0xce>
   dc198:	4240      	negs	r0, r0
   dc19a:	2a00      	cmp	r2, #0
   dc19c:	d0f7      	beq.n	dc18e <_strtol_l.isra.0+0xc2>
   dc19e:	b10e      	cbz	r6, dc1a4 <_strtol_l.isra.0+0xd8>
   dc1a0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc1a4:	6011      	str	r1, [r2, #0]
   dc1a6:	e7f2      	b.n	dc18e <_strtol_l.isra.0+0xc2>
   dc1a8:	2430      	movs	r4, #48	; 0x30
   dc1aa:	2b00      	cmp	r3, #0
   dc1ac:	d1b3      	bne.n	dc116 <_strtol_l.isra.0+0x4a>
   dc1ae:	2308      	movs	r3, #8
   dc1b0:	e7b1      	b.n	dc116 <_strtol_l.isra.0+0x4a>
   dc1b2:	2c30      	cmp	r4, #48	; 0x30
   dc1b4:	d0a4      	beq.n	dc100 <_strtol_l.isra.0+0x34>
   dc1b6:	230a      	movs	r3, #10
   dc1b8:	e7ad      	b.n	dc116 <_strtol_l.isra.0+0x4a>
   dc1ba:	bf00      	nop
   dc1bc:	000dcefb 	.word	0x000dcefb

000dc1c0 <strtol>:
   dc1c0:	4613      	mov	r3, r2
   dc1c2:	460a      	mov	r2, r1
   dc1c4:	4601      	mov	r1, r0
   dc1c6:	4802      	ldr	r0, [pc, #8]	; (dc1d0 <strtol+0x10>)
   dc1c8:	6800      	ldr	r0, [r0, #0]
   dc1ca:	f7ff bf7f 	b.w	dc0cc <_strtol_l.isra.0>
   dc1ce:	bf00      	nop
   dc1d0:	2003e2a8 	.word	0x2003e2a8

000dc1d4 <dynalib_user>:
   dc1d4:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   dc1e4:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
   dc1f4:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
   dc204:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
   dc214:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
   dc224:	41435f45 424e5f54 6f4e0031 68432074     E_CAT_NB1.Not Ch
   dc234:	69677261 4300676e 67726168 44006465     arging.Charged.D
   dc244:	68637369 69677261 4600676e 746c7561     ischarging.Fault
   dc254:	63694400 656e6e6f 64657463 206f4e00     .Diconnected.No 
   dc264:	61746144 73655200 736e6f70 65522065     Data.Response Re
   dc274:	76696563 55006465 6f6e6b6e 72206e77     ceived.Unknown r
   dc284:	6f707365 2065736e 65636572 64656976     esponse recevied
   dc294:	00692520 64696255 2073746f 6b6f6f48      %i.Ubidots Hook
   dc2a4:	72614800 65522064 20746573 32206e69     .Hard Reset in 2
   dc2b4:	63657320 73646e6f 74655300 72655620      seconds.Set Ver
   dc2c4:	65736f62 646f4d20 6c430065 65726165     bose Mode.Cleare
   dc2d4:	65562064 736f6272 6f4d2065 4f006564     d Verbose Mode.O
   dc2e4:	206e6570 656d6974 74657320 206f7420     pen time set to 
   dc2f4:	44006925 796c6961 756f6320 7320746e     %i.Daily count s
   dc304:	74207465 6925206f 69614400 4c00796c     et to %i.Daily.L
   dc314:	5020776f 7265776f 646f4d20 6f4e0065     ow Power Mode.No
   dc324:	6c616d72 65704f20 69746172 00736e6f     rmal Operations.
   dc334:	20746f4e 20776f4c 65776f50 6f430072     Not Low Power.Co
   dc344:	2c746e75 756f6820 3a796c72 2c692520     unt, hourly: %i,
   dc354:	69616420 203a796c 41006925 76697463      daily: %i.Activ
   dc364:	64657461 20796220 65746e49 70757272     ated by Interrup
   dc374:	65530074 726f736e 68227b00 6c72756f     t.Sensor.{"hourl
   dc384:	253a2279 22202c69 6c696164 253a2279     y":%i, "daily":%
   dc394:	62222c69 65747461 3a227972 222c6925     i,"battery":%i,"
   dc3a4:	3179656b 25223a22 222c2273 706d6574     key1":"%s","temp
   dc3b4:	69253a22 7222202c 74657365 253a2273     ":%i, "resets":%
   dc3c4:	22202c69 72656c61 3a227374 222c6925     i, "alerts":%i,"
   dc3d4:	6d78616d 3a226e69 222c6925 6e6e6f63     maxmin":%i,"conn
   dc3e4:	74746365 22656d69 2c69253a 6d697422     ecttime":%i,"tim
   dc3f4:	61747365 3a22706d 30756c25 007d3030     estamp":%lu000}.
   dc404:	64696255 2d73746f 6e756f43 2d726574     Ubidots-Counter-
   dc414:	6b6f6f48 0031762d 53207325 2e32253a     Hook-v1.%s S:%2.
   dc424:	25256630 3a51202c 302e3225 20252566     0f%%, Q:%2.0f%% 
   dc434:	74655300 6c6f5320 50207261 7265776f     .Set Solar Power
   dc444:	4d206465 0065646f 61656c43 20646572     ed Mode.Cleared 
   dc454:	616c6f53 6f502072 65726577 6f4d2064     Solar Powered Mo
   dc464:	4e006564 69250041 0030303a 736f6c43     de.NA.%i:00.Clos
   dc474:	20676e69 656d6974 74657320 206f7420     ing time set to 
   dc484:	46006925 206d6f72 74207325 7325206f     %i.From %s to %s
   dc494:	61745300 54206574 736e6172 6f697469     .State Transitio
   dc4a4:	7552006e 6e696e6e 61440067 20796c69     n.Running.Daily 
   dc4b4:	61656c43 0070756e 64616f4c 20676e69     Cleanup.Loading 
   dc4c4:	74737953 44206d65 75616665 0073746c     System Defaults.
   dc4d4:	72756f48 6f43796c 00746e75 6e676953     HourlyCount.Sign
   dc4e4:	52006c61 74657365 6e756f43 65540074     al.ResetCount.Te
   dc4f4:	7265706d 72757461 65520065 7361656c     mperature.Releas
   dc504:	74730065 4f657461 67684366 776f6c00     e.stateOfChg.low
   dc514:	65776f50 646f4d72 6c430065 5465736f     PowerMode.CloseT
   dc524:	00656d69 72656c41 54007374 4f656d69     ime.Alerts.TimeO
   dc534:	65736666 61420074 72657474 6e6f4379     ffset.BatteryCon
   dc544:	74786574 74657300 6c696144 756f4379     text.setDailyCou
   dc554:	7200746e 74657365 6e756f43 48007374     nt.resetCounts.H
   dc564:	52647261 74657365 6e655300 776f4e64     ardReset.SendNow
   dc574:	776f4c00 65776f50 646f4d72 6f530065     .LowPowerMode.So
   dc584:	2d72616c 65646f4d 72655600 65736f62     lar-Mode.Verbose
   dc594:	646f4d2d 65530065 69542d74 6f7a656d     -Mode.Set-Timezo
   dc5a4:	5300656e 442d7465 664f5453 74657366     ne.Set-DSTOffset
   dc5b4:	74655300 65704f2d 6d69546e 65530065     .Set-OpenTime.Se
   dc5c4:	6c432d74 0065736f 4d415246 73655420     t-Close.FRAM Tes
   dc5d4:	72452074 00726f72 312e3225 54552066     t Error.%2.1f UT
   dc5e4:	69480043 4c006867 6300776f 64756f6c     C.High.Low.cloud
   dc5f4:	6e6f6320 7463656e 206e6f69 75736e75      connection unsu
   dc604:	73656363 6c756673 6e6f4300 7463656e     ccessful.Connect
   dc614:	69206465 6925206e 63657320 65430073     ed in %i secs.Ce
   dc624:	6c756c6c 66007261 656c6961 6f742064     llular.failed to
   dc634:	6e6f6320 7463656e 206f7420 756f6c63      connect to clou
   dc644:	64202c64 676e696f 65656420 65722070     d, doing deep re
   dc654:	00746573 6f727245 74532072 20657461     set.Error State 
   dc664:	7546202d 4d206c6c 6d65646f 73655220     - Full Modem Res
   dc674:	45007465 726f7272 61745320 2d206574     et.Error State -
   dc684:	73795320 206d6574 65736552 6e490074      System Reset.In
   dc694:	69502074 6877206e 68206e65 00686769     t Pin when high.
   dc6a4:	6f666542 2d206572 20324420 25207369     Before - D2 is %
   dc6b4:	6e612073 33442064 20736920 50007325     s and D3 is %s.P
   dc6c4:	53206e69 65746174 70615400 74656420     in State.Tap det
   dc6d4:	65746365 69762064 32692061 65520063     ected via i2c.Re
   dc6e4:	74736967 41007265 72657466 44202d20     gister.After - D
   dc6f4:	73692032 20732520 20646e61 69203344     2 is %s and D3 i
   dc704:	73252073 74754f00 20666f20 6f6d656d     s %s.Out of memo
   dc714:	6f207972 72756363 20646572 657a6973     ry occurred size
   dc724:	0064253d 6f6d654d 00007972              =%d.Memory..

000dc730 <_ZTV5Timer>:
	...
   dc738:	000d4349 000d439d 000d418d              IC...C...A..

000dc744 <_ZTVN5spark10LogHandlerE>:
	...
   dc754:	000d40a5 000d40c9                       .@...@..

000dc75c <_ZTVN5spark16SerialLogHandlerE>:
	...
   dc764:	000d42e1 000d4315 000da095 000d40cb     .B...C.......@..

000dc774 <_ZTV8MB85RC64>:
	...
   dc77c:	000d41c1 000d41d5 000d7081 000d7117     .A...A...p...q..
   dc78c:	000d7199                                .q..

000dc790 <_ZTV17PublishQueueAsync>:
	...
   dc798:	000d4199 000d41ad 000d74d1 000d765d     .A...A...t..]v..
   dc7a8:	000d761d 000d75fb 000d77a3 000d7643     .v...u...w..Cv..
   dc7b8:	000dc1e8 000dc1f0 000dc1f5 000dc1fa     ................
   dc7c8:	000dc1fe 000dc203 000dc208 000dc20c     ................
   dc7d8:	000dc217 000dc222                       ...."...

000dc7e0 <_ZL17FRAMversionNumber>:
   dc7e0:	00000003 656d6954 6e6f7a20 666f2065     ....Time zone of
   dc7f0:	74657366 00692520 20545344 7366666f     fset %i.DST offs
   dc800:	25207465 66312e32 69616600 2064656c     et %2.1f.failed 
   dc810:	72206f74 20646165 41676572 3d726464     to read regAddr=
   dc820:	78323025 756f6320 253d746e 61660075     %02x count=%u.fa
   dc830:	64656c69 206f7420 64616572 67657220     iled to read reg
   dc840:	72646441 3230253d 74732078 253d7461     Addr=%02x stat=%
   dc850:	4f460064 64205455 6e206469 6720746f     d.FOUT did not g
   dc860:	4948206f 6e004847 6420746f 63657465     o HIGH.not detec
   dc870:	00646574 6c696166 74206465 7277206f     ted.failed to wr
   dc880:	20657469 41676572 3d726464 78323025     ite regAddr=%02x
   dc890:	61747320 64253d74 74657300 20544457      stat=%d.setWDT 
   dc8a0:	77006425 68637461 20676f64 61656c63     %d.watchdog clea
   dc8b0:	20646572 73655262 3d746c75 77006425     red bResult=%d.w
   dc8c0:	68637461 20676f64 20746573 72756f66     atchdog set four
   dc8d0:	73636553 2064253d 73655262 3d746c75     Secs=%d bResult=
   dc8e0:	57006425 48435441 00474f44 50454544     %d.WATCHDOG.DEEP
   dc8f0:	574f505f 445f5245 004e574f 4e554f43     _POWER_DOWN.COUN
   dc900:	574f4454 49545f4e 0052454d 52414c41     TDOWN_TIMER.ALAR
   dc910:	6166004d 72756c69 6e692065 64707520     M.failure in upd
   dc920:	57657461 52656b61 6f736165 6425206e     ateWakeReason %d
   dc930:	6b617700 65722065 6e6f7361 25203d20     .wake reason = %
   dc940:	61660073 72756c69 6e692065 74657320     s.failure in set
   dc950:	6e756f43 776f6474 6d69546e 25207265     CountdownTimer %
   dc960:	61660064 72756c69 6e692065 65656420     d.failure in dee
   dc970:	776f5070 6f447265 25206e77 45520064     pPowerDown %d.RE
   dc980:	4c535f47 5f504545 4c525443 2578303d     G_SLEEP_CTRL=0x%
   dc990:	64007832 276e6469 6f702074 20726577     2x.didn't power 
   dc9a0:	6e776f64 34302500 30252d64 252d6432     down.%04d-%02d-%
   dc9b0:	20643230 64323025 3230253a 30253a64     02d %02d:%02d:%0
   dc9c0:	67006432 74527465 54734163 7325206d     2d.getRtcAsTm %s
   dc9d0:	74657300 73797320 206d6574 636f6c63     .set system cloc
   dc9e0:	7266206b 52206d6f 25204354 61660073     k from RTC %s.fa
   dc9f0:	64656c69 206f7420 65746564 41207463     iled to detect A
   dca00:	30383142 65730035 63745274 6d547341     B1805.setRtcAsTm
   dca10:	00732520 6c696166 20657275 73206e69      %s.failure in s
   dca20:	74527465 6f724663 206d546d 73006425     etRtcFromTm %d.s
   dca30:	52207465 66204354 206d6f72 756f6c63     et RTC from clou
   dca40:	73252064 70706100 3162612e 00353038     d %s.app.ab1805.

000dca50 <_ZTV6AB1805>:
	...
   dca58:	000d64f5 000d64f7 000d6b41 000d6bc7     .d...d..Ak...k..
   dca68:	74697277 74614465 61662061 64656c69     writeData failed
   dca78:	72756420 20676e69 73617265 72662065      during erase fr
   dca88:	64416d61 253d7264 00000075              amAddr=%u...

000dca94 <_ZTV6MB85RC>:
	...
   dca9c:	000d6fd1 000d6fd3 000d7081 000d7117     .o...o...p...q..
   dcaac:	000d7199 6c627550 51687369 65756575     .q..PublishQueue
   dcabc:	6e797341 75710063 69657565 6520676e     Async.queueing e
   dcacc:	746e6576 656d614e 2073253d 61746164     ventName=%s data
   dcadc:	2073253d 3d6c7474 66206425 7367616c     =%s ttl=%d flags
   dcaec:	64253d31 616c6620 3d327367 73206425     1=%d flags2=%d s
   dcafc:	3d657a69 70006425 696c6275 6e696873     ize=%d.publishin
   dcb0c:	73252067 20732520 3d6c7474 66206425     g %s %s ttl=%d f
   dcb1c:	7367616c 0078253d 6c627570 65687369     lags=%x.publishe
   dcb2c:	75732064 73656363 6c756673 7000796c     d successfully.p
   dcb3c:	696c6275 64656873 69616620 2c64656c     ublished failed,
   dcb4c:	6c697720 6572206c 20797274 25206e69      will retry in %
   dcb5c:	6d20756c 70610073 75702e70 00007162     lu ms.app.pubq..

000dcb6c <_ZTV21PublishQueueAsyncBase>:
	...
   dcb7c:	000d74d1 000d40a5 000d40a5 000d40a5     .t...@...@...@..
   dcb8c:	000d40a5 000d40a5                       .@...@..

000dcb94 <_ZTV25PublishQueueAsyncRetained>:
	...
   dcb9c:	000d75b9 000d75cd 000d74d1 000d765d     .u...u...t..]v..
   dcbac:	000d761d 000d75fb 000d77a3 000d7643     .v...u...w..Cv..

000dcbbc <_ZTVN5spark13CellularClassE>:
	...
   dcbc4:	000d839b 000d8391 000d8387 000d8349     ............I...
   dcbd4:	000d837b 000d4329 000da3ed 000da3f5     {...)C..........
   dcbe4:	000d836f 000d8367 000d835d 000d8353     o...g...]...S...
   dcbf4:	000da425                                %...

000dcbf8 <_ZTV14CellularSignal>:
	...
   dcc00:	000d8449 000d844f 000d844b 000d845d     I...O...K...]...
   dcc10:	000d8491 000d84bd 000d84f1 000d8541     ............A...
   dcc20:	fffffffc 00000000 000d8567              ........g...

000dcc2c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcc34:	000d8587 000d858d 000d85cb 000d859b     ................
   dcc44:	000d8589                                ....

000dcc48 <_ZTVN5spark13EthernetClassE>:
	...
   dcc50:	000d8bfb 000d8bf1 000d8be7 000d8bdd     ................
   dcc60:	000d8bd1 000d8bc5 000da3ed 000da3f5     ................
   dcc70:	000d8bb9 000d8bb1 000d8ba7 000d8b9d     ................
   dcc80:	000da425                                %...

000dcc84 <_ZTV7TwoWire>:
	...
   dcc8c:	000d8dad 000d8df7 000d8dcf 000d8daf     ................
   dcc9c:	000d8dd7 000d8ddf 000d8de7 000d8def     ................

000dccac <_ZTV9IPAddress>:
	...
   dccb4:	000d8f99 000d8f89 000d8f8b 34302575     ............u%04
   dccc4:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   dccd4:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   dcce4:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   dccf4:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   dcd04:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   dcd14:	20736c69 0d00203d 006d000a 66006e6c     ils = ....m.ln.f
   dcd24:	6f63006e 64006564 69617465 0000006c     n.code.detail...

000dcd34 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dcd3c:	000d9453 000d9479 000d9439 000d9099     S...y...9.......

000dcd4c <_ZTVN5spark16StreamLogHandlerE>:
	...
   dcd54:	000d98bd 000d98d5 000da095 000d40cb     .............@..

000dcd64 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dcd6c:	000d98e9 000d98fd 000da239 000d9441     ........9...A...

000dcd7c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dcd84:	000d9451 000d9487 000d9fd1 000d9443     Q...........C...

000dcd94 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dcd9c:	000d944f 000d9495 000d9805 000d94b1     O...............

000dcdac <_ZTVN5spark12NetworkClassE>:
	...
   dcdb4:	000da3ad 000da3b7 000da3c1 000da3cb     ................
   dcdc4:	000da3d5 000da3e1 000da3ed 000da3f5     ................
   dcdd4:	000da3fd 000da409 000da411 000da41b     ................
   dcde4:	000da425 69726977 5300676e 65747379     %...wiring.Syste
   dcdf4:	6c73206d 20706565 666e6f63 72756769     m sleep configur
   dce04:	6f697461 7369206e 766e6920 64696c61     ation is invalid
   dce14:	005a002e 33302b25 30253a64 25007532     ..Z.%+03d:%02u.%
   dce24:	6d252d59 5464252d 253a4825 53253a4d     Y-%m-%dT%H:%M:%S
   dce34:	61007a25 69746373 0000656d              %z.asctime..

000dce40 <_ZTV11USARTSerial>:
	...
   dce48:	000daf91 000daffd 000dafd5 000da66b     ............k...
   dce58:	000dafa5 000dafc1 000dafb3 000dafcf     ................
   dce68:	000daf93 000daf97                       ........

000dce70 <_ZTV9USBSerial>:
	...
   dce78:	000db0a5 000db10d 000db0e3 000da66b     ............k...
   dce88:	000db0d5 000db0a7 000db0b7 000db107     ................
   dce98:	000db0c7 000db0a1                       ........

000dcea0 <_ZSt7nothrow>:
   dcea0:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   dceb0:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000dcec1 <day_name.6145>:
   dcec1:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   dced1:	61536972                                 riSat

000dced6 <mon_name.6146>:
   dced6:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   dcee6:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   dcef6:	63654476                                vDec

000dcefa <_ctype_>:
   dcefa:	20202000 20202020 28282020 20282828     .         ((((( 
   dcf0a:	20202020 20202020 20202020 20202020                     
   dcf1a:	10108820 10101010 10101010 10101010      ...............
   dcf2a:	04040410 04040404 10040404 10101010     ................
   dcf3a:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dcf4a:	01010101 01010101 01010101 10101010     ................
   dcf5a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dcf6a:	02020202 02020202 02020202 10101010     ................
   dcf7a:	00000020 00000000 00000000 00000000      ...............
	...

000dcffb <link_const_variable_data_end>:
	...

000dcffc <link_constructors_location>:
   dcffc:	000d56ad 	.word	0x000d56ad
   dd000:	000d64e9 	.word	0x000d64e9
   dd004:	000d6fc1 	.word	0x000d6fc1
   dd008:	000d7a35 	.word	0x000d7a35
   dd00c:	000d8321 	.word	0x000d8321
   dd010:	000d8419 	.word	0x000d8419
   dd014:	000d8c05 	.word	0x000d8c05
   dd018:	000da085 	.word	0x000da085
   dd01c:	000da4f9 	.word	0x000da4f9
   dd020:	000da785 	.word	0x000da785
   dd024:	000daaf9 	.word	0x000daaf9
   dd028:	000daf7d 	.word	0x000daf7d

000dd02c <link_constructors_end>:
   dd02c:	00000000 	.word	0x00000000
