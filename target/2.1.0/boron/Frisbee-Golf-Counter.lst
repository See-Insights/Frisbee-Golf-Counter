
/Users/chipmc/Documents/Maker/Particle/Projects/Frisbee-Golf-Counter/target/2.1.0/boron/Frisbee-Golf-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009170  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dd190  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000134  2003e1e8  000dd994  0001e1e8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004d8  2003e320  2003e320  0002e320  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000ddac8  000ddac8  0002dac8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000ddaf4  000ddaf4  0002daf4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e7465  00000000  00000000  0002daf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001f471  00000000  00000000  00214f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003b294  00000000  00000000  002343ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003588  00000000  00000000  0026f662  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a0b0  00000000  00000000  00272bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040d80  00000000  00000000  0027cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004fca2  00000000  00000000  002bda1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00117aaf  00000000  00000000  0030d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009760  00000000  00000000  0042516c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 f833 	bl	dc09c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 f855 	bl	dc0ec <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1e8 	.word	0x2003e1e8
   d404c:	000dd994 	.word	0x000dd994
   d4050:	2003e31c 	.word	0x2003e31c
   d4054:	2003e320 	.word	0x2003e320
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 f9cd 	bl	db400 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dd154 	.word	0x000dd154
   d4080:	000dd184 	.word	0x000dd184

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b96c 	b.w	d5360 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fe2b 	bl	d5ce4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 b977 	b.w	db384 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b951 	b.w	d833c <malloc>

000d409a <_Znaj>:
   d409a:	f004 b94f 	b.w	d833c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b955 	b.w	d834c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 ffca 	bl	d8044 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7d15 	.word	0x000d7d15

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z18outOfMemoryHandleryi+0x8>)
   d40d6:	601a      	str	r2, [r3, #0]
}
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003e228 	.word	0x2003e228

000d40e0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e0:	6803      	ldr	r3, [r0, #0]
   d40e2:	4718      	bx	r3

000d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40e4:	2a01      	cmp	r2, #1
   d40e6:	d003      	beq.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40e8:	2a02      	cmp	r2, #2
   d40ea:	d003      	beq.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40ec:	2000      	movs	r0, #0
   d40ee:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f0:	6001      	str	r1, [r0, #0]
	      break;
   d40f2:	e7fb      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40f4:	680b      	ldr	r3, [r1, #0]
   d40f6:	6003      	str	r3, [r0, #0]
	}
   d40f8:	e7f8      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40fa <_Z19countSignalTimerISRv>:
  sensorDetect = true;                                              // sets the sensor flag for the main loop
  pinSetFast(blueLED);                                                // Turn on the blue LED
}

void countSignalTimerISR() {
  digitalWrite(blueLED,LOW);
   d40fa:	2100      	movs	r1, #0
   d40fc:	2007      	movs	r0, #7
   d40fe:	f007 ba18 	b.w	db532 <digitalWrite>
	...

000d4104 <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d4104:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d4106:	4b05      	ldr	r3, [pc, #20]	; (d411c <_Z21batteryContextMessagev+0x18>)
   d4108:	7b1a      	ldrb	r2, [r3, #12]
   d410a:	4b05      	ldr	r3, [pc, #20]	; (d4120 <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d410c:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d410e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d4112:	f006 fc5e 	bl	da9d2 <_ZN6StringC1EPKc>
}
   d4116:	4620      	mov	r0, r4
   d4118:	bd10      	pop	{r4, pc}
   d411a:	bf00      	nop
   d411c:	2003e4c0 	.word	0x2003e4c0
   d4120:	2003e1e8 	.word	0x2003e1e8

000d4124 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4124:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4126:	6803      	ldr	r3, [r0, #0]
   d4128:	2b2f      	cmp	r3, #47	; 0x2f
{
   d412a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d412c:	d904      	bls.n	d4138 <nrf_gpio_pin_port_decode+0x14>
   d412e:	4a07      	ldr	r2, [pc, #28]	; (d414c <nrf_gpio_pin_port_decode+0x28>)
   d4130:	2100      	movs	r1, #0
   d4132:	200a      	movs	r0, #10
   d4134:	f003 ff86 	bl	d8044 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d413c:	bf83      	ittte	hi
   d413e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4142:	4803      	ldrhi	r0, [pc, #12]	; (d4150 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4144:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4146:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d414a:	bd10      	pop	{r4, pc}
   d414c:	000d7d15 	.word	0x000d7d15
   d4150:	50000300 	.word	0x50000300

000d4154 <_Z9sensorISRv>:
{
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
  sensorDetect = true;                                              // sets the sensor flag for the main loop
   d4156:	4b1c      	ldr	r3, [pc, #112]	; (d41c8 <_Z9sensorISRv+0x74>)
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4158:	4c1c      	ldr	r4, [pc, #112]	; (d41cc <_Z9sensorISRv+0x78>)
   d415a:	4d1d      	ldr	r5, [pc, #116]	; (d41d0 <_Z9sensorISRv+0x7c>)
   d415c:	2201      	movs	r2, #1
   d415e:	701a      	strb	r2, [r3, #0]
   d4160:	7823      	ldrb	r3, [r4, #0]
   d4162:	f3bf 8f5b 	dmb	ish
   d4166:	f013 0f01 	tst.w	r3, #1
   d416a:	d109      	bne.n	d4180 <_Z9sensorISRv+0x2c>
   d416c:	4620      	mov	r0, r4
   d416e:	f7ff ffa3 	bl	d40b8 <__cxa_guard_acquire>
   d4172:	b128      	cbz	r0, d4180 <_Z9sensorISRv+0x2c>
   d4174:	f003 fdfe 	bl	d7d74 <HAL_Pin_Map>
   d4178:	6028      	str	r0, [r5, #0]
   d417a:	4620      	mov	r0, r4
   d417c:	f7ff ffa1 	bl	d40c2 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4180:	682b      	ldr	r3, [r5, #0]
   d4182:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   d4186:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4188:	7823      	ldrb	r3, [r4, #0]
   d418a:	f3bf 8f5b 	dmb	ish
   d418e:	07db      	lsls	r3, r3, #31
   d4190:	d409      	bmi.n	d41a6 <_Z9sensorISRv+0x52>
   d4192:	480e      	ldr	r0, [pc, #56]	; (d41cc <_Z9sensorISRv+0x78>)
   d4194:	f7ff ff90 	bl	d40b8 <__cxa_guard_acquire>
   d4198:	b128      	cbz	r0, d41a6 <_Z9sensorISRv+0x52>
   d419a:	f003 fdeb 	bl	d7d74 <HAL_Pin_Map>
   d419e:	6028      	str	r0, [r5, #0]
   d41a0:	480a      	ldr	r0, [pc, #40]	; (d41cc <_Z9sensorISRv+0x78>)
   d41a2:	f7ff ff8e 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41a6:	682b      	ldr	r3, [r5, #0]
   d41a8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d41ac:	f003 031f 	and.w	r3, r3, #31
   d41b0:	4333      	orrs	r3, r6
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41b2:	a801      	add	r0, sp, #4
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	f7ff ffb5 	bl	d4124 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d41ba:	9a01      	ldr	r2, [sp, #4]
   d41bc:	2301      	movs	r3, #1
   d41be:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d41c0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d41c4:	b002      	add	sp, #8
   d41c6:	bd70      	pop	{r4, r5, r6, pc}
   d41c8:	2003e4b4 	.word	0x2003e4b4
   d41cc:	2003e324 	.word	0x2003e324
   d41d0:	2003e328 	.word	0x2003e328

000d41d4 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d41d4:	b538      	push	{r3, r4, r5, lr}
   d41d6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d41d8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d41da:	b128      	cbz	r0, d41e8 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d41dc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d41de:	210c      	movs	r1, #12
   d41e0:	f007 fa6f 	bl	db6c2 <_ZdlPvj>
            wakeupSource = next;
   d41e4:	4628      	mov	r0, r5
        while (wakeupSource) {
   d41e6:	e7f8      	b.n	d41da <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d41e8:	4620      	mov	r0, r4
   d41ea:	bd38      	pop	{r3, r4, r5, pc}

000d41ec <_Z7sendNow6String>:
{
   d41ec:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d41ee:	4904      	ldr	r1, [pc, #16]	; (d4200 <_Z7sendNow6String+0x14>)
   d41f0:	f006 fc45 	bl	daa7e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d41f4:	b118      	cbz	r0, d41fe <_Z7sendNow6String+0x12>
    state = REPORTING_STATE;
   d41f6:	4b03      	ldr	r3, [pc, #12]	; (d4204 <_Z7sendNow6String+0x18>)
   d41f8:	2206      	movs	r2, #6
   d41fa:	701a      	strb	r2, [r3, #0]
    return 1;
   d41fc:	2001      	movs	r0, #1
}
   d41fe:	bd08      	pop	{r3, pc}
   d4200:	000dc3b4 	.word	0x000dc3b4
   d4204:	2003e4b5 	.word	0x2003e4b5

000d4208 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4208:	6943      	ldr	r3, [r0, #20]
   d420a:	b113      	cbz	r3, d4212 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d420c:	6983      	ldr	r3, [r0, #24]
   d420e:	300c      	adds	r0, #12
   d4210:	4718      	bx	r3
            callback();
        }
    }
   d4212:	4770      	bx	lr

000d4214 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4214:	b510      	push	{r4, lr}
   d4216:	4b03      	ldr	r3, [pc, #12]	; (d4224 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4218:	6003      	str	r3, [r0, #0]
   d421a:	4604      	mov	r4, r0
   d421c:	f003 fa84 	bl	d7728 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4220:	4620      	mov	r0, r4
   d4222:	bd10      	pop	{r4, pc}
   d4224:	000dc8f0 	.word	0x000dc8f0

000d4228 <_ZN17PublishQueueAsyncD0Ev>:
   d4228:	b510      	push	{r4, lr}
   d422a:	4604      	mov	r4, r0
   d422c:	f7ff fff2 	bl	d4214 <_ZN17PublishQueueAsyncD1Ev>
   d4230:	4620      	mov	r0, r4
   d4232:	2138      	movs	r1, #56	; 0x38
   d4234:	f007 fa45 	bl	db6c2 <_ZdlPvj>
   d4238:	4620      	mov	r0, r4
   d423a:	bd10      	pop	{r4, pc}

000d423c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d423c:	b510      	push	{r4, lr}
   d423e:	4b03      	ldr	r3, [pc, #12]	; (d424c <_ZN8MB85RC64D1Ev+0x10>)
   d4240:	6003      	str	r3, [r0, #0]
   d4242:	4604      	mov	r4, r0
   d4244:	f002 ff64 	bl	d7110 <_ZN6MB85RCD1Ev>
   d4248:	4620      	mov	r0, r4
   d424a:	bd10      	pop	{r4, pc}
   d424c:	000dc8d4 	.word	0x000dc8d4

000d4250 <_ZN8MB85RC64D0Ev>:
   d4250:	b510      	push	{r4, lr}
   d4252:	4604      	mov	r4, r0
   d4254:	f7ff fff2 	bl	d423c <_ZN8MB85RC64D1Ev>
   d4258:	4620      	mov	r0, r4
   d425a:	2110      	movs	r1, #16
   d425c:	f007 fa31 	bl	db6c2 <_ZdlPvj>
   d4260:	4620      	mov	r0, r4
   d4262:	bd10      	pop	{r4, pc}

000d4264 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4264:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4266:	2100      	movs	r1, #0
   d4268:	4604      	mov	r4, r0
   d426a:	4608      	mov	r0, r1
   d426c:	f003 fcba 	bl	d7be4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4270:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4272:	4620      	mov	r0, r4
   d4274:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4276:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4278:	f003 fccc 	bl	d7c14 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d427c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d427e:	b10c      	cbz	r4, d4284 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4280:	2301      	movs	r3, #1
   d4282:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4284:	2100      	movs	r1, #0
   d4286:	2001      	movs	r0, #1
   d4288:	f003 fcac 	bl	d7be4 <os_thread_scheduling>
            }
        }
        if (t) {
   d428c:	b12c      	cbz	r4, d429a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d428e:	6823      	ldr	r3, [r4, #0]
   d4290:	4620      	mov	r0, r4
   d4292:	689b      	ldr	r3, [r3, #8]
   d4294:	4798      	blx	r3
            t->running = false;
   d4296:	2300      	movs	r3, #0
   d4298:	7123      	strb	r3, [r4, #4]
        }
    }
   d429a:	b002      	add	sp, #8
   d429c:	bd10      	pop	{r4, pc}
	...

000d42a0 <_Z11resetCounts6String>:
{
   d42a0:	b508      	push	{r3, lr}
   d42a2:	490a      	ldr	r1, [pc, #40]	; (d42cc <_Z11resetCounts6String+0x2c>)
   d42a4:	f006 fbeb 	bl	daa7e <_ZNK6String6equalsEPKc>
   d42a8:	2300      	movs	r3, #0
  if (command == "1")
   d42aa:	b168      	cbz	r0, d42c8 <_Z11resetCounts6String+0x28>
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d42ac:	4a08      	ldr	r2, [pc, #32]	; (d42d0 <_Z11resetCounts6String+0x30>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d42ae:	4909      	ldr	r1, [pc, #36]	; (d42d4 <_Z11resetCounts6String+0x34>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d42b0:	6013      	str	r3, [r2, #0]
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d42b2:	6093      	str	r3, [r2, #8]
    current.alertCount = 0;                                           // Reset count variables
   d42b4:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d42b6:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d42b8:	4a07      	ldr	r2, [pc, #28]	; (d42d8 <_Z11resetCounts6String+0x38>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d42ba:	610b      	str	r3, [r1, #16]
    dataInFlight = false;
   d42bc:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d42be:	4b07      	ldr	r3, [pc, #28]	; (d42dc <_Z11resetCounts6String+0x3c>)
   d42c0:	2001      	movs	r0, #1
   d42c2:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d42c4:	4b06      	ldr	r3, [pc, #24]	; (d42e0 <_Z11resetCounts6String+0x40>)
   d42c6:	7018      	strb	r0, [r3, #0]
}
   d42c8:	bd08      	pop	{r3, pc}
   d42ca:	bf00      	nop
   d42cc:	000dc3b4 	.word	0x000dc3b4
   d42d0:	2003e3f4 	.word	0x2003e3f4
   d42d4:	2003e4c0 	.word	0x2003e4c0
   d42d8:	2003e423 	.word	0x2003e423
   d42dc:	2003e418 	.word	0x2003e418
   d42e0:	2003e4f0 	.word	0x2003e4f0

000d42e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d42e4:	b510      	push	{r4, lr}
   d42e6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d42e8:	6800      	ldr	r0, [r0, #0]
   d42ea:	b118      	cbz	r0, d42f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d42ec:	f004 f82e 	bl	d834c <free>
            wakeupSource_ = nullptr;
   d42f0:	2300      	movs	r3, #0
   d42f2:	6023      	str	r3, [r4, #0]
        }
    }
   d42f4:	bd10      	pop	{r4, pc}

000d42f6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d42f6:	b510      	push	{r4, lr}
   d42f8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d42fa:	f7ff fff3 	bl	d42e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d42fe:	4620      	mov	r0, r4
   d4300:	bd10      	pop	{r4, pc}

000d4302 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4302:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4304:	2000      	movs	r0, #0
   d4306:	f003 ff91 	bl	d822c <spark_sync_time_pending>
   d430a:	b128      	cbz	r0, d4318 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d430c:	f003 ff66 	bl	d81dc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4310:	f080 0001 	eor.w	r0, r0, #1
   d4314:	b2c0      	uxtb	r0, r0
    }
   d4316:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4318:	2001      	movs	r0, #1
   d431a:	e7fc      	b.n	d4316 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d431c:	2300      	movs	r3, #0
   d431e:	2204      	movs	r2, #4
   d4320:	f003 bf3c 	b.w	d819c <spark_variable>

000d4324 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4324:	b530      	push	{r4, r5, lr}
   d4326:	b085      	sub	sp, #20
   d4328:	4603      	mov	r3, r0
   d432a:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d432c:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d432e:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4330:	4798      	blx	r3
        size = str.length();
   d4332:	9802      	ldr	r0, [sp, #8]
   d4334:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d4336:	f004 f801 	bl	d833c <malloc>
   d433a:	6028      	str	r0, [r5, #0]
        if (!data) {
   d433c:	b150      	cbz	r0, d4354 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d433e:	6822      	ldr	r2, [r4, #0]
   d4340:	9900      	ldr	r1, [sp, #0]
   d4342:	f007 feab 	bl	dc09c <memcpy>
        return 0;
   d4346:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4348:	4668      	mov	r0, sp
   d434a:	f006 faf7 	bl	da93c <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d434e:	4620      	mov	r0, r4
   d4350:	b005      	add	sp, #20
   d4352:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d4354:	4c00      	ldr	r4, [pc, #0]	; (d4358 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d4356:	e7f7      	b.n	d4348 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4358:	fffffefc 	.word	0xfffffefc

000d435c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d435c:	4b0a      	ldr	r3, [pc, #40]	; (d4388 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d435e:	b510      	push	{r4, lr}
   d4360:	4604      	mov	r4, r0
   d4362:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4364:	f005 fa72 	bl	d984c <_ZN5spark10LogManager8instanceEv>
   d4368:	4621      	mov	r1, r4
   d436a:	f005 fc74 	bl	d9c56 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d436e:	f006 ffbd 	bl	db2ec <_Z16_fetch_usbserialv>
   d4372:	f006 ffaf 	bl	db2d4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4376:	4620      	mov	r0, r4
   d4378:	4b04      	ldr	r3, [pc, #16]	; (d438c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d437a:	f840 3b04 	str.w	r3, [r0], #4
   d437e:	f005 fb57 	bl	d9a30 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4382:	4620      	mov	r0, r4
   d4384:	bd10      	pop	{r4, pc}
   d4386:	bf00      	nop
   d4388:	000dc8bc 	.word	0x000dc8bc
   d438c:	000dc8a4 	.word	0x000dc8a4

000d4390 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4390:	b510      	push	{r4, lr}
   d4392:	4604      	mov	r4, r0
    }
   d4394:	f7ff ffe2 	bl	d435c <_ZN5spark16SerialLogHandlerD1Ev>
   d4398:	4620      	mov	r0, r4
   d439a:	2124      	movs	r1, #36	; 0x24
   d439c:	f007 f991 	bl	db6c2 <_ZdlPvj>
   d43a0:	4620      	mov	r0, r4
   d43a2:	bd10      	pop	{r4, pc}

000d43a4 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d43a4:	2300      	movs	r3, #0
   d43a6:	6840      	ldr	r0, [r0, #4]
   d43a8:	461a      	mov	r2, r3
   d43aa:	4619      	mov	r1, r3
   d43ac:	f003 bf8e 	b.w	d82cc <network_off>

000d43b0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d43b0:	b510      	push	{r4, lr}
      if (_M_manager)
   d43b2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d43b4:	4604      	mov	r4, r0
      if (_M_manager)
   d43b6:	b113      	cbz	r3, d43be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d43b8:	2203      	movs	r2, #3
   d43ba:	4601      	mov	r1, r0
   d43bc:	4798      	blx	r3
    }
   d43be:	4620      	mov	r0, r4
   d43c0:	bd10      	pop	{r4, pc}
	...

000d43c4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d43c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43c6:	4b13      	ldr	r3, [pc, #76]	; (d4414 <_ZN5TimerD1Ev+0x50>)
   d43c8:	6003      	str	r3, [r0, #0]
   d43ca:	4604      	mov	r4, r0
        if (handle) {
   d43cc:	6880      	ldr	r0, [r0, #8]
   d43ce:	b1c8      	cbz	r0, d4404 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d43d0:	2500      	movs	r5, #0
   d43d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d43d6:	e9cd 3500 	strd	r3, r5, [sp]
   d43da:	2102      	movs	r1, #2
   d43dc:	462b      	mov	r3, r5
   d43de:	462a      	mov	r2, r5
   d43e0:	f003 fc20 	bl	d7c24 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d43e4:	68a0      	ldr	r0, [r4, #8]
   d43e6:	4629      	mov	r1, r5
   d43e8:	f003 fc6c 	bl	d7cc4 <os_timer_set_id>
            while (running) {
   d43ec:	7923      	ldrb	r3, [r4, #4]
   d43ee:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43f2:	b113      	cbz	r3, d43fa <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d43f4:	f003 fbee 	bl	d7bd4 <os_thread_yield>
            while (running) {
   d43f8:	e7f8      	b.n	d43ec <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d43fa:	68a0      	ldr	r0, [r4, #8]
   d43fc:	4629      	mov	r1, r5
   d43fe:	f003 fc01 	bl	d7c04 <os_timer_destroy>
            handle = nullptr;
   d4402:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4404:	f104 000c 	add.w	r0, r4, #12
   d4408:	f7ff ffd2 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
    }
   d440c:	4620      	mov	r0, r4
   d440e:	b003      	add	sp, #12
   d4410:	bd30      	pop	{r4, r5, pc}
   d4412:	bf00      	nop
   d4414:	000dc890 	.word	0x000dc890

000d4418 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4418:	b510      	push	{r4, lr}
   d441a:	4604      	mov	r4, r0
    }
   d441c:	f7ff ffd2 	bl	d43c4 <_ZN5TimerD1Ev>
   d4420:	4620      	mov	r0, r4
   d4422:	211c      	movs	r1, #28
   d4424:	f007 f94d 	bl	db6c2 <_ZdlPvj>
   d4428:	4620      	mov	r0, r4
   d442a:	bd10      	pop	{r4, pc}

000d442c <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d442c:	b538      	push	{r3, r4, r5, lr}
   d442e:	4604      	mov	r4, r0
            : conf_{} {
   d4430:	2520      	movs	r5, #32
   d4432:	462a      	mov	r2, r5
   d4434:	2100      	movs	r1, #0
   d4436:	f007 fe59 	bl	dc0ec <memset>
        conf_.size = sizeof(conf_);
   d443a:	7165      	strb	r5, [r4, #5]
    }
   d443c:	4620      	mov	r0, r4
   d443e:	bd38      	pop	{r3, r4, r5, pc}

000d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4442:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4444:	4605      	mov	r5, r0
   d4446:	460f      	mov	r7, r1
   d4448:	4616      	mov	r6, r2
        if (valid_) {
   d444a:	b18b      	cbz	r3, d4470 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d444c:	6803      	ldr	r3, [r0, #0]
   d444e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4450:	b183      	cbz	r3, d4474 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4452:	889a      	ldrh	r2, [r3, #4]
   d4454:	2a01      	cmp	r2, #1
   d4456:	d006      	beq.n	d4466 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4458:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d445a:	e7f9      	b.n	d4450 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d445c:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d445e:	b14b      	cbz	r3, d4474 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4460:	889a      	ldrh	r2, [r3, #4]
   d4462:	2a01      	cmp	r2, #1
   d4464:	d1fa      	bne.n	d445c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4466:	b12b      	cbz	r3, d4474 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4468:	899a      	ldrh	r2, [r3, #12]
   d446a:	42ba      	cmp	r2, r7
   d446c:	d1f6      	bne.n	d445c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d446e:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4470:	4628      	mov	r0, r5
   d4472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4474:	490a      	ldr	r1, [pc, #40]	; (d44a0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4476:	2010      	movs	r0, #16
   d4478:	f007 f925 	bl	db6c6 <_ZnwjRKSt9nothrow_t>
   d447c:	4604      	mov	r4, r0
   d447e:	b168      	cbz	r0, d449c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4480:	2210      	movs	r2, #16
   d4482:	2100      	movs	r1, #0
   d4484:	f007 fe32 	bl	dc0ec <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4488:	4b06      	ldr	r3, [pc, #24]	; (d44a4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d448a:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d448c:	2301      	movs	r3, #1
   d448e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4490:	692b      	ldr	r3, [r5, #16]
   d4492:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4494:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4496:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4498:	612c      	str	r4, [r5, #16]
   d449a:	e7e9      	b.n	d4470 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d449c:	7528      	strb	r0, [r5, #20]
                return *this;
   d449e:	e7e7      	b.n	d4470 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d44a0:	000dcff8 	.word	0x000dcff8
   d44a4:	00030010 	.word	0x00030010

000d44a8 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d44a8:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d44aa:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d44ac:	4605      	mov	r5, r0
   d44ae:	460e      	mov	r6, r1
        if (valid_) {
   d44b0:	b1cb      	cbz	r3, d44e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d44b2:	6803      	ldr	r3, [r0, #0]
   d44b4:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d44b6:	b123      	cbz	r3, d44c2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d44b8:	889a      	ldrh	r2, [r3, #4]
   d44ba:	2a04      	cmp	r2, #4
   d44bc:	d017      	beq.n	d44ee <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d44be:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d44c0:	e7f9      	b.n	d44b6 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d44c2:	490c      	ldr	r1, [pc, #48]	; (d44f4 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d44c4:	2010      	movs	r0, #16
   d44c6:	f007 f8fe 	bl	db6c6 <_ZnwjRKSt9nothrow_t>
   d44ca:	4604      	mov	r4, r0
   d44cc:	b168      	cbz	r0, d44ea <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d44ce:	2210      	movs	r2, #16
   d44d0:	2100      	movs	r1, #0
   d44d2:	f007 fe0b 	bl	dc0ec <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d44d6:	4b08      	ldr	r3, [pc, #32]	; (d44f8 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d44d8:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d44da:	2304      	movs	r3, #4
   d44dc:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d44de:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d44e0:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d44e2:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d44e6:	4628      	mov	r0, r5
   d44e8:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d44ea:	7528      	strb	r0, [r5, #20]
                return *this;
   d44ec:	e7fb      	b.n	d44e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d44ee:	60de      	str	r6, [r3, #12]
                return *this;
   d44f0:	e7f9      	b.n	d44e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d44f2:	bf00      	nop
   d44f4:	000dcff8 	.word	0x000dcff8
   d44f8:	00030010 	.word	0x00030010

000d44fc <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d44fc:	2000      	movs	r0, #0
   d44fe:	f003 bc21 	b.w	d7d44 <hal_timer_millis>
	...

000d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4504:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4506:	4801      	ldr	r0, [pc, #4]	; (d450c <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4508:	f004 b95c 	b.w	d87c4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d450c:	000d8799 	.word	0x000d8799

000d4510 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4510:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4512:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4514:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4516:	2100      	movs	r1, #0
   d4518:	b140      	cbz	r0, d452c <_ZN5Timer12changePeriodEjj+0x1c>
   d451a:	e9cd 2100 	strd	r2, r1, [sp]
   d451e:	460a      	mov	r2, r1
   d4520:	2103      	movs	r1, #3
   d4522:	f003 fb7f 	bl	d7c24 <os_timer_change>
   d4526:	fab0 f080 	clz	r0, r0
   d452a:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d452c:	b003      	add	sp, #12
   d452e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4532 <_ZNK5Timer8isActiveEv>:
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4532:	b508      	push	{r3, lr}
    bool isValid() const { return handle!=nullptr; }
   d4534:	6880      	ldr	r0, [r0, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4536:	b128      	cbz	r0, d4544 <_ZNK5Timer8isActiveEv+0x12>
   d4538:	2100      	movs	r1, #0
   d453a:	f003 fbb3 	bl	d7ca4 <os_timer_is_active>
   d453e:	3800      	subs	r0, #0
   d4540:	bf18      	it	ne
   d4542:	2001      	movne	r0, #1
   d4544:	bd08      	pop	{r3, pc}

000d4546 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4546:	b40e      	push	{r1, r2, r3}
   d4548:	b510      	push	{r4, lr}
   d454a:	b08d      	sub	sp, #52	; 0x34
   d454c:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d454e:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4550:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4554:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4556:	2300      	movs	r3, #0
   d4558:	2020      	movs	r0, #32
   d455a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d455e:	e9cd 4200 	strd	r4, r2, [sp]
   d4562:	201e      	movs	r0, #30
   d4564:	aa04      	add	r2, sp, #16
   d4566:	f003 fd7d 	bl	d8064 <log_message_v>
}
   d456a:	b00d      	add	sp, #52	; 0x34
   d456c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4570:	b003      	add	sp, #12
   d4572:	4770      	bx	lr

000d4574 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d4574:	b40e      	push	{r1, r2, r3}
   d4576:	b510      	push	{r4, lr}
   d4578:	b08d      	sub	sp, #52	; 0x34
   d457a:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d457c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d457e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4582:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d4584:	2300      	movs	r3, #0
   d4586:	2020      	movs	r0, #32
   d4588:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d458c:	e9cd 4200 	strd	r4, r2, [sp]
   d4590:	2032      	movs	r0, #50	; 0x32
   d4592:	aa04      	add	r2, sp, #16
   d4594:	f003 fd66 	bl	d8064 <log_message_v>
}
   d4598:	b00d      	add	sp, #52	; 0x34
   d459a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d459e:	b003      	add	sp, #12
   d45a0:	4770      	bx	lr

000d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d45a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d45a4:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d45a6:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d45aa:	f88d 3000 	strb.w	r3, [sp]
   d45ae:	f88d 5004 	strb.w	r5, [sp, #4]
   d45b2:	68e4      	ldr	r4, [r4, #12]
   d45b4:	233c      	movs	r3, #60	; 0x3c
   d45b6:	47a0      	blx	r4
	}
   d45b8:	b003      	add	sp, #12
   d45ba:	bd30      	pop	{r4, r5, pc}

000d45bc <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d45bc:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d45be:	780b      	ldrb	r3, [r1, #0]
   d45c0:	4d1c      	ldr	r5, [pc, #112]	; (d4634 <_Z14UbidotsHandlerPKcS0_+0x78>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d45c2:	b093      	sub	sp, #76	; 0x4c
   d45c4:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d45c6:	b993      	cbnz	r3, d45ee <_Z14UbidotsHandlerPKcS0_+0x32>
    snprintf(responseString, sizeof(responseString),"No Data");
   d45c8:	491b      	ldr	r1, [pc, #108]	; (d4638 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d45ca:	a802      	add	r0, sp, #8
   d45cc:	f007 fddb 	bl	dc186 <strcpy>
  if (sysStatus.verboseMode) publishQueue.publish("Ubidots Hook", responseString, PRIVATE, WITH_ACK);
   d45d0:	792b      	ldrb	r3, [r5, #4]
   d45d2:	b153      	cbz	r3, d45ea <_Z14UbidotsHandlerPKcS0_+0x2e>
inline particle::Flag<TagT, ValueT>::operator ValueT() const {
    return val_;
}

template<typename TagT, typename ValueT>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d45d4:	4b19      	ldr	r3, [pc, #100]	; (d463c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d45d6:	491a      	ldr	r1, [pc, #104]	; (d4640 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d45d8:	781b      	ldrb	r3, [r3, #0]
   d45da:	f88d 3000 	strb.w	r3, [sp]
   d45de:	4b19      	ldr	r3, [pc, #100]	; (d4644 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d45e0:	4819      	ldr	r0, [pc, #100]	; (d4648 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d45e2:	781b      	ldrb	r3, [r3, #0]
   d45e4:	aa02      	add	r2, sp, #8
   d45e6:	f7ff ffdc 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d45ea:	b013      	add	sp, #76	; 0x4c
   d45ec:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d45ee:	4608      	mov	r0, r1
   d45f0:	f007 fd30 	bl	dc054 <atoi>
   d45f4:	28c8      	cmp	r0, #200	; 0xc8
   d45f6:	d10d      	bne.n	d4614 <_Z14UbidotsHandlerPKcS0_+0x58>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d45f8:	4914      	ldr	r1, [pc, #80]	; (d464c <_Z14UbidotsHandlerPKcS0_+0x90>)
   d45fa:	a802      	add	r0, sp, #8
   d45fc:	f007 fdc3 	bl	dc186 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4600:	f006 fd2d 	bl	db05e <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d4604:	4b12      	ldr	r3, [pc, #72]	; (d4650 <_Z14UbidotsHandlerPKcS0_+0x94>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4606:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d4608:	2201      	movs	r2, #1
   d460a:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d460c:	4b11      	ldr	r3, [pc, #68]	; (d4654 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d460e:	2200      	movs	r2, #0
   d4610:	701a      	strb	r2, [r3, #0]
   d4612:	e7dd      	b.n	d45d0 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4614:	4620      	mov	r0, r4
   d4616:	f007 fd1d 	bl	dc054 <atoi>
   d461a:	28c9      	cmp	r0, #201	; 0xc9
   d461c:	d0ec      	beq.n	d45f8 <_Z14UbidotsHandlerPKcS0_+0x3c>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d461e:	4620      	mov	r0, r4
   d4620:	f007 fd18 	bl	dc054 <atoi>
   d4624:	4a0c      	ldr	r2, [pc, #48]	; (d4658 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d4626:	4603      	mov	r3, r0
   d4628:	2140      	movs	r1, #64	; 0x40
   d462a:	a802      	add	r0, sp, #8
   d462c:	f003 fea6 	bl	d837c <snprintf>
   d4630:	e7ce      	b.n	d45d0 <_Z14UbidotsHandlerPKcS0_+0x14>
   d4632:	bf00      	nop
   d4634:	2003e4c0 	.word	0x2003e4c0
   d4638:	000dc3e9 	.word	0x000dc3e9
   d463c:	2003e379 	.word	0x2003e379
   d4640:	000dc420 	.word	0x000dc420
   d4644:	2003e378 	.word	0x2003e378
   d4648:	2003e478 	.word	0x2003e478
   d464c:	000dc3f1 	.word	0x000dc3f1
   d4650:	2003e4f0 	.word	0x2003e4f0
   d4654:	2003e423 	.word	0x2003e423
   d4658:	000dc403 	.word	0x000dc403

000d465c <_Z12hardResetNow6String>:
{
   d465c:	b507      	push	{r0, r1, r2, lr}
   d465e:	490b      	ldr	r1, [pc, #44]	; (d468c <_Z12hardResetNow6String+0x30>)
   d4660:	f006 fa0d 	bl	daa7e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4664:	b170      	cbz	r0, d4684 <_Z12hardResetNow6String+0x28>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4666:	2300      	movs	r3, #0
   d4668:	f88d 3000 	strb.w	r3, [sp]
   d466c:	4b08      	ldr	r3, [pc, #32]	; (d4690 <_Z12hardResetNow6String+0x34>)
   d466e:	4a09      	ldr	r2, [pc, #36]	; (d4694 <_Z12hardResetNow6String+0x38>)
   d4670:	781b      	ldrb	r3, [r3, #0]
   d4672:	4909      	ldr	r1, [pc, #36]	; (d4698 <_Z12hardResetNow6String+0x3c>)
   d4674:	4809      	ldr	r0, [pc, #36]	; (d469c <_Z12hardResetNow6String+0x40>)
   d4676:	f7ff ff94 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    ab1805.deepPowerDown(10);
   d467a:	4809      	ldr	r0, [pc, #36]	; (d46a0 <_Z12hardResetNow6String+0x44>)
   d467c:	210a      	movs	r1, #10
   d467e:	f002 fa51 	bl	d6b24 <_ZN6AB180513deepPowerDownEi>
   d4682:	2001      	movs	r0, #1
}
   d4684:	b003      	add	sp, #12
   d4686:	f85d fb04 	ldr.w	pc, [sp], #4
   d468a:	bf00      	nop
   d468c:	000dc3b4 	.word	0x000dc3b4
   d4690:	2003e378 	.word	0x2003e378
   d4694:	000dc42d 	.word	0x000dc42d
   d4698:	000dc839 	.word	0x000dc839
   d469c:	2003e478 	.word	0x2003e478
   d46a0:	2003e388 	.word	0x2003e388

000d46a4 <_Z14setVerboseMode6String>:
{
   d46a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d46a6:	4919      	ldr	r1, [pc, #100]	; (d470c <_Z14setVerboseMode6String+0x68>)
   d46a8:	4605      	mov	r5, r0
   d46aa:	f006 f9e8 	bl	daa7e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d46ae:	4604      	mov	r4, r0
   d46b0:	b1b0      	cbz	r0, d46e0 <_Z14setVerboseMode6String+0x3c>
    sysStatus.verboseMode = true;
   d46b2:	4b17      	ldr	r3, [pc, #92]	; (d4710 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d46b4:	4a17      	ldr	r2, [pc, #92]	; (d4714 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = true;
   d46b6:	2401      	movs	r4, #1
   d46b8:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d46ba:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d46bc:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d46be:	b913      	cbnz	r3, d46c6 <_Z14setVerboseMode6String+0x22>
    return 1;
   d46c0:	2001      	movs	r0, #1
}
   d46c2:	b003      	add	sp, #12
   d46c4:	bd30      	pop	{r4, r5, pc}
   d46c6:	4b14      	ldr	r3, [pc, #80]	; (d4718 <_Z14setVerboseMode6String+0x74>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d46c8:	4a14      	ldr	r2, [pc, #80]	; (d471c <_Z14setVerboseMode6String+0x78>)
   d46ca:	781b      	ldrb	r3, [r3, #0]
   d46cc:	f88d 3000 	strb.w	r3, [sp]
   d46d0:	4b13      	ldr	r3, [pc, #76]	; (d4720 <_Z14setVerboseMode6String+0x7c>)
   d46d2:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d46d4:	4913      	ldr	r1, [pc, #76]	; (d4724 <_Z14setVerboseMode6String+0x80>)
   d46d6:	4814      	ldr	r0, [pc, #80]	; (d4728 <_Z14setVerboseMode6String+0x84>)
   d46d8:	f7ff ff63 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d46dc:	4620      	mov	r0, r4
   d46de:	e7f0      	b.n	d46c2 <_Z14setVerboseMode6String+0x1e>
   d46e0:	4912      	ldr	r1, [pc, #72]	; (d472c <_Z14setVerboseMode6String+0x88>)
   d46e2:	4628      	mov	r0, r5
   d46e4:	f006 f9cb 	bl	daa7e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d46e8:	2800      	cmp	r0, #0
   d46ea:	d0ea      	beq.n	d46c2 <_Z14setVerboseMode6String+0x1e>
    sysStatus.verboseMode = false;
   d46ec:	4b08      	ldr	r3, [pc, #32]	; (d4710 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d46ee:	4a09      	ldr	r2, [pc, #36]	; (d4714 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = false;
   d46f0:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d46f2:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d46f4:	2401      	movs	r4, #1
   d46f6:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d46f8:	2b00      	cmp	r3, #0
   d46fa:	d0e1      	beq.n	d46c0 <_Z14setVerboseMode6String+0x1c>
   d46fc:	4b06      	ldr	r3, [pc, #24]	; (d4718 <_Z14setVerboseMode6String+0x74>)
   d46fe:	4a0c      	ldr	r2, [pc, #48]	; (d4730 <_Z14setVerboseMode6String+0x8c>)
   d4700:	781b      	ldrb	r3, [r3, #0]
   d4702:	f88d 3000 	strb.w	r3, [sp]
   d4706:	4b06      	ldr	r3, [pc, #24]	; (d4720 <_Z14setVerboseMode6String+0x7c>)
   d4708:	781b      	ldrb	r3, [r3, #0]
   d470a:	e7e3      	b.n	d46d4 <_Z14setVerboseMode6String+0x30>
   d470c:	000dc3b4 	.word	0x000dc3b4
   d4710:	2003e4c0 	.word	0x2003e4c0
   d4714:	2003e4f0 	.word	0x2003e4f0
   d4718:	2003e379 	.word	0x2003e379
   d471c:	000dc445 	.word	0x000dc445
   d4720:	2003e378 	.word	0x2003e378
   d4724:	000dc616 	.word	0x000dc616
   d4728:	2003e478 	.word	0x2003e478
   d472c:	000dc622 	.word	0x000dc622
   d4730:	000dc456 	.word	0x000dc456

000d4734 <_Z11setOpenTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setOpenTime(String command)
   d4734:	b500      	push	{lr}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  makeUpParkHourStrings();                                                    // Create the strings for the console
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (sysStatus.connectedStatus) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4736:	4b0c      	ldr	r3, [pc, #48]	; (d4768 <_Z11setOpenTime6String.part.0+0x34>)
   d4738:	4a0c      	ldr	r2, [pc, #48]	; (d476c <_Z11setOpenTime6String.part.0+0x38>)
   d473a:	7f1b      	ldrb	r3, [r3, #28]
int setOpenTime(String command)
   d473c:	b0c3      	sub	sp, #268	; 0x10c
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d473e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4742:	a802      	add	r0, sp, #8
   d4744:	f003 fe1a 	bl	d837c <snprintf>
   d4748:	4b09      	ldr	r3, [pc, #36]	; (d4770 <_Z11setOpenTime6String.part.0+0x3c>)
    publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d474a:	490a      	ldr	r1, [pc, #40]	; (d4774 <_Z11setOpenTime6String.part.0+0x40>)
   d474c:	781b      	ldrb	r3, [r3, #0]
   d474e:	f88d 3000 	strb.w	r3, [sp]
   d4752:	4b09      	ldr	r3, [pc, #36]	; (d4778 <_Z11setOpenTime6String.part.0+0x44>)
   d4754:	4809      	ldr	r0, [pc, #36]	; (d477c <_Z11setOpenTime6String.part.0+0x48>)
   d4756:	781b      	ldrb	r3, [r3, #0]
   d4758:	aa02      	add	r2, sp, #8
   d475a:	f7ff ff22 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d475e:	2001      	movs	r0, #1
   d4760:	b043      	add	sp, #268	; 0x10c
   d4762:	f85d fb04 	ldr.w	pc, [sp], #4
   d4766:	bf00      	nop
   d4768:	2003e4c0 	.word	0x2003e4c0
   d476c:	000dc46b 	.word	0x000dc46b
   d4770:	2003e379 	.word	0x2003e379
   d4774:	000dc6d7 	.word	0x000dc6d7
   d4778:	2003e378 	.word	0x2003e378
   d477c:	2003e478 	.word	0x2003e478

000d4780 <_Z13setDailyCount6String>:
 * Inputs outside of "0" - "1000" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setDailyCount(String command)
{
   d4780:	b530      	push	{r4, r5, lr}
   d4782:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempCount = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4784:	6800      	ldr	r0, [r0, #0]
   d4786:	220a      	movs	r2, #10
   d4788:	a903      	add	r1, sp, #12
   d478a:	f007 fddd 	bl	dc348 <strtol>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d478e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4792:	d81e      	bhi.n	d47d2 <_Z13setDailyCount6String+0x52>
  current.dailyCount = tempCount;
   d4794:	4d10      	ldr	r5, [pc, #64]	; (d47d8 <_Z13setDailyCount6String+0x58>)
   d4796:	60a8      	str	r0, [r5, #8]
  current.lastCountTime = Time.now();
   d4798:	f006 fc61 	bl	db05e <_ZN9TimeClass3nowEv>
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d479c:	4b0f      	ldr	r3, [pc, #60]	; (d47dc <_Z13setDailyCount6String+0x5c>)
  current.lastCountTime = Time.now();
   d479e:	60e8      	str	r0, [r5, #12]
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d47a0:	2401      	movs	r4, #1
   d47a2:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Daily count set to %i",current.dailyCount);
   d47a4:	4a0e      	ldr	r2, [pc, #56]	; (d47e0 <_Z13setDailyCount6String+0x60>)
   d47a6:	68ab      	ldr	r3, [r5, #8]
   d47a8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d47ac:	a804      	add	r0, sp, #16
   d47ae:	f003 fde5 	bl	d837c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Daily",data, PRIVATE, WITH_ACK);
   d47b2:	4b0c      	ldr	r3, [pc, #48]	; (d47e4 <_Z13setDailyCount6String+0x64>)
   d47b4:	78db      	ldrb	r3, [r3, #3]
   d47b6:	b153      	cbz	r3, d47ce <_Z13setDailyCount6String+0x4e>
   d47b8:	4b0b      	ldr	r3, [pc, #44]	; (d47e8 <_Z13setDailyCount6String+0x68>)
   d47ba:	490c      	ldr	r1, [pc, #48]	; (d47ec <_Z13setDailyCount6String+0x6c>)
   d47bc:	781b      	ldrb	r3, [r3, #0]
   d47be:	f88d 3000 	strb.w	r3, [sp]
   d47c2:	4b0b      	ldr	r3, [pc, #44]	; (d47f0 <_Z13setDailyCount6String+0x70>)
   d47c4:	480b      	ldr	r0, [pc, #44]	; (d47f4 <_Z13setDailyCount6String+0x74>)
   d47c6:	781b      	ldrb	r3, [r3, #0]
   d47c8:	aa04      	add	r2, sp, #16
   d47ca:	f7ff feea 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d47ce:	4620      	mov	r0, r4
   d47d0:	e000      	b.n	d47d4 <_Z13setDailyCount6String+0x54>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d47d2:	2000      	movs	r0, #0
}
   d47d4:	b045      	add	sp, #276	; 0x114
   d47d6:	bd30      	pop	{r4, r5, pc}
   d47d8:	2003e3f4 	.word	0x2003e3f4
   d47dc:	2003e418 	.word	0x2003e418
   d47e0:	000dc47f 	.word	0x000dc47f
   d47e4:	2003e4c0 	.word	0x2003e4c0
   d47e8:	2003e379 	.word	0x2003e379
   d47ec:	000dc495 	.word	0x000dc495
   d47f0:	2003e378 	.word	0x2003e378
   d47f4:	2003e478 	.word	0x2003e478

000d47f8 <_Z14setSensitivity6String>:
 * @param Looking for a sensitivity level from 0 - not sensitive to 10 - very sensitive
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setSensitivity(String command)
{
   d47f8:	b530      	push	{r4, r5, lr}
   d47fa:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempValue = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d47fc:	6800      	ldr	r0, [r0, #0]
   d47fe:	220a      	movs	r2, #10
   d4800:	a903      	add	r1, sp, #12
   d4802:	f007 fda1 	bl	dc348 <strtol>
  if ((tempValue < 0) || (tempValue > 10)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4806:	280a      	cmp	r0, #10
   d4808:	d827      	bhi.n	d485a <_Z14setSensitivity6String+0x62>
  sysStatus.sensitivity = tempValue;
   d480a:	4d15      	ldr	r5, [pc, #84]	; (d4860 <_Z14setSensitivity6String+0x68>)
   d480c:	b2c1      	uxtb	r1, r0
    accel.setupTapInts(sysStatus.sensitivity);                           // Initialize the accelerometer
   d480e:	4815      	ldr	r0, [pc, #84]	; (d4864 <_Z14setSensitivity6String+0x6c>)
  sysStatus.sensitivity = tempValue;
   d4810:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
    accel.setupTapInts(sysStatus.sensitivity);                           // Initialize the accelerometer
   d4814:	f002 fe60 	bl	d74d8 <_ZN8MMA8452Q12setupTapIntsEh>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4818:	4b13      	ldr	r3, [pc, #76]	; (d4868 <_Z14setSensitivity6String+0x70>)
  snprintf(sensitivityStr, sizeof(sensitivityStr), "%i", sysStatus.sensitivity);
   d481a:	4a14      	ldr	r2, [pc, #80]	; (d486c <_Z14setSensitivity6String+0x74>)
   d481c:	4814      	ldr	r0, [pc, #80]	; (d4870 <_Z14setSensitivity6String+0x78>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d481e:	2401      	movs	r4, #1
   d4820:	701c      	strb	r4, [r3, #0]
  snprintf(sensitivityStr, sizeof(sensitivityStr), "%i", sysStatus.sensitivity);
   d4822:	2108      	movs	r1, #8
   d4824:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   d4828:	f003 fda8 	bl	d837c <snprintf>
  snprintf(data, sizeof(data), "Sensitivity set to %i",sysStatus.sensitivity);
   d482c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   d4830:	4a10      	ldr	r2, [pc, #64]	; (d4874 <_Z14setSensitivity6String+0x7c>)
   d4832:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4836:	a804      	add	r0, sp, #16
   d4838:	f003 fda0 	bl	d837c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d483c:	78eb      	ldrb	r3, [r5, #3]
   d483e:	b153      	cbz	r3, d4856 <_Z14setSensitivity6String+0x5e>
   d4840:	4b0d      	ldr	r3, [pc, #52]	; (d4878 <_Z14setSensitivity6String+0x80>)
   d4842:	490e      	ldr	r1, [pc, #56]	; (d487c <_Z14setSensitivity6String+0x84>)
   d4844:	781b      	ldrb	r3, [r3, #0]
   d4846:	f88d 3000 	strb.w	r3, [sp]
   d484a:	4b0d      	ldr	r3, [pc, #52]	; (d4880 <_Z14setSensitivity6String+0x88>)
   d484c:	480d      	ldr	r0, [pc, #52]	; (d4884 <_Z14setSensitivity6String+0x8c>)
   d484e:	781b      	ldrb	r3, [r3, #0]
   d4850:	aa04      	add	r2, sp, #16
   d4852:	f7ff fea6 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d4856:	4620      	mov	r0, r4
   d4858:	e000      	b.n	d485c <_Z14setSensitivity6String+0x64>
  if ((tempValue < 0) || (tempValue > 10)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d485a:	2000      	movs	r0, #0
}
   d485c:	b045      	add	sp, #276	; 0x114
   d485e:	bd30      	pop	{r4, r5, pc}
   d4860:	2003e4c0 	.word	0x2003e4c0
   d4864:	2003e3a8 	.word	0x2003e3a8
   d4868:	2003e4f0 	.word	0x2003e4f0
   d486c:	000dc51c 	.word	0x000dc51c
   d4870:	2003e22c 	.word	0x2003e22c
   d4874:	000dc49b 	.word	0x000dc49b
   d4878:	2003e379 	.word	0x2003e379
   d487c:	000dc6d7 	.word	0x000dc6d7
   d4880:	2003e378 	.word	0x2003e378
   d4884:	2003e478 	.word	0x2003e478

000d4888 <_Z14setDebounceSec6String>:
 * @param Looking for a value from 0 to 60 second.  Sets the system value and changes the period of the stay awake timer
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setDebounceSec(String command)
{
   d4888:	b530      	push	{r4, r5, lr}
   d488a:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempValue = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d488c:	6800      	ldr	r0, [r0, #0]
   d488e:	220a      	movs	r2, #10
   d4890:	a903      	add	r1, sp, #12
   d4892:	f007 fd59 	bl	dc348 <strtol>
  if ((tempValue < 0) || (tempValue > 60)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4896:	283c      	cmp	r0, #60	; 0x3c
   d4898:	d82b      	bhi.n	d48f2 <_Z14setDebounceSec6String+0x6a>
  sysStatus.debounceSec = tempValue;
   d489a:	4d17      	ldr	r5, [pc, #92]	; (d48f8 <_Z14setDebounceSec6String+0x70>)
  countSignalTimer.changePeriod(sysStatus.debounceSec*1000);           // This keeps the device awake during debounce
   d489c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d48a0:	4341      	muls	r1, r0
  sysStatus.debounceSec = tempValue;
   d48a2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
  countSignalTimer.changePeriod(sysStatus.debounceSec*1000);           // This keeps the device awake during debounce
   d48a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d48aa:	4814      	ldr	r0, [pc, #80]	; (d48fc <_Z14setDebounceSec6String+0x74>)
   d48ac:	f7ff fe30 	bl	d4510 <_ZN5Timer12changePeriodEjj>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d48b0:	4b13      	ldr	r3, [pc, #76]	; (d4900 <_Z14setDebounceSec6String+0x78>)
  snprintf(debounceStr, sizeof(debounceStr), "%i sec", sysStatus.debounceSec);
   d48b2:	4a14      	ldr	r2, [pc, #80]	; (d4904 <_Z14setDebounceSec6String+0x7c>)
   d48b4:	4814      	ldr	r0, [pc, #80]	; (d4908 <_Z14setDebounceSec6String+0x80>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d48b6:	2401      	movs	r4, #1
   d48b8:	701c      	strb	r4, [r3, #0]
  snprintf(debounceStr, sizeof(debounceStr), "%i sec", sysStatus.debounceSec);
   d48ba:	2108      	movs	r1, #8
   d48bc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d48c0:	f003 fd5c 	bl	d837c <snprintf>
  snprintf(data, sizeof(data), "Debounce set to %i seconds",sysStatus.debounceSec);
   d48c4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d48c8:	4a10      	ldr	r2, [pc, #64]	; (d490c <_Z14setDebounceSec6String+0x84>)
   d48ca:	f44f 7180 	mov.w	r1, #256	; 0x100
   d48ce:	a804      	add	r0, sp, #16
   d48d0:	f003 fd54 	bl	d837c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d48d4:	78eb      	ldrb	r3, [r5, #3]
   d48d6:	b153      	cbz	r3, d48ee <_Z14setDebounceSec6String+0x66>
   d48d8:	4b0d      	ldr	r3, [pc, #52]	; (d4910 <_Z14setDebounceSec6String+0x88>)
   d48da:	490e      	ldr	r1, [pc, #56]	; (d4914 <_Z14setDebounceSec6String+0x8c>)
   d48dc:	781b      	ldrb	r3, [r3, #0]
   d48de:	f88d 3000 	strb.w	r3, [sp]
   d48e2:	4b0d      	ldr	r3, [pc, #52]	; (d4918 <_Z14setDebounceSec6String+0x90>)
   d48e4:	480d      	ldr	r0, [pc, #52]	; (d491c <_Z14setDebounceSec6String+0x94>)
   d48e6:	781b      	ldrb	r3, [r3, #0]
   d48e8:	aa04      	add	r2, sp, #16
   d48ea:	f7ff fe5a 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d48ee:	4620      	mov	r0, r4
   d48f0:	e000      	b.n	d48f4 <_Z14setDebounceSec6String+0x6c>
  if ((tempValue < 0) || (tempValue > 60)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d48f2:	2000      	movs	r0, #0
}
   d48f4:	b045      	add	sp, #276	; 0x114
   d48f6:	bd30      	pop	{r4, r5, pc}
   d48f8:	2003e4c0 	.word	0x2003e4c0
   d48fc:	2003e3d8 	.word	0x2003e3d8
   d4900:	2003e4f0 	.word	0x2003e4f0
   d4904:	000dc4b1 	.word	0x000dc4b1
   d4908:	2003e216 	.word	0x2003e216
   d490c:	000dc4b8 	.word	0x000dc4b8
   d4910:	2003e379 	.word	0x2003e379
   d4914:	000dc6d7 	.word	0x000dc6d7
   d4918:	2003e378 	.word	0x2003e378
   d491c:	2003e478 	.word	0x2003e478

000d4920 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4920:	b513      	push	{r0, r1, r4, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4922:	4925      	ldr	r1, [pc, #148]	; (d49b8 <_Z15setLowPowerMode6String+0x98>)
   d4924:	4604      	mov	r4, r0
   d4926:	f006 f8aa 	bl	daa7e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d492a:	b320      	cbz	r0, d4976 <_Z15setLowPowerMode6String+0x56>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d492c:	4922      	ldr	r1, [pc, #136]	; (d49b8 <_Z15setLowPowerMode6String+0x98>)
   d492e:	4620      	mov	r0, r4
   d4930:	f006 f8a5 	bl	daa7e <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4934:	bb38      	cbnz	r0, d4986 <_Z15setLowPowerMode6String+0x66>
   d4936:	4921      	ldr	r1, [pc, #132]	; (d49bc <_Z15setLowPowerMode6String+0x9c>)
   d4938:	4620      	mov	r0, r4
   d493a:	f006 f8a0 	bl	daa7e <_ZNK6String6equalsEPKc>
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
    }
    sysStatus.lowPowerMode = true;
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d493e:	2800      	cmp	r0, #0
   d4940:	d036      	beq.n	d49b0 <_Z15setLowPowerMode6String+0x90>
  {
    if (!sysStatus.connectedStatus) {                                      // In case we are not connected, we will do so now.
   d4942:	4c1f      	ldr	r4, [pc, #124]	; (d49c0 <_Z15setLowPowerMode6String+0xa0>)
   d4944:	78e2      	ldrb	r2, [r4, #3]
   d4946:	b912      	cbnz	r2, d494e <_Z15setLowPowerMode6String+0x2e>
      particleConnectionNeeded = true;
   d4948:	4b1e      	ldr	r3, [pc, #120]	; (d49c4 <_Z15setLowPowerMode6String+0xa4>)
   d494a:	2201      	movs	r2, #1
   d494c:	701a      	strb	r2, [r3, #0]
   d494e:	4b1e      	ldr	r3, [pc, #120]	; (d49c8 <_Z15setLowPowerMode6String+0xa8>)
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE, WITH_ACK);
   d4950:	4a1e      	ldr	r2, [pc, #120]	; (d49cc <_Z15setLowPowerMode6String+0xac>)
   d4952:	781b      	ldrb	r3, [r3, #0]
   d4954:	f88d 3000 	strb.w	r3, [sp]
   d4958:	4b1d      	ldr	r3, [pc, #116]	; (d49d0 <_Z15setLowPowerMode6String+0xb0>)
   d495a:	491e      	ldr	r1, [pc, #120]	; (d49d4 <_Z15setLowPowerMode6String+0xb4>)
   d495c:	781b      	ldrb	r3, [r3, #0]
   d495e:	481e      	ldr	r0, [pc, #120]	; (d49d8 <_Z15setLowPowerMode6String+0xb8>)
   d4960:	f7ff fe1f 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4968:	f003 fd5c 	bl	d8424 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d496c:	2300      	movs	r3, #0
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d496e:	491b      	ldr	r1, [pc, #108]	; (d49dc <_Z15setLowPowerMode6String+0xbc>)
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4970:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d4972:	2210      	movs	r2, #16
   d4974:	e019      	b.n	d49aa <_Z15setLowPowerMode6String+0x8a>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4976:	4911      	ldr	r1, [pc, #68]	; (d49bc <_Z15setLowPowerMode6String+0x9c>)
   d4978:	4620      	mov	r0, r4
   d497a:	f006 f880 	bl	daa7e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d497e:	2800      	cmp	r0, #0
   d4980:	d1d4      	bne.n	d492c <_Z15setLowPowerMode6String+0xc>
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d4982:	b002      	add	sp, #8
   d4984:	bd10      	pop	{r4, pc}
    if (sysStatus.connectedStatus) {
   d4986:	4c0e      	ldr	r4, [pc, #56]	; (d49c0 <_Z15setLowPowerMode6String+0xa0>)
   d4988:	78e2      	ldrb	r2, [r4, #3]
   d498a:	b152      	cbz	r2, d49a2 <_Z15setLowPowerMode6String+0x82>
   d498c:	4b0e      	ldr	r3, [pc, #56]	; (d49c8 <_Z15setLowPowerMode6String+0xa8>)
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
   d498e:	4a14      	ldr	r2, [pc, #80]	; (d49e0 <_Z15setLowPowerMode6String+0xc0>)
   d4990:	781b      	ldrb	r3, [r3, #0]
   d4992:	f88d 3000 	strb.w	r3, [sp]
   d4996:	4b0e      	ldr	r3, [pc, #56]	; (d49d0 <_Z15setLowPowerMode6String+0xb0>)
   d4998:	490e      	ldr	r1, [pc, #56]	; (d49d4 <_Z15setLowPowerMode6String+0xb4>)
   d499a:	781b      	ldrb	r3, [r3, #0]
   d499c:	480e      	ldr	r0, [pc, #56]	; (d49d8 <_Z15setLowPowerMode6String+0xb8>)
   d499e:	f7ff fe00 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lowPowerMode = true;
   d49a2:	2301      	movs	r3, #1
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d49a4:	490f      	ldr	r1, [pc, #60]	; (d49e4 <_Z15setLowPowerMode6String+0xc4>)
    sysStatus.lowPowerMode = true;
   d49a6:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d49a8:	2210      	movs	r2, #16
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d49aa:	480f      	ldr	r0, [pc, #60]	; (d49e8 <_Z15setLowPowerMode6String+0xc8>)
   d49ac:	f007 fc2b 	bl	dc206 <strncpy>
  systemStatusWriteNeeded = true;
   d49b0:	4b0e      	ldr	r3, [pc, #56]	; (d49ec <_Z15setLowPowerMode6String+0xcc>)
   d49b2:	2001      	movs	r0, #1
   d49b4:	7018      	strb	r0, [r3, #0]
  return 1;
   d49b6:	e7e4      	b.n	d4982 <_Z15setLowPowerMode6String+0x62>
   d49b8:	000dc3b4 	.word	0x000dc3b4
   d49bc:	000dc622 	.word	0x000dc622
   d49c0:	2003e4c0 	.word	0x2003e4c0
   d49c4:	2003e475 	.word	0x2003e475
   d49c8:	2003e379 	.word	0x2003e379
   d49cc:	000dc4e2 	.word	0x000dc4e2
   d49d0:	2003e378 	.word	0x2003e378
   d49d4:	000dc616 	.word	0x000dc616
   d49d8:	2003e478 	.word	0x2003e478
   d49dc:	000dc4f4 	.word	0x000dc4f4
   d49e0:	000dc4d3 	.word	0x000dc4d3
   d49e4:	000dc4f8 	.word	0x000dc4f8
   d49e8:	2003e464 	.word	0x2003e464
   d49ec:	2003e4f0 	.word	0x2003e4f0

000d49f0 <_Z11recordCountv>:
{
   d49f0:	b570      	push	{r4, r5, r6, lr}
  if (Time.now() - lastTapTime > sysStatus.debounceSec) {
   d49f2:	4c4a      	ldr	r4, [pc, #296]	; (d4b1c <_Z11recordCountv+0x12c>)
   d49f4:	4d4a      	ldr	r5, [pc, #296]	; (d4b20 <_Z11recordCountv+0x130>)
{
   d49f6:	b092      	sub	sp, #72	; 0x48
  if (Time.now() - lastTapTime > sysStatus.debounceSec) {
   d49f8:	f006 fb31 	bl	db05e <_ZN9TimeClass3nowEv>
   d49fc:	6823      	ldr	r3, [r4, #0]
   d49fe:	1ac0      	subs	r0, r0, r3
   d4a00:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d4a04:	4298      	cmp	r0, r3
   d4a06:	d94f      	bls.n	d4aa8 <_Z11recordCountv+0xb8>
    lastTapTime = Time.now();
   d4a08:	f006 fb29 	bl	db05e <_ZN9TimeClass3nowEv>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
   d4a0c:	4b45      	ldr	r3, [pc, #276]	; (d4b24 <_Z11recordCountv+0x134>)
   d4a0e:	6020      	str	r0, [r4, #0]
   d4a10:	6898      	ldr	r0, [r3, #8]
   d4a12:	b140      	cbz	r0, d4a26 <_Z11recordCountv+0x36>
   d4a14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4a18:	2300      	movs	r3, #0
   d4a1a:	e9cd 2300 	strd	r2, r3, [sp]
   d4a1e:	2101      	movs	r1, #1
   d4a20:	461a      	mov	r2, r3
   d4a22:	f003 f8ff 	bl	d7c24 <os_timer_change>
    if (currentMinutePeriod != Time.minute()) {                         // Done counting for the last minute
   d4a26:	4e40      	ldr	r6, [pc, #256]	; (d4b28 <_Z11recordCountv+0x138>)
   d4a28:	7834      	ldrb	r4, [r6, #0]
   d4a2a:	f006 fb35 	bl	db098 <_ZN9TimeClass6minuteEv>
   d4a2e:	4284      	cmp	r4, r0
   d4a30:	4c3e      	ldr	r4, [pc, #248]	; (d4b2c <_Z11recordCountv+0x13c>)
   d4a32:	d004      	beq.n	d4a3e <_Z11recordCountv+0x4e>
      currentMinutePeriod = Time.minute();                              // Reset period
   d4a34:	f006 fb30 	bl	db098 <_ZN9TimeClass6minuteEv>
      current.maxMinValue = 1;                                          // Reset for the new minute
   d4a38:	2301      	movs	r3, #1
      currentMinutePeriod = Time.minute();                              // Reset period
   d4a3a:	7030      	strb	r0, [r6, #0]
      current.maxMinValue = 1;                                          // Reset for the new minute
   d4a3c:	61a3      	str	r3, [r4, #24]
    current.maxMinValue++;
   d4a3e:	69a3      	ldr	r3, [r4, #24]
   d4a40:	3301      	adds	r3, #1
   d4a42:	61a3      	str	r3, [r4, #24]
    current.lastCountTime = Time.now();
   d4a44:	f006 fb0b 	bl	db05e <_ZN9TimeClass3nowEv>
    current.hourlyCount++;                                              // Increment the PersonCount
   d4a48:	6823      	ldr	r3, [r4, #0]
    current.dailyCount++;                                               // Increment the PersonCount
   d4a4a:	68a2      	ldr	r2, [r4, #8]
    current.lastCountTime = Time.now();
   d4a4c:	60e0      	str	r0, [r4, #12]
    current.hourlyCount++;                                              // Increment the PersonCount
   d4a4e:	3301      	adds	r3, #1
    current.dailyCount++;                                               // Increment the PersonCount
   d4a50:	3201      	adds	r2, #1
    current.hourlyCount++;                                              // Increment the PersonCount
   d4a52:	6023      	str	r3, [r4, #0]
    current.dailyCount++;                                               // Increment the PersonCount
   d4a54:	60a2      	str	r2, [r4, #8]
    snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d4a56:	2140      	movs	r1, #64	; 0x40
   d4a58:	9200      	str	r2, [sp, #0]
   d4a5a:	a802      	add	r0, sp, #8
   d4a5c:	4a34      	ldr	r2, [pc, #208]	; (d4b30 <_Z11recordCountv+0x140>)
   d4a5e:	f003 fc8d 	bl	d837c <snprintf>
    if (sysStatus.verboseMode && sysStatus.connectedStatus) publishQueue.publish("Count",data, PRIVATE);                      // Helpful for monitoring and calibration
   d4a62:	792b      	ldrb	r3, [r5, #4]
   d4a64:	b15b      	cbz	r3, d4a7e <_Z11recordCountv+0x8e>
   d4a66:	78eb      	ldrb	r3, [r5, #3]
   d4a68:	b14b      	cbz	r3, d4a7e <_Z11recordCountv+0x8e>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a6a:	2300      	movs	r3, #0
   d4a6c:	f88d 3000 	strb.w	r3, [sp]
   d4a70:	4b30      	ldr	r3, [pc, #192]	; (d4b34 <_Z11recordCountv+0x144>)
   d4a72:	4931      	ldr	r1, [pc, #196]	; (d4b38 <_Z11recordCountv+0x148>)
   d4a74:	781b      	ldrb	r3, [r3, #0]
   d4a76:	4831      	ldr	r0, [pc, #196]	; (d4b3c <_Z11recordCountv+0x14c>)
   d4a78:	aa02      	add	r2, sp, #8
   d4a7a:	f7ff fd92 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    Log.info(data);
   d4a7e:	4830      	ldr	r0, [pc, #192]	; (d4b40 <_Z11recordCountv+0x150>)
   d4a80:	a902      	add	r1, sp, #8
   d4a82:	f7ff fd60 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d4a86:	4b2f      	ldr	r3, [pc, #188]	; (d4b44 <_Z11recordCountv+0x154>)
   d4a88:	2201      	movs	r2, #1
   d4a8a:	701a      	strb	r2, [r3, #0]
  if (sensorDetect) {
   d4a8c:	4c2e      	ldr	r4, [pc, #184]	; (d4b48 <_Z11recordCountv+0x158>)
   d4a8e:	7823      	ldrb	r3, [r4, #0]
   d4a90:	b143      	cbz	r3, d4aa4 <_Z11recordCountv+0xb4>
    accel.clearTapInts();
   d4a92:	482e      	ldr	r0, [pc, #184]	; (d4b4c <_Z11recordCountv+0x15c>)
   d4a94:	f002 fcef 	bl	d7476 <_ZN8MMA8452Q12clearTapIntsEv>
    Log.info("Cleared Interrupt");
   d4a98:	492d      	ldr	r1, [pc, #180]	; (d4b50 <_Z11recordCountv+0x160>)
   d4a9a:	4829      	ldr	r0, [pc, #164]	; (d4b40 <_Z11recordCountv+0x150>)
   d4a9c:	f7ff fd53 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    sensorDetect = false;                                             // Reset the flag
   d4aa0:	2300      	movs	r3, #0
   d4aa2:	7023      	strb	r3, [r4, #0]
}
   d4aa4:	b012      	add	sp, #72	; 0x48
   d4aa6:	bd70      	pop	{r4, r5, r6, pc}
  else if (!countSignalTimer.isActive()) pinResetFast(blueLED);
   d4aa8:	481e      	ldr	r0, [pc, #120]	; (d4b24 <_Z11recordCountv+0x134>)
   d4aaa:	f7ff fd42 	bl	d4532 <_ZNK5Timer8isActiveEv>
   d4aae:	2800      	cmp	r0, #0
   d4ab0:	d1ec      	bne.n	d4a8c <_Z11recordCountv+0x9c>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ab2:	4c28      	ldr	r4, [pc, #160]	; (d4b54 <_Z11recordCountv+0x164>)
   d4ab4:	4d28      	ldr	r5, [pc, #160]	; (d4b58 <_Z11recordCountv+0x168>)
   d4ab6:	7823      	ldrb	r3, [r4, #0]
   d4ab8:	f3bf 8f5b 	dmb	ish
   d4abc:	f013 0f01 	tst.w	r3, #1
   d4ac0:	d109      	bne.n	d4ad6 <_Z11recordCountv+0xe6>
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	f7ff faf8 	bl	d40b8 <__cxa_guard_acquire>
   d4ac8:	b128      	cbz	r0, d4ad6 <_Z11recordCountv+0xe6>
   d4aca:	f003 f953 	bl	d7d74 <HAL_Pin_Map>
   d4ace:	6028      	str	r0, [r5, #0]
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	f7ff faf6 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4ad6:	682b      	ldr	r3, [r5, #0]
   d4ad8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   d4adc:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ade:	7823      	ldrb	r3, [r4, #0]
   d4ae0:	f3bf 8f5b 	dmb	ish
   d4ae4:	07db      	lsls	r3, r3, #31
   d4ae6:	d409      	bmi.n	d4afc <_Z11recordCountv+0x10c>
   d4ae8:	481a      	ldr	r0, [pc, #104]	; (d4b54 <_Z11recordCountv+0x164>)
   d4aea:	f7ff fae5 	bl	d40b8 <__cxa_guard_acquire>
   d4aee:	b128      	cbz	r0, d4afc <_Z11recordCountv+0x10c>
   d4af0:	f003 f940 	bl	d7d74 <HAL_Pin_Map>
   d4af4:	6028      	str	r0, [r5, #0]
   d4af6:	4817      	ldr	r0, [pc, #92]	; (d4b54 <_Z11recordCountv+0x164>)
   d4af8:	f7ff fae3 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4afc:	682b      	ldr	r3, [r5, #0]
   d4afe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d4b02:	f003 031f 	and.w	r3, r3, #31
   d4b06:	4333      	orrs	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4b08:	a802      	add	r0, sp, #8
   d4b0a:	9302      	str	r3, [sp, #8]
   d4b0c:	f7ff fb0a 	bl	d4124 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4b10:	9a02      	ldr	r2, [sp, #8]
   d4b12:	2301      	movs	r3, #1
   d4b14:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4b16:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_gpio_pin_clear(nrf_pin);
}
   d4b1a:	e7b7      	b.n	d4a8c <_Z11recordCountv+0x9c>
   d4b1c:	2003e37c 	.word	0x2003e37c
   d4b20:	2003e4c0 	.word	0x2003e4c0
   d4b24:	2003e3d8 	.word	0x2003e3d8
   d4b28:	2003e380 	.word	0x2003e380
   d4b2c:	2003e3f4 	.word	0x2003e3f4
   d4b30:	000dc502 	.word	0x000dc502
   d4b34:	2003e378 	.word	0x2003e378
   d4b38:	000dc6a0 	.word	0x000dc6a0
   d4b3c:	2003e478 	.word	0x2003e478
   d4b40:	2003e5e0 	.word	0x2003e5e0
   d4b44:	2003e418 	.word	0x2003e418
   d4b48:	2003e4b4 	.word	0x2003e4b4
   d4b4c:	2003e3a8 	.word	0x2003e3a8
   d4b50:	000dc51f 	.word	0x000dc51f
   d4b54:	2003e324 	.word	0x2003e324
   d4b58:	2003e328 	.word	0x2003e328

000d4b5c <_Z9sendEventv>:
void sendEvent() {
   d4b5c:	b510      	push	{r4, lr}
  if (current.hourlyCount) {
   d4b5e:	4c1a      	ldr	r4, [pc, #104]	; (d4bc8 <_Z9sendEventv+0x6c>)
   d4b60:	6823      	ldr	r3, [r4, #0]
void sendEvent() {
   d4b62:	b0ca      	sub	sp, #296	; 0x128
  if (current.hourlyCount) {
   d4b64:	2b00      	cmp	r3, #0
   d4b66:	d02c      	beq.n	d4bc2 <_Z9sendEventv+0x66>
    timeStampValue = current.lastCountTime;                           // If there was an event in the past hour, send the most recent event's timestamp
   d4b68:	68e2      	ldr	r2, [r4, #12]
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,\"key1\":\"%s\",\"temp\":%i, \"resets\":%i, \"alerts\":%i,\"maxmin\":%i,\"connecttime\":%i,\"timestamp\":%lu000}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContext[sysStatus.batteryState], current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue, sysStatus.lastConnectionDuration, timeStampValue);
   d4b6a:	9208      	str	r2, [sp, #32]
   d4b6c:	4a17      	ldr	r2, [pc, #92]	; (d4bcc <_Z9sendEventv+0x70>)
   d4b6e:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   d4b70:	9107      	str	r1, [sp, #28]
   d4b72:	69a1      	ldr	r1, [r4, #24]
   d4b74:	9106      	str	r1, [sp, #24]
   d4b76:	6961      	ldr	r1, [r4, #20]
   d4b78:	9105      	str	r1, [sp, #20]
   d4b7a:	6911      	ldr	r1, [r2, #16]
   d4b7c:	9104      	str	r1, [sp, #16]
   d4b7e:	6921      	ldr	r1, [r4, #16]
   d4b80:	9103      	str	r1, [sp, #12]
   d4b82:	7b10      	ldrb	r0, [r2, #12]
   d4b84:	4912      	ldr	r1, [pc, #72]	; (d4bd0 <_Z9sendEventv+0x74>)
   d4b86:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d4b8a:	9102      	str	r1, [sp, #8]
   d4b8c:	6892      	ldr	r2, [r2, #8]
   d4b8e:	9201      	str	r2, [sp, #4]
   d4b90:	68a2      	ldr	r2, [r4, #8]
   d4b92:	9200      	str	r2, [sp, #0]
   d4b94:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b98:	4a0e      	ldr	r2, [pc, #56]	; (d4bd4 <_Z9sendEventv+0x78>)
   d4b9a:	a80a      	add	r0, sp, #40	; 0x28
   d4b9c:	f003 fbee 	bl	d837c <snprintf>
   d4ba0:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots-Counter-Hook-v1", data, PRIVATE);
   d4ba2:	f88d 3000 	strb.w	r3, [sp]
   d4ba6:	4b0c      	ldr	r3, [pc, #48]	; (d4bd8 <_Z9sendEventv+0x7c>)
   d4ba8:	490c      	ldr	r1, [pc, #48]	; (d4bdc <_Z9sendEventv+0x80>)
   d4baa:	781b      	ldrb	r3, [r3, #0]
   d4bac:	480c      	ldr	r0, [pc, #48]	; (d4be0 <_Z9sendEventv+0x84>)
   d4bae:	aa0a      	add	r2, sp, #40	; 0x28
   d4bb0:	f7ff fcf7 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4bb4:	4b0b      	ldr	r3, [pc, #44]	; (d4be4 <_Z9sendEventv+0x88>)
   d4bb6:	2201      	movs	r2, #1
   d4bb8:	701a      	strb	r2, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d4bba:	6823      	ldr	r3, [r4, #0]
   d4bbc:	6063      	str	r3, [r4, #4]
}
   d4bbe:	b04a      	add	sp, #296	; 0x128
   d4bc0:	bd10      	pop	{r4, pc}
    timeStampValue = lastReportedTime;                                // This should be the beginning of the previous hour
   d4bc2:	4a09      	ldr	r2, [pc, #36]	; (d4be8 <_Z9sendEventv+0x8c>)
   d4bc4:	6812      	ldr	r2, [r2, #0]
   d4bc6:	e7d0      	b.n	d4b6a <_Z9sendEventv+0xe>
   d4bc8:	2003e3f4 	.word	0x2003e3f4
   d4bcc:	2003e4c0 	.word	0x2003e4c0
   d4bd0:	2003e1e8 	.word	0x2003e1e8
   d4bd4:	000dc531 	.word	0x000dc531
   d4bd8:	2003e378 	.word	0x2003e378
   d4bdc:	000dc5b8 	.word	0x000dc5b8
   d4be0:	2003e478 	.word	0x2003e478
   d4be4:	2003e423 	.word	0x2003e423
   d4be8:	2003e43c 	.word	0x2003e43c

000d4bec <_Z16isItSafeToChargev>:
{         
   d4bec:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);                                 
   d4bee:	2101      	movs	r1, #1
   d4bf0:	a801      	add	r0, sp, #4
   d4bf2:	f005 fd56 	bl	da6a2 <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4bf6:	4b0b      	ldr	r3, [pc, #44]	; (d4c24 <_Z16isItSafeToChargev+0x38>)
   d4bf8:	691b      	ldr	r3, [r3, #16]
   d4bfa:	3b24      	subs	r3, #36	; 0x24
   d4bfc:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4bfe:	a801      	add	r0, sp, #4
   d4c00:	f04f 0401 	mov.w	r4, #1
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4c04:	d90a      	bls.n	d4c1c <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4c06:	f005 fddf 	bl	da7c8 <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d4c0a:	4b07      	ldr	r3, [pc, #28]	; (d4c28 <_Z16isItSafeToChargev+0x3c>)
   d4c0c:	731c      	strb	r4, [r3, #12]
    return false;
   d4c0e:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d4c10:	a801      	add	r0, sp, #4
   d4c12:	f005 fd55 	bl	da6c0 <_ZN4PMICD1Ev>
}
   d4c16:	4620      	mov	r0, r4
   d4c18:	b002      	add	sp, #8
   d4c1a:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                                            // It is safe to charge the battery
   d4c1c:	f005 fdbd 	bl	da79a <_ZN4PMIC14enableChargingEv>
    return true;
   d4c20:	e7f6      	b.n	d4c10 <_Z16isItSafeToChargev+0x24>
   d4c22:	bf00      	nop
   d4c24:	2003e3f4 	.word	0x2003e3f4
   d4c28:	2003e4c0 	.word	0x2003e4c0

000d4c2c <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d4c2c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4c2e:	4d19      	ldr	r5, [pc, #100]	; (d4c94 <_Z17getSignalStrengthv+0x68>)
   d4c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4c32:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4c34:	ac04      	add	r4, sp, #16
   d4c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c3c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4c40:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4c44:	4914      	ldr	r1, [pc, #80]	; (d4c98 <_Z17getSignalStrengthv+0x6c>)
   d4c46:	a80e      	add	r0, sp, #56	; 0x38
   d4c48:	f003 fc70 	bl	d852c <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4c4c:	a80e      	add	r0, sp, #56	; 0x38
   d4c4e:	f003 fcc0 	bl	d85d2 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4c52:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4c54:	a80e      	add	r0, sp, #56	; 0x38
   d4c56:	f003 fcc5 	bl	d85e4 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d4c5a:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4c5c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4c60:	f003 fcf0 	bl	d8644 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4c64:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d4c66:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4c6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4c6e:	f006 fe95 	bl	db99c <__aeabi_f2d>
   d4c72:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4c76:	4628      	mov	r0, r5
   d4c78:	f006 fe90 	bl	db99c <__aeabi_f2d>
   d4c7c:	e9cd 0100 	strd	r0, r1, [sp]
   d4c80:	4a06      	ldr	r2, [pc, #24]	; (d4c9c <_Z17getSignalStrengthv+0x70>)
   d4c82:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4c86:	4806      	ldr	r0, [pc, #24]	; (d4ca0 <_Z17getSignalStrengthv+0x74>)
   d4c88:	2140      	movs	r1, #64	; 0x40
   d4c8a:	f003 fb77 	bl	d837c <snprintf>
}
   d4c8e:	b019      	add	sp, #100	; 0x64
   d4c90:	bd30      	pop	{r4, r5, pc}
   d4c92:	bf00      	nop
   d4c94:	000dc910 	.word	0x000dc910
   d4c98:	2003e50c 	.word	0x2003e50c
   d4c9c:	000dc5d0 	.word	0x000dc5d0
   d4ca0:	2003e32c 	.word	0x2003e32c
   d4ca4:	00000000 	.word	0x00000000

000d4ca8 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d4ca8:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d4caa:	200f      	movs	r0, #15
   d4cac:	f006 fc6d 	bl	db58a <analogRead>
  if (reading < 400) {                                                // This ocrresponds to 0 degrees - less than this and we should take another reading to be sure
   d4cb0:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d4cb4:	da05      	bge.n	d4cc2 <_Z14getTemperaturev+0x1a>
    delay(50);
   d4cb6:	2032      	movs	r0, #50	; 0x32
   d4cb8:	f003 fbb4 	bl	d8424 <delay>
    reading = analogRead(tmp36Pin);
   d4cbc:	200f      	movs	r0, #15
   d4cbe:	f006 fc64 	bl	db58a <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4cc2:	f006 fe59 	bl	db978 <__aeabi_i2d>
   d4cc6:	a320      	add	r3, pc, #128	; (adr r3, d4d48 <_Z14getTemperaturev+0xa0>)
   d4cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ccc:	f006 febe 	bl	dba4c <__aeabi_dmul>
   d4cd0:	f007 f916 	bl	dbf00 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4cd4:	eddf 7a14 	vldr	s15, [pc, #80]	; d4d28 <_Z14getTemperaturev+0x80>
   d4cd8:	ee07 0a10 	vmov	s14, r0
   d4cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4ce0:	ee17 0a90 	vmov	r0, s15
   d4ce4:	f006 fe5a 	bl	db99c <__aeabi_f2d>
   d4ce8:	4b10      	ldr	r3, [pc, #64]	; (d4d2c <_Z14getTemperaturev+0x84>)
   d4cea:	2200      	movs	r2, #0
   d4cec:	f006 fcf6 	bl	db6dc <__aeabi_dsub>
   d4cf0:	4b0f      	ldr	r3, [pc, #60]	; (d4d30 <_Z14getTemperaturev+0x88>)
   d4cf2:	2200      	movs	r2, #0
   d4cf4:	f006 feaa 	bl	dba4c <__aeabi_dmul>
   d4cf8:	f007 f8ba 	bl	dbe70 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d4cfc:	f006 fe3c 	bl	db978 <__aeabi_i2d>
   d4d00:	4b0c      	ldr	r3, [pc, #48]	; (d4d34 <_Z14getTemperaturev+0x8c>)
   d4d02:	2200      	movs	r2, #0
   d4d04:	f006 fea2 	bl	dba4c <__aeabi_dmul>
   d4d08:	4b0b      	ldr	r3, [pc, #44]	; (d4d38 <_Z14getTemperaturev+0x90>)
   d4d0a:	2200      	movs	r2, #0
   d4d0c:	f006 ffc8 	bl	dbca0 <__aeabi_ddiv>
   d4d10:	4b0a      	ldr	r3, [pc, #40]	; (d4d3c <_Z14getTemperaturev+0x94>)
   d4d12:	2200      	movs	r2, #0
   d4d14:	f006 fce4 	bl	db6e0 <__adddf3>
   d4d18:	f007 f8aa 	bl	dbe70 <__aeabi_d2iz>
   d4d1c:	4b08      	ldr	r3, [pc, #32]	; (d4d40 <_Z14getTemperaturev+0x98>)
   d4d1e:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d4d20:	4b08      	ldr	r3, [pc, #32]	; (d4d44 <_Z14getTemperaturev+0x9c>)
   d4d22:	2201      	movs	r2, #1
   d4d24:	701a      	strb	r2, [r3, #0]
}
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	39800000 	.word	0x39800000
   d4d2c:	3fe00000 	.word	0x3fe00000
   d4d30:	40590000 	.word	0x40590000
   d4d34:	40220000 	.word	0x40220000
   d4d38:	40140000 	.word	0x40140000
   d4d3c:	40400000 	.word	0x40400000
   d4d40:	2003e3f4 	.word	0x2003e3f4
   d4d44:	2003e418 	.word	0x2003e418
   d4d48:	66666666 	.word	0x66666666
   d4d4c:	400a6666 	.word	0x400a6666

000d4d50 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d4d50:	b500      	push	{lr}
   d4d52:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d4d54:	4668      	mov	r0, sp
   d4d56:	f7ff fb69 	bl	d442c <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d4d5a:	a808      	add	r0, sp, #32
   d4d5c:	f7ff fb66 	bl	d442c <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4d60:	2100      	movs	r1, #0
   d4d62:	a808      	add	r0, sp, #32
   d4d64:	f003 f9fc 	bl	d8160 <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d4d68:	4b13      	ldr	r3, [pc, #76]	; (d4db8 <_Z14setPowerConfigv+0x68>)
   d4d6a:	7959      	ldrb	r1, [r3, #5]
   d4d6c:	b1a1      	cbz	r1, d4d98 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4d6e:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4d72:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4d76:	4b11      	ldr	r3, [pc, #68]	; (d4dbc <_Z14setPowerConfigv+0x6c>)
   d4d78:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4d7a:	f241 0370 	movw	r3, #4208	; 0x1070
   d4d7e:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4d82:	9b00      	ldr	r3, [sp, #0]
   d4d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4d88:	9300      	str	r3, [sp, #0]
   d4d8a:	2100      	movs	r1, #0
   d4d8c:	4668      	mov	r0, sp
   d4d8e:	f003 f9e7 	bl	d8160 <system_power_management_set_config>
}
   d4d92:	b011      	add	sp, #68	; 0x44
   d4d94:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d4d98:	f241 0370 	movw	r3, #4208	; 0x1070
   d4d9c:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4da0:	4b07      	ldr	r3, [pc, #28]	; (d4dc0 <_Z14setPowerConfigv+0x70>)
   d4da2:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4da4:	f241 0310 	movw	r3, #4112	; 0x1010
   d4da8:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d4dac:	9b00      	ldr	r3, [sp, #0]
   d4dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4db2:	9300      	str	r3, [sp, #0]
   d4db4:	e7ea      	b.n	d4d8c <_Z14setPowerConfigv+0x3c>
   d4db6:	bf00      	nop
   d4db8:	2003e4c0 	.word	0x2003e4c0
   d4dbc:	04000384 	.word	0x04000384
   d4dc0:	03840384 	.word	0x03840384

000d4dc4 <_Z12setSolarMode6String>:
{
   d4dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4dc6:	491b      	ldr	r1, [pc, #108]	; (d4e34 <_Z12setSolarMode6String+0x70>)
   d4dc8:	4605      	mov	r5, r0
   d4dca:	f005 fe58 	bl	daa7e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4dce:	4604      	mov	r4, r0
   d4dd0:	b1c0      	cbz	r0, d4e04 <_Z12setSolarMode6String+0x40>
    sysStatus.solarPowerMode = true;
   d4dd2:	4d19      	ldr	r5, [pc, #100]	; (d4e38 <_Z12setSolarMode6String+0x74>)
   d4dd4:	2401      	movs	r4, #1
   d4dd6:	716c      	strb	r4, [r5, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4dd8:	f7ff ffba 	bl	d4d50 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4ddc:	4b17      	ldr	r3, [pc, #92]	; (d4e3c <_Z12setSolarMode6String+0x78>)
   d4dde:	701c      	strb	r4, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4de0:	78eb      	ldrb	r3, [r5, #3]
   d4de2:	b913      	cbnz	r3, d4dea <_Z12setSolarMode6String+0x26>
    return 1;
   d4de4:	2001      	movs	r0, #1
}
   d4de6:	b003      	add	sp, #12
   d4de8:	bd30      	pop	{r4, r5, pc}
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d4dea:	4b15      	ldr	r3, [pc, #84]	; (d4e40 <_Z12setSolarMode6String+0x7c>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4dec:	4a15      	ldr	r2, [pc, #84]	; (d4e44 <_Z12setSolarMode6String+0x80>)
   d4dee:	781b      	ldrb	r3, [r3, #0]
   d4df0:	f88d 3000 	strb.w	r3, [sp]
   d4df4:	4b14      	ldr	r3, [pc, #80]	; (d4e48 <_Z12setSolarMode6String+0x84>)
   d4df6:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4df8:	4914      	ldr	r1, [pc, #80]	; (d4e4c <_Z12setSolarMode6String+0x88>)
   d4dfa:	4815      	ldr	r0, [pc, #84]	; (d4e50 <_Z12setSolarMode6String+0x8c>)
   d4dfc:	f7ff fbd1 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4e00:	4620      	mov	r0, r4
   d4e02:	e7f0      	b.n	d4de6 <_Z12setSolarMode6String+0x22>
   d4e04:	4913      	ldr	r1, [pc, #76]	; (d4e54 <_Z12setSolarMode6String+0x90>)
   d4e06:	4628      	mov	r0, r5
   d4e08:	f005 fe39 	bl	daa7e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4e0c:	2800      	cmp	r0, #0
   d4e0e:	d0ea      	beq.n	d4de6 <_Z12setSolarMode6String+0x22>
    sysStatus.solarPowerMode = false;
   d4e10:	4d09      	ldr	r5, [pc, #36]	; (d4e38 <_Z12setSolarMode6String+0x74>)
    systemStatusWriteNeeded=true;
   d4e12:	4b0a      	ldr	r3, [pc, #40]	; (d4e3c <_Z12setSolarMode6String+0x78>)
    sysStatus.solarPowerMode = false;
   d4e14:	716c      	strb	r4, [r5, #5]
    systemStatusWriteNeeded=true;
   d4e16:	2401      	movs	r4, #1
   d4e18:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4e1a:	f7ff ff99 	bl	d4d50 <_Z14setPowerConfigv>
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4e1e:	78eb      	ldrb	r3, [r5, #3]
   d4e20:	2b00      	cmp	r3, #0
   d4e22:	d0df      	beq.n	d4de4 <_Z12setSolarMode6String+0x20>
   d4e24:	4b06      	ldr	r3, [pc, #24]	; (d4e40 <_Z12setSolarMode6String+0x7c>)
   d4e26:	4a0c      	ldr	r2, [pc, #48]	; (d4e58 <_Z12setSolarMode6String+0x94>)
   d4e28:	781b      	ldrb	r3, [r3, #0]
   d4e2a:	f88d 3000 	strb.w	r3, [sp]
   d4e2e:	4b06      	ldr	r3, [pc, #24]	; (d4e48 <_Z12setSolarMode6String+0x84>)
   d4e30:	781b      	ldrb	r3, [r3, #0]
   d4e32:	e7e1      	b.n	d4df8 <_Z12setSolarMode6String+0x34>
   d4e34:	000dc3b4 	.word	0x000dc3b4
   d4e38:	2003e4c0 	.word	0x2003e4c0
   d4e3c:	2003e4f0 	.word	0x2003e4f0
   d4e40:	2003e379 	.word	0x2003e379
   d4e44:	000dc5e9 	.word	0x000dc5e9
   d4e48:	2003e378 	.word	0x2003e378
   d4e4c:	000dc616 	.word	0x000dc616
   d4e50:	2003e478 	.word	0x2003e478
   d4e54:	000dc622 	.word	0x000dc622
   d4e58:	000dc600 	.word	0x000dc600

000d4e5c <_Z17checkSystemValuesv>:
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e5c:	4b24      	ldr	r3, [pc, #144]	; (d4ef0 <_Z17checkSystemValuesv+0x94>)
   d4e5e:	691a      	ldr	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e60:	edd3 7a05 	vldr	s15, [r3, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e64:	2aff      	cmp	r2, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e66:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e6a:	bf88      	it	hi
   d4e6c:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e72:	bf88      	it	hi
   d4e74:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e7a:	d406      	bmi.n	d4e8a <_Z17checkSystemValuesv+0x2e>
   d4e7c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4e80:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e88:	dd01      	ble.n	d4e8e <_Z17checkSystemValuesv+0x32>
   d4e8a:	4a1a      	ldr	r2, [pc, #104]	; (d4ef4 <_Z17checkSystemValuesv+0x98>)
   d4e8c:	615a      	str	r2, [r3, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4e8e:	edd3 7a06 	vldr	s15, [r3, #24]
   d4e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e9a:	d406      	bmi.n	d4eaa <_Z17checkSystemValuesv+0x4e>
   d4e9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ea8:	dd02      	ble.n	d4eb0 <_Z17checkSystemValuesv+0x54>
   d4eaa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d4eae:	619a      	str	r2, [r3, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d4eb0:	7f1a      	ldrb	r2, [r3, #28]
   d4eb2:	2a0c      	cmp	r2, #12
   d4eb4:	bf84      	itt	hi
   d4eb6:	2200      	movhi	r2, #0
   d4eb8:	771a      	strbhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4eba:	7f5a      	ldrb	r2, [r3, #29]
   d4ebc:	3a0c      	subs	r2, #12
   d4ebe:	2a0c      	cmp	r2, #12
   d4ec0:	bf84      	itt	hi
   d4ec2:	2218      	movhi	r2, #24
   d4ec4:	775a      	strbhi	r2, [r3, #29]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4ec6:	4a0c      	ldr	r2, [pc, #48]	; (d4ef8 <_Z17checkSystemValuesv+0x9c>)
   d4ec8:	6811      	ldr	r1, [r2, #0]
   d4eca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   d4ecc:	428a      	cmp	r2, r1
   d4ece:	bf84      	itt	hi
   d4ed0:	2200      	movhi	r2, #0
   d4ed2:	851a      	strhhi	r2, [r3, #40]	; 0x28
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4ed4:	2201      	movs	r2, #1
   d4ed6:	715a      	strb	r2, [r3, #5]
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4ed8:	4b08      	ldr	r3, [pc, #32]	; (d4efc <_Z17checkSystemValuesv+0xa0>)
   d4eda:	8b98      	ldrh	r0, [r3, #28]
   d4edc:	4281      	cmp	r1, r0
    current.maxConnectTime = 0;
   d4ede:	bf3f      	itttt	cc
   d4ee0:	2100      	movcc	r1, #0
   d4ee2:	8399      	strhcc	r1, [r3, #28]
    currentCountsWriteNeeded = true;
   d4ee4:	4b06      	ldrcc	r3, [pc, #24]	; (d4f00 <_Z17checkSystemValuesv+0xa4>)
   d4ee6:	701a      	strbcc	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   d4ee8:	4b06      	ldr	r3, [pc, #24]	; (d4f04 <_Z17checkSystemValuesv+0xa8>)
   d4eea:	2201      	movs	r2, #1
   d4eec:	701a      	strb	r2, [r3, #0]
}
   d4eee:	4770      	bx	lr
   d4ef0:	2003e4c0 	.word	0x2003e4c0
   d4ef4:	c0a00000 	.word	0xc0a00000
   d4ef8:	2003e20c 	.word	0x2003e20c
   d4efc:	2003e3f4 	.word	0x2003e3f4
   d4f00:	2003e418 	.word	0x2003e418
   d4f04:	2003e4f0 	.word	0x2003e4f0

000d4f08 <_Z21makeUpParkHourStringsv>:
void makeUpParkHourStrings() {
   d4f08:	b510      	push	{r4, lr}
  if (sysStatus.openTime == 0 && sysStatus.closeTime == 24) {
   d4f0a:	4c15      	ldr	r4, [pc, #84]	; (d4f60 <_Z21makeUpParkHourStringsv+0x58>)
   d4f0c:	8ba3      	ldrh	r3, [r4, #28]
   d4f0e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4f12:	d109      	bne.n	d4f28 <_Z21makeUpParkHourStringsv+0x20>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   d4f14:	4913      	ldr	r1, [pc, #76]	; (d4f64 <_Z21makeUpParkHourStringsv+0x5c>)
   d4f16:	4814      	ldr	r0, [pc, #80]	; (d4f68 <_Z21makeUpParkHourStringsv+0x60>)
   d4f18:	f007 f935 	bl	dc186 <strcpy>
}
   d4f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   d4f20:	4910      	ldr	r1, [pc, #64]	; (d4f64 <_Z21makeUpParkHourStringsv+0x5c>)
   d4f22:	4812      	ldr	r0, [pc, #72]	; (d4f6c <_Z21makeUpParkHourStringsv+0x64>)
   d4f24:	f007 b92f 	b.w	dc186 <strcpy>
  snprintf(sensitivityStr, sizeof(sensitivityStr), "%i", sysStatus.sensitivity);
   d4f28:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   d4f2c:	4a10      	ldr	r2, [pc, #64]	; (d4f70 <_Z21makeUpParkHourStringsv+0x68>)
   d4f2e:	4811      	ldr	r0, [pc, #68]	; (d4f74 <_Z21makeUpParkHourStringsv+0x6c>)
   d4f30:	2108      	movs	r1, #8
   d4f32:	f003 fa23 	bl	d837c <snprintf>
  snprintf(debounceStr, sizeof(debounceStr), "%i sec", sysStatus.debounceSec);
   d4f36:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4f3a:	4a0f      	ldr	r2, [pc, #60]	; (d4f78 <_Z21makeUpParkHourStringsv+0x70>)
   d4f3c:	480f      	ldr	r0, [pc, #60]	; (d4f7c <_Z21makeUpParkHourStringsv+0x74>)
   d4f3e:	2108      	movs	r1, #8
   d4f40:	f003 fa1c 	bl	d837c <snprintf>
  snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.openTime);
   d4f44:	7f23      	ldrb	r3, [r4, #28]
   d4f46:	4a0e      	ldr	r2, [pc, #56]	; (d4f80 <_Z21makeUpParkHourStringsv+0x78>)
   d4f48:	4807      	ldr	r0, [pc, #28]	; (d4f68 <_Z21makeUpParkHourStringsv+0x60>)
   d4f4a:	2108      	movs	r1, #8
   d4f4c:	f003 fa16 	bl	d837c <snprintf>
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4f50:	7f63      	ldrb	r3, [r4, #29]
   d4f52:	4a0b      	ldr	r2, [pc, #44]	; (d4f80 <_Z21makeUpParkHourStringsv+0x78>)
   d4f54:	4805      	ldr	r0, [pc, #20]	; (d4f6c <_Z21makeUpParkHourStringsv+0x64>)
}
   d4f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4f5a:	2108      	movs	r1, #8
   d4f5c:	f003 ba0e 	b.w	d837c <snprintf>
   d4f60:	2003e4c0 	.word	0x2003e4c0
   d4f64:	000dc61b 	.word	0x000dc61b
   d4f68:	2003e21e 	.word	0x2003e21e
   d4f6c:	2003e204 	.word	0x2003e204
   d4f70:	000dc51c 	.word	0x000dc51c
   d4f74:	2003e22c 	.word	0x2003e22c
   d4f78:	000dc4b1 	.word	0x000dc4b1
   d4f7c:	2003e216 	.word	0x2003e216
   d4f80:	000dc61e 	.word	0x000dc61e

000d4f84 <_Z11setOpenTime6String>:
{
   d4f84:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4f86:	220a      	movs	r2, #10
   d4f88:	6800      	ldr	r0, [r0, #0]
   d4f8a:	a901      	add	r1, sp, #4
   d4f8c:	f007 f9dc 	bl	dc348 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4f90:	2817      	cmp	r0, #23
   d4f92:	d80c      	bhi.n	d4fae <_Z11setOpenTime6String+0x2a>
  sysStatus.openTime = tempTime;
   d4f94:	4c07      	ldr	r4, [pc, #28]	; (d4fb4 <_Z11setOpenTime6String+0x30>)
   d4f96:	7720      	strb	r0, [r4, #28]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4f98:	f7ff ffb6 	bl	d4f08 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4f9c:	4b06      	ldr	r3, [pc, #24]	; (d4fb8 <_Z11setOpenTime6String+0x34>)
   d4f9e:	2001      	movs	r0, #1
   d4fa0:	7018      	strb	r0, [r3, #0]
  if (sysStatus.connectedStatus) {
   d4fa2:	78e3      	ldrb	r3, [r4, #3]
   d4fa4:	b10b      	cbz	r3, d4faa <_Z11setOpenTime6String+0x26>
   d4fa6:	f7ff fbc5 	bl	d4734 <_Z11setOpenTime6String.part.0>
}
   d4faa:	b002      	add	sp, #8
   d4fac:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4fae:	2000      	movs	r0, #0
   d4fb0:	e7fb      	b.n	d4faa <_Z11setOpenTime6String+0x26>
   d4fb2:	bf00      	nop
   d4fb4:	2003e4c0 	.word	0x2003e4c0
   d4fb8:	2003e4f0 	.word	0x2003e4f0

000d4fbc <_Z12setCloseTime6String>:
{
   d4fbc:	b530      	push	{r4, r5, lr}
   d4fbe:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4fc0:	6800      	ldr	r0, [r0, #0]
   d4fc2:	220a      	movs	r2, #10
   d4fc4:	a903      	add	r1, sp, #12
   d4fc6:	f007 f9bf 	bl	dc348 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4fca:	2818      	cmp	r0, #24
   d4fcc:	d81c      	bhi.n	d5008 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
   d4fce:	4d10      	ldr	r5, [pc, #64]	; (d5010 <_Z12setCloseTime6String+0x54>)
   d4fd0:	7768      	strb	r0, [r5, #29]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4fd2:	f7ff ff99 	bl	d4f08 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4fd6:	4b0f      	ldr	r3, [pc, #60]	; (d5014 <_Z12setCloseTime6String+0x58>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4fd8:	4a0f      	ldr	r2, [pc, #60]	; (d5018 <_Z12setCloseTime6String+0x5c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4fda:	2401      	movs	r4, #1
   d4fdc:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4fde:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4fe2:	7f6b      	ldrb	r3, [r5, #29]
   d4fe4:	a804      	add	r0, sp, #16
   d4fe6:	f003 f9c9 	bl	d837c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4fea:	78eb      	ldrb	r3, [r5, #3]
   d4fec:	b153      	cbz	r3, d5004 <_Z12setCloseTime6String+0x48>
   d4fee:	4b0b      	ldr	r3, [pc, #44]	; (d501c <_Z12setCloseTime6String+0x60>)
   d4ff0:	490b      	ldr	r1, [pc, #44]	; (d5020 <_Z12setCloseTime6String+0x64>)
   d4ff2:	781b      	ldrb	r3, [r3, #0]
   d4ff4:	f88d 3000 	strb.w	r3, [sp]
   d4ff8:	4b0a      	ldr	r3, [pc, #40]	; (d5024 <_Z12setCloseTime6String+0x68>)
   d4ffa:	480b      	ldr	r0, [pc, #44]	; (d5028 <_Z12setCloseTime6String+0x6c>)
   d4ffc:	781b      	ldrb	r3, [r3, #0]
   d4ffe:	aa04      	add	r2, sp, #16
   d5000:	f7ff facf 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d5004:	4620      	mov	r0, r4
   d5006:	e000      	b.n	d500a <_Z12setCloseTime6String+0x4e>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d5008:	2000      	movs	r0, #0
}
   d500a:	b045      	add	sp, #276	; 0x114
   d500c:	bd30      	pop	{r4, r5, pc}
   d500e:	bf00      	nop
   d5010:	2003e4c0 	.word	0x2003e4c0
   d5014:	2003e4f0 	.word	0x2003e4f0
   d5018:	000dc624 	.word	0x000dc624
   d501c:	2003e379 	.word	0x2003e379
   d5020:	000dc6d7 	.word	0x000dc6d7
   d5024:	2003e378 	.word	0x2003e378
   d5028:	2003e478 	.word	0x2003e478

000d502c <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d502c:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d502e:	4c0a      	ldr	r4, [pc, #40]	; (d5058 <_Z15resetEverythingv+0x2c>)
   d5030:	2500      	movs	r5, #0
  current.hourlyCountInFlight = 0;
   d5032:	e9c4 5500 	strd	r5, r5, [r4]
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d5036:	60a5      	str	r5, [r4, #8]
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d5038:	f006 f811 	bl	db05e <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d503c:	4b07      	ldr	r3, [pc, #28]	; (d505c <_Z15resetEverythingv+0x30>)
  currentCountsWriteNeeded = true;
   d503e:	4a08      	ldr	r2, [pc, #32]	; (d5060 <_Z15resetEverythingv+0x34>)
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5040:	611d      	str	r5, [r3, #16]
  current.minBatteryLevel = 100;
   d5042:	2364      	movs	r3, #100	; 0x64
   d5044:	6223      	str	r3, [r4, #32]
  currentCountsWriteNeeded = true;
   d5046:	2301      	movs	r3, #1
   d5048:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d504a:	4a06      	ldr	r2, [pc, #24]	; (d5064 <_Z15resetEverythingv+0x38>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d504c:	60e0      	str	r0, [r4, #12]
  systemStatusWriteNeeded=true;
   d504e:	7013      	strb	r3, [r2, #0]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5050:	6165      	str	r5, [r4, #20]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d5052:	83a5      	strh	r5, [r4, #28]
}
   d5054:	bd38      	pop	{r3, r4, r5, pc}
   d5056:	bf00      	nop
   d5058:	2003e3f4 	.word	0x2003e3f4
   d505c:	2003e4c0 	.word	0x2003e4c0
   d5060:	2003e418 	.word	0x2003e418
   d5064:	2003e4f0 	.word	0x2003e4f0

000d5068 <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition to the Log Handler and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d5068:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d506a:	4d14      	ldr	r5, [pc, #80]	; (d50bc <_Z22publishStateTransitionv+0x54>)
   d506c:	4c14      	ldr	r4, [pc, #80]	; (d50c0 <_Z22publishStateTransitionv+0x58>)
   d506e:	4915      	ldr	r1, [pc, #84]	; (d50c4 <_Z22publishStateTransitionv+0x5c>)
   d5070:	782a      	ldrb	r2, [r5, #0]
   d5072:	7820      	ldrb	r0, [r4, #0]
{
   d5074:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d5076:	230e      	movs	r3, #14
   d5078:	fb03 1202 	mla	r2, r3, r2, r1
   d507c:	9200      	str	r2, [sp, #0]
   d507e:	fb03 1300 	mla	r3, r3, r0, r1
   d5082:	4a11      	ldr	r2, [pc, #68]	; (d50c8 <_Z22publishStateTransitionv+0x60>)
   d5084:	2128      	movs	r1, #40	; 0x28
   d5086:	a802      	add	r0, sp, #8
   d5088:	f003 f978 	bl	d837c <snprintf>
  oldState = state;
   d508c:	782b      	ldrb	r3, [r5, #0]
   d508e:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode && sysStatus.connectedStatus) publishQueue.publish("State Transition",stateTransitionString, PRIVATE, WITH_ACK);
   d5090:	4b0e      	ldr	r3, [pc, #56]	; (d50cc <_Z22publishStateTransitionv+0x64>)
   d5092:	791a      	ldrb	r2, [r3, #4]
   d5094:	b162      	cbz	r2, d50b0 <_Z22publishStateTransitionv+0x48>
   d5096:	78db      	ldrb	r3, [r3, #3]
   d5098:	b153      	cbz	r3, d50b0 <_Z22publishStateTransitionv+0x48>
   d509a:	4b0d      	ldr	r3, [pc, #52]	; (d50d0 <_Z22publishStateTransitionv+0x68>)
   d509c:	490d      	ldr	r1, [pc, #52]	; (d50d4 <_Z22publishStateTransitionv+0x6c>)
   d509e:	781b      	ldrb	r3, [r3, #0]
   d50a0:	f88d 3000 	strb.w	r3, [sp]
   d50a4:	4b0c      	ldr	r3, [pc, #48]	; (d50d8 <_Z22publishStateTransitionv+0x70>)
   d50a6:	480d      	ldr	r0, [pc, #52]	; (d50dc <_Z22publishStateTransitionv+0x74>)
   d50a8:	781b      	ldrb	r3, [r3, #0]
   d50aa:	aa02      	add	r2, sp, #8
   d50ac:	f7ff fa79 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Log.info(stateTransitionString);
   d50b0:	480b      	ldr	r0, [pc, #44]	; (d50e0 <_Z22publishStateTransitionv+0x78>)
   d50b2:	a902      	add	r1, sp, #8
   d50b4:	f7ff fa47 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
}
   d50b8:	b00d      	add	sp, #52	; 0x34
   d50ba:	bd30      	pop	{r4, r5, pc}
   d50bc:	2003e4b5 	.word	0x2003e4b5
   d50c0:	2003e474 	.word	0x2003e474
   d50c4:	2003e234 	.word	0x2003e234
   d50c8:	000dc63b 	.word	0x000dc63b
   d50cc:	2003e4c0 	.word	0x2003e4c0
   d50d0:	2003e379 	.word	0x2003e379
   d50d4:	000dc649 	.word	0x000dc649
   d50d8:	2003e378 	.word	0x2003e378
   d50dc:	2003e478 	.word	0x2003e478
   d50e0:	2003e5e0 	.word	0x2003e5e0

000d50e4 <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details Syncs time with remote service and sets low power mode. Called from Reporting State ONLY.
 * Clean house at the end of the day
 */
void dailyCleanup() {
   d50e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d50e8:	4b22      	ldr	r3, [pc, #136]	; (d5174 <_Z12dailyCleanupv+0x90>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
  sysStatus.verboseMode = false;
   d50ea:	4c23      	ldr	r4, [pc, #140]	; (d5178 <_Z12dailyCleanupv+0x94>)
   d50ec:	781b      	ldrb	r3, [r3, #0]
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d50ee:	4a23      	ldr	r2, [pc, #140]	; (d517c <_Z12dailyCleanupv+0x98>)
   d50f0:	4923      	ldr	r1, [pc, #140]	; (d5180 <_Z12dailyCleanupv+0x9c>)
   d50f2:	4824      	ldr	r0, [pc, #144]	; (d5184 <_Z12dailyCleanupv+0xa0>)
void dailyCleanup() {
   d50f4:	b086      	sub	sp, #24
  sysStatus.verboseMode = false;
   d50f6:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d50f8:	f88d 3000 	strb.w	r3, [sp]
   d50fc:	4b22      	ldr	r3, [pc, #136]	; (d5188 <_Z12dailyCleanupv+0xa4>)
   d50fe:	781b      	ldrb	r3, [r3, #0]
   d5100:	f7ff fa4f 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d5104:	7125      	strb	r5, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5106:	f003 f869 	bl	d81dc <spark_cloud_flag_connected>
        if (!connected()) {
   d510a:	b110      	cbz	r0, d5112 <_Z12dailyCleanupv+0x2e>
        return spark_sync_time(NULL);
   d510c:	4628      	mov	r0, r5
   d510e:	f003 f885 	bl	d821c <spark_sync_time>
        const system_tick_t start = millis();
   d5112:	f7ff f9f3 	bl	d44fc <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5116:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d511a:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d511c:	f247 582f 	movw	r8, #29999	; 0x752f
   d5120:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5124:	f7ff f9ea 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5128:	1b46      	subs	r6, r0, r5
   d512a:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d512e:	45b9      	cmp	r9, r7
   d5130:	bf08      	it	eq
   d5132:	45b0      	cmpeq	r8, r6
   d5134:	d305      	bcc.n	d5142 <_Z12dailyCleanupv+0x5e>
  Particle.syncTime();                                                 // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                // Wait for up to 30 seconds for the SyncTime to complete
   d5136:	f7ff f8e4 	bl	d4302 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d513a:	b910      	cbnz	r0, d5142 <_Z12dailyCleanupv+0x5e>
            spark_process();
   d513c:	f003 f83e 	bl	d81bc <spark_process>
        while (_while() && !_condition()) {
   d5140:	e7f0      	b.n	d5124 <_Z12dailyCleanupv+0x40>
   d5142:	f7ff f8de 	bl	d4302 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {     // If Solar or if the battery is being discharged
   d5146:	7963      	ldrb	r3, [r4, #5]
   d5148:	b913      	cbnz	r3, d5150 <_Z12dailyCleanupv+0x6c>
   d514a:	68a3      	ldr	r3, [r4, #8]
   d514c:	2b46      	cmp	r3, #70	; 0x46
   d514e:	dc09      	bgt.n	d5164 <_Z12dailyCleanupv+0x80>
    setLowPowerMode("1");
   d5150:	490e      	ldr	r1, [pc, #56]	; (d518c <_Z12dailyCleanupv+0xa8>)
   d5152:	a802      	add	r0, sp, #8
   d5154:	f005 fc3d 	bl	da9d2 <_ZN6StringC1EPKc>
   d5158:	a802      	add	r0, sp, #8
   d515a:	f7ff fbe1 	bl	d4920 <_Z15setLowPowerMode6String>
   d515e:	a802      	add	r0, sp, #8
   d5160:	f005 fbec 	bl	da93c <_ZN6StringD1Ev>
  }

  resetEverything();                                               // If so, we need to Zero the counts for the new day
   d5164:	f7ff ff62 	bl	d502c <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d5168:	4b09      	ldr	r3, [pc, #36]	; (d5190 <_Z12dailyCleanupv+0xac>)
   d516a:	2201      	movs	r2, #1
   d516c:	701a      	strb	r2, [r3, #0]
   d516e:	b006      	add	sp, #24
   d5170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5174:	2003e379 	.word	0x2003e379
   d5178:	2003e4c0 	.word	0x2003e4c0
   d517c:	000dc65a 	.word	0x000dc65a
   d5180:	000dc662 	.word	0x000dc662
   d5184:	2003e478 	.word	0x2003e478
   d5188:	2003e378 	.word	0x2003e378
   d518c:	000dc3b4 	.word	0x000dc3b4
   d5190:	2003e4f0 	.word	0x2003e4f0

000d5194 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d5194:	b530      	push	{r4, r5, lr}
   d5196:	b085      	sub	sp, #20
   d5198:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d519a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d519c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d519e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d51a0:	f002 ff78 	bl	d8094 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d51a4:	b9b0      	cbnz	r0, d51d4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d51a6:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d51a8:	b10c      	cbz	r4, d51ae <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d51aa:	6923      	ldr	r3, [r4, #16]
   d51ac:	b923      	cbnz	r3, d51b8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d51ae:	4a0a      	ldr	r2, [pc, #40]	; (d51d8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d51b0:	2100      	movs	r1, #0
   d51b2:	200a      	movs	r0, #10
   d51b4:	f002 ff46 	bl	d8044 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d51b8:	2300      	movs	r3, #0
   d51ba:	f8ad 3006 	strh.w	r3, [sp, #6]
   d51be:	230c      	movs	r3, #12
   d51c0:	f8ad 3004 	strh.w	r3, [sp, #4]
   d51c4:	2304      	movs	r3, #4
   d51c6:	9303      	str	r3, [sp, #12]
   d51c8:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d51ca:	6923      	ldr	r3, [r4, #16]
   d51cc:	aa01      	add	r2, sp, #4
   d51ce:	2101      	movs	r1, #1
   d51d0:	4620      	mov	r0, r4
   d51d2:	4798      	blx	r3
}
   d51d4:	b005      	add	sp, #20
   d51d6:	bd30      	pop	{r4, r5, pc}
   d51d8:	000d7d15 	.word	0x000d7d15

000d51dc <_Z16takeMeasurementsv>:
{
   d51dc:	b530      	push	{r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d51de:	4b26      	ldr	r3, [pc, #152]	; (d5278 <_Z16takeMeasurementsv+0x9c>)
   d51e0:	2200      	movs	r2, #0
   d51e2:	b089      	sub	sp, #36	; 0x24
   d51e4:	6858      	ldr	r0, [r3, #4]
   d51e6:	4611      	mov	r1, r2
   d51e8:	f003 f860 	bl	d82ac <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d51ec:	b108      	cbz	r0, d51f2 <_Z16takeMeasurementsv+0x16>
   d51ee:	f7ff fd1d 	bl	d4c2c <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d51f2:	f7ff fd59 	bl	d4ca8 <_Z14getTemperaturev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d51f6:	4669      	mov	r1, sp
   d51f8:	2007      	movs	r0, #7
   d51fa:	f7ff ffcb 	bl	d5194 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
  sysStatus.batteryState = System.batteryState();                     // Call before isItSafeToCharge() as it may overwrite the context
   d51fe:	4c1f      	ldr	r4, [pc, #124]	; (d527c <_Z16takeMeasurementsv+0xa0>)
   d5200:	4d1f      	ldr	r5, [pc, #124]	; (d5280 <_Z16takeMeasurementsv+0xa4>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d5202:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d5204:	bfa8      	it	ge
   d5206:	9800      	ldrge	r0, [sp, #0]
   d5208:	7320      	strb	r0, [r4, #12]
  if (!isItSafeToCharge()) current.alertCount++;                      // Increment the alert count
   d520a:	f7ff fcef 	bl	d4bec <_Z16isItSafeToChargev>
   d520e:	b910      	cbnz	r0, d5216 <_Z16takeMeasurementsv+0x3a>
   d5210:	696b      	ldr	r3, [r5, #20]
   d5212:	3301      	adds	r3, #1
   d5214:	616b      	str	r3, [r5, #20]
   d5216:	4669      	mov	r1, sp
   d5218:	2003      	movs	r0, #3
   d521a:	f7ff ffbb 	bl	d5194 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d521e:	bb40      	cbnz	r0, d5272 <_Z16takeMeasurementsv+0x96>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d5220:	f8bd 3000 	ldrh.w	r3, [sp]
   d5224:	ee07 3a90 	vmov	s15, r3
   d5228:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d522c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d5230:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5234:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d5236:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d523a:	dc09      	bgt.n	d5250 <_Z16takeMeasurementsv+0x74>
   d523c:	7b23      	ldrb	r3, [r4, #12]
   d523e:	2b01      	cmp	r3, #1
   d5240:	d106      	bne.n	d5250 <_Z16takeMeasurementsv+0x74>
    System.setPowerConfiguration(SystemPowerConfiguration());         // Reset the PMIC
   d5242:	4668      	mov	r0, sp
   d5244:	f7ff f8f2 	bl	d442c <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d5248:	2100      	movs	r1, #0
   d524a:	4668      	mov	r0, sp
   d524c:	f002 ff88 	bl	d8160 <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) current.minBatteryLevel = sysStatus.stateOfCharge; // Keep track of lowest value for the day
   d5250:	68a3      	ldr	r3, [r4, #8]
   d5252:	6a2a      	ldr	r2, [r5, #32]
   d5254:	4293      	cmp	r3, r2
   d5256:	bfb8      	it	lt
   d5258:	622b      	strlt	r3, [r5, #32]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d525a:	2b1d      	cmp	r3, #29
   d525c:	bfcc      	ite	gt
   d525e:	2300      	movgt	r3, #0
   d5260:	2301      	movle	r3, #1
  systemStatusWriteNeeded = true;
   d5262:	4a08      	ldr	r2, [pc, #32]	; (d5284 <_Z16takeMeasurementsv+0xa8>)
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d5264:	71e3      	strb	r3, [r4, #7]
  systemStatusWriteNeeded = true;
   d5266:	2301      	movs	r3, #1
   d5268:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d526a:	4a07      	ldr	r2, [pc, #28]	; (d5288 <_Z16takeMeasurementsv+0xac>)
   d526c:	7013      	strb	r3, [r2, #0]
}
   d526e:	b009      	add	sp, #36	; 0x24
   d5270:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d5272:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d5276:	e7d9      	b.n	d522c <_Z16takeMeasurementsv+0x50>
   d5278:	2003e50c 	.word	0x2003e50c
   d527c:	2003e4c0 	.word	0x2003e4c0
   d5280:	2003e3f4 	.word	0x2003e3f4
   d5284:	2003e4f0 	.word	0x2003e4f0
   d5288:	2003e418 	.word	0x2003e418

000d528c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d528c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d528e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d5292:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5294:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5296:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d529a:	42ae      	cmp	r6, r5
   d529c:	d004      	beq.n	d52a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d529e:	4628      	mov	r0, r5
   d52a0:	f005 fb4c 	bl	da93c <_ZN6StringD1Ev>
   d52a4:	3514      	adds	r5, #20
   d52a6:	e7f8      	b.n	d529a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d52a8:	6820      	ldr	r0, [r4, #0]
   d52aa:	f003 f84f 	bl	d834c <free>
    AllocatorT::free(data_);
}
   d52ae:	4620      	mov	r0, r4
   d52b0:	bd70      	pop	{r4, r5, r6, pc}

000d52b2 <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d52b2:	2300      	movs	r3, #0
   d52b4:	2202      	movs	r2, #2
   d52b6:	f002 bf71 	b.w	d819c <spark_variable>

000d52ba <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d52ba:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d52bc:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d52be:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d52c0:	68dd      	ldr	r5, [r3, #12]
   d52c2:	2330      	movs	r3, #48	; 0x30
   d52c4:	47a8      	blx	r5
    }
   d52c6:	4620      	mov	r0, r4
   d52c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d52cc <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d52cc:	b570      	push	{r4, r5, r6, lr}
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d52ce:	4b19      	ldr	r3, [pc, #100]	; (d5334 <_Z18loadSystemDefaultsv+0x68>)
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d52d0:	4c19      	ldr	r4, [pc, #100]	; (d5338 <_Z18loadSystemDefaultsv+0x6c>)
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d52d2:	2201      	movs	r2, #1
   d52d4:	701a      	strb	r2, [r3, #0]
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d52d6:	78e3      	ldrb	r3, [r4, #3]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d52d8:	b086      	sub	sp, #24
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d52da:	b153      	cbz	r3, d52f2 <_Z18loadSystemDefaultsv+0x26>
   d52dc:	4b17      	ldr	r3, [pc, #92]	; (d533c <_Z18loadSystemDefaultsv+0x70>)
   d52de:	4a18      	ldr	r2, [pc, #96]	; (d5340 <_Z18loadSystemDefaultsv+0x74>)
   d52e0:	781b      	ldrb	r3, [r3, #0]
   d52e2:	f88d 3000 	strb.w	r3, [sp]
   d52e6:	4b17      	ldr	r3, [pc, #92]	; (d5344 <_Z18loadSystemDefaultsv+0x78>)
   d52e8:	4917      	ldr	r1, [pc, #92]	; (d5348 <_Z18loadSystemDefaultsv+0x7c>)
   d52ea:	781b      	ldrb	r3, [r3, #0]
   d52ec:	4817      	ldr	r0, [pc, #92]	; (d534c <_Z18loadSystemDefaultsv+0x80>)
   d52ee:	f7ff f958 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d52f2:	2500      	movs	r5, #0
  setLowPowerMode("1");
   d52f4:	4916      	ldr	r1, [pc, #88]	; (d5350 <_Z18loadSystemDefaultsv+0x84>)
  sysStatus.verboseMode = false;
   d52f6:	7125      	strb	r5, [r4, #4]
  sysStatus.structuresVersion = 1;
   d52f8:	2601      	movs	r6, #1
  setLowPowerMode("1");
   d52fa:	a802      	add	r0, sp, #8
  sysStatus.structuresVersion = 1;
   d52fc:	7026      	strb	r6, [r4, #0]
  sysStatus.clockSet = false;
   d52fe:	70a5      	strb	r5, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d5300:	71e5      	strb	r5, [r4, #7]
  setLowPowerMode("1");
   d5302:	f005 fb66 	bl	da9d2 <_ZN6StringC1EPKc>
   d5306:	a802      	add	r0, sp, #8
   d5308:	f7ff fb0a 	bl	d4920 <_Z15setLowPowerMode6String>
   d530c:	a802      	add	r0, sp, #8
   d530e:	f005 fb15 	bl	da93c <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d5312:	4b10      	ldr	r3, [pc, #64]	; (d5354 <_Z18loadSystemDefaultsv+0x88>)
   d5314:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d5316:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d531a:	61a3      	str	r3, [r4, #24]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d531c:	4a06      	ldr	r2, [pc, #24]	; (d5338 <_Z18loadSystemDefaultsv+0x6c>)
   d531e:	480e      	ldr	r0, [pc, #56]	; (d5358 <_Z18loadSystemDefaultsv+0x8c>)
  sysStatus.solarPowerMode = true;  
   d5320:	7166      	strb	r6, [r4, #5]
  sysStatus.openTime = 6;
   d5322:	f241 5306 	movw	r3, #5382	; 0x1506
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5326:	4631      	mov	r1, r6
  sysStatus.openTime = 6;
   d5328:	83a3      	strh	r3, [r4, #28]
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d532a:	8525      	strh	r5, [r4, #40]	; 0x28
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d532c:	f7ff ffc5 	bl	d52ba <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d5330:	b006      	add	sp, #24
   d5332:	bd70      	pop	{r4, r5, r6, pc}
   d5334:	2003e475 	.word	0x2003e475
   d5338:	2003e4c0 	.word	0x2003e4c0
   d533c:	2003e379 	.word	0x2003e379
   d5340:	000dc670 	.word	0x000dc670
   d5344:	2003e378 	.word	0x2003e378
   d5348:	000dc616 	.word	0x000dc616
   d534c:	2003e478 	.word	0x2003e478
   d5350:	000dc3b4 	.word	0x000dc3b4
   d5354:	c0a00000 	.word	0xc0a00000
   d5358:	2003e424 	.word	0x2003e424
   d535c:	00000000 	.word	0x00000000

000d5360 <setup>:
{
   d5360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5364:	2100      	movs	r1, #0
{
   d5366:	b0aa      	sub	sp, #168	; 0xa8
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5368:	2008      	movs	r0, #8
   d536a:	f006 f8d1 	bl	db510 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d536e:	2100      	movs	r1, #0
   d5370:	2004      	movs	r0, #4
   d5372:	f006 f8cd 	bl	db510 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d5376:	2101      	movs	r1, #1
   d5378:	2007      	movs	r0, #7
   d537a:	f006 f8c9 	bl	db510 <pinMode>
  pinMode(intPin,INPUT);                            // sensor interrupt
   d537e:	2100      	movs	r1, #0
   d5380:	2002      	movs	r0, #2
   d5382:	f006 f8c5 	bl	db510 <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d5386:	2101      	movs	r1, #1
   d5388:	2007      	movs	r0, #7
   d538a:	f006 f8d2 	bl	db532 <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d538e:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5390:	2500      	movs	r5, #0
   d5392:	f002 ff2b 	bl	d81ec <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d5396:	2300      	movs	r3, #0
   d5398:	227d      	movs	r2, #125	; 0x7d
   d539a:	a90a      	add	r1, sp, #40	; 0x28
   d539c:	a806      	add	r0, sp, #24
   d539e:	f005 fb80 	bl	daaa2 <_ZNK6String8getBytesEPhjj>
   d53a2:	49bb      	ldr	r1, [pc, #748]	; (d5690 <setup+0x330>)
   d53a4:	4fbb      	ldr	r7, [pc, #748]	; (d5694 <setup+0x334>)
   d53a6:	4cbc      	ldr	r4, [pc, #752]	; (d5698 <setup+0x338>)
   d53a8:	f8df 8410 	ldr.w	r8, [pc, #1040]	; d57bc <setup+0x45c>
   d53ac:	462b      	mov	r3, r5
   d53ae:	462a      	mov	r2, r5
   d53b0:	e9cd 5500 	strd	r5, r5, [sp]
   d53b4:	a80a      	add	r0, sp, #40	; 0x28
   d53b6:	f002 ff29 	bl	d820c <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53ba:	462b      	mov	r3, r5
   d53bc:	2202      	movs	r2, #2
   d53be:	49b5      	ldr	r1, [pc, #724]	; (d5694 <setup+0x334>)
   d53c0:	48b6      	ldr	r0, [pc, #728]	; (d569c <setup+0x33c>)
   d53c2:	f002 feeb 	bl	d819c <spark_variable>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d53c6:	49b6      	ldr	r1, [pc, #728]	; (d56a0 <setup+0x340>)
   d53c8:	48b6      	ldr	r0, [pc, #728]	; (d56a4 <setup+0x344>)
   d53ca:	f7ff ff72 	bl	d52b2 <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return _variable(varKey, var, STRING);
   d53ce:	49b6      	ldr	r1, [pc, #728]	; (d56a8 <setup+0x348>)
   d53d0:	48b6      	ldr	r0, [pc, #728]	; (d56ac <setup+0x34c>)
   d53d2:	f7fe ffa3 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d53d6:	49b6      	ldr	r1, [pc, #728]	; (d56b0 <setup+0x350>)
   d53d8:	48b6      	ldr	r0, [pc, #728]	; (d56b4 <setup+0x354>)
   d53da:	f7ff ff6a 	bl	d52b2 <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53de:	462b      	mov	r3, r5
   d53e0:	2202      	movs	r2, #2
   d53e2:	49b5      	ldr	r1, [pc, #724]	; (d56b8 <setup+0x358>)
   d53e4:	48b5      	ldr	r0, [pc, #724]	; (d56bc <setup+0x35c>)
   d53e6:	f002 fed9 	bl	d819c <spark_variable>
        return _variable(varKey, var, STRING);
   d53ea:	49b5      	ldr	r1, [pc, #724]	; (d56c0 <setup+0x360>)
   d53ec:	48b5      	ldr	r0, [pc, #724]	; (d56c4 <setup+0x364>)
   d53ee:	f7fe ff95 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d53f2:	49b5      	ldr	r1, [pc, #724]	; (d56c8 <setup+0x368>)
   d53f4:	48b5      	ldr	r0, [pc, #724]	; (d56cc <setup+0x36c>)
   d53f6:	f7ff ff5c 	bl	d52b2 <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
   d53fa:	49b5      	ldr	r1, [pc, #724]	; (d56d0 <setup+0x370>)
   d53fc:	48b5      	ldr	r0, [pc, #724]	; (d56d4 <setup+0x374>)
   d53fe:	f7fe ff8d 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5402:	49b5      	ldr	r1, [pc, #724]	; (d56d8 <setup+0x378>)
   d5404:	48b5      	ldr	r0, [pc, #724]	; (d56dc <setup+0x37c>)
   d5406:	f7fe ff89 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d540a:	49b5      	ldr	r1, [pc, #724]	; (d56e0 <setup+0x380>)
   d540c:	48b5      	ldr	r0, [pc, #724]	; (d56e4 <setup+0x384>)
   d540e:	f7fe ff85 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5412:	462b      	mov	r3, r5
   d5414:	2202      	movs	r2, #2
   d5416:	49b4      	ldr	r1, [pc, #720]	; (d56e8 <setup+0x388>)
   d5418:	48b4      	ldr	r0, [pc, #720]	; (d56ec <setup+0x38c>)
   d541a:	f002 febf 	bl	d819c <spark_variable>
        return _variable(varKey, var, STRING);
   d541e:	49b4      	ldr	r1, [pc, #720]	; (d56f0 <setup+0x390>)
   d5420:	48b4      	ldr	r0, [pc, #720]	; (d56f4 <setup+0x394>)
   d5422:	f7fe ff7b 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d5426:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d5428:	e9cd 5503 	strd	r5, r5, [sp, #12]
        extra.size = sizeof(extra);
   d542c:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d5430:	4bb1      	ldr	r3, [pc, #708]	; (d56f8 <setup+0x398>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d5432:	49b2      	ldr	r1, [pc, #712]	; (d56fc <setup+0x39c>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d5434:	9305      	str	r3, [sp, #20]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d5436:	2204      	movs	r2, #4
   d5438:	ab03      	add	r3, sp, #12
   d543a:	48b1      	ldr	r0, [pc, #708]	; (d5700 <setup+0x3a0>)
   d543c:	f002 feae 	bl	d819c <spark_variable>
        return _variable(varKey, var, STRING);
   d5440:	49b0      	ldr	r1, [pc, #704]	; (d5704 <setup+0x3a4>)
   d5442:	48b1      	ldr	r0, [pc, #708]	; (d5708 <setup+0x3a8>)
   d5444:	f7fe ff6a 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5448:	49b0      	ldr	r1, [pc, #704]	; (d570c <setup+0x3ac>)
   d544a:	48b1      	ldr	r0, [pc, #708]	; (d5710 <setup+0x3b0>)
   d544c:	f7fe ff66 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d5450:	49b0      	ldr	r1, [pc, #704]	; (d5714 <setup+0x3b4>)
   d5452:	48b1      	ldr	r0, [pc, #708]	; (d5718 <setup+0x3b8>)
   d5454:	f7ff f856 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5458:	49b0      	ldr	r1, [pc, #704]	; (d571c <setup+0x3bc>)
   d545a:	48b1      	ldr	r0, [pc, #708]	; (d5720 <setup+0x3c0>)
   d545c:	f7ff f852 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5460:	49b0      	ldr	r1, [pc, #704]	; (d5724 <setup+0x3c4>)
   d5462:	48b1      	ldr	r0, [pc, #708]	; (d5728 <setup+0x3c8>)
   d5464:	f7ff f84e 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5468:	49b0      	ldr	r1, [pc, #704]	; (d572c <setup+0x3cc>)
   d546a:	48b1      	ldr	r0, [pc, #708]	; (d5730 <setup+0x3d0>)
   d546c:	f7ff f84a 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5470:	49b0      	ldr	r1, [pc, #704]	; (d5734 <setup+0x3d4>)
   d5472:	48b1      	ldr	r0, [pc, #708]	; (d5738 <setup+0x3d8>)
   d5474:	f7ff f846 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5478:	49b0      	ldr	r1, [pc, #704]	; (d573c <setup+0x3dc>)
   d547a:	48b1      	ldr	r0, [pc, #708]	; (d5740 <setup+0x3e0>)
   d547c:	f7ff f842 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5480:	49b0      	ldr	r1, [pc, #704]	; (d5744 <setup+0x3e4>)
   d5482:	48b1      	ldr	r0, [pc, #708]	; (d5748 <setup+0x3e8>)
   d5484:	f7ff f83e 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5488:	49b0      	ldr	r1, [pc, #704]	; (d574c <setup+0x3ec>)
   d548a:	48b1      	ldr	r0, [pc, #708]	; (d5750 <setup+0x3f0>)
   d548c:	f7ff f83a 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5490:	49b0      	ldr	r1, [pc, #704]	; (d5754 <setup+0x3f4>)
   d5492:	48b1      	ldr	r0, [pc, #708]	; (d5758 <setup+0x3f8>)
   d5494:	f7ff f836 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5498:	49b0      	ldr	r1, [pc, #704]	; (d575c <setup+0x3fc>)
   d549a:	48b1      	ldr	r0, [pc, #708]	; (d5760 <setup+0x400>)
   d549c:	f7ff f832 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54a0:	49b0      	ldr	r1, [pc, #704]	; (d5764 <setup+0x404>)
   d54a2:	48b1      	ldr	r0, [pc, #708]	; (d5768 <setup+0x408>)
   d54a4:	f7ff f82e 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54a8:	49b0      	ldr	r1, [pc, #704]	; (d576c <setup+0x40c>)
   d54aa:	48b1      	ldr	r0, [pc, #708]	; (d5770 <setup+0x410>)
   d54ac:	f7ff f82a 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54b0:	49b0      	ldr	r1, [pc, #704]	; (d5774 <setup+0x414>)
   d54b2:	48b1      	ldr	r0, [pc, #708]	; (d5778 <setup+0x418>)
   d54b4:	f7ff f826 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
        graceful_(graceful),
        clearSession_(clearSession) {
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d54b8:	2601      	movs	r6, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d54ba:	2203      	movs	r2, #3
   d54bc:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d54c0:	a803      	add	r0, sp, #12
   d54c2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    graceful_ = enabled;
   d54c6:	f8ad 6014 	strh.w	r6, [sp, #20]
   d54ca:	f003 f9a6 	bl	d881a <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  fram.begin();                                                       // Initialize the FRAM module
   d54ce:	48ab      	ldr	r0, [pc, #684]	; (d577c <setup+0x41c>)
   d54d0:	f001 fe34 	bl	d713c <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54d4:	4633      	mov	r3, r6
   d54d6:	48a9      	ldr	r0, [pc, #676]	; (d577c <setup+0x41c>)
   d54d8:	f10d 020b 	add.w	r2, sp, #11
   d54dc:	4629      	mov	r1, r5
   d54de:	f001 fe6f 	bl	d71c0 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d54e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d54e6:	2b03      	cmp	r3, #3
   d54e8:	f000 8177 	beq.w	d57da <setup+0x47a>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d54ec:	48a3      	ldr	r0, [pc, #652]	; (d577c <setup+0x41c>)
   d54ee:	f001 fe2f 	bl	d7150 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d54f2:	4aa3      	ldr	r2, [pc, #652]	; (d5780 <setup+0x420>)
   d54f4:	48a1      	ldr	r0, [pc, #644]	; (d577c <setup+0x41c>)
   d54f6:	2304      	movs	r3, #4
   d54f8:	4629      	mov	r1, r5
   d54fa:	f001 feac 	bl	d7256 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54fe:	4633      	mov	r3, r6
   d5500:	489e      	ldr	r0, [pc, #632]	; (d577c <setup+0x41c>)
   d5502:	f10d 020b 	add.w	r2, sp, #11
   d5506:	4629      	mov	r1, r5
   d5508:	f001 fe5a 	bl	d71c0 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d550c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5510:	2b03      	cmp	r3, #3
   d5512:	f000 815f 	beq.w	d57d4 <setup+0x474>
      Log.info("FRAM Test Error");
   d5516:	499b      	ldr	r1, [pc, #620]	; (d5784 <setup+0x424>)
   d5518:	489b      	ldr	r0, [pc, #620]	; (d5788 <setup+0x428>)
      state = ERROR_STATE;                                            // Device will not work without FRAM
   d551a:	f888 6000 	strb.w	r6, [r8]
      Log.info("FRAM Test Error");
   d551e:	f7ff f812 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d5522:	4d9a      	ldr	r5, [pc, #616]	; (d578c <setup+0x42c>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d5524:	f7ff fc9a 	bl	d4e5c <_Z17checkSystemValuesv>
  makeUpParkHourStrings();                                            // Create the strings for the console
   d5528:	f7ff fcee 	bl	d4f08 <_Z21makeUpParkHourStringsv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d552c:	4a98      	ldr	r2, [pc, #608]	; (d5790 <setup+0x430>)
   d552e:	2300      	movs	r3, #0
   d5530:	2100      	movs	r1, #0
   d5532:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d5536:	f002 fdcf 	bl	d80d8 <system_subscribe_event>
   d553a:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();                                        // The carrier board has D8 connected to FOUT for wake interrupts
   d553c:	2101      	movs	r1, #1
   d553e:	4628      	mov	r0, r5
   d5540:	816b      	strh	r3, [r5, #10]
   d5542:	f001 fcad 	bl	d6ea0 <_ZN6AB18055setupEb>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d5546:	2301      	movs	r3, #1
   d5548:	461a      	mov	r2, r3
   d554a:	2110      	movs	r1, #16
   d554c:	4628      	mov	r0, r5
   d554e:	f001 fa12 	bl	d6976 <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                        // Enable watchdog
   d5552:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet = ab1805.isRTCSet();                             // Note whether the RTC is set 
   d5554:	70a0      	strb	r0, [r4, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                        // Enable watchdog
   d5556:	4628      	mov	r0, r5
   d5558:	f001 f98a 	bl	d6870 <_ZN6AB18056setWDTEi>
  Time.setDSTOffset(sysStatus.dstOffset);                             // Set the value from FRAM if in limits
   d555c:	ed94 0a06 	vldr	s0, [r4, #24]
   d5560:	f005 fc34 	bl	dadcc <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                       // Perform the DST calculation here
   d5564:	f000 ffbc 	bl	d64e0 <_Z8isDSTusav>
   d5568:	2800      	cmp	r0, #0
   d556a:	f000 8143 	beq.w	d57f4 <setup+0x494>
   d556e:	f005 fc4b 	bl	dae08 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                      // Set the Time Zone for our device
   d5572:	ed94 0a05 	vldr	s0, [r4, #20]
   d5576:	f005 fc09 	bl	dad8c <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d557a:	f005 fdb5 	bl	db0e8 <_ZN9TimeClass5localEv>
   d557e:	4605      	mov	r5, r0
   d5580:	f005 fd6d 	bl	db05e <_ZN9TimeClass3nowEv>
   d5584:	1a28      	subs	r0, r5, r0
   d5586:	f006 f9f7 	bl	db978 <__aeabi_i2d>
   d558a:	a33f      	add	r3, pc, #252	; (adr r3, d5688 <setup+0x328>)
   d558c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5590:	f006 fb86 	bl	dbca0 <__aeabi_ddiv>
   d5594:	4a7f      	ldr	r2, [pc, #508]	; (d5794 <setup+0x434>)
   d5596:	e9cd 0100 	strd	r0, r1, [sp]
   d559a:	210a      	movs	r1, #10
   d559c:	4854      	ldr	r0, [pc, #336]	; (d56f0 <setup+0x390>)
   d559e:	f002 feed 	bl	d837c <snprintf>
  accel.begin(SCALE_2G, ODR_100); // Set up accel with +/-2g range, and 100Hz ODR
   d55a2:	2203      	movs	r2, #3
   d55a4:	2102      	movs	r1, #2
   d55a6:	487c      	ldr	r0, [pc, #496]	; (d5798 <setup+0x438>)
   d55a8:	f001 fff2 	bl	d7590 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>
  accel.setupTapInts(sysStatus.sensitivity);                          // Initialize the accelerometer
   d55ac:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
   d55b0:	4879      	ldr	r0, [pc, #484]	; (d5798 <setup+0x438>)
   d55b2:	f001 ff91 	bl	d74d8 <_ZN8MMA8452Q12setupTapIntsEh>
  countSignalTimer.changePeriod(sysStatus.debounceSec*1000);           // This keeps the device awake during debounce
   d55b6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d55ba:	4878      	ldr	r0, [pc, #480]	; (d579c <setup+0x43c>)
   d55bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d55c0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d55c4:	4359      	muls	r1, r3
   d55c6:	f7fe ffa3 	bl	d4510 <_ZN5Timer12changePeriodEjj>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d55ca:	79a3      	ldrb	r3, [r4, #6]
   d55cc:	2210      	movs	r2, #16
   d55ce:	2b00      	cmp	r3, #0
   d55d0:	f000 8113 	beq.w	d57fa <setup+0x49a>
   d55d4:	4972      	ldr	r1, [pc, #456]	; (d57a0 <setup+0x440>)
   d55d6:	483e      	ldr	r0, [pc, #248]	; (d56d0 <setup+0x370>)
   d55d8:	f006 fe15 	bl	dc206 <strncpy>
        int reason = RESET_REASON_NONE;
   d55dc:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55de:	4611      	mov	r1, r2
   d55e0:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d55e2:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55e4:	f002 fb7e 	bl	d7ce4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d55e8:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d55ea:	2b14      	cmp	r3, #20
   d55ec:	f04f 0200 	mov.w	r2, #0
   d55f0:	f040 8105 	bne.w	d57fe <setup+0x49e>
    sysStatus.resetCount++;
   d55f4:	6923      	ldr	r3, [r4, #16]
   d55f6:	3301      	adds	r3, #1
   d55f8:	6123      	str	r3, [r4, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d55fa:	4b6a      	ldr	r3, [pc, #424]	; (d57a4 <setup+0x444>)
   d55fc:	2201      	movs	r2, #1
   d55fe:	701a      	strb	r2, [r3, #0]
  if (current.hourlyCount) lastReportedTime = current.lastCountTime;
   d5600:	683b      	ldr	r3, [r7, #0]
   d5602:	4d69      	ldr	r5, [pc, #420]	; (d57a8 <setup+0x448>)
   d5604:	2b00      	cmp	r3, #0
   d5606:	f000 8104 	beq.w	d5812 <setup+0x4b2>
   d560a:	68fb      	ldr	r3, [r7, #12]
   d560c:	602b      	str	r3, [r5, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d560e:	f7ff fb9f 	bl	d4d50 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d5612:	2004      	movs	r0, #4
   d5614:	f005 ffa6 	bl	db564 <digitalRead>
   d5618:	b908      	cbnz	r0, d561e <setup+0x2be>
   d561a:	f7ff fe57 	bl	d52cc <_Z18loadSystemDefaultsv>
  if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   d561e:	f005 fd47 	bl	db0b0 <_ZN9TimeClass3dayEv>
   d5622:	2100      	movs	r1, #0
   d5624:	4605      	mov	r5, r0
   d5626:	68f8      	ldr	r0, [r7, #12]
   d5628:	f005 fb94 	bl	dad54 <_ZN9TimeClass3dayEx>
   d562c:	4285      	cmp	r5, r0
   d562e:	d001      	beq.n	d5634 <setup+0x2d4>
    resetEverything();                                                 // Zero the counts for the new day
   d5630:	f7ff fcfc 	bl	d502c <_Z15resetEverythingv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d5634:	f005 fd24 	bl	db080 <_ZN9TimeClass4hourEv>
   d5638:	7f23      	ldrb	r3, [r4, #28]
   d563a:	4298      	cmp	r0, r3
   d563c:	db1b      	blt.n	d5676 <setup+0x316>
   d563e:	f005 fd1f 	bl	db080 <_ZN9TimeClass4hourEv>
   d5642:	7f63      	ldrb	r3, [r4, #29]
   d5644:	4298      	cmp	r0, r3
   d5646:	da16      	bge.n	d5676 <setup+0x316>
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d5648:	2300      	movs	r3, #0
   d564a:	9300      	str	r3, [sp, #0]
   d564c:	4957      	ldr	r1, [pc, #348]	; (d57ac <setup+0x44c>)
   d564e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5652:	2201      	movs	r2, #1
   d5654:	2002      	movs	r0, #2
   d5656:	f003 fd17 	bl	d9088 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) {         // If the system thinks we are connected, let's make sure that we are
   d565a:	78e3      	ldrb	r3, [r4, #3]
   d565c:	b133      	cbz	r3, d566c <setup+0x30c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d565e:	f002 fdbd 	bl	d81dc <spark_cloud_flag_connected>
   d5662:	b918      	cbnz	r0, d566c <setup+0x30c>
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d5664:	4b52      	ldr	r3, [pc, #328]	; (d57b0 <setup+0x450>)
      sysStatus.connectedStatus = false;                              // We will fix this.
   d5666:	70e0      	strb	r0, [r4, #3]
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d5668:	2201      	movs	r2, #1
   d566a:	701a      	strb	r2, [r3, #0]
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d566c:	f7ff fdb6 	bl	d51dc <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Boron awake after reboot - helps with recovery
   d5670:	4b50      	ldr	r3, [pc, #320]	; (d57b4 <setup+0x454>)
   d5672:	4a51      	ldr	r2, [pc, #324]	; (d57b8 <setup+0x458>)
   d5674:	601a      	str	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5676:	f898 3000 	ldrb.w	r3, [r8]
   d567a:	2b00      	cmp	r3, #0
   d567c:	f040 80a0 	bne.w	d57c0 <setup+0x460>
   d5680:	2302      	movs	r3, #2
   d5682:	f888 3000 	strb.w	r3, [r8]
   d5686:	e09b      	b.n	d57c0 <setup+0x460>
   d5688:	00000000 	.word	0x00000000
   d568c:	40ac2000 	.word	0x40ac2000
   d5690:	000d45bd 	.word	0x000d45bd
   d5694:	2003e3f4 	.word	0x2003e3f4
   d5698:	2003e4c0 	.word	0x2003e4c0
   d569c:	000dc688 	.word	0x000dc688
   d56a0:	2003e3fc 	.word	0x2003e3fc
   d56a4:	000dc700 	.word	0x000dc700
   d56a8:	2003e32c 	.word	0x2003e32c
   d56ac:	000dc694 	.word	0x000dc694
   d56b0:	2003e4d0 	.word	0x2003e4d0
   d56b4:	000dc69b 	.word	0x000dc69b
   d56b8:	2003e404 	.word	0x2003e404
   d56bc:	000dc6a6 	.word	0x000dc6a6
   d56c0:	2003e210 	.word	0x2003e210
   d56c4:	000dc6b2 	.word	0x000dc6b2
   d56c8:	2003e4c8 	.word	0x2003e4c8
   d56cc:	000dc6ba 	.word	0x000dc6ba
   d56d0:	2003e464 	.word	0x2003e464
   d56d4:	000dc6c5 	.word	0x000dc6c5
   d56d8:	2003e21e 	.word	0x2003e21e
   d56dc:	000dc76d 	.word	0x000dc76d
   d56e0:	2003e204 	.word	0x2003e204
   d56e4:	000dc6d2 	.word	0x000dc6d2
   d56e8:	2003e408 	.word	0x2003e408
   d56ec:	000dc6dc 	.word	0x000dc6dc
   d56f0:	2003e419 	.word	0x2003e419
   d56f4:	000dc6e3 	.word	0x000dc6e3
   d56f8:	000d4325 	.word	0x000d4325
   d56fc:	000d4105 	.word	0x000d4105
   d5700:	000dc6ee 	.word	0x000dc6ee
   d5704:	2003e22c 	.word	0x2003e22c
   d5708:	000dc784 	.word	0x000dc784
   d570c:	2003e216 	.word	0x2003e216
   d5710:	000dc794 	.word	0x000dc794
   d5714:	000d4781 	.word	0x000d4781
   d5718:	000dc6fd 	.word	0x000dc6fd
   d571c:	000d42a1 	.word	0x000d42a1
   d5720:	000dc70b 	.word	0x000dc70b
   d5724:	000d465d 	.word	0x000d465d
   d5728:	000dc717 	.word	0x000dc717
   d572c:	000d41ed 	.word	0x000d41ed
   d5730:	000dc721 	.word	0x000dc721
   d5734:	000d4921 	.word	0x000d4921
   d5738:	000dc729 	.word	0x000dc729
   d573c:	000d4dc5 	.word	0x000d4dc5
   d5740:	000dc736 	.word	0x000dc736
   d5744:	000d46a5 	.word	0x000d46a5
   d5748:	000dc741 	.word	0x000dc741
   d574c:	000d63b9 	.word	0x000d63b9
   d5750:	000dc74e 	.word	0x000dc74e
   d5754:	000d6521 	.word	0x000d6521
   d5758:	000dc75b 	.word	0x000dc75b
   d575c:	000d4f85 	.word	0x000d4f85
   d5760:	000dc769 	.word	0x000dc769
   d5764:	000d4fbd 	.word	0x000d4fbd
   d5768:	000dc776 	.word	0x000dc776
   d576c:	000d47f9 	.word	0x000d47f9
   d5770:	000dc780 	.word	0x000dc780
   d5774:	000d4889 	.word	0x000d4889
   d5778:	000dc790 	.word	0x000dc790
   d577c:	2003e424 	.word	0x2003e424
   d5780:	000dc938 	.word	0x000dc938
   d5784:	000dc79d 	.word	0x000dc79d
   d5788:	2003e5e0 	.word	0x2003e5e0
   d578c:	2003e388 	.word	0x2003e388
   d5790:	000d40d5 	.word	0x000d40d5
   d5794:	000dc7ad 	.word	0x000dc7ad
   d5798:	2003e3a8 	.word	0x2003e3a8
   d579c:	2003e3d8 	.word	0x2003e3d8
   d57a0:	000dc4f8 	.word	0x000dc4f8
   d57a4:	2003e4f0 	.word	0x2003e4f0
   d57a8:	2003e43c 	.word	0x2003e43c
   d57ac:	000d4155 	.word	0x000d4155
   d57b0:	2003e475 	.word	0x2003e475
   d57b4:	2003e4b8 	.word	0x2003e4b8
   d57b8:	00015f90 	.word	0x00015f90
   d57bc:	2003e4b5 	.word	0x2003e4b5
  digitalWrite(blueLED,LOW);                                          // Signal the end of startup
   d57c0:	2100      	movs	r1, #0
   d57c2:	2007      	movs	r0, #7
   d57c4:	f005 feb5 	bl	db532 <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d57c8:	a806      	add	r0, sp, #24
   d57ca:	f005 f8b7 	bl	da93c <_ZN6StringD1Ev>
}
   d57ce:	b02a      	add	sp, #168	; 0xa8
   d57d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d57d4:	f7ff fd7a 	bl	d52cc <_Z18loadSystemDefaultsv>
   d57d8:	e6a3      	b.n	d5522 <setup+0x1c2>
   d57da:	4622      	mov	r2, r4
   d57dc:	4631      	mov	r1, r6
   d57de:	2330      	movs	r3, #48	; 0x30
   d57e0:	480e      	ldr	r0, [pc, #56]	; (d581c <setup+0x4bc>)
   d57e2:	f001 fced 	bl	d71c0 <_ZN6MB85RC8readDataEjPhj>
   d57e6:	2324      	movs	r3, #36	; 0x24
   d57e8:	463a      	mov	r2, r7
   d57ea:	2150      	movs	r1, #80	; 0x50
   d57ec:	480b      	ldr	r0, [pc, #44]	; (d581c <setup+0x4bc>)
   d57ee:	f001 fce7 	bl	d71c0 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d57f2:	e696      	b.n	d5522 <setup+0x1c2>
  DSTRULES() ? Time.beginDST() : Time.endDST();                       // Perform the DST calculation here
   d57f4:	f005 fb14 	bl	dae20 <_ZN9TimeClass6endDSTEv>
   d57f8:	e6bb      	b.n	d5572 <setup+0x212>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d57fa:	4909      	ldr	r1, [pc, #36]	; (d5820 <setup+0x4c0>)
   d57fc:	e6eb      	b.n	d55d6 <setup+0x276>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d57fe:	4611      	mov	r1, r2
   d5800:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5802:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5804:	f002 fa6e 	bl	d7ce4 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5808:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d580a:	2b8c      	cmp	r3, #140	; 0x8c
   d580c:	f47f aef8 	bne.w	d5600 <setup+0x2a0>
   d5810:	e6f0      	b.n	d55f4 <setup+0x294>
  else lastReportedTime = Time.now();                                  // Initialize it to now so that reporting can begin as soon as the hour changes
   d5812:	f005 fc24 	bl	db05e <_ZN9TimeClass3nowEv>
   d5816:	6028      	str	r0, [r5, #0]
   d5818:	e6f9      	b.n	d560e <setup+0x2ae>
   d581a:	bf00      	nop
   d581c:	2003e424 	.word	0x2003e424
   d5820:	000dc4f4 	.word	0x000dc4f4

000d5824 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5824:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5828:	4604      	mov	r4, r0
   d582a:	460d      	mov	r5, r1
   d582c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d582e:	d916      	bls.n	d585e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5830:	4290      	cmp	r0, r2
   d5832:	d215      	bcs.n	d5860 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d5834:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d5838:	1a75      	subs	r5, r6, r1
   d583a:	f1a1 0714 	sub.w	r7, r1, #20
   d583e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5840:	42b7      	cmp	r7, r6
   d5842:	d01c      	beq.n	d587e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d5844:	b12c      	cbz	r4, d5852 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d5846:	4631      	mov	r1, r6
   d5848:	4620      	mov	r0, r4
   d584a:	f005 f8f3 	bl	daa34 <_ZN6StringC1EOS_>
   d584e:	7c33      	ldrb	r3, [r6, #16]
   d5850:	7423      	strb	r3, [r4, #16]
   d5852:	4630      	mov	r0, r6
   d5854:	f005 f872 	bl	da93c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5858:	3e14      	subs	r6, #20
   d585a:	3c14      	subs	r4, #20
   d585c:	e7f0      	b.n	d5840 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d585e:	d00e      	beq.n	d587e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5860:	42b5      	cmp	r5, r6
   d5862:	d00c      	beq.n	d587e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d5864:	b12c      	cbz	r4, d5872 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d5866:	4629      	mov	r1, r5
   d5868:	4620      	mov	r0, r4
   d586a:	f005 f8e3 	bl	daa34 <_ZN6StringC1EOS_>
   d586e:	7c2b      	ldrb	r3, [r5, #16]
   d5870:	7423      	strb	r3, [r4, #16]
   d5872:	4628      	mov	r0, r5
   d5874:	f005 f862 	bl	da93c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5878:	3514      	adds	r5, #20
   d587a:	3414      	adds	r4, #20
   d587c:	e7f0      	b.n	d5860 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d587e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d5884:	2300      	movs	r3, #0
   d5886:	e9c0 3300 	strd	r3, r3, [r0]
   d588a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d588c:	684f      	ldr	r7, [r1, #4]
   d588e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5890:	4604      	mov	r4, r0
   d5892:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5894:	dd23      	ble.n	d58de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d5896:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d589a:	fb08 f007 	mul.w	r0, r8, r7
   d589e:	f002 fd4d 	bl	d833c <malloc>
            if (!d) {
   d58a2:	4605      	mov	r5, r0
   d58a4:	b1d8      	cbz	r0, d58de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d58a6:	e9d4 1200 	ldrd	r1, r2, [r4]
   d58aa:	fb08 1202 	mla	r2, r8, r2, r1
   d58ae:	f7ff ffb9 	bl	d5824 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d58b2:	6820      	ldr	r0, [r4, #0]
   d58b4:	f002 fd4a 	bl	d834c <free>
        data_ = d;
   d58b8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d58ba:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d58bc:	e9d6 7300 	ldrd	r7, r3, [r6]
   d58c0:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d58c4:	45b8      	cmp	r8, r7
   d58c6:	d008      	beq.n	d58da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d58c8:	4639      	mov	r1, r7
   d58ca:	4628      	mov	r0, r5
   d58cc:	f005 f8cc 	bl	daa68 <_ZN6StringC1ERKS_>
   d58d0:	7c3b      	ldrb	r3, [r7, #16]
   d58d2:	742b      	strb	r3, [r5, #16]
   d58d4:	3714      	adds	r7, #20
   d58d6:	3514      	adds	r5, #20
   d58d8:	e7f4      	b.n	d58c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d58da:	6873      	ldr	r3, [r6, #4]
   d58dc:	6063      	str	r3, [r4, #4]
}
   d58de:	4620      	mov	r0, r4
   d58e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d58e4 <_GLOBAL__sub_I___appProductID>:
   d58e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   d58e8:	4b78      	ldr	r3, [pc, #480]	; (d5acc <_GLOBAL__sub_I___appProductID+0x1e8>)
              error_(SYSTEM_ERROR_NONE) {
   d58ea:	4d79      	ldr	r5, [pc, #484]	; (d5ad0 <_GLOBAL__sub_I___appProductID+0x1ec>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d58ec:	4e79      	ldr	r6, [pc, #484]	; (d5ad4 <_GLOBAL__sub_I___appProductID+0x1f0>)
   d58ee:	f04f 0901 	mov.w	r9, #1
   d58f2:	f883 9000 	strb.w	r9, [r3]
   d58f6:	4b78      	ldr	r3, [pc, #480]	; (d5ad8 <_GLOBAL__sub_I___appProductID+0x1f4>)
   d58f8:	2208      	movs	r2, #8
   d58fa:	b091      	sub	sp, #68	; 0x44
   d58fc:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d58fe:	f005 fdb1 	bl	db464 <spark_protocol_instance>
   d5902:	2300      	movs	r3, #0
   d5904:	461a      	mov	r2, r3
   d5906:	210d      	movs	r1, #13
   d5908:	f005 fdb4 	bl	db474 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d590c:	f005 fdaa 	bl	db464 <spark_protocol_instance>
   d5910:	2300      	movs	r3, #0
   d5912:	461a      	mov	r2, r3
   d5914:	2103      	movs	r1, #3
   d5916:	f005 fdb5 	bl	db484 <spark_protocol_set_product_firmware_version>
struct currentCounts_structure {                    // currently 10 bytes long
   d591a:	4b70      	ldr	r3, [pc, #448]	; (d5adc <_GLOBAL__sub_I___appProductID+0x1f8>)
   d591c:	2400      	movs	r4, #0
   d591e:	2264      	movs	r2, #100	; 0x64
   d5920:	839c      	strh	r4, [r3, #28]
   d5922:	621a      	str	r2, [r3, #32]
    SleepResult() {}
   d5924:	4b6e      	ldr	r3, [pc, #440]	; (d5ae0 <_GLOBAL__sub_I___appProductID+0x1fc>)
   d5926:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5928:	602c      	str	r4, [r5, #0]
   d592a:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d592c:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d592e:	2002      	movs	r0, #2
   d5930:	f002 fbc2 	bl	d80b8 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5934:	4632      	mov	r2, r6
   d5936:	496b      	ldr	r1, [pc, #428]	; (d5ae4 <_GLOBAL__sub_I___appProductID+0x200>)
   d5938:	4628      	mov	r0, r5
   d593a:	f005 febd 	bl	db6b8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d593e:	4621      	mov	r1, r4
   d5940:	4648      	mov	r0, r9
   d5942:	f002 fbd1 	bl	d80e8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5946:	4649      	mov	r1, r9
   d5948:	2004      	movs	r0, #4
   d594a:	f002 f9c3 	bl	d7cd4 <HAL_Feature_Set>
        : config_(config) {
   d594e:	4866      	ldr	r0, [pc, #408]	; (d5ae8 <_GLOBAL__sub_I___appProductID+0x204>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5950:	4966      	ldr	r1, [pc, #408]	; (d5aec <_GLOBAL__sub_I___appProductID+0x208>)
              valid_(true) {
   d5952:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5956:	4603      	mov	r3, r0
   d5958:	1d02      	adds	r2, r0, #4
   d595a:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d595e:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5960:	4b63      	ldr	r3, [pc, #396]	; (d5af0 <_GLOBAL__sub_I___appProductID+0x20c>)
   d5962:	6043      	str	r3, [r0, #4]
   d5964:	4632      	mov	r2, r6
        config_.wakeup_sources = nullptr;
   d5966:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d596a:	f880 9014 	strb.w	r9, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d596e:	7204      	strb	r4, [r0, #8]
   d5970:	f005 fea2 	bl	db6b8 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5974:	f005 fe50 	bl	db618 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5978:	4d5e      	ldr	r5, [pc, #376]	; (d5af4 <_GLOBAL__sub_I___appProductID+0x210>)
   d597a:	4601      	mov	r1, r0
   d597c:	4623      	mov	r3, r4
   d597e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5982:	4628      	mov	r0, r5
   d5984:	f001 fbd0 	bl	d7128 <_ZN6MB85RCC1ER7TwoWireji>
   d5988:	4b5b      	ldr	r3, [pc, #364]	; (d5af8 <_GLOBAL__sub_I___appProductID+0x214>)
   d598a:	602b      	str	r3, [r5, #0]
   d598c:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d598e:	4d5b      	ldr	r5, [pc, #364]	; (d5afc <_GLOBAL__sub_I___appProductID+0x218>)
   d5990:	495b      	ldr	r1, [pc, #364]	; (d5b00 <_GLOBAL__sub_I___appProductID+0x21c>)
   d5992:	4632      	mov	r2, r6
   d5994:	f005 fe90 	bl	db6b8 <__aeabi_atexit>
   d5998:	495a      	ldr	r1, [pc, #360]	; (d5b04 <_GLOBAL__sub_I___appProductID+0x220>)
   d599a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d599e:	4628      	mov	r0, r5
   d59a0:	f001 ffea 	bl	d7978 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d59a4:	4b58      	ldr	r3, [pc, #352]	; (d5b08 <_GLOBAL__sub_I___appProductID+0x224>)
   d59a6:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d59a8:	4632      	mov	r2, r6
   d59aa:	4958      	ldr	r1, [pc, #352]	; (d5b0c <_GLOBAL__sub_I___appProductID+0x228>)
   d59ac:	4628      	mov	r0, r5
   d59ae:	f005 fe83 	bl	db6b8 <__aeabi_atexit>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d59b2:	f005 fe31 	bl	db618 <_Z19__fetch_global_Wirev>
   d59b6:	4d56      	ldr	r5, [pc, #344]	; (d5b10 <_GLOBAL__sub_I___appProductID+0x22c>)
   d59b8:	4601      	mov	r1, r0
   d59ba:	2269      	movs	r2, #105	; 0x69
   d59bc:	4628      	mov	r0, r5
   d59be:	f000 fe59 	bl	d6674 <_ZN6AB1805C1ER7TwoWireh>
   d59c2:	4628      	mov	r0, r5
FuelGauge fuel;                                     // Enable the fuel gauge API     
   d59c4:	4d53      	ldr	r5, [pc, #332]	; (d5b14 <_GLOBAL__sub_I___appProductID+0x230>)
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d59c6:	4954      	ldr	r1, [pc, #336]	; (d5b18 <_GLOBAL__sub_I___appProductID+0x234>)
   d59c8:	4632      	mov	r2, r6
   d59ca:	f005 fe75 	bl	db6b8 <__aeabi_atexit>
FuelGauge fuel;                                     // Enable the fuel gauge API     
   d59ce:	4621      	mov	r1, r4
   d59d0:	4628      	mov	r0, r5
   d59d2:	f003 f9f1 	bl	d8db8 <_ZN9FuelGaugeC1Eb>
   d59d6:	4632      	mov	r2, r6
   d59d8:	4950      	ldr	r1, [pc, #320]	; (d5b1c <_GLOBAL__sub_I___appProductID+0x238>)
   d59da:	4628      	mov	r0, r5
   d59dc:	f005 fe6c 	bl	db6b8 <__aeabi_atexit>
MMA8452Q accel;                                     // Default constructor, SA0 pin is HIGH
   d59e0:	211d      	movs	r1, #29
   d59e2:	484f      	ldr	r0, [pc, #316]	; (d5b20 <_GLOBAL__sub_I___appProductID+0x23c>)
        filter_(level, filters) {
   d59e4:	4d4f      	ldr	r5, [pc, #316]	; (d5b24 <_GLOBAL__sub_I___appProductID+0x240>)
   d59e6:	f001 fcd3 	bl	d7390 <_ZN8MMA8452QC1Eh>
        capacity_(0) {
   d59ea:	e9cd 4403 	strd	r4, r4, [sp, #12]
   d59ee:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   d59f0:	f005 fc7c 	bl	db2ec <_Z16_fetch_usbserialv>
        stream_(&stream) {
   d59f4:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   d59f8:	4682      	mov	sl, r0
   d59fa:	a903      	add	r1, sp, #12
   d59fc:	a806      	add	r0, sp, #24
   d59fe:	f7ff ff3f 	bl	d5880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5a02:	46ab      	mov	fp, r5
        stream_(&stream) {
   d5a04:	a906      	add	r1, sp, #24
   d5a06:	4640      	mov	r0, r8
   d5a08:	f7ff ff3a 	bl	d5880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5a0c:	4b46      	ldr	r3, [pc, #280]	; (d5b28 <_GLOBAL__sub_I___appProductID+0x244>)
   d5a0e:	f84b 3b04 	str.w	r3, [fp], #4
   d5a12:	af0c      	add	r7, sp, #48	; 0x30
   d5a14:	4641      	mov	r1, r8
   d5a16:	4638      	mov	r0, r7
   d5a18:	f7ff ff32 	bl	d5880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5a1c:	463a      	mov	r2, r7
   d5a1e:	4649      	mov	r1, r9
   d5a20:	4658      	mov	r0, fp
   d5a22:	f004 fa6b 	bl	d9efc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5a26:	4638      	mov	r0, r7
   d5a28:	f7ff fc30 	bl	d528c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5a2c:	4640      	mov	r0, r8
   d5a2e:	f7ff fc2d 	bl	d528c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a32:	4b3e      	ldr	r3, [pc, #248]	; (d5b2c <_GLOBAL__sub_I___appProductID+0x248>)
   d5a34:	602b      	str	r3, [r5, #0]
   d5a36:	f8c5 a020 	str.w	sl, [r5, #32]
   d5a3a:	a806      	add	r0, sp, #24
   d5a3c:	f7ff fc26 	bl	d528c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a40:	4b3b      	ldr	r3, [pc, #236]	; (d5b30 <_GLOBAL__sub_I___appProductID+0x24c>)
   d5a42:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d5a44:	f005 fc52 	bl	db2ec <_Z16_fetch_usbserialv>
   d5a48:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5a4c:	f005 fc3e 	bl	db2cc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5a50:	f003 fefc 	bl	d984c <_ZN5spark10LogManager8instanceEv>
   d5a54:	4629      	mov	r1, r5
   d5a56:	f004 f9e3 	bl	d9e20 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ALL);
   d5a5a:	a803      	add	r0, sp, #12
   d5a5c:	f7ff fc16 	bl	d528c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a60:	4632      	mov	r2, r6
   d5a62:	4934      	ldr	r1, [pc, #208]	; (d5b34 <_GLOBAL__sub_I___appProductID+0x250>)
   d5a64:	4628      	mov	r0, r5
   d5a66:	f005 fe27 	bl	db6b8 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5a6a:	4b33      	ldr	r3, [pc, #204]	; (d5b38 <_GLOBAL__sub_I___appProductID+0x254>)
   d5a6c:	930c      	str	r3, [sp, #48]	; 0x30
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5a6e:	4d33      	ldr	r5, [pc, #204]	; (d5b3c <_GLOBAL__sub_I___appProductID+0x258>)
   d5a70:	4b33      	ldr	r3, [pc, #204]	; (d5b40 <_GLOBAL__sub_I___appProductID+0x25c>)
   d5a72:	602b      	str	r3, [r5, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a74:	e897 0003 	ldmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5a78:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a7c:	e888 0003 	stmia.w	r8, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5a80:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5a84:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5a88:	e898 0003 	ldmia.w	r8, {r0, r1}
   d5a8c:	e883 0003 	stmia.w	r3, {r0, r1}
   d5a90:	4b2c      	ldr	r3, [pc, #176]	; (d5b44 <_GLOBAL__sub_I___appProductID+0x260>)
   d5a92:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a94:	69ab      	ldr	r3, [r5, #24]
   d5a96:	930f      	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5a98:	4b2b      	ldr	r3, [pc, #172]	; (d5b48 <_GLOBAL__sub_I___appProductID+0x264>)
   d5a9a:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5a9c:	4a2b      	ldr	r2, [pc, #172]	; (d5b4c <_GLOBAL__sub_I___appProductID+0x268>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5a9e:	712c      	strb	r4, [r5, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5aa0:	462b      	mov	r3, r5
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5aa2:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5aa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5aa8:	e9cd 9400 	strd	r9, r4, [sp]
   d5aac:	f105 0008 	add.w	r0, r5, #8
      __a = _GLIBCXX_MOVE(__b);
   d5ab0:	940e      	str	r4, [sp, #56]	; 0x38
   d5ab2:	f002 f89f 	bl	d7bf4 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5ab6:	4638      	mov	r0, r7
   d5ab8:	f7fe fc7a 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
Timer countSignalTimer(1000, countSignalTimerISR, true);  // This is how we will ensure the BlueLED stays on long enough for folks to see it.
   d5abc:	4924      	ldr	r1, [pc, #144]	; (d5b50 <_GLOBAL__sub_I___appProductID+0x26c>)
   d5abe:	4632      	mov	r2, r6
   d5ac0:	4628      	mov	r0, r5
   d5ac2:	f005 fdf9 	bl	db6b8 <__aeabi_atexit>
   d5ac6:	b011      	add	sp, #68	; 0x44
   d5ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5acc:	2003e378 	.word	0x2003e378
   d5ad0:	2003e36c 	.word	0x2003e36c
   d5ad4:	2003e320 	.word	0x2003e320
   d5ad8:	2003e379 	.word	0x2003e379
   d5adc:	2003e3f4 	.word	0x2003e3f4
   d5ae0:	ffff0000 	.word	0xffff0000
   d5ae4:	000d42f7 	.word	0x000d42f7
   d5ae8:	2003e3c0 	.word	0x2003e3c0
   d5aec:	000d41d5 	.word	0x000d41d5
   d5af0:	00030010 	.word	0x00030010
   d5af4:	2003e424 	.word	0x2003e424
   d5af8:	000dc8d4 	.word	0x000dc8d4
   d5afc:	2003e478 	.word	0x2003e478
   d5b00:	000d423d 	.word	0x000d423d
   d5b04:	2003f400 	.word	0x2003f400
   d5b08:	000dc8f0 	.word	0x000dc8f0
   d5b0c:	000d4215 	.word	0x000d4215
   d5b10:	2003e388 	.word	0x2003e388
   d5b14:	2003e434 	.word	0x2003e434
   d5b18:	000d6635 	.word	0x000d6635
   d5b1c:	000d8dd9 	.word	0x000d8dd9
   d5b20:	2003e3a8 	.word	0x2003e3a8
   d5b24:	2003e440 	.word	0x2003e440
   d5b28:	000dc8a4 	.word	0x000dc8a4
   d5b2c:	000dceac 	.word	0x000dceac
   d5b30:	000dc8bc 	.word	0x000dc8bc
   d5b34:	000d435d 	.word	0x000d435d
   d5b38:	000d40fb 	.word	0x000d40fb
   d5b3c:	2003e3d8 	.word	0x2003e3d8
   d5b40:	000dc890 	.word	0x000dc890
   d5b44:	000d40e5 	.word	0x000d40e5
   d5b48:	000d40e1 	.word	0x000d40e1
   d5b4c:	000d4265 	.word	0x000d4265
   d5b50:	000d43c5 	.word	0x000d43c5

000d5b54 <_Z14fullModemResetv>:
void fullModemReset() {  // 
   d5b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b58:	b085      	sub	sp, #20
        clearSession_(clearSession) {
   d5b5a:	f04f 0a00 	mov.w	sl, #0
	Particle.disconnect(); 	                                          // Disconnect from the cloud    
   d5b5e:	a801      	add	r0, sp, #4
   d5b60:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d5b64:	f8ad a00c 	strh.w	sl, [sp, #12]
   d5b68:	f002 fe3d 	bl	d87e6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d5b6c:	f7fe fcc6 	bl	d44fc <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d5b70:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d5b74:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d5b76:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5b7a:	f7fe fcbf 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5b7e:	ebb0 060b 	subs.w	r6, r0, fp
   d5b82:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5b86:	45b9      	cmp	r9, r7
   d5b88:	bf08      	it	eq
   d5b8a:	45b0      	cmpeq	r8, r6
   d5b8c:	d305      	bcc.n	d5b9a <_Z14fullModemResetv+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5b8e:	f002 fb25 	bl	d81dc <spark_cloud_flag_connected>
   d5b92:	b910      	cbnz	r0, d5b9a <_Z14fullModemResetv+0x46>
            spark_process();
   d5b94:	f002 fb12 	bl	d81bc <spark_process>
        while (_while() && !_condition()) {
   d5b98:	e7ef      	b.n	d5b7a <_Z14fullModemResetv+0x26>
   d5b9a:	f002 fb1f 	bl	d81dc <spark_cloud_flag_connected>
  Cellular.off();                                                   // Turn off the Cellular modem
   d5b9e:	4821      	ldr	r0, [pc, #132]	; (d5c24 <_Z14fullModemResetv+0xd0>)
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5ba0:	f8df a080 	ldr.w	sl, [pc, #128]	; d5c24 <_Z14fullModemResetv+0xd0>
  Cellular.off();                                                   // Turn off the Cellular modem
   d5ba4:	f7fe fbfe 	bl	d43a4 <_ZN5spark13CellularClass3offEv>
        const system_tick_t start = millis();
   d5ba8:	f7fe fca8 	bl	d44fc <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5bac:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
   d5bb0:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d5bb2:	f247 562f 	movw	r6, #29999	; 0x752f
   d5bb6:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5bb8:	f7fe fca0 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5bbc:	ebb0 0408 	subs.w	r4, r0, r8
   d5bc0:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d5bc4:	42af      	cmp	r7, r5
   d5bc6:	bf08      	it	eq
   d5bc8:	42a6      	cmpeq	r6, r4
   d5bca:	d306      	bcc.n	d5bda <_Z14fullModemResetv+0x86>
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5bcc:	4650      	mov	r0, sl
   d5bce:	f004 fcd5 	bl	da57c <_ZN5spark12NetworkClass5isOffEv>
   d5bd2:	b910      	cbnz	r0, d5bda <_Z14fullModemResetv+0x86>
            spark_process();
   d5bd4:	f002 faf2 	bl	d81bc <spark_process>
        while (_while() && !_condition()) {
   d5bd8:	e7ee      	b.n	d5bb8 <_Z14fullModemResetv+0x64>
   d5bda:	4812      	ldr	r0, [pc, #72]	; (d5c24 <_Z14fullModemResetv+0xd0>)
   d5bdc:	f004 fcce 	bl	da57c <_ZN5spark12NetworkClass5isOffEv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d5be0:	4811      	ldr	r0, [pc, #68]	; (d5c28 <_Z14fullModemResetv+0xd4>)
   d5be2:	2100      	movs	r1, #0
   d5be4:	f000 fe44 	bl	d6870 <_ZN6AB18056setWDTEi>
        if (valid_) {
   d5be8:	4b10      	ldr	r3, [pc, #64]	; (d5c2c <_Z14fullModemResetv+0xd8>)
   d5bea:	7d1a      	ldrb	r2, [r3, #20]
   d5bec:	b10a      	cbz	r2, d5bf2 <_Z14fullModemResetv+0x9e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5bee:	2202      	movs	r2, #2
   d5bf0:	721a      	strb	r2, [r3, #8]
    .gpio(userSwitch,CHANGE)
   d5bf2:	2200      	movs	r2, #0
   d5bf4:	2104      	movs	r1, #4
   d5bf6:	480d      	ldr	r0, [pc, #52]	; (d5c2c <_Z14fullModemResetv+0xd8>)
   d5bf8:	f7fe fc22 	bl	d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
    .duration(10 * 1000);
   d5bfc:	f242 7110 	movw	r1, #10000	; 0x2710
   d5c00:	f7fe fc52 	bl	d44a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
  System.sleep(config);                                             // Put the device to sleep device reboots from here   
   d5c04:	4909      	ldr	r1, [pc, #36]	; (d5c2c <_Z14fullModemResetv+0xd8>)
   d5c06:	a801      	add	r0, sp, #4
   d5c08:	f004 ffd6 	bl	dabb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
   d5c0c:	a801      	add	r0, sp, #4
   d5c0e:	f7fe fb69 	bl	d42e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d5c12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5c16:	4804      	ldr	r0, [pc, #16]	; (d5c28 <_Z14fullModemResetv+0xd4>)
   d5c18:	f000 fe2a 	bl	d6870 <_ZN6AB18056setWDTEi>
}
   d5c1c:	b005      	add	sp, #20
   d5c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c22:	bf00      	nop
   d5c24:	2003e50c 	.word	0x2003e50c
   d5c28:	2003e388 	.word	0x2003e388
   d5c2c:	2003e3c0 	.word	0x2003e3c0

000d5c30 <_Z22disconnectFromParticlev>:
{
   d5c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c34:	b085      	sub	sp, #20
        clearSession_(clearSession) {
   d5c36:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();
   d5c3a:	a801      	add	r0, sp, #4
   d5c3c:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d5c40:	f8ad a00c 	strh.w	sl, [sp, #12]
   d5c44:	f002 fdcf 	bl	d87e6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d5c48:	f7fe fc58 	bl	d44fc <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d5c4c:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d5c50:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d5c52:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5c56:	f7fe fc51 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5c5a:	ebb0 060b 	subs.w	r6, r0, fp
   d5c5e:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5c62:	45b9      	cmp	r9, r7
   d5c64:	bf08      	it	eq
   d5c66:	45b0      	cmpeq	r8, r6
   d5c68:	d305      	bcc.n	d5c76 <_Z22disconnectFromParticlev+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5c6a:	f002 fab7 	bl	d81dc <spark_cloud_flag_connected>
   d5c6e:	b110      	cbz	r0, d5c76 <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d5c70:	f002 faa4 	bl	d81bc <spark_process>
        while (_while() && !_condition()) {
   d5c74:	e7ef      	b.n	d5c56 <_Z22disconnectFromParticlev+0x26>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c76:	4e18      	ldr	r6, [pc, #96]	; (d5cd8 <_Z22disconnectFromParticlev+0xa8>)
   d5c78:	f002 fab0 	bl	d81dc <spark_cloud_flag_connected>
   d5c7c:	2200      	movs	r2, #0
   d5c7e:	2102      	movs	r1, #2
   d5c80:	6870      	ldr	r0, [r6, #4]
   d5c82:	f002 fb0b 	bl	d829c <network_disconnect>
  Cellular.off();                                                 // Turn off the cellular modem
   d5c86:	4630      	mov	r0, r6
   d5c88:	f7fe fb8c 	bl	d43a4 <_ZN5spark13CellularClass3offEv>
        const system_tick_t start = millis();
   d5c8c:	f7fe fc36 	bl	d44fc <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5c90:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d5c94:	4607      	mov	r7, r0
        while (_while() && !_condition()) {
   d5c96:	f247 582f 	movw	r8, #29999	; 0x752f
   d5c9a:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5c9e:	f7fe fc2d 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5ca2:	1bc4      	subs	r4, r0, r7
   d5ca4:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d5ca8:	45a9      	cmp	r9, r5
   d5caa:	bf08      	it	eq
   d5cac:	45a0      	cmpeq	r8, r4
   d5cae:	d306      	bcc.n	d5cbe <_Z22disconnectFromParticlev+0x8e>
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5cb0:	4630      	mov	r0, r6
   d5cb2:	f004 fc63 	bl	da57c <_ZN5spark12NetworkClass5isOffEv>
   d5cb6:	b910      	cbnz	r0, d5cbe <_Z22disconnectFromParticlev+0x8e>
            spark_process();
   d5cb8:	f002 fa80 	bl	d81bc <spark_process>
        while (_while() && !_condition()) {
   d5cbc:	e7ef      	b.n	d5c9e <_Z22disconnectFromParticlev+0x6e>
   d5cbe:	4806      	ldr	r0, [pc, #24]	; (d5cd8 <_Z22disconnectFromParticlev+0xa8>)
   d5cc0:	f004 fc5c 	bl	da57c <_ZN5spark12NetworkClass5isOffEv>
  sysStatus.connectedStatus = false;
   d5cc4:	4b05      	ldr	r3, [pc, #20]	; (d5cdc <_Z22disconnectFromParticlev+0xac>)
   d5cc6:	2200      	movs	r2, #0
   d5cc8:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d5cca:	4b05      	ldr	r3, [pc, #20]	; (d5ce0 <_Z22disconnectFromParticlev+0xb0>)
   d5ccc:	2001      	movs	r0, #1
   d5cce:	7018      	strb	r0, [r3, #0]
}
   d5cd0:	b005      	add	sp, #20
   d5cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5cd6:	bf00      	nop
   d5cd8:	2003e50c 	.word	0x2003e50c
   d5cdc:	2003e4c0 	.word	0x2003e4c0
   d5ce0:	2003e4f0 	.word	0x2003e4f0

000d5ce4 <loop>:
{
   d5ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d5ce8:	4cb0      	ldr	r4, [pc, #704]	; (d5fac <loop+0x2c8>)
   d5cea:	f8df 8320 	ldr.w	r8, [pc, #800]	; d600c <loop+0x328>
   d5cee:	7823      	ldrb	r3, [r4, #0]
   d5cf0:	4faf      	ldr	r7, [pc, #700]	; (d5fb0 <loop+0x2cc>)
   d5cf2:	4eb0      	ldr	r6, [pc, #704]	; (d5fb4 <loop+0x2d0>)
   d5cf4:	3b01      	subs	r3, #1
{
   d5cf6:	b097      	sub	sp, #92	; 0x5c
   d5cf8:	2b06      	cmp	r3, #6
   d5cfa:	f200 80b6 	bhi.w	d5e6a <loop+0x186>
   d5cfe:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5d02:	0281      	.short	0x0281
   d5d04:	003b0007 	.word	0x003b0007
   d5d08:	019500f2 	.word	0x019500f2
   d5d0c:	02510216 	.word	0x02510216
    if (state != oldState) publishStateTransition();
   d5d10:	4ba9      	ldr	r3, [pc, #676]	; (d5fb8 <loop+0x2d4>)
   d5d12:	781b      	ldrb	r3, [r3, #0]
   d5d14:	2b02      	cmp	r3, #2
   d5d16:	d001      	beq.n	d5d1c <loop+0x38>
   d5d18:	f7ff f9a6 	bl	d5068 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d5d1c:	4da7      	ldr	r5, [pc, #668]	; (d5fbc <loop+0x2d8>)
   d5d1e:	79ab      	ldrb	r3, [r5, #6]
   d5d20:	b153      	cbz	r3, d5d38 <loop+0x54>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5d22:	f001 ffff 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
   d5d26:	4ba6      	ldr	r3, [pc, #664]	; (d5fc0 <loop+0x2dc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	1ac0      	subs	r0, r0, r3
   d5d2c:	4ba5      	ldr	r3, [pc, #660]	; (d5fc4 <loop+0x2e0>)
   d5d2e:	681b      	ldr	r3, [r3, #0]
   d5d30:	4298      	cmp	r0, r3
   d5d32:	bf84      	itt	hi
   d5d34:	2304      	movhi	r3, #4
   d5d36:	7023      	strbhi	r3, [r4, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = REPORTING_STATE;                                  // We want to report on the hour but not after bedtime
   d5d38:	f005 f9a2 	bl	db080 <_ZN9TimeClass4hourEv>
   d5d3c:	4ba2      	ldr	r3, [pc, #648]	; (d5fc8 <loop+0x2e4>)
   d5d3e:	4681      	mov	r9, r0
   d5d40:	2100      	movs	r1, #0
   d5d42:	6818      	ldr	r0, [r3, #0]
   d5d44:	f004 fffe 	bl	dad44 <_ZN9TimeClass4hourEx>
   d5d48:	4581      	cmp	r9, r0
   d5d4a:	bf1c      	itt	ne
   d5d4c:	2306      	movne	r3, #6
   d5d4e:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5d50:	f005 f996 	bl	db080 <_ZN9TimeClass4hourEv>
   d5d54:	7f6b      	ldrb	r3, [r5, #29]
   d5d56:	4298      	cmp	r0, r3
   d5d58:	db08      	blt.n	d5d6c <loop+0x88>
   d5d5a:	2303      	movs	r3, #3
   d5d5c:	7023      	strb	r3, [r4, #0]
    if (particleConnectionNeeded) state = CONNECTING_STATE;                                                   // Someone raised the connection neeeded flag - will return to IDLE once attempt is completed
   d5d5e:	4b9b      	ldr	r3, [pc, #620]	; (d5fcc <loop+0x2e8>)
   d5d60:	781b      	ldrb	r3, [r3, #0]
   d5d62:	2b00      	cmp	r3, #0
   d5d64:	f000 8081 	beq.w	d5e6a <loop+0x186>
      state = CONNECTING_STATE;                                       // Will send us to connecting state - and it will send us back here                                             
   d5d68:	2305      	movs	r3, #5
   d5d6a:	e012      	b.n	d5d92 <loop+0xae>
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5d6c:	f005 f988 	bl	db080 <_ZN9TimeClass4hourEv>
   d5d70:	7f2b      	ldrb	r3, [r5, #28]
   d5d72:	4298      	cmp	r0, r3
   d5d74:	dbf1      	blt.n	d5d5a <loop+0x76>
   d5d76:	e7f2      	b.n	d5d5e <loop+0x7a>
    if (state != oldState) publishStateTransition();
   d5d78:	4b8f      	ldr	r3, [pc, #572]	; (d5fb8 <loop+0x2d4>)
   d5d7a:	781b      	ldrb	r3, [r3, #0]
   d5d7c:	2b03      	cmp	r3, #3
   d5d7e:	d001      	beq.n	d5d84 <loop+0xa0>
   d5d80:	f7ff f972 	bl	d5068 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d5d84:	2002      	movs	r0, #2
   d5d86:	f003 f9a9 	bl	d90dc <_Z15detachInterruptt>
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
   d5d8a:	4b91      	ldr	r3, [pc, #580]	; (d5fd0 <loop+0x2ec>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	b113      	cbz	r3, d5d96 <loop+0xb2>
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d5d90:	2306      	movs	r3, #6
      state = ERROR_STATE;                                            // Response timed out
   d5d92:	7023      	strb	r3, [r4, #0]
   d5d94:	e069      	b.n	d5e6a <loop+0x186>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5d96:	4b89      	ldr	r3, [pc, #548]	; (d5fbc <loop+0x2d8>)
   d5d98:	78da      	ldrb	r2, [r3, #3]
   d5d9a:	4699      	mov	r9, r3
   d5d9c:	b10a      	cbz	r2, d5da2 <loop+0xbe>
   d5d9e:	f7ff ff47 	bl	d5c30 <_Z22disconnectFromParticlev>
    bool stopWDT() { return setWDT(0); };
   d5da2:	2100      	movs	r1, #0
   d5da4:	488b      	ldr	r0, [pc, #556]	; (d5fd4 <loop+0x2f0>)
   d5da6:	f000 fd63 	bl	d6870 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d5daa:	f005 f958 	bl	db05e <_ZN9TimeClass3nowEv>
   d5dae:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d5db2:	fb90 f3f5 	sdiv	r3, r0, r5
   d5db6:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d5dba:	4b87      	ldr	r3, [pc, #540]	; (d5fd8 <loop+0x2f4>)
   d5dbc:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d5dc0:	7d1a      	ldrb	r2, [r3, #20]
   d5dc2:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d5dc6:	bfa8      	it	ge
   d5dc8:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d5dcc:	b10a      	cbz	r2, d5dd2 <loop+0xee>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5dce:	2202      	movs	r2, #2
   d5dd0:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5dd2:	2200      	movs	r2, #0
   d5dd4:	2104      	movs	r1, #4
   d5dd6:	4880      	ldr	r0, [pc, #512]	; (d5fd8 <loop+0x2f4>)
   d5dd8:	f7fe fb32 	bl	d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5ddc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5de0:	4369      	muls	r1, r5
   d5de2:	f7fe fb61 	bl	d44a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d5de6:	497c      	ldr	r1, [pc, #496]	; (d5fd8 <loop+0x2f4>)
   d5de8:	a803      	add	r0, sp, #12
   d5dea:	f004 fee5 	bl	dabb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d5dee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5df2:	4878      	ldr	r0, [pc, #480]	; (d5fd4 <loop+0x2f0>)
   d5df4:	f000 fd3c 	bl	d6870 <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d5df8:	4878      	ldr	r0, [pc, #480]	; (d5fdc <loop+0x2f8>)
   d5dfa:	f003 f877 	bl	d8eec <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d5dfe:	4877      	ldr	r0, [pc, #476]	; (d5fdc <loop+0x2f8>)
   d5e00:	f003 f86b 	bl	d8eda <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5e04:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5e06:	b19b      	cbz	r3, d5e30 <loop+0x14c>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5e08:	889a      	ldrh	r2, [r3, #4]
   d5e0a:	2a01      	cmp	r2, #1
   d5e0c:	d110      	bne.n	d5e30 <loop+0x14c>
    if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   d5e0e:	899b      	ldrh	r3, [r3, #12]
   d5e10:	2b04      	cmp	r3, #4
   d5e12:	d10d      	bne.n	d5e30 <loop+0x14c>
      setLowPowerMode("0");
   d5e14:	4972      	ldr	r1, [pc, #456]	; (d5fe0 <loop+0x2fc>)
   d5e16:	a806      	add	r0, sp, #24
   d5e18:	f004 fddb 	bl	da9d2 <_ZN6StringC1EPKc>
   d5e1c:	a806      	add	r0, sp, #24
   d5e1e:	f7fe fd7f 	bl	d4920 <_Z15setLowPowerMode6String>
   d5e22:	a806      	add	r0, sp, #24
   d5e24:	f004 fd8a 	bl	da93c <_ZN6StringD1Ev>
      sysStatus.openTime = 0;
   d5e28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d5e2c:	f8a9 301c 	strh.w	r3, [r9, #28]
    if (Time.hour() < sysStatus.closeTime && Time.hour() >= sysStatus.openTime) { // We might wake up and find it is opening time.  Park is open let's get ready for the day
   d5e30:	f005 f926 	bl	db080 <_ZN9TimeClass4hourEv>
   d5e34:	f899 301d 	ldrb.w	r3, [r9, #29]
   d5e38:	4298      	cmp	r0, r3
   d5e3a:	da11      	bge.n	d5e60 <loop+0x17c>
   d5e3c:	f005 f920 	bl	db080 <_ZN9TimeClass4hourEv>
   d5e40:	f899 301c 	ldrb.w	r3, [r9, #28]
   d5e44:	4298      	cmp	r0, r3
   d5e46:	db0b      	blt.n	d5e60 <loop+0x17c>
      attachInterrupt(intPin, sensorISR, RISING);                      // Pressure Sensor interrupt from low to high
   d5e48:	2300      	movs	r3, #0
   d5e4a:	9300      	str	r3, [sp, #0]
   d5e4c:	2201      	movs	r2, #1
   d5e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5e52:	4964      	ldr	r1, [pc, #400]	; (d5fe4 <loop+0x300>)
   d5e54:	2002      	movs	r0, #2
   d5e56:	f003 f917 	bl	d9088 <_Z15attachInterrupttPFvvE13InterruptModeah>
      stayAwake = stayAwakeLong;                                       // Keeps Boron awake after deep sleep - may not be needed
   d5e5a:	4b5a      	ldr	r3, [pc, #360]	; (d5fc4 <loop+0x2e0>)
   d5e5c:	4a62      	ldr	r2, [pc, #392]	; (d5fe8 <loop+0x304>)
   d5e5e:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d5e60:	2302      	movs	r3, #2
        freeWakeupSourceMemory();
   d5e62:	a803      	add	r0, sp, #12
   d5e64:	7023      	strb	r3, [r4, #0]
   d5e66:	f7fe fa3d 	bl	d42e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
  if (sensorDetect) {
   d5e6a:	f898 3000 	ldrb.w	r3, [r8]
   d5e6e:	b10b      	cbz	r3, d5e74 <loop+0x190>
    recordCount();
   d5e70:	f7fe fdbe 	bl	d49f0 <_Z11recordCountv>
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d5e74:	4857      	ldr	r0, [pc, #348]	; (d5fd4 <loop+0x2f0>)
   d5e76:	f001 f8f3 	bl	d7060 <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d5e7a:	783b      	ldrb	r3, [r7, #0]
   d5e7c:	b133      	cbz	r3, d5e8c <loop+0x1a8>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d5e7e:	4a4f      	ldr	r2, [pc, #316]	; (d5fbc <loop+0x2d8>)
   d5e80:	485a      	ldr	r0, [pc, #360]	; (d5fec <loop+0x308>)
   d5e82:	2101      	movs	r1, #1
   d5e84:	f7ff fa19 	bl	d52ba <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d5e88:	2300      	movs	r3, #0
   d5e8a:	703b      	strb	r3, [r7, #0]
  if (currentCountsWriteNeeded) {
   d5e8c:	7833      	ldrb	r3, [r6, #0]
   d5e8e:	b13b      	cbz	r3, d5ea0 <loop+0x1bc>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5e90:	2324      	movs	r3, #36	; 0x24
   d5e92:	4a4f      	ldr	r2, [pc, #316]	; (d5fd0 <loop+0x2ec>)
   d5e94:	4855      	ldr	r0, [pc, #340]	; (d5fec <loop+0x308>)
   d5e96:	2150      	movs	r1, #80	; 0x50
   d5e98:	f001 f9dd 	bl	d7256 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d5e9c:	2300      	movs	r3, #0
   d5e9e:	7033      	strb	r3, [r6, #0]
  if (outOfMemory >= 0) {                                             // In this function we are going to reset the system if there is an out of memory error
   d5ea0:	4b53      	ldr	r3, [pc, #332]	; (d5ff0 <loop+0x30c>)
   d5ea2:	681b      	ldr	r3, [r3, #0]
   d5ea4:	2b00      	cmp	r3, #0
   d5ea6:	db1b      	blt.n	d5ee0 <loop+0x1fc>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d5ea8:	4a52      	ldr	r2, [pc, #328]	; (d5ff4 <loop+0x310>)
   d5eaa:	2140      	movs	r1, #64	; 0x40
   d5eac:	a806      	add	r0, sp, #24
   d5eae:	f002 fa65 	bl	d837c <snprintf>
    Log.info(message);
   d5eb2:	a906      	add	r1, sp, #24
   d5eb4:	4850      	ldr	r0, [pc, #320]	; (d5ff8 <loop+0x314>)
   d5eb6:	f7fe fb46 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d5eba:	2064      	movs	r0, #100	; 0x64
   d5ebc:	f002 fab2 	bl	d8424 <delay>
        val_(0) {
   d5ec0:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);                   // Publish to the console - this is important so we will not filter on verboseMod
   d5ec2:	f88d 3000 	strb.w	r3, [sp]
   d5ec6:	4b4d      	ldr	r3, [pc, #308]	; (d5ffc <loop+0x318>)
   d5ec8:	494d      	ldr	r1, [pc, #308]	; (d6000 <loop+0x31c>)
   d5eca:	781b      	ldrb	r3, [r3, #0]
   d5ecc:	484d      	ldr	r0, [pc, #308]	; (d6004 <loop+0x320>)
   d5ece:	aa06      	add	r2, sp, #24
   d5ed0:	f7fe fb67 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d5ed4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5ed8:	f002 faa4 	bl	d8424 <delay>
    System.reset();                                                   // An out of memory condition occurred - reset device.
   d5edc:	f004 fe68 	bl	dabb0 <_ZN11SystemClass5resetEv>
}
   d5ee0:	b017      	add	sp, #92	; 0x5c
   d5ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (state != oldState) publishStateTransition();
   d5ee6:	4b34      	ldr	r3, [pc, #208]	; (d5fb8 <loop+0x2d4>)
   d5ee8:	781b      	ldrb	r3, [r3, #0]
   d5eea:	2b04      	cmp	r3, #4
   d5eec:	d001      	beq.n	d5ef2 <loop+0x20e>
   d5eee:	f7ff f8bb 	bl	d5068 <_Z22publishStateTransitionv>
    if (sensorDetect || countSignalTimer.isActive()) break;           // Don't nap until we are done with event
   d5ef2:	f898 3000 	ldrb.w	r3, [r8]
   d5ef6:	2b00      	cmp	r3, #0
   d5ef8:	d1b7      	bne.n	d5e6a <loop+0x186>
   d5efa:	4843      	ldr	r0, [pc, #268]	; (d6008 <loop+0x324>)
   d5efc:	f7fe fb19 	bl	d4532 <_ZNK5Timer8isActiveEv>
   d5f00:	2800      	cmp	r0, #0
   d5f02:	d1b2      	bne.n	d5e6a <loop+0x186>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d5f04:	4b2d      	ldr	r3, [pc, #180]	; (d5fbc <loop+0x2d8>)
   d5f06:	78db      	ldrb	r3, [r3, #3]
   d5f08:	b10b      	cbz	r3, d5f0e <loop+0x22a>
   d5f0a:	f7ff fe91 	bl	d5c30 <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                 // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d5f0e:	4b2d      	ldr	r3, [pc, #180]	; (d5fc4 <loop+0x2e0>)
    bool stopWDT() { return setWDT(0); };
   d5f10:	4830      	ldr	r0, [pc, #192]	; (d5fd4 <loop+0x2f0>)
   d5f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5f16:	2100      	movs	r1, #0
   d5f18:	601a      	str	r2, [r3, #0]
   d5f1a:	f000 fca9 	bl	d6870 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d5f1e:	f005 f89e 	bl	db05e <_ZN9TimeClass3nowEv>
   d5f22:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d5f26:	fb90 f3f5 	sdiv	r3, r0, r5
   d5f2a:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d5f2e:	4b2a      	ldr	r3, [pc, #168]	; (d5fd8 <loop+0x2f4>)
   d5f30:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d5f34:	7d1a      	ldrb	r2, [r3, #20]
   d5f36:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d5f3a:	bfa8      	it	ge
   d5f3c:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d5f40:	b10a      	cbz	r2, d5f46 <loop+0x262>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5f42:	2202      	movs	r2, #2
   d5f44:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5f46:	2200      	movs	r2, #0
   d5f48:	2104      	movs	r1, #4
   d5f4a:	4823      	ldr	r0, [pc, #140]	; (d5fd8 <loop+0x2f4>)
   d5f4c:	f7fe fa78 	bl	d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .gpio(intPin,RISING)
   d5f50:	2201      	movs	r2, #1
   d5f52:	2102      	movs	r1, #2
   d5f54:	f7fe fa74 	bl	d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5f58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5f5c:	4369      	muls	r1, r5
   d5f5e:	f7fe faa3 	bl	d44a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
    if (sensorDetect) break;                                           // Don't nap until we are done with event - one last check as interrupts can come any time.
   d5f62:	f898 3000 	ldrb.w	r3, [r8]
   d5f66:	2b00      	cmp	r3, #0
   d5f68:	f47f af7f 	bne.w	d5e6a <loop+0x186>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d5f6c:	491a      	ldr	r1, [pc, #104]	; (d5fd8 <loop+0x2f4>)
   d5f6e:	a803      	add	r0, sp, #12
   d5f70:	f004 fe22 	bl	dabb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d5f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5f78:	4816      	ldr	r0, [pc, #88]	; (d5fd4 <loop+0x2f0>)
   d5f7a:	f000 fc79 	bl	d6870 <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d5f7e:	4817      	ldr	r0, [pc, #92]	; (d5fdc <loop+0x2f8>)
   d5f80:	f002 ffb4 	bl	d8eec <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d5f84:	4815      	ldr	r0, [pc, #84]	; (d5fdc <loop+0x2f8>)
   d5f86:	f002 ffa8 	bl	d8eda <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5f8a:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5f8c:	2b00      	cmp	r3, #0
   d5f8e:	f43f af67 	beq.w	d5e60 <loop+0x17c>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d5f92:	889a      	ldrh	r2, [r3, #4]
   d5f94:	2a01      	cmp	r2, #1
   d5f96:	f47f af63 	bne.w	d5e60 <loop+0x17c>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d5f9a:	899b      	ldrh	r3, [r3, #12]
    if (result.wakeupPin() == intPin) {                                // Executions starts here after sleep - time or sensor interrupt?
   d5f9c:	2b02      	cmp	r3, #2
   d5f9e:	d137      	bne.n	d6010 <loop+0x32c>
   d5fa0:	f001 fec0 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d5fa4:	4b06      	ldr	r3, [pc, #24]	; (d5fc0 <loop+0x2dc>)
   d5fa6:	6018      	str	r0, [r3, #0]
   d5fa8:	e75a      	b.n	d5e60 <loop+0x17c>
   d5faa:	bf00      	nop
   d5fac:	2003e4b5 	.word	0x2003e4b5
   d5fb0:	2003e4f0 	.word	0x2003e4f0
   d5fb4:	2003e418 	.word	0x2003e418
   d5fb8:	2003e474 	.word	0x2003e474
   d5fbc:	2003e4c0 	.word	0x2003e4c0
   d5fc0:	2003e4bc 	.word	0x2003e4bc
   d5fc4:	2003e4b8 	.word	0x2003e4b8
   d5fc8:	2003e43c 	.word	0x2003e43c
   d5fcc:	2003e475 	.word	0x2003e475
   d5fd0:	2003e3f4 	.word	0x2003e3f4
   d5fd4:	2003e388 	.word	0x2003e388
   d5fd8:	2003e3c0 	.word	0x2003e3c0
   d5fdc:	2003e434 	.word	0x2003e434
   d5fe0:	000dc622 	.word	0x000dc622
   d5fe4:	000d4155 	.word	0x000d4155
   d5fe8:	00015f90 	.word	0x00015f90
   d5fec:	2003e424 	.word	0x2003e424
   d5ff0:	2003e228 	.word	0x2003e228
   d5ff4:	000dc860 	.word	0x000dc860
   d5ff8:	2003e5e0 	.word	0x2003e5e0
   d5ffc:	2003e378 	.word	0x2003e378
   d6000:	000dc87f 	.word	0x000dc87f
   d6004:	2003e478 	.word	0x2003e478
   d6008:	2003e3d8 	.word	0x2003e3d8
   d600c:	2003e4b4 	.word	0x2003e4b4
    else if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d6010:	2b04      	cmp	r3, #4
   d6012:	f47f af25 	bne.w	d5e60 <loop+0x17c>
   d6016:	49a3      	ldr	r1, [pc, #652]	; (d62a4 <loop+0x5c0>)
   d6018:	a806      	add	r0, sp, #24
   d601a:	f004 fcda 	bl	da9d2 <_ZN6StringC1EPKc>
   d601e:	a806      	add	r0, sp, #24
   d6020:	f7fe fc7e 	bl	d4920 <_Z15setLowPowerMode6String>
   d6024:	a806      	add	r0, sp, #24
   d6026:	f004 fc89 	bl	da93c <_ZN6StringD1Ev>
   d602a:	e719      	b.n	d5e60 <loop+0x17c>
    if (state != oldState) {
   d602c:	4b9e      	ldr	r3, [pc, #632]	; (d62a8 <loop+0x5c4>)
   d602e:	781b      	ldrb	r3, [r3, #0]
   d6030:	2b05      	cmp	r3, #5
   d6032:	d013      	beq.n	d605c <loop+0x378>
      if (oldState == REPORTING_STATE) returnToReporting = true;
   d6034:	1f9a      	subs	r2, r3, #6
   d6036:	4253      	negs	r3, r2
   d6038:	4153      	adcs	r3, r2
   d603a:	4a9c      	ldr	r2, [pc, #624]	; (d62ac <loop+0x5c8>)
   d603c:	7013      	strb	r3, [r2, #0]
      publishStateTransition();
   d603e:	f7ff f813 	bl	d5068 <_Z22publishStateTransitionv>
      connectionStartTime = Time.now();                 // Start the clock first time we enter the state
   d6042:	f005 f80c 	bl	db05e <_ZN9TimeClass3nowEv>
   d6046:	4b9a      	ldr	r3, [pc, #616]	; (d62b0 <loop+0x5cc>)
   d6048:	6018      	str	r0, [r3, #0]
        network_on(*this, 0, 0, NULL);
   d604a:	489a      	ldr	r0, [pc, #616]	; (d62b4 <loop+0x5d0>)
   d604c:	2300      	movs	r3, #0
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	461a      	mov	r2, r3
   d6052:	4619      	mov	r1, r3
   d6054:	f002 f932 	bl	d82bc <network_on>
        spark_cloud_flag_connect();
   d6058:	f002 f8b8 	bl	d81cc <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d605c:	f002 f8be 	bl	d81dc <spark_cloud_flag_connected>
   d6060:	f8df 9280 	ldr.w	r9, [pc, #640]	; d62e4 <loop+0x600>
    if (Particle.connected()) {
   d6064:	4605      	mov	r5, r0
   d6066:	2800      	cmp	r0, #0
   d6068:	d041      	beq.n	d60ee <loop+0x40a>
      sysStatus.connectedStatus = true;
   d606a:	4d93      	ldr	r5, [pc, #588]	; (d62b8 <loop+0x5d4>)
      particleConnectionNeeded = false;                               // Connected so we don't need this flag
   d606c:	2300      	movs	r3, #0
   d606e:	f889 3000 	strb.w	r3, [r9]
      sysStatus.connectedStatus = true;
   d6072:	2301      	movs	r3, #1
   d6074:	70eb      	strb	r3, [r5, #3]
      sysStatus.lastConnection = Time.now();                          // This is the last time we attempted to connect
   d6076:	f004 fff2 	bl	db05e <_ZN9TimeClass3nowEv>
   d607a:	6268      	str	r0, [r5, #36]	; 0x24
    if (!particleConnectionNeeded) {                                  // Whether the connection was successful or not, we will collect and publish metrics
   d607c:	f899 3000 	ldrb.w	r3, [r9]
   d6080:	2b00      	cmp	r3, #0
   d6082:	f47f aef2 	bne.w	d5e6a <loop+0x186>
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d6086:	f004 ffea 	bl	db05e <_ZN9TimeClass3nowEv>
   d608a:	4b89      	ldr	r3, [pc, #548]	; (d62b0 <loop+0x5cc>)
   d608c:	4d8a      	ldr	r5, [pc, #552]	; (d62b8 <loop+0x5d4>)
   d608e:	681b      	ldr	r3, [r3, #0]
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d6090:	4a8a      	ldr	r2, [pc, #552]	; (d62bc <loop+0x5d8>)
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d6092:	1ac0      	subs	r0, r0, r3
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d6094:	4b8a      	ldr	r3, [pc, #552]	; (d62c0 <loop+0x5dc>)
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d6096:	8b91      	ldrh	r1, [r2, #28]
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d6098:	681b      	ldr	r3, [r3, #0]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d609a:	b280      	uxth	r0, r0
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d609c:	4298      	cmp	r0, r3
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d609e:	8528      	strh	r0, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d60a0:	bf88      	it	hi
   d60a2:	852b      	strhhi	r3, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d60a4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   d60a6:	4299      	cmp	r1, r3
   d60a8:	bf38      	it	cc
   d60aa:	8393      	strhcc	r3, [r2, #28]
      snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d60ac:	2120      	movs	r1, #32
   d60ae:	4a85      	ldr	r2, [pc, #532]	; (d62c4 <loop+0x5e0>)
   d60b0:	a806      	add	r0, sp, #24
   d60b2:	f002 f963 	bl	d837c <snprintf>
      Log.info(connectionStr);
   d60b6:	4884      	ldr	r0, [pc, #528]	; (d62c8 <loop+0x5e4>)
   d60b8:	a906      	add	r1, sp, #24
   d60ba:	f7fe fa44 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
      if (sysStatus.verboseMode) publishQueue.publish("Cellular",connectionStr,PRIVATE);
   d60be:	792b      	ldrb	r3, [r5, #4]
   d60c0:	b14b      	cbz	r3, d60d6 <loop+0x3f2>
   d60c2:	2300      	movs	r3, #0
   d60c4:	f88d 3000 	strb.w	r3, [sp]
   d60c8:	4b80      	ldr	r3, [pc, #512]	; (d62cc <loop+0x5e8>)
   d60ca:	4981      	ldr	r1, [pc, #516]	; (d62d0 <loop+0x5ec>)
   d60cc:	781b      	ldrb	r3, [r3, #0]
   d60ce:	4881      	ldr	r0, [pc, #516]	; (d62d4 <loop+0x5f0>)
   d60d0:	aa06      	add	r2, sp, #24
   d60d2:	f7fe fa66 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      systemStatusWriteNeeded = true;
   d60d6:	2301      	movs	r3, #1
   d60d8:	703b      	strb	r3, [r7, #0]
      currentCountsWriteNeeded = true;
   d60da:	7033      	strb	r3, [r6, #0]
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d60dc:	78eb      	ldrb	r3, [r5, #3]
   d60de:	b123      	cbz	r3, d60ea <loop+0x406>
   d60e0:	4b72      	ldr	r3, [pc, #456]	; (d62ac <loop+0x5c8>)
   d60e2:	781b      	ldrb	r3, [r3, #0]
   d60e4:	2b00      	cmp	r3, #0
   d60e6:	f47f ae53 	bne.w	d5d90 <loop+0xac>
      state = IDLE_STATE;
   d60ea:	2302      	movs	r3, #2
   d60ec:	e651      	b.n	d5d92 <loop+0xae>
    else if ((Time.now() - connectionStartTime) > connectMaxTimeSec) {
   d60ee:	f004 ffb6 	bl	db05e <_ZN9TimeClass3nowEv>
   d60f2:	4b6f      	ldr	r3, [pc, #444]	; (d62b0 <loop+0x5cc>)
   d60f4:	681b      	ldr	r3, [r3, #0]
   d60f6:	1ac0      	subs	r0, r0, r3
   d60f8:	4b71      	ldr	r3, [pc, #452]	; (d62c0 <loop+0x5dc>)
   d60fa:	681b      	ldr	r3, [r3, #0]
   d60fc:	4298      	cmp	r0, r3
   d60fe:	d9bd      	bls.n	d607c <loop+0x398>
      particleConnectionNeeded = false;                               // Timed out so we will give up until the next hour
   d6100:	f889 5000 	strb.w	r5, [r9]
      if ((Time.now() - sysStatus.lastConnection) > 7200) {             // Only sends to ERROR_STATE if it has been over 2 hours
   d6104:	f004 ffab 	bl	db05e <_ZN9TimeClass3nowEv>
   d6108:	4b6b      	ldr	r3, [pc, #428]	; (d62b8 <loop+0x5d4>)
   d610a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   d610c:	1a80      	subs	r0, r0, r2
   d610e:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d6112:	d906      	bls.n	d6122 <loop+0x43e>
        state = ERROR_STATE;     
   d6114:	2301      	movs	r3, #1
   d6116:	7023      	strb	r3, [r4, #0]
   d6118:	f001 fe04 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   d611c:	4b6e      	ldr	r3, [pc, #440]	; (d62d8 <loop+0x5f4>)
   d611e:	6018      	str	r0, [r3, #0]
        break;
   d6120:	e6a3      	b.n	d5e6a <loop+0x186>
      Log.info("cloud connection unsuccessful");
   d6122:	496e      	ldr	r1, [pc, #440]	; (d62dc <loop+0x5f8>)
   d6124:	4868      	ldr	r0, [pc, #416]	; (d62c8 <loop+0x5e4>)
      sysStatus.connectedStatus = false;
   d6126:	70dd      	strb	r5, [r3, #3]
      Log.info("cloud connection unsuccessful");
   d6128:	f7fe fa0d 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d612c:	e7a6      	b.n	d607c <loop+0x398>
    if (state != oldState) publishStateTransition();
   d612e:	4b5e      	ldr	r3, [pc, #376]	; (d62a8 <loop+0x5c4>)
   d6130:	781b      	ldrb	r3, [r3, #0]
   d6132:	2b06      	cmp	r3, #6
   d6134:	d001      	beq.n	d613a <loop+0x456>
   d6136:	f7fe ff97 	bl	d5068 <_Z22publishStateTransitionv>
    lastReportedTime = Time.now();                                    // We are only going to try once
   d613a:	f004 ff90 	bl	db05e <_ZN9TimeClass3nowEv>
    if (!sysStatus.connectedStatus) {                                 // Asking us to report but not connected
   d613e:	4d5e      	ldr	r5, [pc, #376]	; (d62b8 <loop+0x5d4>)
    lastReportedTime = Time.now();                                    // We are only going to try once
   d6140:	4b67      	ldr	r3, [pc, #412]	; (d62e0 <loop+0x5fc>)
   d6142:	6018      	str	r0, [r3, #0]
    if (!sysStatus.connectedStatus) {                                 // Asking us to report but not connected
   d6144:	78eb      	ldrb	r3, [r5, #3]
   d6146:	46a9      	mov	r9, r5
   d6148:	b91b      	cbnz	r3, d6152 <loop+0x46e>
      particleConnectionNeeded = true;                                // Set the flag to connect us to Particle
   d614a:	4b66      	ldr	r3, [pc, #408]	; (d62e4 <loop+0x600>)
   d614c:	2201      	movs	r2, #1
   d614e:	701a      	strb	r2, [r3, #0]
   d6150:	e60a      	b.n	d5d68 <loop+0x84>
    if (!sysStatus.lowPowerMode) takeMeasurements();                  // Do this here as device not in lowPowerMode will not meausre coming out of sleep / napping
   d6152:	79ab      	ldrb	r3, [r5, #6]
   d6154:	b1b3      	cbz	r3, d6184 <loop+0x4a0>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house and publish to Google Sheets
   d6156:	f004 ff93 	bl	db080 <_ZN9TimeClass4hourEv>
   d615a:	f899 301c 	ldrb.w	r3, [r9, #28]
   d615e:	4298      	cmp	r0, r3
   d6160:	d11d      	bne.n	d619e <loop+0x4ba>
   d6162:	f7fe ffbf 	bl	d50e4 <_Z12dailyCleanupv>
      if (Time.hour() == sysStatus.openTime && sysStatus.openTime==0) sendEvent();    // Need this so we can get 24 hour reporting for non-sleeping devices
   d6166:	f004 ff8b 	bl	db080 <_ZN9TimeClass4hourEv>
   d616a:	f899 301c 	ldrb.w	r3, [r9, #28]
   d616e:	4298      	cmp	r0, r3
   d6170:	d102      	bne.n	d6178 <loop+0x494>
   d6172:	b908      	cbnz	r0, d6178 <loop+0x494>
   d6174:	f7fe fcf2 	bl	d4b5c <_Z9sendEventv>
   d6178:	f001 fdd4 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();                                    // This is for a webHook response timeout
   d617c:	4b5a      	ldr	r3, [pc, #360]	; (d62e8 <loop+0x604>)
   d617e:	6018      	str	r0, [r3, #0]
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d6180:	2307      	movs	r3, #7
   d6182:	e606      	b.n	d5d92 <loop+0xae>
    if (!sysStatus.lowPowerMode) takeMeasurements();                  // Do this here as device not in lowPowerMode will not meausre coming out of sleep / napping
   d6184:	f7ff f82a 	bl	d51dc <_Z16takeMeasurementsv>
    if (sysStatus.connectedStatus) {
   d6188:	78eb      	ldrb	r3, [r5, #3]
   d618a:	2b00      	cmp	r3, #0
   d618c:	d1e3      	bne.n	d6156 <loop+0x472>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d618e:	4b57      	ldr	r3, [pc, #348]	; (d62ec <loop+0x608>)
   d6190:	4a57      	ldr	r2, [pc, #348]	; (d62f0 <loop+0x60c>)
   d6192:	601a      	str	r2, [r3, #0]
   d6194:	f001 fdc6 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d6198:	4b56      	ldr	r3, [pc, #344]	; (d62f4 <loop+0x610>)
   d619a:	6018      	str	r0, [r3, #0]
   d619c:	e7a5      	b.n	d60ea <loop+0x406>
      else sendEvent();                                               // Send data to Ubidots but not at opening time as there is nothing to publish
   d619e:	f7fe fcdd 	bl	d4b5c <_Z9sendEventv>
   d61a2:	e7e0      	b.n	d6166 <loop+0x482>
    if (state != oldState) publishStateTransition();
   d61a4:	4b40      	ldr	r3, [pc, #256]	; (d62a8 <loop+0x5c4>)
   d61a6:	781b      	ldrb	r3, [r3, #0]
   d61a8:	2b07      	cmp	r3, #7
   d61aa:	d001      	beq.n	d61b0 <loop+0x4cc>
   d61ac:	f7fe ff5c 	bl	d5068 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   d61b0:	4b51      	ldr	r3, [pc, #324]	; (d62f8 <loop+0x614>)
   d61b2:	781d      	ldrb	r5, [r3, #0]
   d61b4:	b9b5      	cbnz	r5, d61e4 <loop+0x500>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d61b6:	4b4d      	ldr	r3, [pc, #308]	; (d62ec <loop+0x608>)
   d61b8:	4a4d      	ldr	r2, [pc, #308]	; (d62f0 <loop+0x60c>)
   d61ba:	601a      	str	r2, [r3, #0]
   d61bc:	f001 fdb2 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d61c0:	4b4c      	ldr	r3, [pc, #304]	; (d62f4 <loop+0x610>)
   d61c2:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d61c4:	2302      	movs	r3, #2
   d61c6:	7023      	strb	r3, [r4, #0]
      if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d61c8:	4b3c      	ldr	r3, [pc, #240]	; (d62bc <loop+0x5d8>)
   d61ca:	6859      	ldr	r1, [r3, #4]
   d61cc:	2900      	cmp	r1, #0
   d61ce:	f43f ae4c 	beq.w	d5e6a <loop+0x186>
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d61d2:	681a      	ldr	r2, [r3, #0]
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d61d4:	605d      	str	r5, [r3, #4]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d61d6:	1a52      	subs	r2, r2, r1
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d61d8:	e9c3 5505 	strd	r5, r5, [r3, #20]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d61dc:	601a      	str	r2, [r3, #0]
        currentCountsWriteNeeded=true;
   d61de:	2301      	movs	r3, #1
   d61e0:	7033      	strb	r3, [r6, #0]
   d61e2:	e642      	b.n	d5e6a <loop+0x186>
   d61e4:	f001 fd9e 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d61e8:	4b3f      	ldr	r3, [pc, #252]	; (d62e8 <loop+0x604>)
   d61ea:	681b      	ldr	r3, [r3, #0]
   d61ec:	1ac0      	subs	r0, r0, r3
   d61ee:	f247 5330 	movw	r3, #30000	; 0x7530
   d61f2:	4298      	cmp	r0, r3
   d61f4:	f67f ae39 	bls.w	d5e6a <loop+0x186>
   d61f8:	f001 fd94 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d61fc:	4b36      	ldr	r3, [pc, #216]	; (d62d8 <loop+0x5f4>)
   d61fe:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d6200:	2301      	movs	r3, #1
   d6202:	e5c6      	b.n	d5d92 <loop+0xae>
    if (state != oldState) publishStateTransition();
   d6204:	4b28      	ldr	r3, [pc, #160]	; (d62a8 <loop+0x5c4>)
   d6206:	781b      	ldrb	r3, [r3, #0]
   d6208:	2b01      	cmp	r3, #1
   d620a:	d001      	beq.n	d6210 <loop+0x52c>
   d620c:	f7fe ff2c 	bl	d5068 <_Z22publishStateTransitionv>
   d6210:	f001 fd88 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d6214:	4b30      	ldr	r3, [pc, #192]	; (d62d8 <loop+0x5f4>)
   d6216:	681b      	ldr	r3, [r3, #0]
   d6218:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d621c:	3330      	adds	r3, #48	; 0x30
   d621e:	4283      	cmp	r3, r0
   d6220:	f4bf ae23 	bcs.w	d5e6a <loop+0x186>
      if ((Time.now() - sysStatus.lastConnection) > 7200L) {           // It is been over two hours since we last connected to the cloud - time for a reset
   d6224:	4d24      	ldr	r5, [pc, #144]	; (d62b8 <loop+0x5d4>)
   d6226:	f004 ff1a 	bl	db05e <_ZN9TimeClass3nowEv>
   d622a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d622c:	1ac0      	subs	r0, r0, r3
   d622e:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d6232:	462c      	mov	r4, r5
   d6234:	d913      	bls.n	d625e <loop+0x57a>
        sysStatus.lastConnection = Time.now() - 3600;                 // Wait an hour before we come back to this condition
   d6236:	f004 ff12 	bl	db05e <_ZN9TimeClass3nowEv>
   d623a:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d623e:	6268      	str	r0, [r5, #36]	; 0x24
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d6240:	462a      	mov	r2, r5
   d6242:	2101      	movs	r1, #1
   d6244:	482d      	ldr	r0, [pc, #180]	; (d62fc <loop+0x618>)
   d6246:	f7ff f838 	bl	d52ba <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        Log.error("failed to connect to cloud, doing deep reset");
   d624a:	481f      	ldr	r0, [pc, #124]	; (d62c8 <loop+0x5e4>)
   d624c:	492c      	ldr	r1, [pc, #176]	; (d6300 <loop+0x61c>)
   d624e:	f7fe f991 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
        delay(100);
   d6252:	2064      	movs	r0, #100	; 0x64
   d6254:	f002 f8e6 	bl	d8424 <delay>
        fullModemReset();                                             // Full Modem reset and reboot
   d6258:	f7ff fc7c 	bl	d5b54 <_Z14fullModemResetv>
   d625c:	e605      	b.n	d5e6a <loop+0x186>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) {     //It has been more than two hours since a sucessful hook response
   d625e:	f004 fefe 	bl	db05e <_ZN9TimeClass3nowEv>
   d6262:	6a2b      	ldr	r3, [r5, #32]
   d6264:	1ac0      	subs	r0, r0, r3
   d6266:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d626a:	78eb      	ldrb	r3, [r5, #3]
   d626c:	d950      	bls.n	d6310 <loop+0x62c>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);  // Broadcast Reset Action
   d626e:	b153      	cbz	r3, d6286 <loop+0x5a2>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d6270:	4b24      	ldr	r3, [pc, #144]	; (d6304 <loop+0x620>)
   d6272:	4a25      	ldr	r2, [pc, #148]	; (d6308 <loop+0x624>)
   d6274:	781b      	ldrb	r3, [r3, #0]
   d6276:	f88d 3000 	strb.w	r3, [sp]
   d627a:	4b14      	ldr	r3, [pc, #80]	; (d62cc <loop+0x5e8>)
   d627c:	4923      	ldr	r1, [pc, #140]	; (d630c <loop+0x628>)
   d627e:	781b      	ldrb	r3, [r3, #0]
   d6280:	4814      	ldr	r0, [pc, #80]	; (d62d4 <loop+0x5f0>)
   d6282:	f7fe f98e 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);                                                  // Time to publish
   d6286:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d628a:	f002 f8cb 	bl	d8424 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d628e:	2300      	movs	r3, #0
   d6290:	6123      	str	r3, [r4, #16]
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d6292:	f004 fee4 	bl	db05e <_ZN9TimeClass3nowEv>
        systemStatusWriteNeeded=true;
   d6296:	2301      	movs	r3, #1
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d6298:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d629c:	6220      	str	r0, [r4, #32]
        systemStatusWriteNeeded=true;
   d629e:	703b      	strb	r3, [r7, #0]
   d62a0:	e7da      	b.n	d6258 <loop+0x574>
   d62a2:	bf00      	nop
   d62a4:	000dc622 	.word	0x000dc622
   d62a8:	2003e474 	.word	0x2003e474
   d62ac:	2003e381 	.word	0x2003e381
   d62b0:	2003e384 	.word	0x2003e384
   d62b4:	2003e50c 	.word	0x2003e50c
   d62b8:	2003e4c0 	.word	0x2003e4c0
   d62bc:	2003e3f4 	.word	0x2003e3f4
   d62c0:	2003e20c 	.word	0x2003e20c
   d62c4:	000dc7d5 	.word	0x000dc7d5
   d62c8:	2003e5e0 	.word	0x2003e5e0
   d62cc:	2003e378 	.word	0x2003e378
   d62d0:	000dc7ea 	.word	0x000dc7ea
   d62d4:	2003e478 	.word	0x2003e478
   d62d8:	2003e4b0 	.word	0x2003e4b0
   d62dc:	000dc7b7 	.word	0x000dc7b7
   d62e0:	2003e43c 	.word	0x2003e43c
   d62e4:	2003e475 	.word	0x2003e475
   d62e8:	2003e4f4 	.word	0x2003e4f4
   d62ec:	2003e4b8 	.word	0x2003e4b8
   d62f0:	00015f90 	.word	0x00015f90
   d62f4:	2003e4bc 	.word	0x2003e4bc
   d62f8:	2003e423 	.word	0x2003e423
   d62fc:	2003e424 	.word	0x2003e424
   d6300:	000dc7f3 	.word	0x000dc7f3
   d6304:	2003e379 	.word	0x2003e379
   d6308:	000dc820 	.word	0x000dc820
   d630c:	000dc83f 	.word	0x000dc83f
      else if (sysStatus.resetCount <= 3) {                                // First try simple reset
   d6310:	692a      	ldr	r2, [r5, #16]
   d6312:	2a03      	cmp	r2, #3
   d6314:	dc12      	bgt.n	d633c <loop+0x658>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - System Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d6316:	b153      	cbz	r3, d632e <loop+0x64a>
   d6318:	4b16      	ldr	r3, [pc, #88]	; (d6374 <loop+0x690>)
   d631a:	4a17      	ldr	r2, [pc, #92]	; (d6378 <loop+0x694>)
   d631c:	781b      	ldrb	r3, [r3, #0]
   d631e:	f88d 3000 	strb.w	r3, [sp]
   d6322:	4b16      	ldr	r3, [pc, #88]	; (d637c <loop+0x698>)
   d6324:	4916      	ldr	r1, [pc, #88]	; (d6380 <loop+0x69c>)
   d6326:	781b      	ldrb	r3, [r3, #0]
   d6328:	4816      	ldr	r0, [pc, #88]	; (d6384 <loop+0x6a0>)
   d632a:	f7fe f93a 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d632e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6332:	f002 f877 	bl	d8424 <delay>
        System.reset();
   d6336:	f004 fc3b 	bl	dabb0 <_ZN11SystemClass5resetEv>
   d633a:	e596      	b.n	d5e6a <loop+0x186>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcase Reset Action
   d633c:	b153      	cbz	r3, d6354 <loop+0x670>
   d633e:	4b0d      	ldr	r3, [pc, #52]	; (d6374 <loop+0x690>)
   d6340:	4a11      	ldr	r2, [pc, #68]	; (d6388 <loop+0x6a4>)
   d6342:	781b      	ldrb	r3, [r3, #0]
   d6344:	f88d 3000 	strb.w	r3, [sp]
   d6348:	4b0c      	ldr	r3, [pc, #48]	; (d637c <loop+0x698>)
   d634a:	490d      	ldr	r1, [pc, #52]	; (d6380 <loop+0x69c>)
   d634c:	781b      	ldrb	r3, [r3, #0]
   d634e:	480d      	ldr	r0, [pc, #52]	; (d6384 <loop+0x6a0>)
   d6350:	f7fe f927 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d6354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6358:	f002 f864 	bl	d8424 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d635c:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d635e:	4a0b      	ldr	r2, [pc, #44]	; (d638c <loop+0x6a8>)
   d6360:	480b      	ldr	r0, [pc, #44]	; (d6390 <loop+0x6ac>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d6362:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d6364:	2101      	movs	r1, #1
   d6366:	f7fe ffa8 	bl	d52ba <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        ab1805.deepPowerDown();                                       // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d636a:	211e      	movs	r1, #30
   d636c:	4809      	ldr	r0, [pc, #36]	; (d6394 <loop+0x6b0>)
   d636e:	f000 fbd9 	bl	d6b24 <_ZN6AB180513deepPowerDownEi>
   d6372:	e57a      	b.n	d5e6a <loop+0x186>
   d6374:	2003e379 	.word	0x2003e379
   d6378:	000dc845 	.word	0x000dc845
   d637c:	2003e378 	.word	0x2003e378
   d6380:	000dc83f 	.word	0x000dc83f
   d6384:	2003e478 	.word	0x2003e478
   d6388:	000dc820 	.word	0x000dc820
   d638c:	2003e4c0 	.word	0x2003e4c0
   d6390:	2003e424 	.word	0x2003e424
   d6394:	2003e388 	.word	0x2003e388

000d6398 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d6398:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d639a:	2000      	movs	r0, #0
   d639c:	f001 ff46 	bl	d822c <spark_sync_time_pending>
   d63a0:	b128      	cbz	r0, d63ae <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d63a2:	f001 ff1b 	bl	d81dc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d63a6:	f080 0001 	eor.w	r0, r0, #1
   d63aa:	b2c0      	uxtb	r0, r0
    }
   d63ac:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d63ae:	2001      	movs	r0, #1
   d63b0:	e7fc      	b.n	d63ac <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
   d63b2:	0000      	movs	r0, r0
   d63b4:	0000      	movs	r0, r0
	...

000d63b8 <_Z11setTimeZone6String>:
 * Values outside this range will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if successful, 0 if invalid command
 */
int setTimeZone(String command)
{
   d63b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d63bc:	b0c8      	sub	sp, #288	; 0x120
   d63be:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d63c0:	f001 ff0c 	bl	d81dc <spark_cloud_flag_connected>
        if (!connected()) {
   d63c4:	b110      	cbz	r0, d63cc <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d63c6:	2000      	movs	r0, #0
   d63c8:	f001 ff28 	bl	d821c <spark_sync_time>
        return hal_timer_millis(nullptr);
   d63cc:	2000      	movs	r0, #0
   d63ce:	f001 fcb9 	bl	d7d44 <hal_timer_millis>
   d63d2:	f04f 0a00 	mov.w	sl, #0
   d63d6:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d63d8:	f247 562f 	movw	r6, #29999	; 0x752f
   d63dc:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d63de:	2000      	movs	r0, #0
   d63e0:	f001 fcb0 	bl	d7d44 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d63e4:	ebb0 0409 	subs.w	r4, r0, r9
   d63e8:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d63ec:	42af      	cmp	r7, r5
   d63ee:	bf08      	it	eq
   d63f0:	42a6      	cmpeq	r6, r4
   d63f2:	d305      	bcc.n	d6400 <_Z11setTimeZone6String+0x48>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d63f4:	f7ff ffd0 	bl	d6398 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d63f8:	b910      	cbnz	r0, d6400 <_Z11setTimeZone6String+0x48>
            spark_process();
   d63fa:	f001 fedf 	bl	d81bc <spark_process>
        while (_while() && !_condition()) {
   d63fe:	e7ee      	b.n	d63de <_Z11setTimeZone6String+0x26>
   d6400:	f7ff ffca 	bl	d6398 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d6404:	f8d8 0000 	ldr.w	r0, [r8]
   d6408:	220a      	movs	r2, #10
   d640a:	a903      	add	r1, sp, #12
   d640c:	f005 ff9c 	bl	dc348 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d6410:	f100 030c 	add.w	r3, r0, #12
   d6414:	b2db      	uxtb	r3, r3
   d6416:	2b18      	cmp	r3, #24
   d6418:	d848      	bhi.n	d64ac <_Z11setTimeZone6String+0xf4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d641a:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d641c:	ee07 5a90 	vmov	s15, r5
   d6420:	4b27      	ldr	r3, [pc, #156]	; (d64c0 <_Z11setTimeZone6String+0x108>)
   d6422:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d6426:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d6428:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d642c:	f004 fcae 	bl	dad8c <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d6430:	4b24      	ldr	r3, [pc, #144]	; (d64c4 <_Z11setTimeZone6String+0x10c>)
   d6432:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d6434:	f004 fe58 	bl	db0e8 <_ZN9TimeClass5localEv>
   d6438:	4606      	mov	r6, r0
   d643a:	f004 fe10 	bl	db05e <_ZN9TimeClass3nowEv>
   d643e:	1a30      	subs	r0, r6, r0
   d6440:	f005 fa9a 	bl	db978 <__aeabi_i2d>
   d6444:	a31c      	add	r3, pc, #112	; (adr r3, d64b8 <_Z11setTimeZone6String+0x100>)
   d6446:	e9d3 2300 	ldrd	r2, r3, [r3]
   d644a:	f005 fc29 	bl	dbca0 <__aeabi_ddiv>
   d644e:	4a1e      	ldr	r2, [pc, #120]	; (d64c8 <_Z11setTimeZone6String+0x110>)
   d6450:	e9cd 0100 	strd	r0, r1, [sp]
   d6454:	210a      	movs	r1, #10
   d6456:	481d      	ldr	r0, [pc, #116]	; (d64cc <_Z11setTimeZone6String+0x114>)
   d6458:	f001 ff90 	bl	d837c <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d645c:	f001 febe 	bl	d81dc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d6460:	b310      	cbz	r0, d64a8 <_Z11setTimeZone6String+0xf0>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d6462:	462b      	mov	r3, r5
   d6464:	4a1a      	ldr	r2, [pc, #104]	; (d64d0 <_Z11setTimeZone6String+0x118>)
   d6466:	4d1b      	ldr	r5, [pc, #108]	; (d64d4 <_Z11setTimeZone6String+0x11c>)
   d6468:	f44f 7180 	mov.w	r1, #256	; 0x100
        val_(0) {
   d646c:	2600      	movs	r6, #0
   d646e:	a808      	add	r0, sp, #32
   d6470:	f001 ff84 	bl	d837c <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d6474:	f88d 6000 	strb.w	r6, [sp]
   d6478:	4917      	ldr	r1, [pc, #92]	; (d64d8 <_Z11setTimeZone6String+0x120>)
   d647a:	782b      	ldrb	r3, [r5, #0]
   d647c:	4817      	ldr	r0, [pc, #92]	; (d64dc <_Z11setTimeZone6String+0x124>)
   d647e:	aa08      	add	r2, sp, #32
   d6480:	f7fe f88f 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d6484:	f004 fdeb 	bl	db05e <_ZN9TimeClass3nowEv>
   d6488:	4602      	mov	r2, r0
   d648a:	17c3      	asrs	r3, r0, #31
   d648c:	a804      	add	r0, sp, #16
   d648e:	f004 fce3 	bl	dae58 <_ZN9TimeClass7timeStrEx>
   d6492:	f88d 6000 	strb.w	r6, [sp]
   d6496:	782b      	ldrb	r3, [r5, #0]
   d6498:	9a04      	ldr	r2, [sp, #16]
   d649a:	490f      	ldr	r1, [pc, #60]	; (d64d8 <_Z11setTimeZone6String+0x120>)
   d649c:	480f      	ldr	r0, [pc, #60]	; (d64dc <_Z11setTimeZone6String+0x124>)
   d649e:	f7fe f880 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d64a2:	a804      	add	r0, sp, #16
   d64a4:	f004 fa4a 	bl	da93c <_ZN6StringD1Ev>
  }

  return 1;
   d64a8:	4620      	mov	r0, r4
   d64aa:	e000      	b.n	d64ae <_Z11setTimeZone6String+0xf6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d64ac:	2000      	movs	r0, #0
}
   d64ae:	b048      	add	sp, #288	; 0x120
   d64b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d64b4:	f3af 8000 	nop.w
   d64b8:	00000000 	.word	0x00000000
   d64bc:	40ac2000 	.word	0x40ac2000
   d64c0:	2003e4c0 	.word	0x2003e4c0
   d64c4:	2003e4f0 	.word	0x2003e4f0
   d64c8:	000dc7ad 	.word	0x000dc7ad
   d64cc:	2003e419 	.word	0x2003e419
   d64d0:	000dc93c 	.word	0x000dc93c
   d64d4:	2003e4f8 	.word	0x2003e4f8
   d64d8:	000dc6d7 	.word	0x000dc6d7
   d64dc:	2003e478 	.word	0x2003e478

000d64e0 <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d64e0:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d64e2:	f004 fde5 	bl	db0b0 <_ZN9TimeClass3dayEv>
   d64e6:	4605      	mov	r5, r0
  int month = Time.month();
   d64e8:	f004 fdf6 	bl	db0d8 <_ZN9TimeClass5monthEv>
   d64ec:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d64ee:	f004 fdeb 	bl	db0c8 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d64f2:	1f23      	subs	r3, r4, #4
   d64f4:	2b06      	cmp	r3, #6
   d64f6:	d90e      	bls.n	d6516 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d64f8:	1ee3      	subs	r3, r4, #3
   d64fa:	2b08      	cmp	r3, #8
   d64fc:	d80d      	bhi.n	d651a <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d64fe:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d6500:	1a2d      	subs	r5, r5, r0
   d6502:	d504      	bpl.n	d650e <_Z8isDSTusav+0x2e>
   d6504:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6506:	bf14      	ite	ne
   d6508:	2000      	movne	r0, #0
   d650a:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d650c:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d650e:	2d07      	cmp	r5, #7
   d6510:	dd03      	ble.n	d651a <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6512:	2c03      	cmp	r4, #3
   d6514:	e7f7      	b.n	d6506 <_Z8isDSTusav+0x26>
    return true;
   d6516:	2001      	movs	r0, #1
   d6518:	e7f8      	b.n	d650c <_Z8isDSTusav+0x2c>
    return false;
   d651a:	2000      	movs	r0, #0
   d651c:	e7f6      	b.n	d650c <_Z8isDSTusav+0x2c>
	...

000d6520 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d6520:	b570      	push	{r4, r5, r6, lr}
   d6522:	ed2d 8b02 	vpush	{d8}
   d6526:	b0c8      	sub	sp, #288	; 0x120
   d6528:	4605      	mov	r5, r0
  time_t t = Time.now();
   d652a:	f004 fd98 	bl	db05e <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d652e:	220a      	movs	r2, #10
  time_t t = Time.now();
   d6530:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d6532:	a903      	add	r1, sp, #12
   d6534:	6828      	ldr	r0, [r5, #0]
   d6536:	f005 ff07 	bl	dc348 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d653a:	b2c3      	uxtb	r3, r0
   d653c:	2b02      	cmp	r3, #2
   d653e:	d859      	bhi.n	d65f4 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d6540:	b243      	sxtb	r3, r0
   d6542:	ee08 3a10 	vmov	s16, r3
   d6546:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d654a:	eeb0 0a48 	vmov.f32	s0, s16
   d654e:	f004 fc3d 	bl	dadcc <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d6552:	4b2d      	ldr	r3, [pc, #180]	; (d6608 <_Z12setDSTOffset6String+0xe8>)
   d6554:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d6558:	4b2c      	ldr	r3, [pc, #176]	; (d660c <_Z12setDSTOffset6String+0xec>)
   d655a:	2201      	movs	r2, #1
   d655c:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d655e:	ee18 0a10 	vmov	r0, s16
   d6562:	f005 fa1b 	bl	db99c <__aeabi_f2d>
   d6566:	4a2a      	ldr	r2, [pc, #168]	; (d6610 <_Z12setDSTOffset6String+0xf0>)
   d6568:	e9cd 0100 	strd	r0, r1, [sp]
   d656c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d6570:	a808      	add	r0, sp, #32
   d6572:	f001 ff03 	bl	d837c <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d6576:	f004 fd55 	bl	db024 <_ZN9TimeClass7isValidEv>
   d657a:	b128      	cbz	r0, d6588 <_Z12setDSTOffset6String+0x68>
   d657c:	f7ff ffb0 	bl	d64e0 <_Z8isDSTusav>
   d6580:	2800      	cmp	r0, #0
   d6582:	d034      	beq.n	d65ee <_Z12setDSTOffset6String+0xce>
   d6584:	f004 fc40 	bl	dae08 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d6588:	f004 fdae 	bl	db0e8 <_ZN9TimeClass5localEv>
   d658c:	4605      	mov	r5, r0
   d658e:	f004 fd66 	bl	db05e <_ZN9TimeClass3nowEv>
   d6592:	1a28      	subs	r0, r5, r0
   d6594:	f005 f9f0 	bl	db978 <__aeabi_i2d>
   d6598:	a319      	add	r3, pc, #100	; (adr r3, d6600 <_Z12setDSTOffset6String+0xe0>)
   d659a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d659e:	f005 fb7f 	bl	dbca0 <__aeabi_ddiv>
   d65a2:	4a1c      	ldr	r2, [pc, #112]	; (d6614 <_Z12setDSTOffset6String+0xf4>)
   d65a4:	e9cd 0100 	strd	r0, r1, [sp]
   d65a8:	210a      	movs	r1, #10
   d65aa:	481b      	ldr	r0, [pc, #108]	; (d6618 <_Z12setDSTOffset6String+0xf8>)
   d65ac:	f001 fee6 	bl	d837c <snprintf>
   d65b0:	f001 fe14 	bl	d81dc <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d65b4:	b1c8      	cbz	r0, d65ea <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d65b6:	4d19      	ldr	r5, [pc, #100]	; (d661c <_Z12setDSTOffset6String+0xfc>)
   d65b8:	4919      	ldr	r1, [pc, #100]	; (d6620 <_Z12setDSTOffset6String+0x100>)
   d65ba:	481a      	ldr	r0, [pc, #104]	; (d6624 <_Z12setDSTOffset6String+0x104>)
   d65bc:	2600      	movs	r6, #0
   d65be:	f88d 6000 	strb.w	r6, [sp]
   d65c2:	782b      	ldrb	r3, [r5, #0]
   d65c4:	aa08      	add	r2, sp, #32
   d65c6:	f7fd ffec 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d65ca:	4622      	mov	r2, r4
   d65cc:	17e3      	asrs	r3, r4, #31
   d65ce:	a804      	add	r0, sp, #16
   d65d0:	f004 fc42 	bl	dae58 <_ZN9TimeClass7timeStrEx>
   d65d4:	f88d 6000 	strb.w	r6, [sp]
   d65d8:	782b      	ldrb	r3, [r5, #0]
   d65da:	9a04      	ldr	r2, [sp, #16]
   d65dc:	4910      	ldr	r1, [pc, #64]	; (d6620 <_Z12setDSTOffset6String+0x100>)
   d65de:	4811      	ldr	r0, [pc, #68]	; (d6624 <_Z12setDSTOffset6String+0x104>)
   d65e0:	f7fd ffdf 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d65e4:	a804      	add	r0, sp, #16
   d65e6:	f004 f9a9 	bl	da93c <_ZN6StringD1Ev>
  return 1;
   d65ea:	2001      	movs	r0, #1
   d65ec:	e003      	b.n	d65f6 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d65ee:	f004 fc17 	bl	dae20 <_ZN9TimeClass6endDSTEv>
   d65f2:	e7c9      	b.n	d6588 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d65f4:	2000      	movs	r0, #0
}
   d65f6:	b048      	add	sp, #288	; 0x120
   d65f8:	ecbd 8b02 	vpop	{d8}
   d65fc:	bd70      	pop	{r4, r5, r6, pc}
   d65fe:	bf00      	nop
   d6600:	00000000 	.word	0x00000000
   d6604:	40ac2000 	.word	0x40ac2000
   d6608:	2003e4c0 	.word	0x2003e4c0
   d660c:	2003e4f0 	.word	0x2003e4f0
   d6610:	000dc950 	.word	0x000dc950
   d6614:	000dc7ad 	.word	0x000dc7ad
   d6618:	2003e419 	.word	0x2003e419
   d661c:	2003e4f8 	.word	0x2003e4f8
   d6620:	000dc6d7 	.word	0x000dc6d7
   d6624:	2003e478 	.word	0x2003e478

000d6628 <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d6628:	4b01      	ldr	r3, [pc, #4]	; (d6630 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d662a:	2201      	movs	r2, #1
   d662c:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d662e:	4770      	bx	lr
   d6630:	2003e4f8 	.word	0x2003e4f8

000d6634 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d6634:	4770      	bx	lr

000d6636 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d6636:	b510      	push	{r4, lr}
}
   d6638:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d663a:	4604      	mov	r4, r0
}
   d663c:	f005 f841 	bl	db6c2 <_ZdlPvj>
   d6640:	4620      	mov	r0, r4
   d6642:	bd10      	pop	{r4, pc}

000d6644 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d6644:	b40e      	push	{r1, r2, r3}
   d6646:	b510      	push	{r4, lr}
   d6648:	b08d      	sub	sp, #52	; 0x34
   d664a:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d664c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d664e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d6652:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d6654:	2300      	movs	r3, #0
   d6656:	2020      	movs	r0, #32
   d6658:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d665c:	e9cd 4200 	strd	r4, r2, [sp]
   d6660:	2001      	movs	r0, #1
   d6662:	aa04      	add	r2, sp, #16
   d6664:	f001 fcfe 	bl	d8064 <log_message_v>
}
   d6668:	b00d      	add	sp, #52	; 0x34
   d666a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d666e:	b003      	add	sp, #12
   d6670:	4770      	bx	lr
	...

000d6674 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6674:	b510      	push	{r4, lr}
   d6676:	7202      	strb	r2, [r0, #8]
   d6678:	22ff      	movs	r2, #255	; 0xff
   d667a:	8142      	strh	r2, [r0, #10]
   d667c:	2200      	movs	r2, #0
   d667e:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d6682:	6142      	str	r2, [r0, #20]
   d6684:	7602      	strb	r2, [r0, #24]
   d6686:	61c2      	str	r2, [r0, #28]
    instance = this;
   d6688:	4a02      	ldr	r2, [pc, #8]	; (d6694 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d668a:	4c03      	ldr	r4, [pc, #12]	; (d6698 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d668c:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d668e:	e9c0 4100 	strd	r4, r1, [r0]
}
   d6692:	bd10      	pop	{r4, pc}
   d6694:	2003e500 	.word	0x2003e500
   d6698:	000dcbb0 	.word	0x000dcbb0

000d669c <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d669c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d66a0:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d66a4:	4604      	mov	r4, r0
   d66a6:	4689      	mov	r9, r1
   d66a8:	4616      	mov	r6, r2
   d66aa:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d66ac:	f1b8 0f00 	cmp.w	r8, #0
   d66b0:	d002      	beq.n	d66b8 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d66b2:	6840      	ldr	r0, [r0, #4]
   d66b4:	f002 fcd4 	bl	d9060 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d66b8:	7a21      	ldrb	r1, [r4, #8]
   d66ba:	6860      	ldr	r0, [r4, #4]
   d66bc:	f002 fcaa 	bl	d9014 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d66c0:	6860      	ldr	r0, [r4, #4]
   d66c2:	6803      	ldr	r3, [r0, #0]
   d66c4:	4649      	mov	r1, r9
   d66c6:	689b      	ldr	r3, [r3, #8]
   d66c8:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d66ca:	6860      	ldr	r0, [r4, #4]
   d66cc:	2100      	movs	r1, #0
   d66ce:	f002 fcc0 	bl	d9052 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d66d2:	4605      	mov	r5, r0
   d66d4:	bb00      	cbnz	r0, d6718 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d66d6:	2301      	movs	r3, #1
   d66d8:	7a21      	ldrb	r1, [r4, #8]
   d66da:	6860      	ldr	r0, [r4, #4]
   d66dc:	463a      	mov	r2, r7
   d66de:	f002 fc84 	bl	d8fea <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d66e2:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d66e4:	4603      	mov	r3, r0
        if (count == num) {
   d66e6:	d109      	bne.n	d66fc <_ZN6AB180513readRegistersEhPhjb+0x60>
   d66e8:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d66ea:	42be      	cmp	r6, r7
   d66ec:	d01c      	beq.n	d6728 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d66ee:	6860      	ldr	r0, [r4, #4]
   d66f0:	6803      	ldr	r3, [r0, #0]
   d66f2:	695b      	ldr	r3, [r3, #20]
   d66f4:	4798      	blx	r3
   d66f6:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d66fa:	e7f6      	b.n	d66ea <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d66fc:	490b      	ldr	r1, [pc, #44]	; (d672c <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d66fe:	480c      	ldr	r0, [pc, #48]	; (d6730 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d6700:	464a      	mov	r2, r9
   d6702:	f7fd ff37 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d6706:	f1b8 0f00 	cmp.w	r8, #0
   d670a:	d002      	beq.n	d6712 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d670c:	6860      	ldr	r0, [r4, #4]
   d670e:	f002 fcb0 	bl	d9072 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d6712:	4628      	mov	r0, r5
   d6714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d6718:	4603      	mov	r3, r0
   d671a:	4906      	ldr	r1, [pc, #24]	; (d6734 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d671c:	4804      	ldr	r0, [pc, #16]	; (d6730 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d671e:	464a      	mov	r2, r9
   d6720:	f7fd ff28 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d6724:	2500      	movs	r5, #0
   d6726:	e7ee      	b.n	d6706 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d6728:	2501      	movs	r5, #1
   d672a:	e7ec      	b.n	d6706 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d672c:	000dc961 	.word	0x000dc961
   d6730:	2003e4fc 	.word	0x2003e4fc
   d6734:	000dc986 	.word	0x000dc986

000d6738 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d6738:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d673a:	9300      	str	r3, [sp, #0]
   d673c:	2301      	movs	r3, #1
   d673e:	f7ff ffad 	bl	d669c <_ZN6AB180513readRegistersEhPhjb>
}
   d6742:	b003      	add	sp, #12
   d6744:	f85d fb04 	ldr.w	pc, [sp], #4

000d6748 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d6748:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d674a:	8943      	ldrh	r3, [r0, #10]
   d674c:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d674e:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d6750:	d010      	beq.n	d6774 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d6752:	4e19      	ldr	r6, [pc, #100]	; (d67b8 <_ZN6AB180510detectChipEv+0x70>)
   d6754:	4d19      	ldr	r5, [pc, #100]	; (d67bc <_ZN6AB180510detectChipEv+0x74>)
   d6756:	f001 fae5 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d675a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d675e:	d209      	bcs.n	d6774 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d6760:	8960      	ldrh	r0, [r4, #10]
   d6762:	f004 feff 	bl	db564 <digitalRead>
   d6766:	2801      	cmp	r0, #1
   d6768:	d004      	beq.n	d6774 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d676a:	4631      	mov	r1, r6
   d676c:	4628      	mov	r0, r5
   d676e:	f7fd feea 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d6772:	e7f0      	b.n	d6756 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d6774:	2301      	movs	r3, #1
   d6776:	f10d 0207 	add.w	r2, sp, #7
   d677a:	2128      	movs	r1, #40	; 0x28
   d677c:	4620      	mov	r0, r4
   d677e:	f7ff ffdb 	bl	d6738 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d6782:	b930      	cbnz	r0, d6792 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d6784:	480d      	ldr	r0, [pc, #52]	; (d67bc <_ZN6AB180510detectChipEv+0x74>)
   d6786:	490e      	ldr	r1, [pc, #56]	; (d67c0 <_ZN6AB180510detectChipEv+0x78>)
   d6788:	f7fd fedd 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d678c:	2000      	movs	r0, #0
}
   d678e:	b002      	add	sp, #8
   d6790:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d6792:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6796:	2b18      	cmp	r3, #24
   d6798:	d1f4      	bne.n	d6784 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d679a:	2301      	movs	r3, #1
   d679c:	f10d 0207 	add.w	r2, sp, #7
   d67a0:	2129      	movs	r1, #41	; 0x29
   d67a2:	4620      	mov	r0, r4
   d67a4:	f7ff ffc8 	bl	d6738 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d67a8:	2800      	cmp	r0, #0
   d67aa:	d0eb      	beq.n	d6784 <_ZN6AB180510detectChipEv+0x3c>
   d67ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d67b0:	2b05      	cmp	r3, #5
   d67b2:	d1e7      	bne.n	d6784 <_ZN6AB180510detectChipEv+0x3c>
   d67b4:	e7eb      	b.n	d678e <_ZN6AB180510detectChipEv+0x46>
   d67b6:	bf00      	nop
   d67b8:	000dc9aa 	.word	0x000dc9aa
   d67bc:	2003e4fc 	.word	0x2003e4fc
   d67c0:	000dc9bf 	.word	0x000dc9bf

000d67c4 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d67c4:	b507      	push	{r0, r1, r2, lr}
   d67c6:	4613      	mov	r3, r2
    uint8_t value = 0;
   d67c8:	2200      	movs	r2, #0
   d67ca:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d67ce:	f10d 0207 	add.w	r2, sp, #7
   d67d2:	f7ff ffb1 	bl	d6738 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d67d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d67da:	b003      	add	sp, #12
   d67dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d67e0 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d67e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d67e4:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d67e8:	4604      	mov	r4, r0
   d67ea:	460f      	mov	r7, r1
   d67ec:	4615      	mov	r5, r2
   d67ee:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d67f0:	f1b8 0f00 	cmp.w	r8, #0
   d67f4:	d002      	beq.n	d67fc <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d67f6:	6840      	ldr	r0, [r0, #4]
   d67f8:	f002 fc32 	bl	d9060 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d67fc:	7a21      	ldrb	r1, [r4, #8]
   d67fe:	6860      	ldr	r0, [r4, #4]
   d6800:	f002 fc08 	bl	d9014 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6804:	6860      	ldr	r0, [r4, #4]
   d6806:	6803      	ldr	r3, [r0, #0]
   d6808:	4639      	mov	r1, r7
   d680a:	689b      	ldr	r3, [r3, #8]
   d680c:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d680e:	442e      	add	r6, r5
   d6810:	42b5      	cmp	r5, r6
   d6812:	6860      	ldr	r0, [r4, #4]
   d6814:	d005      	beq.n	d6822 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d6816:	6803      	ldr	r3, [r0, #0]
   d6818:	f815 1b01 	ldrb.w	r1, [r5], #1
   d681c:	689b      	ldr	r3, [r3, #8]
   d681e:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d6820:	e7f6      	b.n	d6810 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d6822:	2101      	movs	r1, #1
   d6824:	f002 fc15 	bl	d9052 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6828:	4603      	mov	r3, r0
   d682a:	b170      	cbz	r0, d684a <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d682c:	4908      	ldr	r1, [pc, #32]	; (d6850 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d682e:	4809      	ldr	r0, [pc, #36]	; (d6854 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d6830:	463a      	mov	r2, r7
   d6832:	f7fd fe9f 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d6836:	2500      	movs	r5, #0
    }

    if (lock) {
   d6838:	f1b8 0f00 	cmp.w	r8, #0
   d683c:	d002      	beq.n	d6844 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d683e:	6860      	ldr	r0, [r4, #4]
   d6840:	f002 fc17 	bl	d9072 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d6844:	4628      	mov	r0, r5
   d6846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d684a:	2501      	movs	r5, #1
   d684c:	e7f4      	b.n	d6838 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d684e:	bf00      	nop
   d6850:	000dc9cc 	.word	0x000dc9cc
   d6854:	2003e4fc 	.word	0x2003e4fc

000d6858 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d6858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d685a:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d685e:	9300      	str	r3, [sp, #0]
   d6860:	f10d 020f 	add.w	r2, sp, #15
   d6864:	2301      	movs	r3, #1
   d6866:	f7ff ffbb 	bl	d67e0 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d686a:	b005      	add	sp, #20
   d686c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6870 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d6870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d6872:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d6874:	460c      	mov	r4, r1
   d6876:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d6878:	491a      	ldr	r1, [pc, #104]	; (d68e4 <_ZN6AB18056setWDTEi+0x74>)
   d687a:	481b      	ldr	r0, [pc, #108]	; (d68e8 <_ZN6AB18056setWDTEi+0x78>)
   d687c:	f7fd fe63 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d6880:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d6882:	bfb8      	it	lt
   d6884:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d6886:	b97c      	cbnz	r4, d68a8 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d6888:	2301      	movs	r3, #1
   d688a:	4622      	mov	r2, r4
   d688c:	211b      	movs	r1, #27
   d688e:	4628      	mov	r0, r5
   d6890:	f7ff ffe2 	bl	d6858 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6894:	4915      	ldr	r1, [pc, #84]	; (d68ec <_ZN6AB18056setWDTEi+0x7c>)
   d6896:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d6898:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d689a:	4813      	ldr	r0, [pc, #76]	; (d68e8 <_ZN6AB18056setWDTEi+0x78>)
   d689c:	f7ff fed2 	bl	d6644 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d68a0:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d68a2:	616c      	str	r4, [r5, #20]
}
   d68a4:	4630      	mov	r0, r6
   d68a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d68a8:	2c03      	cmp	r4, #3
   d68aa:	dd19      	ble.n	d68e0 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d68ac:	10a7      	asrs	r7, r4, #2
   d68ae:	2f1f      	cmp	r7, #31
   d68b0:	bfa8      	it	ge
   d68b2:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d68b4:	00ba      	lsls	r2, r7, #2
   d68b6:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d68ba:	2301      	movs	r3, #1
   d68bc:	b2d2      	uxtb	r2, r2
   d68be:	211b      	movs	r1, #27
   d68c0:	4628      	mov	r0, r5
   d68c2:	f7ff ffc9 	bl	d6858 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d68c6:	463a      	mov	r2, r7
   d68c8:	4603      	mov	r3, r0
   d68ca:	4909      	ldr	r1, [pc, #36]	; (d68f0 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d68cc:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d68ce:	4806      	ldr	r0, [pc, #24]	; (d68e8 <_ZN6AB18056setWDTEi+0x78>)
   d68d0:	f7ff feb8 	bl	d6644 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d68d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d68d8:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d68da:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d68dc:	616f      	str	r7, [r5, #20]
   d68de:	e7e1      	b.n	d68a4 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d68e0:	2701      	movs	r7, #1
   d68e2:	e7e7      	b.n	d68b4 <_ZN6AB18056setWDTEi+0x44>
   d68e4:	000dc9f1 	.word	0x000dc9f1
   d68e8:	2003e4fc 	.word	0x2003e4fc
   d68ec:	000dc9fb 	.word	0x000dc9fb
   d68f0:	000dca17 	.word	0x000dca17

000d68f4 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d68f4:	460b      	mov	r3, r1
    if (instance) {
   d68f6:	4907      	ldr	r1, [pc, #28]	; (d6914 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d68f8:	4602      	mov	r2, r0
    if (instance) {
   d68fa:	6808      	ldr	r0, [r1, #0]
   d68fc:	b148      	cbz	r0, d6912 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d68fe:	2b00      	cmp	r3, #0
   d6900:	bf08      	it	eq
   d6902:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d6906:	d104      	bne.n	d6912 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d6908:	68c3      	ldr	r3, [r0, #12]
   d690a:	b113      	cbz	r3, d6912 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d690c:	2100      	movs	r1, #0
   d690e:	f7ff bfaf 	b.w	d6870 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d6912:	4770      	bx	lr
   d6914:	2003e500 	.word	0x2003e500

000d6918 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d6918:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d691c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d6920:	4605      	mov	r5, r0
   d6922:	4616      	mov	r6, r2
   d6924:	461f      	mov	r7, r3
    if (lock) {
   d6926:	f1b8 0f00 	cmp.w	r8, #0
   d692a:	d004      	beq.n	d6936 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d692c:	6840      	ldr	r0, [r0, #4]
   d692e:	9101      	str	r1, [sp, #4]
   d6930:	f002 fb96 	bl	d9060 <_ZN7TwoWire4lockEv>
   d6934:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d6936:	9101      	str	r1, [sp, #4]
   d6938:	2300      	movs	r3, #0
   d693a:	f10d 020f 	add.w	r2, sp, #15
   d693e:	4628      	mov	r0, r5
   d6940:	f7ff fefa 	bl	d6738 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d6944:	4604      	mov	r4, r0
   d6946:	b160      	cbz	r0, d6962 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d6948:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d694c:	ea03 0206 	and.w	r2, r3, r6
   d6950:	433a      	orrs	r2, r7
        if (newValue != value) {
   d6952:	4293      	cmp	r3, r2
   d6954:	d005      	beq.n	d6962 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d6956:	9901      	ldr	r1, [sp, #4]
   d6958:	2300      	movs	r3, #0
   d695a:	4628      	mov	r0, r5
   d695c:	f7ff ff7c 	bl	d6858 <_ZN6AB180513writeRegisterEhhb>
   d6960:	4604      	mov	r4, r0
    if (lock) {
   d6962:	f1b8 0f00 	cmp.w	r8, #0
   d6966:	d002      	beq.n	d696e <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d6968:	6868      	ldr	r0, [r5, #4]
   d696a:	f002 fb82 	bl	d9072 <_ZN7TwoWire6unlockEv>
}
   d696e:	4620      	mov	r0, r4
   d6970:	b004      	add	sp, #16
   d6972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6976 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6976:	b513      	push	{r0, r1, r4, lr}
   d6978:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d697a:	f10d 0207 	add.w	r2, sp, #7
   d697e:	f7ff fedb 	bl	d6738 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d6982:	b128      	cbz	r0, d6990 <_ZN6AB180510isBitClearEhhb+0x1a>
   d6984:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6988:	421c      	tst	r4, r3
   d698a:	bf0c      	ite	eq
   d698c:	2001      	moveq	r0, #1
   d698e:	2000      	movne	r0, #0
}
   d6990:	b002      	add	sp, #8
   d6992:	bd10      	pop	{r4, pc}

000d6994 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6994:	b513      	push	{r0, r1, r4, lr}
   d6996:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6998:	f10d 0207 	add.w	r2, sp, #7
   d699c:	f7ff fecc 	bl	d6738 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d69a0:	b128      	cbz	r0, d69ae <_ZN6AB18058isBitSetEhhb+0x1a>
   d69a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d69a6:	421c      	tst	r4, r3
   d69a8:	bf14      	ite	ne
   d69aa:	2001      	movne	r0, #1
   d69ac:	2000      	moveq	r0, #0
}
   d69ae:	b002      	add	sp, #8
   d69b0:	bd10      	pop	{r4, pc}

000d69b2 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d69b2:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d69b4:	43d2      	mvns	r2, r2
   d69b6:	9300      	str	r3, [sp, #0]
   d69b8:	b2d2      	uxtb	r2, r2
   d69ba:	2300      	movs	r3, #0
   d69bc:	f7ff ffac 	bl	d6918 <_ZN6AB180512maskRegisterEhhhb>
}
   d69c0:	b003      	add	sp, #12
   d69c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d69c8 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d69c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d69ca:	2301      	movs	r3, #1
   d69cc:	f10d 0207 	add.w	r2, sp, #7
   d69d0:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d69d2:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d69d4:	f7ff feb0 	bl	d6738 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d69d8:	4605      	mov	r5, r0
   d69da:	b938      	cbnz	r0, d69ec <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d69dc:	491e      	ldr	r1, [pc, #120]	; (d6a58 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d69de:	481f      	ldr	r0, [pc, #124]	; (d6a5c <_ZN6AB180516updateWakeReasonEv+0x94>)
   d69e0:	22ad      	movs	r2, #173	; 0xad
   d69e2:	f7fd fdc7 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
}
   d69e6:	4628      	mov	r0, r5
   d69e8:	b003      	add	sp, #12
   d69ea:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d69ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d69f0:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d69f4:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d69f8:	d00b      	beq.n	d6a12 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d69fa:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d69fc:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d69fe:	210f      	movs	r1, #15
   d6a00:	4620      	mov	r0, r4
   d6a02:	f7ff ffd6 	bl	d69b2 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d6a06:	4a16      	ldr	r2, [pc, #88]	; (d6a60 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d6a08:	4916      	ldr	r1, [pc, #88]	; (d6a64 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d6a0a:	4814      	ldr	r0, [pc, #80]	; (d6a5c <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6a0c:	f7fd fd9b 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d6a10:	e7e9      	b.n	d69e6 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d6a12:	2208      	movs	r2, #8
   d6a14:	2117      	movs	r1, #23
   d6a16:	4620      	mov	r0, r4
   d6a18:	f7ff ffbc 	bl	d6994 <_ZN6AB18058isBitSetEhhb>
   d6a1c:	b118      	cbz	r0, d6a26 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6a1e:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d6a20:	4a11      	ldr	r2, [pc, #68]	; (d6a68 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6a22:	61e3      	str	r3, [r4, #28]
   d6a24:	e7f0      	b.n	d6a08 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d6a26:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6a2a:	071a      	lsls	r2, r3, #28
   d6a2c:	d509      	bpl.n	d6a42 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d6a2e:	2303      	movs	r3, #3
   d6a30:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d6a32:	2208      	movs	r2, #8
   d6a34:	2301      	movs	r3, #1
   d6a36:	210f      	movs	r1, #15
   d6a38:	4620      	mov	r0, r4
   d6a3a:	f7ff ffba 	bl	d69b2 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d6a3e:	4a0b      	ldr	r2, [pc, #44]	; (d6a6c <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d6a40:	e7e2      	b.n	d6a08 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d6a42:	075b      	lsls	r3, r3, #29
   d6a44:	d5cf      	bpl.n	d69e6 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d6a46:	2204      	movs	r2, #4
   d6a48:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d6a4a:	2301      	movs	r3, #1
   d6a4c:	210f      	movs	r1, #15
   d6a4e:	4620      	mov	r0, r4
   d6a50:	f7ff ffaf 	bl	d69b2 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d6a54:	4a06      	ldr	r2, [pc, #24]	; (d6a70 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d6a56:	e7d7      	b.n	d6a08 <_ZN6AB180516updateWakeReasonEv+0x40>
   d6a58:	000dca6a 	.word	0x000dca6a
   d6a5c:	2003e4fc 	.word	0x2003e4fc
   d6a60:	000dca3b 	.word	0x000dca3b
   d6a64:	000dca89 	.word	0x000dca89
   d6a68:	000dca44 	.word	0x000dca44
   d6a6c:	000dca54 	.word	0x000dca54
   d6a70:	000dca64 	.word	0x000dca64

000d6a74 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6a74:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d6a76:	9300      	str	r3, [sp, #0]
   d6a78:	4613      	mov	r3, r2
   d6a7a:	22ff      	movs	r2, #255	; 0xff
   d6a7c:	f7ff ff4c 	bl	d6918 <_ZN6AB180512maskRegisterEhhhb>
}
   d6a80:	b003      	add	sp, #12
   d6a82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6a88 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a8a:	460f      	mov	r7, r1
   d6a8c:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6a8e:	2301      	movs	r3, #1
   d6a90:	2200      	movs	r2, #0
   d6a92:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6a94:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6a96:	f7ff fedf 	bl	d6858 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6a9a:	4604      	mov	r4, r0
   d6a9c:	b938      	cbnz	r0, d6aae <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d6a9e:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d6aa2:	491e      	ldr	r1, [pc, #120]	; (d6b1c <_ZN6AB180517setCountdownTimerEib+0x94>)
   d6aa4:	481e      	ldr	r0, [pc, #120]	; (d6b20 <_ZN6AB180517setCountdownTimerEib+0x98>)
   d6aa6:	f7fd fd65 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
}
   d6aaa:	4620      	mov	r0, r4
   d6aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d6aae:	2301      	movs	r3, #1
   d6ab0:	2223      	movs	r2, #35	; 0x23
   d6ab2:	2118      	movs	r1, #24
   d6ab4:	4628      	mov	r0, r5
   d6ab6:	f7ff fecf 	bl	d6858 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6aba:	4604      	mov	r4, r0
   d6abc:	b910      	cbnz	r0, d6ac4 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d6abe:	f240 229b 	movw	r2, #667	; 0x29b
   d6ac2:	e7ee      	b.n	d6aa2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d6ac4:	2fff      	cmp	r7, #255	; 0xff
   d6ac6:	bfa8      	it	ge
   d6ac8:	27ff      	movge	r7, #255	; 0xff
   d6aca:	2f01      	cmp	r7, #1
   d6acc:	bfb8      	it	lt
   d6ace:	2701      	movlt	r7, #1
   d6ad0:	2301      	movs	r3, #1
   d6ad2:	b2fa      	uxtb	r2, r7
   d6ad4:	2119      	movs	r1, #25
   d6ad6:	4628      	mov	r0, r5
   d6ad8:	f7ff febe 	bl	d6858 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6adc:	4604      	mov	r4, r0
   d6ade:	b910      	cbnz	r0, d6ae6 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d6ae0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d6ae4:	e7dd      	b.n	d6aa2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d6ae6:	2301      	movs	r3, #1
   d6ae8:	2208      	movs	r2, #8
   d6aea:	2112      	movs	r1, #18
   d6aec:	4628      	mov	r0, r5
   d6aee:	f7ff ffc1 	bl	d6a74 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6af2:	4604      	mov	r4, r0
   d6af4:	b910      	cbnz	r0, d6afc <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d6af6:	f240 22af 	movw	r2, #687	; 0x2af
   d6afa:	e7d2      	b.n	d6aa2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d6afc:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d6afe:	f04f 0301 	mov.w	r3, #1
   d6b02:	bf14      	ite	ne
   d6b04:	2283      	movne	r2, #131	; 0x83
   d6b06:	2282      	moveq	r2, #130	; 0x82
   d6b08:	2118      	movs	r1, #24
   d6b0a:	4628      	mov	r0, r5
   d6b0c:	f7ff fea4 	bl	d6858 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6b10:	4604      	mov	r4, r0
   d6b12:	2800      	cmp	r0, #0
   d6b14:	d1c9      	bne.n	d6aaa <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d6b16:	f240 22b9 	movw	r2, #697	; 0x2b9
   d6b1a:	e7c2      	b.n	d6aa2 <_ZN6AB180517setCountdownTimerEib+0x1a>
   d6b1c:	000dca9a 	.word	0x000dca9a
   d6b20:	2003e4fc 	.word	0x2003e4fc

000d6b24 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d6b24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d6b28:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d6b2a:	4605      	mov	r5, r0
   d6b2c:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d6b2e:	484f      	ldr	r0, [pc, #316]	; (d6c6c <_ZN6AB180513deepPowerDownEi+0x148>)
   d6b30:	494f      	ldr	r1, [pc, #316]	; (d6c70 <_ZN6AB180513deepPowerDownEi+0x14c>)
   d6b32:	f7fd fd08 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d6b36:	2100      	movs	r1, #0
   d6b38:	4628      	mov	r0, r5
   d6b3a:	f7ff fe99 	bl	d6870 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d6b3e:	4604      	mov	r4, r0
   d6b40:	b948      	cbnz	r0, d6b56 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d6b42:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d6b46:	494b      	ldr	r1, [pc, #300]	; (d6c74 <_ZN6AB180513deepPowerDownEi+0x150>)
   d6b48:	4848      	ldr	r0, [pc, #288]	; (d6c6c <_ZN6AB180513deepPowerDownEi+0x148>)
   d6b4a:	f7fd fd13 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
}
   d6b4e:	4620      	mov	r0, r4
   d6b50:	b003      	add	sp, #12
   d6b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d6b56:	2301      	movs	r3, #1
   d6b58:	461a      	mov	r2, r3
   d6b5a:	2130      	movs	r1, #48	; 0x30
   d6b5c:	4628      	mov	r0, r5
   d6b5e:	f7ff ff89 	bl	d6a74 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6b62:	4604      	mov	r4, r0
   d6b64:	b910      	cbnz	r0, d6b6c <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d6b66:	f240 2205 	movw	r2, #517	; 0x205
   d6b6a:	e7ec      	b.n	d6b46 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d6b6c:	2210      	movs	r2, #16
   d6b6e:	2301      	movs	r3, #1
   d6b70:	4611      	mov	r1, r2
   d6b72:	4628      	mov	r0, r5
   d6b74:	f7ff ff1d 	bl	d69b2 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d6b78:	4604      	mov	r4, r0
   d6b7a:	b910      	cbnz	r0, d6b82 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d6b7c:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d6b80:	e7e1      	b.n	d6b46 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d6b82:	2301      	movs	r3, #1
   d6b84:	2226      	movs	r2, #38	; 0x26
   d6b86:	2113      	movs	r1, #19
   d6b88:	4628      	mov	r0, r5
   d6b8a:	f7ff fe65 	bl	d6858 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6b8e:	4604      	mov	r4, r0
   d6b90:	b910      	cbnz	r0, d6b98 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d6b92:	f240 2213 	movw	r2, #531	; 0x213
   d6b96:	e7d6      	b.n	d6b46 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d6b98:	2601      	movs	r6, #1
   d6b9a:	9600      	str	r6, [sp, #0]
   d6b9c:	4633      	mov	r3, r6
   d6b9e:	22fc      	movs	r2, #252	; 0xfc
   d6ba0:	2111      	movs	r1, #17
   d6ba2:	4628      	mov	r0, r5
   d6ba4:	f7ff feb8 	bl	d6918 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6ba8:	4604      	mov	r4, r0
   d6baa:	b910      	cbnz	r0, d6bb2 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d6bac:	f240 221b 	movw	r2, #539	; 0x21b
   d6bb0:	e7c9      	b.n	d6b46 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d6bb2:	2200      	movs	r2, #0
   d6bb4:	4639      	mov	r1, r7
   d6bb6:	4628      	mov	r0, r5
   d6bb8:	f7ff ff66 	bl	d6a88 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d6bbc:	4604      	mov	r4, r0
   d6bbe:	b910      	cbnz	r0, d6bc6 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d6bc0:	f240 2222 	movw	r2, #546	; 0x222
   d6bc4:	e7bf      	b.n	d6b46 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d6bc6:	9600      	str	r6, [sp, #0]
   d6bc8:	2302      	movs	r3, #2
   d6bca:	2277      	movs	r2, #119	; 0x77
   d6bcc:	2110      	movs	r1, #16
   d6bce:	4628      	mov	r0, r5
   d6bd0:	f7ff fea2 	bl	d6918 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6bd4:	4604      	mov	r4, r0
   d6bd6:	b910      	cbnz	r0, d6bde <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d6bd8:	f240 222b 	movw	r2, #555	; 0x22b
   d6bdc:	e7b3      	b.n	d6b46 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d6bde:	4633      	mov	r3, r6
   d6be0:	2204      	movs	r2, #4
   d6be2:	211c      	movs	r1, #28
   d6be4:	4628      	mov	r0, r5
   d6be6:	f7ff ff45 	bl	d6a74 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6bea:	4604      	mov	r4, r0
   d6bec:	b910      	cbnz	r0, d6bf4 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d6bee:	f240 2232 	movw	r2, #562	; 0x232
   d6bf2:	e7a8      	b.n	d6b46 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d6bf4:	9600      	str	r6, [sp, #0]
   d6bf6:	2318      	movs	r3, #24
   d6bf8:	22e3      	movs	r2, #227	; 0xe3
   d6bfa:	2111      	movs	r1, #17
   d6bfc:	4628      	mov	r0, r5
   d6bfe:	f7ff fe8b 	bl	d6918 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6c02:	4604      	mov	r4, r0
   d6c04:	b910      	cbnz	r0, d6c0c <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d6c06:	f240 2239 	movw	r2, #569	; 0x239
   d6c0a:	e79c      	b.n	d6b46 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d6c0c:	4633      	mov	r3, r6
   d6c0e:	22c0      	movs	r2, #192	; 0xc0
   d6c10:	2117      	movs	r1, #23
   d6c12:	4628      	mov	r0, r5
   d6c14:	f7ff fe20 	bl	d6858 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6c18:	4604      	mov	r4, r0
   d6c1a:	b910      	cbnz	r0, d6c22 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d6c1c:	f44f 7210 	mov.w	r2, #576	; 0x240
   d6c20:	e791      	b.n	d6b46 <_ZN6AB180513deepPowerDownEi+0x22>
   d6c22:	f001 f87f 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6c26:	f8df 9054 	ldr.w	r9, [pc, #84]	; d6c7c <_ZN6AB180513deepPowerDownEi+0x158>
   d6c2a:	f8df 8040 	ldr.w	r8, [pc, #64]	; d6c6c <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6c2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6c32:	4606      	mov	r6, r0
   d6c34:	434f      	muls	r7, r1
   d6c36:	f001 f875 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
   d6c3a:	1b80      	subs	r0, r0, r6
   d6c3c:	42b8      	cmp	r0, r7
   d6c3e:	d20e      	bcs.n	d6c5e <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6c40:	2201      	movs	r2, #1
   d6c42:	2117      	movs	r1, #23
   d6c44:	4628      	mov	r0, r5
   d6c46:	f7ff fdbd 	bl	d67c4 <_ZN6AB180512readRegisterEhb>
   d6c4a:	4649      	mov	r1, r9
   d6c4c:	4602      	mov	r2, r0
   d6c4e:	4640      	mov	r0, r8
   d6c50:	f7fd fc79 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d6c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6c58:	f001 fbe4 	bl	d8424 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6c5c:	e7eb      	b.n	d6c36 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d6c5e:	4906      	ldr	r1, [pc, #24]	; (d6c78 <_ZN6AB180513deepPowerDownEi+0x154>)
   d6c60:	4802      	ldr	r0, [pc, #8]	; (d6c6c <_ZN6AB180513deepPowerDownEi+0x148>)
   d6c62:	f7fd fc87 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d6c66:	f003 ffa3 	bl	dabb0 <_ZN11SystemClass5resetEv>
    return true;
   d6c6a:	e770      	b.n	d6b4e <_ZN6AB180513deepPowerDownEi+0x2a>
   d6c6c:	2003e4fc 	.word	0x2003e4fc
   d6c70:	000dcac5 	.word	0x000dcac5
   d6c74:	000dcaba 	.word	0x000dcaba
   d6c78:	000dcaeb 	.word	0x000dcaeb
   d6c7c:	000dcad6 	.word	0x000dcad6

000d6c80 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d6c80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6c84:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6c88:	4605      	mov	r5, r0
   d6c8a:	460c      	mov	r4, r1
   d6c8c:	4691      	mov	r9, r2
   d6c8e:	461f      	mov	r7, r3
    if (lock) {
   d6c90:	f1ba 0f00 	cmp.w	sl, #0
   d6c94:	d002      	beq.n	d6c9c <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6c96:	6840      	ldr	r0, [r0, #4]
   d6c98:	f002 f9e2 	bl	d9060 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6c9c:	b307      	cbz	r7, d6ce0 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d6c9e:	2f20      	cmp	r7, #32
   d6ca0:	463e      	mov	r6, r7
   d6ca2:	bf28      	it	cs
   d6ca4:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6ca6:	2c7f      	cmp	r4, #127	; 0x7f
   d6ca8:	d826      	bhi.n	d6cf8 <_ZN6AB18057readRamEjPhjb+0x78>
   d6caa:	1933      	adds	r3, r6, r4
   d6cac:	2b80      	cmp	r3, #128	; 0x80
   d6cae:	d901      	bls.n	d6cb4 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d6cb0:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6cb4:	2301      	movs	r3, #1
   d6cb6:	2204      	movs	r2, #4
   d6cb8:	213f      	movs	r1, #63	; 0x3f
   d6cba:	4628      	mov	r0, r5
   d6cbc:	f7ff fe79 	bl	d69b2 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6cc0:	2300      	movs	r3, #0
   d6cc2:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6cc6:	9300      	str	r3, [sp, #0]
   d6cc8:	464a      	mov	r2, r9
   d6cca:	4633      	mov	r3, r6
   d6ccc:	b2c9      	uxtb	r1, r1
   d6cce:	4628      	mov	r0, r5
   d6cd0:	f7ff fce4 	bl	d669c <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6cd4:	4680      	mov	r8, r0
   d6cd6:	b128      	cbz	r0, d6ce4 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6cd8:	4434      	add	r4, r6
        dataLen -= count;
   d6cda:	1bbf      	subs	r7, r7, r6
        data += count;
   d6cdc:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6cde:	e7dd      	b.n	d6c9c <_ZN6AB18057readRamEjPhjb+0x1c>
   d6ce0:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6ce4:	f1ba 0f00 	cmp.w	sl, #0
   d6ce8:	d002      	beq.n	d6cf0 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6cea:	6868      	ldr	r0, [r5, #4]
   d6cec:	f002 f9c1 	bl	d9072 <_ZN7TwoWire6unlockEv>
}
   d6cf0:	4640      	mov	r0, r8
   d6cf2:	b002      	add	sp, #8
   d6cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6cf8:	2301      	movs	r3, #1
   d6cfa:	2204      	movs	r2, #4
   d6cfc:	213f      	movs	r1, #63	; 0x3f
   d6cfe:	4628      	mov	r0, r5
   d6d00:	f7ff feb8 	bl	d6a74 <_ZN6AB180514setRegisterBitEhhb>
   d6d04:	e7dc      	b.n	d6cc0 <_ZN6AB18057readRamEjPhjb+0x40>

000d6d06 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6d06:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6d0a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6d0e:	4605      	mov	r5, r0
   d6d10:	460c      	mov	r4, r1
   d6d12:	4691      	mov	r9, r2
   d6d14:	461f      	mov	r7, r3
    if (lock) {
   d6d16:	f1ba 0f00 	cmp.w	sl, #0
   d6d1a:	d002      	beq.n	d6d22 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d6d1c:	6840      	ldr	r0, [r0, #4]
   d6d1e:	f002 f99f 	bl	d9060 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6d22:	b307      	cbz	r7, d6d66 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6d24:	2f1f      	cmp	r7, #31
   d6d26:	463e      	mov	r6, r7
   d6d28:	bf28      	it	cs
   d6d2a:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6d2c:	2c7f      	cmp	r4, #127	; 0x7f
   d6d2e:	d826      	bhi.n	d6d7e <_ZN6AB18058writeRamEjPKhjb+0x78>
   d6d30:	1933      	adds	r3, r6, r4
   d6d32:	2b80      	cmp	r3, #128	; 0x80
   d6d34:	d901      	bls.n	d6d3a <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6d36:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6d3a:	2301      	movs	r3, #1
   d6d3c:	2204      	movs	r2, #4
   d6d3e:	213f      	movs	r1, #63	; 0x3f
   d6d40:	4628      	mov	r0, r5
   d6d42:	f7ff fe36 	bl	d69b2 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6d46:	2300      	movs	r3, #0
   d6d48:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6d4c:	9300      	str	r3, [sp, #0]
   d6d4e:	464a      	mov	r2, r9
   d6d50:	4633      	mov	r3, r6
   d6d52:	b2c9      	uxtb	r1, r1
   d6d54:	4628      	mov	r0, r5
   d6d56:	f7ff fd43 	bl	d67e0 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d6d5a:	4680      	mov	r8, r0
   d6d5c:	b128      	cbz	r0, d6d6a <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d6d5e:	4434      	add	r4, r6
        dataLen -= count;
   d6d60:	1bbf      	subs	r7, r7, r6
        data += count;
   d6d62:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6d64:	e7dd      	b.n	d6d22 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d6d66:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6d6a:	f1ba 0f00 	cmp.w	sl, #0
   d6d6e:	d002      	beq.n	d6d76 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d6d70:	6868      	ldr	r0, [r5, #4]
   d6d72:	f002 f97e 	bl	d9072 <_ZN7TwoWire6unlockEv>
}
   d6d76:	4640      	mov	r0, r8
   d6d78:	b002      	add	sp, #8
   d6d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6d7e:	2301      	movs	r3, #1
   d6d80:	2204      	movs	r2, #4
   d6d82:	213f      	movs	r1, #63	; 0x3f
   d6d84:	4628      	mov	r0, r5
   d6d86:	f7ff fe75 	bl	d6a74 <_ZN6AB180514setRegisterBitEhhb>
   d6d8a:	e7dc      	b.n	d6d46 <_ZN6AB18058writeRamEjPKhjb+0x40>

000d6d8c <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d6d8c:	b530      	push	{r4, r5, lr}
   d6d8e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6d90:	680d      	ldr	r5, [r1, #0]
   d6d92:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6d96:	9503      	str	r5, [sp, #12]
   d6d98:	684d      	ldr	r5, [r1, #4]
   d6d9a:	9502      	str	r5, [sp, #8]
   d6d9c:	688d      	ldr	r5, [r1, #8]
   d6d9e:	9501      	str	r5, [sp, #4]
   d6da0:	68c9      	ldr	r1, [r1, #12]
   d6da2:	9100      	str	r1, [sp, #0]
   d6da4:	3301      	adds	r3, #1
   d6da6:	4904      	ldr	r1, [pc, #16]	; (d6db8 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6da8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d6dac:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6dae:	f003 fe91 	bl	daad4 <_ZN6String6formatEPKcz>
}
   d6db2:	4620      	mov	r0, r4
   d6db4:	b005      	add	sp, #20
   d6db6:	bd30      	pop	{r4, r5, pc}
   d6db8:	000dcafd 	.word	0x000dcafd

000d6dbc <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6dbc:	1103      	asrs	r3, r0, #4
}
   d6dbe:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6dc0:	f000 000f 	and.w	r0, r0, #15
}
   d6dc4:	fb02 0003 	mla	r0, r2, r3, r0
   d6dc8:	4770      	bx	lr

000d6dca <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6dca:	b538      	push	{r3, r4, r5, lr}
   d6dcc:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d6dce:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6dd0:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d6dd2:	f7ff fff3 	bl	d6dbc <_ZN6AB180510bcdToValueEh>
   d6dd6:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6dd8:	7860      	ldrb	r0, [r4, #1]
   d6dda:	f7ff ffef 	bl	d6dbc <_ZN6AB180510bcdToValueEh>
   d6dde:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6de0:	78a0      	ldrb	r0, [r4, #2]
   d6de2:	f7ff ffeb 	bl	d6dbc <_ZN6AB180510bcdToValueEh>
   d6de6:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6de8:	78e0      	ldrb	r0, [r4, #3]
   d6dea:	f7ff ffe7 	bl	d6dbc <_ZN6AB180510bcdToValueEh>
   d6dee:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6df0:	7920      	ldrb	r0, [r4, #4]
   d6df2:	f7ff ffe3 	bl	d6dbc <_ZN6AB180510bcdToValueEh>
   d6df6:	3801      	subs	r0, #1
   d6df8:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6dfa:	b92d      	cbnz	r5, d6e08 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6dfc:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d6dfe:	7828      	ldrb	r0, [r5, #0]
   d6e00:	f7ff ffdc 	bl	d6dbc <_ZN6AB180510bcdToValueEh>
   d6e04:	6188      	str	r0, [r1, #24]
}
   d6e06:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6e08:	7960      	ldrb	r0, [r4, #5]
   d6e0a:	f7ff ffd7 	bl	d6dbc <_ZN6AB180510bcdToValueEh>
   d6e0e:	3064      	adds	r0, #100	; 0x64
   d6e10:	1da5      	adds	r5, r4, #6
   d6e12:	6148      	str	r0, [r1, #20]
   d6e14:	e7f3      	b.n	d6dfe <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6e18 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6e18:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6e1a:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6e1c:	b088      	sub	sp, #32
   d6e1e:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6e20:	461a      	mov	r2, r3
   d6e22:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6e24:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6e26:	f7ff fda6 	bl	d6976 <_ZN6AB180510isBitClearEhhb>
   d6e2a:	b1f0      	cbz	r0, d6e6a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6e2c:	2308      	movs	r3, #8
   d6e2e:	2601      	movs	r6, #1
   d6e30:	4620      	mov	r0, r4
   d6e32:	9600      	str	r6, [sp, #0]
   d6e34:	eb0d 0203 	add.w	r2, sp, r3
   d6e38:	2100      	movs	r1, #0
   d6e3a:	f7ff fc2f 	bl	d669c <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d6e3e:	4604      	mov	r4, r0
   d6e40:	b198      	cbz	r0, d6e6a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d6e42:	4632      	mov	r2, r6
   d6e44:	4629      	mov	r1, r5
   d6e46:	f10d 0009 	add.w	r0, sp, #9
   d6e4a:	f7ff ffbe 	bl	d6dca <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d6e4e:	a804      	add	r0, sp, #16
   d6e50:	f7ff ff9c 	bl	d6d8c <_ZN6AB180510tmToStringEPK2tm>
   d6e54:	4808      	ldr	r0, [pc, #32]	; (d6e78 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d6e56:	9a04      	ldr	r2, [sp, #16]
   d6e58:	4908      	ldr	r1, [pc, #32]	; (d6e7c <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d6e5a:	f7fd fb74 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d6e5e:	a804      	add	r0, sp, #16
   d6e60:	f003 fd6c 	bl	da93c <_ZN6StringD1Ev>
}
   d6e64:	4620      	mov	r0, r4
   d6e66:	b008      	add	sp, #32
   d6e68:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d6e6a:	2224      	movs	r2, #36	; 0x24
   d6e6c:	2100      	movs	r1, #0
   d6e6e:	4628      	mov	r0, r5
   d6e70:	f005 f93c 	bl	dc0ec <memset>
   d6e74:	2400      	movs	r4, #0
   d6e76:	e7f5      	b.n	d6e64 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d6e78:	2003e4fc 	.word	0x2003e4fc
   d6e7c:	000dcb1b 	.word	0x000dcb1b

000d6e80 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d6e80:	b530      	push	{r4, r5, lr}
   d6e82:	b08b      	sub	sp, #44	; 0x2c
   d6e84:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6e86:	a901      	add	r1, sp, #4
   d6e88:	f7ff ffc6 	bl	d6e18 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d6e8c:	4604      	mov	r4, r0
   d6e8e:	b120      	cbz	r0, d6e9a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d6e90:	a801      	add	r0, sp, #4
   d6e92:	f001 fab3 	bl	d83fc <mktime>
   d6e96:	e9c5 0100 	strd	r0, r1, [r5]
}
   d6e9a:	4620      	mov	r0, r4
   d6e9c:	b00b      	add	sp, #44	; 0x2c
   d6e9e:	bd30      	pop	{r4, r5, pc}

000d6ea0 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d6ea0:	b510      	push	{r4, lr}
   d6ea2:	4604      	mov	r4, r0
   d6ea4:	b088      	sub	sp, #32
    if (callBegin) {
   d6ea6:	b111      	cbz	r1, d6eae <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d6ea8:	6840      	ldr	r0, [r0, #4]
   d6eaa:	f002 f881 	bl	d8fb0 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d6eae:	4620      	mov	r0, r4
   d6eb0:	f7ff fc4a 	bl	d6748 <_ZN6AB180510detectChipEv>
   d6eb4:	b370      	cbz	r0, d6f14 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6eb6:	4620      	mov	r0, r4
   d6eb8:	f7ff fd86 	bl	d69c8 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6ebc:	2301      	movs	r3, #1
   d6ebe:	461a      	mov	r2, r3
   d6ec0:	2110      	movs	r1, #16
   d6ec2:	4620      	mov	r0, r4
   d6ec4:	f7ff fd57 	bl	d6976 <_ZN6AB180510isBitClearEhhb>
   d6ec8:	b1d8      	cbz	r0, d6f02 <_ZN6AB18055setupEb+0x62>
   d6eca:	f004 f8ab 	bl	db024 <_ZN9TimeClass7isValidEv>
   d6ece:	b9c0      	cbnz	r0, d6f02 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6ed0:	a902      	add	r1, sp, #8
   d6ed2:	4620      	mov	r0, r4
   d6ed4:	f7ff ffd4 	bl	d6e80 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6edc:	f003 ffa8 	bl	dae30 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6ee0:	4b0f      	ldr	r3, [pc, #60]	; (d6f20 <_ZN6AB18055setupEb+0x80>)
   d6ee2:	4910      	ldr	r1, [pc, #64]	; (d6f24 <_ZN6AB18055setupEb+0x84>)
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	9300      	str	r3, [sp, #0]
   d6ee8:	a804      	add	r0, sp, #16
   d6eea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6eee:	f004 f857 	bl	dafa0 <_ZN9TimeClass6formatExPKc>
   d6ef2:	480d      	ldr	r0, [pc, #52]	; (d6f28 <_ZN6AB18055setupEb+0x88>)
   d6ef4:	9a04      	ldr	r2, [sp, #16]
   d6ef6:	490d      	ldr	r1, [pc, #52]	; (d6f2c <_ZN6AB18055setupEb+0x8c>)
   d6ef8:	f7fd fb25 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d6efc:	a804      	add	r0, sp, #16
   d6efe:	f003 fd1d 	bl	da93c <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6f02:	4a0b      	ldr	r2, [pc, #44]	; (d6f30 <_ZN6AB18055setupEb+0x90>)
   d6f04:	2300      	movs	r3, #0
   d6f06:	2100      	movs	r1, #0
   d6f08:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6f0c:	f001 f8e4 	bl	d80d8 <system_subscribe_event>
}
   d6f10:	b008      	add	sp, #32
   d6f12:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6f14:	4907      	ldr	r1, [pc, #28]	; (d6f34 <_ZN6AB18055setupEb+0x94>)
   d6f16:	4804      	ldr	r0, [pc, #16]	; (d6f28 <_ZN6AB18055setupEb+0x88>)
   d6f18:	f7fd fb2c 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
   d6f1c:	e7f1      	b.n	d6f02 <_ZN6AB18055setupEb+0x62>
   d6f1e:	bf00      	nop
   d6f20:	2003e2ac 	.word	0x2003e2ac
   d6f24:	2003e634 	.word	0x2003e634
   d6f28:	2003e4fc 	.word	0x2003e4fc
   d6f2c:	000dcb29 	.word	0x000dcb29
   d6f30:	000d68f5 	.word	0x000d68f5
   d6f34:	000dcb46 	.word	0x000dcb46

000d6f38 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6f38:	220a      	movs	r2, #10
   d6f3a:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d6f3e:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d6f42:	fb93 f1f2 	sdiv	r1, r3, r2
   d6f46:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6f4a:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d6f4e:	b2c0      	uxtb	r0, r0
   d6f50:	4770      	bx	lr

000d6f52 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6f52:	b570      	push	{r4, r5, r6, lr}
   d6f54:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6f56:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6f58:	460c      	mov	r4, r1
   d6f5a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6f5c:	f7ff ffec 	bl	d6f38 <_ZN6AB180510valueToBcdEi>
   d6f60:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d6f62:	6868      	ldr	r0, [r5, #4]
   d6f64:	f7ff ffe8 	bl	d6f38 <_ZN6AB180510valueToBcdEi>
   d6f68:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d6f6a:	68a8      	ldr	r0, [r5, #8]
   d6f6c:	f7ff ffe4 	bl	d6f38 <_ZN6AB180510valueToBcdEi>
   d6f70:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d6f72:	68e8      	ldr	r0, [r5, #12]
   d6f74:	f7ff ffe0 	bl	d6f38 <_ZN6AB180510valueToBcdEi>
   d6f78:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6f7a:	6928      	ldr	r0, [r5, #16]
   d6f7c:	3001      	adds	r0, #1
   d6f7e:	f7ff ffdb 	bl	d6f38 <_ZN6AB180510valueToBcdEi>
   d6f82:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d6f84:	b92e      	cbnz	r6, d6f92 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6f86:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d6f88:	69a8      	ldr	r0, [r5, #24]
   d6f8a:	f7ff ffd5 	bl	d6f38 <_ZN6AB180510valueToBcdEi>
   d6f8e:	7030      	strb	r0, [r6, #0]
}
   d6f90:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d6f92:	696a      	ldr	r2, [r5, #20]
   d6f94:	2364      	movs	r3, #100	; 0x64
   d6f96:	fb92 f0f3 	sdiv	r0, r2, r3
   d6f9a:	fb03 2010 	mls	r0, r3, r0, r2
   d6f9e:	f7ff ffcb 	bl	d6f38 <_ZN6AB180510valueToBcdEi>
   d6fa2:	1da6      	adds	r6, r4, #6
   d6fa4:	7160      	strb	r0, [r4, #5]
   d6fa6:	e7ef      	b.n	d6f88 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d6fa8 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6faa:	b087      	sub	sp, #28
   d6fac:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6fae:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6fb0:	4616      	mov	r6, r2
   d6fb2:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6fb4:	f7ff feea 	bl	d6d8c <_ZN6AB180510tmToStringEPK2tm>
   d6fb8:	481e      	ldr	r0, [pc, #120]	; (d7034 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6fba:	9a02      	ldr	r2, [sp, #8]
   d6fbc:	491e      	ldr	r1, [pc, #120]	; (d7038 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d6fbe:	f7fd fac2 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d6fc2:	a802      	add	r0, sp, #8
   d6fc4:	f003 fcba 	bl	da93c <_ZN6StringD1Ev>
    if (lock) {
   d6fc8:	b116      	cbz	r6, d6fd0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d6fca:	6868      	ldr	r0, [r5, #4]
   d6fcc:	f002 f848 	bl	d9060 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d6fd0:	4620      	mov	r0, r4
   d6fd2:	2201      	movs	r2, #1
   d6fd4:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d6fd8:	2700      	movs	r7, #0
   d6fda:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d6fde:	f7ff ffb8 	bl	d6f52 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d6fe2:	2301      	movs	r3, #1
   d6fe4:	461a      	mov	r2, r3
   d6fe6:	2110      	movs	r1, #16
   d6fe8:	4628      	mov	r0, r5
   d6fea:	f7ff fd43 	bl	d6a74 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d6fee:	4604      	mov	r4, r0
   d6ff0:	b1e8      	cbz	r0, d702e <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d6ff2:	2308      	movs	r3, #8
   d6ff4:	9700      	str	r7, [sp, #0]
   d6ff6:	eb0d 0203 	add.w	r2, sp, r3
   d6ffa:	4639      	mov	r1, r7
   d6ffc:	4628      	mov	r0, r5
   d6ffe:	f7ff fbef 	bl	d67e0 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d7002:	4604      	mov	r4, r0
   d7004:	b160      	cbz	r0, d7020 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d7006:	2301      	movs	r3, #1
   d7008:	461a      	mov	r2, r3
   d700a:	2110      	movs	r1, #16
   d700c:	4628      	mov	r0, r5
   d700e:	f7ff fcd0 	bl	d69b2 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d7012:	b116      	cbz	r6, d701a <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d7014:	6868      	ldr	r0, [r5, #4]
   d7016:	f002 f82c 	bl	d9072 <_ZN7TwoWire6unlockEv>
}
   d701a:	4620      	mov	r0, r4
   d701c:	b007      	add	sp, #28
   d701e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d7020:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d7024:	4905      	ldr	r1, [pc, #20]	; (d703c <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d7026:	4803      	ldr	r0, [pc, #12]	; (d7034 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d7028:	f7fd faa4 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
   d702c:	e7f1      	b.n	d7012 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d702e:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d7032:	e7f7      	b.n	d7024 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d7034:	2003e4fc 	.word	0x2003e4fc
   d7038:	000dcb5e 	.word	0x000dcb5e
   d703c:	000dcb6c 	.word	0x000dcb6c

000d7040 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d7040:	b513      	push	{r0, r1, r4, lr}
   d7042:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d7044:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d7046:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d704a:	f005 f815 	bl	dc078 <gmtime>
    return setRtcFromTm(tm, lock);
   d704e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d7052:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d7054:	4620      	mov	r0, r4
   d7056:	f7ff ffa7 	bl	d6fa8 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d705a:	b002      	add	sp, #8
   d705c:	bd10      	pop	{r4, pc}
	...

000d7060 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d7060:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d7062:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d7064:	b089      	sub	sp, #36	; 0x24
   d7066:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d7068:	bb75      	cbnz	r5, d70c8 <_ZN6AB18054loopEv+0x68>
   d706a:	f003 ffdb 	bl	db024 <_ZN9TimeClass7isValidEv>
   d706e:	b358      	cbz	r0, d70c8 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d7070:	2600      	movs	r6, #0
   d7072:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d7074:	a904      	add	r1, sp, #16
   d7076:	4628      	mov	r0, r5
        tm = 0;
   d7078:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d707c:	f001 f8de 	bl	d823c <spark_sync_time_last>
   d7080:	b310      	cbz	r0, d70c8 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d7082:	2501      	movs	r5, #1
   d7084:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d7086:	f003 ffea 	bl	db05e <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d708a:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d708c:	4602      	mov	r2, r0
   d708e:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d7090:	4620      	mov	r0, r4
        time_t time = Time.now();
   d7092:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d7096:	f7ff ffd3 	bl	d7040 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d709a:	a902      	add	r1, sp, #8
   d709c:	4620      	mov	r0, r4
        time = 0;
   d709e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d70a2:	f7ff feed 	bl	d6e80 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d70a6:	4b12      	ldr	r3, [pc, #72]	; (d70f0 <_ZN6AB18054loopEv+0x90>)
   d70a8:	4912      	ldr	r1, [pc, #72]	; (d70f4 <_ZN6AB18054loopEv+0x94>)
   d70aa:	681b      	ldr	r3, [r3, #0]
   d70ac:	9300      	str	r3, [sp, #0]
   d70ae:	a804      	add	r0, sp, #16
   d70b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d70b4:	f003 ff74 	bl	dafa0 <_ZN9TimeClass6formatExPKc>
   d70b8:	480f      	ldr	r0, [pc, #60]	; (d70f8 <_ZN6AB18054loopEv+0x98>)
   d70ba:	9a04      	ldr	r2, [sp, #16]
   d70bc:	490f      	ldr	r1, [pc, #60]	; (d70fc <_ZN6AB18054loopEv+0x9c>)
   d70be:	f7fd fa42 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d70c2:	a804      	add	r0, sp, #16
   d70c4:	f003 fc3a 	bl	da93c <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d70c8:	6963      	ldr	r3, [r4, #20]
   d70ca:	b173      	cbz	r3, d70ea <_ZN6AB18054loopEv+0x8a>
   d70cc:	f000 fe2a 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d70d0:	6923      	ldr	r3, [r4, #16]
   d70d2:	1ac0      	subs	r0, r0, r3
   d70d4:	6963      	ldr	r3, [r4, #20]
   d70d6:	4298      	cmp	r0, r3
   d70d8:	d307      	bcc.n	d70ea <_ZN6AB18054loopEv+0x8a>
   d70da:	f000 fe23 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d70de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d70e2:	6120      	str	r0, [r4, #16]
            setWDT();
   d70e4:	4620      	mov	r0, r4
   d70e6:	f7ff fbc3 	bl	d6870 <_ZN6AB18056setWDTEi>
}
   d70ea:	b009      	add	sp, #36	; 0x24
   d70ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d70ee:	bf00      	nop
   d70f0:	2003e2ac 	.word	0x2003e2ac
   d70f4:	2003e634 	.word	0x2003e634
   d70f8:	2003e4fc 	.word	0x2003e4fc
   d70fc:	000dcb87 	.word	0x000dcb87

000d7100 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d7100:	4b01      	ldr	r3, [pc, #4]	; (d7108 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d7102:	4a02      	ldr	r2, [pc, #8]	; (d710c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d7104:	601a      	str	r2, [r3, #0]
}
   d7106:	4770      	bx	lr
   d7108:	2003e4fc 	.word	0x2003e4fc
   d710c:	000dcb9d 	.word	0x000dcb9d

000d7110 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d7110:	4770      	bx	lr

000d7112 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d7112:	b510      	push	{r4, lr}
}
   d7114:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d7116:	4604      	mov	r4, r0
}
   d7118:	f004 fad3 	bl	db6c2 <_ZdlPvj>
   d711c:	4620      	mov	r0, r4
   d711e:	bd10      	pop	{r4, pc}

000d7120 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d7120:	6803      	ldr	r3, [r0, #0]
   d7122:	b2c9      	uxtb	r1, r1
   d7124:	689b      	ldr	r3, [r3, #8]
   d7126:	4718      	bx	r3

000d7128 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d7128:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d712a:	4d03      	ldr	r5, [pc, #12]	; (d7138 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d712c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d7130:	e9c0 5100 	strd	r5, r1, [r0]
}
   d7134:	bd30      	pop	{r4, r5, pc}
   d7136:	bf00      	nop
   d7138:	000dcbf4 	.word	0x000dcbf4

000d713c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d713c:	6840      	ldr	r0, [r0, #4]
   d713e:	f001 bf37 	b.w	d8fb0 <_ZN7TwoWire5beginEv>

000d7142 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7142:	b510      	push	{r4, lr}
   d7144:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7146:	6800      	ldr	r0, [r0, #0]
   d7148:	f001 ff93 	bl	d9072 <_ZN7TwoWire6unlockEv>
   d714c:	4620      	mov	r0, r4
   d714e:	bd10      	pop	{r4, pc}

000d7150 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d7150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7154:	b08a      	sub	sp, #40	; 0x28
   d7156:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d7158:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d715a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d715c:	f001 ff80 	bl	d9060 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7160:	221e      	movs	r2, #30
   d7162:	2100      	movs	r1, #0
   d7164:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d7166:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d7168:	f004 ffc0 	bl	dc0ec <memset>
		size_t framAddr = 0;
   d716c:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d716e:	b1ef      	cbz	r7, d71ac <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7170:	6823      	ldr	r3, [r4, #0]
   d7172:	2f1e      	cmp	r7, #30
   d7174:	46b8      	mov	r8, r7
   d7176:	bf28      	it	cs
   d7178:	f04f 081e 	movcs.w	r8, #30
   d717c:	68dd      	ldr	r5, [r3, #12]
   d717e:	aa02      	add	r2, sp, #8
   d7180:	4643      	mov	r3, r8
   d7182:	4631      	mov	r1, r6
   d7184:	4620      	mov	r0, r4
   d7186:	47a8      	blx	r5
			if (!result) {
   d7188:	4605      	mov	r5, r0
   d718a:	b958      	cbnz	r0, d71a4 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d718c:	480a      	ldr	r0, [pc, #40]	; (d71b8 <_ZN6MB85RC5eraseEv+0x68>)
   d718e:	490b      	ldr	r1, [pc, #44]	; (d71bc <_ZN6MB85RC5eraseEv+0x6c>)
   d7190:	4632      	mov	r2, r6
   d7192:	f7fd f9d8 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7196:	a801      	add	r0, sp, #4
   d7198:	f7ff ffd3 	bl	d7142 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d719c:	4628      	mov	r0, r5
   d719e:	b00a      	add	sp, #40	; 0x28
   d71a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d71a4:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d71a8:	4446      	add	r6, r8
		while(totalLen > 0) {
   d71aa:	e7e0      	b.n	d716e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d71ac:	a801      	add	r0, sp, #4
   d71ae:	f7ff ffc8 	bl	d7142 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d71b2:	2501      	movs	r5, #1
   d71b4:	e7f2      	b.n	d719c <_ZN6MB85RC5eraseEv+0x4c>
   d71b6:	bf00      	nop
   d71b8:	2003e5e0 	.word	0x2003e5e0
   d71bc:	000dcbc0 	.word	0x000dcbc0

000d71c0 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d71c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d71c4:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d71c6:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d71c8:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d71ca:	460d      	mov	r5, r1
   d71cc:	4616      	mov	r6, r2
   d71ce:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d71d0:	f001 ff46 	bl	d9060 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d71d4:	b1a7      	cbz	r7, d7200 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d71d6:	68e1      	ldr	r1, [r4, #12]
   d71d8:	6860      	ldr	r0, [r4, #4]
   d71da:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d71de:	f001 ff1d 	bl	d901c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d71e2:	0a29      	lsrs	r1, r5, #8
   d71e4:	6860      	ldr	r0, [r4, #4]
   d71e6:	f7ff ff9b 	bl	d7120 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d71ea:	4629      	mov	r1, r5
   d71ec:	6860      	ldr	r0, [r4, #4]
   d71ee:	f7ff ff97 	bl	d7120 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d71f2:	6860      	ldr	r0, [r4, #4]
   d71f4:	2100      	movs	r1, #0
   d71f6:	f001 ff2c 	bl	d9052 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d71fa:	b148      	cbz	r0, d7210 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d71fc:	2400      	movs	r4, #0
   d71fe:	e000      	b.n	d7202 <_ZN6MB85RC8readDataEjPhj+0x42>
   d7200:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7202:	a801      	add	r0, sp, #4
   d7204:	f7ff ff9d 	bl	d7142 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d7208:	4620      	mov	r0, r4
   d720a:	b003      	add	sp, #12
   d720c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d7210:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d7212:	7b21      	ldrb	r1, [r4, #12]
   d7214:	6860      	ldr	r0, [r4, #4]
   d7216:	46b8      	mov	r8, r7
   d7218:	bf28      	it	cs
   d721a:	f04f 0820 	movcs.w	r8, #32
   d721e:	2301      	movs	r3, #1
   d7220:	4642      	mov	r2, r8
   d7222:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7226:	f001 fee0 	bl	d8fea <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d722a:	f004 f9f5 	bl	db618 <_Z19__fetch_global_Wirev>
   d722e:	6803      	ldr	r3, [r0, #0]
   d7230:	691b      	ldr	r3, [r3, #16]
   d7232:	4798      	blx	r3
   d7234:	4540      	cmp	r0, r8
   d7236:	dbe1      	blt.n	d71fc <_ZN6MB85RC8readDataEjPhj+0x3c>
   d7238:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d723c:	f004 f9ec 	bl	db618 <_Z19__fetch_global_Wirev>
   d7240:	6803      	ldr	r3, [r0, #0]
   d7242:	695b      	ldr	r3, [r3, #20]
   d7244:	4798      	blx	r3
   d7246:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d724a:	454e      	cmp	r6, r9
   d724c:	d1f6      	bne.n	d723c <_ZN6MB85RC8readDataEjPhj+0x7c>
   d724e:	4445      	add	r5, r8
   d7250:	eba7 0708 	sub.w	r7, r7, r8
   d7254:	e7be      	b.n	d71d4 <_ZN6MB85RC8readDataEjPhj+0x14>

000d7256 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7256:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d725a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d725c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d725e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7260:	460e      	mov	r6, r1
   d7262:	4690      	mov	r8, r2
   d7264:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d7266:	f001 fefb 	bl	d9060 <_ZN7TwoWire4lockEv>
   d726a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d726e:	f1b9 0f00 	cmp.w	r9, #0
   d7272:	d02a      	beq.n	d72ca <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7274:	b34d      	cbz	r5, d72ca <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7276:	68e1      	ldr	r1, [r4, #12]
   d7278:	6860      	ldr	r0, [r4, #4]
   d727a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d727e:	f001 fecd 	bl	d901c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7282:	0a31      	lsrs	r1, r6, #8
   d7284:	6860      	ldr	r0, [r4, #4]
   d7286:	f7ff ff4b 	bl	d7120 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d728a:	6860      	ldr	r0, [r4, #4]
   d728c:	4631      	mov	r1, r6
   d728e:	f7ff ff47 	bl	d7120 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7292:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7296:	4647      	mov	r7, r8
   d7298:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d729c:	6860      	ldr	r0, [r4, #4]
   d729e:	f817 1b01 	ldrb.w	r1, [r7], #1
   d72a2:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d72a4:	3d01      	subs	r5, #1
				wire.write(*data);
   d72a6:	689b      	ldr	r3, [r3, #8]
   d72a8:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d72aa:	4555      	cmp	r5, sl
   d72ac:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d72b0:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d72b2:	d001      	beq.n	d72b8 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d72b4:	2d00      	cmp	r5, #0
   d72b6:	d1f1      	bne.n	d729c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d72b8:	6860      	ldr	r0, [r4, #4]
   d72ba:	2101      	movs	r1, #1
   d72bc:	f001 fec9 	bl	d9052 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d72c0:	2800      	cmp	r0, #0
   d72c2:	d0d7      	beq.n	d7274 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d72c4:	f04f 0900 	mov.w	r9, #0
   d72c8:	e7d1      	b.n	d726e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d72ca:	a801      	add	r0, sp, #4
   d72cc:	f7ff ff39 	bl	d7142 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d72d0:	4648      	mov	r0, r9
   d72d2:	b003      	add	sp, #12
   d72d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d72d8 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d72d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72dc:	b08b      	sub	sp, #44	; 0x2c
   d72de:	460e      	mov	r6, r1
   d72e0:	4615      	mov	r5, r2
   d72e2:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d72e4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72e6:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d72e8:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d72ea:	f001 feb9 	bl	d9060 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d72ee:	42ae      	cmp	r6, r5
   d72f0:	d229      	bcs.n	d7346 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d72f2:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d72f4:	4425      	add	r5, r4
			while(numBytes > 0) {
   d72f6:	b18c      	cbz	r4, d731c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d72f8:	2c1e      	cmp	r4, #30
   d72fa:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d72fc:	f8d8 3000 	ldr.w	r3, [r8]
   d7300:	bf28      	it	cs
   d7302:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7304:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d7306:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d730a:	aa02      	add	r2, sp, #8
   d730c:	463b      	mov	r3, r7
   d730e:	4631      	mov	r1, r6
   d7310:	4640      	mov	r0, r8
				framAddrTo -= count;
   d7312:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d7314:	47c8      	blx	r9
				if (!result) {
   d7316:	b948      	cbnz	r0, d732c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7318:	2400      	movs	r4, #0
   d731a:	e000      	b.n	d731e <_ZN6MB85RC8moveDataEjjj+0x46>
   d731c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d731e:	a801      	add	r0, sp, #4
   d7320:	f7ff ff0f 	bl	d7142 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d7324:	4620      	mov	r0, r4
   d7326:	b00b      	add	sp, #44	; 0x2c
   d7328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d732c:	f8d8 3000 	ldr.w	r3, [r8]
   d7330:	aa02      	add	r2, sp, #8
   d7332:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7336:	4629      	mov	r1, r5
   d7338:	463b      	mov	r3, r7
   d733a:	4640      	mov	r0, r8
   d733c:	47c8      	blx	r9
				if (!result) {
   d733e:	2800      	cmp	r0, #0
   d7340:	d0ea      	beq.n	d7318 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d7342:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7344:	e7d7      	b.n	d72f6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d7346:	d9e9      	bls.n	d731c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d7348:	2c00      	cmp	r4, #0
   d734a:	d0e7      	beq.n	d731c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d734c:	f8d8 3000 	ldr.w	r3, [r8]
   d7350:	2c1e      	cmp	r4, #30
   d7352:	4627      	mov	r7, r4
   d7354:	bf28      	it	cs
   d7356:	271e      	movcs	r7, #30
   d7358:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d735c:	aa02      	add	r2, sp, #8
   d735e:	463b      	mov	r3, r7
   d7360:	4631      	mov	r1, r6
   d7362:	4640      	mov	r0, r8
   d7364:	47c8      	blx	r9
				if (!result) {
   d7366:	2800      	cmp	r0, #0
   d7368:	d0d6      	beq.n	d7318 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d736a:	f8d8 3000 	ldr.w	r3, [r8]
   d736e:	aa02      	add	r2, sp, #8
   d7370:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7374:	4629      	mov	r1, r5
   d7376:	463b      	mov	r3, r7
   d7378:	4640      	mov	r0, r8
   d737a:	47c8      	blx	r9
				if (!result) {
   d737c:	2800      	cmp	r0, #0
   d737e:	d0cb      	beq.n	d7318 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d7380:	443e      	add	r6, r7
				framAddrTo += count;
   d7382:	443d      	add	r5, r7
				numBytes -= count;
   d7384:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7386:	e7df      	b.n	d7348 <_ZN6MB85RC8moveDataEjjj+0x70>

000d7388 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d7388:	6803      	ldr	r3, [r0, #0]
   d738a:	b2c9      	uxtb	r1, r1
   d738c:	689b      	ldr	r3, [r3, #8]
   d738e:	4718      	bx	r3

000d7390 <_ZN8MMA8452QC1Eh>:
//   supplied address into a private variable for future use.
//   The variable addr should be either 0x1C or 0x1D, depending on which voltage
//   the SA0 pin is tied to (GND or 3.3V respectively).
MMA8452Q::MMA8452Q(byte addr)
{
	address = addr; // Store address into private variable
   d7390:	7501      	strb	r1, [r0, #20]
}
   d7392:	4770      	bx	lr

000d7394 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>:

// WRITE MULTIPLE REGISTERS
//	Write an array of "len" bytes ("buffer"), starting at register "reg", and
//	auto-incrmenting to the next.
void MMA8452Q::writeRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
   d7394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7396:	4607      	mov	r7, r0
   d7398:	460c      	mov	r4, r1
   d739a:	4615      	mov	r5, r2
   d739c:	461e      	mov	r6, r3
	Wire.beginTransmission(address);
   d739e:	f004 f93b 	bl	db618 <_Z19__fetch_global_Wirev>
   d73a2:	7d39      	ldrb	r1, [r7, #20]
   d73a4:	f001 fe36 	bl	d9014 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d73a8:	f004 f936 	bl	db618 <_Z19__fetch_global_Wirev>
   d73ac:	4621      	mov	r1, r4
   d73ae:	f7ff ffeb 	bl	d7388 <_ZN7TwoWire5writeEi>
	for (int x = 0; x < len; x++)
   d73b2:	2400      	movs	r4, #0
   d73b4:	42a6      	cmp	r6, r4
   d73b6:	dd07      	ble.n	d73c8 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x34>
		Wire.write(buffer[x]);
   d73b8:	f004 f92e 	bl	db618 <_Z19__fetch_global_Wirev>
   d73bc:	6803      	ldr	r3, [r0, #0]
   d73be:	5d29      	ldrb	r1, [r5, r4]
   d73c0:	689b      	ldr	r3, [r3, #8]
   d73c2:	4798      	blx	r3
	for (int x = 0; x < len; x++)
   d73c4:	3401      	adds	r4, #1
   d73c6:	e7f5      	b.n	d73b4 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x20>
	Wire.endTransmission(); //Stop transmitting
   d73c8:	f004 f926 	bl	db618 <_Z19__fetch_global_Wirev>
}
   d73cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Wire.endTransmission(); //Stop transmitting
   d73d0:	f001 be43 	b.w	d905a <_ZN7TwoWire15endTransmissionEv>

000d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>:
{
   d73d4:	b507      	push	{r0, r1, r2, lr}
	writeRegisters(reg, &data, 1);
   d73d6:	2301      	movs	r3, #1
{
   d73d8:	f88d 2007 	strb.w	r2, [sp, #7]
	writeRegisters(reg, &data, 1);
   d73dc:	f10d 0207 	add.w	r2, sp, #7
   d73e0:	f7ff ffd8 	bl	d7394 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>
}
   d73e4:	b003      	add	sp, #12
   d73e6:	f85d fb04 	ldr.w	pc, [sp], #4

000d73ea <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:

// READ A SINGLE REGISTER
//	Read a byte from the MMA8452Q register "reg".
byte MMA8452Q::readRegister(MMA8452Q_Register reg)
{
   d73ea:	b538      	push	{r3, r4, r5, lr}
   d73ec:	4604      	mov	r4, r0
   d73ee:	460d      	mov	r5, r1
	Wire.beginTransmission(address);
   d73f0:	f004 f912 	bl	db618 <_Z19__fetch_global_Wirev>
   d73f4:	7d21      	ldrb	r1, [r4, #20]
   d73f6:	f001 fe0d 	bl	d9014 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d73fa:	f004 f90d 	bl	db618 <_Z19__fetch_global_Wirev>
   d73fe:	4629      	mov	r1, r5
   d7400:	f7ff ffc2 	bl	d7388 <_ZN7TwoWire5writeEi>
	//endTransmission but keep the connection active
	if (Wire.endTransmission(false) == 0)
   d7404:	f004 f908 	bl	db618 <_Z19__fetch_global_Wirev>
   d7408:	2100      	movs	r1, #0
   d740a:	f001 fe22 	bl	d9052 <_ZN7TwoWire15endTransmissionEh>
   d740e:	b108      	cbz	r0, d7414 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x2a>
        //Ask for 1 byte, once done, bus is released by default
    	if (Wire.requestFrom(address, 1) == 1)
    	    return Wire.read();
	}

    return 0;
   d7410:	2000      	movs	r0, #0
}
   d7412:	bd38      	pop	{r3, r4, r5, pc}
    	if (Wire.requestFrom(address, 1) == 1)
   d7414:	f004 f900 	bl	db618 <_Z19__fetch_global_Wirev>
   d7418:	7d21      	ldrb	r1, [r4, #20]
   d741a:	2201      	movs	r2, #1
   d741c:	f001 fdf7 	bl	d900e <_ZN7TwoWire11requestFromEhj>
   d7420:	2801      	cmp	r0, #1
   d7422:	d1f5      	bne.n	d7410 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x26>
    	    return Wire.read();
   d7424:	f004 f8f8 	bl	db618 <_Z19__fetch_global_Wirev>
   d7428:	6803      	ldr	r3, [r0, #0]
   d742a:	695b      	ldr	r3, [r3, #20]
   d742c:	4798      	blx	r3
   d742e:	b2c0      	uxtb	r0, r0
   d7430:	e7ef      	b.n	d7412 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x28>

000d7432 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:
{
   d7432:	b538      	push	{r3, r4, r5, lr}
   d7434:	460d      	mov	r5, r1
	byte cfg = readRegister(XYZ_DATA_CFG);
   d7436:	210e      	movs	r1, #14
{
   d7438:	4604      	mov	r4, r0
	byte cfg = readRegister(XYZ_DATA_CFG);
   d743a:	f7ff ffd6 	bl	d73ea <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	cfg &= 0xFC; // Mask out scale bits
   d743e:	f020 0203 	bic.w	r2, r0, #3
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
   d7442:	ea42 0295 	orr.w	r2, r2, r5, lsr #2
	writeRegister(XYZ_DATA_CFG, cfg);
   d7446:	4620      	mov	r0, r4
   d7448:	b2d2      	uxtb	r2, r2
}
   d744a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(XYZ_DATA_CFG, cfg);
   d744e:	210e      	movs	r1, #14
   d7450:	f7ff bfc0 	b.w	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7454 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
{
   d7454:	b538      	push	{r3, r4, r5, lr}
   d7456:	460d      	mov	r5, r1
	byte ctrl = readRegister(CTRL_REG1);
   d7458:	212a      	movs	r1, #42	; 0x2a
{
   d745a:	4604      	mov	r4, r0
	byte ctrl = readRegister(CTRL_REG1);
   d745c:	f7ff ffc5 	bl	d73ea <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	ctrl &= 0xCF; // Mask out data rate bits
   d7460:	f020 0230 	bic.w	r2, r0, #48	; 0x30
	ctrl |= (odr << 3);
   d7464:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
	writeRegister(CTRL_REG1, ctrl);
   d7468:	4620      	mov	r0, r4
   d746a:	b2d2      	uxtb	r2, r2
}
   d746c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(CTRL_REG1, ctrl);
   d7470:	212a      	movs	r1, #42	; 0x2a
   d7472:	f7ff bfaf 	b.w	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7476 <_ZN8MMA8452Q12clearTapIntsEv>:
	readRegister(PULSE_SRC);			// Reading this register clears the interrupt.
   d7476:	2122      	movs	r1, #34	; 0x22
   d7478:	f7ff bfb7 	b.w	d73ea <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>

000d747c <_ZN8MMA8452Q7setupPLEv>:
{
   d747c:	b510      	push	{r4, lr}
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d747e:	2111      	movs	r1, #17
{
   d7480:	4604      	mov	r4, r0
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d7482:	f7ff ffb2 	bl	d73ea <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
   d7486:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   d748a:	b2c2      	uxtb	r2, r0
   d748c:	2111      	movs	r1, #17
   d748e:	4620      	mov	r0, r4
   d7490:	f7ff ffa0 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d7494:	4620      	mov	r0, r4
   d7496:	2250      	movs	r2, #80	; 0x50
}
   d7498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d749c:	2112      	movs	r1, #18
   d749e:	f7ff bf99 	b.w	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d74a2 <_ZN8MMA8452Q7standbyEv>:
{
   d74a2:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d74a4:	212a      	movs	r1, #42	; 0x2a
{
   d74a6:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d74a8:	f7ff ff9f 	bl	d73ea <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d74ac:	212a      	movs	r1, #42	; 0x2a
   d74ae:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
   d74b2:	4620      	mov	r0, r4
}
   d74b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d74b8:	f7ff bf8c 	b.w	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d74bc <_ZN8MMA8452Q6activeEv>:
{
   d74bc:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d74be:	212a      	movs	r1, #42	; 0x2a
{
   d74c0:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d74c2:	f7ff ff92 	bl	d73ea <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d74c6:	f040 0001 	orr.w	r0, r0, #1
   d74ca:	b2c2      	uxtb	r2, r0
   d74cc:	212a      	movs	r1, #42	; 0x2a
   d74ce:	4620      	mov	r0, r4
}
   d74d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d74d4:	f7ff bf7e 	b.w	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d74d8 <_ZN8MMA8452Q12setupTapIntsEh>:
{
   d74d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d74da:	4604      	mov	r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d74dc:	2900      	cmp	r1, #0
   d74de:	d04f      	beq.n	d7580 <_ZN8MMA8452Q12setupTapIntsEh+0xa8>
   d74e0:	290a      	cmp	r1, #10
   d74e2:	bfa8      	it	ge
   d74e4:	210a      	movge	r1, #10
   d74e6:	4608      	mov	r0, r1
	sensitivity *= 12.7;																	// Convert to range from 1-127;
   d74e8:	f004 fa46 	bl	db978 <__aeabi_i2d>
   d74ec:	a326      	add	r3, pc, #152	; (adr r3, d7588 <_ZN8MMA8452Q12setupTapIntsEh+0xb0>)
   d74ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d74f2:	f004 faab 	bl	dba4c <__aeabi_dmul>
   d74f6:	f004 fce3 	bl	dbec0 <__aeabi_d2uiz>
	interruptThreshold = map(sensitivity , 0x01, 0x7F, 0x10, 0x01);			// Map and compress the threshold
   d74fa:	2101      	movs	r1, #1
   d74fc:	2310      	movs	r3, #16
   d74fe:	9100      	str	r1, [sp, #0]
   d7500:	227f      	movs	r2, #127	; 0x7f
   d7502:	b2c0      	uxtb	r0, r0
   d7504:	f000 ff82 	bl	d840c <_Z3mapiiiii>
   d7508:	b2c5      	uxtb	r5, r0
  standby();  // Must be in standby to change registers
   d750a:	4620      	mov	r0, r4
   d750c:	f7ff ffc9 	bl	d74a2 <_ZN8MMA8452Q7standbyEv>
  writeRegister(PULSE_CFG, 0x55);  // 1. single taps only on all axes
   d7510:	4620      	mov	r0, r4
   d7512:	2255      	movs	r2, #85	; 0x55
   d7514:	2121      	movs	r1, #33	; 0x21
   d7516:	f7ff ff5d 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_THSX, interruptThreshold);  // 2. x thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d751a:	462a      	mov	r2, r5
   d751c:	4620      	mov	r0, r4
   d751e:	2123      	movs	r1, #35	; 0x23
   d7520:	f7ff ff58 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_THSY, interruptThreshold);  // 2. y thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d7524:	462a      	mov	r2, r5
   d7526:	4620      	mov	r0, r4
   d7528:	2124      	movs	r1, #36	; 0x24
   d752a:	f7ff ff53 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_THSZ, interruptThreshold);  // 2. z thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d752e:	462a      	mov	r2, r5
   d7530:	4620      	mov	r0, r4
   d7532:	2125      	movs	r1, #37	; 0x25
   d7534:	f7ff ff4e 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_TMLT, 0xFF);  // 3. Max time limit at 100Hz odr, this is very dependent on data rate, see the app note
   d7538:	4620      	mov	r0, r4
   d753a:	22ff      	movs	r2, #255	; 0xff
   d753c:	2126      	movs	r1, #38	; 0x26
   d753e:	f7ff ff49 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_LTCY, 0x64);  // 4. 1000ms (at 100Hz odr) between taps min, this also depends on the data rate
   d7542:	4620      	mov	r0, r4
   d7544:	2264      	movs	r2, #100	; 0x64
   d7546:	2127      	movs	r1, #39	; 0x27
   d7548:	f7ff ff44 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_WIND, 0xFF);  // 5. 318ms (max value) between taps max
   d754c:	4620      	mov	r0, r4
   d754e:	22ff      	movs	r2, #255	; 0xff
   d7550:	2128      	movs	r1, #40	; 0x28
   d7552:	f7ff ff3f 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(CTRL_REG3, 0x02);  // Active high, push-pull interrupts
   d7556:	4620      	mov	r0, r4
   d7558:	2202      	movs	r2, #2
   d755a:	212c      	movs	r1, #44	; 0x2c
   d755c:	f7ff ff3a 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(CTRL_REG4, 0x08);  // Tap ints enabled
   d7560:	4620      	mov	r0, r4
   d7562:	2208      	movs	r2, #8
   d7564:	212d      	movs	r1, #45	; 0x2d
   d7566:	f7ff ff35 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(CTRL_REG5, 0x08);  // Taps on INT2
   d756a:	4620      	mov	r0, r4
   d756c:	2208      	movs	r2, #8
   d756e:	212e      	movs	r1, #46	; 0x2e
   d7570:	f7ff ff30 	bl	d73d4 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  active();  // Set to active to start reading
   d7574:	4620      	mov	r0, r4
}
   d7576:	b003      	add	sp, #12
   d7578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  active();  // Set to active to start reading
   d757c:	f7ff bf9e 	b.w	d74bc <_ZN8MMA8452Q6activeEv>
   d7580:	2001      	movs	r0, #1
   d7582:	e7b1      	b.n	d74e8 <_ZN8MMA8452Q12setupTapIntsEh+0x10>
   d7584:	f3af 8000 	nop.w
   d7588:	66666666 	.word	0x66666666
   d758c:	40296666 	.word	0x40296666

000d7590 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>:
{
   d7590:	b538      	push	{r3, r4, r5, lr}
	scale = fsr; // Haul fsr into our class variable, scale
   d7592:	7541      	strb	r1, [r0, #21]
{
   d7594:	4615      	mov	r5, r2
   d7596:	4604      	mov	r4, r0
	Wire.begin(); // Initialize I2C
   d7598:	f004 f83e 	bl	db618 <_Z19__fetch_global_Wirev>
   d759c:	f001 fd08 	bl	d8fb0 <_ZN7TwoWire5beginEv>
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
   d75a0:	210d      	movs	r1, #13
   d75a2:	4620      	mov	r0, r4
   d75a4:	f7ff ff21 	bl	d73ea <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
   d75a8:	282a      	cmp	r0, #42	; 0x2a
   d75aa:	d112      	bne.n	d75d2 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x42>
	standby();  // Must be in standby to change registers
   d75ac:	4620      	mov	r0, r4
   d75ae:	f7ff ff78 	bl	d74a2 <_ZN8MMA8452Q7standbyEv>
	setScale(scale);  // Set up accelerometer scale
   d75b2:	7d61      	ldrb	r1, [r4, #21]
   d75b4:	4620      	mov	r0, r4
   d75b6:	f7ff ff3c 	bl	d7432 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>
	setODR(odr);  // Set up output data rate
   d75ba:	4629      	mov	r1, r5
   d75bc:	4620      	mov	r0, r4
   d75be:	f7ff ff49 	bl	d7454 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>
	setupPL();  // Set up portrait/landscape detection
   d75c2:	4620      	mov	r0, r4
   d75c4:	f7ff ff5a 	bl	d747c <_ZN8MMA8452Q7setupPLEv>
	active();  // Set to active to start reading
   d75c8:	4620      	mov	r0, r4
   d75ca:	f7ff ff77 	bl	d74bc <_ZN8MMA8452Q6activeEv>
   d75ce:	2001      	movs	r0, #1
}
   d75d0:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   d75d2:	2000      	movs	r0, #0
   d75d4:	e7fc      	b.n	d75d0 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x40>

000d75d6 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d75d6:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d75d8:	4603      	mov	r3, r0
	switch (__op)
   d75da:	d102      	bne.n	d75e2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d75dc:	6001      	str	r1, [r0, #0]
      }
   d75de:	2000      	movs	r0, #0
   d75e0:	4770      	bx	lr
	  switch (__op)
   d75e2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d75e4:	bf04      	itt	eq
   d75e6:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d75ea:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d75ee:	e7f6      	b.n	d75de <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d75f0 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d75f0:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d75f2:	2301      	movs	r3, #1
   d75f4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d75f6:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d75f8:	4604      	mov	r4, r0
        if (th->func) {
   d75fa:	b143      	cbz	r3, d760e <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d75fc:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d75fe:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d7600:	2301      	movs	r3, #1
   d7602:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d7604:	2000      	movs	r0, #0
    }
   d7606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d760a:	f000 bb53 	b.w	d7cb4 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d760e:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d7610:	2800      	cmp	r0, #0
   d7612:	d0f5      	beq.n	d7600 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d7614:	6883      	ldr	r3, [r0, #8]
   d7616:	b90b      	cbnz	r3, d761c <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d7618:	f004 f859 	bl	db6ce <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d761c:	68c3      	ldr	r3, [r0, #12]
   d761e:	e7ee      	b.n	d75fe <_ZN6Thread3runEPv+0xe>

000d7620 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7620:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7622:	6842      	ldr	r2, [r0, #4]
   d7624:	4603      	mov	r3, r0
   d7626:	1054      	asrs	r4, r2, #1
   d7628:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d762c:	07d2      	lsls	r2, r2, #31
   d762e:	bf48      	it	mi
   d7630:	590a      	ldrmi	r2, [r1, r4]
   d7632:	681b      	ldr	r3, [r3, #0]
      }
   d7634:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7638:	bf48      	it	mi
   d763a:	58d3      	ldrmi	r3, [r2, r3]
   d763c:	4718      	bx	r3
	...

000d7640 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d7640:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d7642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d7644:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d7648:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d764a:	3008      	adds	r0, #8
   d764c:	f000 faf2 	bl	d7c34 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d7650:	2004      	movs	r0, #4
   d7652:	f7fc fd20 	bl	d4096 <_Znwj>
   d7656:	4605      	mov	r5, r0
   d7658:	b398      	cbz	r0, d76c2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d765a:	491b      	ldr	r1, [pc, #108]	; (d76c8 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d765c:	2014      	movs	r0, #20
   d765e:	f004 f832 	bl	db6c6 <_ZnwjRKSt9nothrow_t>
   d7662:	b130      	cbz	r0, d7672 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7664:	2300      	movs	r3, #0
            exited(false) {
   d7666:	e9c0 3300 	strd	r3, r3, [r0]
   d766a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d766e:	7403      	strb	r3, [r0, #16]
   d7670:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7672:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7674:	b1a0      	cbz	r0, d76a0 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7676:	4b15      	ldr	r3, [pc, #84]	; (d76cc <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7678:	4915      	ldr	r1, [pc, #84]	; (d76d0 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d767a:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d767e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7682:	e9cd 0300 	strd	r0, r3, [sp]
   d7686:	2202      	movs	r2, #2
   d7688:	4b12      	ldr	r3, [pc, #72]	; (d76d4 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d768a:	3004      	adds	r0, #4
   d768c:	f000 fa9a 	bl	d7bc4 <os_thread_create>
   d7690:	b930      	cbnz	r0, d76a0 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7692:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d7694:	7c1b      	ldrb	r3, [r3, #16]
   d7696:	b9a3      	cbnz	r3, d76c2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d7698:	2001      	movs	r0, #1
   d769a:	f000 fb33 	bl	d7d04 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d769e:	e7f8      	b.n	d7692 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76a0:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d76a2:	2300      	movs	r3, #0
   d76a4:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d76a6:	b164      	cbz	r4, d76c2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d76a8:	6827      	ldr	r7, [r4, #0]
   d76aa:	b137      	cbz	r7, d76ba <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d76ac:	4638      	mov	r0, r7
   d76ae:	f7fc fe7f 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d76b2:	2110      	movs	r1, #16
   d76b4:	4638      	mov	r0, r7
   d76b6:	f004 f804 	bl	db6c2 <_ZdlPvj>
   d76ba:	2114      	movs	r1, #20
   d76bc:	4620      	mov	r0, r4
   d76be:	f004 f800 	bl	db6c2 <_ZdlPvj>
   d76c2:	6075      	str	r5, [r6, #4]
}
   d76c4:	b003      	add	sp, #12
   d76c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76c8:	000dcff8 	.word	0x000dcff8
   d76cc:	000d78df 	.word	0x000d78df
   d76d0:	000dcc08 	.word	0x000dcc08
   d76d4:	000d75f1 	.word	0x000d75f1

000d76d8 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d76d8:	f247 5130 	movw	r1, #30000	; 0x7530
   d76dc:	4a08      	ldr	r2, [pc, #32]	; (d7700 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d76de:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d76e0:	4908      	ldr	r1, [pc, #32]	; (d7704 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d76e2:	6002      	str	r2, [r0, #0]
   d76e4:	2200      	movs	r2, #0
   d76e6:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d76ea:	4907      	ldr	r1, [pc, #28]	; (d7708 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d76ec:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d76ee:	4907      	ldr	r1, [pc, #28]	; (d770c <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d76f0:	6042      	str	r2, [r0, #4]
   d76f2:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d76f6:	6181      	str	r1, [r0, #24]
   d76f8:	8502      	strh	r2, [r0, #40]	; 0x28
   d76fa:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d76fe:	4770      	bx	lr
   d7700:	000dcccc 	.word	0x000dcccc
   d7704:	000d7a49 	.word	0x000d7a49
   d7708:	000d7621 	.word	0x000d7621
   d770c:	000d75d7 	.word	0x000d75d7

000d7710 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d7710:	b510      	push	{r4, lr}
   d7712:	4b04      	ldr	r3, [pc, #16]	; (d7724 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7714:	4604      	mov	r4, r0
   d7716:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d771a:	f7fc fe49 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
}
   d771e:	4620      	mov	r0, r4
   d7720:	bd10      	pop	{r4, pc}
   d7722:	bf00      	nop
   d7724:	000dcccc 	.word	0x000dcccc

000d7728 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7728:	b510      	push	{r4, lr}
   d772a:	4b03      	ldr	r3, [pc, #12]	; (d7738 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d772c:	6003      	str	r3, [r0, #0]
   d772e:	4604      	mov	r4, r0
   d7730:	f7ff ffee 	bl	d7710 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7734:	4620      	mov	r0, r4
   d7736:	bd10      	pop	{r4, pc}
   d7738:	000dccf4 	.word	0x000dccf4

000d773c <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d773c:	b510      	push	{r4, lr}
   d773e:	4604      	mov	r4, r0
}
   d7740:	f7ff fff2 	bl	d7728 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7744:	4620      	mov	r0, r4
   d7746:	2138      	movs	r1, #56	; 0x38
   d7748:	f003 ffbb 	bl	db6c2 <_ZdlPvj>
   d774c:	4620      	mov	r0, r4
   d774e:	bd10      	pop	{r4, pc}

000d7750 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d7750:	6880      	ldr	r0, [r0, #8]
   d7752:	f000 ba77 	b.w	d7c44 <os_mutex_lock>

000d7756 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7756:	6880      	ldr	r0, [r0, #8]
   d7758:	f000 ba7c 	b.w	d7c54 <os_mutex_unlock>

000d775c <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d775c:	b510      	push	{r4, lr}
   d775e:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d7760:	6800      	ldr	r0, [r0, #0]
   d7762:	f7ff fff8 	bl	d7756 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7766:	4620      	mov	r0, r4
   d7768:	bd10      	pop	{r4, pc}

000d776a <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d776a:	b513      	push	{r0, r1, r4, lr}
   d776c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d776e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7770:	f7ff ffee 	bl	d7750 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7774:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7776:	88dc      	ldrh	r4, [r3, #6]
   d7778:	b2a4      	uxth	r4, r4
   d777a:	b10c      	cbz	r4, d7780 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d777c:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d7780:	a801      	add	r0, sp, #4
   d7782:	f7ff ffeb 	bl	d775c <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d7786:	4620      	mov	r0, r4
   d7788:	b002      	add	sp, #8
   d778a:	bd10      	pop	{r4, pc}

000d778c <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d778c:	b513      	push	{r0, r1, r4, lr}
   d778e:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7790:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7792:	f7ff ffdd 	bl	d7750 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d7796:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d779a:	b943      	cbnz	r3, d77ae <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d779c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d779e:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d77a0:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d77a2:	a801      	add	r0, sp, #4
   d77a4:	f7ff ffda 	bl	d775c <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d77a8:	4620      	mov	r0, r4
   d77aa:	b002      	add	sp, #8
   d77ac:	bd10      	pop	{r4, pc}
	bool result = false;
   d77ae:	2400      	movs	r4, #0
   d77b0:	e7f7      	b.n	d77a2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d77b2 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d77b2:	b513      	push	{r0, r1, r4, lr}
   d77b4:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d77b6:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d77b8:	f7ff ffca 	bl	d7750 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d77bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d77be:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d77c0:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d77c2:	f7ff ffcb 	bl	d775c <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d77c6:	4620      	mov	r0, r4
   d77c8:	b002      	add	sp, #8
   d77ca:	bd10      	pop	{r4, pc}

000d77cc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d77cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d77d0:	4699      	mov	r9, r3
   d77d2:	b086      	sub	sp, #24
	if (!haveSetup) {
   d77d4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d77d8:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d77dc:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d77e0:	4604      	mov	r4, r0
   d77e2:	460f      	mov	r7, r1
   d77e4:	4616      	mov	r6, r2
	if (!haveSetup) {
   d77e6:	b913      	cbnz	r3, d77ee <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d77e8:	6803      	ldr	r3, [r0, #0]
   d77ea:	689b      	ldr	r3, [r3, #8]
   d77ec:	4798      	blx	r3
		data = "";
   d77ee:	4b31      	ldr	r3, [pc, #196]	; (d78b4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d77f0:	4638      	mov	r0, r7
		data = "";
   d77f2:	2e00      	cmp	r6, #0
   d77f4:	bf08      	it	eq
   d77f6:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d77f8:	f004 fceb 	bl	dc1d2 <strlen>
   d77fc:	4605      	mov	r5, r0
   d77fe:	4630      	mov	r0, r6
   d7800:	f004 fce7 	bl	dc1d2 <strlen>
   d7804:	4428      	add	r0, r5
   d7806:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d780a:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d780c:	bf1c      	itt	ne
   d780e:	f025 0503 	bicne.w	r5, r5, #3
   d7812:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7814:	4633      	mov	r3, r6
   d7816:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d781a:	e9cd 9a00 	strd	r9, sl, [sp]
   d781e:	4926      	ldr	r1, [pc, #152]	; (d78b8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d7820:	4826      	ldr	r0, [pc, #152]	; (d78bc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d7822:	463a      	mov	r2, r7
   d7824:	f7fc fe8f 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7828:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d782a:	3b08      	subs	r3, #8
   d782c:	42ab      	cmp	r3, r5
   d782e:	d212      	bcs.n	d7856 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d7830:	2400      	movs	r4, #0
}
   d7832:	4620      	mov	r0, r4
   d7834:	b006      	add	sp, #24
   d7836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d783a:	88cb      	ldrh	r3, [r1, #6]
   d783c:	2b01      	cmp	r3, #1
   d783e:	d036      	beq.n	d78ae <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d7840:	a805      	add	r0, sp, #20
   d7842:	f7ff ff8b 	bl	d775c <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d7846:	6823      	ldr	r3, [r4, #0]
   d7848:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d784c:	699b      	ldr	r3, [r3, #24]
   d784e:	4620      	mov	r0, r4
   d7850:	4798      	blx	r3
   d7852:	2800      	cmp	r0, #0
   d7854:	d0ec      	beq.n	d7830 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d7856:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7858:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d785a:	f7ff ff79 	bl	d7750 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d785e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7860:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d7862:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7864:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d7866:	1ad2      	subs	r2, r2, r3
   d7868:	42aa      	cmp	r2, r5
   d786a:	d3e6      	bcc.n	d783a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d786c:	ea48 080a 	orr.w	r8, r8, sl
   d7870:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d7874:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d7878:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d787a:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d787e:	4639      	mov	r1, r7
   d7880:	4640      	mov	r0, r8
   d7882:	f004 fc80 	bl	dc186 <strcpy>
				cp += strlen(cp) + 1;
   d7886:	4640      	mov	r0, r8
   d7888:	f004 fca3 	bl	dc1d2 <strlen>
   d788c:	3001      	adds	r0, #1
				strcpy(cp, data);
   d788e:	4631      	mov	r1, r6
   d7890:	4440      	add	r0, r8
   d7892:	f004 fc78 	bl	dc186 <strcpy>
				nextFree += size;
   d7896:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7898:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d789a:	441d      	add	r5, r3
   d789c:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d789e:	88d3      	ldrh	r3, [r2, #6]
   d78a0:	3301      	adds	r3, #1
   d78a2:	80d3      	strh	r3, [r2, #6]
				return true;
   d78a4:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d78a6:	a805      	add	r0, sp, #20
   d78a8:	f7ff ff58 	bl	d775c <_ZN11StMutexLockD1Ev>
   d78ac:	e7c1      	b.n	d7832 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d78ae:	2400      	movs	r4, #0
   d78b0:	e7f9      	b.n	d78a6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d78b2:	bf00      	nop
   d78b4:	000dce75 	.word	0x000dce75
   d78b8:	000dcc1a 	.word	0x000dcc1a
   d78bc:	2003e504 	.word	0x2003e504

000d78c0 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d78c0:	b508      	push	{r3, lr}
   d78c2:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d78c4:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d78c8:	69a3      	ldr	r3, [r4, #24]
   d78ca:	b90b      	cbnz	r3, d78d0 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d78cc:	f003 feff 	bl	db6ce <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d78d0:	69e3      	ldr	r3, [r4, #28]
   d78d2:	4621      	mov	r1, r4
   d78d4:	4628      	mov	r0, r5
   d78d6:	4798      	blx	r3
		os_thread_yield();
   d78d8:	f000 f97c 	bl	d7bd4 <os_thread_yield>
	while(true) {
   d78dc:	e7f4      	b.n	d78c8 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d78de <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d78de:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d78e0:	f7ff ffee 	bl	d78c0 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d78e4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d78e4:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d78e6:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d78ea:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d78ec:	4628      	mov	r0, r5
   d78ee:	f004 fc70 	bl	dc1d2 <strlen>
   d78f2:	3001      	adds	r0, #1
   d78f4:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d78f6:	4628      	mov	r0, r5
   d78f8:	f004 fc6b 	bl	dc1d2 <strlen>
	size_t offset = start - retainedBuffer;
   d78fc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d78fe:	3001      	adds	r0, #1
   d7900:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d7902:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7904:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7908:	bf1c      	itt	ne
   d790a:	f1c3 0304 	rsbne	r3, r3, #4
   d790e:	18c0      	addne	r0, r0, r3
}
   d7910:	bd68      	pop	{r3, r5, r6, pc}

000d7912 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d7912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7914:	4604      	mov	r4, r0
   d7916:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7918:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d791a:	f7ff ff19 	bl	d7750 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d791e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7920:	88fb      	ldrh	r3, [r7, #6]
   d7922:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d7926:	b1e6      	cbz	r6, d7962 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d7928:	2b01      	cmp	r3, #1
   d792a:	d922      	bls.n	d7972 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d792c:	4629      	mov	r1, r5
   d792e:	4620      	mov	r0, r4
   d7930:	f7ff ffd8 	bl	d78e4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d7934:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d7936:	4629      	mov	r1, r5
   d7938:	4620      	mov	r0, r4
   d793a:	f7ff ffd3 	bl	d78e4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d793e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d7940:	443a      	add	r2, r7
	if (after > 0) {
   d7942:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d7944:	4601      	mov	r1, r0
	size_t len = next - start;
   d7946:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d794a:	d002      	beq.n	d7952 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d794c:	4628      	mov	r0, r5
   d794e:	f004 fbb3 	bl	dc0b8 <memmove>
	nextFree -= len;
   d7952:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7954:	1b9b      	subs	r3, r3, r6
   d7956:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d7958:	88fb      	ldrh	r3, [r7, #6]
   d795a:	3b01      	subs	r3, #1
   d795c:	80fb      	strh	r3, [r7, #6]
	return true;
   d795e:	2601      	movs	r6, #1
   d7960:	e001      	b.n	d7966 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d7962:	2b00      	cmp	r3, #0
   d7964:	d1e7      	bne.n	d7936 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d7966:	a801      	add	r0, sp, #4
   d7968:	f7ff fef8 	bl	d775c <_ZN11StMutexLockD1Ev>
}
   d796c:	4630      	mov	r0, r6
   d796e:	b003      	add	sp, #12
   d7970:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d7972:	2600      	movs	r6, #0
   d7974:	e7f7      	b.n	d7966 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d7978 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d797c:	460d      	mov	r5, r1
   d797e:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7980:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7982:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7984:	f7ff fea8 	bl	d76d8 <_ZN21PublishQueueAsyncBaseC1Ev>
   d7988:	4b15      	ldr	r3, [pc, #84]	; (d79e0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d798a:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d798e:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7990:	4b14      	ldr	r3, [pc, #80]	; (d79e4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7992:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7994:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7996:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7998:	4698      	mov	r8, r3
   d799a:	d117      	bne.n	d79cc <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d799c:	88ab      	ldrh	r3, [r5, #4]
   d799e:	b29b      	uxth	r3, r3
   d79a0:	42b3      	cmp	r3, r6
   d79a2:	d113      	bne.n	d79cc <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d79a4:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d79a8:	6367      	str	r7, [r4, #52]	; 0x34
   d79aa:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d79ae:	88eb      	ldrh	r3, [r5, #6]
   d79b0:	fa1f f289 	uxth.w	r2, r9
   d79b4:	b29b      	uxth	r3, r3
   d79b6:	429a      	cmp	r2, r3
   d79b8:	d20e      	bcs.n	d79d8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d79ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d79bc:	4620      	mov	r0, r4
   d79be:	f7ff ff91 	bl	d78e4 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d79c2:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d79c4:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d79c6:	f109 0901 	add.w	r9, r9, #1
   d79ca:	d9f0      	bls.n	d79ae <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d79cc:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d79ce:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d79d2:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d79d4:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d79d6:	80eb      	strh	r3, [r5, #6]
}
   d79d8:	4620      	mov	r0, r4
   d79da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d79de:	bf00      	nop
   d79e0:	000dccf4 	.word	0x000dccf4
   d79e4:	d19cab61 	.word	0xd19cab61

000d79e8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d79e8:	b510      	push	{r4, lr}
   d79ea:	e9d1 2300 	ldrd	r2, r3, [r1]
   d79ee:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d79f0:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d79f2:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d79f4:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d79f6:	b90a      	cbnz	r2, d79fc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d79f8:	07d9      	lsls	r1, r3, #31
   d79fa:	d505      	bpl.n	d7a08 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d79fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7a00:	4b0f      	ldr	r3, [pc, #60]	; (d7a40 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7a02:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7a04:	4b0f      	ldr	r3, [pc, #60]	; (d7a44 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7a06:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a08:	ab02      	add	r3, sp, #8
   d7a0a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7a0e:	466a      	mov	r2, sp
   d7a10:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a14:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7a18:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7a1c:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a20:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a22:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a26:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a28:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a2a:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7a2c:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7a2e:	4618      	mov	r0, r3
   d7a30:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a32:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7a34:	9105      	str	r1, [sp, #20]
   d7a36:	f7fc fcbb 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
	}
   d7a3a:	4620      	mov	r0, r4
   d7a3c:	b006      	add	sp, #24
   d7a3e:	bd10      	pop	{r4, pc}
   d7a40:	000d7621 	.word	0x000d7621
   d7a44:	000d75d7 	.word	0x000d75d7

000d7a48 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7a48:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7a4a:	4b05      	ldr	r3, [pc, #20]	; (d7a60 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7a4c:	9300      	str	r3, [sp, #0]
   d7a4e:	4669      	mov	r1, sp
   d7a50:	2300      	movs	r3, #0
   d7a52:	3010      	adds	r0, #16
   d7a54:	9301      	str	r3, [sp, #4]
   d7a56:	f7ff ffc7 	bl	d79e8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7a5a:	b003      	add	sp, #12
   d7a5c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7a60:	000d7a91 	.word	0x000d7a91

000d7a64 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7a64:	b513      	push	{r0, r1, r4, lr}
   d7a66:	4604      	mov	r4, r0
   d7a68:	f000 f95c 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7a6e:	1ac0      	subs	r0, r0, r3
   d7a70:	68e3      	ldr	r3, [r4, #12]
   d7a72:	4298      	cmp	r0, r3
   d7a74:	d308      	bcc.n	d7a88 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7a76:	4b05      	ldr	r3, [pc, #20]	; (d7a8c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7a78:	9300      	str	r3, [sp, #0]
   d7a7a:	4669      	mov	r1, sp
   d7a7c:	2300      	movs	r3, #0
   d7a7e:	f104 0010 	add.w	r0, r4, #16
   d7a82:	9301      	str	r3, [sp, #4]
   d7a84:	f7ff ffb0 	bl	d79e8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7a88:	b002      	add	sp, #8
   d7a8a:	bd10      	pop	{r4, pc}
   d7a8c:	000d7a91 	.word	0x000d7a91

000d7a90 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d7a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7a94:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7a98:	b086      	sub	sp, #24
   d7a9a:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7a9c:	2b00      	cmp	r3, #0
   d7a9e:	d164      	bne.n	d7b6a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7aa0:	f000 fb9c 	bl	d81dc <spark_cloud_flag_connected>
   d7aa4:	2800      	cmp	r0, #0
   d7aa6:	d060      	beq.n	d7b6a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7aa8:	f000 f93c 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
   d7aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7aae:	1ac0      	subs	r0, r0, r3
   d7ab0:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7ab4:	4298      	cmp	r0, r3
   d7ab6:	d958      	bls.n	d7b6a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7ab8:	6823      	ldr	r3, [r4, #0]
   d7aba:	4620      	mov	r0, r4
   d7abc:	695b      	ldr	r3, [r3, #20]
   d7abe:	4798      	blx	r3
		if (data) {
   d7ac0:	4605      	mov	r5, r0
   d7ac2:	2800      	cmp	r0, #0
   d7ac4:	d051      	beq.n	d7b6a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7ac6:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7aca:	2301      	movs	r3, #1
   d7acc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d7ad0:	4638      	mov	r0, r7
   d7ad2:	f004 fb7e 	bl	dc1d2 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7ad6:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7ada:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d7ade:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7ae0:	682b      	ldr	r3, [r5, #0]
   d7ae2:	492b      	ldr	r1, [pc, #172]	; (d7b90 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7ae4:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7ae6:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7ae8:	4633      	mov	r3, r6
   d7aea:	482a      	ldr	r0, [pc, #168]	; (d7b94 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7aec:	463a      	mov	r2, r7
   d7aee:	f7fc fd2a 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7af2:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7af4:	f88d 8000 	strb.w	r8, [sp]
   d7af8:	4632      	mov	r2, r6
   d7afa:	4639      	mov	r1, r7
   d7afc:	a802      	add	r0, sp, #8
   d7afe:	f000 ff9b 	bl	d8a38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7b02:	9d02      	ldr	r5, [sp, #8]
   d7b04:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7b06:	b91b      	cbnz	r3, d7b10 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7b08:	2001      	movs	r0, #1
   d7b0a:	f000 fc8b 	bl	d8424 <delay>
			while(!request.isDone()) {
   d7b0e:	e7f8      	b.n	d7b02 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7b10:	2000      	movs	r0, #0
   d7b12:	f000 faf1 	bl	d80f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7b16:	b120      	cbz	r0, d7b22 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7b18:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7b1a:	b913      	cbnz	r3, d7b22 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d7b1c:	f000 fb4e 	bl	d81bc <spark_process>
    }
   d7b20:	e7fa      	b.n	d7b18 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7b22:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7b24:	2b01      	cmp	r3, #1
   d7b26:	d123      	bne.n	d7b70 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d7b28:	491b      	ldr	r1, [pc, #108]	; (d7b98 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7b2a:	481a      	ldr	r0, [pc, #104]	; (d7b94 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b2c:	f7fc fd0b 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d7b30:	6823      	ldr	r3, [r4, #0]
   d7b32:	2100      	movs	r1, #0
   d7b34:	699b      	ldr	r3, [r3, #24]
   d7b36:	4620      	mov	r0, r4
   d7b38:	4798      	blx	r3
			isSending = false;
   d7b3a:	2300      	movs	r3, #0
   d7b3c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d7b40:	f000 f8f0 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7b44:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7b46:	9c03      	ldr	r4, [sp, #12]
   d7b48:	b17c      	cbz	r4, d7b6a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d7b4a:	6863      	ldr	r3, [r4, #4]
   d7b4c:	3b01      	subs	r3, #1
   d7b4e:	6063      	str	r3, [r4, #4]
   d7b50:	b95b      	cbnz	r3, d7b6a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d7b52:	6823      	ldr	r3, [r4, #0]
   d7b54:	4620      	mov	r0, r4
   d7b56:	689b      	ldr	r3, [r3, #8]
   d7b58:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7b5a:	68a3      	ldr	r3, [r4, #8]
   d7b5c:	3b01      	subs	r3, #1
   d7b5e:	60a3      	str	r3, [r4, #8]
   d7b60:	b91b      	cbnz	r3, d7b6a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d7b62:	6823      	ldr	r3, [r4, #0]
   d7b64:	4620      	mov	r0, r4
   d7b66:	68db      	ldr	r3, [r3, #12]
   d7b68:	4798      	blx	r3
}
   d7b6a:	b006      	add	sp, #24
   d7b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d7b70:	68e2      	ldr	r2, [r4, #12]
   d7b72:	490a      	ldr	r1, [pc, #40]	; (d7b9c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7b74:	4807      	ldr	r0, [pc, #28]	; (d7b94 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b76:	f7fc fce6 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7b7a:	4b09      	ldr	r3, [pc, #36]	; (d7ba0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7b7c:	9304      	str	r3, [sp, #16]
   d7b7e:	a904      	add	r1, sp, #16
   d7b80:	2300      	movs	r3, #0
   d7b82:	f104 0010 	add.w	r0, r4, #16
   d7b86:	9305      	str	r3, [sp, #20]
   d7b88:	f7ff ff2e 	bl	d79e8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7b8c:	e7d5      	b.n	d7b3a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d7b8e:	bf00      	nop
   d7b90:	000dcc5b 	.word	0x000dcc5b
   d7b94:	2003e504 	.word	0x2003e504
   d7b98:	000dcc7c 	.word	0x000dcc7c
   d7b9c:	000dcc93 	.word	0x000dcc93
   d7ba0:	000d7a65 	.word	0x000d7a65

000d7ba4 <_GLOBAL__sub_I_pubqLogger>:
   d7ba4:	4b01      	ldr	r3, [pc, #4]	; (d7bac <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7ba6:	4a02      	ldr	r2, [pc, #8]	; (d7bb0 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7ba8:	601a      	str	r2, [r3, #0]
}
   d7baa:	4770      	bx	lr
   d7bac:	2003e504 	.word	0x2003e504
   d7bb0:	000dccba 	.word	0x000dccba

000d7bb4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7bb4:	b508      	push	{r3, lr}
   d7bb6:	4b02      	ldr	r3, [pc, #8]	; (d7bc0 <cellular_signal+0xc>)
   d7bb8:	681b      	ldr	r3, [r3, #0]
   d7bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7bbc:	9301      	str	r3, [sp, #4]
   d7bbe:	bd08      	pop	{r3, pc}
   d7bc0:	00030274 	.word	0x00030274

000d7bc4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7bc4:	b508      	push	{r3, lr}
   d7bc6:	4b02      	ldr	r3, [pc, #8]	; (d7bd0 <os_thread_create+0xc>)
   d7bc8:	681b      	ldr	r3, [r3, #0]
   d7bca:	685b      	ldr	r3, [r3, #4]
   d7bcc:	9301      	str	r3, [sp, #4]
   d7bce:	bd08      	pop	{r3, pc}
   d7bd0:	00030248 	.word	0x00030248

000d7bd4 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7bd4:	b508      	push	{r3, lr}
   d7bd6:	4b02      	ldr	r3, [pc, #8]	; (d7be0 <os_thread_yield+0xc>)
   d7bd8:	681b      	ldr	r3, [r3, #0]
   d7bda:	68db      	ldr	r3, [r3, #12]
   d7bdc:	9301      	str	r3, [sp, #4]
   d7bde:	bd08      	pop	{r3, pc}
   d7be0:	00030248 	.word	0x00030248

000d7be4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7be4:	b508      	push	{r3, lr}
   d7be6:	4b02      	ldr	r3, [pc, #8]	; (d7bf0 <os_thread_scheduling+0xc>)
   d7be8:	681b      	ldr	r3, [r3, #0]
   d7bea:	69db      	ldr	r3, [r3, #28]
   d7bec:	9301      	str	r3, [sp, #4]
   d7bee:	bd08      	pop	{r3, pc}
   d7bf0:	00030248 	.word	0x00030248

000d7bf4 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7bf4:	b508      	push	{r3, lr}
   d7bf6:	4b02      	ldr	r3, [pc, #8]	; (d7c00 <os_timer_create+0xc>)
   d7bf8:	681b      	ldr	r3, [r3, #0]
   d7bfa:	6a1b      	ldr	r3, [r3, #32]
   d7bfc:	9301      	str	r3, [sp, #4]
   d7bfe:	bd08      	pop	{r3, pc}
   d7c00:	00030248 	.word	0x00030248

000d7c04 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7c04:	b508      	push	{r3, lr}
   d7c06:	4b02      	ldr	r3, [pc, #8]	; (d7c10 <os_timer_destroy+0xc>)
   d7c08:	681b      	ldr	r3, [r3, #0]
   d7c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7c0c:	9301      	str	r3, [sp, #4]
   d7c0e:	bd08      	pop	{r3, pc}
   d7c10:	00030248 	.word	0x00030248

000d7c14 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7c14:	b508      	push	{r3, lr}
   d7c16:	4b02      	ldr	r3, [pc, #8]	; (d7c20 <os_timer_get_id+0xc>)
   d7c18:	681b      	ldr	r3, [r3, #0]
   d7c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7c1c:	9301      	str	r3, [sp, #4]
   d7c1e:	bd08      	pop	{r3, pc}
   d7c20:	00030248 	.word	0x00030248

000d7c24 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7c24:	b508      	push	{r3, lr}
   d7c26:	4b02      	ldr	r3, [pc, #8]	; (d7c30 <os_timer_change+0xc>)
   d7c28:	681b      	ldr	r3, [r3, #0]
   d7c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c2c:	9301      	str	r3, [sp, #4]
   d7c2e:	bd08      	pop	{r3, pc}
   d7c30:	00030248 	.word	0x00030248

000d7c34 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7c34:	b508      	push	{r3, lr}
   d7c36:	4b02      	ldr	r3, [pc, #8]	; (d7c40 <os_mutex_create+0xc>)
   d7c38:	681b      	ldr	r3, [r3, #0]
   d7c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c3c:	9301      	str	r3, [sp, #4]
   d7c3e:	bd08      	pop	{r3, pc}
   d7c40:	00030248 	.word	0x00030248

000d7c44 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7c44:	b508      	push	{r3, lr}
   d7c46:	4b02      	ldr	r3, [pc, #8]	; (d7c50 <os_mutex_lock+0xc>)
   d7c48:	681b      	ldr	r3, [r3, #0]
   d7c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7c4c:	9301      	str	r3, [sp, #4]
   d7c4e:	bd08      	pop	{r3, pc}
   d7c50:	00030248 	.word	0x00030248

000d7c54 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7c54:	b508      	push	{r3, lr}
   d7c56:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <os_mutex_unlock+0xc>)
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7c5c:	9301      	str	r3, [sp, #4]
   d7c5e:	bd08      	pop	{r3, pc}
   d7c60:	00030248 	.word	0x00030248

000d7c64 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7c64:	b508      	push	{r3, lr}
   d7c66:	4b02      	ldr	r3, [pc, #8]	; (d7c70 <os_mutex_recursive_create+0xc>)
   d7c68:	681b      	ldr	r3, [r3, #0]
   d7c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c6c:	9301      	str	r3, [sp, #4]
   d7c6e:	bd08      	pop	{r3, pc}
   d7c70:	00030248 	.word	0x00030248

000d7c74 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7c74:	b508      	push	{r3, lr}
   d7c76:	4b02      	ldr	r3, [pc, #8]	; (d7c80 <os_mutex_recursive_destroy+0xc>)
   d7c78:	681b      	ldr	r3, [r3, #0]
   d7c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7c7c:	9301      	str	r3, [sp, #4]
   d7c7e:	bd08      	pop	{r3, pc}
   d7c80:	00030248 	.word	0x00030248

000d7c84 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7c84:	b508      	push	{r3, lr}
   d7c86:	4b02      	ldr	r3, [pc, #8]	; (d7c90 <os_mutex_recursive_lock+0xc>)
   d7c88:	681b      	ldr	r3, [r3, #0]
   d7c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7c8c:	9301      	str	r3, [sp, #4]
   d7c8e:	bd08      	pop	{r3, pc}
   d7c90:	00030248 	.word	0x00030248

000d7c94 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7c94:	b508      	push	{r3, lr}
   d7c96:	4b02      	ldr	r3, [pc, #8]	; (d7ca0 <os_mutex_recursive_unlock+0xc>)
   d7c98:	681b      	ldr	r3, [r3, #0]
   d7c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7c9c:	9301      	str	r3, [sp, #4]
   d7c9e:	bd08      	pop	{r3, pc}
   d7ca0:	00030248 	.word	0x00030248

000d7ca4 <os_timer_is_active>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d7ca4:	b508      	push	{r3, lr}
   d7ca6:	4b02      	ldr	r3, [pc, #8]	; (d7cb0 <os_timer_is_active+0xc>)
   d7ca8:	681b      	ldr	r3, [r3, #0]
   d7caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7cac:	9301      	str	r3, [sp, #4]
   d7cae:	bd08      	pop	{r3, pc}
   d7cb0:	00030248 	.word	0x00030248

000d7cb4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7cb4:	b508      	push	{r3, lr}
   d7cb6:	4b02      	ldr	r3, [pc, #8]	; (d7cc0 <os_thread_exit+0xc>)
   d7cb8:	681b      	ldr	r3, [r3, #0]
   d7cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7cbc:	9301      	str	r3, [sp, #4]
   d7cbe:	bd08      	pop	{r3, pc}
   d7cc0:	00030248 	.word	0x00030248

000d7cc4 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7cc4:	b508      	push	{r3, lr}
   d7cc6:	4b02      	ldr	r3, [pc, #8]	; (d7cd0 <os_timer_set_id+0xc>)
   d7cc8:	681b      	ldr	r3, [r3, #0]
   d7cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7ccc:	9301      	str	r3, [sp, #4]
   d7cce:	bd08      	pop	{r3, pc}
   d7cd0:	00030248 	.word	0x00030248

000d7cd4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7cd4:	b508      	push	{r3, lr}
   d7cd6:	4b02      	ldr	r3, [pc, #8]	; (d7ce0 <HAL_Feature_Set+0xc>)
   d7cd8:	681b      	ldr	r3, [r3, #0]
   d7cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7cdc:	9301      	str	r3, [sp, #4]
   d7cde:	bd08      	pop	{r3, pc}
   d7ce0:	00030234 	.word	0x00030234

000d7ce4 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7ce4:	b508      	push	{r3, lr}
   d7ce6:	4b02      	ldr	r3, [pc, #8]	; (d7cf0 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7ce8:	681b      	ldr	r3, [r3, #0]
   d7cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7cec:	9301      	str	r3, [sp, #4]
   d7cee:	bd08      	pop	{r3, pc}
   d7cf0:	00030234 	.word	0x00030234

000d7cf4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7cf4:	b508      	push	{r3, lr}
   d7cf6:	4b02      	ldr	r3, [pc, #8]	; (d7d00 <HAL_RNG_GetRandomNumber+0xc>)
   d7cf8:	681b      	ldr	r3, [r3, #0]
   d7cfa:	685b      	ldr	r3, [r3, #4]
   d7cfc:	9301      	str	r3, [sp, #4]
   d7cfe:	bd08      	pop	{r3, pc}
   d7d00:	00030218 	.word	0x00030218

000d7d04 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7d04:	b508      	push	{r3, lr}
   d7d06:	4b02      	ldr	r3, [pc, #8]	; (d7d10 <HAL_Delay_Milliseconds+0xc>)
   d7d08:	681b      	ldr	r3, [r3, #0]
   d7d0a:	689b      	ldr	r3, [r3, #8]
   d7d0c:	9301      	str	r3, [sp, #4]
   d7d0e:	bd08      	pop	{r3, pc}
   d7d10:	00030218 	.word	0x00030218

000d7d14 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7d14:	b508      	push	{r3, lr}
   d7d16:	4b02      	ldr	r3, [pc, #8]	; (d7d20 <HAL_Delay_Microseconds+0xc>)
   d7d18:	681b      	ldr	r3, [r3, #0]
   d7d1a:	68db      	ldr	r3, [r3, #12]
   d7d1c:	9301      	str	r3, [sp, #4]
   d7d1e:	bd08      	pop	{r3, pc}
   d7d20:	00030218 	.word	0x00030218

000d7d24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7d24:	b508      	push	{r3, lr}
   d7d26:	4b02      	ldr	r3, [pc, #8]	; (d7d30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7d28:	681b      	ldr	r3, [r3, #0]
   d7d2a:	695b      	ldr	r3, [r3, #20]
   d7d2c:	9301      	str	r3, [sp, #4]
   d7d2e:	bd08      	pop	{r3, pc}
   d7d30:	00030218 	.word	0x00030218

000d7d34 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7d34:	b508      	push	{r3, lr}
   d7d36:	4b02      	ldr	r3, [pc, #8]	; (d7d40 <hal_rtc_time_is_valid+0xc>)
   d7d38:	681b      	ldr	r3, [r3, #0]
   d7d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7d3c:	9301      	str	r3, [sp, #4]
   d7d3e:	bd08      	pop	{r3, pc}
   d7d40:	00030218 	.word	0x00030218

000d7d44 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7d44:	b508      	push	{r3, lr}
   d7d46:	4b02      	ldr	r3, [pc, #8]	; (d7d50 <hal_timer_millis+0xc>)
   d7d48:	681b      	ldr	r3, [r3, #0]
   d7d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7d4c:	9301      	str	r3, [sp, #4]
   d7d4e:	bd08      	pop	{r3, pc}
   d7d50:	00030218 	.word	0x00030218

000d7d54 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7d54:	b508      	push	{r3, lr}
   d7d56:	4b02      	ldr	r3, [pc, #8]	; (d7d60 <hal_rtc_get_time+0xc>)
   d7d58:	681b      	ldr	r3, [r3, #0]
   d7d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7d5c:	9301      	str	r3, [sp, #4]
   d7d5e:	bd08      	pop	{r3, pc}
   d7d60:	00030218 	.word	0x00030218

000d7d64 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7d64:	b508      	push	{r3, lr}
   d7d66:	4b02      	ldr	r3, [pc, #8]	; (d7d70 <hal_rtc_set_time+0xc>)
   d7d68:	681b      	ldr	r3, [r3, #0]
   d7d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7d6c:	9301      	str	r3, [sp, #4]
   d7d6e:	bd08      	pop	{r3, pc}
   d7d70:	00030218 	.word	0x00030218

000d7d74 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7d74:	b508      	push	{r3, lr}
   d7d76:	4b02      	ldr	r3, [pc, #8]	; (d7d80 <HAL_Pin_Map+0xc>)
   d7d78:	681b      	ldr	r3, [r3, #0]
   d7d7a:	681b      	ldr	r3, [r3, #0]
   d7d7c:	9301      	str	r3, [sp, #4]
   d7d7e:	bd08      	pop	{r3, pc}
   d7d80:	0003022c 	.word	0x0003022c

000d7d84 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7d84:	b508      	push	{r3, lr}
   d7d86:	4b02      	ldr	r3, [pc, #8]	; (d7d90 <HAL_Validate_Pin_Function+0xc>)
   d7d88:	681b      	ldr	r3, [r3, #0]
   d7d8a:	685b      	ldr	r3, [r3, #4]
   d7d8c:	9301      	str	r3, [sp, #4]
   d7d8e:	bd08      	pop	{r3, pc}
   d7d90:	0003022c 	.word	0x0003022c

000d7d94 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7d94:	b508      	push	{r3, lr}
   d7d96:	4b02      	ldr	r3, [pc, #8]	; (d7da0 <HAL_Pin_Mode+0xc>)
   d7d98:	681b      	ldr	r3, [r3, #0]
   d7d9a:	689b      	ldr	r3, [r3, #8]
   d7d9c:	9301      	str	r3, [sp, #4]
   d7d9e:	bd08      	pop	{r3, pc}
   d7da0:	0003022c 	.word	0x0003022c

000d7da4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7da4:	b508      	push	{r3, lr}
   d7da6:	4b02      	ldr	r3, [pc, #8]	; (d7db0 <HAL_Get_Pin_Mode+0xc>)
   d7da8:	681b      	ldr	r3, [r3, #0]
   d7daa:	68db      	ldr	r3, [r3, #12]
   d7dac:	9301      	str	r3, [sp, #4]
   d7dae:	bd08      	pop	{r3, pc}
   d7db0:	0003022c 	.word	0x0003022c

000d7db4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7db4:	b508      	push	{r3, lr}
   d7db6:	4b02      	ldr	r3, [pc, #8]	; (d7dc0 <HAL_GPIO_Write+0xc>)
   d7db8:	681b      	ldr	r3, [r3, #0]
   d7dba:	691b      	ldr	r3, [r3, #16]
   d7dbc:	9301      	str	r3, [sp, #4]
   d7dbe:	bd08      	pop	{r3, pc}
   d7dc0:	0003022c 	.word	0x0003022c

000d7dc4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7dc4:	b508      	push	{r3, lr}
   d7dc6:	4b02      	ldr	r3, [pc, #8]	; (d7dd0 <HAL_GPIO_Read+0xc>)
   d7dc8:	681b      	ldr	r3, [r3, #0]
   d7dca:	695b      	ldr	r3, [r3, #20]
   d7dcc:	9301      	str	r3, [sp, #4]
   d7dce:	bd08      	pop	{r3, pc}
   d7dd0:	0003022c 	.word	0x0003022c

000d7dd4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7dd4:	b508      	push	{r3, lr}
   d7dd6:	4b02      	ldr	r3, [pc, #8]	; (d7de0 <HAL_Interrupts_Attach+0xc>)
   d7dd8:	681b      	ldr	r3, [r3, #0]
   d7dda:	699b      	ldr	r3, [r3, #24]
   d7ddc:	9301      	str	r3, [sp, #4]
   d7dde:	bd08      	pop	{r3, pc}
   d7de0:	0003022c 	.word	0x0003022c

000d7de4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7de4:	b508      	push	{r3, lr}
   d7de6:	4b02      	ldr	r3, [pc, #8]	; (d7df0 <HAL_Interrupts_Detach+0xc>)
   d7de8:	681b      	ldr	r3, [r3, #0]
   d7dea:	69db      	ldr	r3, [r3, #28]
   d7dec:	9301      	str	r3, [sp, #4]
   d7dee:	bd08      	pop	{r3, pc}
   d7df0:	0003022c 	.word	0x0003022c

000d7df4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7df4:	b508      	push	{r3, lr}
   d7df6:	4b02      	ldr	r3, [pc, #8]	; (d7e00 <hal_adc_read+0xc>)
   d7df8:	681b      	ldr	r3, [r3, #0]
   d7dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7dfc:	9301      	str	r3, [sp, #4]
   d7dfe:	bd08      	pop	{r3, pc}
   d7e00:	0003022c 	.word	0x0003022c

000d7e04 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7e04:	b508      	push	{r3, lr}
   d7e06:	4b02      	ldr	r3, [pc, #8]	; (d7e10 <hal_i2c_begin+0xc>)
   d7e08:	681b      	ldr	r3, [r3, #0]
   d7e0a:	68db      	ldr	r3, [r3, #12]
   d7e0c:	9301      	str	r3, [sp, #4]
   d7e0e:	bd08      	pop	{r3, pc}
   d7e10:	00030228 	.word	0x00030228

000d7e14 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7e14:	b508      	push	{r3, lr}
   d7e16:	4b02      	ldr	r3, [pc, #8]	; (d7e20 <hal_i2c_begin_transmission+0xc>)
   d7e18:	681b      	ldr	r3, [r3, #0]
   d7e1a:	699b      	ldr	r3, [r3, #24]
   d7e1c:	9301      	str	r3, [sp, #4]
   d7e1e:	bd08      	pop	{r3, pc}
   d7e20:	00030228 	.word	0x00030228

000d7e24 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7e24:	b508      	push	{r3, lr}
   d7e26:	4b02      	ldr	r3, [pc, #8]	; (d7e30 <hal_i2c_end_transmission+0xc>)
   d7e28:	681b      	ldr	r3, [r3, #0]
   d7e2a:	69db      	ldr	r3, [r3, #28]
   d7e2c:	9301      	str	r3, [sp, #4]
   d7e2e:	bd08      	pop	{r3, pc}
   d7e30:	00030228 	.word	0x00030228

000d7e34 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7e34:	b508      	push	{r3, lr}
   d7e36:	4b02      	ldr	r3, [pc, #8]	; (d7e40 <hal_i2c_write+0xc>)
   d7e38:	681b      	ldr	r3, [r3, #0]
   d7e3a:	6a1b      	ldr	r3, [r3, #32]
   d7e3c:	9301      	str	r3, [sp, #4]
   d7e3e:	bd08      	pop	{r3, pc}
   d7e40:	00030228 	.word	0x00030228

000d7e44 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7e44:	b508      	push	{r3, lr}
   d7e46:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <hal_i2c_available+0xc>)
   d7e48:	681b      	ldr	r3, [r3, #0]
   d7e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e4c:	9301      	str	r3, [sp, #4]
   d7e4e:	bd08      	pop	{r3, pc}
   d7e50:	00030228 	.word	0x00030228

000d7e54 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7e54:	b508      	push	{r3, lr}
   d7e56:	4b02      	ldr	r3, [pc, #8]	; (d7e60 <hal_i2c_read+0xc>)
   d7e58:	681b      	ldr	r3, [r3, #0]
   d7e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e5c:	9301      	str	r3, [sp, #4]
   d7e5e:	bd08      	pop	{r3, pc}
   d7e60:	00030228 	.word	0x00030228

000d7e64 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7e64:	b508      	push	{r3, lr}
   d7e66:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <hal_i2c_peek+0xc>)
   d7e68:	681b      	ldr	r3, [r3, #0]
   d7e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e6c:	9301      	str	r3, [sp, #4]
   d7e6e:	bd08      	pop	{r3, pc}
   d7e70:	00030228 	.word	0x00030228

000d7e74 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7e74:	b508      	push	{r3, lr}
   d7e76:	4b02      	ldr	r3, [pc, #8]	; (d7e80 <hal_i2c_flush+0xc>)
   d7e78:	681b      	ldr	r3, [r3, #0]
   d7e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e7c:	9301      	str	r3, [sp, #4]
   d7e7e:	bd08      	pop	{r3, pc}
   d7e80:	00030228 	.word	0x00030228

000d7e84 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7e84:	b508      	push	{r3, lr}
   d7e86:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <hal_i2c_is_enabled+0xc>)
   d7e88:	681b      	ldr	r3, [r3, #0]
   d7e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7e8c:	9301      	str	r3, [sp, #4]
   d7e8e:	bd08      	pop	{r3, pc}
   d7e90:	00030228 	.word	0x00030228

000d7e94 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7e94:	b508      	push	{r3, lr}
   d7e96:	4b02      	ldr	r3, [pc, #8]	; (d7ea0 <hal_i2c_init+0xc>)
   d7e98:	681b      	ldr	r3, [r3, #0]
   d7e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7e9c:	9301      	str	r3, [sp, #4]
   d7e9e:	bd08      	pop	{r3, pc}
   d7ea0:	00030228 	.word	0x00030228

000d7ea4 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7ea4:	b508      	push	{r3, lr}
   d7ea6:	4b02      	ldr	r3, [pc, #8]	; (d7eb0 <hal_i2c_lock+0xc>)
   d7ea8:	681b      	ldr	r3, [r3, #0]
   d7eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7eac:	9301      	str	r3, [sp, #4]
   d7eae:	bd08      	pop	{r3, pc}
   d7eb0:	00030228 	.word	0x00030228

000d7eb4 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7eb4:	b508      	push	{r3, lr}
   d7eb6:	4b02      	ldr	r3, [pc, #8]	; (d7ec0 <hal_i2c_unlock+0xc>)
   d7eb8:	681b      	ldr	r3, [r3, #0]
   d7eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7ebc:	9301      	str	r3, [sp, #4]
   d7ebe:	bd08      	pop	{r3, pc}
   d7ec0:	00030228 	.word	0x00030228

000d7ec4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7ec4:	b508      	push	{r3, lr}
   d7ec6:	4b02      	ldr	r3, [pc, #8]	; (d7ed0 <hal_i2c_request_ex+0xc>)
   d7ec8:	681b      	ldr	r3, [r3, #0]
   d7eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7ecc:	9301      	str	r3, [sp, #4]
   d7ece:	bd08      	pop	{r3, pc}
   d7ed0:	00030228 	.word	0x00030228

000d7ed4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7ed4:	b508      	push	{r3, lr}
   d7ed6:	4b02      	ldr	r3, [pc, #8]	; (d7ee0 <inet_inet_ntop+0xc>)
   d7ed8:	681b      	ldr	r3, [r3, #0]
   d7eda:	695b      	ldr	r3, [r3, #20]
   d7edc:	9301      	str	r3, [sp, #4]
   d7ede:	bd08      	pop	{r3, pc}
   d7ee0:	00030264 	.word	0x00030264

000d7ee4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7ee4:	b508      	push	{r3, lr}
   d7ee6:	4b02      	ldr	r3, [pc, #8]	; (d7ef0 <netdb_freeaddrinfo+0xc>)
   d7ee8:	681b      	ldr	r3, [r3, #0]
   d7eea:	689b      	ldr	r3, [r3, #8]
   d7eec:	9301      	str	r3, [sp, #4]
   d7eee:	bd08      	pop	{r3, pc}
   d7ef0:	00030268 	.word	0x00030268

000d7ef4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7ef4:	b508      	push	{r3, lr}
   d7ef6:	4b02      	ldr	r3, [pc, #8]	; (d7f00 <netdb_getaddrinfo+0xc>)
   d7ef8:	681b      	ldr	r3, [r3, #0]
   d7efa:	68db      	ldr	r3, [r3, #12]
   d7efc:	9301      	str	r3, [sp, #4]
   d7efe:	bd08      	pop	{r3, pc}
   d7f00:	00030268 	.word	0x00030268

000d7f04 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7f04:	b508      	push	{r3, lr}
   d7f06:	4b02      	ldr	r3, [pc, #8]	; (d7f10 <hal_spi_init+0xc>)
   d7f08:	681b      	ldr	r3, [r3, #0]
   d7f0a:	69db      	ldr	r3, [r3, #28]
   d7f0c:	9301      	str	r3, [sp, #4]
   d7f0e:	bd08      	pop	{r3, pc}
   d7f10:	00030230 	.word	0x00030230

000d7f14 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7f14:	b508      	push	{r3, lr}
   d7f16:	4b02      	ldr	r3, [pc, #8]	; (d7f20 <hal_spi_is_enabled+0xc>)
   d7f18:	681b      	ldr	r3, [r3, #0]
   d7f1a:	6a1b      	ldr	r3, [r3, #32]
   d7f1c:	9301      	str	r3, [sp, #4]
   d7f1e:	bd08      	pop	{r3, pc}
   d7f20:	00030230 	.word	0x00030230

000d7f24 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7f24:	b508      	push	{r3, lr}
   d7f26:	4b02      	ldr	r3, [pc, #8]	; (d7f30 <hal_usart_init+0xc>)
   d7f28:	681b      	ldr	r3, [r3, #0]
   d7f2a:	681b      	ldr	r3, [r3, #0]
   d7f2c:	9301      	str	r3, [sp, #4]
   d7f2e:	bd08      	pop	{r3, pc}
   d7f30:	0003023c 	.word	0x0003023c

000d7f34 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d7f34:	b508      	push	{r3, lr}
   d7f36:	4b02      	ldr	r3, [pc, #8]	; (d7f40 <hal_usart_end+0xc>)
   d7f38:	681b      	ldr	r3, [r3, #0]
   d7f3a:	689b      	ldr	r3, [r3, #8]
   d7f3c:	9301      	str	r3, [sp, #4]
   d7f3e:	bd08      	pop	{r3, pc}
   d7f40:	0003023c 	.word	0x0003023c

000d7f44 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7f44:	b508      	push	{r3, lr}
   d7f46:	4b02      	ldr	r3, [pc, #8]	; (d7f50 <hal_usart_write+0xc>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	68db      	ldr	r3, [r3, #12]
   d7f4c:	9301      	str	r3, [sp, #4]
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	0003023c 	.word	0x0003023c

000d7f54 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7f54:	b508      	push	{r3, lr}
   d7f56:	4b02      	ldr	r3, [pc, #8]	; (d7f60 <hal_usart_available+0xc>)
   d7f58:	681b      	ldr	r3, [r3, #0]
   d7f5a:	691b      	ldr	r3, [r3, #16]
   d7f5c:	9301      	str	r3, [sp, #4]
   d7f5e:	bd08      	pop	{r3, pc}
   d7f60:	0003023c 	.word	0x0003023c

000d7f64 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7f64:	b508      	push	{r3, lr}
   d7f66:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <hal_usart_read+0xc>)
   d7f68:	681b      	ldr	r3, [r3, #0]
   d7f6a:	695b      	ldr	r3, [r3, #20]
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	0003023c 	.word	0x0003023c

000d7f74 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7f74:	b508      	push	{r3, lr}
   d7f76:	4b02      	ldr	r3, [pc, #8]	; (d7f80 <hal_usart_peek+0xc>)
   d7f78:	681b      	ldr	r3, [r3, #0]
   d7f7a:	699b      	ldr	r3, [r3, #24]
   d7f7c:	9301      	str	r3, [sp, #4]
   d7f7e:	bd08      	pop	{r3, pc}
   d7f80:	0003023c 	.word	0x0003023c

000d7f84 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7f84:	b508      	push	{r3, lr}
   d7f86:	4b02      	ldr	r3, [pc, #8]	; (d7f90 <hal_usart_flush+0xc>)
   d7f88:	681b      	ldr	r3, [r3, #0]
   d7f8a:	69db      	ldr	r3, [r3, #28]
   d7f8c:	9301      	str	r3, [sp, #4]
   d7f8e:	bd08      	pop	{r3, pc}
   d7f90:	0003023c 	.word	0x0003023c

000d7f94 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7f94:	b508      	push	{r3, lr}
   d7f96:	4b02      	ldr	r3, [pc, #8]	; (d7fa0 <hal_usart_is_enabled+0xc>)
   d7f98:	681b      	ldr	r3, [r3, #0]
   d7f9a:	6a1b      	ldr	r3, [r3, #32]
   d7f9c:	9301      	str	r3, [sp, #4]
   d7f9e:	bd08      	pop	{r3, pc}
   d7fa0:	0003023c 	.word	0x0003023c

000d7fa4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7fa4:	b508      	push	{r3, lr}
   d7fa6:	4b02      	ldr	r3, [pc, #8]	; (d7fb0 <hal_usart_available_data_for_write+0xc>)
   d7fa8:	681b      	ldr	r3, [r3, #0]
   d7faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7fac:	9301      	str	r3, [sp, #4]
   d7fae:	bd08      	pop	{r3, pc}
   d7fb0:	0003023c 	.word	0x0003023c

000d7fb4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d7fb4:	b508      	push	{r3, lr}
   d7fb6:	4b02      	ldr	r3, [pc, #8]	; (d7fc0 <hal_usart_begin_config+0xc>)
   d7fb8:	681b      	ldr	r3, [r3, #0]
   d7fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7fbc:	9301      	str	r3, [sp, #4]
   d7fbe:	bd08      	pop	{r3, pc}
   d7fc0:	0003023c 	.word	0x0003023c

000d7fc4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7fc4:	b508      	push	{r3, lr}
   d7fc6:	4b02      	ldr	r3, [pc, #8]	; (d7fd0 <HAL_USB_USART_Init+0xc>)
   d7fc8:	681b      	ldr	r3, [r3, #0]
   d7fca:	681b      	ldr	r3, [r3, #0]
   d7fcc:	9301      	str	r3, [sp, #4]
   d7fce:	bd08      	pop	{r3, pc}
   d7fd0:	0003024c 	.word	0x0003024c

000d7fd4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7fd4:	b508      	push	{r3, lr}
   d7fd6:	4b02      	ldr	r3, [pc, #8]	; (d7fe0 <HAL_USB_USART_Begin+0xc>)
   d7fd8:	681b      	ldr	r3, [r3, #0]
   d7fda:	685b      	ldr	r3, [r3, #4]
   d7fdc:	9301      	str	r3, [sp, #4]
   d7fde:	bd08      	pop	{r3, pc}
   d7fe0:	0003024c 	.word	0x0003024c

000d7fe4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d7fe4:	b508      	push	{r3, lr}
   d7fe6:	4b02      	ldr	r3, [pc, #8]	; (d7ff0 <HAL_USB_USART_End+0xc>)
   d7fe8:	681b      	ldr	r3, [r3, #0]
   d7fea:	689b      	ldr	r3, [r3, #8]
   d7fec:	9301      	str	r3, [sp, #4]
   d7fee:	bd08      	pop	{r3, pc}
   d7ff0:	0003024c 	.word	0x0003024c

000d7ff4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7ff4:	b508      	push	{r3, lr}
   d7ff6:	4b02      	ldr	r3, [pc, #8]	; (d8000 <HAL_USB_USART_Available_Data+0xc>)
   d7ff8:	681b      	ldr	r3, [r3, #0]
   d7ffa:	691b      	ldr	r3, [r3, #16]
   d7ffc:	9301      	str	r3, [sp, #4]
   d7ffe:	bd08      	pop	{r3, pc}
   d8000:	0003024c 	.word	0x0003024c

000d8004 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8004:	b508      	push	{r3, lr}
   d8006:	4b02      	ldr	r3, [pc, #8]	; (d8010 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8008:	681b      	ldr	r3, [r3, #0]
   d800a:	695b      	ldr	r3, [r3, #20]
   d800c:	9301      	str	r3, [sp, #4]
   d800e:	bd08      	pop	{r3, pc}
   d8010:	0003024c 	.word	0x0003024c

000d8014 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8014:	b508      	push	{r3, lr}
   d8016:	4b02      	ldr	r3, [pc, #8]	; (d8020 <HAL_USB_USART_Receive_Data+0xc>)
   d8018:	681b      	ldr	r3, [r3, #0]
   d801a:	699b      	ldr	r3, [r3, #24]
   d801c:	9301      	str	r3, [sp, #4]
   d801e:	bd08      	pop	{r3, pc}
   d8020:	0003024c 	.word	0x0003024c

000d8024 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8024:	b508      	push	{r3, lr}
   d8026:	4b02      	ldr	r3, [pc, #8]	; (d8030 <HAL_USB_USART_Send_Data+0xc>)
   d8028:	681b      	ldr	r3, [r3, #0]
   d802a:	69db      	ldr	r3, [r3, #28]
   d802c:	9301      	str	r3, [sp, #4]
   d802e:	bd08      	pop	{r3, pc}
   d8030:	0003024c 	.word	0x0003024c

000d8034 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8034:	b508      	push	{r3, lr}
   d8036:	4b02      	ldr	r3, [pc, #8]	; (d8040 <HAL_USB_USART_Flush_Data+0xc>)
   d8038:	681b      	ldr	r3, [r3, #0]
   d803a:	6a1b      	ldr	r3, [r3, #32]
   d803c:	9301      	str	r3, [sp, #4]
   d803e:	bd08      	pop	{r3, pc}
   d8040:	0003024c 	.word	0x0003024c

000d8044 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8044:	b508      	push	{r3, lr}
   d8046:	4b02      	ldr	r3, [pc, #8]	; (d8050 <panic_+0xc>)
   d8048:	681b      	ldr	r3, [r3, #0]
   d804a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d804c:	9301      	str	r3, [sp, #4]
   d804e:	bd08      	pop	{r3, pc}
   d8050:	00030260 	.word	0x00030260

000d8054 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8054:	b508      	push	{r3, lr}
   d8056:	4b02      	ldr	r3, [pc, #8]	; (d8060 <log_message+0xc>)
   d8058:	681b      	ldr	r3, [r3, #0]
   d805a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d805c:	9301      	str	r3, [sp, #4]
   d805e:	bd08      	pop	{r3, pc}
   d8060:	00030260 	.word	0x00030260

000d8064 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8064:	b508      	push	{r3, lr}
   d8066:	4b02      	ldr	r3, [pc, #8]	; (d8070 <log_message_v+0xc>)
   d8068:	681b      	ldr	r3, [r3, #0]
   d806a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d806c:	9301      	str	r3, [sp, #4]
   d806e:	bd08      	pop	{r3, pc}
   d8070:	00030260 	.word	0x00030260

000d8074 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d8074:	b508      	push	{r3, lr}
   d8076:	4b02      	ldr	r3, [pc, #8]	; (d8080 <log_level_name+0xc>)
   d8078:	681b      	ldr	r3, [r3, #0]
   d807a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d807c:	9301      	str	r3, [sp, #4]
   d807e:	bd08      	pop	{r3, pc}
   d8080:	00030260 	.word	0x00030260

000d8084 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d8084:	b508      	push	{r3, lr}
   d8086:	4b02      	ldr	r3, [pc, #8]	; (d8090 <log_set_callbacks+0xc>)
   d8088:	681b      	ldr	r3, [r3, #0]
   d808a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d808c:	9301      	str	r3, [sp, #4]
   d808e:	bd08      	pop	{r3, pc}
   d8090:	00030260 	.word	0x00030260

000d8094 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8094:	b508      	push	{r3, lr}
   d8096:	4b03      	ldr	r3, [pc, #12]	; (d80a4 <diag_get_source+0x10>)
   d8098:	681b      	ldr	r3, [r3, #0]
   d809a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d809e:	9301      	str	r3, [sp, #4]
   d80a0:	bd08      	pop	{r3, pc}
   d80a2:	0000      	.short	0x0000
   d80a4:	00030260 	.word	0x00030260

000d80a8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d80a8:	b508      	push	{r3, lr}
   d80aa:	4b02      	ldr	r3, [pc, #8]	; (d80b4 <system_mode+0xc>)
   d80ac:	681b      	ldr	r3, [r3, #0]
   d80ae:	681b      	ldr	r3, [r3, #0]
   d80b0:	9301      	str	r3, [sp, #4]
   d80b2:	bd08      	pop	{r3, pc}
   d80b4:	00030220 	.word	0x00030220

000d80b8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d80b8:	b508      	push	{r3, lr}
   d80ba:	4b02      	ldr	r3, [pc, #8]	; (d80c4 <set_system_mode+0xc>)
   d80bc:	681b      	ldr	r3, [r3, #0]
   d80be:	685b      	ldr	r3, [r3, #4]
   d80c0:	9301      	str	r3, [sp, #4]
   d80c2:	bd08      	pop	{r3, pc}
   d80c4:	00030220 	.word	0x00030220

000d80c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d80c8:	b508      	push	{r3, lr}
   d80ca:	4b02      	ldr	r3, [pc, #8]	; (d80d4 <system_delay_ms+0xc>)
   d80cc:	681b      	ldr	r3, [r3, #0]
   d80ce:	695b      	ldr	r3, [r3, #20]
   d80d0:	9301      	str	r3, [sp, #4]
   d80d2:	bd08      	pop	{r3, pc}
   d80d4:	00030220 	.word	0x00030220

000d80d8 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d80d8:	b508      	push	{r3, lr}
   d80da:	4b02      	ldr	r3, [pc, #8]	; (d80e4 <system_subscribe_event+0xc>)
   d80dc:	681b      	ldr	r3, [r3, #0]
   d80de:	6a1b      	ldr	r3, [r3, #32]
   d80e0:	9301      	str	r3, [sp, #4]
   d80e2:	bd08      	pop	{r3, pc}
   d80e4:	00030220 	.word	0x00030220

000d80e8 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d80e8:	b508      	push	{r3, lr}
   d80ea:	4b02      	ldr	r3, [pc, #8]	; (d80f4 <system_thread_set_state+0xc>)
   d80ec:	681b      	ldr	r3, [r3, #0]
   d80ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d80f0:	9301      	str	r3, [sp, #4]
   d80f2:	bd08      	pop	{r3, pc}
   d80f4:	00030220 	.word	0x00030220

000d80f8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d80f8:	b508      	push	{r3, lr}
   d80fa:	4b02      	ldr	r3, [pc, #8]	; (d8104 <application_thread_current+0xc>)
   d80fc:	681b      	ldr	r3, [r3, #0]
   d80fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8100:	9301      	str	r3, [sp, #4]
   d8102:	bd08      	pop	{r3, pc}
   d8104:	00030220 	.word	0x00030220

000d8108 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8108:	b508      	push	{r3, lr}
   d810a:	4b02      	ldr	r3, [pc, #8]	; (d8114 <application_thread_invoke+0xc>)
   d810c:	681b      	ldr	r3, [r3, #0]
   d810e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8110:	9301      	str	r3, [sp, #4]
   d8112:	bd08      	pop	{r3, pc}
   d8114:	00030220 	.word	0x00030220

000d8118 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8118:	b508      	push	{r3, lr}
   d811a:	4b02      	ldr	r3, [pc, #8]	; (d8124 <system_thread_get_state+0xc>)
   d811c:	681b      	ldr	r3, [r3, #0]
   d811e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8120:	9301      	str	r3, [sp, #4]
   d8122:	bd08      	pop	{r3, pc}
   d8124:	00030220 	.word	0x00030220

000d8128 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8128:	b508      	push	{r3, lr}
   d812a:	4b02      	ldr	r3, [pc, #8]	; (d8134 <system_notify_time_changed+0xc>)
   d812c:	681b      	ldr	r3, [r3, #0]
   d812e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8130:	9301      	str	r3, [sp, #4]
   d8132:	bd08      	pop	{r3, pc}
   d8134:	00030220 	.word	0x00030220

000d8138 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8138:	b508      	push	{r3, lr}
   d813a:	4b03      	ldr	r3, [pc, #12]	; (d8148 <system_ctrl_set_app_request_handler+0x10>)
   d813c:	681b      	ldr	r3, [r3, #0]
   d813e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8142:	9301      	str	r3, [sp, #4]
   d8144:	bd08      	pop	{r3, pc}
   d8146:	0000      	.short	0x0000
   d8148:	00030220 	.word	0x00030220

000d814c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d814c:	b508      	push	{r3, lr}
   d814e:	4b03      	ldr	r3, [pc, #12]	; (d815c <system_ctrl_set_result+0x10>)
   d8150:	681b      	ldr	r3, [r3, #0]
   d8152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8156:	9301      	str	r3, [sp, #4]
   d8158:	bd08      	pop	{r3, pc}
   d815a:	0000      	.short	0x0000
   d815c:	00030220 	.word	0x00030220

000d8160 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8160:	b508      	push	{r3, lr}
   d8162:	4b03      	ldr	r3, [pc, #12]	; (d8170 <system_power_management_set_config+0x10>)
   d8164:	681b      	ldr	r3, [r3, #0]
   d8166:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d816a:	9301      	str	r3, [sp, #4]
   d816c:	bd08      	pop	{r3, pc}
   d816e:	0000      	.short	0x0000
   d8170:	00030220 	.word	0x00030220

000d8174 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d8174:	b508      	push	{r3, lr}
   d8176:	4b03      	ldr	r3, [pc, #12]	; (d8184 <system_sleep_ext+0x10>)
   d8178:	681b      	ldr	r3, [r3, #0]
   d817a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d817e:	9301      	str	r3, [sp, #4]
   d8180:	bd08      	pop	{r3, pc}
   d8182:	0000      	.short	0x0000
   d8184:	00030220 	.word	0x00030220

000d8188 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8188:	b508      	push	{r3, lr}
   d818a:	4b03      	ldr	r3, [pc, #12]	; (d8198 <system_reset+0x10>)
   d818c:	681b      	ldr	r3, [r3, #0]
   d818e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d8192:	9301      	str	r3, [sp, #4]
   d8194:	bd08      	pop	{r3, pc}
   d8196:	0000      	.short	0x0000
   d8198:	00030220 	.word	0x00030220

000d819c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d819c:	b508      	push	{r3, lr}
   d819e:	4b02      	ldr	r3, [pc, #8]	; (d81a8 <spark_variable+0xc>)
   d81a0:	681b      	ldr	r3, [r3, #0]
   d81a2:	681b      	ldr	r3, [r3, #0]
   d81a4:	9301      	str	r3, [sp, #4]
   d81a6:	bd08      	pop	{r3, pc}
   d81a8:	00030244 	.word	0x00030244

000d81ac <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b02      	ldr	r3, [pc, #8]	; (d81b8 <spark_function+0xc>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	685b      	ldr	r3, [r3, #4]
   d81b4:	9301      	str	r3, [sp, #4]
   d81b6:	bd08      	pop	{r3, pc}
   d81b8:	00030244 	.word	0x00030244

000d81bc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d81bc:	b508      	push	{r3, lr}
   d81be:	4b02      	ldr	r3, [pc, #8]	; (d81c8 <spark_process+0xc>)
   d81c0:	681b      	ldr	r3, [r3, #0]
   d81c2:	689b      	ldr	r3, [r3, #8]
   d81c4:	9301      	str	r3, [sp, #4]
   d81c6:	bd08      	pop	{r3, pc}
   d81c8:	00030244 	.word	0x00030244

000d81cc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d81cc:	b508      	push	{r3, lr}
   d81ce:	4b02      	ldr	r3, [pc, #8]	; (d81d8 <spark_cloud_flag_connect+0xc>)
   d81d0:	681b      	ldr	r3, [r3, #0]
   d81d2:	68db      	ldr	r3, [r3, #12]
   d81d4:	9301      	str	r3, [sp, #4]
   d81d6:	bd08      	pop	{r3, pc}
   d81d8:	00030244 	.word	0x00030244

000d81dc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d81dc:	b508      	push	{r3, lr}
   d81de:	4b02      	ldr	r3, [pc, #8]	; (d81e8 <spark_cloud_flag_connected+0xc>)
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	695b      	ldr	r3, [r3, #20]
   d81e4:	9301      	str	r3, [sp, #4]
   d81e6:	bd08      	pop	{r3, pc}
   d81e8:	00030244 	.word	0x00030244

000d81ec <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b02      	ldr	r3, [pc, #8]	; (d81f8 <spark_deviceID+0xc>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	69db      	ldr	r3, [r3, #28]
   d81f4:	9301      	str	r3, [sp, #4]
   d81f6:	bd08      	pop	{r3, pc}
   d81f8:	00030244 	.word	0x00030244

000d81fc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d81fc:	b508      	push	{r3, lr}
   d81fe:	4b02      	ldr	r3, [pc, #8]	; (d8208 <spark_send_event+0xc>)
   d8200:	681b      	ldr	r3, [r3, #0]
   d8202:	6a1b      	ldr	r3, [r3, #32]
   d8204:	9301      	str	r3, [sp, #4]
   d8206:	bd08      	pop	{r3, pc}
   d8208:	00030244 	.word	0x00030244

000d820c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d820c:	b508      	push	{r3, lr}
   d820e:	4b02      	ldr	r3, [pc, #8]	; (d8218 <spark_subscribe+0xc>)
   d8210:	681b      	ldr	r3, [r3, #0]
   d8212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8214:	9301      	str	r3, [sp, #4]
   d8216:	bd08      	pop	{r3, pc}
   d8218:	00030244 	.word	0x00030244

000d821c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d821c:	b508      	push	{r3, lr}
   d821e:	4b02      	ldr	r3, [pc, #8]	; (d8228 <spark_sync_time+0xc>)
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8224:	9301      	str	r3, [sp, #4]
   d8226:	bd08      	pop	{r3, pc}
   d8228:	00030244 	.word	0x00030244

000d822c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d822c:	b508      	push	{r3, lr}
   d822e:	4b02      	ldr	r3, [pc, #8]	; (d8238 <spark_sync_time_pending+0xc>)
   d8230:	681b      	ldr	r3, [r3, #0]
   d8232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8234:	9301      	str	r3, [sp, #4]
   d8236:	bd08      	pop	{r3, pc}
   d8238:	00030244 	.word	0x00030244

000d823c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <spark_sync_time_last+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	00030244 	.word	0x00030244

000d824c <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <spark_set_connection_property+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	00030244 	.word	0x00030244

000d825c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	00030244 	.word	0x00030244

000d826c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <spark_cloud_disconnect+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	00030244 	.word	0x00030244

000d827c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <network_connect+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	685b      	ldr	r3, [r3, #4]
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	00030240 	.word	0x00030240

000d828c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <network_connecting+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	689b      	ldr	r3, [r3, #8]
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	00030240 	.word	0x00030240

000d829c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <network_disconnect+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	68db      	ldr	r3, [r3, #12]
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	00030240 	.word	0x00030240

000d82ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <network_ready+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	691b      	ldr	r3, [r3, #16]
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	00030240 	.word	0x00030240

000d82bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <network_on+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	695b      	ldr	r3, [r3, #20]
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	00030240 	.word	0x00030240

000d82cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <network_off+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	699b      	ldr	r3, [r3, #24]
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	00030240 	.word	0x00030240

000d82dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b02      	ldr	r3, [pc, #8]	; (d82e8 <network_listen+0xc>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	69db      	ldr	r3, [r3, #28]
   d82e4:	9301      	str	r3, [sp, #4]
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	00030240 	.word	0x00030240

000d82ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d82ec:	b508      	push	{r3, lr}
   d82ee:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <network_listening+0xc>)
   d82f0:	681b      	ldr	r3, [r3, #0]
   d82f2:	6a1b      	ldr	r3, [r3, #32]
   d82f4:	9301      	str	r3, [sp, #4]
   d82f6:	bd08      	pop	{r3, pc}
   d82f8:	00030240 	.word	0x00030240

000d82fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d82fc:	b508      	push	{r3, lr}
   d82fe:	4b02      	ldr	r3, [pc, #8]	; (d8308 <network_set_listen_timeout+0xc>)
   d8300:	681b      	ldr	r3, [r3, #0]
   d8302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8304:	9301      	str	r3, [sp, #4]
   d8306:	bd08      	pop	{r3, pc}
   d8308:	00030240 	.word	0x00030240

000d830c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d830c:	b508      	push	{r3, lr}
   d830e:	4b02      	ldr	r3, [pc, #8]	; (d8318 <network_get_listen_timeout+0xc>)
   d8310:	681b      	ldr	r3, [r3, #0]
   d8312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8314:	9301      	str	r3, [sp, #4]
   d8316:	bd08      	pop	{r3, pc}
   d8318:	00030240 	.word	0x00030240

000d831c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d831c:	b508      	push	{r3, lr}
   d831e:	4b02      	ldr	r3, [pc, #8]	; (d8328 <network_is_on+0xc>)
   d8320:	681b      	ldr	r3, [r3, #0]
   d8322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8324:	9301      	str	r3, [sp, #4]
   d8326:	bd08      	pop	{r3, pc}
   d8328:	00030240 	.word	0x00030240

000d832c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d832c:	b508      	push	{r3, lr}
   d832e:	4b02      	ldr	r3, [pc, #8]	; (d8338 <network_is_off+0xc>)
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8334:	9301      	str	r3, [sp, #4]
   d8336:	bd08      	pop	{r3, pc}
   d8338:	00030240 	.word	0x00030240

000d833c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d833c:	b508      	push	{r3, lr}
   d833e:	4b02      	ldr	r3, [pc, #8]	; (d8348 <malloc+0xc>)
   d8340:	681b      	ldr	r3, [r3, #0]
   d8342:	681b      	ldr	r3, [r3, #0]
   d8344:	9301      	str	r3, [sp, #4]
   d8346:	bd08      	pop	{r3, pc}
   d8348:	0003021c 	.word	0x0003021c

000d834c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d834c:	b508      	push	{r3, lr}
   d834e:	4b02      	ldr	r3, [pc, #8]	; (d8358 <free+0xc>)
   d8350:	681b      	ldr	r3, [r3, #0]
   d8352:	685b      	ldr	r3, [r3, #4]
   d8354:	9301      	str	r3, [sp, #4]
   d8356:	bd08      	pop	{r3, pc}
   d8358:	0003021c 	.word	0x0003021c

000d835c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d835c:	b508      	push	{r3, lr}
   d835e:	4b02      	ldr	r3, [pc, #8]	; (d8368 <realloc+0xc>)
   d8360:	681b      	ldr	r3, [r3, #0]
   d8362:	689b      	ldr	r3, [r3, #8]
   d8364:	9301      	str	r3, [sp, #4]
   d8366:	bd08      	pop	{r3, pc}
   d8368:	0003021c 	.word	0x0003021c

000d836c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d836c:	b508      	push	{r3, lr}
   d836e:	4b02      	ldr	r3, [pc, #8]	; (d8378 <siprintf+0xc>)
   d8370:	681b      	ldr	r3, [r3, #0]
   d8372:	691b      	ldr	r3, [r3, #16]
   d8374:	9301      	str	r3, [sp, #4]
   d8376:	bd08      	pop	{r3, pc}
   d8378:	0003021c 	.word	0x0003021c

000d837c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d837c:	b508      	push	{r3, lr}
   d837e:	4b02      	ldr	r3, [pc, #8]	; (d8388 <snprintf+0xc>)
   d8380:	681b      	ldr	r3, [r3, #0]
   d8382:	69db      	ldr	r3, [r3, #28]
   d8384:	9301      	str	r3, [sp, #4]
   d8386:	bd08      	pop	{r3, pc}
   d8388:	0003021c 	.word	0x0003021c

000d838c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d838c:	b508      	push	{r3, lr}
   d838e:	4b02      	ldr	r3, [pc, #8]	; (d8398 <vsnprintf+0xc>)
   d8390:	681b      	ldr	r3, [r3, #0]
   d8392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8394:	9301      	str	r3, [sp, #4]
   d8396:	bd08      	pop	{r3, pc}
   d8398:	0003021c 	.word	0x0003021c

000d839c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d839c:	b508      	push	{r3, lr}
   d839e:	4b02      	ldr	r3, [pc, #8]	; (d83a8 <abort+0xc>)
   d83a0:	681b      	ldr	r3, [r3, #0]
   d83a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83a4:	9301      	str	r3, [sp, #4]
   d83a6:	bd08      	pop	{r3, pc}
   d83a8:	0003021c 	.word	0x0003021c

000d83ac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d83ac:	b508      	push	{r3, lr}
   d83ae:	4b02      	ldr	r3, [pc, #8]	; (d83b8 <_malloc_r+0xc>)
   d83b0:	681b      	ldr	r3, [r3, #0]
   d83b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83b4:	9301      	str	r3, [sp, #4]
   d83b6:	bd08      	pop	{r3, pc}
   d83b8:	0003021c 	.word	0x0003021c

000d83bc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d83bc:	b508      	push	{r3, lr}
   d83be:	4b02      	ldr	r3, [pc, #8]	; (d83c8 <newlib_impure_ptr_callback+0xc>)
   d83c0:	681b      	ldr	r3, [r3, #0]
   d83c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d83c4:	9301      	str	r3, [sp, #4]
   d83c6:	bd08      	pop	{r3, pc}
   d83c8:	0003021c 	.word	0x0003021c

000d83cc <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d83cc:	b508      	push	{r3, lr}
   d83ce:	4b02      	ldr	r3, [pc, #8]	; (d83d8 <strftime+0xc>)
   d83d0:	681b      	ldr	r3, [r3, #0]
   d83d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d83d4:	9301      	str	r3, [sp, #4]
   d83d6:	bd08      	pop	{r3, pc}
   d83d8:	0003021c 	.word	0x0003021c

000d83dc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d83dc:	b508      	push	{r3, lr}
   d83de:	4b02      	ldr	r3, [pc, #8]	; (d83e8 <localtime_r+0xc>)
   d83e0:	681b      	ldr	r3, [r3, #0]
   d83e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d83e4:	9301      	str	r3, [sp, #4]
   d83e6:	bd08      	pop	{r3, pc}
   d83e8:	0003021c 	.word	0x0003021c

000d83ec <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d83ec:	b508      	push	{r3, lr}
   d83ee:	4b02      	ldr	r3, [pc, #8]	; (d83f8 <gmtime_r+0xc>)
   d83f0:	681b      	ldr	r3, [r3, #0]
   d83f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d83f4:	9301      	str	r3, [sp, #4]
   d83f6:	bd08      	pop	{r3, pc}
   d83f8:	0003021c 	.word	0x0003021c

000d83fc <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d83fc:	b508      	push	{r3, lr}
   d83fe:	4b02      	ldr	r3, [pc, #8]	; (d8408 <mktime+0xc>)
   d8400:	681b      	ldr	r3, [r3, #0]
   d8402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8404:	9301      	str	r3, [sp, #4]
   d8406:	bd08      	pop	{r3, pc}
   d8408:	0003021c 	.word	0x0003021c

000d840c <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d840c:	428a      	cmp	r2, r1
{
   d840e:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d8410:	d007      	beq.n	d8422 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d8412:	9c02      	ldr	r4, [sp, #8]
   d8414:	1a40      	subs	r0, r0, r1
   d8416:	1ae4      	subs	r4, r4, r3
   d8418:	4360      	muls	r0, r4
   d841a:	1a52      	subs	r2, r2, r1
   d841c:	fb90 f0f2 	sdiv	r0, r0, r2
   d8420:	4418      	add	r0, r3
}
   d8422:	bd10      	pop	{r4, pc}

000d8424 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8424:	2100      	movs	r1, #0
   d8426:	f7ff be4f 	b.w	d80c8 <system_delay_ms>

000d842a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d842a:	b510      	push	{r4, lr}
      if (_M_empty())
   d842c:	6883      	ldr	r3, [r0, #8]
   d842e:	4604      	mov	r4, r0
   d8430:	b90b      	cbnz	r3, d8436 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8432:	f003 f94c 	bl	db6ce <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8436:	68c3      	ldr	r3, [r0, #12]
   d8438:	4798      	blx	r3
      if (_M_manager)
   d843a:	68a3      	ldr	r3, [r4, #8]
   d843c:	b11b      	cbz	r3, d8446 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d843e:	2203      	movs	r2, #3
   d8440:	4621      	mov	r1, r4
   d8442:	4620      	mov	r0, r4
   d8444:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8446:	4620      	mov	r0, r4
   d8448:	2110      	movs	r1, #16
}
   d844a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d844e:	f003 b938 	b.w	db6c2 <_ZdlPvj>

000d8452 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8452:	b510      	push	{r4, lr}
          _M_dispose();
   d8454:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8456:	4604      	mov	r4, r0
          _M_dispose();
   d8458:	689b      	ldr	r3, [r3, #8]
   d845a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d845c:	68a3      	ldr	r3, [r4, #8]
   d845e:	3b01      	subs	r3, #1
   d8460:	60a3      	str	r3, [r4, #8]
   d8462:	b92b      	cbnz	r3, d8470 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8464:	6823      	ldr	r3, [r4, #0]
   d8466:	4620      	mov	r0, r4
   d8468:	68db      	ldr	r3, [r3, #12]
    }
   d846a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d846e:	4718      	bx	r3
    }
   d8470:	bd10      	pop	{r4, pc}

000d8472 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8472:	b510      	push	{r4, lr}
   d8474:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8476:	6800      	ldr	r0, [r0, #0]
   d8478:	b108      	cbz	r0, d847e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d847a:	f7ff fbfb 	bl	d7c74 <os_mutex_recursive_destroy>
    }
   d847e:	4620      	mov	r0, r4
   d8480:	bd10      	pop	{r4, pc}

000d8482 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d8482:	680b      	ldr	r3, [r1, #0]
   d8484:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d8486:	b113      	cbz	r3, d848e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8488:	685a      	ldr	r2, [r3, #4]
   d848a:	3201      	adds	r2, #1
   d848c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d848e:	4770      	bx	lr

000d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d8490:	b510      	push	{r4, lr}
   d8492:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d8494:	6800      	ldr	r0, [r0, #0]
   d8496:	b128      	cbz	r0, d84a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d8498:	6843      	ldr	r3, [r0, #4]
   d849a:	3b01      	subs	r3, #1
   d849c:	6043      	str	r3, [r0, #4]
   d849e:	b90b      	cbnz	r3, d84a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d84a0:	f7ff ffd7 	bl	d8452 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d84a4:	4620      	mov	r0, r4
   d84a6:	bd10      	pop	{r4, pc}

000d84a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d84a8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d84aa:	4c06      	ldr	r4, [pc, #24]	; (d84c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d84ac:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d84ae:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d84b0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d84b2:	f7ff fbd7 	bl	d7c64 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d84b6:	4620      	mov	r0, r4
   d84b8:	4a03      	ldr	r2, [pc, #12]	; (d84c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d84ba:	4904      	ldr	r1, [pc, #16]	; (d84cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d84bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d84c0:	f003 b8fa 	b.w	db6b8 <__aeabi_atexit>
   d84c4:	2003e508 	.word	0x2003e508
   d84c8:	2003e320 	.word	0x2003e320
   d84cc:	000d8473 	.word	0x000d8473

000d84d0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d84d0:	2200      	movs	r2, #0
   d84d2:	6840      	ldr	r0, [r0, #4]
   d84d4:	4611      	mov	r1, r2
   d84d6:	f7ff bee9 	b.w	d82ac <network_ready>

000d84da <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d84da:	2200      	movs	r2, #0
   d84dc:	6840      	ldr	r0, [r0, #4]
   d84de:	4611      	mov	r1, r2
   d84e0:	f7ff bf04 	b.w	d82ec <network_listening>

000d84e4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d84e4:	2200      	movs	r2, #0
   d84e6:	6840      	ldr	r0, [r0, #4]
   d84e8:	4611      	mov	r1, r2
   d84ea:	f7ff bf0f 	b.w	d830c <network_get_listen_timeout>

000d84ee <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d84ee:	6840      	ldr	r0, [r0, #4]
   d84f0:	2200      	movs	r2, #0
   d84f2:	f7ff bf03 	b.w	d82fc <network_set_listen_timeout>

000d84f6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d84f6:	6840      	ldr	r0, [r0, #4]
   d84f8:	2200      	movs	r2, #0
   d84fa:	f081 0101 	eor.w	r1, r1, #1
   d84fe:	f7ff beed 	b.w	d82dc <network_listen>

000d8502 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8502:	2300      	movs	r3, #0
   d8504:	6840      	ldr	r0, [r0, #4]
   d8506:	461a      	mov	r2, r3
   d8508:	4619      	mov	r1, r3
   d850a:	f7ff bed7 	b.w	d82bc <network_on>

000d850e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d850e:	2200      	movs	r2, #0
   d8510:	6840      	ldr	r0, [r0, #4]
   d8512:	4611      	mov	r1, r2
   d8514:	f7ff beba 	b.w	d828c <network_connecting>

000d8518 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8518:	6840      	ldr	r0, [r0, #4]
   d851a:	2200      	movs	r2, #0
   d851c:	2102      	movs	r1, #2
   d851e:	f7ff bebd 	b.w	d829c <network_disconnect>

000d8522 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8522:	2300      	movs	r3, #0
   d8524:	6840      	ldr	r0, [r0, #4]
   d8526:	461a      	mov	r2, r3
   d8528:	f7ff bea8 	b.w	d827c <network_connect>

000d852c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d852c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d852e:	4b1b      	ldr	r3, [pc, #108]	; (d859c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d8530:	6003      	str	r3, [r0, #0]
   d8532:	2500      	movs	r5, #0
   d8534:	460f      	mov	r7, r1
   d8536:	3328      	adds	r3, #40	; 0x28
   d8538:	2618      	movs	r6, #24
   d853a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d853e:	b089      	sub	sp, #36	; 0x24
   d8540:	6043      	str	r3, [r0, #4]
   d8542:	4632      	mov	r2, r6
   d8544:	4629      	mov	r1, r5
   d8546:	4604      	mov	r4, r0
   d8548:	3010      	adds	r0, #16
   d854a:	f003 fdcf 	bl	dc0ec <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d854e:	6878      	ldr	r0, [r7, #4]
   d8550:	462a      	mov	r2, r5
   d8552:	4629      	mov	r1, r5
   d8554:	f7ff feaa 	bl	d82ac <network_ready>
   d8558:	b918      	cbnz	r0, d8562 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d855a:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d855c:	4620      	mov	r0, r4
   d855e:	b009      	add	sp, #36	; 0x24
   d8560:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d8562:	4629      	mov	r1, r5
   d8564:	4632      	mov	r2, r6
   d8566:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d8568:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d856c:	f003 fdbe 	bl	dc0ec <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8570:	a902      	add	r1, sp, #8
   d8572:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d8574:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8578:	f7ff fb1c 	bl	d7bb4 <cellular_signal>
   d857c:	b110      	cbz	r0, d8584 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d857e:	2301      	movs	r3, #1
   d8580:	60a3      	str	r3, [r4, #8]
            return sig;
   d8582:	e7eb      	b.n	d855c <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8584:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d8586:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d8588:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d858a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d858c:	b90b      	cbnz	r3, d8592 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d858e:	2302      	movs	r3, #2
   d8590:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d8592:	a902      	add	r1, sp, #8
   d8594:	4620      	mov	r0, r4
   d8596:	f000 f8ae 	bl	d86f6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d859a:	e7df      	b.n	d855c <_ZN5spark13CellularClass4RSSIEv+0x30>
   d859c:	000dcd58 	.word	0x000dcd58

000d85a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d85a0:	4b08      	ldr	r3, [pc, #32]	; (d85c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d85a2:	b510      	push	{r4, lr}
   d85a4:	2428      	movs	r4, #40	; 0x28
   d85a6:	4622      	mov	r2, r4
   d85a8:	4618      	mov	r0, r3
   d85aa:	2100      	movs	r1, #0
   d85ac:	f003 fd9e 	bl	dc0ec <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d85b0:	4b05      	ldr	r3, [pc, #20]	; (d85c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d85b2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d85b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d85b8:	6042      	str	r2, [r0, #4]
   d85ba:	2204      	movs	r2, #4
   d85bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d85be:	4a03      	ldr	r2, [pc, #12]	; (d85cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d85c0:	601a      	str	r2, [r3, #0]
   d85c2:	bd10      	pop	{r4, pc}
   d85c4:	2003e514 	.word	0x2003e514
   d85c8:	2003e50c 	.word	0x2003e50c
   d85cc:	000dcd1c 	.word	0x000dcd1c

000d85d0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d85d0:	4770      	bx	lr

000d85d2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d85d2:	7d00      	ldrb	r0, [r0, #20]
   d85d4:	4770      	bx	lr

000d85d6 <_ZN14CellularSignalD0Ev>:
   d85d6:	b510      	push	{r4, lr}
   d85d8:	2128      	movs	r1, #40	; 0x28
   d85da:	4604      	mov	r4, r0
   d85dc:	f003 f871 	bl	db6c2 <_ZdlPvj>
   d85e0:	4620      	mov	r0, r4
   d85e2:	bd10      	pop	{r4, pc}

000d85e4 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d85e4:	7d03      	ldrb	r3, [r0, #20]
   d85e6:	b17b      	cbz	r3, d8608 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d85e8:	69c3      	ldr	r3, [r0, #28]
   d85ea:	2b00      	cmp	r3, #0
   d85ec:	db0c      	blt.n	d8608 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d85ee:	ee07 3a90 	vmov	s15, r3
   d85f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8610 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d85f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d85fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d85fe:	eddf 7a05 	vldr	s15, [pc, #20]	; d8614 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8602:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8606:	4770      	bx	lr
    }

    return -1.0f;
   d8608:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d860c:	4770      	bx	lr
   d860e:	bf00      	nop
   d8610:	477fff00 	.word	0x477fff00
   d8614:	42c80000 	.word	0x42c80000

000d8618 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d8618:	7d03      	ldrb	r3, [r0, #20]
   d861a:	b163      	cbz	r3, d8636 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d861c:	6983      	ldr	r3, [r0, #24]
   d861e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8622:	d008      	beq.n	d8636 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d8624:	ee07 3a90 	vmov	s15, r3
   d8628:	ed9f 7a04 	vldr	s14, [pc, #16]	; d863c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d862c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8630:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8634:	4770      	bx	lr
    }

    return 0.0f;
   d8636:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8640 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d863a:	4770      	bx	lr
   d863c:	42c80000 	.word	0x42c80000
   d8640:	00000000 	.word	0x00000000

000d8644 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8644:	7d03      	ldrb	r3, [r0, #20]
   d8646:	b17b      	cbz	r3, d8668 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8648:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d864a:	2b00      	cmp	r3, #0
   d864c:	db0c      	blt.n	d8668 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d864e:	ee07 3a90 	vmov	s15, r3
   d8652:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8670 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d865a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d865e:	eddf 7a05 	vldr	s15, [pc, #20]	; d8674 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8662:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8666:	4770      	bx	lr
    }

    return -1.0f;
   d8668:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d866c:	4770      	bx	lr
   d866e:	bf00      	nop
   d8670:	477fff00 	.word	0x477fff00
   d8674:	42c80000 	.word	0x42c80000

000d8678 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8678:	7d03      	ldrb	r3, [r0, #20]
   d867a:	b163      	cbz	r3, d8696 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d867c:	6a03      	ldr	r3, [r0, #32]
   d867e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8682:	d008      	beq.n	d8696 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8684:	ee07 3a90 	vmov	s15, r3
   d8688:	ed9f 7a04 	vldr	s14, [pc, #16]	; d869c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d868c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8690:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8694:	4770      	bx	lr
    }

    return 0.0f;
   d8696:	ed9f 0a02 	vldr	s0, [pc, #8]	; d86a0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d869a:	4770      	bx	lr
   d869c:	42c80000 	.word	0x42c80000
   d86a0:	00000000 	.word	0x00000000

000d86a4 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d86a4:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d86a6:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d86a8:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d86aa:	da0a      	bge.n	d86c2 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d86ac:	212d      	movs	r1, #45	; 0x2d
   d86ae:	f002 f8c8 	bl	da842 <_ZN5Print5printEc>
            val = -n;
   d86b2:	4261      	negs	r1, r4
            t = print('-');
   d86b4:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d86b6:	220a      	movs	r2, #10
   d86b8:	4630      	mov	r0, r6
   d86ba:	f002 f8d1 	bl	da860 <_ZN5Print11printNumberEmh>
    }
}
   d86be:	4428      	add	r0, r5
   d86c0:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d86c2:	4621      	mov	r1, r4
        size_t t = 0;
   d86c4:	2500      	movs	r5, #0
   d86c6:	e7f6      	b.n	d86b6 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d86c8 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d86c8:	b570      	push	{r4, r5, r6, lr}
   d86ca:	460c      	mov	r4, r1
   d86cc:	4605      	mov	r5, r0
   d86ce:	6881      	ldr	r1, [r0, #8]
   d86d0:	4620      	mov	r0, r4
   d86d2:	f7ff ffe7 	bl	d86a4 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d86d6:	212c      	movs	r1, #44	; 0x2c
   d86d8:	4606      	mov	r6, r0
   d86da:	4620      	mov	r0, r4
   d86dc:	f002 f8b1 	bl	da842 <_ZN5Print5printEc>
   d86e0:	68e9      	ldr	r1, [r5, #12]
   d86e2:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d86e4:	4620      	mov	r0, r4
   d86e6:	f7ff ffdd 	bl	d86a4 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d86ea:	4430      	add	r0, r6
   d86ec:	bd70      	pop	{r4, r5, r6, pc}

000d86ee <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d86ee:	f1a0 0004 	sub.w	r0, r0, #4
   d86f2:	f7ff bfe9 	b.w	d86c8 <_ZNK14CellularSignal7printToER5Print>

000d86f6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d86f6:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d86f8:	460d      	mov	r5, r1
   d86fa:	f100 0410 	add.w	r4, r0, #16
   d86fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8702:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8706:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d870a:	2001      	movs	r0, #1
   d870c:	bd30      	pop	{r4, r5, pc}

000d870e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d870e:	4770      	bx	lr

000d8710 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8710:	2000      	movs	r0, #0
   d8712:	4770      	bx	lr

000d8714 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8714:	b510      	push	{r4, lr}
   d8716:	2110      	movs	r1, #16
   d8718:	4604      	mov	r4, r0
   d871a:	f002 ffd2 	bl	db6c2 <_ZdlPvj>
   d871e:	4620      	mov	r0, r4
   d8720:	bd10      	pop	{r4, pc}

000d8722 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8722:	b508      	push	{r3, lr}
      { delete this; }
   d8724:	f7ff fff6 	bl	d8714 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8728:	bd08      	pop	{r3, pc}

000d872a <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d872a:	b530      	push	{r4, r5, lr}
        type_(type) {
   d872c:	2200      	movs	r2, #0
   d872e:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8732:	6002      	str	r2, [r0, #0]
   d8734:	8084      	strh	r4, [r0, #4]
   d8736:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8738:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d873a:	680c      	ldr	r4, [r1, #0]
   d873c:	8085      	strh	r5, [r0, #4]
   d873e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8740:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8742:	bd30      	pop	{r4, r5, pc}

000d8744 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8744:	b510      	push	{r4, lr}
   d8746:	4604      	mov	r4, r0
    free((void*)msg_);
   d8748:	6800      	ldr	r0, [r0, #0]
   d874a:	f7ff fdff 	bl	d834c <free>
}
   d874e:	4620      	mov	r0, r4
   d8750:	bd10      	pop	{r4, pc}

000d8752 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8752:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8754:	68c4      	ldr	r4, [r0, #12]
   d8756:	b1f4      	cbz	r4, d8796 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8758:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d875a:	2b02      	cmp	r3, #2
   d875c:	d103      	bne.n	d8766 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d875e:	f104 000c 	add.w	r0, r4, #12
   d8762:	f7ff ffef 	bl	d8744 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8766:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8768:	b135      	cbz	r5, d8778 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d876a:	4628      	mov	r0, r5
   d876c:	f7fb fe20 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
   d8770:	2110      	movs	r1, #16
   d8772:	4628      	mov	r0, r5
   d8774:	f002 ffa5 	bl	db6c2 <_ZdlPvj>
   d8778:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d877a:	b135      	cbz	r5, d878a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d877c:	4628      	mov	r0, r5
   d877e:	f7fb fe17 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
   d8782:	2110      	movs	r1, #16
   d8784:	4628      	mov	r0, r5
   d8786:	f002 ff9c 	bl	db6c2 <_ZdlPvj>
   d878a:	4620      	mov	r0, r4
   d878c:	2114      	movs	r1, #20
   d878e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8792:	f002 bf96 	b.w	db6c2 <_ZdlPvj>
   d8796:	bd38      	pop	{r3, r4, r5, pc}

000d8798 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8798:	b510      	push	{r4, lr}
   d879a:	b088      	sub	sp, #32
   d879c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d879e:	4668      	mov	r0, sp
   d87a0:	f002 f917 	bl	da9d2 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d87a4:	4669      	mov	r1, sp
   d87a6:	a804      	add	r0, sp, #16
   d87a8:	f002 f95e 	bl	daa68 <_ZN6StringC1ERKS_>
   d87ac:	a804      	add	r0, sp, #16
   d87ae:	47a0      	blx	r4
   d87b0:	4604      	mov	r4, r0
   d87b2:	a804      	add	r0, sp, #16
   d87b4:	f002 f8c2 	bl	da93c <_ZN6StringD1Ev>
    String p(param);
   d87b8:	4668      	mov	r0, sp
   d87ba:	f002 f8bf 	bl	da93c <_ZN6StringD1Ev>
}
   d87be:	4620      	mov	r0, r4
   d87c0:	b008      	add	sp, #32
   d87c2:	bd10      	pop	{r4, pc}

000d87c4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d87c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d87c6:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d87c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d87cc:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d87ce:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d87d0:	461a      	mov	r2, r3
   d87d2:	4669      	mov	r1, sp
   d87d4:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d87d6:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d87da:	f8ad 4000 	strh.w	r4, [sp]
   d87de:	f7ff fce5 	bl	d81ac <spark_function>
}
   d87e2:	b004      	add	sp, #16
   d87e4:	bd10      	pop	{r4, pc}

000d87e6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d87e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d87e8:	230c      	movs	r3, #12
   d87ea:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d87ee:	6803      	ldr	r3, [r0, #0]
   d87f0:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d87f4:	7a03      	ldrb	r3, [r0, #8]
   d87f6:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d87fa:	6843      	ldr	r3, [r0, #4]
   d87fc:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d87fe:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d8800:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d8802:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8806:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d8808:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d880c:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8810:	f7ff fd2c 	bl	d826c <spark_cloud_disconnect>
}
   d8814:	b005      	add	sp, #20
   d8816:	f85d fb04 	ldr.w	pc, [sp], #4

000d881a <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d881a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d881c:	220c      	movs	r2, #12
   d881e:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   d8822:	6802      	ldr	r2, [r0, #0]
   d8824:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   d8828:	7a02      	ldrb	r2, [r0, #8]
   d882a:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   d882e:	6842      	ldr	r2, [r0, #4]
   d8830:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d8832:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   d8834:	7a42      	ldrb	r2, [r0, #9]
   d8836:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d883a:	4619      	mov	r1, r3
   d883c:	aa01      	add	r2, sp, #4
   d883e:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   d8840:	f8ad 300d 	strh.w	r3, [sp, #13]
   d8844:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d8848:	f7ff fd00 	bl	d824c <spark_set_connection_property>
}
   d884c:	b005      	add	sp, #20
   d884e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8852 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8852:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8854:	460e      	mov	r6, r1
   d8856:	4604      	mov	r4, r0
   d8858:	f856 3b04 	ldr.w	r3, [r6], #4
   d885c:	9300      	str	r3, [sp, #0]
   d885e:	460d      	mov	r5, r1
   d8860:	a801      	add	r0, sp, #4
   d8862:	4631      	mov	r1, r6
   d8864:	f7ff fe0d 	bl	d8482 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8868:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d886a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d886c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d886e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8870:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8872:	2300      	movs	r3, #0
   d8874:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8876:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8878:	f7ff fe0a 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d887c:	4630      	mov	r0, r6
   d887e:	f7ff fe07 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8882:	4628      	mov	r0, r5
   d8884:	2108      	movs	r1, #8
   d8886:	f002 ff1c 	bl	db6c2 <_ZdlPvj>
        return p;
    }
   d888a:	4620      	mov	r0, r4
   d888c:	b002      	add	sp, #8
   d888e:	bd70      	pop	{r4, r5, r6, pc}

000d8890 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d8890:	b513      	push	{r0, r1, r4, lr}
   d8892:	460b      	mov	r3, r1
   d8894:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8896:	e9d0 0100 	ldrd	r0, r1, [r0]
   d889a:	466c      	mov	r4, sp
   d889c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d88a0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d88a4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d88a8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d88ac:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d88b0:	b002      	add	sp, #8
   d88b2:	bd10      	pop	{r4, pc}

000d88b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d88b4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d88b6:	b510      	push	{r4, lr}
      if (_M_empty())
   d88b8:	b90a      	cbnz	r2, d88be <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d88ba:	f002 ff08 	bl	db6ce <_ZSt25__throw_bad_function_callv>
    }
   d88be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d88c2:	68c3      	ldr	r3, [r0, #12]
   d88c4:	4718      	bx	r3

000d88c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d88c6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d88c8:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d88ca:	f100 0110 	add.w	r1, r0, #16
   d88ce:	f7ff fff1 	bl	d88b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d88d2:	bd08      	pop	{r3, pc}

000d88d4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d88d4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d88d6:	b510      	push	{r4, lr}
      if (_M_empty())
   d88d8:	b90a      	cbnz	r2, d88de <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d88da:	f002 fef8 	bl	db6ce <_ZSt25__throw_bad_function_callv>
    }
   d88de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d88e2:	68c3      	ldr	r3, [r0, #12]
   d88e4:	4718      	bx	r3

000d88e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d88e6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d88e8:	6800      	ldr	r0, [r0, #0]
   d88ea:	f100 0110 	add.w	r1, r0, #16
   d88ee:	f7ff fff1 	bl	d88d4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d88f2:	bd08      	pop	{r3, pc}

000d88f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d88f4:	b538      	push	{r3, r4, r5, lr}
   d88f6:	2300      	movs	r3, #0
   d88f8:	4604      	mov	r4, r0
   d88fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d88fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d88fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8900:	f7fb fbc9 	bl	d4096 <_Znwj>
   d8904:	b128      	cbz	r0, d8912 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8906:	2301      	movs	r3, #1
   d8908:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d890c:	4b02      	ldr	r3, [pc, #8]	; (d8918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d890e:	6003      	str	r3, [r0, #0]
   d8910:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8912:	6020      	str	r0, [r4, #0]
	}
   d8914:	4620      	mov	r0, r4
   d8916:	bd38      	pop	{r3, r4, r5, pc}
   d8918:	000dcd8c 	.word	0x000dcd8c

000d891c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d891c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d891e:	2300      	movs	r3, #0
   d8920:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8922:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8924:	4604      	mov	r4, r0
   d8926:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8928:	b12b      	cbz	r3, d8936 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d892a:	2202      	movs	r2, #2
   d892c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d892e:	68eb      	ldr	r3, [r5, #12]
   d8930:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8932:	68ab      	ldr	r3, [r5, #8]
   d8934:	60a3      	str	r3, [r4, #8]
    }
   d8936:	4620      	mov	r0, r4
   d8938:	bd38      	pop	{r3, r4, r5, pc}
	...

000d893c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d893c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d893e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8940:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8942:	4668      	mov	r0, sp
   d8944:	f7ff fef1 	bl	d872a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8948:	f04f 0302 	mov.w	r3, #2
   d894c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8950:	2a00      	cmp	r2, #0
   d8952:	d103      	bne.n	d895c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8954:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8958:	2900      	cmp	r1, #0
   d895a:	d1f7      	bne.n	d894c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d895c:	d125      	bne.n	d89aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d895e:	f104 050c 	add.w	r5, r4, #12
   d8962:	4669      	mov	r1, sp
   d8964:	4628      	mov	r0, r5
   d8966:	f7ff fee0 	bl	d872a <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d896a:	f3bf 8f5b 	dmb	ish
   d896e:	2301      	movs	r3, #1
   d8970:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8972:	2000      	movs	r0, #0
   d8974:	f104 0308 	add.w	r3, r4, #8
   d8978:	f3bf 8f5b 	dmb	ish
   d897c:	e853 6f00 	ldrex	r6, [r3]
   d8980:	e843 0200 	strex	r2, r0, [r3]
   d8984:	2a00      	cmp	r2, #0
   d8986:	d1f9      	bne.n	d897c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8988:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d898c:	b16e      	cbz	r6, d89aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d898e:	f7ff fbb3 	bl	d80f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8992:	b178      	cbz	r0, d89b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8994:	4629      	mov	r1, r5
   d8996:	4630      	mov	r0, r6
   d8998:	f7ff ff8c 	bl	d88b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d899c:	4630      	mov	r0, r6
   d899e:	f7fb fd07 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d89a2:	2110      	movs	r1, #16
   d89a4:	4630      	mov	r0, r6
   d89a6:	f002 fe8c 	bl	db6c2 <_ZdlPvj>
        p_->setError(std::move(error));
   d89aa:	4668      	mov	r0, sp
   d89ac:	f7ff feca 	bl	d8744 <_ZN8particle5ErrorD1Ev>
    }
   d89b0:	b009      	add	sp, #36	; 0x24
   d89b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d89b4:	4631      	mov	r1, r6
   d89b6:	a802      	add	r0, sp, #8
   d89b8:	f7ff ffb0 	bl	d891c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d89bc:	68e0      	ldr	r0, [r4, #12]
   d89be:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d89c2:	b108      	cbz	r0, d89c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d89c4:	f003 fbe8 	bl	dc198 <strdup>
        type_(type) {
   d89c8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d89ca:	2010      	movs	r0, #16
   d89cc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d89d0:	f7fb fb61 	bl	d4096 <_Znwj>
   d89d4:	4605      	mov	r5, r0
   d89d6:	b1e8      	cbz	r0, d8a14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d89d8:	2700      	movs	r7, #0
   d89da:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d89dc:	2018      	movs	r0, #24
   d89de:	f7fb fb5a 	bl	d4096 <_Znwj>
   d89e2:	4604      	mov	r4, r0
   d89e4:	b188      	cbz	r0, d8a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d89e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d89e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d89ea:	a802      	add	r0, sp, #8
   d89ec:	f7ff ff50 	bl	d8890 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d89f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d89f2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d89f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d89f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d89f8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d89fa:	a906      	add	r1, sp, #24
   d89fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d89fe:	60e3      	str	r3, [r4, #12]
   d8a00:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8a04:	9205      	str	r2, [sp, #20]
   d8a06:	f7ff fe90 	bl	d872a <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8a0a:	4b08      	ldr	r3, [pc, #32]	; (d8a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8a0c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8a0e:	4b08      	ldr	r3, [pc, #32]	; (d8a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8a10:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8a12:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8a14:	a806      	add	r0, sp, #24
   d8a16:	f7ff fe95 	bl	d8744 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8a1a:	a802      	add	r0, sp, #8
   d8a1c:	f7fb fcc8 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8a20:	2200      	movs	r2, #0
   d8a22:	4629      	mov	r1, r5
   d8a24:	4803      	ldr	r0, [pc, #12]	; (d8a34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8a26:	f7ff fb6f 	bl	d8108 <application_thread_invoke>
   d8a2a:	e7b7      	b.n	d899c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8a2c:	000d88c7 	.word	0x000d88c7
   d8a30:	000d8b5d 	.word	0x000d8b5d
   d8a34:	000d842b 	.word	0x000d842b

000d8a38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8a3c:	b08a      	sub	sp, #40	; 0x28
   d8a3e:	4605      	mov	r5, r0
   d8a40:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8a44:	460c      	mov	r4, r1
   d8a46:	4617      	mov	r7, r2
   d8a48:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8a4a:	f7ff fbc7 	bl	d81dc <spark_cloud_flag_connected>
   d8a4e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8a50:	4682      	mov	sl, r0
   d8a52:	bb38      	cbnz	r0, d8aa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8a54:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8a58:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8a5a:	a905      	add	r1, sp, #20
   d8a5c:	4630      	mov	r0, r6
   d8a5e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8a62:	f7ff fe62 	bl	d872a <_ZN8particle5ErrorC1EOS0_>
   d8a66:	2014      	movs	r0, #20
   d8a68:	f7fb fb15 	bl	d4096 <_Znwj>
   d8a6c:	4604      	mov	r4, r0
   d8a6e:	b148      	cbz	r0, d8a84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8a70:	2302      	movs	r3, #2
   d8a72:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8a74:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8a76:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8a7a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8a7c:	4631      	mov	r1, r6
   d8a7e:	300c      	adds	r0, #12
   d8a80:	f7ff fe53 	bl	d872a <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8a84:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8a86:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8a88:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8a8c:	f7ff ff32 	bl	d88f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8a90:	4630      	mov	r0, r6
   d8a92:	f7ff fe57 	bl	d8744 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8a96:	a805      	add	r0, sp, #20
   d8a98:	f7ff fe54 	bl	d8744 <_ZN8particle5ErrorD1Ev>
}
   d8a9c:	4628      	mov	r0, r5
   d8a9e:	b00a      	add	sp, #40	; 0x28
   d8aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8aa4:	230c      	movs	r3, #12
   d8aa6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8aaa:	2014      	movs	r0, #20
   d8aac:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8ab0:	9307      	str	r3, [sp, #28]
   d8ab2:	f7fb faf0 	bl	d4096 <_Znwj>
   d8ab6:	4601      	mov	r1, r0
   d8ab8:	b128      	cbz	r0, d8ac6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8aba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8abe:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8ac2:	f880 a001 	strb.w	sl, [r0, #1]
   d8ac6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8ac8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8aca:	f7ff ff13 	bl	d88f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8ace:	4b22      	ldr	r3, [pc, #136]	; (d8b58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8ad0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8ad2:	2008      	movs	r0, #8
   d8ad4:	f7fb fadf 	bl	d4096 <_Znwj>
   d8ad8:	4682      	mov	sl, r0
   d8ada:	b128      	cbz	r0, d8ae8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8adc:	9b03      	ldr	r3, [sp, #12]
   d8ade:	f840 3b04 	str.w	r3, [r0], #4
   d8ae2:	a904      	add	r1, sp, #16
   d8ae4:	f7ff fccd 	bl	d8482 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8ae8:	9600      	str	r6, [sp, #0]
   d8aea:	fa5f f389 	uxtb.w	r3, r9
   d8aee:	4642      	mov	r2, r8
   d8af0:	4639      	mov	r1, r7
   d8af2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8af4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8af8:	f7ff fb80 	bl	d81fc <spark_send_event>
   d8afc:	b9b8      	cbnz	r0, d8b2e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8afe:	9b03      	ldr	r3, [sp, #12]
   d8b00:	785b      	ldrb	r3, [r3, #1]
   d8b02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8b06:	b993      	cbnz	r3, d8b2e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8b08:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8b0c:	a905      	add	r1, sp, #20
   d8b0e:	a803      	add	r0, sp, #12
   d8b10:	9205      	str	r2, [sp, #20]
   d8b12:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8b16:	f7ff ff11 	bl	d893c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8b1a:	a805      	add	r0, sp, #20
   d8b1c:	f7ff fe12 	bl	d8744 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8b20:	a805      	add	r0, sp, #20
   d8b22:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8b24:	f7ff fe95 	bl	d8852 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8b28:	a806      	add	r0, sp, #24
   d8b2a:	f7ff fcb1 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8b2e:	9b03      	ldr	r3, [sp, #12]
   d8b30:	9305      	str	r3, [sp, #20]
   d8b32:	a904      	add	r1, sp, #16
   d8b34:	a806      	add	r0, sp, #24
   d8b36:	f7ff fca4 	bl	d8482 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8b3a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8b3c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8b3e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8b40:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8b42:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8b44:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8b46:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8b48:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8b4a:	f7ff fca1 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b4e:	a804      	add	r0, sp, #16
   d8b50:	f7ff fc9e 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8b54:	e7a2      	b.n	d8a9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8b56:	bf00      	nop
   d8b58:	000d8c21 	.word	0x000d8c21

000d8b5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8b5c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8b60:	4605      	mov	r5, r0
	  switch (__op)
   d8b62:	d007      	beq.n	d8b74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8b64:	2a03      	cmp	r2, #3
   d8b66:	d018      	beq.n	d8b9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8b68:	2a01      	cmp	r2, #1
   d8b6a:	d101      	bne.n	d8b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8b6c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8b6e:	6003      	str	r3, [r0, #0]
	}
   d8b70:	2000      	movs	r0, #0
   d8b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8b74:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8b76:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8b78:	f7fb fa8d 	bl	d4096 <_Znwj>
   d8b7c:	4604      	mov	r4, r0
   d8b7e:	b150      	cbz	r0, d8b96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8b80:	4631      	mov	r1, r6
   d8b82:	f7ff fecb 	bl	d891c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8b86:	6930      	ldr	r0, [r6, #16]
   d8b88:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8b8c:	b108      	cbz	r0, d8b92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8b8e:	f003 fb03 	bl	dc198 <strdup>
        type_(type) {
   d8b92:	6120      	str	r0, [r4, #16]
   d8b94:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8b96:	602c      	str	r4, [r5, #0]
	}
   d8b98:	e7ea      	b.n	d8b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8b9a:	6804      	ldr	r4, [r0, #0]
   d8b9c:	2c00      	cmp	r4, #0
   d8b9e:	d0e7      	beq.n	d8b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8ba0:	f104 0010 	add.w	r0, r4, #16
   d8ba4:	f7ff fdce 	bl	d8744 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8ba8:	4620      	mov	r0, r4
   d8baa:	f7fb fc01 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8bae:	2118      	movs	r1, #24
   d8bb0:	4620      	mov	r0, r4
   d8bb2:	f002 fd86 	bl	db6c2 <_ZdlPvj>
   d8bb6:	e7db      	b.n	d8b70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8bb8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8bba:	2300      	movs	r3, #0
   d8bbc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8bbe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8bc0:	4604      	mov	r4, r0
   d8bc2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8bc4:	b12b      	cbz	r3, d8bd2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8bc6:	2202      	movs	r2, #2
   d8bc8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8bca:	68eb      	ldr	r3, [r5, #12]
   d8bcc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8bce:	68ab      	ldr	r3, [r5, #8]
   d8bd0:	60a3      	str	r3, [r4, #8]
    }
   d8bd2:	4620      	mov	r0, r4
   d8bd4:	bd38      	pop	{r3, r4, r5, pc}

000d8bd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8bd6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8bd8:	b570      	push	{r4, r5, r6, lr}
   d8bda:	4604      	mov	r4, r0
	  switch (__op)
   d8bdc:	d007      	beq.n	d8bee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8bde:	2a03      	cmp	r2, #3
   d8be0:	d012      	beq.n	d8c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8be2:	2a01      	cmp	r2, #1
   d8be4:	d101      	bne.n	d8bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8be6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8be8:	6003      	str	r3, [r0, #0]
	}
   d8bea:	2000      	movs	r0, #0
   d8bec:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8bee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8bf0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8bf2:	f7fb fa50 	bl	d4096 <_Znwj>
   d8bf6:	4605      	mov	r5, r0
   d8bf8:	b120      	cbz	r0, d8c04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8bfa:	4631      	mov	r1, r6
   d8bfc:	f7ff ffdc 	bl	d8bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8c00:	7c33      	ldrb	r3, [r6, #16]
   d8c02:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8c04:	6025      	str	r5, [r4, #0]
	}
   d8c06:	e7f0      	b.n	d8bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8c08:	6804      	ldr	r4, [r0, #0]
   d8c0a:	2c00      	cmp	r4, #0
   d8c0c:	d0ed      	beq.n	d8bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8c0e:	4620      	mov	r0, r4
   d8c10:	f7fb fbce 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8c14:	2114      	movs	r1, #20
   d8c16:	4620      	mov	r0, r4
   d8c18:	f002 fd53 	bl	db6c2 <_ZdlPvj>
   d8c1c:	e7e5      	b.n	d8bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8c20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8c22:	b089      	sub	sp, #36	; 0x24
   d8c24:	4604      	mov	r4, r0
   d8c26:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8c28:	a801      	add	r0, sp, #4
   d8c2a:	4611      	mov	r1, r2
   d8c2c:	f7ff fe11 	bl	d8852 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8c30:	b1a4      	cbz	r4, d8c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8c32:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8c34:	b11d      	cbz	r5, d8c3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8c36:	4628      	mov	r0, r5
   d8c38:	f003 faae 	bl	dc198 <strdup>
   d8c3c:	4605      	mov	r5, r0
   d8c3e:	a801      	add	r0, sp, #4
   d8c40:	a903      	add	r1, sp, #12
        type_(type) {
   d8c42:	9503      	str	r5, [sp, #12]
   d8c44:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8c48:	f7ff fe78 	bl	d893c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8c4c:	a803      	add	r0, sp, #12
   d8c4e:	f7ff fd79 	bl	d8744 <_ZN8particle5ErrorD1Ev>
   d8c52:	a802      	add	r0, sp, #8
   d8c54:	f7ff fc1c 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8c58:	b009      	add	sp, #36	; 0x24
   d8c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8c5c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8c5e:	2301      	movs	r3, #1
   d8c60:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8c64:	2a00      	cmp	r2, #0
   d8c66:	d103      	bne.n	d8c70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8c68:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8c6c:	2900      	cmp	r1, #0
   d8c6e:	d1f7      	bne.n	d8c60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8c70:	d1ef      	bne.n	d8c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8c72:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8c74:	f3bf 8f5b 	dmb	ish
   d8c78:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8c7a:	1d2b      	adds	r3, r5, #4
   d8c7c:	f3bf 8f5b 	dmb	ish
   d8c80:	e853 6f00 	ldrex	r6, [r3]
   d8c84:	e843 4200 	strex	r2, r4, [r3]
   d8c88:	2a00      	cmp	r2, #0
   d8c8a:	d1f9      	bne.n	d8c80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8c8c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8c90:	2e00      	cmp	r6, #0
   d8c92:	d0de      	beq.n	d8c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8c94:	4620      	mov	r0, r4
   d8c96:	f7ff fa2f 	bl	d80f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8c9a:	4607      	mov	r7, r0
   d8c9c:	b160      	cbz	r0, d8cb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8c9e:	f105 010c 	add.w	r1, r5, #12
   d8ca2:	4630      	mov	r0, r6
   d8ca4:	f7ff fe16 	bl	d88d4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8ca8:	4630      	mov	r0, r6
   d8caa:	f7fb fb81 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8cae:	2110      	movs	r1, #16
   d8cb0:	4630      	mov	r0, r6
   d8cb2:	f002 fd06 	bl	db6c2 <_ZdlPvj>
   d8cb6:	e7cc      	b.n	d8c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8cb8:	4631      	mov	r1, r6
   d8cba:	a803      	add	r0, sp, #12
   d8cbc:	f7ff ff7c 	bl	d8bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8cc0:	7b2b      	ldrb	r3, [r5, #12]
   d8cc2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8cc6:	2010      	movs	r0, #16
   d8cc8:	f7fb f9e5 	bl	d4096 <_Znwj>
   d8ccc:	4605      	mov	r5, r0
   d8cce:	b1d0      	cbz	r0, d8d06 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8cd0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8cd2:	2014      	movs	r0, #20
   d8cd4:	f7fb f9df 	bl	d4096 <_Znwj>
   d8cd8:	4604      	mov	r4, r0
   d8cda:	b178      	cbz	r0, d8cfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8cdc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8cde:	4601      	mov	r1, r0
   d8ce0:	a803      	add	r0, sp, #12
   d8ce2:	f7ff fdd5 	bl	d8890 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8ce6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8ce8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8cea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8cec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8cee:	9205      	str	r2, [sp, #20]
   d8cf0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8cf2:	60e3      	str	r3, [r4, #12]
   d8cf4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8cf8:	9206      	str	r2, [sp, #24]
   d8cfa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8cfc:	4b06      	ldr	r3, [pc, #24]	; (d8d18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8cfe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8d00:	4b06      	ldr	r3, [pc, #24]	; (d8d1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8d02:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8d04:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8d06:	a803      	add	r0, sp, #12
   d8d08:	f7fb fb52 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8d0c:	2200      	movs	r2, #0
   d8d0e:	4629      	mov	r1, r5
   d8d10:	4803      	ldr	r0, [pc, #12]	; (d8d20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8d12:	f7ff f9f9 	bl	d8108 <application_thread_invoke>
   d8d16:	e7c7      	b.n	d8ca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8d18:	000d88e7 	.word	0x000d88e7
   d8d1c:	000d8bd7 	.word	0x000d8bd7
   d8d20:	000d842b 	.word	0x000d842b

000d8d24 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8d24:	2200      	movs	r2, #0
   d8d26:	6840      	ldr	r0, [r0, #4]
   d8d28:	4611      	mov	r1, r2
   d8d2a:	f7ff badf 	b.w	d82ec <network_listening>

000d8d2e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8d2e:	2200      	movs	r2, #0
   d8d30:	6840      	ldr	r0, [r0, #4]
   d8d32:	4611      	mov	r1, r2
   d8d34:	f7ff baea 	b.w	d830c <network_get_listen_timeout>

000d8d38 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8d38:	6840      	ldr	r0, [r0, #4]
   d8d3a:	2200      	movs	r2, #0
   d8d3c:	f7ff bade 	b.w	d82fc <network_set_listen_timeout>

000d8d40 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8d40:	6840      	ldr	r0, [r0, #4]
   d8d42:	2200      	movs	r2, #0
   d8d44:	f081 0101 	eor.w	r1, r1, #1
   d8d48:	f7ff bac8 	b.w	d82dc <network_listen>

000d8d4c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8d4c:	2300      	movs	r3, #0
   d8d4e:	6840      	ldr	r0, [r0, #4]
   d8d50:	461a      	mov	r2, r3
   d8d52:	4619      	mov	r1, r3
   d8d54:	f7ff baba 	b.w	d82cc <network_off>

000d8d58 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8d58:	2300      	movs	r3, #0
   d8d5a:	6840      	ldr	r0, [r0, #4]
   d8d5c:	461a      	mov	r2, r3
   d8d5e:	4619      	mov	r1, r3
   d8d60:	f7ff baac 	b.w	d82bc <network_on>

000d8d64 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8d64:	2200      	movs	r2, #0
   d8d66:	6840      	ldr	r0, [r0, #4]
   d8d68:	4611      	mov	r1, r2
   d8d6a:	f7ff ba9f 	b.w	d82ac <network_ready>

000d8d6e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8d6e:	2200      	movs	r2, #0
   d8d70:	6840      	ldr	r0, [r0, #4]
   d8d72:	4611      	mov	r1, r2
   d8d74:	f7ff ba8a 	b.w	d828c <network_connecting>

000d8d78 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8d78:	6840      	ldr	r0, [r0, #4]
   d8d7a:	2200      	movs	r2, #0
   d8d7c:	2102      	movs	r1, #2
   d8d7e:	f7ff ba8d 	b.w	d829c <network_disconnect>

000d8d82 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8d82:	2300      	movs	r3, #0
   d8d84:	6840      	ldr	r0, [r0, #4]
   d8d86:	461a      	mov	r2, r3
   d8d88:	f7ff ba78 	b.w	d827c <network_connect>

000d8d8c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8d8c:	4b02      	ldr	r3, [pc, #8]	; (d8d98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8d8e:	2203      	movs	r2, #3
   d8d90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8d92:	4a02      	ldr	r2, [pc, #8]	; (d8d9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8d94:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8d96:	4770      	bx	lr
   d8d98:	2003e53c 	.word	0x2003e53c
   d8d9c:	000dcda8 	.word	0x000dcda8

000d8da0 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8da0:	6800      	ldr	r0, [r0, #0]
   d8da2:	f000 b95d 	b.w	d9060 <_ZN7TwoWire4lockEv>

000d8da6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8da6:	b510      	push	{r4, lr}
   d8da8:	4604      	mov	r4, r0
      lock_(_lock) {
   d8daa:	6001      	str	r1, [r0, #0]
   d8dac:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d8dae:	b10a      	cbz	r2, d8db4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8db0:	f7ff fff6 	bl	d8da0 <_ZN9FuelGauge4lockEv>
}
   d8db4:	4620      	mov	r0, r4
   d8db6:	bd10      	pop	{r4, pc}

000d8db8 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d8db8:	b513      	push	{r0, r1, r4, lr}
   d8dba:	4604      	mov	r4, r0
   d8dbc:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d8dbe:	f002 fc53 	bl	db668 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d8dc2:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d8dc4:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d8dc6:	4620      	mov	r0, r4
   d8dc8:	f7ff ffed 	bl	d8da6 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d8dcc:	4620      	mov	r0, r4
   d8dce:	b002      	add	sp, #8
   d8dd0:	bd10      	pop	{r4, pc}

000d8dd2 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d8dd2:	6800      	ldr	r0, [r0, #0]
   d8dd4:	f000 b94d 	b.w	d9072 <_ZN7TwoWire6unlockEv>

000d8dd8 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d8dd8:	b510      	push	{r4, lr}
    if (lock_) {
   d8dda:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d8ddc:	4604      	mov	r4, r0
    if (lock_) {
   d8dde:	b10b      	cbz	r3, d8de4 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d8de0:	f7ff fff7 	bl	d8dd2 <_ZN9FuelGauge6unlockEv>
}
   d8de4:	4620      	mov	r0, r4
   d8de6:	bd10      	pop	{r4, pc}

000d8de8 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d8de8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8dec:	4604      	mov	r4, r0
   d8dee:	460d      	mov	r5, r1
   d8df0:	4617      	mov	r7, r2
   d8df2:	461e      	mov	r6, r3
   d8df4:	f7ff ffd4 	bl	d8da0 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8df8:	2336      	movs	r3, #54	; 0x36
   d8dfa:	f88d 3000 	strb.w	r3, [sp]
   d8dfe:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8e00:	6820      	ldr	r0, [r4, #0]
   d8e02:	9301      	str	r3, [sp, #4]
   d8e04:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d8e08:	230a      	movs	r3, #10
   d8e0a:	4669      	mov	r1, sp
   d8e0c:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8e0e:	f88d 8008 	strb.w	r8, [sp, #8]
   d8e12:	f000 f906 	bl	d9022 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d8e16:	6820      	ldr	r0, [r4, #0]
   d8e18:	6803      	ldr	r3, [r0, #0]
   d8e1a:	4629      	mov	r1, r5
   d8e1c:	689b      	ldr	r3, [r3, #8]
   d8e1e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8e20:	6820      	ldr	r0, [r4, #0]
   d8e22:	4641      	mov	r1, r8
   d8e24:	f000 f915 	bl	d9052 <_ZN7TwoWire15endTransmissionEh>
   d8e28:	4605      	mov	r5, r0
   d8e2a:	b140      	cbz	r0, d8e3e <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d8e2c:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d8e30:	4620      	mov	r0, r4
   d8e32:	f7ff ffce 	bl	d8dd2 <_ZN9FuelGauge6unlockEv>
}
   d8e36:	4628      	mov	r0, r5
   d8e38:	b004      	add	sp, #16
   d8e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d8e3e:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d8e40:	6820      	ldr	r0, [r4, #0]
   d8e42:	9301      	str	r3, [sp, #4]
   d8e44:	4669      	mov	r1, sp
   d8e46:	f000 f8b9 	bl	d8fbc <_ZN7TwoWire11requestFromERK16WireTransmission>
   d8e4a:	2802      	cmp	r0, #2
   d8e4c:	d1ee      	bne.n	d8e2c <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d8e4e:	6820      	ldr	r0, [r4, #0]
   d8e50:	6803      	ldr	r3, [r0, #0]
   d8e52:	695b      	ldr	r3, [r3, #20]
   d8e54:	4798      	blx	r3
   d8e56:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d8e58:	6820      	ldr	r0, [r4, #0]
   d8e5a:	6803      	ldr	r3, [r0, #0]
   d8e5c:	695b      	ldr	r3, [r3, #20]
   d8e5e:	4798      	blx	r3
   d8e60:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d8e62:	e7e5      	b.n	d8e30 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d8e64 <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   d8e64:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   d8e66:	460a      	mov	r2, r1
   d8e68:	210c      	movs	r1, #12
   d8e6a:	f7ff bfbd 	b.w	d8de8 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d8e6e <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d8e6e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8e72:	4616      	mov	r6, r2
   d8e74:	4604      	mov	r4, r0
   d8e76:	461d      	mov	r5, r3
   d8e78:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d8e7a:	f7ff ff91 	bl	d8da0 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8e7e:	2336      	movs	r3, #54	; 0x36
   d8e80:	f88d 3000 	strb.w	r3, [sp]
   d8e84:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8e86:	6820      	ldr	r0, [r4, #0]
   d8e88:	9301      	str	r3, [sp, #4]
   d8e8a:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d8e8e:	230a      	movs	r3, #10
   d8e90:	4669      	mov	r1, sp
   d8e92:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8e94:	f88d 8008 	strb.w	r8, [sp, #8]
   d8e98:	f000 f8c3 	bl	d9022 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d8e9c:	6820      	ldr	r0, [r4, #0]
   d8e9e:	6803      	ldr	r3, [r0, #0]
   d8ea0:	4639      	mov	r1, r7
   d8ea2:	689b      	ldr	r3, [r3, #8]
   d8ea4:	4798      	blx	r3
    i2c_.write(MSB);
   d8ea6:	6820      	ldr	r0, [r4, #0]
   d8ea8:	6803      	ldr	r3, [r0, #0]
   d8eaa:	4631      	mov	r1, r6
   d8eac:	689b      	ldr	r3, [r3, #8]
   d8eae:	4798      	blx	r3
    i2c_.write(LSB);
   d8eb0:	6820      	ldr	r0, [r4, #0]
   d8eb2:	6803      	ldr	r3, [r0, #0]
   d8eb4:	4629      	mov	r1, r5
   d8eb6:	689b      	ldr	r3, [r3, #8]
   d8eb8:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8eba:	4641      	mov	r1, r8
   d8ebc:	6820      	ldr	r0, [r4, #0]
   d8ebe:	f000 f8c8 	bl	d9052 <_ZN7TwoWire15endTransmissionEh>
   d8ec2:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d8ec4:	4620      	mov	r0, r4
   d8ec6:	bf0c      	ite	eq
   d8ec8:	2500      	moveq	r5, #0
   d8eca:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d8ece:	f7ff ff80 	bl	d8dd2 <_ZN9FuelGauge6unlockEv>
}
   d8ed2:	4628      	mov	r0, r5
   d8ed4:	b004      	add	sp, #16
   d8ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8eda <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d8eda:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d8edc:	2240      	movs	r2, #64	; 0x40
   d8ede:	2300      	movs	r3, #0
   d8ee0:	2106      	movs	r1, #6
   d8ee2:	f7ff ffc4 	bl	d8e6e <_ZN9FuelGauge13writeRegisterEhhh>
}
   d8ee6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d8eea:	bd08      	pop	{r3, pc}

000d8eec <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   d8eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8eee:	4605      	mov	r5, r0
      { _M_device.lock(); }
   d8ef0:	f7ff ff56 	bl	d8da0 <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   d8ef4:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   d8ef6:	f10d 0207 	add.w	r2, sp, #7
   d8efa:	f10d 0106 	add.w	r1, sp, #6
   d8efe:	4628      	mov	r0, r5
    byte MSB = 0;
   d8f00:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d8f04:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   d8f08:	f7ff ffac 	bl	d8e64 <_ZN9FuelGauge18readConfigRegisterERhS0_>
   d8f0c:	1e04      	subs	r4, r0, #0
   d8f0e:	db0b      	blt.n	d8f28 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   d8f10:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d8f14:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d8f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d8f1c:	210c      	movs	r1, #12
   d8f1e:	4628      	mov	r0, r5
   d8f20:	f7ff ffa5 	bl	d8e6e <_ZN9FuelGauge13writeRegisterEhhh>
   d8f24:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   d8f28:	4628      	mov	r0, r5
   d8f2a:	f7ff ff52 	bl	d8dd2 <_ZN9FuelGauge6unlockEv>
}
   d8f2e:	4620      	mov	r0, r4
   d8f30:	b003      	add	sp, #12
   d8f32:	bd30      	pop	{r4, r5, pc}

000d8f34 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8f34:	4770      	bx	lr

000d8f36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f38:	4606      	mov	r6, r0
   d8f3a:	4615      	mov	r5, r2
   d8f3c:	460c      	mov	r4, r1
   d8f3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8f40:	42bc      	cmp	r4, r7
   d8f42:	d006      	beq.n	d8f52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8f44:	6833      	ldr	r3, [r6, #0]
   d8f46:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8f4a:	689b      	ldr	r3, [r3, #8]
   d8f4c:	4630      	mov	r0, r6
   d8f4e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8f50:	e7f6      	b.n	d8f40 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8f52:	4628      	mov	r0, r5
   d8f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8f56 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8f56:	7c00      	ldrb	r0, [r0, #16]
   d8f58:	2200      	movs	r2, #0
   d8f5a:	f7fe bf6b 	b.w	d7e34 <hal_i2c_write>

000d8f5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8f5e:	7c00      	ldrb	r0, [r0, #16]
   d8f60:	2100      	movs	r1, #0
   d8f62:	f7fe bf6f 	b.w	d7e44 <hal_i2c_available>

000d8f66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8f66:	7c00      	ldrb	r0, [r0, #16]
   d8f68:	2100      	movs	r1, #0
   d8f6a:	f7fe bf73 	b.w	d7e54 <hal_i2c_read>

000d8f6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8f6e:	7c00      	ldrb	r0, [r0, #16]
   d8f70:	2100      	movs	r1, #0
   d8f72:	f7fe bf77 	b.w	d7e64 <hal_i2c_peek>

000d8f76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8f76:	7c00      	ldrb	r0, [r0, #16]
   d8f78:	2100      	movs	r1, #0
   d8f7a:	f7fe bf7b 	b.w	d7e74 <hal_i2c_flush>

000d8f7e <_ZN7TwoWireD0Ev>:
   d8f7e:	b510      	push	{r4, lr}
   d8f80:	2114      	movs	r1, #20
   d8f82:	4604      	mov	r4, r0
   d8f84:	f002 fb9d 	bl	db6c2 <_ZdlPvj>
   d8f88:	4620      	mov	r0, r4
   d8f8a:	bd10      	pop	{r4, pc}

000d8f8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8f8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8f92:	4604      	mov	r4, r0
   d8f94:	4608      	mov	r0, r1
   d8f96:	2100      	movs	r1, #0
   d8f98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8f9c:	4b03      	ldr	r3, [pc, #12]	; (d8fac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8f9e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8fa0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8fa2:	4611      	mov	r1, r2
   d8fa4:	f7fe ff76 	bl	d7e94 <hal_i2c_init>
}
   d8fa8:	4620      	mov	r0, r4
   d8faa:	bd10      	pop	{r4, pc}
   d8fac:	000dcde4 	.word	0x000dcde4

000d8fb0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8fb0:	2300      	movs	r3, #0
   d8fb2:	7c00      	ldrb	r0, [r0, #16]
   d8fb4:	461a      	mov	r2, r3
   d8fb6:	4619      	mov	r1, r3
   d8fb8:	f7fe bf24 	b.w	d7e04 <hal_i2c_begin>

000d8fbc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8fbe:	2200      	movs	r2, #0
   d8fc0:	2314      	movs	r3, #20
   d8fc2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8fc6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8fca:	780b      	ldrb	r3, [r1, #0]
   d8fcc:	f88d 3008 	strb.w	r3, [sp, #8]
   d8fd0:	684b      	ldr	r3, [r1, #4]
   d8fd2:	9303      	str	r3, [sp, #12]
   d8fd4:	68cb      	ldr	r3, [r1, #12]
   d8fd6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8fd8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8fda:	7a0b      	ldrb	r3, [r1, #8]
   d8fdc:	9305      	str	r3, [sp, #20]
   d8fde:	a901      	add	r1, sp, #4
   d8fe0:	f7fe ff70 	bl	d7ec4 <hal_i2c_request_ex>
}
   d8fe4:	b007      	add	sp, #28
   d8fe6:	f85d fb04 	ldr.w	pc, [sp], #4

000d8fea <_ZN7TwoWire11requestFromEhjh>:
{
   d8fea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8fec:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8fee:	f88d 1000 	strb.w	r1, [sp]
   d8ff2:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8ff6:	9103      	str	r1, [sp, #12]
   d8ff8:	bf18      	it	ne
   d8ffa:	2301      	movne	r3, #1
   d8ffc:	4669      	mov	r1, sp
    size_ = size;
   d8ffe:	9201      	str	r2, [sp, #4]
   d9000:	f88d 3008 	strb.w	r3, [sp, #8]
   d9004:	f7ff ffda 	bl	d8fbc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9008:	b005      	add	sp, #20
   d900a:	f85d fb04 	ldr.w	pc, [sp], #4

000d900e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d900e:	2301      	movs	r3, #1
   d9010:	f7ff bfeb 	b.w	d8fea <_ZN7TwoWire11requestFromEhjh>

000d9014 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d9014:	7c00      	ldrb	r0, [r0, #16]
   d9016:	2200      	movs	r2, #0
   d9018:	f7fe befc 	b.w	d7e14 <hal_i2c_begin_transmission>

000d901c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d901c:	b2c9      	uxtb	r1, r1
   d901e:	f7ff bff9 	b.w	d9014 <_ZN7TwoWire17beginTransmissionEh>

000d9022 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d9022:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d9024:	2300      	movs	r3, #0
   d9026:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d902a:	684a      	ldr	r2, [r1, #4]
   d902c:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d902e:	2314      	movs	r3, #20
    };
   d9030:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d9032:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d9036:	780b      	ldrb	r3, [r1, #0]
    };
   d9038:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d903a:	7a0a      	ldrb	r2, [r1, #8]
   d903c:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d903e:	7c00      	ldrb	r0, [r0, #16]
    };
   d9040:	f88d 3008 	strb.w	r3, [sp, #8]
   d9044:	aa01      	add	r2, sp, #4
   d9046:	4619      	mov	r1, r3
   d9048:	f7fe fee4 	bl	d7e14 <hal_i2c_begin_transmission>
}
   d904c:	b007      	add	sp, #28
   d904e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9052 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9052:	7c00      	ldrb	r0, [r0, #16]
   d9054:	2200      	movs	r2, #0
   d9056:	f7fe bee5 	b.w	d7e24 <hal_i2c_end_transmission>

000d905a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d905a:	2101      	movs	r1, #1
   d905c:	f7ff bff9 	b.w	d9052 <_ZN7TwoWire15endTransmissionEh>

000d9060 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d9060:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d9062:	2100      	movs	r1, #0
   d9064:	7c00      	ldrb	r0, [r0, #16]
   d9066:	f7fe ff1d 	bl	d7ea4 <hal_i2c_lock>
}
   d906a:	fab0 f080 	clz	r0, r0
   d906e:	0940      	lsrs	r0, r0, #5
   d9070:	bd08      	pop	{r3, pc}

000d9072 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d9072:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d9074:	2100      	movs	r1, #0
   d9076:	7c00      	ldrb	r0, [r0, #16]
   d9078:	f7fe ff1c 	bl	d7eb4 <hal_i2c_unlock>
}
   d907c:	fab0 f080 	clz	r0, r0
   d9080:	0940      	lsrs	r0, r0, #5
   d9082:	bd08      	pop	{r3, pc}

000d9084 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9084:	4700      	bx	r0
	...

000d9088 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9088:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d908c:	2400      	movs	r4, #0
{
   d908e:	461d      	mov	r5, r3
   d9090:	460f      	mov	r7, r1
   d9092:	4690      	mov	r8, r2
   d9094:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d9096:	f7fe fea5 	bl	d7de4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d909a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d909c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d90a0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d90a4:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d90a8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d90ac:	bfa2      	ittt	ge
   d90ae:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d90b2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d90b6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d90b8:	4907      	ldr	r1, [pc, #28]	; (d90d8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d90ba:	9400      	str	r4, [sp, #0]
   d90bc:	4643      	mov	r3, r8
   d90be:	463a      	mov	r2, r7
   d90c0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d90c2:	bfa8      	it	ge
   d90c4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d90c8:	f7fe fe84 	bl	d7dd4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d90cc:	fab0 f080 	clz	r0, r0
   d90d0:	0940      	lsrs	r0, r0, #5
   d90d2:	b004      	add	sp, #16
   d90d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d90d8:	000d9085 	.word	0x000d9085

000d90dc <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d90dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d90de:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d90e0:	f7fe fe80 	bl	d7de4 <HAL_Interrupts_Detach>
   d90e4:	4605      	mov	r5, r0
   d90e6:	b970      	cbnz	r0, d9106 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   d90e8:	4f08      	ldr	r7, [pc, #32]	; (d910c <_Z15detachInterruptt+0x30>)
   d90ea:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   d90ee:	b146      	cbz	r6, d9102 <_Z15detachInterruptt+0x26>
   d90f0:	4630      	mov	r0, r6
   d90f2:	f7fb f95d 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d90f6:	2110      	movs	r1, #16
   d90f8:	4630      	mov	r0, r6
   d90fa:	f002 fae2 	bl	db6c2 <_ZdlPvj>
        handlers[pin] = nullptr;
   d90fe:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   d9102:	2001      	movs	r0, #1
   d9104:	e000      	b.n	d9108 <_Z15detachInterruptt+0x2c>
        return false;
   d9106:	2000      	movs	r0, #0
    }
    return true;
}
   d9108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d910a:	bf00      	nop
   d910c:	2003e544 	.word	0x2003e544

000d9110 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9110:	4770      	bx	lr

000d9112 <_ZN9IPAddressD0Ev>:
   d9112:	b510      	push	{r4, lr}
   d9114:	2118      	movs	r1, #24
   d9116:	4604      	mov	r4, r0
   d9118:	f002 fad3 	bl	db6c2 <_ZdlPvj>
   d911c:	4620      	mov	r0, r4
   d911e:	bd10      	pop	{r4, pc}

000d9120 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9120:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9122:	7d03      	ldrb	r3, [r0, #20]
   d9124:	2b06      	cmp	r3, #6
{
   d9126:	b08d      	sub	sp, #52	; 0x34
   d9128:	460e      	mov	r6, r1
   d912a:	f100 0704 	add.w	r7, r0, #4
   d912e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d9132:	d012      	beq.n	d915a <_ZNK9IPAddress7printToER5Print+0x3a>
   d9134:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d9138:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d913c:	220a      	movs	r2, #10
   d913e:	4630      	mov	r0, r6
   d9140:	f001 fb8e 	bl	da860 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9144:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9146:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d9148:	d019      	beq.n	d917e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d914a:	2c00      	cmp	r4, #0
   d914c:	d0f4      	beq.n	d9138 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d914e:	212e      	movs	r1, #46	; 0x2e
   d9150:	4630      	mov	r0, r6
   d9152:	f001 fb76 	bl	da842 <_ZN5Print5printEc>
   d9156:	4404      	add	r4, r0
   d9158:	e7ee      	b.n	d9138 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d915a:	232f      	movs	r3, #47	; 0x2f
   d915c:	466a      	mov	r2, sp
   d915e:	4639      	mov	r1, r7
   d9160:	200a      	movs	r0, #10
		buf[0] = 0;
   d9162:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9166:	f7fe feb5 	bl	d7ed4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d916a:	4668      	mov	r0, sp
   d916c:	f003 f831 	bl	dc1d2 <strlen>
   d9170:	6833      	ldr	r3, [r6, #0]
   d9172:	4602      	mov	r2, r0
   d9174:	68db      	ldr	r3, [r3, #12]
   d9176:	4669      	mov	r1, sp
   d9178:	4630      	mov	r0, r6
   d917a:	4798      	blx	r3
   d917c:	4604      	mov	r4, r0
    }
    return n;
}
   d917e:	4620      	mov	r0, r4
   d9180:	b00d      	add	sp, #52	; 0x34
   d9182:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9184 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9184:	b510      	push	{r4, lr}
   d9186:	4b05      	ldr	r3, [pc, #20]	; (d919c <_ZN9IPAddressC1Ev+0x18>)
   d9188:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d918a:	2211      	movs	r2, #17
   d918c:	f840 3b04 	str.w	r3, [r0], #4
   d9190:	2100      	movs	r1, #0
   d9192:	f002 ffab 	bl	dc0ec <memset>
}
   d9196:	4620      	mov	r0, r4
   d9198:	bd10      	pop	{r4, pc}
   d919a:	bf00      	nop
   d919c:	000dce0c 	.word	0x000dce0c

000d91a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d91a0:	4603      	mov	r3, r0
   d91a2:	4a07      	ldr	r2, [pc, #28]	; (d91c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d91a4:	b510      	push	{r4, lr}
   d91a6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d91aa:	f101 0210 	add.w	r2, r1, #16
   d91ae:	f851 4b04 	ldr.w	r4, [r1], #4
   d91b2:	f843 4b04 	str.w	r4, [r3], #4
   d91b6:	4291      	cmp	r1, r2
   d91b8:	d1f9      	bne.n	d91ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d91ba:	780a      	ldrb	r2, [r1, #0]
   d91bc:	701a      	strb	r2, [r3, #0]
}
   d91be:	bd10      	pop	{r4, pc}
   d91c0:	000dce0c 	.word	0x000dce0c

000d91c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d91c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d91c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d91ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d91ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d91d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d91d6:	2304      	movs	r3, #4
   d91d8:	6041      	str	r1, [r0, #4]
   d91da:	7503      	strb	r3, [r0, #20]
}
   d91dc:	bd10      	pop	{r4, pc}

000d91de <_ZN9IPAddressaSEPKh>:
{
   d91de:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d91e0:	78cb      	ldrb	r3, [r1, #3]
   d91e2:	9300      	str	r3, [sp, #0]
   d91e4:	788b      	ldrb	r3, [r1, #2]
   d91e6:	784a      	ldrb	r2, [r1, #1]
   d91e8:	7809      	ldrb	r1, [r1, #0]
   d91ea:	f7ff ffeb 	bl	d91c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d91ee:	b002      	add	sp, #8
   d91f0:	bd10      	pop	{r4, pc}

000d91f2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d91f2:	f100 0310 	add.w	r3, r0, #16
   d91f6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d91f8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d91fc:	2901      	cmp	r1, #1
   d91fe:	4618      	mov	r0, r3
   d9200:	d108      	bne.n	d9214 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d9202:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d9206:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d920a:	3a01      	subs	r2, #1
   d920c:	f103 0310 	add.w	r3, r3, #16
   d9210:	d1f2      	bne.n	d91f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d9212:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d9214:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d9216:	bf04      	itt	eq
   d9218:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d921c:	1852      	addeq	r2, r2, r1
   d921e:	e7f4      	b.n	d920a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d9220 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d9220:	b40e      	push	{r1, r2, r3}
   d9222:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9224:	b088      	sub	sp, #32
   d9226:	af00      	add	r7, sp, #0
   d9228:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d922c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d922e:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9232:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9234:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9236:	462b      	mov	r3, r5
   d9238:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d923a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d923c:	f7ff f8a6 	bl	d838c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9240:	280f      	cmp	r0, #15
   d9242:	687a      	ldr	r2, [r7, #4]
   d9244:	d91a      	bls.n	d927c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d9246:	f100 0308 	add.w	r3, r0, #8
   d924a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d924e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d9250:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9254:	1c41      	adds	r1, r0, #1
   d9256:	462b      	mov	r3, r5
   d9258:	4668      	mov	r0, sp
        va_start(args, fmt);
   d925a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d925c:	f7ff f896 	bl	d838c <vsnprintf>
        if (n > 0) {
   d9260:	1e02      	subs	r2, r0, #0
   d9262:	dd04      	ble.n	d926e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d9264:	6823      	ldr	r3, [r4, #0]
   d9266:	4669      	mov	r1, sp
   d9268:	689b      	ldr	r3, [r3, #8]
   d926a:	4620      	mov	r0, r4
   d926c:	4798      	blx	r3
   d926e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d9270:	3720      	adds	r7, #32
   d9272:	46bd      	mov	sp, r7
   d9274:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9278:	b003      	add	sp, #12
   d927a:	4770      	bx	lr
    } else if (n > 0) {
   d927c:	2800      	cmp	r0, #0
   d927e:	d0f7      	beq.n	d9270 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d9280:	6823      	ldr	r3, [r4, #0]
   d9282:	4602      	mov	r2, r0
   d9284:	689b      	ldr	r3, [r3, #8]
   d9286:	f107 0110 	add.w	r1, r7, #16
   d928a:	4620      	mov	r0, r4
   d928c:	4798      	blx	r3
}
   d928e:	e7ef      	b.n	d9270 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d9290 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9290:	b510      	push	{r4, lr}
          _M_dispose();
   d9292:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9294:	4604      	mov	r4, r0
          _M_dispose();
   d9296:	689b      	ldr	r3, [r3, #8]
   d9298:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d929a:	68a3      	ldr	r3, [r4, #8]
   d929c:	3b01      	subs	r3, #1
   d929e:	60a3      	str	r3, [r4, #8]
   d92a0:	b92b      	cbnz	r3, d92ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d92a2:	6823      	ldr	r3, [r4, #0]
   d92a4:	4620      	mov	r0, r4
   d92a6:	68db      	ldr	r3, [r3, #12]
    }
   d92a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d92ac:	4718      	bx	r3
    }
   d92ae:	bd10      	pop	{r4, pc}

000d92b0 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d92b0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d92b2:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d92b4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d92b8:	689b      	ldr	r3, [r3, #8]
   d92ba:	2201      	movs	r2, #1
   d92bc:	f10d 0107 	add.w	r1, sp, #7
   d92c0:	4798      	blx	r3
}
   d92c2:	b003      	add	sp, #12
   d92c4:	f85d fb04 	ldr.w	pc, [sp], #4

000d92c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d92c8:	b538      	push	{r3, r4, r5, lr}
   d92ca:	680b      	ldr	r3, [r1, #0]
   d92cc:	6003      	str	r3, [r0, #0]
   d92ce:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d92d0:	6843      	ldr	r3, [r0, #4]
   d92d2:	429d      	cmp	r5, r3
    class __shared_ptr
   d92d4:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d92d6:	d00c      	beq.n	d92f2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d92d8:	b115      	cbz	r5, d92e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d92da:	686b      	ldr	r3, [r5, #4]
   d92dc:	3301      	adds	r3, #1
   d92de:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d92e0:	6860      	ldr	r0, [r4, #4]
   d92e2:	b128      	cbz	r0, d92f0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d92e4:	6843      	ldr	r3, [r0, #4]
   d92e6:	3b01      	subs	r3, #1
   d92e8:	6043      	str	r3, [r0, #4]
   d92ea:	b90b      	cbnz	r3, d92f0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d92ec:	f7ff ffd0 	bl	d9290 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d92f0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d92f2:	4620      	mov	r0, r4
   d92f4:	bd38      	pop	{r3, r4, r5, pc}

000d92f6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d92f6:	460b      	mov	r3, r1
   d92f8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d92fa:	2200      	movs	r2, #0
   d92fc:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d92fe:	e9c0 2200 	strd	r2, r2, [r0]
   d9302:	4604      	mov	r4, r0
        t_ = t;
   d9304:	6083      	str	r3, [r0, #8]
    if (t) {
   d9306:	b90b      	cbnz	r3, d930c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d9308:	4620      	mov	r0, r4
   d930a:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d930c:	f7ff ffdc 	bl	d92c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d9310:	e7fa      	b.n	d9308 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d9312 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d9312:	6883      	ldr	r3, [r0, #8]
   d9314:	b1eb      	cbz	r3, d9352 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d9316:	781a      	ldrb	r2, [r3, #0]
   d9318:	2a03      	cmp	r2, #3
   d931a:	d81a      	bhi.n	d9352 <_ZNK5spark9JSONValue4typeEv+0x40>
   d931c:	e8df f002 	tbb	[pc, r2]
   d9320:	1b021704 	.word	0x1b021704
   d9324:	2005      	movs	r0, #5
   d9326:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d9328:	6802      	ldr	r2, [r0, #0]
   d932a:	685b      	ldr	r3, [r3, #4]
   d932c:	6852      	ldr	r2, [r2, #4]
   d932e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d9330:	282d      	cmp	r0, #45	; 0x2d
   d9332:	d012      	beq.n	d935a <_ZNK5spark9JSONValue4typeEv+0x48>
   d9334:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9338:	2b09      	cmp	r3, #9
   d933a:	d90e      	bls.n	d935a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d933c:	2874      	cmp	r0, #116	; 0x74
   d933e:	d00e      	beq.n	d935e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9340:	2866      	cmp	r0, #102	; 0x66
   d9342:	d00c      	beq.n	d935e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d9344:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d9348:	4258      	negs	r0, r3
   d934a:	4158      	adcs	r0, r3
   d934c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d934e:	2006      	movs	r0, #6
   d9350:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d9352:	2000      	movs	r0, #0
   d9354:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d9356:	2004      	movs	r0, #4
   d9358:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d935a:	2003      	movs	r0, #3
   d935c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d935e:	2002      	movs	r0, #2
}
   d9360:	4770      	bx	lr

000d9362 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d9362:	b510      	push	{r4, lr}
   d9364:	4604      	mov	r4, r0
    switch (type()) {
   d9366:	f7ff ffd4 	bl	d9312 <_ZNK5spark9JSONValue4typeEv>
   d936a:	2802      	cmp	r0, #2
   d936c:	d00e      	beq.n	d938c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d936e:	1ec3      	subs	r3, r0, #3
   d9370:	b2db      	uxtb	r3, r3
   d9372:	2b01      	cmp	r3, #1
   d9374:	d814      	bhi.n	d93a0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d9376:	6822      	ldr	r2, [r4, #0]
   d9378:	68a3      	ldr	r3, [r4, #8]
   d937a:	6850      	ldr	r0, [r2, #4]
   d937c:	685b      	ldr	r3, [r3, #4]
}
   d937e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d9382:	220a      	movs	r2, #10
   d9384:	2100      	movs	r1, #0
   d9386:	4418      	add	r0, r3
   d9388:	f002 bfde 	b.w	dc348 <strtol>
        const char* const s = d_->json + t_->start;
   d938c:	6822      	ldr	r2, [r4, #0]
   d938e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d9390:	6852      	ldr	r2, [r2, #4]
   d9392:	685b      	ldr	r3, [r3, #4]
   d9394:	5cd0      	ldrb	r0, [r2, r3]
   d9396:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d939a:	4258      	negs	r0, r3
   d939c:	4158      	adcs	r0, r3
}
   d939e:	bd10      	pop	{r4, pc}
    switch (type()) {
   d93a0:	2000      	movs	r0, #0
   d93a2:	e7fc      	b.n	d939e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d93a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d93a4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d93a6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d93a8:	e9c0 3300 	strd	r3, r3, [r0]
   d93ac:	4604      	mov	r4, r0
        n_(0) {
   d93ae:	480e      	ldr	r0, [pc, #56]	; (d93e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d93b0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d93b4:	b1a9      	cbz	r1, d93e2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d93b6:	780b      	ldrb	r3, [r1, #0]
   d93b8:	2b03      	cmp	r3, #3
   d93ba:	d006      	beq.n	d93ca <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d93bc:	b98b      	cbnz	r3, d93e2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d93be:	6813      	ldr	r3, [r2, #0]
   d93c0:	6858      	ldr	r0, [r3, #4]
   d93c2:	684b      	ldr	r3, [r1, #4]
   d93c4:	5cc3      	ldrb	r3, [r0, r3]
   d93c6:	2b6e      	cmp	r3, #110	; 0x6e
   d93c8:	d007      	beq.n	d93da <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d93ca:	6813      	ldr	r3, [r2, #0]
   d93cc:	684d      	ldr	r5, [r1, #4]
   d93ce:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d93d0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d93d2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d93d4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d93d6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d93d8:	60e3      	str	r3, [r4, #12]
   d93da:	4611      	mov	r1, r2
   d93dc:	4620      	mov	r0, r4
   d93de:	f7ff ff73 	bl	d92c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d93e2:	4620      	mov	r0, r4
   d93e4:	bd38      	pop	{r3, r4, r5, pc}
   d93e6:	bf00      	nop
   d93e8:	000dce75 	.word	0x000dce75

000d93ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d93ec:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d93ee:	2500      	movs	r5, #0
   d93f0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d93f2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d93f6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d93fa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d93fe:	4604      	mov	r4, r0
   d9400:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d9402:	b14b      	cbz	r3, d9418 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d9404:	781a      	ldrb	r2, [r3, #0]
   d9406:	2a01      	cmp	r2, #1
   d9408:	d106      	bne.n	d9418 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d940a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d940e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d9410:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d9412:	6143      	str	r3, [r0, #20]
   d9414:	f7ff ff58 	bl	d92c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9418:	4620      	mov	r0, r4
   d941a:	bd38      	pop	{r3, r4, r5, pc}

000d941c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d941c:	b510      	push	{r4, lr}
    if (!n_) {
   d941e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d9420:	4604      	mov	r4, r0
    if (!n_) {
   d9422:	b163      	cbz	r3, d943e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d9424:	6880      	ldr	r0, [r0, #8]
   d9426:	60e0      	str	r0, [r4, #12]
    --n_;
   d9428:	3b01      	subs	r3, #1
    ++t_;
   d942a:	3010      	adds	r0, #16
   d942c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d942e:	6120      	str	r0, [r4, #16]
    --n_;
   d9430:	6163      	str	r3, [r4, #20]
    if (n_) {
   d9432:	b113      	cbz	r3, d943a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d9434:	f7ff fedd 	bl	d91f2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d9438:	60a0      	str	r0, [r4, #8]
    return true;
   d943a:	2001      	movs	r0, #1
   d943c:	e000      	b.n	d9440 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d943e:	4618      	mov	r0, r3
}
   d9440:	bd10      	pop	{r4, pc}

000d9442 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9442:	b510      	push	{r4, lr}
    write('}');
   d9444:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9446:	4604      	mov	r4, r0
    write('}');
   d9448:	f7ff ff32 	bl	d92b0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d944c:	2301      	movs	r3, #1
   d944e:	7123      	strb	r3, [r4, #4]
}
   d9450:	4620      	mov	r0, r4
   d9452:	bd10      	pop	{r4, pc}

000d9454 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d9454:	b508      	push	{r3, lr}
    switch (state_) {
   d9456:	7903      	ldrb	r3, [r0, #4]
   d9458:	2b01      	cmp	r3, #1
   d945a:	d002      	beq.n	d9462 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d945c:	2b02      	cmp	r3, #2
   d945e:	d004      	beq.n	d946a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d9460:	bd08      	pop	{r3, pc}
        write(',');
   d9462:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d9464:	f7ff ff24 	bl	d92b0 <_ZN5spark10JSONWriter5writeEc>
}
   d9468:	e7fa      	b.n	d9460 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d946a:	213a      	movs	r1, #58	; 0x3a
   d946c:	e7fa      	b.n	d9464 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d946e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d946e:	b510      	push	{r4, lr}
   d9470:	4604      	mov	r4, r0
    writeSeparator();
   d9472:	f7ff ffef 	bl	d9454 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d9476:	4620      	mov	r0, r4
   d9478:	217b      	movs	r1, #123	; 0x7b
   d947a:	f7ff ff19 	bl	d92b0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d947e:	2300      	movs	r3, #0
   d9480:	7123      	strb	r3, [r4, #4]
}
   d9482:	4620      	mov	r0, r4
   d9484:	bd10      	pop	{r4, pc}
	...

000d9488 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d9488:	b513      	push	{r0, r1, r4, lr}
   d948a:	4604      	mov	r4, r0
   d948c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d948e:	f7ff ffe1 	bl	d9454 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9492:	6823      	ldr	r3, [r4, #0]
   d9494:	9a01      	ldr	r2, [sp, #4]
   d9496:	68db      	ldr	r3, [r3, #12]
   d9498:	4903      	ldr	r1, [pc, #12]	; (d94a8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d949a:	4620      	mov	r0, r4
   d949c:	4798      	blx	r3
    state_ = NEXT;
   d949e:	2301      	movs	r3, #1
}
   d94a0:	4620      	mov	r0, r4
    state_ = NEXT;
   d94a2:	7123      	strb	r3, [r4, #4]
}
   d94a4:	b002      	add	sp, #8
   d94a6:	bd10      	pop	{r4, pc}
   d94a8:	000dc9f8 	.word	0x000dc9f8

000d94ac <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d94ac:	b513      	push	{r0, r1, r4, lr}
   d94ae:	4604      	mov	r4, r0
   d94b0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d94b2:	f7ff ffcf 	bl	d9454 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d94b6:	6823      	ldr	r3, [r4, #0]
   d94b8:	9a01      	ldr	r2, [sp, #4]
   d94ba:	68db      	ldr	r3, [r3, #12]
   d94bc:	4903      	ldr	r1, [pc, #12]	; (d94cc <_ZN5spark10JSONWriter5valueEj+0x20>)
   d94be:	4620      	mov	r0, r4
   d94c0:	4798      	blx	r3
    state_ = NEXT;
   d94c2:	2301      	movs	r3, #1
}
   d94c4:	4620      	mov	r0, r4
    state_ = NEXT;
   d94c6:	7123      	strb	r3, [r4, #4]
}
   d94c8:	b002      	add	sp, #8
   d94ca:	bd10      	pop	{r4, pc}
   d94cc:	000dcbe7 	.word	0x000dcbe7

000d94d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d94d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d94d4:	460d      	mov	r5, r1
   d94d6:	4617      	mov	r7, r2
    write('"');
   d94d8:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d94da:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d957c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d94de:	4604      	mov	r4, r0
    const char* const end = str + size;
   d94e0:	442f      	add	r7, r5
    write('"');
   d94e2:	f7ff fee5 	bl	d92b0 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d94e6:	4629      	mov	r1, r5
    while (s != end) {
   d94e8:	42bd      	cmp	r5, r7
   d94ea:	462a      	mov	r2, r5
   d94ec:	d038      	beq.n	d9560 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d94ee:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d94f2:	2e22      	cmp	r6, #34	; 0x22
   d94f4:	d003      	beq.n	d94fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d94f6:	2e5c      	cmp	r6, #92	; 0x5c
   d94f8:	d001      	beq.n	d94fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d94fa:	2e1f      	cmp	r6, #31
   d94fc:	d8f4      	bhi.n	d94e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d94fe:	6823      	ldr	r3, [r4, #0]
   d9500:	1a52      	subs	r2, r2, r1
   d9502:	689b      	ldr	r3, [r3, #8]
   d9504:	4620      	mov	r0, r4
   d9506:	4798      	blx	r3
            write('\\');
   d9508:	215c      	movs	r1, #92	; 0x5c
   d950a:	4620      	mov	r0, r4
   d950c:	f7ff fed0 	bl	d92b0 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d9510:	2e0d      	cmp	r6, #13
   d9512:	d80a      	bhi.n	d952a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d9514:	2e07      	cmp	r6, #7
   d9516:	d91c      	bls.n	d9552 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9518:	f1a6 0308 	sub.w	r3, r6, #8
   d951c:	2b05      	cmp	r3, #5
   d951e:	d818      	bhi.n	d9552 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9520:	e8df f003 	tbb	[pc, r3]
   d9524:	17110f0d 	.word	0x17110f0d
   d9528:	1513      	.short	0x1513
   d952a:	2e22      	cmp	r6, #34	; 0x22
   d952c:	d001      	beq.n	d9532 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d952e:	2e5c      	cmp	r6, #92	; 0x5c
   d9530:	d10f      	bne.n	d9552 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d9532:	4631      	mov	r1, r6
                write('b');
   d9534:	4620      	mov	r0, r4
   d9536:	f7ff febb 	bl	d92b0 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d953a:	4629      	mov	r1, r5
    while (s != end) {
   d953c:	e7d4      	b.n	d94e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d953e:	2162      	movs	r1, #98	; 0x62
   d9540:	e7f8      	b.n	d9534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d9542:	2174      	movs	r1, #116	; 0x74
   d9544:	e7f6      	b.n	d9534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d9546:	216e      	movs	r1, #110	; 0x6e
   d9548:	e7f4      	b.n	d9534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d954a:	2166      	movs	r1, #102	; 0x66
   d954c:	e7f2      	b.n	d9534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d954e:	2172      	movs	r1, #114	; 0x72
   d9550:	e7f0      	b.n	d9534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d9552:	6823      	ldr	r3, [r4, #0]
   d9554:	4632      	mov	r2, r6
   d9556:	68db      	ldr	r3, [r3, #12]
   d9558:	4641      	mov	r1, r8
   d955a:	4620      	mov	r0, r4
   d955c:	4798      	blx	r3
                break;
   d955e:	e7ec      	b.n	d953a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d9560:	428d      	cmp	r5, r1
   d9562:	d004      	beq.n	d956e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d9564:	6823      	ldr	r3, [r4, #0]
   d9566:	1a6a      	subs	r2, r5, r1
   d9568:	689b      	ldr	r3, [r3, #8]
   d956a:	4620      	mov	r0, r4
   d956c:	4798      	blx	r3
    }
    write('"');
   d956e:	2122      	movs	r1, #34	; 0x22
   d9570:	4620      	mov	r0, r4
   d9572:	f7ff fe9d 	bl	d92b0 <_ZN5spark10JSONWriter5writeEc>
}
   d9576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d957a:	bf00      	nop
   d957c:	000dce18 	.word	0x000dce18

000d9580 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d9580:	b513      	push	{r0, r1, r4, lr}
   d9582:	4604      	mov	r4, r0
   d9584:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9588:	f7ff ff64 	bl	d9454 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d958c:	4620      	mov	r0, r4
   d958e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9592:	f7ff ff9d 	bl	d94d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d9596:	2302      	movs	r3, #2
}
   d9598:	4620      	mov	r0, r4
    state_ = VALUE;
   d959a:	7123      	strb	r3, [r4, #4]
}
   d959c:	b002      	add	sp, #8
   d959e:	bd10      	pop	{r4, pc}

000d95a0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d95a0:	b513      	push	{r0, r1, r4, lr}
   d95a2:	4604      	mov	r4, r0
   d95a4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d95a8:	f7ff ff54 	bl	d9454 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d95ac:	4620      	mov	r0, r4
   d95ae:	e9dd 2100 	ldrd	r2, r1, [sp]
   d95b2:	f7ff ff8d 	bl	d94d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d95b6:	2301      	movs	r3, #1
}
   d95b8:	4620      	mov	r0, r4
    state_ = NEXT;
   d95ba:	7123      	strb	r3, [r4, #4]
}
   d95bc:	b002      	add	sp, #8
   d95be:	bd10      	pop	{r4, pc}

000d95c0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d95c0:	6880      	ldr	r0, [r0, #8]
   d95c2:	6803      	ldr	r3, [r0, #0]
   d95c4:	68db      	ldr	r3, [r3, #12]
   d95c6:	4718      	bx	r3

000d95c8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d95c8:	4770      	bx	lr

000d95ca <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d95ca:	4608      	mov	r0, r1
   d95cc:	b111      	cbz	r1, d95d4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d95ce:	680b      	ldr	r3, [r1, #0]
   d95d0:	685b      	ldr	r3, [r3, #4]
   d95d2:	4718      	bx	r3
}
   d95d4:	4770      	bx	lr

000d95d6 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d95d6:	4770      	bx	lr

000d95d8 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d95d8:	4770      	bx	lr

000d95da <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d95da:	4770      	bx	lr

000d95dc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d95dc:	b538      	push	{r3, r4, r5, lr}
   d95de:	4604      	mov	r4, r0
   d95e0:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d95e2:	6800      	ldr	r0, [r0, #0]
   d95e4:	212e      	movs	r1, #46	; 0x2e
   d95e6:	f002 fdba 	bl	dc15e <strchrnul>
    size = s - category;
   d95ea:	6823      	ldr	r3, [r4, #0]
   d95ec:	1ac3      	subs	r3, r0, r3
   d95ee:	602b      	str	r3, [r5, #0]
    if (size) {
   d95f0:	b123      	cbz	r3, d95fc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d95f2:	7803      	ldrb	r3, [r0, #0]
   d95f4:	b103      	cbz	r3, d95f8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d95f6:	3001      	adds	r0, #1
   d95f8:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d95fa:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d95fc:	4618      	mov	r0, r3
   d95fe:	bd38      	pop	{r3, r4, r5, pc}

000d9600 <_ZN5spark16JSONStreamWriterD0Ev>:
   d9600:	b510      	push	{r4, lr}
   d9602:	210c      	movs	r1, #12
   d9604:	4604      	mov	r4, r0
   d9606:	f002 f85c 	bl	db6c2 <_ZdlPvj>
   d960a:	4620      	mov	r0, r4
   d960c:	bd10      	pop	{r4, pc}

000d960e <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d960e:	b510      	push	{r4, lr}
   d9610:	2104      	movs	r1, #4
   d9612:	4604      	mov	r4, r0
   d9614:	f002 f855 	bl	db6c2 <_ZdlPvj>
   d9618:	4620      	mov	r0, r4
   d961a:	bd10      	pop	{r4, pc}

000d961c <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d961c:	b510      	push	{r4, lr}
   d961e:	2104      	movs	r1, #4
   d9620:	4604      	mov	r4, r0
   d9622:	f002 f84e 	bl	db6c2 <_ZdlPvj>
   d9626:	4620      	mov	r0, r4
   d9628:	bd10      	pop	{r4, pc}

000d962a <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d962a:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d962c:	f002 fda1 	bl	dc172 <strcmp>
}
   d9630:	fab0 f080 	clz	r0, r0
   d9634:	0940      	lsrs	r0, r0, #5
   d9636:	bd08      	pop	{r3, pc}

000d9638 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d9638:	b510      	push	{r4, lr}
   d963a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d963c:	f001 fe56 	bl	db2ec <_Z16_fetch_usbserialv>
   d9640:	4284      	cmp	r4, r0
   d9642:	d010      	beq.n	d9666 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d9644:	f001 fdc6 	bl	db1d4 <_Z22__fetch_global_Serial1v>
   d9648:	4284      	cmp	r4, r0
   d964a:	d105      	bne.n	d9658 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d964c:	f001 fdc2 	bl	db1d4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d9650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d9654:	f001 bdbb 	b.w	db1ce <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d9658:	b12c      	cbz	r4, d9666 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d965a:	6823      	ldr	r3, [r4, #0]
   d965c:	4620      	mov	r0, r4
   d965e:	685b      	ldr	r3, [r3, #4]
}
   d9660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9664:	4718      	bx	r3
   d9666:	bd10      	pop	{r4, pc}

000d9668 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d9668:	b513      	push	{r0, r1, r4, lr}
   d966a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d966c:	4608      	mov	r0, r1
   d966e:	9101      	str	r1, [sp, #4]
   d9670:	f002 fdaf 	bl	dc1d2 <strlen>
   d9674:	9901      	ldr	r1, [sp, #4]
   d9676:	4602      	mov	r2, r0
   d9678:	4620      	mov	r0, r4
}
   d967a:	b002      	add	sp, #8
   d967c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d9680:	f7ff bf8e 	b.w	d95a0 <_ZN5spark10JSONWriter5valueEPKcj>

000d9684 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d9684:	b513      	push	{r0, r1, r4, lr}
   d9686:	4604      	mov	r4, r0
    write(str, strlen(str));
   d9688:	4608      	mov	r0, r1
   d968a:	9101      	str	r1, [sp, #4]
   d968c:	f002 fda1 	bl	dc1d2 <strlen>
   d9690:	6823      	ldr	r3, [r4, #0]
   d9692:	9901      	ldr	r1, [sp, #4]
   d9694:	68db      	ldr	r3, [r3, #12]
   d9696:	4602      	mov	r2, r0
   d9698:	4620      	mov	r0, r4
}
   d969a:	b002      	add	sp, #8
   d969c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d96a0:	4718      	bx	r3

000d96a2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d96a2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d96a4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d96a6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d96aa:	68db      	ldr	r3, [r3, #12]
   d96ac:	2201      	movs	r2, #1
   d96ae:	f10d 0107 	add.w	r1, sp, #7
   d96b2:	4798      	blx	r3
}
   d96b4:	b003      	add	sp, #12
   d96b6:	f85d fb04 	ldr.w	pc, [sp], #4

000d96ba <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d96ba:	b40e      	push	{r1, r2, r3}
   d96bc:	b503      	push	{r0, r1, lr}
   d96be:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d96c0:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d96c2:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d96c6:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d96c8:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d96ca:	f001 f8e7 	bl	da89c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d96ce:	b002      	add	sp, #8
   d96d0:	f85d eb04 	ldr.w	lr, [sp], #4
   d96d4:	b003      	add	sp, #12
   d96d6:	4770      	bx	lr

000d96d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d96d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d96dc:	e9d0 9500 	ldrd	r9, r5, [r0]
   d96e0:	f04f 0814 	mov.w	r8, #20
   d96e4:	fb08 f505 	mul.w	r5, r8, r5
   d96e8:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d96ea:	10ab      	asrs	r3, r5, #2
   d96ec:	4d18      	ldr	r5, [pc, #96]	; (d9750 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d96ee:	4617      	mov	r7, r2
   d96f0:	435d      	muls	r5, r3
   d96f2:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d96f4:	2d00      	cmp	r5, #0
   d96f6:	dd23      	ble.n	d9740 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d96f8:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d96fa:	fb08 f006 	mul.w	r0, r8, r6
   d96fe:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d9702:	463a      	mov	r2, r7
   d9704:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d9708:	5820      	ldr	r0, [r4, r0]
   d970a:	9101      	str	r1, [sp, #4]
   d970c:	455f      	cmp	r7, fp
   d970e:	bf28      	it	cs
   d9710:	465a      	movcs	r2, fp
   d9712:	f002 fd66 	bl	dc1e2 <strncmp>
                if (cmp == 0) {
   d9716:	9901      	ldr	r1, [sp, #4]
   d9718:	2301      	movs	r3, #1
   d971a:	b978      	cbnz	r0, d973c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d971c:	455f      	cmp	r7, fp
   d971e:	d103      	bne.n	d9728 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d9720:	9a00      	ldr	r2, [sp, #0]
   d9722:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d9724:	4635      	mov	r5, r6
   d9726:	e7e5      	b.n	d96f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d9728:	bf8c      	ite	hi
   d972a:	2001      	movhi	r0, #1
   d972c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d972e:	2800      	cmp	r0, #0
   d9730:	d0f8      	beq.n	d9724 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d9732:	1bae      	subs	r6, r5, r6
	      ++__first;
   d9734:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d9738:	3e01      	subs	r6, #1
   d973a:	e7f3      	b.n	d9724 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d973c:	0fc0      	lsrs	r0, r0, #31
   d973e:	e7f6      	b.n	d972e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d9740:	eba4 0409 	sub.w	r4, r4, r9
}
   d9744:	4802      	ldr	r0, [pc, #8]	; (d9750 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d9746:	10a4      	asrs	r4, r4, #2
   d9748:	4360      	muls	r0, r4
   d974a:	b003      	add	sp, #12
   d974c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9750:	cccccccd 	.word	0xcccccccd

000d9754 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d9754:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d9756:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d9758:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d975a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d975c:	b30b      	cbz	r3, d97a2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d975e:	b301      	cbz	r1, d97a2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d9760:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d9762:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d9766:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d9768:	a903      	add	r1, sp, #12
   d976a:	a801      	add	r0, sp, #4
   d976c:	f7ff ff36 	bl	d95dc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9770:	4601      	mov	r1, r0
   d9772:	b1b0      	cbz	r0, d97a2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9774:	f10d 030b 	add.w	r3, sp, #11
   d9778:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d977a:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d977e:	4620      	mov	r0, r4
   d9780:	f7ff ffaa 	bl	d96d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d9784:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d9788:	b15b      	cbz	r3, d97a2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d978a:	6824      	ldr	r4, [r4, #0]
   d978c:	2314      	movs	r3, #20
   d978e:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d9792:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d9796:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d979a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d979c:	bfa8      	it	ge
   d979e:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d97a0:	e7e2      	b.n	d9768 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d97a2:	4630      	mov	r0, r6
   d97a4:	b004      	add	sp, #16
   d97a6:	bd70      	pop	{r4, r5, r6, pc}

000d97a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d97a8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d97aa:	4c0a      	ldr	r4, [pc, #40]	; (d97d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d97ac:	7823      	ldrb	r3, [r4, #0]
   d97ae:	f3bf 8f5b 	dmb	ish
   d97b2:	07db      	lsls	r3, r3, #31
   d97b4:	d40b      	bmi.n	d97ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d97b6:	4620      	mov	r0, r4
   d97b8:	f7fa fc7e 	bl	d40b8 <__cxa_guard_acquire>
   d97bc:	b138      	cbz	r0, d97ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d97be:	4620      	mov	r0, r4
   d97c0:	f7fa fc7f 	bl	d40c2 <__cxa_guard_release>
   d97c4:	4a04      	ldr	r2, [pc, #16]	; (d97d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d97c6:	4905      	ldr	r1, [pc, #20]	; (d97dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d97c8:	4805      	ldr	r0, [pc, #20]	; (d97e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d97ca:	f001 ff75 	bl	db6b8 <__aeabi_atexit>
}
   d97ce:	4804      	ldr	r0, [pc, #16]	; (d97e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d97d0:	bd10      	pop	{r4, pc}
   d97d2:	bf00      	nop
   d97d4:	2003e5d8 	.word	0x2003e5d8
   d97d8:	2003e320 	.word	0x2003e320
   d97dc:	000d95d9 	.word	0x000d95d9
   d97e0:	2003e2a4 	.word	0x2003e2a4

000d97e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d97e4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d97e6:	4c0a      	ldr	r4, [pc, #40]	; (d9810 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d97e8:	7823      	ldrb	r3, [r4, #0]
   d97ea:	f3bf 8f5b 	dmb	ish
   d97ee:	07db      	lsls	r3, r3, #31
   d97f0:	d40b      	bmi.n	d980a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d97f2:	4620      	mov	r0, r4
   d97f4:	f7fa fc60 	bl	d40b8 <__cxa_guard_acquire>
   d97f8:	b138      	cbz	r0, d980a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d97fa:	4620      	mov	r0, r4
   d97fc:	f7fa fc61 	bl	d40c2 <__cxa_guard_release>
   d9800:	4a04      	ldr	r2, [pc, #16]	; (d9814 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d9802:	4905      	ldr	r1, [pc, #20]	; (d9818 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d9804:	4805      	ldr	r0, [pc, #20]	; (d981c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d9806:	f001 ff57 	bl	db6b8 <__aeabi_atexit>
    return &factory;
}
   d980a:	4804      	ldr	r0, [pc, #16]	; (d981c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d980c:	bd10      	pop	{r4, pc}
   d980e:	bf00      	nop
   d9810:	2003e5dc 	.word	0x2003e5dc
   d9814:	2003e320 	.word	0x2003e320
   d9818:	000d95d7 	.word	0x000d95d7
   d981c:	2003e2a8 	.word	0x2003e2a8

000d9820 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d9820:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d9822:	2500      	movs	r5, #0
   d9824:	4604      	mov	r4, r0
   d9826:	e9c0 5500 	strd	r5, r5, [r0]
   d982a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d982e:	6085      	str	r5, [r0, #8]
   d9830:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d9832:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d9836:	f7fe fa15 	bl	d7c64 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d983a:	f7ff ffb5 	bl	d97a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d983e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9840:	f7ff ffd0 	bl	d97e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d9844:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9846:	6220      	str	r0, [r4, #32]
}
   d9848:	4620      	mov	r0, r4
   d984a:	bd38      	pop	{r3, r4, r5, pc}

000d984c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d984c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d984e:	4c0b      	ldr	r4, [pc, #44]	; (d987c <_ZN5spark10LogManager8instanceEv+0x30>)
   d9850:	7823      	ldrb	r3, [r4, #0]
   d9852:	f3bf 8f5b 	dmb	ish
   d9856:	07db      	lsls	r3, r3, #31
   d9858:	d40e      	bmi.n	d9878 <_ZN5spark10LogManager8instanceEv+0x2c>
   d985a:	4620      	mov	r0, r4
   d985c:	f7fa fc2c 	bl	d40b8 <__cxa_guard_acquire>
   d9860:	b150      	cbz	r0, d9878 <_ZN5spark10LogManager8instanceEv+0x2c>
   d9862:	4807      	ldr	r0, [pc, #28]	; (d9880 <_ZN5spark10LogManager8instanceEv+0x34>)
   d9864:	f7ff ffdc 	bl	d9820 <_ZN5spark10LogManagerC1Ev>
   d9868:	4620      	mov	r0, r4
   d986a:	f7fa fc2a 	bl	d40c2 <__cxa_guard_release>
   d986e:	4a05      	ldr	r2, [pc, #20]	; (d9884 <_ZN5spark10LogManager8instanceEv+0x38>)
   d9870:	4905      	ldr	r1, [pc, #20]	; (d9888 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d9872:	4803      	ldr	r0, [pc, #12]	; (d9880 <_ZN5spark10LogManager8instanceEv+0x34>)
   d9874:	f001 ff20 	bl	db6b8 <__aeabi_atexit>
    return &mgr;
}
   d9878:	4801      	ldr	r0, [pc, #4]	; (d9880 <_ZN5spark10LogManager8instanceEv+0x34>)
   d987a:	bd10      	pop	{r4, pc}
   d987c:	2003e5d4 	.word	0x2003e5d4
   d9880:	2003e5e4 	.word	0x2003e5e4
   d9884:	2003e320 	.word	0x2003e320
   d9888:	000d9ce1 	.word	0x000d9ce1

000d988c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d988c:	4a02      	ldr	r2, [pc, #8]	; (d9898 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d988e:	4903      	ldr	r1, [pc, #12]	; (d989c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d9890:	4803      	ldr	r0, [pc, #12]	; (d98a0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d9892:	2300      	movs	r3, #0
   d9894:	f7fe bbf6 	b.w	d8084 <log_set_callbacks>
   d9898:	000d9bbd 	.word	0x000d9bbd
   d989c:	000d9b49 	.word	0x000d9b49
   d98a0:	000d9ac9 	.word	0x000d9ac9

000d98a4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d98a4:	2300      	movs	r3, #0
   d98a6:	461a      	mov	r2, r3
   d98a8:	4619      	mov	r1, r3
   d98aa:	4618      	mov	r0, r3
   d98ac:	f7fe bbea 	b.w	d8084 <log_set_callbacks>

000d98b0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d98b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d98b2:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d98b4:	f851 3b04 	ldr.w	r3, [r1], #4
   d98b8:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d98ba:	4604      	mov	r4, r0
   d98bc:	a801      	add	r0, sp, #4
   d98be:	f7fe fde0 	bl	d8482 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d98c2:	466a      	mov	r2, sp
   d98c4:	4629      	mov	r1, r5
   d98c6:	4620      	mov	r0, r4
   d98c8:	f7ff fd15 	bl	d92f6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d98cc:	a801      	add	r0, sp, #4
   d98ce:	f7fe fddf 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d98d2:	4620      	mov	r0, r4
   d98d4:	b003      	add	sp, #12
   d98d6:	bd30      	pop	{r4, r5, pc}

000d98d8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d98d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d98da:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d98dc:	f851 3b04 	ldr.w	r3, [r1], #4
   d98e0:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d98e2:	4604      	mov	r4, r0
   d98e4:	a801      	add	r0, sp, #4
   d98e6:	f7fe fdcc 	bl	d8482 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d98ea:	466a      	mov	r2, sp
   d98ec:	4629      	mov	r1, r5
   d98ee:	4620      	mov	r0, r4
   d98f0:	f7ff fd7c 	bl	d93ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d98f4:	a801      	add	r0, sp, #4
   d98f6:	f7fe fdcb 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d98fa:	4620      	mov	r0, r4
   d98fc:	b003      	add	sp, #12
   d98fe:	bd30      	pop	{r4, r5, pc}

000d9900 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9900:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d9902:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9904:	f851 3b04 	ldr.w	r3, [r1], #4
   d9908:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d990a:	4604      	mov	r4, r0
   d990c:	a801      	add	r0, sp, #4
   d990e:	f7fe fdb8 	bl	d8482 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d9912:	466a      	mov	r2, sp
   d9914:	4629      	mov	r1, r5
   d9916:	4620      	mov	r0, r4
   d9918:	f7ff fd44 	bl	d93a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d991c:	a801      	add	r0, sp, #4
   d991e:	f7fe fdb7 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9922:	4620      	mov	r0, r4
   d9924:	b003      	add	sp, #12
   d9926:	bd30      	pop	{r4, r5, pc}

000d9928 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d9928:	b570      	push	{r4, r5, r6, lr}
   d992a:	b08a      	sub	sp, #40	; 0x28
   d992c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d992e:	4601      	mov	r1, r0
   d9930:	a804      	add	r0, sp, #16
   d9932:	f7ff ffd1 	bl	d98d8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d9936:	4e14      	ldr	r6, [pc, #80]	; (d9988 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d9938:	a804      	add	r0, sp, #16
   d993a:	f7ff fd6f 	bl	d941c <_ZN5spark18JSONObjectIterator4nextEv>
   d993e:	b1e8      	cbz	r0, d997c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d9940:	a904      	add	r1, sp, #16
   d9942:	4668      	mov	r0, sp
   d9944:	f7ff ffdc 	bl	d9900 <_ZNK5spark18JSONObjectIterator4nameEv>
   d9948:	9802      	ldr	r0, [sp, #8]
   d994a:	4631      	mov	r1, r6
   d994c:	f7ff fe6d 	bl	d962a <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d9950:	4604      	mov	r4, r0
   d9952:	b110      	cbz	r0, d995a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d9954:	1e2c      	subs	r4, r5, #0
   d9956:	bf18      	it	ne
   d9958:	2401      	movne	r4, #1
   d995a:	a801      	add	r0, sp, #4
   d995c:	f7fe fd98 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9960:	2c00      	cmp	r4, #0
   d9962:	d0e9      	beq.n	d9938 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d9964:	a904      	add	r1, sp, #16
   d9966:	4668      	mov	r0, sp
   d9968:	f7ff ffa2 	bl	d98b0 <_ZNK5spark18JSONObjectIterator5valueEv>
   d996c:	4668      	mov	r0, sp
   d996e:	f7ff fcf8 	bl	d9362 <_ZNK5spark9JSONValue5toIntEv>
   d9972:	6028      	str	r0, [r5, #0]
   d9974:	a801      	add	r0, sp, #4
   d9976:	f7fe fd8b 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d997a:	e7dd      	b.n	d9938 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d997c:	a805      	add	r0, sp, #20
   d997e:	f7fe fd87 	bl	d8490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9982:	b00a      	add	sp, #40	; 0x28
   d9984:	bd70      	pop	{r4, r5, r6, pc}
   d9986:	bf00      	nop
   d9988:	000dce1e 	.word	0x000dce1e

000d998c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d998c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d998e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d9990:	4620      	mov	r0, r4
   d9992:	4912      	ldr	r1, [pc, #72]	; (d99dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9994:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d9996:	f002 fbec 	bl	dc172 <strcmp>
   d999a:	b948      	cbnz	r0, d99b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d999c:	f001 fca6 	bl	db2ec <_Z16_fetch_usbserialv>
   d99a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d99a4:	f001 fc92 	bl	db2cc <_ZN9USBSerial5beginEl>
        return &Serial;
   d99a8:	f001 fca0 	bl	db2ec <_Z16_fetch_usbserialv>
}
   d99ac:	b003      	add	sp, #12
   d99ae:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d99b0:	490b      	ldr	r1, [pc, #44]	; (d99e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d99b2:	4620      	mov	r0, r4
   d99b4:	f002 fbdd 	bl	dc172 <strcmp>
   d99b8:	b970      	cbnz	r0, d99d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d99ba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d99be:	a901      	add	r1, sp, #4
   d99c0:	4628      	mov	r0, r5
        int baud = 9600;
   d99c2:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d99c4:	f7ff ffb0 	bl	d9928 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d99c8:	f001 fc04 	bl	db1d4 <_Z22__fetch_global_Serial1v>
   d99cc:	9901      	ldr	r1, [sp, #4]
   d99ce:	f001 fbfb 	bl	db1c8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d99d2:	f001 fbff 	bl	db1d4 <_Z22__fetch_global_Serial1v>
   d99d6:	e7e9      	b.n	d99ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d99d8:	2000      	movs	r0, #0
   d99da:	e7e7      	b.n	d99ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d99dc:	000dce23 	.word	0x000dce23
   d99e0:	000dce2a 	.word	0x000dce2a

000d99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d99e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d99e6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d99ea:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d99ec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d99ee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d99f2:	42ae      	cmp	r6, r5
   d99f4:	d005      	beq.n	d9a02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d99f6:	f105 0008 	add.w	r0, r5, #8
   d99fa:	f7ff fff3 	bl	d99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d99fe:	3514      	adds	r5, #20
   d9a00:	e7f7      	b.n	d99f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d9a02:	6820      	ldr	r0, [r4, #0]
   d9a04:	f7fe fca2 	bl	d834c <free>
}
   d9a08:	4620      	mov	r0, r4
   d9a0a:	bd70      	pop	{r4, r5, r6, pc}

000d9a0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9a0c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9a0e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9a12:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9a14:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d9a18:	42ae      	cmp	r6, r5
   d9a1a:	d004      	beq.n	d9a26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d9a1c:	4628      	mov	r0, r5
   d9a1e:	f000 ff8d 	bl	da93c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d9a22:	3510      	adds	r5, #16
   d9a24:	e7f8      	b.n	d9a18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d9a26:	6820      	ldr	r0, [r4, #0]
   d9a28:	f7fe fc90 	bl	d834c <free>
}
   d9a2c:	4620      	mov	r0, r4
   d9a2e:	bd70      	pop	{r4, r5, r6, pc}

000d9a30 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d9a30:	b510      	push	{r4, lr}
   d9a32:	4604      	mov	r4, r0
   d9a34:	300c      	adds	r0, #12
   d9a36:	f7ff ffd5 	bl	d99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9a3a:	4620      	mov	r0, r4
   d9a3c:	f7ff ffe6 	bl	d9a0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9a40:	4620      	mov	r0, r4
   d9a42:	bd10      	pop	{r4, pc}

000d9a44 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d9a44:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d9a46:	4b04      	ldr	r3, [pc, #16]	; (d9a58 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d9a48:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d9a4a:	f840 3b04 	str.w	r3, [r0], #4
   d9a4e:	f7ff ffef 	bl	d9a30 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d9a52:	4620      	mov	r0, r4
   d9a54:	bd10      	pop	{r4, pc}
   d9a56:	bf00      	nop
   d9a58:	000dc8a4 	.word	0x000dc8a4

000d9a5c <_ZN5spark16StreamLogHandlerD0Ev>:
   d9a5c:	b510      	push	{r4, lr}
   d9a5e:	4604      	mov	r4, r0
   d9a60:	f7ff fff0 	bl	d9a44 <_ZN5spark16StreamLogHandlerD1Ev>
   d9a64:	4620      	mov	r0, r4
   d9a66:	2124      	movs	r1, #36	; 0x24
   d9a68:	f001 fe2b 	bl	db6c2 <_ZdlPvj>
   d9a6c:	4620      	mov	r0, r4
   d9a6e:	bd10      	pop	{r4, pc}

000d9a70 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d9a70:	b510      	push	{r4, lr}
   d9a72:	4b03      	ldr	r3, [pc, #12]	; (d9a80 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d9a74:	6003      	str	r3, [r0, #0]
   d9a76:	4604      	mov	r4, r0
   d9a78:	f7ff ffe4 	bl	d9a44 <_ZN5spark16StreamLogHandlerD1Ev>
   d9a7c:	4620      	mov	r0, r4
   d9a7e:	bd10      	pop	{r4, pc}
   d9a80:	000dcec4 	.word	0x000dcec4

000d9a84 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d9a84:	b510      	push	{r4, lr}
   d9a86:	4604      	mov	r4, r0
   d9a88:	f7ff fff2 	bl	d9a70 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d9a8c:	4620      	mov	r0, r4
   d9a8e:	2124      	movs	r1, #36	; 0x24
   d9a90:	f001 fe17 	bl	db6c2 <_ZdlPvj>
   d9a94:	4620      	mov	r0, r4
   d9a96:	bd10      	pop	{r4, pc}

000d9a98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d9a98:	2200      	movs	r2, #0
   d9a9a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d9a9e:	b510      	push	{r4, lr}
        capacity_(0) {
   d9aa0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9aa2:	680c      	ldr	r4, [r1, #0]
   d9aa4:	6004      	str	r4, [r0, #0]
   d9aa6:	684c      	ldr	r4, [r1, #4]
   d9aa8:	6044      	str	r4, [r0, #4]
   d9aaa:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9aac:	600a      	str	r2, [r1, #0]
   d9aae:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9ab0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9ab2:	608a      	str	r2, [r1, #8]
}
   d9ab4:	bd10      	pop	{r4, pc}

000d9ab6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d9ab6:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d9ab8:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d9aba:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9abc:	6818      	ldr	r0, [r3, #0]
   d9abe:	f7fe f8e9 	bl	d7c94 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d9ac2:	4620      	mov	r0, r4
   d9ac4:	bd10      	pop	{r4, pc}
	...

000d9ac8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9acc:	b087      	sub	sp, #28
   d9ace:	4680      	mov	r8, r0
   d9ad0:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d9ad2:	4b1c      	ldr	r3, [pc, #112]	; (d9b44 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d9ad4:	685b      	ldr	r3, [r3, #4]
   d9ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9ada:	4689      	mov	r9, r1
   d9adc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9ade:	b96b      	cbnz	r3, d9afc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d9ae0:	f7ff feb4 	bl	d984c <_ZN5spark10LogManager8instanceEv>
   d9ae4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9ae6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d9aea:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9aec:	9305      	str	r3, [sp, #20]
   d9aee:	f7fe f8c9 	bl	d7c84 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d9af2:	7b23      	ldrb	r3, [r4, #12]
   d9af4:	b12b      	cbz	r3, d9b02 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d9af6:	a805      	add	r0, sp, #20
   d9af8:	f7ff ffdd 	bl	d9ab6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9afc:	b007      	add	sp, #28
   d9afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9b02:	2301      	movs	r3, #1
   d9b04:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d9b06:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d9b0a:	fa5f f989 	uxtb.w	r9, r9
   d9b0e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9b12:	45aa      	cmp	sl, r5
   d9b14:	d012      	beq.n	d9b3c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d9b16:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d9b1a:	4631      	mov	r1, r6
   d9b1c:	1d38      	adds	r0, r7, #4
   d9b1e:	f7ff fe19 	bl	d9754 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9b22:	4581      	cmp	r9, r0
   d9b24:	d3f5      	bcc.n	d9b12 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d9b26:	683b      	ldr	r3, [r7, #0]
   d9b28:	9a03      	ldr	r2, [sp, #12]
   d9b2a:	9200      	str	r2, [sp, #0]
   d9b2c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d9b30:	464a      	mov	r2, r9
   d9b32:	4633      	mov	r3, r6
   d9b34:	4641      	mov	r1, r8
   d9b36:	4638      	mov	r0, r7
   d9b38:	47d8      	blx	fp
   d9b3a:	e7ea      	b.n	d9b12 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d9b3c:	2300      	movs	r3, #0
   d9b3e:	7323      	strb	r3, [r4, #12]
   d9b40:	e7d9      	b.n	d9af6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d9b42:	bf00      	nop
   d9b44:	e000ed00 	.word	0xe000ed00

000d9b48 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9b4c:	469b      	mov	fp, r3
   d9b4e:	4b1a      	ldr	r3, [pc, #104]	; (d9bb8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d9b50:	685b      	ldr	r3, [r3, #4]
   d9b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9b56:	4680      	mov	r8, r0
   d9b58:	4689      	mov	r9, r1
   d9b5a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d9b5c:	b96b      	cbnz	r3, d9b7a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d9b5e:	f7ff fe75 	bl	d984c <_ZN5spark10LogManager8instanceEv>
   d9b62:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9b64:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d9b68:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9b6a:	9301      	str	r3, [sp, #4]
   d9b6c:	f7fe f88a 	bl	d7c84 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d9b70:	7b23      	ldrb	r3, [r4, #12]
   d9b72:	b12b      	cbz	r3, d9b80 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d9b74:	a801      	add	r0, sp, #4
   d9b76:	f7ff ff9e 	bl	d9ab6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9b7a:	b003      	add	sp, #12
   d9b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d9b80:	2301      	movs	r3, #1
   d9b82:	7323      	strb	r3, [r4, #12]
   d9b84:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d9b88:	b2f6      	uxtb	r6, r6
   d9b8a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9b8e:	4555      	cmp	r5, sl
   d9b90:	d00e      	beq.n	d9bb0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d9b92:	f855 7b04 	ldr.w	r7, [r5], #4
   d9b96:	4659      	mov	r1, fp
   d9b98:	1d38      	adds	r0, r7, #4
   d9b9a:	f7ff fddb 	bl	d9754 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9b9e:	4286      	cmp	r6, r0
   d9ba0:	d3f5      	bcc.n	d9b8e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d9ba2:	683b      	ldr	r3, [r7, #0]
   d9ba4:	464a      	mov	r2, r9
   d9ba6:	68db      	ldr	r3, [r3, #12]
   d9ba8:	4641      	mov	r1, r8
   d9baa:	4638      	mov	r0, r7
   d9bac:	4798      	blx	r3
   d9bae:	e7ee      	b.n	d9b8e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d9bb0:	2300      	movs	r3, #0
   d9bb2:	7323      	strb	r3, [r4, #12]
   d9bb4:	e7de      	b.n	d9b74 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d9bb6:	bf00      	nop
   d9bb8:	e000ed00 	.word	0xe000ed00

000d9bbc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d9bbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9bc0:	4b16      	ldr	r3, [pc, #88]	; (d9c1c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d9bc2:	685b      	ldr	r3, [r3, #4]
   d9bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9bc8:	4605      	mov	r5, r0
   d9bca:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d9bcc:	bb1b      	cbnz	r3, d9c16 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d9bce:	f7ff fe3d 	bl	d984c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d9bd2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d9bd6:	4604      	mov	r4, r0
   d9bd8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9bda:	9301      	str	r3, [sp, #4]
   d9bdc:	f7fe f852 	bl	d7c84 <os_mutex_recursive_lock>
   d9be0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d9be4:	2446      	movs	r4, #70	; 0x46
   d9be6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9bea:	45b0      	cmp	r8, r6
   d9bec:	d109      	bne.n	d9c02 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d9bee:	a801      	add	r0, sp, #4
   d9bf0:	f7ff ff61 	bl	d9ab6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d9bf4:	42a5      	cmp	r5, r4
   d9bf6:	bfb4      	ite	lt
   d9bf8:	2000      	movlt	r0, #0
   d9bfa:	2001      	movge	r0, #1
}
   d9bfc:	b002      	add	sp, #8
   d9bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d9c02:	f856 0b04 	ldr.w	r0, [r6], #4
   d9c06:	4639      	mov	r1, r7
   d9c08:	3004      	adds	r0, #4
   d9c0a:	f7ff fda3 	bl	d9754 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d9c0e:	4284      	cmp	r4, r0
   d9c10:	bfa8      	it	ge
   d9c12:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d9c14:	e7e9      	b.n	d9bea <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d9c16:	2000      	movs	r0, #0
   d9c18:	e7f0      	b.n	d9bfc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9c1a:	bf00      	nop
   d9c1c:	e000ed00 	.word	0xe000ed00

000d9c20 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9c20:	b570      	push	{r4, r5, r6, lr}
   d9c22:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9c24:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9c28:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9c2a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d9c2e:	4282      	cmp	r2, r0
   d9c30:	d007      	beq.n	d9c42 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d9c32:	4601      	mov	r1, r0
            if (*p == value) {
   d9c34:	681d      	ldr	r5, [r3, #0]
   d9c36:	f851 6b04 	ldr.w	r6, [r1], #4
   d9c3a:	42ae      	cmp	r6, r5
   d9c3c:	d003      	beq.n	d9c46 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d9c3e:	4608      	mov	r0, r1
   d9c40:	e7f5      	b.n	d9c2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d9c42:	2000      	movs	r0, #0
}
   d9c44:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9c46:	1a52      	subs	r2, r2, r1
   d9c48:	f002 fa36 	bl	dc0b8 <memmove>
    --size_;
   d9c4c:	6863      	ldr	r3, [r4, #4]
   d9c4e:	3b01      	subs	r3, #1
   d9c50:	6063      	str	r3, [r4, #4]
    return true;
   d9c52:	2001      	movs	r0, #1
   d9c54:	e7f6      	b.n	d9c44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d9c56 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9c56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9c58:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9c5c:	4604      	mov	r4, r0
   d9c5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9c60:	9101      	str	r1, [sp, #4]
   d9c62:	9303      	str	r3, [sp, #12]
   d9c64:	f7fe f80e 	bl	d7c84 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9c68:	a901      	add	r1, sp, #4
   d9c6a:	4620      	mov	r0, r4
   d9c6c:	f7ff ffd8 	bl	d9c20 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d9c70:	b118      	cbz	r0, d9c7a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d9c72:	6863      	ldr	r3, [r4, #4]
   d9c74:	b90b      	cbnz	r3, d9c7a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d9c76:	f7ff fe15 	bl	d98a4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9c7a:	a803      	add	r0, sp, #12
   d9c7c:	f7ff ff1b 	bl	d9ab6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9c80:	b004      	add	sp, #16
   d9c82:	bd10      	pop	{r4, pc}

000d9c84 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d9c84:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d9c86:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d9c8a:	2318      	movs	r3, #24
   d9c8c:	4604      	mov	r4, r0
   d9c8e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9c92:	42ae      	cmp	r6, r5
   d9c94:	d015      	beq.n	d9cc2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9c96:	f105 0110 	add.w	r1, r5, #16
   d9c9a:	4620      	mov	r0, r4
   d9c9c:	f7ff ffc0 	bl	d9c20 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9ca0:	6863      	ldr	r3, [r4, #4]
   d9ca2:	b90b      	cbnz	r3, d9ca8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9ca4:	f7ff fdfe 	bl	d98a4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d9ca8:	69e0      	ldr	r0, [r4, #28]
   d9caa:	6929      	ldr	r1, [r5, #16]
   d9cac:	6803      	ldr	r3, [r0, #0]
   d9cae:	68db      	ldr	r3, [r3, #12]
   d9cb0:	4798      	blx	r3
        if (h.stream) {
   d9cb2:	6969      	ldr	r1, [r5, #20]
   d9cb4:	b119      	cbz	r1, d9cbe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d9cb6:	6a20      	ldr	r0, [r4, #32]
   d9cb8:	6803      	ldr	r3, [r0, #0]
   d9cba:	68db      	ldr	r3, [r3, #12]
   d9cbc:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d9cbe:	3518      	adds	r5, #24
   d9cc0:	e7e7      	b.n	d9c92 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d9cc2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9cc6:	2618      	movs	r6, #24
   d9cc8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9ccc:	42ae      	cmp	r6, r5
   d9cce:	d004      	beq.n	d9cda <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9cd0:	4628      	mov	r0, r5
   d9cd2:	f000 fe33 	bl	da93c <_ZN6StringD1Ev>
   d9cd6:	3518      	adds	r5, #24
   d9cd8:	e7f8      	b.n	d9ccc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d9cda:	2300      	movs	r3, #0
   d9cdc:	6163      	str	r3, [r4, #20]
}
   d9cde:	bd70      	pop	{r4, r5, r6, pc}

000d9ce0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9ce2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d9ce4:	f7ff fdde 	bl	d98a4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9ce8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9cec:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9cee:	9301      	str	r3, [sp, #4]
   d9cf0:	f7fd ffc8 	bl	d7c84 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d9cf4:	4620      	mov	r0, r4
   d9cf6:	f7ff ffc5 	bl	d9c84 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d9cfa:	a801      	add	r0, sp, #4
   d9cfc:	f7ff fedb 	bl	d9ab6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9d00:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9d02:	b108      	cbz	r0, d9d08 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9d04:	f7fd ffb6 	bl	d7c74 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9d08:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9d0c:	2618      	movs	r6, #24
   d9d0e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9d12:	42ae      	cmp	r6, r5
   d9d14:	d004      	beq.n	d9d20 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d9d16:	4628      	mov	r0, r5
   d9d18:	f000 fe10 	bl	da93c <_ZN6StringD1Ev>
   d9d1c:	3518      	adds	r5, #24
   d9d1e:	e7f8      	b.n	d9d12 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9d20:	6920      	ldr	r0, [r4, #16]
   d9d22:	f7fe fb13 	bl	d834c <free>
   d9d26:	6820      	ldr	r0, [r4, #0]
   d9d28:	f7fe fb10 	bl	d834c <free>
}
   d9d2c:	4620      	mov	r0, r4
   d9d2e:	b002      	add	sp, #8
   d9d30:	bd70      	pop	{r4, r5, r6, pc}

000d9d32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9d32:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9d36:	4606      	mov	r6, r0
   d9d38:	460c      	mov	r4, r1
   d9d3a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9d3c:	d927      	bls.n	d9d8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9d3e:	4290      	cmp	r0, r2
   d9d40:	d226      	bcs.n	d9d90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9d42:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9d46:	1a6c      	subs	r4, r5, r1
   d9d48:	f1a1 0714 	sub.w	r7, r1, #20
   d9d4c:	4404      	add	r4, r0
        capacity_(0) {
   d9d4e:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d9d50:	42af      	cmp	r7, r5
   d9d52:	d03d      	beq.n	d9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d9d54:	b1a4      	cbz	r4, d9d80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9d56:	682b      	ldr	r3, [r5, #0]
   d9d58:	6023      	str	r3, [r4, #0]
   d9d5a:	88ab      	ldrh	r3, [r5, #4]
   d9d5c:	80a3      	strh	r3, [r4, #4]
   d9d5e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d9d62:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d9d64:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9d68:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9d6a:	68ab      	ldr	r3, [r5, #8]
   d9d6c:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9d6e:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9d70:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9d72:	68ea      	ldr	r2, [r5, #12]
   d9d74:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9d76:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9d78:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9d7a:	692a      	ldr	r2, [r5, #16]
   d9d7c:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9d7e:	612b      	str	r3, [r5, #16]
   d9d80:	f105 0008 	add.w	r0, r5, #8
   d9d84:	f7ff fe2e 	bl	d99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d9d88:	3d14      	subs	r5, #20
   d9d8a:	3c14      	subs	r4, #20
   d9d8c:	e7e0      	b.n	d9d50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d9d8e:	d01f      	beq.n	d9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d9d90:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d9d92:	42ac      	cmp	r4, r5
   d9d94:	d01c      	beq.n	d9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d9d96:	b1a6      	cbz	r6, d9dc2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d9d98:	6823      	ldr	r3, [r4, #0]
   d9d9a:	6033      	str	r3, [r6, #0]
   d9d9c:	88a3      	ldrh	r3, [r4, #4]
   d9d9e:	80b3      	strh	r3, [r6, #4]
   d9da0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d9da4:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d9da6:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d9daa:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9dac:	68a3      	ldr	r3, [r4, #8]
   d9dae:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9db0:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9db2:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9db4:	68e2      	ldr	r2, [r4, #12]
   d9db6:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9db8:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9dba:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9dbc:	6922      	ldr	r2, [r4, #16]
   d9dbe:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9dc0:	6123      	str	r3, [r4, #16]
   d9dc2:	f104 0008 	add.w	r0, r4, #8
   d9dc6:	f7ff fe0d 	bl	d99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d9dca:	3414      	adds	r4, #20
   d9dcc:	3614      	adds	r6, #20
   d9dce:	e7e0      	b.n	d9d92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d9dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9dd2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9dd4:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d9dd8:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9dda:	4604      	mov	r4, r0
   d9ddc:	460e      	mov	r6, r1
   d9dde:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9de0:	db0d      	blt.n	d9dfe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9de2:	3501      	adds	r5, #1
        if (n > 0) {
   d9de4:	2d00      	cmp	r5, #0
   d9de6:	6800      	ldr	r0, [r0, #0]
   d9de8:	dd04      	ble.n	d9df4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9dea:	00a9      	lsls	r1, r5, #2
   d9dec:	f7fe fab6 	bl	d835c <realloc>
            if (!d) {
   d9df0:	b918      	cbnz	r0, d9dfa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d9df4:	f7fe faaa 	bl	d834c <free>
        T* d = nullptr;
   d9df8:	2000      	movs	r0, #0
        data_ = d;
   d9dfa:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9dfc:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9dfe:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9e00:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9e02:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d9e06:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9e08:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9e0c:	1d08      	adds	r0, r1, #4
   d9e0e:	f002 f953 	bl	dc0b8 <memmove>
    new(p) T(std::move(value));
   d9e12:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9e16:	6863      	ldr	r3, [r4, #4]
   d9e18:	3301      	adds	r3, #1
   d9e1a:	6063      	str	r3, [r4, #4]
    return true;
   d9e1c:	2001      	movs	r0, #1
   d9e1e:	e7e8      	b.n	d9df2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d9e20 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9e22:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9e26:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9e28:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9e2a:	9301      	str	r3, [sp, #4]
   d9e2c:	460d      	mov	r5, r1
   d9e2e:	f7fd ff29 	bl	d7c84 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9e32:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9e36:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9e3a:	4283      	cmp	r3, r0
   d9e3c:	461a      	mov	r2, r3
   d9e3e:	d00b      	beq.n	d9e58 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d9e40:	6812      	ldr	r2, [r2, #0]
   d9e42:	42aa      	cmp	r2, r5
   d9e44:	f103 0304 	add.w	r3, r3, #4
   d9e48:	d1f7      	bne.n	d9e3a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9e4a:	a801      	add	r0, sp, #4
   d9e4c:	f7ff fe33 	bl	d9ab6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d9e50:	2500      	movs	r5, #0
}
   d9e52:	4628      	mov	r0, r5
   d9e54:	b003      	add	sp, #12
   d9e56:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d9e58:	462a      	mov	r2, r5
   d9e5a:	4620      	mov	r0, r4
   d9e5c:	f7ff ffb9 	bl	d9dd2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d9e60:	4605      	mov	r5, r0
   d9e62:	2800      	cmp	r0, #0
   d9e64:	d0f1      	beq.n	d9e4a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d9e66:	6863      	ldr	r3, [r4, #4]
   d9e68:	2b01      	cmp	r3, #1
   d9e6a:	d101      	bne.n	d9e70 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d9e6c:	f7ff fd0e 	bl	d988c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9e70:	a801      	add	r0, sp, #4
   d9e72:	f7ff fe20 	bl	d9ab6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d9e76:	e7ec      	b.n	d9e52 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d9e78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d9e78:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9e7c:	4604      	mov	r4, r0
   d9e7e:	460d      	mov	r5, r1
   d9e80:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d9e82:	d914      	bls.n	d9eae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d9e84:	4290      	cmp	r0, r2
   d9e86:	d213      	bcs.n	d9eb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d9e88:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d9e8c:	1a75      	subs	r5, r6, r1
   d9e8e:	f1a1 0710 	sub.w	r7, r1, #16
   d9e92:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d9e94:	42b7      	cmp	r7, r6
   d9e96:	d018      	beq.n	d9eca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d9e98:	b11c      	cbz	r4, d9ea2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d9e9a:	4631      	mov	r1, r6
   d9e9c:	4620      	mov	r0, r4
   d9e9e:	f000 fdc9 	bl	daa34 <_ZN6StringC1EOS_>
                end->~T();
   d9ea2:	4630      	mov	r0, r6
   d9ea4:	f000 fd4a 	bl	da93c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d9ea8:	3e10      	subs	r6, #16
   d9eaa:	3c10      	subs	r4, #16
   d9eac:	e7f2      	b.n	d9e94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d9eae:	d00c      	beq.n	d9eca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d9eb0:	42b5      	cmp	r5, r6
   d9eb2:	d00a      	beq.n	d9eca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d9eb4:	b11c      	cbz	r4, d9ebe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d9eb6:	4629      	mov	r1, r5
   d9eb8:	4620      	mov	r0, r4
   d9eba:	f000 fdbb 	bl	daa34 <_ZN6StringC1EOS_>
                p->~T();
   d9ebe:	4628      	mov	r0, r5
   d9ec0:	f000 fd3c 	bl	da93c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d9ec4:	3510      	adds	r5, #16
   d9ec6:	3410      	adds	r4, #16
   d9ec8:	e7f2      	b.n	d9eb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d9eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9ecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d9ecc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d9ece:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d9ed0:	4605      	mov	r5, r0
        if (n > 0) {
   d9ed2:	dd11      	ble.n	d9ef8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d9ed4:	0130      	lsls	r0, r6, #4
   d9ed6:	f7fe fa31 	bl	d833c <malloc>
            if (!d) {
   d9eda:	4604      	mov	r4, r0
   d9edc:	b158      	cbz	r0, d9ef6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d9ede:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9ee2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d9ee6:	f7ff ffc7 	bl	d9e78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d9eea:	6828      	ldr	r0, [r5, #0]
   d9eec:	f7fe fa2e 	bl	d834c <free>
        data_ = d;
   d9ef0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9ef2:	60ae      	str	r6, [r5, #8]
        return true;
   d9ef4:	2001      	movs	r0, #1
    }
   d9ef6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d9ef8:	2400      	movs	r4, #0
   d9efa:	e7f6      	b.n	d9eea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9efc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9f00:	4691      	mov	r9, r2
   d9f02:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d9f04:	2300      	movs	r3, #0
   d9f06:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d9f08:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9f0c:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9f0e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d9f10:	4299      	cmp	r1, r3
        capacity_(0) {
   d9f12:	e9c0 3300 	strd	r3, r3, [r0]
   d9f16:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9f1e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9f22:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9f24:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d9f26:	dc23      	bgt.n	d9f70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d9f28:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9f2c:	2314      	movs	r3, #20
   d9f2e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d9f32:	42af      	cmp	r7, r5
   d9f34:	d03b      	beq.n	d9fae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9f36:	4629      	mov	r1, r5
   d9f38:	a80d      	add	r0, sp, #52	; 0x34
   d9f3a:	f000 fd7b 	bl	daa34 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9f3e:	a90d      	add	r1, sp, #52	; 0x34
   d9f40:	a811      	add	r0, sp, #68	; 0x44
   d9f42:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d9f44:	f000 fd76 	bl	daa34 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9f48:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9f4c:	4299      	cmp	r1, r3
   d9f4e:	da1b      	bge.n	d9f88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d9f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d9f52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d9f54:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9f58:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d9f5c:	4631      	mov	r1, r6
   d9f5e:	f106 0010 	add.w	r0, r6, #16
   d9f62:	f7ff ff89 	bl	d9e78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9f66:	b9ee      	cbnz	r6, d9fa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d9f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9f6a:	3301      	adds	r3, #1
   d9f6c:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d9f6e:	e011      	b.n	d9f94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d9f70:	a80a      	add	r0, sp, #40	; 0x28
   d9f72:	f7ff ffab 	bl	d9ecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9f76:	2800      	cmp	r0, #0
   d9f78:	d1d6      	bne.n	d9f28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d9f7a:	a80a      	add	r0, sp, #40	; 0x28
   d9f7c:	f7ff fd46 	bl	d9a0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9f80:	4620      	mov	r0, r4
   d9f82:	b017      	add	sp, #92	; 0x5c
   d9f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9f88:	3101      	adds	r1, #1
   d9f8a:	a80a      	add	r0, sp, #40	; 0x28
   d9f8c:	f7ff ff9e 	bl	d9ecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9f90:	2800      	cmp	r0, #0
   d9f92:	d1dd      	bne.n	d9f50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d9f94:	a811      	add	r0, sp, #68	; 0x44
   d9f96:	f000 fcd1 	bl	da93c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d9f9a:	a80d      	add	r0, sp, #52	; 0x34
   d9f9c:	f000 fcce 	bl	da93c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d9fa0:	3514      	adds	r5, #20
   d9fa2:	e7c6      	b.n	d9f32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d9fa4:	a911      	add	r1, sp, #68	; 0x44
   d9fa6:	4630      	mov	r0, r6
   d9fa8:	f000 fd44 	bl	daa34 <_ZN6StringC1EOS_>
   d9fac:	e7dc      	b.n	d9f68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d9fae:	2600      	movs	r6, #0
   d9fb0:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d9fb4:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d9fb6:	4637      	mov	r7, r6
   d9fb8:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d9fbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9fc0:	429e      	cmp	r6, r3
   d9fc2:	f280 8097 	bge.w	da0f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d9fc6:	0133      	lsls	r3, r6, #4
   d9fc8:	58d3      	ldr	r3, [r2, r3]
   d9fca:	9308      	str	r3, [sp, #32]
        if (!category) {
   d9fcc:	b90b      	cbnz	r3, d9fd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d9fce:	3601      	adds	r6, #1
   d9fd0:	e7f4      	b.n	d9fbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d9fd2:	fb0a f306 	mul.w	r3, sl, r6
   d9fd6:	9709      	str	r7, [sp, #36]	; 0x24
   d9fd8:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d9fda:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d9fdc:	a909      	add	r1, sp, #36	; 0x24
   d9fde:	a808      	add	r0, sp, #32
   d9fe0:	f7ff fafc 	bl	d95dc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9fe4:	4683      	mov	fp, r0
   d9fe6:	2800      	cmp	r0, #0
   d9fe8:	d0f1      	beq.n	d9fce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9fea:	4601      	mov	r1, r0
   d9fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d9fee:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9ff2:	f10d 031f 	add.w	r3, sp, #31
   d9ff6:	4628      	mov	r0, r5
   d9ff8:	f7ff fb6e 	bl	d96d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9ffc:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   da000:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da002:	f1b8 0f00 	cmp.w	r8, #0
   da006:	d166      	bne.n	da0d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   da008:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   da00c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   da010:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   da014:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da018:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   da01c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   da020:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da024:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   da028:	4293      	cmp	r3, r2
   da02a:	db1a      	blt.n	da062 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   da02c:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   da030:	f1bb 0f00 	cmp.w	fp, #0
   da034:	dd4a      	ble.n	da0cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   da036:	fb0a f00b 	mul.w	r0, sl, fp
   da03a:	f7fe f97f 	bl	d833c <malloc>
            if (!d) {
   da03e:	9004      	str	r0, [sp, #16]
   da040:	2800      	cmp	r0, #0
   da042:	d045      	beq.n	da0d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   da044:	e9d5 1200 	ldrd	r1, r2, [r5]
   da048:	fb0a 1202 	mla	r2, sl, r2, r1
   da04c:	f7ff fe71 	bl	d9d32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   da050:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   da052:	6828      	ldr	r0, [r5, #0]
   da054:	9304      	str	r3, [sp, #16]
   da056:	f7fe f979 	bl	d834c <free>
        data_ = d;
   da05a:	9b04      	ldr	r3, [sp, #16]
   da05c:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   da05e:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   da062:	9b01      	ldr	r3, [sp, #4]
   da064:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   da068:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   da06a:	fb0a f303 	mul.w	r3, sl, r3
   da06e:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   da072:	f101 0014 	add.w	r0, r1, #20
   da076:	fb0a b202 	mla	r2, sl, r2, fp
   da07a:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   da07c:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   da07e:	f7ff fe58 	bl	d9d32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   da082:	9904      	ldr	r1, [sp, #16]
   da084:	b1a9      	cbz	r1, da0b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   da086:	9b05      	ldr	r3, [sp, #20]
   da088:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da08a:	f84b 2003 	str.w	r2, [fp, r3]
   da08e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   da092:	808b      	strh	r3, [r1, #4]
   da094:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   da098:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   da09a:	e9c1 7702 	strd	r7, r7, [r1, #8]
   da09e:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   da0a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da0a2:	608b      	str	r3, [r1, #8]
   da0a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   da0a6:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   da0a8:	60cb      	str	r3, [r1, #12]
   da0aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   da0ac:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   da0ae:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   da0b0:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   da0b2:	686b      	ldr	r3, [r5, #4]
   da0b4:	3301      	adds	r3, #1
   da0b6:	606b      	str	r3, [r5, #4]
   da0b8:	a813      	add	r0, sp, #76	; 0x4c
   da0ba:	f7ff fc93 	bl	d99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da0be:	f1b8 0f00 	cmp.w	r8, #0
   da0c2:	d008      	beq.n	da0d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   da0c4:	a80d      	add	r0, sp, #52	; 0x34
   da0c6:	f7ff fc8d 	bl	d99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da0ca:	e756      	b.n	d9f7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   da0cc:	4643      	mov	r3, r8
   da0ce:	e7c0      	b.n	da052 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da0d0:	f04f 0801 	mov.w	r8, #1
   da0d4:	e7f0      	b.n	da0b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   da0d6:	9b01      	ldr	r3, [sp, #4]
   da0d8:	682d      	ldr	r5, [r5, #0]
   da0da:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   da0de:	9b08      	ldr	r3, [sp, #32]
   da0e0:	781b      	ldrb	r3, [r3, #0]
   da0e2:	b92b      	cbnz	r3, da0f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   da0e4:	f8d9 3000 	ldr.w	r3, [r9]
   da0e8:	9a02      	ldr	r2, [sp, #8]
   da0ea:	4413      	add	r3, r2
   da0ec:	7c1b      	ldrb	r3, [r3, #16]
   da0ee:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   da0f0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   da0f2:	e773      	b.n	d9fdc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da0f4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da0f6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da0f8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   da0fa:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da0fc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da0fe:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   da100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   da102:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da104:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da106:	60a2      	str	r2, [r4, #8]
   da108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   da10a:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da10c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   da10e:	60e2      	str	r2, [r4, #12]
   da110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   da112:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da114:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   da116:	6122      	str	r2, [r4, #16]
   da118:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   da11a:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   da11c:	9b03      	ldr	r3, [sp, #12]
   da11e:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   da120:	6162      	str	r2, [r4, #20]
   da122:	7623      	strb	r3, [r4, #24]
   da124:	e7ce      	b.n	da0c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000da128 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   da12a:	4605      	mov	r5, r0
   da12c:	4b09      	ldr	r3, [pc, #36]	; (da154 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   da12e:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da132:	4604      	mov	r4, r0
   da134:	460e      	mov	r6, r1
        filter_(level, filters) {
   da136:	a801      	add	r0, sp, #4
   da138:	4611      	mov	r1, r2
   da13a:	f7fb fba1 	bl	d5880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da13e:	aa01      	add	r2, sp, #4
   da140:	4631      	mov	r1, r6
   da142:	4628      	mov	r0, r5
   da144:	f7ff feda 	bl	d9efc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da148:	a801      	add	r0, sp, #4
   da14a:	f7fb f89f 	bl	d528c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   da14e:	4620      	mov	r0, r4
   da150:	b004      	add	sp, #16
   da152:	bd70      	pop	{r4, r5, r6, pc}
   da154:	000dc8a4 	.word	0x000dc8a4

000da158 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   da158:	b5f0      	push	{r4, r5, r6, r7, lr}
   da15a:	460f      	mov	r7, r1
   da15c:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da15e:	4926      	ldr	r1, [pc, #152]	; (da1f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   da160:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da162:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   da164:	4616      	mov	r6, r2
   da166:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da168:	f002 f803 	bl	dc172 <strcmp>
   da16c:	bb00      	cbnz	r0, da1b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   da16e:	b1e4      	cbz	r4, da1aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   da170:	4629      	mov	r1, r5
   da172:	4668      	mov	r0, sp
   da174:	f7ff fc90 	bl	d9a98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da178:	4920      	ldr	r1, [pc, #128]	; (da1fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da17a:	2024      	movs	r0, #36	; 0x24
   da17c:	f001 faa3 	bl	db6c6 <_ZnwjRKSt9nothrow_t>
   da180:	4605      	mov	r5, r0
   da182:	b170      	cbz	r0, da1a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da184:	4669      	mov	r1, sp
   da186:	a803      	add	r0, sp, #12
   da188:	f7fb fb7a 	bl	d5880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da18c:	aa03      	add	r2, sp, #12
   da18e:	4631      	mov	r1, r6
   da190:	4628      	mov	r0, r5
   da192:	f7ff ffc9 	bl	da128 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da196:	a803      	add	r0, sp, #12
   da198:	f7fb f878 	bl	d528c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   da19c:	4b18      	ldr	r3, [pc, #96]	; (da200 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   da19e:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   da1a0:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da1a2:	4668      	mov	r0, sp
   da1a4:	f7fb f872 	bl	d528c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da1a8:	462c      	mov	r4, r5
}
   da1aa:	4620      	mov	r0, r4
   da1ac:	b007      	add	sp, #28
   da1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   da1b0:	4914      	ldr	r1, [pc, #80]	; (da204 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   da1b2:	4638      	mov	r0, r7
   da1b4:	f001 ffdd 	bl	dc172 <strcmp>
   da1b8:	b9e0      	cbnz	r0, da1f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   da1ba:	2c00      	cmp	r4, #0
   da1bc:	d0f5      	beq.n	da1aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da1be:	4629      	mov	r1, r5
   da1c0:	4668      	mov	r0, sp
   da1c2:	f7ff fc69 	bl	d9a98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da1c6:	490d      	ldr	r1, [pc, #52]	; (da1fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da1c8:	2024      	movs	r0, #36	; 0x24
   da1ca:	f001 fa7c 	bl	db6c6 <_ZnwjRKSt9nothrow_t>
   da1ce:	4605      	mov	r5, r0
   da1d0:	2800      	cmp	r0, #0
   da1d2:	d0e6      	beq.n	da1a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da1d4:	4669      	mov	r1, sp
   da1d6:	a803      	add	r0, sp, #12
   da1d8:	f7fb fb52 	bl	d5880 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da1dc:	aa03      	add	r2, sp, #12
   da1de:	4631      	mov	r1, r6
   da1e0:	4628      	mov	r0, r5
   da1e2:	f7ff ffa1 	bl	da128 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da1e6:	a803      	add	r0, sp, #12
   da1e8:	f7fb f850 	bl	d528c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da1ec:	4b06      	ldr	r3, [pc, #24]	; (da208 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   da1ee:	602b      	str	r3, [r5, #0]
   da1f0:	622c      	str	r4, [r5, #32]
}
   da1f2:	e7d6      	b.n	da1a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   da1f4:	2400      	movs	r4, #0
   da1f6:	e7d8      	b.n	da1aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   da1f8:	000dce32 	.word	0x000dce32
   da1fc:	000dcff8 	.word	0x000dcff8
   da200:	000dcec4 	.word	0x000dcec4
   da204:	000dce36 	.word	0x000dce36
   da208:	000dceac 	.word	0x000dceac

000da20c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   da20c:	4b01      	ldr	r3, [pc, #4]	; (da214 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da20e:	4a02      	ldr	r2, [pc, #8]	; (da218 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da210:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   da212:	4770      	bx	lr
   da214:	2003e5e0 	.word	0x2003e5e0
   da218:	000dce47 	.word	0x000dce47

000da21c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da220:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   da222:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da226:	4604      	mov	r4, r0
   da228:	460e      	mov	r6, r1
   da22a:	4617      	mov	r7, r2
   da22c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   da22e:	f001 f85d 	bl	db2ec <_Z16_fetch_usbserialv>
   da232:	4581      	cmp	r9, r0
   da234:	d04c      	beq.n	da2d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   da236:	792b      	ldrb	r3, [r5, #4]
   da238:	0719      	lsls	r1, r3, #28
   da23a:	d504      	bpl.n	da246 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   da23c:	696a      	ldr	r2, [r5, #20]
   da23e:	4954      	ldr	r1, [pc, #336]	; (da390 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   da240:	4620      	mov	r0, r4
   da242:	f7ff fa3a 	bl	d96ba <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   da246:	f1b8 0f00 	cmp.w	r8, #0
   da24a:	d00d      	beq.n	da268 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   da24c:	215b      	movs	r1, #91	; 0x5b
   da24e:	4620      	mov	r0, r4
   da250:	f7ff fa27 	bl	d96a2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   da254:	4641      	mov	r1, r8
   da256:	4620      	mov	r0, r4
   da258:	f7ff fa14 	bl	d9684 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   da25c:	6823      	ldr	r3, [r4, #0]
   da25e:	494d      	ldr	r1, [pc, #308]	; (da394 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   da260:	68db      	ldr	r3, [r3, #12]
   da262:	2202      	movs	r2, #2
   da264:	4620      	mov	r0, r4
   da266:	4798      	blx	r3
    if (attr.has_file) {
   da268:	792b      	ldrb	r3, [r5, #4]
   da26a:	07da      	lsls	r2, r3, #31
   da26c:	d523      	bpl.n	da2b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   da26e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   da272:	212f      	movs	r1, #47	; 0x2f
   da274:	4640      	mov	r0, r8
   da276:	f001 ffd9 	bl	dc22c <strrchr>
    if (s1) {
   da27a:	b108      	cbz	r0, da280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   da27c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   da280:	4641      	mov	r1, r8
   da282:	4620      	mov	r0, r4
   da284:	f7ff f9fe 	bl	d9684 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   da288:	792b      	ldrb	r3, [r5, #4]
   da28a:	079b      	lsls	r3, r3, #30
   da28c:	d508      	bpl.n	da2a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   da28e:	213a      	movs	r1, #58	; 0x3a
   da290:	4620      	mov	r0, r4
   da292:	f7ff fa06 	bl	d96a2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   da296:	68ea      	ldr	r2, [r5, #12]
   da298:	493f      	ldr	r1, [pc, #252]	; (da398 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   da29a:	4620      	mov	r0, r4
   da29c:	f7ff fa0d 	bl	d96ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   da2a0:	792a      	ldrb	r2, [r5, #4]
   da2a2:	6823      	ldr	r3, [r4, #0]
   da2a4:	f012 0f04 	tst.w	r2, #4
   da2a8:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   da2aa:	bf14      	ite	ne
   da2ac:	493b      	ldrne	r1, [pc, #236]	; (da39c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   da2ae:	493c      	ldreq	r1, [pc, #240]	; (da3a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   da2b0:	2202      	movs	r2, #2
            write(": ", 2);
   da2b2:	4620      	mov	r0, r4
   da2b4:	4798      	blx	r3
    if (attr.has_function) {
   da2b6:	792b      	ldrb	r3, [r5, #4]
   da2b8:	0758      	lsls	r0, r3, #29
   da2ba:	d51d      	bpl.n	da2f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da2bc:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da2be:	460b      	mov	r3, r1
   da2c0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   da2c2:	f813 0b01 	ldrb.w	r0, [r3], #1
   da2c6:	b160      	cbz	r0, da2e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   da2c8:	2820      	cmp	r0, #32
   da2ca:	d108      	bne.n	da2de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   da2cc:	4619      	mov	r1, r3
   da2ce:	e7f7      	b.n	da2c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   da2d0:	4834      	ldr	r0, [pc, #208]	; (da3a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   da2d2:	f000 f966 	bl	da5a2 <_ZN5spark12NetworkClass9listeningEv>
   da2d6:	2800      	cmp	r0, #0
   da2d8:	d0ad      	beq.n	da236 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   da2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   da2de:	2828      	cmp	r0, #40	; 0x28
   da2e0:	d1ee      	bne.n	da2c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   da2e2:	6823      	ldr	r3, [r4, #0]
   da2e4:	1a52      	subs	r2, r2, r1
   da2e6:	68db      	ldr	r3, [r3, #12]
   da2e8:	4620      	mov	r0, r4
   da2ea:	4798      	blx	r3
        write("(): ", 4);
   da2ec:	6823      	ldr	r3, [r4, #0]
   da2ee:	492e      	ldr	r1, [pc, #184]	; (da3a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   da2f0:	68db      	ldr	r3, [r3, #12]
   da2f2:	2204      	movs	r2, #4
   da2f4:	4620      	mov	r0, r4
   da2f6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   da2f8:	2100      	movs	r1, #0
   da2fa:	4638      	mov	r0, r7
   da2fc:	f7fd feba 	bl	d8074 <log_level_name>
   da300:	4601      	mov	r1, r0
    write(s);
   da302:	4620      	mov	r0, r4
   da304:	f7ff f9be 	bl	d9684 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   da308:	6823      	ldr	r3, [r4, #0]
   da30a:	4925      	ldr	r1, [pc, #148]	; (da3a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   da30c:	68db      	ldr	r3, [r3, #12]
   da30e:	2202      	movs	r2, #2
   da310:	4620      	mov	r0, r4
   da312:	4798      	blx	r3
    if (msg) {
   da314:	b11e      	cbz	r6, da31e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   da316:	4631      	mov	r1, r6
   da318:	4620      	mov	r0, r4
   da31a:	f7ff f9b3 	bl	d9684 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   da31e:	792b      	ldrb	r3, [r5, #4]
   da320:	f013 0f30 	tst.w	r3, #48	; 0x30
   da324:	d02c      	beq.n	da380 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   da326:	6823      	ldr	r3, [r4, #0]
   da328:	4920      	ldr	r1, [pc, #128]	; (da3ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   da32a:	68db      	ldr	r3, [r3, #12]
   da32c:	2202      	movs	r2, #2
   da32e:	4620      	mov	r0, r4
   da330:	4798      	blx	r3
        if (attr.has_code) {
   da332:	792b      	ldrb	r3, [r5, #4]
   da334:	06d9      	lsls	r1, r3, #27
   da336:	d50a      	bpl.n	da34e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   da338:	6823      	ldr	r3, [r4, #0]
   da33a:	491d      	ldr	r1, [pc, #116]	; (da3b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da33c:	68db      	ldr	r3, [r3, #12]
   da33e:	2207      	movs	r2, #7
   da340:	4620      	mov	r0, r4
   da342:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   da344:	69aa      	ldr	r2, [r5, #24]
   da346:	491b      	ldr	r1, [pc, #108]	; (da3b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   da348:	4620      	mov	r0, r4
   da34a:	f7ff f9b6 	bl	d96ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   da34e:	792b      	ldrb	r3, [r5, #4]
   da350:	069a      	lsls	r2, r3, #26
   da352:	d511      	bpl.n	da378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   da354:	06db      	lsls	r3, r3, #27
   da356:	d505      	bpl.n	da364 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   da358:	6823      	ldr	r3, [r4, #0]
   da35a:	4910      	ldr	r1, [pc, #64]	; (da39c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   da35c:	68db      	ldr	r3, [r3, #12]
   da35e:	2202      	movs	r2, #2
   da360:	4620      	mov	r0, r4
   da362:	4798      	blx	r3
            write("details = ", 10);
   da364:	6823      	ldr	r3, [r4, #0]
   da366:	4914      	ldr	r1, [pc, #80]	; (da3b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   da368:	68db      	ldr	r3, [r3, #12]
   da36a:	4620      	mov	r0, r4
   da36c:	220a      	movs	r2, #10
   da36e:	4798      	blx	r3
            write(attr.details);
   da370:	69e9      	ldr	r1, [r5, #28]
   da372:	4620      	mov	r0, r4
   da374:	f7ff f986 	bl	d9684 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   da378:	215d      	movs	r1, #93	; 0x5d
   da37a:	4620      	mov	r0, r4
   da37c:	f7ff f991 	bl	d96a2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   da380:	6823      	ldr	r3, [r4, #0]
   da382:	490e      	ldr	r1, [pc, #56]	; (da3bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   da384:	68db      	ldr	r3, [r3, #12]
   da386:	4620      	mov	r0, r4
   da388:	2202      	movs	r2, #2
}
   da38a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   da38e:	4718      	bx	r3
   da390:	000dce4b 	.word	0x000dce4b
   da394:	000dce52 	.word	0x000dce52
   da398:	000dc9f8 	.word	0x000dc9f8
   da39c:	000dce55 	.word	0x000dce55
   da3a0:	000dce5a 	.word	0x000dce5a
   da3a4:	2003e60c 	.word	0x2003e60c
   da3a8:	000dce58 	.word	0x000dce58
   da3ac:	000dce5d 	.word	0x000dce5d
   da3b0:	000dce60 	.word	0x000dce60
   da3b4:	000dc51c 	.word	0x000dc51c
   da3b8:	000dce68 	.word	0x000dce68
   da3bc:	000dce73 	.word	0x000dce73

000da3c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da3c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da3c4:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   da3c6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da3ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   da3cc:	4605      	mov	r5, r0
   da3ce:	460f      	mov	r7, r1
   da3d0:	4690      	mov	r8, r2
   da3d2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   da3d4:	f000 ff8a 	bl	db2ec <_Z16_fetch_usbserialv>
   da3d8:	4581      	cmp	r9, r0
   da3da:	d105      	bne.n	da3e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   da3dc:	4849      	ldr	r0, [pc, #292]	; (da504 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   da3de:	f000 f8e0 	bl	da5a2 <_ZN5spark12NetworkClass9listeningEv>
   da3e2:	2800      	cmp	r0, #0
   da3e4:	f040 808a 	bne.w	da4fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   da3e8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   da3ea:	4a47      	ldr	r2, [pc, #284]	; (da508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   da3ec:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   da3ee:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   da3f2:	a801      	add	r0, sp, #4
        strm_(stream) {
   da3f4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   da3f6:	f88d 9008 	strb.w	r9, [sp, #8]
   da3fa:	f7ff f838 	bl	d946e <_ZN5spark10JSONWriter11beginObjectEv>
   da3fe:	4649      	mov	r1, r9
   da400:	4640      	mov	r0, r8
   da402:	f7fd fe37 	bl	d8074 <log_level_name>
    json.name("l", 1).value(s);
   da406:	4941      	ldr	r1, [pc, #260]	; (da50c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   da408:	4680      	mov	r8, r0
   da40a:	2201      	movs	r2, #1
   da40c:	a801      	add	r0, sp, #4
   da40e:	f7ff f8b7 	bl	d9580 <_ZN5spark10JSONWriter4nameEPKcj>
   da412:	4641      	mov	r1, r8
   da414:	f7ff f928 	bl	d9668 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   da418:	b13f      	cbz	r7, da42a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   da41a:	493d      	ldr	r1, [pc, #244]	; (da510 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   da41c:	2201      	movs	r2, #1
   da41e:	a801      	add	r0, sp, #4
   da420:	f7ff f8ae 	bl	d9580 <_ZN5spark10JSONWriter4nameEPKcj>
   da424:	4639      	mov	r1, r7
   da426:	f7ff f91f 	bl	d9668 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   da42a:	b13e      	cbz	r6, da43c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   da42c:	4939      	ldr	r1, [pc, #228]	; (da514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   da42e:	2201      	movs	r2, #1
   da430:	a801      	add	r0, sp, #4
   da432:	f7ff f8a5 	bl	d9580 <_ZN5spark10JSONWriter4nameEPKcj>
   da436:	4631      	mov	r1, r6
   da438:	f7ff f916 	bl	d9668 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   da43c:	7923      	ldrb	r3, [r4, #4]
   da43e:	07df      	lsls	r7, r3, #31
   da440:	d50e      	bpl.n	da460 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   da442:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   da444:	212f      	movs	r1, #47	; 0x2f
   da446:	4630      	mov	r0, r6
   da448:	f001 fef0 	bl	dc22c <strrchr>
    if (s1) {
   da44c:	b100      	cbz	r0, da450 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   da44e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   da450:	4931      	ldr	r1, [pc, #196]	; (da518 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   da452:	2201      	movs	r2, #1
   da454:	a801      	add	r0, sp, #4
   da456:	f7ff f893 	bl	d9580 <_ZN5spark10JSONWriter4nameEPKcj>
   da45a:	4631      	mov	r1, r6
   da45c:	f7ff f904 	bl	d9668 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   da460:	7923      	ldrb	r3, [r4, #4]
   da462:	079e      	lsls	r6, r3, #30
   da464:	d507      	bpl.n	da476 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   da466:	492d      	ldr	r1, [pc, #180]	; (da51c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   da468:	2202      	movs	r2, #2
   da46a:	a801      	add	r0, sp, #4
   da46c:	f7ff f888 	bl	d9580 <_ZN5spark10JSONWriter4nameEPKcj>
   da470:	68e1      	ldr	r1, [r4, #12]
   da472:	f7ff f809 	bl	d9488 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   da476:	7923      	ldrb	r3, [r4, #4]
   da478:	0758      	lsls	r0, r3, #29
   da47a:	d514      	bpl.n	da4a6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da47c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da47e:	4633      	mov	r3, r6
   da480:	461f      	mov	r7, r3
    for (; *s; ++s) {
   da482:	f813 2b01 	ldrb.w	r2, [r3], #1
   da486:	b12a      	cbz	r2, da494 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   da488:	2a20      	cmp	r2, #32
   da48a:	d101      	bne.n	da490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   da48c:	461e      	mov	r6, r3
   da48e:	e7f7      	b.n	da480 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   da490:	2a28      	cmp	r2, #40	; 0x28
   da492:	d1f5      	bne.n	da480 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   da494:	4922      	ldr	r1, [pc, #136]	; (da520 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   da496:	2202      	movs	r2, #2
   da498:	a801      	add	r0, sp, #4
   da49a:	f7ff f871 	bl	d9580 <_ZN5spark10JSONWriter4nameEPKcj>
   da49e:	1bba      	subs	r2, r7, r6
   da4a0:	4631      	mov	r1, r6
   da4a2:	f7ff f87d 	bl	d95a0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   da4a6:	7923      	ldrb	r3, [r4, #4]
   da4a8:	0719      	lsls	r1, r3, #28
   da4aa:	d507      	bpl.n	da4bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   da4ac:	491d      	ldr	r1, [pc, #116]	; (da524 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   da4ae:	2201      	movs	r2, #1
   da4b0:	a801      	add	r0, sp, #4
   da4b2:	f7ff f865 	bl	d9580 <_ZN5spark10JSONWriter4nameEPKcj>
   da4b6:	6961      	ldr	r1, [r4, #20]
   da4b8:	f7fe fff8 	bl	d94ac <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   da4bc:	7923      	ldrb	r3, [r4, #4]
   da4be:	06da      	lsls	r2, r3, #27
   da4c0:	d508      	bpl.n	da4d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   da4c2:	2204      	movs	r2, #4
   da4c4:	4918      	ldr	r1, [pc, #96]	; (da528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   da4c6:	eb0d 0002 	add.w	r0, sp, r2
   da4ca:	f7ff f859 	bl	d9580 <_ZN5spark10JSONWriter4nameEPKcj>
   da4ce:	69a1      	ldr	r1, [r4, #24]
   da4d0:	f7fe ffda 	bl	d9488 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   da4d4:	7923      	ldrb	r3, [r4, #4]
   da4d6:	069b      	lsls	r3, r3, #26
   da4d8:	d507      	bpl.n	da4ea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   da4da:	4914      	ldr	r1, [pc, #80]	; (da52c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   da4dc:	2206      	movs	r2, #6
   da4de:	a801      	add	r0, sp, #4
   da4e0:	f7ff f84e 	bl	d9580 <_ZN5spark10JSONWriter4nameEPKcj>
   da4e4:	69e1      	ldr	r1, [r4, #28]
   da4e6:	f7ff f8bf 	bl	d9668 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   da4ea:	a801      	add	r0, sp, #4
   da4ec:	f7fe ffa9 	bl	d9442 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   da4f0:	6a28      	ldr	r0, [r5, #32]
   da4f2:	490f      	ldr	r1, [pc, #60]	; (da530 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   da4f4:	6803      	ldr	r3, [r0, #0]
   da4f6:	2202      	movs	r2, #2
   da4f8:	68db      	ldr	r3, [r3, #12]
   da4fa:	4798      	blx	r3
}
   da4fc:	b005      	add	sp, #20
   da4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da502:	bf00      	nop
   da504:	2003e60c 	.word	0x2003e60c
   da508:	000dce94 	.word	0x000dce94
   da50c:	000dce28 	.word	0x000dce28
   da510:	000dce76 	.word	0x000dce76
   da514:	000dc4b6 	.word	0x000dc4b6
   da518:	000dc95f 	.word	0x000dc95f
   da51c:	000dce78 	.word	0x000dce78
   da520:	000dce7b 	.word	0x000dce7b
   da524:	000dc83d 	.word	0x000dc83d
   da528:	000dce7e 	.word	0x000dce7e
   da52c:	000dce83 	.word	0x000dce83
   da530:	000dce73 	.word	0x000dce73

000da534 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da534:	2300      	movs	r3, #0
   da536:	6840      	ldr	r0, [r0, #4]
   da538:	461a      	mov	r2, r3
   da53a:	f7fd be9f 	b.w	d827c <network_connect>

000da53e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da53e:	6840      	ldr	r0, [r0, #4]
   da540:	2200      	movs	r2, #0
   da542:	2102      	movs	r1, #2
   da544:	f7fd beaa 	b.w	d829c <network_disconnect>

000da548 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da548:	2200      	movs	r2, #0
   da54a:	6840      	ldr	r0, [r0, #4]
   da54c:	4611      	mov	r1, r2
   da54e:	f7fd be9d 	b.w	d828c <network_connecting>

000da552 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da552:	2200      	movs	r2, #0
   da554:	6840      	ldr	r0, [r0, #4]
   da556:	4611      	mov	r1, r2
   da558:	f7fd bea8 	b.w	d82ac <network_ready>

000da55c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da55c:	2300      	movs	r3, #0
   da55e:	6840      	ldr	r0, [r0, #4]
   da560:	461a      	mov	r2, r3
   da562:	4619      	mov	r1, r3
   da564:	f7fd beaa 	b.w	d82bc <network_on>

000da568 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da568:	2300      	movs	r3, #0
   da56a:	6840      	ldr	r0, [r0, #4]
   da56c:	461a      	mov	r2, r3
   da56e:	4619      	mov	r1, r3
   da570:	f7fd beac 	b.w	d82cc <network_off>

000da574 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   da574:	6840      	ldr	r0, [r0, #4]
   da576:	2100      	movs	r1, #0
   da578:	f7fd bed0 	b.w	d831c <network_is_on>

000da57c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   da57c:	6840      	ldr	r0, [r0, #4]
   da57e:	2100      	movs	r1, #0
   da580:	f7fd bed4 	b.w	d832c <network_is_off>

000da584 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da584:	6840      	ldr	r0, [r0, #4]
   da586:	2200      	movs	r2, #0
   da588:	f081 0101 	eor.w	r1, r1, #1
   da58c:	f7fd bea6 	b.w	d82dc <network_listen>

000da590 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da590:	6840      	ldr	r0, [r0, #4]
   da592:	2200      	movs	r2, #0
   da594:	f7fd beb2 	b.w	d82fc <network_set_listen_timeout>

000da598 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da598:	2200      	movs	r2, #0
   da59a:	6840      	ldr	r0, [r0, #4]
   da59c:	4611      	mov	r1, r2
   da59e:	f7fd beb5 	b.w	d830c <network_get_listen_timeout>

000da5a2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da5a2:	2200      	movs	r2, #0
   da5a4:	6840      	ldr	r0, [r0, #4]
   da5a6:	4611      	mov	r1, r2
   da5a8:	f7fd bea0 	b.w	d82ec <network_listening>

000da5ac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da5b0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   da5b2:	b095      	sub	sp, #84	; 0x54
   da5b4:	4616      	mov	r6, r2
   da5b6:	460d      	mov	r5, r1
   da5b8:	4607      	mov	r7, r0
    IPAddress addr;
   da5ba:	f7fe fde3 	bl	d9184 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   da5be:	4621      	mov	r1, r4
   da5c0:	2218      	movs	r2, #24
   da5c2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   da5c4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da5c6:	f001 fd91 	bl	dc0ec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da5ca:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   da5cc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da5d0:	4621      	mov	r1, r4
   da5d2:	466b      	mov	r3, sp
   da5d4:	aa0c      	add	r2, sp, #48	; 0x30
   da5d6:	4630      	mov	r0, r6
   da5d8:	f7fd fc8c 	bl	d7ef4 <netdb_getaddrinfo>
    if (!r) {
   da5dc:	4604      	mov	r4, r0
   da5de:	2800      	cmp	r0, #0
   da5e0:	d146      	bne.n	da670 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da5e2:	4602      	mov	r2, r0
   da5e4:	2101      	movs	r1, #1
   da5e6:	6868      	ldr	r0, [r5, #4]
   da5e8:	f7fd fe60 	bl	d82ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da5ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da5ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da5f0:	4622      	mov	r2, r4
   da5f2:	6868      	ldr	r0, [r5, #4]
   da5f4:	f7fd fe5a 	bl	d82ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da5f8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da5fa:	4681      	mov	r9, r0
        bool ok = false;
   da5fc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da5fe:	2e00      	cmp	r6, #0
   da600:	d036      	beq.n	da670 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   da602:	2900      	cmp	r1, #0
   da604:	d134      	bne.n	da670 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da606:	6873      	ldr	r3, [r6, #4]
   da608:	2b02      	cmp	r3, #2
   da60a:	d003      	beq.n	da614 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   da60c:	2b0a      	cmp	r3, #10
   da60e:	d00b      	beq.n	da628 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da610:	69f6      	ldr	r6, [r6, #28]
   da612:	e7f4      	b.n	da5fe <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   da614:	f1b8 0f00 	cmp.w	r8, #0
   da618:	d004      	beq.n	da624 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da61a:	6971      	ldr	r1, [r6, #20]
   da61c:	4638      	mov	r0, r7
   da61e:	3104      	adds	r1, #4
   da620:	f7fe fddd 	bl	d91de <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   da624:	4641      	mov	r1, r8
   da626:	e7f3      	b.n	da610 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   da628:	f1b9 0f00 	cmp.w	r9, #0
   da62c:	d101      	bne.n	da632 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   da62e:	4649      	mov	r1, r9
   da630:	e7ee      	b.n	da610 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da632:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da634:	2210      	movs	r2, #16
   da636:	a801      	add	r0, sp, #4
   da638:	f001 fd58 	bl	dc0ec <memset>
                    a.v = 6;
   da63c:	2306      	movs	r3, #6
   da63e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da642:	ad01      	add	r5, sp, #4
   da644:	f104 0308 	add.w	r3, r4, #8
   da648:	3418      	adds	r4, #24
   da64a:	6818      	ldr	r0, [r3, #0]
   da64c:	6859      	ldr	r1, [r3, #4]
   da64e:	462a      	mov	r2, r5
   da650:	c203      	stmia	r2!, {r0, r1}
   da652:	3308      	adds	r3, #8
   da654:	42a3      	cmp	r3, r4
   da656:	4615      	mov	r5, r2
   da658:	d1f7      	bne.n	da64a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   da65a:	a901      	add	r1, sp, #4
   da65c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   da65e:	ad07      	add	r5, sp, #28
   da660:	f7fe fd9e 	bl	d91a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da666:	1d3c      	adds	r4, r7, #4
   da668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da66a:	682b      	ldr	r3, [r5, #0]
   da66c:	7023      	strb	r3, [r4, #0]
   da66e:	e7de      	b.n	da62e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da670:	9800      	ldr	r0, [sp, #0]
   da672:	f7fd fc37 	bl	d7ee4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da676:	4638      	mov	r0, r7
   da678:	b015      	add	sp, #84	; 0x54
   da67a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da680 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da680:	4b02      	ldr	r3, [pc, #8]	; (da68c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da682:	4a03      	ldr	r2, [pc, #12]	; (da690 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da684:	601a      	str	r2, [r3, #0]
   da686:	2200      	movs	r2, #0
   da688:	605a      	str	r2, [r3, #4]

} // spark
   da68a:	4770      	bx	lr
   da68c:	2003e60c 	.word	0x2003e60c
   da690:	000dcf0c 	.word	0x000dcf0c

000da694 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   da694:	b508      	push	{r3, lr}
            return &Wire1;
   da696:	f000 ffe7 	bl	db668 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   da69a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   da69e:	f7fe bcdf 	b.w	d9060 <_ZN7TwoWire4lockEv>

000da6a2 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   da6a2:	b510      	push	{r4, lr}
   da6a4:	4604      	mov	r4, r0
    lock_(_lock)
   da6a6:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   da6a8:	b109      	cbz	r1, da6ae <_ZN4PMICC1Eb+0xc>
        lock();
   da6aa:	f7ff fff3 	bl	da694 <_ZN4PMIC4lockEv.constprop.0>
}
   da6ae:	4620      	mov	r0, r4
   da6b0:	bd10      	pop	{r4, pc}

000da6b2 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   da6b2:	b508      	push	{r3, lr}
            return &Wire1;
   da6b4:	f000 ffd8 	bl	db668 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   da6b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   da6bc:	f7fe bcd9 	b.w	d9072 <_ZN7TwoWire6unlockEv>

000da6c0 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   da6c0:	b510      	push	{r4, lr}
    if (lock_) {
   da6c2:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   da6c4:	4604      	mov	r4, r0
    if (lock_) {
   da6c6:	b10b      	cbz	r3, da6cc <_ZN4PMICD1Ev+0xc>
        unlock();
   da6c8:	f7ff fff3 	bl	da6b2 <_ZN4PMIC6unlockEv>
}
   da6cc:	4620      	mov	r0, r4
   da6ce:	bd10      	pop	{r4, pc}

000da6d0 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   da6d0:	b510      	push	{r4, lr}
   da6d2:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   da6d4:	6800      	ldr	r0, [r0, #0]
   da6d6:	f7ff ffec 	bl	da6b2 <_ZN4PMIC6unlockEv>
   da6da:	4620      	mov	r0, r4
   da6dc:	bd10      	pop	{r4, pc}

000da6de <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   da6de:	b530      	push	{r4, r5, lr}
   da6e0:	b087      	sub	sp, #28
   da6e2:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da6e4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da6e6:	f7ff ffd5 	bl	da694 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da6ea:	236b      	movs	r3, #107	; 0x6b
   da6ec:	f88d 3008 	strb.w	r3, [sp, #8]
   da6f0:	2300      	movs	r3, #0
   da6f2:	2401      	movs	r4, #1
   da6f4:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   da6f6:	230a      	movs	r3, #10
   da6f8:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da6fa:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   da6fe:	f000 ffb3 	bl	db668 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da702:	a902      	add	r1, sp, #8
   da704:	f7fe fc8d 	bl	d9022 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da708:	f000 ffae 	bl	db668 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   da70c:	6803      	ldr	r3, [r0, #0]
   da70e:	4629      	mov	r1, r5
   da710:	689b      	ldr	r3, [r3, #8]
   da712:	4798      	blx	r3
            return &Wire1;
   da714:	f000 ffa8 	bl	db668 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da718:	4621      	mov	r1, r4
   da71a:	f7fe fc9a 	bl	d9052 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   da71e:	9403      	str	r4, [sp, #12]
            return &Wire1;
   da720:	f000 ffa2 	bl	db668 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   da724:	a902      	add	r1, sp, #8
   da726:	f7fe fc49 	bl	d8fbc <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   da72a:	f000 ff9d 	bl	db668 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   da72e:	6803      	ldr	r3, [r0, #0]
   da730:	695b      	ldr	r3, [r3, #20]
   da732:	4798      	blx	r3
   da734:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   da736:	a801      	add	r0, sp, #4
   da738:	f7ff ffca 	bl	da6d0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da73c:	b2e0      	uxtb	r0, r4
   da73e:	b007      	add	sp, #28
   da740:	bd30      	pop	{r4, r5, pc}

000da742 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   da742:	b570      	push	{r4, r5, r6, lr}
   da744:	b086      	sub	sp, #24
   da746:	4614      	mov	r4, r2
   da748:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da74a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da74c:	f7ff ffa2 	bl	da694 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da750:	236b      	movs	r3, #107	; 0x6b
   da752:	f88d 3008 	strb.w	r3, [sp, #8]
   da756:	2300      	movs	r3, #0
   da758:	9303      	str	r3, [sp, #12]
   da75a:	2601      	movs	r6, #1
    timeout_ = ms;
   da75c:	230a      	movs	r3, #10
   da75e:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da760:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   da764:	f000 ff80 	bl	db668 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da768:	a902      	add	r1, sp, #8
   da76a:	f7fe fc5a 	bl	d9022 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da76e:	f000 ff7b 	bl	db668 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   da772:	6803      	ldr	r3, [r0, #0]
   da774:	4629      	mov	r1, r5
   da776:	689b      	ldr	r3, [r3, #8]
   da778:	4798      	blx	r3
            return &Wire1;
   da77a:	f000 ff75 	bl	db668 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   da77e:	6803      	ldr	r3, [r0, #0]
   da780:	4621      	mov	r1, r4
   da782:	689b      	ldr	r3, [r3, #8]
   da784:	4798      	blx	r3
            return &Wire1;
   da786:	f000 ff6f 	bl	db668 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da78a:	4631      	mov	r1, r6
   da78c:	f7fe fc61 	bl	d9052 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   da790:	a801      	add	r0, sp, #4
   da792:	f7ff ff9d 	bl	da6d0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da796:	b006      	add	sp, #24
   da798:	bd70      	pop	{r4, r5, r6, pc}

000da79a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   da79a:	b513      	push	{r0, r1, r4, lr}
   da79c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da79e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da7a0:	f7ff ff78 	bl	da694 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da7a4:	2101      	movs	r1, #1
   da7a6:	4620      	mov	r0, r4
   da7a8:	f7ff ff99 	bl	da6de <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   da7ac:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   da7b0:	f040 0210 	orr.w	r2, r0, #16
   da7b4:	2101      	movs	r1, #1
   da7b6:	4620      	mov	r0, r4
   da7b8:	f7ff ffc3 	bl	da742 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da7bc:	a801      	add	r0, sp, #4
   da7be:	f7ff ff87 	bl	da6d0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da7c2:	2001      	movs	r0, #1
   da7c4:	b002      	add	sp, #8
   da7c6:	bd10      	pop	{r4, pc}

000da7c8 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   da7c8:	b513      	push	{r0, r1, r4, lr}
   da7ca:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da7cc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da7ce:	f7ff ff61 	bl	da694 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da7d2:	2101      	movs	r1, #1
   da7d4:	4620      	mov	r0, r4
   da7d6:	f7ff ff82 	bl	da6de <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   da7da:	2101      	movs	r1, #1
   da7dc:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   da7e0:	4620      	mov	r0, r4
   da7e2:	f7ff ffae 	bl	da742 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da7e6:	a801      	add	r0, sp, #4
   da7e8:	f7ff ff72 	bl	da6d0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da7ec:	2001      	movs	r0, #1
   da7ee:	b002      	add	sp, #8
   da7f0:	bd10      	pop	{r4, pc}

000da7f2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da7f4:	4606      	mov	r6, r0
   da7f6:	460d      	mov	r5, r1
  size_t n = 0;
   da7f8:	188f      	adds	r7, r1, r2
   da7fa:	2400      	movs	r4, #0
  while (size--) {
   da7fc:	42bd      	cmp	r5, r7
   da7fe:	d00c      	beq.n	da81a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da800:	6833      	ldr	r3, [r6, #0]
   da802:	f815 1b01 	ldrb.w	r1, [r5], #1
   da806:	689b      	ldr	r3, [r3, #8]
   da808:	4630      	mov	r0, r6
   da80a:	4798      	blx	r3
     if (chunk>=0)
   da80c:	1e03      	subs	r3, r0, #0
   da80e:	db01      	blt.n	da814 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da810:	441c      	add	r4, r3
  while (size--) {
   da812:	e7f3      	b.n	da7fc <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da814:	2c00      	cmp	r4, #0
   da816:	bf08      	it	eq
   da818:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   da81a:	4620      	mov	r0, r4
   da81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da81e <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   da81e:	b513      	push	{r0, r1, r4, lr}
   da820:	4604      	mov	r4, r0
    }
   da822:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   da824:	b159      	cbz	r1, da83e <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   da826:	9101      	str	r1, [sp, #4]
   da828:	f001 fcd3 	bl	dc1d2 <strlen>
   da82c:	6823      	ldr	r3, [r4, #0]
   da82e:	9901      	ldr	r1, [sp, #4]
   da830:	68db      	ldr	r3, [r3, #12]
   da832:	4602      	mov	r2, r0
   da834:	4620      	mov	r0, r4
    }
   da836:	b002      	add	sp, #8
   da838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   da83c:	4718      	bx	r3
    }
   da83e:	b002      	add	sp, #8
   da840:	bd10      	pop	{r4, pc}

000da842 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da842:	6803      	ldr	r3, [r0, #0]
   da844:	689b      	ldr	r3, [r3, #8]
   da846:	4718      	bx	r3

000da848 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da848:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da84a:	210d      	movs	r1, #13
{
   da84c:	4605      	mov	r5, r0
  size_t n = print('\r');
   da84e:	f7ff fff8 	bl	da842 <_ZN5Print5printEc>
  n += print('\n');
   da852:	210a      	movs	r1, #10
  size_t n = print('\r');
   da854:	4604      	mov	r4, r0
  n += print('\n');
   da856:	4628      	mov	r0, r5
   da858:	f7ff fff3 	bl	da842 <_ZN5Print5printEc>
  return n;
}
   da85c:	4420      	add	r0, r4
   da85e:	bd38      	pop	{r3, r4, r5, pc}

000da860 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da860:	b530      	push	{r4, r5, lr}
   da862:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da864:	2300      	movs	r3, #0
   da866:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da86a:	2a01      	cmp	r2, #1
   da86c:	bf98      	it	ls
   da86e:	220a      	movls	r2, #10
   da870:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   da872:	460d      	mov	r5, r1
   da874:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   da878:	fb01 5312 	mls	r3, r1, r2, r5
   da87c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da880:	2b09      	cmp	r3, #9
   da882:	bf94      	ite	ls
   da884:	3330      	addls	r3, #48	; 0x30
   da886:	3337      	addhi	r3, #55	; 0x37
   da888:	b2db      	uxtb	r3, r3
  } while(n);
   da88a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da88c:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   da890:	d9ef      	bls.n	da872 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   da892:	4621      	mov	r1, r4
   da894:	f7ff ffc3 	bl	da81e <_ZN5Print5writeEPKc>
}
   da898:	b00b      	add	sp, #44	; 0x2c
   da89a:	bd30      	pop	{r4, r5, pc}

000da89c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   da89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da8a0:	b086      	sub	sp, #24
   da8a2:	af00      	add	r7, sp, #0
   da8a4:	4605      	mov	r5, r0
   da8a6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   da8a8:	1d38      	adds	r0, r7, #4
   da8aa:	2114      	movs	r1, #20
{
   da8ac:	4614      	mov	r4, r2
    va_copy(args2, args);
   da8ae:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   da8b0:	f7fd fd6c 	bl	d838c <vsnprintf>

    if (n<bufsize)
   da8b4:	2813      	cmp	r0, #19
   da8b6:	d80e      	bhi.n	da8d6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   da8b8:	1d39      	adds	r1, r7, #4
   da8ba:	4628      	mov	r0, r5
   da8bc:	f7ff ffaf 	bl	da81e <_ZN5Print5writeEPKc>
   da8c0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   da8c2:	b11e      	cbz	r6, da8cc <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   da8c4:	4628      	mov	r0, r5
   da8c6:	f7ff ffbf 	bl	da848 <_ZN5Print7printlnEv>
   da8ca:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   da8cc:	4620      	mov	r0, r4
   da8ce:	3718      	adds	r7, #24
   da8d0:	46bd      	mov	sp, r7
   da8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   da8d6:	f100 0308 	add.w	r3, r0, #8
   da8da:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   da8de:	46e8      	mov	r8, sp
        char bigger[n+1];
   da8e0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   da8e4:	4622      	mov	r2, r4
   da8e6:	1c41      	adds	r1, r0, #1
   da8e8:	683b      	ldr	r3, [r7, #0]
   da8ea:	4668      	mov	r0, sp
   da8ec:	f7fd fd4e 	bl	d838c <vsnprintf>
  return write(str);
   da8f0:	4669      	mov	r1, sp
   da8f2:	4628      	mov	r0, r5
   da8f4:	f7ff ff93 	bl	da81e <_ZN5Print5writeEPKc>
   da8f8:	4604      	mov	r4, r0
   da8fa:	46c5      	mov	sp, r8
   da8fc:	e7e1      	b.n	da8c2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000da8fe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da8fe:	b510      	push	{r4, lr}
   da900:	4604      	mov	r4, r0
   da902:	f7f9 fd55 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
   da906:	4620      	mov	r0, r4
   da908:	bd10      	pop	{r4, pc}
	...

000da90c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   da90c:	4803      	ldr	r0, [pc, #12]	; (da91c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da90e:	4a04      	ldr	r2, [pc, #16]	; (da920 <_GLOBAL__sub_I_RGB+0x14>)
   da910:	4904      	ldr	r1, [pc, #16]	; (da924 <_GLOBAL__sub_I_RGB+0x18>)
   da912:	2300      	movs	r3, #0
   da914:	6083      	str	r3, [r0, #8]
   da916:	f000 becf 	b.w	db6b8 <__aeabi_atexit>
   da91a:	bf00      	nop
   da91c:	2003e614 	.word	0x2003e614
   da920:	2003e320 	.word	0x2003e320
   da924:	000da8ff 	.word	0x000da8ff

000da928 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   da928:	b510      	push	{r4, lr}
   da92a:	4604      	mov	r4, r0
   da92c:	4608      	mov	r0, r1
{
    _spi = spi;
   da92e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   da930:	f7fd fae8 	bl	d7f04 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   da934:	2300      	movs	r3, #0
   da936:	6063      	str	r3, [r4, #4]
}
   da938:	4620      	mov	r0, r4
   da93a:	bd10      	pop	{r4, pc}

000da93c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   da93c:	b510      	push	{r4, lr}
   da93e:	4604      	mov	r4, r0
{
	free(buffer);
   da940:	6800      	ldr	r0, [r0, #0]
   da942:	f7fd fd03 	bl	d834c <free>
}
   da946:	4620      	mov	r0, r4
   da948:	bd10      	pop	{r4, pc}

000da94a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   da94a:	b510      	push	{r4, lr}
   da94c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   da94e:	6800      	ldr	r0, [r0, #0]
   da950:	b108      	cbz	r0, da956 <_ZN6String10invalidateEv+0xc>
   da952:	f7fd fcfb 	bl	d834c <free>
	buffer = NULL;
   da956:	2300      	movs	r3, #0
	capacity = len = 0;
   da958:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   da95c:	6023      	str	r3, [r4, #0]
}
   da95e:	bd10      	pop	{r4, pc}

000da960 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   da960:	b538      	push	{r3, r4, r5, lr}
   da962:	4604      	mov	r4, r0
   da964:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   da966:	6800      	ldr	r0, [r0, #0]
   da968:	3101      	adds	r1, #1
   da96a:	f7fd fcf7 	bl	d835c <realloc>
	if (newbuffer) {
   da96e:	b110      	cbz	r0, da976 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   da970:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   da974:	2001      	movs	r0, #1
	}
	return 0;
}
   da976:	bd38      	pop	{r3, r4, r5, pc}

000da978 <_ZN6String7reserveEj>:
{
   da978:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da97a:	6803      	ldr	r3, [r0, #0]
{
   da97c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da97e:	b123      	cbz	r3, da98a <_ZN6String7reserveEj+0x12>
   da980:	6843      	ldr	r3, [r0, #4]
   da982:	428b      	cmp	r3, r1
   da984:	d301      	bcc.n	da98a <_ZN6String7reserveEj+0x12>
   da986:	2001      	movs	r0, #1
}
   da988:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   da98a:	4620      	mov	r0, r4
   da98c:	f7ff ffe8 	bl	da960 <_ZN6String12changeBufferEj>
   da990:	2800      	cmp	r0, #0
   da992:	d0f9      	beq.n	da988 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   da994:	68a3      	ldr	r3, [r4, #8]
   da996:	2b00      	cmp	r3, #0
   da998:	d1f5      	bne.n	da986 <_ZN6String7reserveEj+0xe>
   da99a:	6822      	ldr	r2, [r4, #0]
   da99c:	7013      	strb	r3, [r2, #0]
   da99e:	e7f2      	b.n	da986 <_ZN6String7reserveEj+0xe>

000da9a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da9a2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   da9a4:	4611      	mov	r1, r2
   da9a6:	9201      	str	r2, [sp, #4]
{
   da9a8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   da9aa:	f7ff ffe5 	bl	da978 <_ZN6String7reserveEj>
   da9ae:	9a01      	ldr	r2, [sp, #4]
   da9b0:	b928      	cbnz	r0, da9be <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   da9b2:	4620      	mov	r0, r4
   da9b4:	f7ff ffc9 	bl	da94a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   da9b8:	4620      	mov	r0, r4
   da9ba:	b003      	add	sp, #12
   da9bc:	bd30      	pop	{r4, r5, pc}
	len = length;
   da9be:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   da9c0:	4629      	mov	r1, r5
   da9c2:	6820      	ldr	r0, [r4, #0]
   da9c4:	f001 fb6a 	bl	dc09c <memcpy>
	buffer[len] = 0;
   da9c8:	6822      	ldr	r2, [r4, #0]
   da9ca:	68a3      	ldr	r3, [r4, #8]
   da9cc:	2100      	movs	r1, #0
   da9ce:	54d1      	strb	r1, [r2, r3]
	return *this;
   da9d0:	e7f2      	b.n	da9b8 <_ZN6String4copyEPKcj+0x18>

000da9d2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   da9d2:	2300      	movs	r3, #0
String::String(const char *cstr)
   da9d4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   da9d6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   da9da:	4604      	mov	r4, r0
	len = 0;
   da9dc:	6083      	str	r3, [r0, #8]
	flags = 0;
   da9de:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   da9e0:	b141      	cbz	r1, da9f4 <_ZN6StringC1EPKc+0x22>
   da9e2:	4608      	mov	r0, r1
   da9e4:	9101      	str	r1, [sp, #4]
   da9e6:	f001 fbf4 	bl	dc1d2 <strlen>
   da9ea:	9901      	ldr	r1, [sp, #4]
   da9ec:	4602      	mov	r2, r0
   da9ee:	4620      	mov	r0, r4
   da9f0:	f7ff ffd6 	bl	da9a0 <_ZN6String4copyEPKcj>
}
   da9f4:	4620      	mov	r0, r4
   da9f6:	b002      	add	sp, #8
   da9f8:	bd10      	pop	{r4, pc}

000da9fa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da9fa:	b538      	push	{r3, r4, r5, lr}
   da9fc:	4605      	mov	r5, r0
	if (buffer) {
   da9fe:	6800      	ldr	r0, [r0, #0]
{
   daa00:	460c      	mov	r4, r1
	if (buffer) {
   daa02:	b168      	cbz	r0, daa20 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   daa04:	686a      	ldr	r2, [r5, #4]
   daa06:	688b      	ldr	r3, [r1, #8]
   daa08:	429a      	cmp	r2, r3
   daa0a:	d307      	bcc.n	daa1c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   daa0c:	6809      	ldr	r1, [r1, #0]
   daa0e:	f001 fbba 	bl	dc186 <strcpy>
			len = rhs.len;
   daa12:	68a3      	ldr	r3, [r4, #8]
   daa14:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   daa16:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   daa18:	60a3      	str	r3, [r4, #8]
}
   daa1a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   daa1c:	f7fd fc96 	bl	d834c <free>
	buffer = rhs.buffer;
   daa20:	6823      	ldr	r3, [r4, #0]
   daa22:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   daa24:	6863      	ldr	r3, [r4, #4]
   daa26:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   daa28:	68a3      	ldr	r3, [r4, #8]
   daa2a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   daa2c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   daa2e:	e9c4 3300 	strd	r3, r3, [r4]
   daa32:	e7f1      	b.n	daa18 <_ZN6String4moveERS_+0x1e>

000daa34 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   daa34:	b510      	push	{r4, lr}
	buffer = NULL;
   daa36:	2300      	movs	r3, #0
	capacity = 0;
   daa38:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   daa3c:	4604      	mov	r4, r0
	len = 0;
   daa3e:	6083      	str	r3, [r0, #8]
	flags = 0;
   daa40:	7303      	strb	r3, [r0, #12]
	move(rval);
   daa42:	f7ff ffda 	bl	da9fa <_ZN6String4moveERS_>
}
   daa46:	4620      	mov	r0, r4
   daa48:	bd10      	pop	{r4, pc}

000daa4a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   daa4a:	4288      	cmp	r0, r1
{
   daa4c:	b510      	push	{r4, lr}
   daa4e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   daa50:	d005      	beq.n	daa5e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   daa52:	680b      	ldr	r3, [r1, #0]
   daa54:	b12b      	cbz	r3, daa62 <_ZN6StringaSERKS_+0x18>
   daa56:	688a      	ldr	r2, [r1, #8]
   daa58:	4619      	mov	r1, r3
   daa5a:	f7ff ffa1 	bl	da9a0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   daa5e:	4620      	mov	r0, r4
   daa60:	bd10      	pop	{r4, pc}
	else invalidate();
   daa62:	f7ff ff72 	bl	da94a <_ZN6String10invalidateEv>
   daa66:	e7fa      	b.n	daa5e <_ZN6StringaSERKS_+0x14>

000daa68 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   daa68:	b510      	push	{r4, lr}
	buffer = NULL;
   daa6a:	2300      	movs	r3, #0
String::String(const String &value)
   daa6c:	4604      	mov	r4, r0
	capacity = 0;
   daa6e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   daa72:	6083      	str	r3, [r0, #8]
	flags = 0;
   daa74:	7303      	strb	r3, [r0, #12]
	*this = value;
   daa76:	f7ff ffe8 	bl	daa4a <_ZN6StringaSERKS_>
}
   daa7a:	4620      	mov	r0, r4
   daa7c:	bd10      	pop	{r4, pc}

000daa7e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   daa7e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   daa80:	6882      	ldr	r2, [r0, #8]
   daa82:	b93a      	cbnz	r2, daa94 <_ZNK6String6equalsEPKc+0x16>
   daa84:	b121      	cbz	r1, daa90 <_ZNK6String6equalsEPKc+0x12>
   daa86:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   daa88:	fab0 f080 	clz	r0, r0
   daa8c:	0940      	lsrs	r0, r0, #5
   daa8e:	e000      	b.n	daa92 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   daa90:	2001      	movs	r0, #1
}
   daa92:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   daa94:	6800      	ldr	r0, [r0, #0]
   daa96:	b909      	cbnz	r1, daa9c <_ZNK6String6equalsEPKc+0x1e>
   daa98:	7800      	ldrb	r0, [r0, #0]
   daa9a:	e7f5      	b.n	daa88 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   daa9c:	f001 fb69 	bl	dc172 <strcmp>
   daaa0:	e7f2      	b.n	daa88 <_ZNK6String6equalsEPKc+0xa>

000daaa2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   daaa2:	b558      	push	{r3, r4, r6, lr}
   daaa4:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   daaa6:	b12a      	cbz	r2, daab4 <_ZNK6String8getBytesEPhjj+0x12>
   daaa8:	b121      	cbz	r1, daab4 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   daaaa:	6884      	ldr	r4, [r0, #8]
   daaac:	42a3      	cmp	r3, r4
   daaae:	d302      	bcc.n	daab6 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   daab0:	2300      	movs	r3, #0
   daab2:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   daab4:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   daab6:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   daab8:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   daaba:	6801      	ldr	r1, [r0, #0]
   daabc:	4294      	cmp	r4, r2
   daabe:	bf28      	it	cs
   daac0:	4614      	movcs	r4, r2
   daac2:	4419      	add	r1, r3
   daac4:	4622      	mov	r2, r4
   daac6:	4630      	mov	r0, r6
   daac8:	f001 fb9d 	bl	dc206 <strncpy>
	buf[n] = 0;
   daacc:	2300      	movs	r3, #0
   daace:	5533      	strb	r3, [r6, r4]
   daad0:	e7f0      	b.n	daab4 <_ZNK6String8getBytesEPhjj+0x12>
	...

000daad4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   daad4:	b40e      	push	{r1, r2, r3}
   daad6:	b570      	push	{r4, r5, r6, lr}
   daad8:	b087      	sub	sp, #28
   daada:	ad0b      	add	r5, sp, #44	; 0x2c
   daadc:	4604      	mov	r4, r0
   daade:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   daae2:	9201      	str	r2, [sp, #4]
   daae4:	462b      	mov	r3, r5
   daae6:	2105      	movs	r1, #5
   daae8:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   daaea:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   daaec:	f7fd fc4e 	bl	d838c <vsnprintf>
    va_end(marker);

    String result;
   daaf0:	490b      	ldr	r1, [pc, #44]	; (dab20 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   daaf2:	4606      	mov	r6, r0
    String result;
   daaf4:	4620      	mov	r0, r4
   daaf6:	f7ff ff6c 	bl	da9d2 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   daafa:	4631      	mov	r1, r6
   daafc:	4620      	mov	r0, r4
   daafe:	f7ff ff3b 	bl	da978 <_ZN6String7reserveEj>
    if (result.buffer) {
   dab02:	6820      	ldr	r0, [r4, #0]
   dab04:	b130      	cbz	r0, dab14 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dab06:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dab08:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dab0a:	462b      	mov	r3, r5
   dab0c:	1c71      	adds	r1, r6, #1
   dab0e:	f7fd fc3d 	bl	d838c <vsnprintf>
        va_end(marker);
        result.len = n;
   dab12:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dab14:	4620      	mov	r0, r4
   dab16:	b007      	add	sp, #28
   dab18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dab1c:	b003      	add	sp, #12
   dab1e:	4770      	bx	lr
   dab20:	000dce75 	.word	0x000dce75

000dab24 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dab24:	b510      	push	{r4, lr}
   dab26:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dab28:	6800      	ldr	r0, [r0, #0]
   dab2a:	b118      	cbz	r0, dab34 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dab2c:	f7fd fc0e 	bl	d834c <free>
            wakeupSource_ = nullptr;
   dab30:	2300      	movs	r3, #0
   dab32:	6023      	str	r3, [r4, #0]
        }
    }
   dab34:	bd10      	pop	{r4, pc}

000dab36 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dab36:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dab38:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dab3c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dab3e:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dab40:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   dab42:	f853 2f06 	ldr.w	r2, [r3, #6]!
   dab46:	f8c0 2006 	str.w	r2, [r0, #6]
   dab4a:	889b      	ldrh	r3, [r3, #4]
   dab4c:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dab4e:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   dab50:	f7ff ffe8 	bl	dab24 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   dab54:	682b      	ldr	r3, [r5, #0]
   dab56:	b113      	cbz	r3, dab5e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   dab58:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   dab5a:	2300      	movs	r3, #0
   dab5c:	602b      	str	r3, [r5, #0]
    }
   dab5e:	4620      	mov	r0, r4
   dab60:	bd38      	pop	{r3, r4, r5, pc}
	...

000dab64 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   dab64:	b538      	push	{r3, r4, r5, lr}
   dab66:	460c      	mov	r4, r1
   dab68:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   dab6a:	f7ff ffdb 	bl	dab24 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   dab6e:	b144      	cbz	r4, dab82 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   dab70:	8820      	ldrh	r0, [r4, #0]
   dab72:	f7fd fbe3 	bl	d833c <malloc>
   dab76:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   dab78:	b128      	cbz	r0, dab86 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   dab7a:	8822      	ldrh	r2, [r4, #0]
   dab7c:	4621      	mov	r1, r4
   dab7e:	f001 fa8d 	bl	dc09c <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   dab82:	2000      	movs	r0, #0
    }
   dab84:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   dab86:	4801      	ldr	r0, [pc, #4]	; (dab8c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   dab88:	e7fc      	b.n	dab84 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   dab8a:	bf00      	nop
   dab8c:	fffffefc 	.word	0xfffffefc

000dab90 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   dab90:	b507      	push	{r0, r1, r2, lr}
   dab92:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   dab94:	2100      	movs	r1, #0
{
   dab96:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   dab98:	9100      	str	r1, [sp, #0]
   dab9a:	2001      	movs	r0, #1
   dab9c:	218c      	movs	r1, #140	; 0x8c
   dab9e:	f7fd faf3 	bl	d8188 <system_reset>
}
   daba2:	b003      	add	sp, #12
   daba4:	f85d fb04 	ldr.w	pc, [sp], #4

000daba8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   daba8:	4601      	mov	r1, r0
    reset(0, flags);
   dabaa:	2000      	movs	r0, #0
   dabac:	f7ff bff0 	b.w	dab90 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000dabb0 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   dabb0:	2000      	movs	r0, #0
   dabb2:	f7ff bff9 	b.w	daba8 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000dabb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dabb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dabba:	4d2d      	ldr	r5, [pc, #180]	; (dac70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dabbc:	7d0b      	ldrb	r3, [r1, #20]
   dabbe:	4604      	mov	r4, r0
   dabc0:	b08b      	sub	sp, #44	; 0x2c
   dabc2:	4608      	mov	r0, r1
   dabc4:	1daf      	adds	r7, r5, #6
   dabc6:	2b00      	cmp	r3, #0
   dabc8:	d038      	beq.n	dac3c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dabca:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dabcc:	791b      	ldrb	r3, [r3, #4]
   dabce:	2b00      	cmp	r3, #0
   dabd0:	d034      	beq.n	dac3c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dabd2:	2200      	movs	r2, #0
    SleepResult() {}
   dabd4:	4b27      	ldr	r3, [pc, #156]	; (dac74 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dabd6:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dabd8:	a902      	add	r1, sp, #8
   dabda:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dabdc:	9202      	str	r2, [sp, #8]
   dabde:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dabe2:	f88d 200e 	strb.w	r2, [sp, #14]
   dabe6:	f7fd fac5 	bl	d8174 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dabea:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dabee:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dabf2:	b200      	sxth	r0, r0
   dabf4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dabf8:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dabfc:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dabfe:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dac00:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dac02:	4628      	mov	r0, r5
   dac04:	f7ff ffae 	bl	dab64 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dac08:	a802      	add	r0, sp, #8
   dac0a:	f7ff ff8b 	bl	dab24 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dac0e:	2300      	movs	r3, #0
   dac10:	6023      	str	r3, [r4, #0]
   dac12:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dac14:	71a3      	strb	r3, [r4, #6]
   dac16:	8123      	strh	r3, [r4, #8]
   dac18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dac1c:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dac1e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dac22:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dac24:	683b      	ldr	r3, [r7, #0]
   dac26:	f8c4 3006 	str.w	r3, [r4, #6]
   dac2a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dac2c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dac2e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dac30:	4620      	mov	r0, r4
   dac32:	f7ff ff97 	bl	dab64 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dac36:	4620      	mov	r0, r4
   dac38:	b00b      	add	sp, #44	; 0x2c
   dac3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dac3c:	2600      	movs	r6, #0
   dac3e:	2320      	movs	r3, #32
   dac40:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dac44:	4b0c      	ldr	r3, [pc, #48]	; (dac78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dac46:	9300      	str	r3, [sp, #0]
   dac48:	490c      	ldr	r1, [pc, #48]	; (dac7c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dac4a:	4633      	mov	r3, r6
   dac4c:	aa02      	add	r2, sp, #8
   dac4e:	2032      	movs	r0, #50	; 0x32
   dac50:	f7fd fa00 	bl	d8054 <log_message>
    SleepResult() {}
   dac54:	4b07      	ldr	r3, [pc, #28]	; (dac74 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dac56:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dac58:	a902      	add	r1, sp, #8
        error_ = error;
   dac5a:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dac5e:	4804      	ldr	r0, [pc, #16]	; (dac70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dac60:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dac62:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dac66:	f8ad 300c 	strh.w	r3, [sp, #12]
   dac6a:	f7ff ff64 	bl	dab36 <_ZN17SystemSleepResultaSEOS_>
   dac6e:	e7cb      	b.n	dac08 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dac70:	2003e624 	.word	0x2003e624
   dac74:	ffff0000 	.word	0xffff0000
   dac78:	000dcf47 	.word	0x000dcf47
   dac7c:	000dcf40 	.word	0x000dcf40

000dac80 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   dac80:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dac82:	4b09      	ldr	r3, [pc, #36]	; (daca8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   dac84:	4c09      	ldr	r4, [pc, #36]	; (dacac <_GLOBAL__sub_I_System+0x2c>)
   dac86:	2202      	movs	r2, #2
   dac88:	2000      	movs	r0, #0
   dac8a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   dac8c:	4b08      	ldr	r3, [pc, #32]	; (dacb0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   dac8e:	6020      	str	r0, [r4, #0]
   dac90:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   dac92:	71a0      	strb	r0, [r4, #6]
   dac94:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dac96:	f7fd fa0f 	bl	d80b8 <set_system_mode>
SystemClass System;
   dac9a:	4620      	mov	r0, r4
   dac9c:	4a05      	ldr	r2, [pc, #20]	; (dacb4 <_GLOBAL__sub_I_System+0x34>)
   dac9e:	4906      	ldr	r1, [pc, #24]	; (dacb8 <_GLOBAL__sub_I_System+0x38>)
   daca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   daca4:	f000 bd08 	b.w	db6b8 <__aeabi_atexit>
   daca8:	2003e630 	.word	0x2003e630
   dacac:	2003e624 	.word	0x2003e624
   dacb0:	ffff0000 	.word	0xffff0000
   dacb4:	2003e320 	.word	0x2003e320
   dacb8:	000d42f7 	.word	0x000d42f7

000dacbc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dacbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   dacc0:	4a15      	ldr	r2, [pc, #84]	; (dad18 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dacc2:	f8df 8060 	ldr.w	r8, [pc, #96]	; dad24 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   dacc6:	e9d2 3200 	ldrd	r3, r2, [r2]
   dacca:	18c0      	adds	r0, r0, r3
   daccc:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   dacd0:	4a12      	ldr	r2, [pc, #72]	; (dad1c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   dacd2:	e9d2 3200 	ldrd	r3, r2, [r2]
   dacd6:	18c6      	adds	r6, r0, r3
   dacd8:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   dacdc:	e9d8 2300 	ldrd	r2, r3, [r8]
   dace0:	42bb      	cmp	r3, r7
   dace2:	bf08      	it	eq
   dace4:	42b2      	cmpeq	r2, r6
{
   dace6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   dace8:	d013      	beq.n	dad12 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   dacea:	a903      	add	r1, sp, #12
   dacec:	4668      	mov	r0, sp
   dacee:	e9cd 6700 	strd	r6, r7, [sp]
   dacf2:	f7fd fb73 	bl	d83dc <localtime_r>
	calendar_time.tm_year += 1900;
   dacf6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dacf8:	4d09      	ldr	r5, [pc, #36]	; (dad20 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   dacfa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dacfe:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   dad00:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dad02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dad04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dad06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dad08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dad0a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dad0e:	6823      	ldr	r3, [r4, #0]
   dad10:	602b      	str	r3, [r5, #0]
    }
}
   dad12:	b00c      	add	sp, #48	; 0x30
   dad14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dad18:	2003e668 	.word	0x2003e668
   dad1c:	2003e660 	.word	0x2003e660
   dad20:	2003e63c 	.word	0x2003e63c
   dad24:	2003e670 	.word	0x2003e670

000dad28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dad28:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dad2a:	2000      	movs	r0, #0
   dad2c:	f7fd fa7e 	bl	d822c <spark_sync_time_pending>
   dad30:	b128      	cbz	r0, dad3e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dad32:	f7fd fa53 	bl	d81dc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dad36:	f080 0001 	eor.w	r0, r0, #1
   dad3a:	b2c0      	uxtb	r0, r0
    }
   dad3c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dad3e:	2001      	movs	r0, #1
   dad40:	e7fc      	b.n	dad3c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000dad44 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   dad44:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dad46:	f7ff ffb9 	bl	dacbc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   dad4a:	4b01      	ldr	r3, [pc, #4]	; (dad50 <_ZN9TimeClass4hourEx+0xc>)
   dad4c:	6898      	ldr	r0, [r3, #8]
   dad4e:	bd08      	pop	{r3, pc}
   dad50:	2003e63c 	.word	0x2003e63c

000dad54 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   dad54:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dad56:	f7ff ffb1 	bl	dacbc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   dad5a:	4b01      	ldr	r3, [pc, #4]	; (dad60 <_ZN9TimeClass3dayEx+0xc>)
   dad5c:	68d8      	ldr	r0, [r3, #12]
   dad5e:	bd08      	pop	{r3, pc}
   dad60:	2003e63c 	.word	0x2003e63c

000dad64 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   dad64:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dad66:	f7ff ffa9 	bl	dacbc <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   dad6a:	4b02      	ldr	r3, [pc, #8]	; (dad74 <_ZN9TimeClass7weekdayEx+0x10>)
   dad6c:	6998      	ldr	r0, [r3, #24]
}
   dad6e:	3001      	adds	r0, #1
   dad70:	bd08      	pop	{r3, pc}
   dad72:	bf00      	nop
   dad74:	2003e63c 	.word	0x2003e63c

000dad78 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dad78:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dad7a:	f7ff ff9f 	bl	dacbc <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dad7e:	4b02      	ldr	r3, [pc, #8]	; (dad88 <_ZN9TimeClass5monthEx+0x10>)
   dad80:	6918      	ldr	r0, [r3, #16]
}
   dad82:	3001      	adds	r0, #1
   dad84:	bd08      	pop	{r3, pc}
   dad86:	bf00      	nop
   dad88:	2003e63c 	.word	0x2003e63c

000dad8c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dad8c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   dad90:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dad94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dad98:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dad9a:	d411      	bmi.n	dadc0 <_ZN9TimeClass4zoneEf+0x34>
   dad9c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   dada0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dada4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dada8:	dc0a      	bgt.n	dadc0 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   dadaa:	eddf 7a06 	vldr	s15, [pc, #24]	; dadc4 <_ZN9TimeClass4zoneEf+0x38>
   dadae:	ee60 7a27 	vmul.f32	s15, s0, s15
   dadb2:	ee17 0a90 	vmov	r0, s15
   dadb6:	f001 f8f3 	bl	dbfa0 <__aeabi_f2lz>
   dadba:	4b03      	ldr	r3, [pc, #12]	; (dadc8 <_ZN9TimeClass4zoneEf+0x3c>)
   dadbc:	e9c3 0100 	strd	r0, r1, [r3]
}
   dadc0:	bd08      	pop	{r3, pc}
   dadc2:	bf00      	nop
   dadc4:	45610000 	.word	0x45610000
   dadc8:	2003e668 	.word	0x2003e668

000dadcc <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   dadcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   dadd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dadd4:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   dadd6:	d411      	bmi.n	dadfc <_ZN9TimeClass12setDSTOffsetEf+0x30>
   dadd8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   daddc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dade0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dade4:	dc0a      	bgt.n	dadfc <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   dade6:	eddf 7a06 	vldr	s15, [pc, #24]	; dae00 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   dadea:	ee60 7a27 	vmul.f32	s15, s0, s15
   dadee:	ee17 0a90 	vmov	r0, s15
   dadf2:	f001 f8d5 	bl	dbfa0 <__aeabi_f2lz>
   dadf6:	4b03      	ldr	r3, [pc, #12]	; (dae04 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   dadf8:	e9c3 0100 	strd	r0, r1, [r3]
}
   dadfc:	bd08      	pop	{r3, pc}
   dadfe:	bf00      	nop
   dae00:	45610000 	.word	0x45610000
   dae04:	2003e2b0 	.word	0x2003e2b0

000dae08 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   dae08:	4b03      	ldr	r3, [pc, #12]	; (dae18 <_ZN9TimeClass8beginDSTEv+0x10>)
   dae0a:	e9d3 0100 	ldrd	r0, r1, [r3]
   dae0e:	4b03      	ldr	r3, [pc, #12]	; (dae1c <_ZN9TimeClass8beginDSTEv+0x14>)
   dae10:	e9c3 0100 	strd	r0, r1, [r3]
}
   dae14:	4770      	bx	lr
   dae16:	bf00      	nop
   dae18:	2003e2b0 	.word	0x2003e2b0
   dae1c:	2003e660 	.word	0x2003e660

000dae20 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   dae20:	4b02      	ldr	r3, [pc, #8]	; (dae2c <_ZN9TimeClass6endDSTEv+0xc>)
   dae22:	2000      	movs	r0, #0
   dae24:	2100      	movs	r1, #0
   dae26:	e9c3 0100 	strd	r0, r1, [r3]
}
   dae2a:	4770      	bx	lr
   dae2c:	2003e660 	.word	0x2003e660

000dae30 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dae30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dae32:	4602      	mov	r2, r0
   dae34:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dae36:	4668      	mov	r0, sp
    struct timeval tv = {
   dae38:	2100      	movs	r1, #0
    };
   dae3a:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dae3e:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dae42:	f7fc ff8f 	bl	d7d64 <hal_rtc_set_time>
   dae46:	4602      	mov	r2, r0
   dae48:	b910      	cbnz	r0, dae50 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dae4a:	4601      	mov	r1, r0
   dae4c:	f7fd f96c 	bl	d8128 <system_notify_time_changed>
    }
}
   dae50:	b005      	add	sp, #20
   dae52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dae58 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dae58:	b530      	push	{r4, r5, lr}
   dae5a:	4604      	mov	r4, r0
    t += time_zone_cache;
   dae5c:	4818      	ldr	r0, [pc, #96]	; (daec0 <_ZN9TimeClass7timeStrEx+0x68>)
   dae5e:	e9d0 1000 	ldrd	r1, r0, [r0]
   dae62:	1852      	adds	r2, r2, r1
   dae64:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dae68:	4816      	ldr	r0, [pc, #88]	; (daec4 <_ZN9TimeClass7timeStrEx+0x6c>)
   dae6a:	e9d0 1000 	ldrd	r1, r0, [r0]
   dae6e:	1852      	adds	r2, r2, r1
{
   dae70:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dae72:	eb40 0303 	adc.w	r3, r0, r3
   dae76:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dae7a:	2224      	movs	r2, #36	; 0x24
   dae7c:	eb0d 0002 	add.w	r0, sp, r2
   dae80:	2100      	movs	r1, #0
   dae82:	f001 f933 	bl	dc0ec <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dae86:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dae88:	a909      	add	r1, sp, #36	; 0x24
   dae8a:	4668      	mov	r0, sp
   dae8c:	f7fd faa6 	bl	d83dc <localtime_r>
    char ascstr[26] = {};
   dae90:	2216      	movs	r2, #22
   dae92:	4629      	mov	r1, r5
   dae94:	a803      	add	r0, sp, #12
   dae96:	9502      	str	r5, [sp, #8]
   dae98:	f001 f928 	bl	dc0ec <memset>
    asctime_r(&calendar_time, ascstr);
   dae9c:	a902      	add	r1, sp, #8
   dae9e:	a809      	add	r0, sp, #36	; 0x24
   daea0:	f001 f8b2 	bl	dc008 <asctime_r>
    int len = strlen(ascstr);
   daea4:	a802      	add	r0, sp, #8
   daea6:	f001 f994 	bl	dc1d2 <strlen>
    ascstr[len-1] = 0; // remove final newline
   daeaa:	ab12      	add	r3, sp, #72	; 0x48
   daeac:	4418      	add	r0, r3
    return String(ascstr);
   daeae:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   daeb0:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   daeb4:	4620      	mov	r0, r4
   daeb6:	f7ff fd8c 	bl	da9d2 <_ZN6StringC1EPKc>
}
   daeba:	4620      	mov	r0, r4
   daebc:	b013      	add	sp, #76	; 0x4c
   daebe:	bd30      	pop	{r4, r5, pc}
   daec0:	2003e668 	.word	0x2003e668
   daec4:	2003e660 	.word	0x2003e660

000daec8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   daec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daecc:	b0a5      	sub	sp, #148	; 0x94
   daece:	4607      	mov	r7, r0
   daed0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   daed2:	a814      	add	r0, sp, #80	; 0x50
{
   daed4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   daed6:	223f      	movs	r2, #63	; 0x3f
{
   daed8:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   daeda:	f001 f994 	bl	dc206 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   daede:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   daee0:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   daee2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   daee6:	f001 f974 	bl	dc1d2 <strlen>
   daeea:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   daeec:	bb5d      	cbnz	r5, daf46 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   daeee:	492a      	ldr	r1, [pc, #168]	; (daf98 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   daef0:	a803      	add	r0, sp, #12
   daef2:	f001 f948 	bl	dc186 <strcpy>
   daef6:	ae14      	add	r6, sp, #80	; 0x50
{
   daef8:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   daefa:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   daefe:	45ab      	cmp	fp, r5
   daf00:	d936      	bls.n	daf70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   daf02:	46b1      	mov	r9, r6
   daf04:	f105 0a01 	add.w	sl, r5, #1
   daf08:	f819 3b01 	ldrb.w	r3, [r9], #1
   daf0c:	2b25      	cmp	r3, #37	; 0x25
   daf0e:	d117      	bne.n	daf40 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   daf10:	7873      	ldrb	r3, [r6, #1]
   daf12:	2b7a      	cmp	r3, #122	; 0x7a
   daf14:	d114      	bne.n	daf40 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   daf16:	a803      	add	r0, sp, #12
   daf18:	f001 f95b 	bl	dc1d2 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   daf1c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   daf1e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   daf20:	1828      	adds	r0, r5, r0
   daf22:	4418      	add	r0, r3
   daf24:	ebab 0205 	sub.w	r2, fp, r5
   daf28:	1cb1      	adds	r1, r6, #2
   daf2a:	f001 f8b7 	bl	dc09c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   daf2e:	4622      	mov	r2, r4
   daf30:	a903      	add	r1, sp, #12
   daf32:	4630      	mov	r0, r6
   daf34:	f001 f8b2 	bl	dc09c <memcpy>
            len = strlen(format_str);
   daf38:	a814      	add	r0, sp, #80	; 0x50
   daf3a:	f001 f94a 	bl	dc1d2 <strlen>
   daf3e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   daf40:	464e      	mov	r6, r9
   daf42:	4655      	mov	r5, sl
   daf44:	e7d9      	b.n	daefa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   daf46:	213c      	movs	r1, #60	; 0x3c
   daf48:	fb95 f3f1 	sdiv	r3, r5, r1
   daf4c:	2b00      	cmp	r3, #0
   daf4e:	bfb8      	it	lt
   daf50:	425b      	neglt	r3, r3
   daf52:	fbb3 f2f1 	udiv	r2, r3, r1
   daf56:	fb01 3312 	mls	r3, r1, r2, r3
   daf5a:	9300      	str	r3, [sp, #0]
   daf5c:	4a0f      	ldr	r2, [pc, #60]	; (daf9c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   daf5e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   daf62:	2110      	movs	r1, #16
   daf64:	a803      	add	r0, sp, #12
   daf66:	fb95 f3f3 	sdiv	r3, r5, r3
   daf6a:	f7fd fa07 	bl	d837c <snprintf>
   daf6e:	e7c2      	b.n	daef6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   daf70:	2100      	movs	r1, #0
   daf72:	222e      	movs	r2, #46	; 0x2e
   daf74:	a808      	add	r0, sp, #32
   daf76:	9107      	str	r1, [sp, #28]
   daf78:	f001 f8b8 	bl	dc0ec <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   daf7c:	4643      	mov	r3, r8
   daf7e:	aa14      	add	r2, sp, #80	; 0x50
   daf80:	2132      	movs	r1, #50	; 0x32
   daf82:	a807      	add	r0, sp, #28
   daf84:	f7fd fa22 	bl	d83cc <strftime>
    return String(buf);
   daf88:	a907      	add	r1, sp, #28
   daf8a:	4638      	mov	r0, r7
   daf8c:	f7ff fd21 	bl	da9d2 <_ZN6StringC1EPKc>
}
   daf90:	4638      	mov	r0, r7
   daf92:	b025      	add	sp, #148	; 0x94
   daf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daf98:	000dcf6e 	.word	0x000dcf6e
   daf9c:	000dcf70 	.word	0x000dcf70

000dafa0 <_ZN9TimeClass6formatExPKc>:
{
   dafa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dafa2:	b08d      	sub	sp, #52	; 0x34
   dafa4:	e9cd 2300 	strd	r2, r3, [sp]
   dafa8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dafaa:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dafac:	b915      	cbnz	r5, dafb4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dafae:	4b19      	ldr	r3, [pc, #100]	; (db014 <_ZN9TimeClass6formatExPKc+0x74>)
   dafb0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dafb2:	b12d      	cbz	r5, dafc0 <_ZN9TimeClass6formatExPKc+0x20>
   dafb4:	4b18      	ldr	r3, [pc, #96]	; (db018 <_ZN9TimeClass6formatExPKc+0x78>)
   dafb6:	4628      	mov	r0, r5
   dafb8:	6819      	ldr	r1, [r3, #0]
   dafba:	f001 f8da 	bl	dc172 <strcmp>
   dafbe:	b938      	cbnz	r0, dafd0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dafc0:	e9dd 2300 	ldrd	r2, r3, [sp]
   dafc4:	4620      	mov	r0, r4
   dafc6:	f7ff ff47 	bl	dae58 <_ZN9TimeClass7timeStrEx>
}
   dafca:	4620      	mov	r0, r4
   dafcc:	b00d      	add	sp, #52	; 0x34
   dafce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   dafd0:	4e12      	ldr	r6, [pc, #72]	; (db01c <_ZN9TimeClass6formatExPKc+0x7c>)
   dafd2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   dafd4:	4f12      	ldr	r7, [pc, #72]	; (db020 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   dafd6:	e9d6 3200 	ldrd	r3, r2, [r6]
   dafda:	185b      	adds	r3, r3, r1
   dafdc:	9901      	ldr	r1, [sp, #4]
   dafde:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dafe2:	e9d7 0100 	ldrd	r0, r1, [r7]
   dafe6:	181b      	adds	r3, r3, r0
   dafe8:	eb41 0202 	adc.w	r2, r1, r2
   dafec:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   daff0:	2100      	movs	r1, #0
   daff2:	2224      	movs	r2, #36	; 0x24
   daff4:	a803      	add	r0, sp, #12
   daff6:	f001 f879 	bl	dc0ec <memset>
    localtime_r(&t, &calendar_time);
   daffa:	a903      	add	r1, sp, #12
   daffc:	4668      	mov	r0, sp
   daffe:	f7fd f9ed 	bl	d83dc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   db002:	6832      	ldr	r2, [r6, #0]
   db004:	683b      	ldr	r3, [r7, #0]
   db006:	a903      	add	r1, sp, #12
   db008:	4413      	add	r3, r2
   db00a:	4620      	mov	r0, r4
   db00c:	462a      	mov	r2, r5
   db00e:	f7ff ff5b 	bl	daec8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   db012:	e7da      	b.n	dafca <_ZN9TimeClass6formatExPKc+0x2a>
   db014:	2003e638 	.word	0x2003e638
   db018:	2003e2ac 	.word	0x2003e2ac
   db01c:	2003e668 	.word	0x2003e668
   db020:	2003e660 	.word	0x2003e660

000db024 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   db024:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   db026:	2000      	movs	r0, #0
   db028:	f7fc fe84 	bl	d7d34 <hal_rtc_time_is_valid>
    if (rtcstate)
   db02c:	4604      	mov	r4, r0
   db02e:	b9a0      	cbnz	r0, db05a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   db030:	f7fd f83a 	bl	d80a8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   db034:	2801      	cmp	r0, #1
   db036:	d110      	bne.n	db05a <_ZN9TimeClass7isValidEv+0x36>
   db038:	4620      	mov	r0, r4
   db03a:	f7fd f86d 	bl	d8118 <system_thread_get_state>
   db03e:	b960      	cbnz	r0, db05a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   db040:	f7ff fe72 	bl	dad28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   db044:	b910      	cbnz	r0, db04c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   db046:	f7fd f8b9 	bl	d81bc <spark_process>
        while (_while() && !_condition()) {
   db04a:	e7f9      	b.n	db040 <_ZN9TimeClass7isValidEv+0x1c>
   db04c:	f7ff fe6c 	bl	dad28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   db050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   db054:	2000      	movs	r0, #0
   db056:	f7fc be6d 	b.w	d7d34 <hal_rtc_time_is_valid>
}
   db05a:	4620      	mov	r0, r4
   db05c:	bd10      	pop	{r4, pc}

000db05e <_ZN9TimeClass3nowEv>:
{
   db05e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   db060:	f7ff ffe0 	bl	db024 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   db064:	2210      	movs	r2, #16
   db066:	2100      	movs	r1, #0
   db068:	4668      	mov	r0, sp
   db06a:	f001 f83f 	bl	dc0ec <memset>
    hal_rtc_get_time(&tv, nullptr);
   db06e:	2100      	movs	r1, #0
   db070:	4668      	mov	r0, sp
   db072:	f7fc fe6f 	bl	d7d54 <hal_rtc_get_time>
}
   db076:	9800      	ldr	r0, [sp, #0]
   db078:	b005      	add	sp, #20
   db07a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db080 <_ZN9TimeClass4hourEv>:
{
   db080:	b508      	push	{r3, lr}
	return hour(now());
   db082:	f7ff ffec 	bl	db05e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db086:	17c1      	asrs	r1, r0, #31
   db088:	f7ff fe18 	bl	dacbc <_ZL22Refresh_UnixTime_Cachex>
}
   db08c:	4b01      	ldr	r3, [pc, #4]	; (db094 <_ZN9TimeClass4hourEv+0x14>)
   db08e:	6898      	ldr	r0, [r3, #8]
   db090:	bd08      	pop	{r3, pc}
   db092:	bf00      	nop
   db094:	2003e63c 	.word	0x2003e63c

000db098 <_ZN9TimeClass6minuteEv>:
{
   db098:	b508      	push	{r3, lr}
	return minute(now());
   db09a:	f7ff ffe0 	bl	db05e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db09e:	17c1      	asrs	r1, r0, #31
   db0a0:	f7ff fe0c 	bl	dacbc <_ZL22Refresh_UnixTime_Cachex>
}
   db0a4:	4b01      	ldr	r3, [pc, #4]	; (db0ac <_ZN9TimeClass6minuteEv+0x14>)
   db0a6:	6858      	ldr	r0, [r3, #4]
   db0a8:	bd08      	pop	{r3, pc}
   db0aa:	bf00      	nop
   db0ac:	2003e63c 	.word	0x2003e63c

000db0b0 <_ZN9TimeClass3dayEv>:
{
   db0b0:	b508      	push	{r3, lr}
	return day(now());
   db0b2:	f7ff ffd4 	bl	db05e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db0b6:	17c1      	asrs	r1, r0, #31
   db0b8:	f7ff fe00 	bl	dacbc <_ZL22Refresh_UnixTime_Cachex>
}
   db0bc:	4b01      	ldr	r3, [pc, #4]	; (db0c4 <_ZN9TimeClass3dayEv+0x14>)
   db0be:	68d8      	ldr	r0, [r3, #12]
   db0c0:	bd08      	pop	{r3, pc}
   db0c2:	bf00      	nop
   db0c4:	2003e63c 	.word	0x2003e63c

000db0c8 <_ZN9TimeClass7weekdayEv>:
{
   db0c8:	b508      	push	{r3, lr}
	return weekday(now());
   db0ca:	f7ff ffc8 	bl	db05e <_ZN9TimeClass3nowEv>
}
   db0ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   db0d2:	17c1      	asrs	r1, r0, #31
   db0d4:	f7ff be46 	b.w	dad64 <_ZN9TimeClass7weekdayEx>

000db0d8 <_ZN9TimeClass5monthEv>:
{
   db0d8:	b508      	push	{r3, lr}
	return month(now());
   db0da:	f7ff ffc0 	bl	db05e <_ZN9TimeClass3nowEv>
}
   db0de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   db0e2:	17c1      	asrs	r1, r0, #31
   db0e4:	f7ff be48 	b.w	dad78 <_ZN9TimeClass5monthEx>

000db0e8 <_ZN9TimeClass5localEv>:
{
   db0e8:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   db0ea:	f7ff ffb8 	bl	db05e <_ZN9TimeClass3nowEv>
   db0ee:	4b03      	ldr	r3, [pc, #12]	; (db0fc <_ZN9TimeClass5localEv+0x14>)
   db0f0:	4a03      	ldr	r2, [pc, #12]	; (db100 <_ZN9TimeClass5localEv+0x18>)
   db0f2:	681b      	ldr	r3, [r3, #0]
   db0f4:	6812      	ldr	r2, [r2, #0]
   db0f6:	4413      	add	r3, r2
}
   db0f8:	4418      	add	r0, r3
   db0fa:	bd08      	pop	{r3, pc}
   db0fc:	2003e668 	.word	0x2003e668
   db100:	2003e660 	.word	0x2003e660

000db104 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   db104:	4b02      	ldr	r3, [pc, #8]	; (db110 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   db106:	681a      	ldr	r2, [r3, #0]
   db108:	4b02      	ldr	r3, [pc, #8]	; (db114 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   db10a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   db10c:	4770      	bx	lr
   db10e:	bf00      	nop
   db110:	2003e2ac 	.word	0x2003e2ac
   db114:	2003e638 	.word	0x2003e638

000db118 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   db118:	4770      	bx	lr

000db11a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db11a:	7441      	strb	r1, [r0, #17]
}
   db11c:	4770      	bx	lr

000db11e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   db11e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   db120:	7c00      	ldrb	r0, [r0, #16]
   db122:	f7fc ff3f 	bl	d7fa4 <hal_usart_available_data_for_write>
}
   db126:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db12a:	bd08      	pop	{r3, pc}

000db12c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db12c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   db12e:	7c00      	ldrb	r0, [r0, #16]
   db130:	f7fc ff10 	bl	d7f54 <hal_usart_available>
}
   db134:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db138:	bd08      	pop	{r3, pc}

000db13a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db13a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   db13c:	7c00      	ldrb	r0, [r0, #16]
   db13e:	f7fc ff19 	bl	d7f74 <hal_usart_peek>
}
   db142:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db146:	bd08      	pop	{r3, pc}

000db148 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db148:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   db14a:	7c00      	ldrb	r0, [r0, #16]
   db14c:	f7fc ff0a 	bl	d7f64 <hal_usart_read>
}
   db150:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db154:	bd08      	pop	{r3, pc}

000db156 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   db156:	7c00      	ldrb	r0, [r0, #16]
   db158:	f7fc bf14 	b.w	d7f84 <hal_usart_flush>

000db15c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db15e:	7c45      	ldrb	r5, [r0, #17]
{
   db160:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db162:	b12d      	cbz	r5, db170 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   db164:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db166:	b003      	add	sp, #12
   db168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   db16c:	f7fc beea 	b.w	d7f44 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db170:	7c00      	ldrb	r0, [r0, #16]
   db172:	9101      	str	r1, [sp, #4]
   db174:	f7fc ff16 	bl	d7fa4 <hal_usart_available_data_for_write>
   db178:	2800      	cmp	r0, #0
   db17a:	9901      	ldr	r1, [sp, #4]
   db17c:	dcf2      	bgt.n	db164 <_ZN11USARTSerial5writeEh+0x8>
}
   db17e:	4628      	mov	r0, r5
   db180:	b003      	add	sp, #12
   db182:	bd30      	pop	{r4, r5, pc}

000db184 <_ZN11USARTSerialD0Ev>:
   db184:	b510      	push	{r4, lr}
   db186:	2114      	movs	r1, #20
   db188:	4604      	mov	r4, r0
   db18a:	f000 fa9a 	bl	db6c2 <_ZdlPvj>
   db18e:	4620      	mov	r0, r4
   db190:	bd10      	pop	{r4, pc}
	...

000db194 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db194:	b510      	push	{r4, lr}
   db196:	f04f 0c00 	mov.w	ip, #0
   db19a:	4604      	mov	r4, r0
   db19c:	4608      	mov	r0, r1
   db19e:	4611      	mov	r1, r2
   db1a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db1a4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db1a8:	4a04      	ldr	r2, [pc, #16]	; (db1bc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db1aa:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db1ac:	2201      	movs	r2, #1
  _serial = serial;
   db1ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db1b0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db1b2:	461a      	mov	r2, r3
   db1b4:	f7fc feb6 	bl	d7f24 <hal_usart_init>
}
   db1b8:	4620      	mov	r0, r4
   db1ba:	bd10      	pop	{r4, pc}
   db1bc:	000dcfa0 	.word	0x000dcfa0

000db1c0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   db1c0:	7c00      	ldrb	r0, [r0, #16]
   db1c2:	2300      	movs	r3, #0
   db1c4:	f7fc bef6 	b.w	d7fb4 <hal_usart_begin_config>

000db1c8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   db1c8:	2200      	movs	r2, #0
   db1ca:	f7ff bff9 	b.w	db1c0 <_ZN11USARTSerial5beginEmm>

000db1ce <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   db1ce:	7c00      	ldrb	r0, [r0, #16]
   db1d0:	f7fc beb0 	b.w	d7f34 <hal_usart_end>

000db1d4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db1d4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db1d6:	4c0e      	ldr	r4, [pc, #56]	; (db210 <_Z22__fetch_global_Serial1v+0x3c>)
   db1d8:	7821      	ldrb	r1, [r4, #0]
   db1da:	f3bf 8f5b 	dmb	ish
   db1de:	f011 0101 	ands.w	r1, r1, #1
   db1e2:	d112      	bne.n	db20a <_Z22__fetch_global_Serial1v+0x36>
   db1e4:	4620      	mov	r0, r4
   db1e6:	9101      	str	r1, [sp, #4]
   db1e8:	f7f8 ff66 	bl	d40b8 <__cxa_guard_acquire>
   db1ec:	9901      	ldr	r1, [sp, #4]
   db1ee:	b160      	cbz	r0, db20a <_Z22__fetch_global_Serial1v+0x36>
   db1f0:	4a08      	ldr	r2, [pc, #32]	; (db214 <_Z22__fetch_global_Serial1v+0x40>)
   db1f2:	4b09      	ldr	r3, [pc, #36]	; (db218 <_Z22__fetch_global_Serial1v+0x44>)
   db1f4:	4809      	ldr	r0, [pc, #36]	; (db21c <_Z22__fetch_global_Serial1v+0x48>)
   db1f6:	f7ff ffcd 	bl	db194 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db1fa:	4620      	mov	r0, r4
   db1fc:	f7f8 ff61 	bl	d40c2 <__cxa_guard_release>
   db200:	4a07      	ldr	r2, [pc, #28]	; (db220 <_Z22__fetch_global_Serial1v+0x4c>)
   db202:	4908      	ldr	r1, [pc, #32]	; (db224 <_Z22__fetch_global_Serial1v+0x50>)
   db204:	4805      	ldr	r0, [pc, #20]	; (db21c <_Z22__fetch_global_Serial1v+0x48>)
   db206:	f000 fa57 	bl	db6b8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db20a:	4804      	ldr	r0, [pc, #16]	; (db21c <_Z22__fetch_global_Serial1v+0x48>)
   db20c:	b002      	add	sp, #8
   db20e:	bd10      	pop	{r4, pc}
   db210:	2003e678 	.word	0x2003e678
   db214:	2003e67c 	.word	0x2003e67c
   db218:	2003e700 	.word	0x2003e700
   db21c:	2003e784 	.word	0x2003e784
   db220:	2003e320 	.word	0x2003e320
   db224:	000db119 	.word	0x000db119

000db228 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db228:	7441      	strb	r1, [r0, #17]
}
   db22a:	4770      	bx	lr

000db22c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db22c:	4770      	bx	lr

000db22e <_ZN9USBSerial4readEv>:
{
   db22e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db230:	2100      	movs	r1, #0
   db232:	7c00      	ldrb	r0, [r0, #16]
   db234:	f7fc feee 	bl	d8014 <HAL_USB_USART_Receive_Data>
}
   db238:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db23c:	bd08      	pop	{r3, pc}

000db23e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   db23e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db240:	2101      	movs	r1, #1
   db242:	7c00      	ldrb	r0, [r0, #16]
   db244:	f7fc fee6 	bl	d8014 <HAL_USB_USART_Receive_Data>
}
   db248:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db24c:	bd08      	pop	{r3, pc}

000db24e <_ZN9USBSerial17availableForWriteEv>:
{
   db24e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db250:	7c00      	ldrb	r0, [r0, #16]
   db252:	f7fc fed7 	bl	d8004 <HAL_USB_USART_Available_Data_For_Write>
}
   db256:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db25a:	bd08      	pop	{r3, pc}

000db25c <_ZN9USBSerial9availableEv>:
{
   db25c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db25e:	7c00      	ldrb	r0, [r0, #16]
   db260:	f7fc fec8 	bl	d7ff4 <HAL_USB_USART_Available_Data>
}
   db264:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db268:	bd08      	pop	{r3, pc}

000db26a <_ZN9USBSerial5writeEh>:
{
   db26a:	b513      	push	{r0, r1, r4, lr}
   db26c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db26e:	7c00      	ldrb	r0, [r0, #16]
{
   db270:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db272:	f7fc fec7 	bl	d8004 <HAL_USB_USART_Available_Data_For_Write>
   db276:	2800      	cmp	r0, #0
   db278:	9901      	ldr	r1, [sp, #4]
   db27a:	dc01      	bgt.n	db280 <_ZN9USBSerial5writeEh+0x16>
   db27c:	7c60      	ldrb	r0, [r4, #17]
   db27e:	b120      	cbz	r0, db28a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db280:	7c20      	ldrb	r0, [r4, #16]
   db282:	f7fc fecf 	bl	d8024 <HAL_USB_USART_Send_Data>
   db286:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db28a:	b002      	add	sp, #8
   db28c:	bd10      	pop	{r4, pc}

000db28e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db28e:	7c00      	ldrb	r0, [r0, #16]
   db290:	f7fc bed0 	b.w	d8034 <HAL_USB_USART_Flush_Data>

000db294 <_ZN9USBSerialD0Ev>:
   db294:	b510      	push	{r4, lr}
   db296:	2114      	movs	r1, #20
   db298:	4604      	mov	r4, r0
   db29a:	f000 fa12 	bl	db6c2 <_ZdlPvj>
   db29e:	4620      	mov	r0, r4
   db2a0:	bd10      	pop	{r4, pc}
	...

000db2a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db2a4:	b510      	push	{r4, lr}
   db2a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db2aa:	4604      	mov	r4, r0
   db2ac:	4608      	mov	r0, r1
   db2ae:	2100      	movs	r1, #0
   db2b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db2b4:	4b04      	ldr	r3, [pc, #16]	; (db2c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db2b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db2b8:	2301      	movs	r3, #1
  _serial = serial;
   db2ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db2bc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db2be:	4611      	mov	r1, r2
   db2c0:	f7fc fe80 	bl	d7fc4 <HAL_USB_USART_Init>
}
   db2c4:	4620      	mov	r0, r4
   db2c6:	bd10      	pop	{r4, pc}
   db2c8:	000dcfd0 	.word	0x000dcfd0

000db2cc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db2cc:	7c00      	ldrb	r0, [r0, #16]
   db2ce:	2200      	movs	r2, #0
   db2d0:	f7fc be80 	b.w	d7fd4 <HAL_USB_USART_Begin>

000db2d4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   db2d4:	7c00      	ldrb	r0, [r0, #16]
   db2d6:	f7fc be85 	b.w	d7fe4 <HAL_USB_USART_End>

000db2da <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db2da:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db2dc:	2214      	movs	r2, #20
{
   db2de:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db2e0:	2100      	movs	r1, #0
   db2e2:	f000 ff03 	bl	dc0ec <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db2e6:	4620      	mov	r0, r4
   db2e8:	bd10      	pop	{r4, pc}
	...

000db2ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db2ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db2ee:	4c10      	ldr	r4, [pc, #64]	; (db330 <_Z16_fetch_usbserialv+0x44>)
{
   db2f0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db2f2:	a803      	add	r0, sp, #12
   db2f4:	f7ff fff1 	bl	db2da <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db2f8:	7821      	ldrb	r1, [r4, #0]
   db2fa:	f3bf 8f5b 	dmb	ish
   db2fe:	f011 0101 	ands.w	r1, r1, #1
   db302:	d111      	bne.n	db328 <_Z16_fetch_usbserialv+0x3c>
   db304:	4620      	mov	r0, r4
   db306:	9101      	str	r1, [sp, #4]
   db308:	f7f8 fed6 	bl	d40b8 <__cxa_guard_acquire>
   db30c:	9901      	ldr	r1, [sp, #4]
   db30e:	b158      	cbz	r0, db328 <_Z16_fetch_usbserialv+0x3c>
   db310:	aa03      	add	r2, sp, #12
   db312:	4808      	ldr	r0, [pc, #32]	; (db334 <_Z16_fetch_usbserialv+0x48>)
   db314:	f7ff ffc6 	bl	db2a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db318:	4620      	mov	r0, r4
   db31a:	f7f8 fed2 	bl	d40c2 <__cxa_guard_release>
   db31e:	4a06      	ldr	r2, [pc, #24]	; (db338 <_Z16_fetch_usbserialv+0x4c>)
   db320:	4906      	ldr	r1, [pc, #24]	; (db33c <_Z16_fetch_usbserialv+0x50>)
   db322:	4804      	ldr	r0, [pc, #16]	; (db334 <_Z16_fetch_usbserialv+0x48>)
   db324:	f000 f9c8 	bl	db6b8 <__aeabi_atexit>
	return _usbserial;
}
   db328:	4802      	ldr	r0, [pc, #8]	; (db334 <_Z16_fetch_usbserialv+0x48>)
   db32a:	b008      	add	sp, #32
   db32c:	bd10      	pop	{r4, pc}
   db32e:	bf00      	nop
   db330:	2003e798 	.word	0x2003e798
   db334:	2003e79c 	.word	0x2003e79c
   db338:	2003e320 	.word	0x2003e320
   db33c:	000db22d 	.word	0x000db22d

000db340 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db340:	4b01      	ldr	r3, [pc, #4]	; (db348 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db342:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db344:	4770      	bx	lr
   db346:	bf00      	nop
   db348:	2003e2b8 	.word	0x2003e2b8

000db34c <serialEventRun>:
{
   db34c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db34e:	4b0b      	ldr	r3, [pc, #44]	; (db37c <serialEventRun+0x30>)
   db350:	b143      	cbz	r3, db364 <serialEventRun+0x18>
   db352:	f7ff ffcb 	bl	db2ec <_Z16_fetch_usbserialv>
   db356:	6803      	ldr	r3, [r0, #0]
   db358:	691b      	ldr	r3, [r3, #16]
   db35a:	4798      	blx	r3
   db35c:	2800      	cmp	r0, #0
   db35e:	dd01      	ble.n	db364 <serialEventRun+0x18>
        serialEvent();
   db360:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db364:	4b06      	ldr	r3, [pc, #24]	; (db380 <serialEventRun+0x34>)
   db366:	b143      	cbz	r3, db37a <serialEventRun+0x2e>
   db368:	f7ff ff34 	bl	db1d4 <_Z22__fetch_global_Serial1v>
   db36c:	6803      	ldr	r3, [r0, #0]
   db36e:	691b      	ldr	r3, [r3, #16]
   db370:	4798      	blx	r3
   db372:	2800      	cmp	r0, #0
   db374:	dd01      	ble.n	db37a <serialEventRun+0x2e>
        serialEvent1();
   db376:	f3af 8000 	nop.w
}
   db37a:	bd08      	pop	{r3, pc}
	...

000db384 <_post_loop>:
{
   db384:	b508      	push	{r3, lr}
	serialEventRun();
   db386:	f7ff ffe1 	bl	db34c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db38a:	f7fc fccb 	bl	d7d24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db38e:	4b01      	ldr	r3, [pc, #4]	; (db394 <_post_loop+0x10>)
   db390:	6018      	str	r0, [r3, #0]
}
   db392:	bd08      	pop	{r3, pc}
   db394:	2003e7c4 	.word	0x2003e7c4

000db398 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db398:	4802      	ldr	r0, [pc, #8]	; (db3a4 <_Z33system_initialize_user_backup_ramv+0xc>)
   db39a:	4a03      	ldr	r2, [pc, #12]	; (db3a8 <_Z33system_initialize_user_backup_ramv+0x10>)
   db39c:	4903      	ldr	r1, [pc, #12]	; (db3ac <_Z33system_initialize_user_backup_ramv+0x14>)
   db39e:	1a12      	subs	r2, r2, r0
   db3a0:	f000 be7c 	b.w	dc09c <memcpy>
   db3a4:	2003f400 	.word	0x2003f400
   db3a8:	2003fc04 	.word	0x2003fc04
   db3ac:	000dd190 	.word	0x000dd190

000db3b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db3b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db3b2:	2300      	movs	r3, #0
   db3b4:	9300      	str	r3, [sp, #0]
   db3b6:	461a      	mov	r2, r3
   db3b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db3bc:	f7fc fec6 	bl	d814c <system_ctrl_set_result>
}
   db3c0:	b003      	add	sp, #12
   db3c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db3c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db3c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db3ca:	8843      	ldrh	r3, [r0, #2]
   db3cc:	2b0a      	cmp	r3, #10
   db3ce:	d008      	beq.n	db3e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db3d0:	2b50      	cmp	r3, #80	; 0x50
   db3d2:	d10b      	bne.n	db3ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db3d4:	4b09      	ldr	r3, [pc, #36]	; (db3fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db3d6:	681b      	ldr	r3, [r3, #0]
   db3d8:	b14b      	cbz	r3, db3ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db3da:	b003      	add	sp, #12
   db3dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db3e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db3e2:	f7ff ffe5 	bl	db3b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db3e6:	b003      	add	sp, #12
   db3e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db3ec:	2300      	movs	r3, #0
   db3ee:	9300      	str	r3, [sp, #0]
   db3f0:	461a      	mov	r2, r3
   db3f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db3f6:	f7fc fea9 	bl	d814c <system_ctrl_set_result>
}
   db3fa:	e7f4      	b.n	db3e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db3fc:	2003e7b4 	.word	0x2003e7b4

000db400 <module_user_init_hook>:
{
   db400:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db402:	4c12      	ldr	r4, [pc, #72]	; (db44c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db404:	4812      	ldr	r0, [pc, #72]	; (db450 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db406:	4d13      	ldr	r5, [pc, #76]	; (db454 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db408:	2100      	movs	r1, #0
   db40a:	f7fc ffd7 	bl	d83bc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db40e:	6823      	ldr	r3, [r4, #0]
   db410:	42ab      	cmp	r3, r5
   db412:	4b11      	ldr	r3, [pc, #68]	; (db458 <module_user_init_hook+0x58>)
   db414:	bf0c      	ite	eq
   db416:	2201      	moveq	r2, #1
   db418:	2200      	movne	r2, #0
   db41a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db41c:	d002      	beq.n	db424 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   db41e:	f7ff ffbb 	bl	db398 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   db422:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db424:	f7fc fc66 	bl	d7cf4 <HAL_RNG_GetRandomNumber>
   db428:	4604      	mov	r4, r0
    srand(seed);
   db42a:	f000 fe67 	bl	dc0fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db42e:	4b0b      	ldr	r3, [pc, #44]	; (db45c <module_user_init_hook+0x5c>)
   db430:	b113      	cbz	r3, db438 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   db432:	4620      	mov	r0, r4
   db434:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db438:	2100      	movs	r1, #0
   db43a:	4808      	ldr	r0, [pc, #32]	; (db45c <module_user_init_hook+0x5c>)
   db43c:	f7fc ff0e 	bl	d825c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db444:	4806      	ldr	r0, [pc, #24]	; (db460 <module_user_init_hook+0x60>)
   db446:	2100      	movs	r1, #0
   db448:	f7fc be76 	b.w	d8138 <system_ctrl_set_app_request_handler>
   db44c:	2003fc00 	.word	0x2003fc00
   db450:	000db341 	.word	0x000db341
   db454:	9a271c1e 	.word	0x9a271c1e
   db458:	2003e7b0 	.word	0x2003e7b0
   db45c:	00000000 	.word	0x00000000
   db460:	000db3c9 	.word	0x000db3c9

000db464 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   db464:	b508      	push	{r3, lr}
   db466:	4b02      	ldr	r3, [pc, #8]	; (db470 <spark_protocol_instance+0xc>)
   db468:	681b      	ldr	r3, [r3, #0]
   db46a:	681b      	ldr	r3, [r3, #0]
   db46c:	9301      	str	r3, [sp, #4]
   db46e:	bd08      	pop	{r3, pc}
   db470:	0003025c 	.word	0x0003025c

000db474 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   db474:	b508      	push	{r3, lr}
   db476:	4b02      	ldr	r3, [pc, #8]	; (db480 <spark_protocol_set_product_id+0xc>)
   db478:	681b      	ldr	r3, [r3, #0]
   db47a:	685b      	ldr	r3, [r3, #4]
   db47c:	9301      	str	r3, [sp, #4]
   db47e:	bd08      	pop	{r3, pc}
   db480:	0003025c 	.word	0x0003025c

000db484 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   db484:	b508      	push	{r3, lr}
   db486:	4b02      	ldr	r3, [pc, #8]	; (db490 <spark_protocol_set_product_firmware_version+0xc>)
   db488:	681b      	ldr	r3, [r3, #0]
   db48a:	689b      	ldr	r3, [r3, #8]
   db48c:	9301      	str	r3, [sp, #4]
   db48e:	bd08      	pop	{r3, pc}
   db490:	0003025c 	.word	0x0003025c

000db494 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db494:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db496:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db498:	d902      	bls.n	db4a0 <pinAvailable+0xc>
    return false;
   db49a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db49c:	b002      	add	sp, #8
   db49e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db4a0:	f1a0 030b 	sub.w	r3, r0, #11
   db4a4:	2b02      	cmp	r3, #2
   db4a6:	d81a      	bhi.n	db4de <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db4a8:	4c17      	ldr	r4, [pc, #92]	; (db508 <pinAvailable+0x74>)
   db4aa:	7821      	ldrb	r1, [r4, #0]
   db4ac:	f3bf 8f5b 	dmb	ish
   db4b0:	f011 0101 	ands.w	r1, r1, #1
   db4b4:	d10b      	bne.n	db4ce <pinAvailable+0x3a>
   db4b6:	4620      	mov	r0, r4
   db4b8:	9101      	str	r1, [sp, #4]
   db4ba:	f7f8 fdfd 	bl	d40b8 <__cxa_guard_acquire>
   db4be:	9901      	ldr	r1, [sp, #4]
   db4c0:	b128      	cbz	r0, db4ce <pinAvailable+0x3a>
   db4c2:	4812      	ldr	r0, [pc, #72]	; (db50c <pinAvailable+0x78>)
   db4c4:	f7ff fa30 	bl	da928 <_ZN8SPIClassC1E19hal_spi_interface_t>
   db4c8:	4620      	mov	r0, r4
   db4ca:	f7f8 fdfa 	bl	d40c2 <__cxa_guard_release>
   db4ce:	4b0f      	ldr	r3, [pc, #60]	; (db50c <pinAvailable+0x78>)
   db4d0:	7818      	ldrb	r0, [r3, #0]
   db4d2:	f7fc fd1f 	bl	d7f14 <hal_spi_is_enabled>
   db4d6:	2800      	cmp	r0, #0
   db4d8:	d1df      	bne.n	db49a <pinAvailable+0x6>
  return true; // 'pin' is available
   db4da:	2001      	movs	r0, #1
   db4dc:	e7de      	b.n	db49c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db4de:	2801      	cmp	r0, #1
   db4e0:	d809      	bhi.n	db4f6 <pinAvailable+0x62>
   db4e2:	f000 f899 	bl	db618 <_Z19__fetch_global_Wirev>
   db4e6:	2100      	movs	r1, #0
   db4e8:	7c00      	ldrb	r0, [r0, #16]
   db4ea:	f7fc fccb 	bl	d7e84 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db4ee:	f080 0001 	eor.w	r0, r0, #1
   db4f2:	b2c0      	uxtb	r0, r0
   db4f4:	e7d2      	b.n	db49c <pinAvailable+0x8>
   db4f6:	3809      	subs	r0, #9
   db4f8:	2801      	cmp	r0, #1
   db4fa:	d8ee      	bhi.n	db4da <pinAvailable+0x46>
   db4fc:	f7ff fe6a 	bl	db1d4 <_Z22__fetch_global_Serial1v>
   db500:	7c00      	ldrb	r0, [r0, #16]
   db502:	f7fc fd47 	bl	d7f94 <hal_usart_is_enabled>
   db506:	e7f2      	b.n	db4ee <pinAvailable+0x5a>
   db508:	2003e7b8 	.word	0x2003e7b8
   db50c:	2003e7bc 	.word	0x2003e7bc

000db510 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db510:	2823      	cmp	r0, #35	; 0x23
{
   db512:	b538      	push	{r3, r4, r5, lr}
   db514:	4604      	mov	r4, r0
   db516:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db518:	d80a      	bhi.n	db530 <pinMode+0x20>
   db51a:	29ff      	cmp	r1, #255	; 0xff
   db51c:	d008      	beq.n	db530 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db51e:	f7ff ffb9 	bl	db494 <pinAvailable>
   db522:	b128      	cbz	r0, db530 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db524:	4629      	mov	r1, r5
   db526:	4620      	mov	r0, r4
}
   db528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db52c:	f7fc bc32 	b.w	d7d94 <HAL_Pin_Mode>
}
   db530:	bd38      	pop	{r3, r4, r5, pc}

000db532 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db532:	b538      	push	{r3, r4, r5, lr}
   db534:	4604      	mov	r4, r0
   db536:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db538:	f7fc fc34 	bl	d7da4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db53c:	28ff      	cmp	r0, #255	; 0xff
   db53e:	d010      	beq.n	db562 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db540:	2806      	cmp	r0, #6
   db542:	d804      	bhi.n	db54e <digitalWrite+0x1c>
   db544:	234d      	movs	r3, #77	; 0x4d
   db546:	fa23 f000 	lsr.w	r0, r3, r0
   db54a:	07c3      	lsls	r3, r0, #31
   db54c:	d409      	bmi.n	db562 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db54e:	4620      	mov	r0, r4
   db550:	f7ff ffa0 	bl	db494 <pinAvailable>
   db554:	b128      	cbz	r0, db562 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db556:	4629      	mov	r1, r5
   db558:	4620      	mov	r0, r4
}
   db55a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db55e:	f7fc bc29 	b.w	d7db4 <HAL_GPIO_Write>
}
   db562:	bd38      	pop	{r3, r4, r5, pc}

000db564 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   db564:	b510      	push	{r4, lr}
   db566:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db568:	f7fc fc1c 	bl	d7da4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   db56c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   db56e:	b2db      	uxtb	r3, r3
   db570:	2b01      	cmp	r3, #1
   db572:	d908      	bls.n	db586 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   db574:	4620      	mov	r0, r4
   db576:	f7ff ff8d 	bl	db494 <pinAvailable>
   db57a:	b120      	cbz	r0, db586 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   db57c:	4620      	mov	r0, r4
}
   db57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   db582:	f7fc bc1f 	b.w	d7dc4 <HAL_GPIO_Read>
}
   db586:	2000      	movs	r0, #0
   db588:	bd10      	pop	{r4, pc}

000db58a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db58a:	280d      	cmp	r0, #13
{
   db58c:	b510      	push	{r4, lr}
   db58e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   db590:	bf9c      	itt	ls
   db592:	340e      	addls	r4, #14
   db594:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db596:	4620      	mov	r0, r4
   db598:	f7ff ff7c 	bl	db494 <pinAvailable>
   db59c:	b150      	cbz	r0, db5b4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db59e:	2103      	movs	r1, #3
   db5a0:	4620      	mov	r0, r4
   db5a2:	f7fc fbef 	bl	d7d84 <HAL_Validate_Pin_Function>
   db5a6:	2803      	cmp	r0, #3
   db5a8:	d104      	bne.n	db5b4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   db5aa:	4620      	mov	r0, r4
}
   db5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   db5b0:	f7fc bc20 	b.w	d7df4 <hal_adc_read>
}
   db5b4:	2000      	movs	r0, #0
   db5b6:	bd10      	pop	{r4, pc}

000db5b8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   db5b8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   db5ba:	2300      	movs	r3, #0
   db5bc:	2520      	movs	r5, #32
   db5be:	8043      	strh	r3, [r0, #2]
   db5c0:	2314      	movs	r3, #20
{
   db5c2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   db5c4:	8003      	strh	r3, [r0, #0]
   db5c6:	6085      	str	r5, [r0, #8]
   db5c8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db5ca:	4906      	ldr	r1, [pc, #24]	; (db5e4 <_Z17acquireWireBufferv+0x2c>)
   db5cc:	4628      	mov	r0, r5
   db5ce:	f000 f87c 	bl	db6ca <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db5d2:	4904      	ldr	r1, [pc, #16]	; (db5e4 <_Z17acquireWireBufferv+0x2c>)
	};
   db5d4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db5d6:	4628      	mov	r0, r5
   db5d8:	f000 f877 	bl	db6ca <_ZnajRKSt9nothrow_t>
	};
   db5dc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   db5de:	4620      	mov	r0, r4
   db5e0:	bd38      	pop	{r3, r4, r5, pc}
   db5e2:	bf00      	nop
   db5e4:	000dcff8 	.word	0x000dcff8

000db5e8 <_Z18acquireWire1Bufferv>:
   db5e8:	b538      	push	{r3, r4, r5, lr}
   db5ea:	2300      	movs	r3, #0
   db5ec:	2520      	movs	r5, #32
   db5ee:	8043      	strh	r3, [r0, #2]
   db5f0:	2314      	movs	r3, #20
   db5f2:	4604      	mov	r4, r0
   db5f4:	8003      	strh	r3, [r0, #0]
   db5f6:	6085      	str	r5, [r0, #8]
   db5f8:	6105      	str	r5, [r0, #16]
   db5fa:	4906      	ldr	r1, [pc, #24]	; (db614 <_Z18acquireWire1Bufferv+0x2c>)
   db5fc:	4628      	mov	r0, r5
   db5fe:	f000 f864 	bl	db6ca <_ZnajRKSt9nothrow_t>
   db602:	4904      	ldr	r1, [pc, #16]	; (db614 <_Z18acquireWire1Bufferv+0x2c>)
   db604:	6060      	str	r0, [r4, #4]
   db606:	4628      	mov	r0, r5
   db608:	f000 f85f 	bl	db6ca <_ZnajRKSt9nothrow_t>
   db60c:	60e0      	str	r0, [r4, #12]
   db60e:	4620      	mov	r0, r4
   db610:	bd38      	pop	{r3, r4, r5, pc}
   db612:	bf00      	nop
   db614:	000dcff8 	.word	0x000dcff8

000db618 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db618:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db61a:	4d0f      	ldr	r5, [pc, #60]	; (db658 <_Z19__fetch_global_Wirev+0x40>)
   db61c:	7829      	ldrb	r1, [r5, #0]
   db61e:	f3bf 8f5b 	dmb	ish
   db622:	f011 0401 	ands.w	r4, r1, #1
{
   db626:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db628:	d113      	bne.n	db652 <_Z19__fetch_global_Wirev+0x3a>
   db62a:	4628      	mov	r0, r5
   db62c:	f7f8 fd44 	bl	d40b8 <__cxa_guard_acquire>
   db630:	b178      	cbz	r0, db652 <_Z19__fetch_global_Wirev+0x3a>
   db632:	a801      	add	r0, sp, #4
   db634:	f7ff ffc0 	bl	db5b8 <_Z17acquireWireBufferv>
   db638:	aa01      	add	r2, sp, #4
   db63a:	4621      	mov	r1, r4
   db63c:	4807      	ldr	r0, [pc, #28]	; (db65c <_Z19__fetch_global_Wirev+0x44>)
   db63e:	f7fd fca5 	bl	d8f8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db642:	4628      	mov	r0, r5
   db644:	f7f8 fd3d 	bl	d40c2 <__cxa_guard_release>
   db648:	4a05      	ldr	r2, [pc, #20]	; (db660 <_Z19__fetch_global_Wirev+0x48>)
   db64a:	4906      	ldr	r1, [pc, #24]	; (db664 <_Z19__fetch_global_Wirev+0x4c>)
   db64c:	4803      	ldr	r0, [pc, #12]	; (db65c <_Z19__fetch_global_Wirev+0x44>)
   db64e:	f000 f833 	bl	db6b8 <__aeabi_atexit>
	return wire;
}
   db652:	4802      	ldr	r0, [pc, #8]	; (db65c <_Z19__fetch_global_Wirev+0x44>)
   db654:	b007      	add	sp, #28
   db656:	bd30      	pop	{r4, r5, pc}
   db658:	2003e7c8 	.word	0x2003e7c8
   db65c:	2003e7d0 	.word	0x2003e7d0
   db660:	2003e320 	.word	0x2003e320
   db664:	000d8f35 	.word	0x000d8f35

000db668 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   db668:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db66a:	4c0f      	ldr	r4, [pc, #60]	; (db6a8 <_Z20__fetch_global_Wire1v+0x40>)
   db66c:	7823      	ldrb	r3, [r4, #0]
   db66e:	f3bf 8f5b 	dmb	ish
   db672:	07db      	lsls	r3, r3, #31
{
   db674:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db676:	d413      	bmi.n	db6a0 <_Z20__fetch_global_Wire1v+0x38>
   db678:	4620      	mov	r0, r4
   db67a:	f7f8 fd1d 	bl	d40b8 <__cxa_guard_acquire>
   db67e:	b178      	cbz	r0, db6a0 <_Z20__fetch_global_Wire1v+0x38>
   db680:	a801      	add	r0, sp, #4
   db682:	f7ff ffb1 	bl	db5e8 <_Z18acquireWire1Bufferv>
   db686:	aa01      	add	r2, sp, #4
   db688:	2101      	movs	r1, #1
   db68a:	4808      	ldr	r0, [pc, #32]	; (db6ac <_Z20__fetch_global_Wire1v+0x44>)
   db68c:	f7fd fc7e 	bl	d8f8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db690:	4620      	mov	r0, r4
   db692:	f7f8 fd16 	bl	d40c2 <__cxa_guard_release>
   db696:	4a06      	ldr	r2, [pc, #24]	; (db6b0 <_Z20__fetch_global_Wire1v+0x48>)
   db698:	4906      	ldr	r1, [pc, #24]	; (db6b4 <_Z20__fetch_global_Wire1v+0x4c>)
   db69a:	4804      	ldr	r0, [pc, #16]	; (db6ac <_Z20__fetch_global_Wire1v+0x44>)
   db69c:	f000 f80c 	bl	db6b8 <__aeabi_atexit>
	return wire;
}
   db6a0:	4802      	ldr	r0, [pc, #8]	; (db6ac <_Z20__fetch_global_Wire1v+0x44>)
   db6a2:	b006      	add	sp, #24
   db6a4:	bd10      	pop	{r4, pc}
   db6a6:	bf00      	nop
   db6a8:	2003e7cc 	.word	0x2003e7cc
   db6ac:	2003e7e4 	.word	0x2003e7e4
   db6b0:	2003e320 	.word	0x2003e320
   db6b4:	000d8f35 	.word	0x000d8f35

000db6b8 <__aeabi_atexit>:
   db6b8:	460b      	mov	r3, r1
   db6ba:	4601      	mov	r1, r0
   db6bc:	4618      	mov	r0, r3
   db6be:	f000 bccd 	b.w	dc05c <__cxa_atexit>

000db6c2 <_ZdlPvj>:
   db6c2:	f7f8 bcec 	b.w	d409e <_ZdlPv>

000db6c6 <_ZnwjRKSt9nothrow_t>:
   db6c6:	f7f8 bce6 	b.w	d4096 <_Znwj>

000db6ca <_ZnajRKSt9nothrow_t>:
   db6ca:	f7f8 bce6 	b.w	d409a <_Znaj>

000db6ce <_ZSt25__throw_bad_function_callv>:
   db6ce:	b508      	push	{r3, lr}
   db6d0:	f7fc fe64 	bl	d839c <abort>

000db6d4 <__aeabi_drsub>:
   db6d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db6d8:	e002      	b.n	db6e0 <__adddf3>
   db6da:	bf00      	nop

000db6dc <__aeabi_dsub>:
   db6dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db6e0 <__adddf3>:
   db6e0:	b530      	push	{r4, r5, lr}
   db6e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db6e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db6ea:	ea94 0f05 	teq	r4, r5
   db6ee:	bf08      	it	eq
   db6f0:	ea90 0f02 	teqeq	r0, r2
   db6f4:	bf1f      	itttt	ne
   db6f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   db6fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   db6fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db702:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db706:	f000 80e2 	beq.w	db8ce <__adddf3+0x1ee>
   db70a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db70e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db712:	bfb8      	it	lt
   db714:	426d      	neglt	r5, r5
   db716:	dd0c      	ble.n	db732 <__adddf3+0x52>
   db718:	442c      	add	r4, r5
   db71a:	ea80 0202 	eor.w	r2, r0, r2
   db71e:	ea81 0303 	eor.w	r3, r1, r3
   db722:	ea82 0000 	eor.w	r0, r2, r0
   db726:	ea83 0101 	eor.w	r1, r3, r1
   db72a:	ea80 0202 	eor.w	r2, r0, r2
   db72e:	ea81 0303 	eor.w	r3, r1, r3
   db732:	2d36      	cmp	r5, #54	; 0x36
   db734:	bf88      	it	hi
   db736:	bd30      	pophi	{r4, r5, pc}
   db738:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db73c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db740:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db744:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db748:	d002      	beq.n	db750 <__adddf3+0x70>
   db74a:	4240      	negs	r0, r0
   db74c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db750:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db754:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db758:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db75c:	d002      	beq.n	db764 <__adddf3+0x84>
   db75e:	4252      	negs	r2, r2
   db760:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db764:	ea94 0f05 	teq	r4, r5
   db768:	f000 80a7 	beq.w	db8ba <__adddf3+0x1da>
   db76c:	f1a4 0401 	sub.w	r4, r4, #1
   db770:	f1d5 0e20 	rsbs	lr, r5, #32
   db774:	db0d      	blt.n	db792 <__adddf3+0xb2>
   db776:	fa02 fc0e 	lsl.w	ip, r2, lr
   db77a:	fa22 f205 	lsr.w	r2, r2, r5
   db77e:	1880      	adds	r0, r0, r2
   db780:	f141 0100 	adc.w	r1, r1, #0
   db784:	fa03 f20e 	lsl.w	r2, r3, lr
   db788:	1880      	adds	r0, r0, r2
   db78a:	fa43 f305 	asr.w	r3, r3, r5
   db78e:	4159      	adcs	r1, r3
   db790:	e00e      	b.n	db7b0 <__adddf3+0xd0>
   db792:	f1a5 0520 	sub.w	r5, r5, #32
   db796:	f10e 0e20 	add.w	lr, lr, #32
   db79a:	2a01      	cmp	r2, #1
   db79c:	fa03 fc0e 	lsl.w	ip, r3, lr
   db7a0:	bf28      	it	cs
   db7a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   db7a6:	fa43 f305 	asr.w	r3, r3, r5
   db7aa:	18c0      	adds	r0, r0, r3
   db7ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db7b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db7b4:	d507      	bpl.n	db7c6 <__adddf3+0xe6>
   db7b6:	f04f 0e00 	mov.w	lr, #0
   db7ba:	f1dc 0c00 	rsbs	ip, ip, #0
   db7be:	eb7e 0000 	sbcs.w	r0, lr, r0
   db7c2:	eb6e 0101 	sbc.w	r1, lr, r1
   db7c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db7ca:	d31b      	bcc.n	db804 <__adddf3+0x124>
   db7cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db7d0:	d30c      	bcc.n	db7ec <__adddf3+0x10c>
   db7d2:	0849      	lsrs	r1, r1, #1
   db7d4:	ea5f 0030 	movs.w	r0, r0, rrx
   db7d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db7dc:	f104 0401 	add.w	r4, r4, #1
   db7e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db7e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db7e8:	f080 809a 	bcs.w	db920 <__adddf3+0x240>
   db7ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db7f0:	bf08      	it	eq
   db7f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db7f6:	f150 0000 	adcs.w	r0, r0, #0
   db7fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db7fe:	ea41 0105 	orr.w	r1, r1, r5
   db802:	bd30      	pop	{r4, r5, pc}
   db804:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db808:	4140      	adcs	r0, r0
   db80a:	eb41 0101 	adc.w	r1, r1, r1
   db80e:	3c01      	subs	r4, #1
   db810:	bf28      	it	cs
   db812:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db816:	d2e9      	bcs.n	db7ec <__adddf3+0x10c>
   db818:	f091 0f00 	teq	r1, #0
   db81c:	bf04      	itt	eq
   db81e:	4601      	moveq	r1, r0
   db820:	2000      	moveq	r0, #0
   db822:	fab1 f381 	clz	r3, r1
   db826:	bf08      	it	eq
   db828:	3320      	addeq	r3, #32
   db82a:	f1a3 030b 	sub.w	r3, r3, #11
   db82e:	f1b3 0220 	subs.w	r2, r3, #32
   db832:	da0c      	bge.n	db84e <__adddf3+0x16e>
   db834:	320c      	adds	r2, #12
   db836:	dd08      	ble.n	db84a <__adddf3+0x16a>
   db838:	f102 0c14 	add.w	ip, r2, #20
   db83c:	f1c2 020c 	rsb	r2, r2, #12
   db840:	fa01 f00c 	lsl.w	r0, r1, ip
   db844:	fa21 f102 	lsr.w	r1, r1, r2
   db848:	e00c      	b.n	db864 <__adddf3+0x184>
   db84a:	f102 0214 	add.w	r2, r2, #20
   db84e:	bfd8      	it	le
   db850:	f1c2 0c20 	rsble	ip, r2, #32
   db854:	fa01 f102 	lsl.w	r1, r1, r2
   db858:	fa20 fc0c 	lsr.w	ip, r0, ip
   db85c:	bfdc      	itt	le
   db85e:	ea41 010c 	orrle.w	r1, r1, ip
   db862:	4090      	lslle	r0, r2
   db864:	1ae4      	subs	r4, r4, r3
   db866:	bfa2      	ittt	ge
   db868:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db86c:	4329      	orrge	r1, r5
   db86e:	bd30      	popge	{r4, r5, pc}
   db870:	ea6f 0404 	mvn.w	r4, r4
   db874:	3c1f      	subs	r4, #31
   db876:	da1c      	bge.n	db8b2 <__adddf3+0x1d2>
   db878:	340c      	adds	r4, #12
   db87a:	dc0e      	bgt.n	db89a <__adddf3+0x1ba>
   db87c:	f104 0414 	add.w	r4, r4, #20
   db880:	f1c4 0220 	rsb	r2, r4, #32
   db884:	fa20 f004 	lsr.w	r0, r0, r4
   db888:	fa01 f302 	lsl.w	r3, r1, r2
   db88c:	ea40 0003 	orr.w	r0, r0, r3
   db890:	fa21 f304 	lsr.w	r3, r1, r4
   db894:	ea45 0103 	orr.w	r1, r5, r3
   db898:	bd30      	pop	{r4, r5, pc}
   db89a:	f1c4 040c 	rsb	r4, r4, #12
   db89e:	f1c4 0220 	rsb	r2, r4, #32
   db8a2:	fa20 f002 	lsr.w	r0, r0, r2
   db8a6:	fa01 f304 	lsl.w	r3, r1, r4
   db8aa:	ea40 0003 	orr.w	r0, r0, r3
   db8ae:	4629      	mov	r1, r5
   db8b0:	bd30      	pop	{r4, r5, pc}
   db8b2:	fa21 f004 	lsr.w	r0, r1, r4
   db8b6:	4629      	mov	r1, r5
   db8b8:	bd30      	pop	{r4, r5, pc}
   db8ba:	f094 0f00 	teq	r4, #0
   db8be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db8c2:	bf06      	itte	eq
   db8c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db8c8:	3401      	addeq	r4, #1
   db8ca:	3d01      	subne	r5, #1
   db8cc:	e74e      	b.n	db76c <__adddf3+0x8c>
   db8ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db8d2:	bf18      	it	ne
   db8d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db8d8:	d029      	beq.n	db92e <__adddf3+0x24e>
   db8da:	ea94 0f05 	teq	r4, r5
   db8de:	bf08      	it	eq
   db8e0:	ea90 0f02 	teqeq	r0, r2
   db8e4:	d005      	beq.n	db8f2 <__adddf3+0x212>
   db8e6:	ea54 0c00 	orrs.w	ip, r4, r0
   db8ea:	bf04      	itt	eq
   db8ec:	4619      	moveq	r1, r3
   db8ee:	4610      	moveq	r0, r2
   db8f0:	bd30      	pop	{r4, r5, pc}
   db8f2:	ea91 0f03 	teq	r1, r3
   db8f6:	bf1e      	ittt	ne
   db8f8:	2100      	movne	r1, #0
   db8fa:	2000      	movne	r0, #0
   db8fc:	bd30      	popne	{r4, r5, pc}
   db8fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db902:	d105      	bne.n	db910 <__adddf3+0x230>
   db904:	0040      	lsls	r0, r0, #1
   db906:	4149      	adcs	r1, r1
   db908:	bf28      	it	cs
   db90a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db90e:	bd30      	pop	{r4, r5, pc}
   db910:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db914:	bf3c      	itt	cc
   db916:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db91a:	bd30      	popcc	{r4, r5, pc}
   db91c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db920:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db924:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db928:	f04f 0000 	mov.w	r0, #0
   db92c:	bd30      	pop	{r4, r5, pc}
   db92e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db932:	bf1a      	itte	ne
   db934:	4619      	movne	r1, r3
   db936:	4610      	movne	r0, r2
   db938:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db93c:	bf1c      	itt	ne
   db93e:	460b      	movne	r3, r1
   db940:	4602      	movne	r2, r0
   db942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db946:	bf06      	itte	eq
   db948:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db94c:	ea91 0f03 	teqeq	r1, r3
   db950:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db954:	bd30      	pop	{r4, r5, pc}
   db956:	bf00      	nop

000db958 <__aeabi_ui2d>:
   db958:	f090 0f00 	teq	r0, #0
   db95c:	bf04      	itt	eq
   db95e:	2100      	moveq	r1, #0
   db960:	4770      	bxeq	lr
   db962:	b530      	push	{r4, r5, lr}
   db964:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db968:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db96c:	f04f 0500 	mov.w	r5, #0
   db970:	f04f 0100 	mov.w	r1, #0
   db974:	e750      	b.n	db818 <__adddf3+0x138>
   db976:	bf00      	nop

000db978 <__aeabi_i2d>:
   db978:	f090 0f00 	teq	r0, #0
   db97c:	bf04      	itt	eq
   db97e:	2100      	moveq	r1, #0
   db980:	4770      	bxeq	lr
   db982:	b530      	push	{r4, r5, lr}
   db984:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db988:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db98c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db990:	bf48      	it	mi
   db992:	4240      	negmi	r0, r0
   db994:	f04f 0100 	mov.w	r1, #0
   db998:	e73e      	b.n	db818 <__adddf3+0x138>
   db99a:	bf00      	nop

000db99c <__aeabi_f2d>:
   db99c:	0042      	lsls	r2, r0, #1
   db99e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db9a2:	ea4f 0131 	mov.w	r1, r1, rrx
   db9a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db9aa:	bf1f      	itttt	ne
   db9ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db9b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db9b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db9b8:	4770      	bxne	lr
   db9ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db9be:	bf08      	it	eq
   db9c0:	4770      	bxeq	lr
   db9c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db9c6:	bf04      	itt	eq
   db9c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db9cc:	4770      	bxeq	lr
   db9ce:	b530      	push	{r4, r5, lr}
   db9d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   db9d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db9d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db9dc:	e71c      	b.n	db818 <__adddf3+0x138>
   db9de:	bf00      	nop

000db9e0 <__aeabi_ul2d>:
   db9e0:	ea50 0201 	orrs.w	r2, r0, r1
   db9e4:	bf08      	it	eq
   db9e6:	4770      	bxeq	lr
   db9e8:	b530      	push	{r4, r5, lr}
   db9ea:	f04f 0500 	mov.w	r5, #0
   db9ee:	e00a      	b.n	dba06 <__aeabi_l2d+0x16>

000db9f0 <__aeabi_l2d>:
   db9f0:	ea50 0201 	orrs.w	r2, r0, r1
   db9f4:	bf08      	it	eq
   db9f6:	4770      	bxeq	lr
   db9f8:	b530      	push	{r4, r5, lr}
   db9fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db9fe:	d502      	bpl.n	dba06 <__aeabi_l2d+0x16>
   dba00:	4240      	negs	r0, r0
   dba02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dba06:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dba0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dba0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dba12:	f43f aed8 	beq.w	db7c6 <__adddf3+0xe6>
   dba16:	f04f 0203 	mov.w	r2, #3
   dba1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dba1e:	bf18      	it	ne
   dba20:	3203      	addne	r2, #3
   dba22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dba26:	bf18      	it	ne
   dba28:	3203      	addne	r2, #3
   dba2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dba2e:	f1c2 0320 	rsb	r3, r2, #32
   dba32:	fa00 fc03 	lsl.w	ip, r0, r3
   dba36:	fa20 f002 	lsr.w	r0, r0, r2
   dba3a:	fa01 fe03 	lsl.w	lr, r1, r3
   dba3e:	ea40 000e 	orr.w	r0, r0, lr
   dba42:	fa21 f102 	lsr.w	r1, r1, r2
   dba46:	4414      	add	r4, r2
   dba48:	e6bd      	b.n	db7c6 <__adddf3+0xe6>
   dba4a:	bf00      	nop

000dba4c <__aeabi_dmul>:
   dba4c:	b570      	push	{r4, r5, r6, lr}
   dba4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dba52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dba56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dba5a:	bf1d      	ittte	ne
   dba5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dba60:	ea94 0f0c 	teqne	r4, ip
   dba64:	ea95 0f0c 	teqne	r5, ip
   dba68:	f000 f8de 	bleq	dbc28 <__aeabi_dmul+0x1dc>
   dba6c:	442c      	add	r4, r5
   dba6e:	ea81 0603 	eor.w	r6, r1, r3
   dba72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dba76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dba7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dba7e:	bf18      	it	ne
   dba80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dba84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dba88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dba8c:	d038      	beq.n	dbb00 <__aeabi_dmul+0xb4>
   dba8e:	fba0 ce02 	umull	ip, lr, r0, r2
   dba92:	f04f 0500 	mov.w	r5, #0
   dba96:	fbe1 e502 	umlal	lr, r5, r1, r2
   dba9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dba9e:	fbe0 e503 	umlal	lr, r5, r0, r3
   dbaa2:	f04f 0600 	mov.w	r6, #0
   dbaa6:	fbe1 5603 	umlal	r5, r6, r1, r3
   dbaaa:	f09c 0f00 	teq	ip, #0
   dbaae:	bf18      	it	ne
   dbab0:	f04e 0e01 	orrne.w	lr, lr, #1
   dbab4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dbab8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbabc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dbac0:	d204      	bcs.n	dbacc <__aeabi_dmul+0x80>
   dbac2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dbac6:	416d      	adcs	r5, r5
   dbac8:	eb46 0606 	adc.w	r6, r6, r6
   dbacc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dbad0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dbad4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dbad8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dbadc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dbae0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbae4:	bf88      	it	hi
   dbae6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbaea:	d81e      	bhi.n	dbb2a <__aeabi_dmul+0xde>
   dbaec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dbaf0:	bf08      	it	eq
   dbaf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dbaf6:	f150 0000 	adcs.w	r0, r0, #0
   dbafa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbafe:	bd70      	pop	{r4, r5, r6, pc}
   dbb00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dbb04:	ea46 0101 	orr.w	r1, r6, r1
   dbb08:	ea40 0002 	orr.w	r0, r0, r2
   dbb0c:	ea81 0103 	eor.w	r1, r1, r3
   dbb10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dbb14:	bfc2      	ittt	gt
   dbb16:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbb1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbb1e:	bd70      	popgt	{r4, r5, r6, pc}
   dbb20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbb24:	f04f 0e00 	mov.w	lr, #0
   dbb28:	3c01      	subs	r4, #1
   dbb2a:	f300 80ab 	bgt.w	dbc84 <__aeabi_dmul+0x238>
   dbb2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dbb32:	bfde      	ittt	le
   dbb34:	2000      	movle	r0, #0
   dbb36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dbb3a:	bd70      	pople	{r4, r5, r6, pc}
   dbb3c:	f1c4 0400 	rsb	r4, r4, #0
   dbb40:	3c20      	subs	r4, #32
   dbb42:	da35      	bge.n	dbbb0 <__aeabi_dmul+0x164>
   dbb44:	340c      	adds	r4, #12
   dbb46:	dc1b      	bgt.n	dbb80 <__aeabi_dmul+0x134>
   dbb48:	f104 0414 	add.w	r4, r4, #20
   dbb4c:	f1c4 0520 	rsb	r5, r4, #32
   dbb50:	fa00 f305 	lsl.w	r3, r0, r5
   dbb54:	fa20 f004 	lsr.w	r0, r0, r4
   dbb58:	fa01 f205 	lsl.w	r2, r1, r5
   dbb5c:	ea40 0002 	orr.w	r0, r0, r2
   dbb60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dbb64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbb68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbb6c:	fa21 f604 	lsr.w	r6, r1, r4
   dbb70:	eb42 0106 	adc.w	r1, r2, r6
   dbb74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbb78:	bf08      	it	eq
   dbb7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbb7e:	bd70      	pop	{r4, r5, r6, pc}
   dbb80:	f1c4 040c 	rsb	r4, r4, #12
   dbb84:	f1c4 0520 	rsb	r5, r4, #32
   dbb88:	fa00 f304 	lsl.w	r3, r0, r4
   dbb8c:	fa20 f005 	lsr.w	r0, r0, r5
   dbb90:	fa01 f204 	lsl.w	r2, r1, r4
   dbb94:	ea40 0002 	orr.w	r0, r0, r2
   dbb98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbb9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbba0:	f141 0100 	adc.w	r1, r1, #0
   dbba4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbba8:	bf08      	it	eq
   dbbaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbbae:	bd70      	pop	{r4, r5, r6, pc}
   dbbb0:	f1c4 0520 	rsb	r5, r4, #32
   dbbb4:	fa00 f205 	lsl.w	r2, r0, r5
   dbbb8:	ea4e 0e02 	orr.w	lr, lr, r2
   dbbbc:	fa20 f304 	lsr.w	r3, r0, r4
   dbbc0:	fa01 f205 	lsl.w	r2, r1, r5
   dbbc4:	ea43 0302 	orr.w	r3, r3, r2
   dbbc8:	fa21 f004 	lsr.w	r0, r1, r4
   dbbcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbbd0:	fa21 f204 	lsr.w	r2, r1, r4
   dbbd4:	ea20 0002 	bic.w	r0, r0, r2
   dbbd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dbbdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbbe0:	bf08      	it	eq
   dbbe2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbbe6:	bd70      	pop	{r4, r5, r6, pc}
   dbbe8:	f094 0f00 	teq	r4, #0
   dbbec:	d10f      	bne.n	dbc0e <__aeabi_dmul+0x1c2>
   dbbee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dbbf2:	0040      	lsls	r0, r0, #1
   dbbf4:	eb41 0101 	adc.w	r1, r1, r1
   dbbf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbbfc:	bf08      	it	eq
   dbbfe:	3c01      	subeq	r4, #1
   dbc00:	d0f7      	beq.n	dbbf2 <__aeabi_dmul+0x1a6>
   dbc02:	ea41 0106 	orr.w	r1, r1, r6
   dbc06:	f095 0f00 	teq	r5, #0
   dbc0a:	bf18      	it	ne
   dbc0c:	4770      	bxne	lr
   dbc0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dbc12:	0052      	lsls	r2, r2, #1
   dbc14:	eb43 0303 	adc.w	r3, r3, r3
   dbc18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dbc1c:	bf08      	it	eq
   dbc1e:	3d01      	subeq	r5, #1
   dbc20:	d0f7      	beq.n	dbc12 <__aeabi_dmul+0x1c6>
   dbc22:	ea43 0306 	orr.w	r3, r3, r6
   dbc26:	4770      	bx	lr
   dbc28:	ea94 0f0c 	teq	r4, ip
   dbc2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbc30:	bf18      	it	ne
   dbc32:	ea95 0f0c 	teqne	r5, ip
   dbc36:	d00c      	beq.n	dbc52 <__aeabi_dmul+0x206>
   dbc38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbc3c:	bf18      	it	ne
   dbc3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbc42:	d1d1      	bne.n	dbbe8 <__aeabi_dmul+0x19c>
   dbc44:	ea81 0103 	eor.w	r1, r1, r3
   dbc48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbc4c:	f04f 0000 	mov.w	r0, #0
   dbc50:	bd70      	pop	{r4, r5, r6, pc}
   dbc52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbc56:	bf06      	itte	eq
   dbc58:	4610      	moveq	r0, r2
   dbc5a:	4619      	moveq	r1, r3
   dbc5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbc60:	d019      	beq.n	dbc96 <__aeabi_dmul+0x24a>
   dbc62:	ea94 0f0c 	teq	r4, ip
   dbc66:	d102      	bne.n	dbc6e <__aeabi_dmul+0x222>
   dbc68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dbc6c:	d113      	bne.n	dbc96 <__aeabi_dmul+0x24a>
   dbc6e:	ea95 0f0c 	teq	r5, ip
   dbc72:	d105      	bne.n	dbc80 <__aeabi_dmul+0x234>
   dbc74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dbc78:	bf1c      	itt	ne
   dbc7a:	4610      	movne	r0, r2
   dbc7c:	4619      	movne	r1, r3
   dbc7e:	d10a      	bne.n	dbc96 <__aeabi_dmul+0x24a>
   dbc80:	ea81 0103 	eor.w	r1, r1, r3
   dbc84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbc88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbc8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbc90:	f04f 0000 	mov.w	r0, #0
   dbc94:	bd70      	pop	{r4, r5, r6, pc}
   dbc96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbc9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dbc9e:	bd70      	pop	{r4, r5, r6, pc}

000dbca0 <__aeabi_ddiv>:
   dbca0:	b570      	push	{r4, r5, r6, lr}
   dbca2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbca6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbcaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbcae:	bf1d      	ittte	ne
   dbcb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbcb4:	ea94 0f0c 	teqne	r4, ip
   dbcb8:	ea95 0f0c 	teqne	r5, ip
   dbcbc:	f000 f8a7 	bleq	dbe0e <__aeabi_ddiv+0x16e>
   dbcc0:	eba4 0405 	sub.w	r4, r4, r5
   dbcc4:	ea81 0e03 	eor.w	lr, r1, r3
   dbcc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbccc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbcd0:	f000 8088 	beq.w	dbde4 <__aeabi_ddiv+0x144>
   dbcd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbcd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dbcdc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dbce0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dbce4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dbce8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dbcec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dbcf0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dbcf4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dbcf8:	429d      	cmp	r5, r3
   dbcfa:	bf08      	it	eq
   dbcfc:	4296      	cmpeq	r6, r2
   dbcfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dbd02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dbd06:	d202      	bcs.n	dbd0e <__aeabi_ddiv+0x6e>
   dbd08:	085b      	lsrs	r3, r3, #1
   dbd0a:	ea4f 0232 	mov.w	r2, r2, rrx
   dbd0e:	1ab6      	subs	r6, r6, r2
   dbd10:	eb65 0503 	sbc.w	r5, r5, r3
   dbd14:	085b      	lsrs	r3, r3, #1
   dbd16:	ea4f 0232 	mov.w	r2, r2, rrx
   dbd1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dbd1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dbd22:	ebb6 0e02 	subs.w	lr, r6, r2
   dbd26:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbd2a:	bf22      	ittt	cs
   dbd2c:	1ab6      	subcs	r6, r6, r2
   dbd2e:	4675      	movcs	r5, lr
   dbd30:	ea40 000c 	orrcs.w	r0, r0, ip
   dbd34:	085b      	lsrs	r3, r3, #1
   dbd36:	ea4f 0232 	mov.w	r2, r2, rrx
   dbd3a:	ebb6 0e02 	subs.w	lr, r6, r2
   dbd3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbd42:	bf22      	ittt	cs
   dbd44:	1ab6      	subcs	r6, r6, r2
   dbd46:	4675      	movcs	r5, lr
   dbd48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dbd4c:	085b      	lsrs	r3, r3, #1
   dbd4e:	ea4f 0232 	mov.w	r2, r2, rrx
   dbd52:	ebb6 0e02 	subs.w	lr, r6, r2
   dbd56:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbd5a:	bf22      	ittt	cs
   dbd5c:	1ab6      	subcs	r6, r6, r2
   dbd5e:	4675      	movcs	r5, lr
   dbd60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dbd64:	085b      	lsrs	r3, r3, #1
   dbd66:	ea4f 0232 	mov.w	r2, r2, rrx
   dbd6a:	ebb6 0e02 	subs.w	lr, r6, r2
   dbd6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbd72:	bf22      	ittt	cs
   dbd74:	1ab6      	subcs	r6, r6, r2
   dbd76:	4675      	movcs	r5, lr
   dbd78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbd7c:	ea55 0e06 	orrs.w	lr, r5, r6
   dbd80:	d018      	beq.n	dbdb4 <__aeabi_ddiv+0x114>
   dbd82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dbd86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dbd8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dbd8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dbd92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dbd96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dbd9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dbd9e:	d1c0      	bne.n	dbd22 <__aeabi_ddiv+0x82>
   dbda0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbda4:	d10b      	bne.n	dbdbe <__aeabi_ddiv+0x11e>
   dbda6:	ea41 0100 	orr.w	r1, r1, r0
   dbdaa:	f04f 0000 	mov.w	r0, #0
   dbdae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dbdb2:	e7b6      	b.n	dbd22 <__aeabi_ddiv+0x82>
   dbdb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbdb8:	bf04      	itt	eq
   dbdba:	4301      	orreq	r1, r0
   dbdbc:	2000      	moveq	r0, #0
   dbdbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbdc2:	bf88      	it	hi
   dbdc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbdc8:	f63f aeaf 	bhi.w	dbb2a <__aeabi_dmul+0xde>
   dbdcc:	ebb5 0c03 	subs.w	ip, r5, r3
   dbdd0:	bf04      	itt	eq
   dbdd2:	ebb6 0c02 	subseq.w	ip, r6, r2
   dbdd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbdda:	f150 0000 	adcs.w	r0, r0, #0
   dbdde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbde2:	bd70      	pop	{r4, r5, r6, pc}
   dbde4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dbde8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dbdec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dbdf0:	bfc2      	ittt	gt
   dbdf2:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbdf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbdfa:	bd70      	popgt	{r4, r5, r6, pc}
   dbdfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbe00:	f04f 0e00 	mov.w	lr, #0
   dbe04:	3c01      	subs	r4, #1
   dbe06:	e690      	b.n	dbb2a <__aeabi_dmul+0xde>
   dbe08:	ea45 0e06 	orr.w	lr, r5, r6
   dbe0c:	e68d      	b.n	dbb2a <__aeabi_dmul+0xde>
   dbe0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbe12:	ea94 0f0c 	teq	r4, ip
   dbe16:	bf08      	it	eq
   dbe18:	ea95 0f0c 	teqeq	r5, ip
   dbe1c:	f43f af3b 	beq.w	dbc96 <__aeabi_dmul+0x24a>
   dbe20:	ea94 0f0c 	teq	r4, ip
   dbe24:	d10a      	bne.n	dbe3c <__aeabi_ddiv+0x19c>
   dbe26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbe2a:	f47f af34 	bne.w	dbc96 <__aeabi_dmul+0x24a>
   dbe2e:	ea95 0f0c 	teq	r5, ip
   dbe32:	f47f af25 	bne.w	dbc80 <__aeabi_dmul+0x234>
   dbe36:	4610      	mov	r0, r2
   dbe38:	4619      	mov	r1, r3
   dbe3a:	e72c      	b.n	dbc96 <__aeabi_dmul+0x24a>
   dbe3c:	ea95 0f0c 	teq	r5, ip
   dbe40:	d106      	bne.n	dbe50 <__aeabi_ddiv+0x1b0>
   dbe42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbe46:	f43f aefd 	beq.w	dbc44 <__aeabi_dmul+0x1f8>
   dbe4a:	4610      	mov	r0, r2
   dbe4c:	4619      	mov	r1, r3
   dbe4e:	e722      	b.n	dbc96 <__aeabi_dmul+0x24a>
   dbe50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbe54:	bf18      	it	ne
   dbe56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbe5a:	f47f aec5 	bne.w	dbbe8 <__aeabi_dmul+0x19c>
   dbe5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dbe62:	f47f af0d 	bne.w	dbc80 <__aeabi_dmul+0x234>
   dbe66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dbe6a:	f47f aeeb 	bne.w	dbc44 <__aeabi_dmul+0x1f8>
   dbe6e:	e712      	b.n	dbc96 <__aeabi_dmul+0x24a>

000dbe70 <__aeabi_d2iz>:
   dbe70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbe74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbe78:	d215      	bcs.n	dbea6 <__aeabi_d2iz+0x36>
   dbe7a:	d511      	bpl.n	dbea0 <__aeabi_d2iz+0x30>
   dbe7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbe80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbe84:	d912      	bls.n	dbeac <__aeabi_d2iz+0x3c>
   dbe86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbe8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbe8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbe92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbe96:	fa23 f002 	lsr.w	r0, r3, r2
   dbe9a:	bf18      	it	ne
   dbe9c:	4240      	negne	r0, r0
   dbe9e:	4770      	bx	lr
   dbea0:	f04f 0000 	mov.w	r0, #0
   dbea4:	4770      	bx	lr
   dbea6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbeaa:	d105      	bne.n	dbeb8 <__aeabi_d2iz+0x48>
   dbeac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dbeb0:	bf08      	it	eq
   dbeb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbeb6:	4770      	bx	lr
   dbeb8:	f04f 0000 	mov.w	r0, #0
   dbebc:	4770      	bx	lr
   dbebe:	bf00      	nop

000dbec0 <__aeabi_d2uiz>:
   dbec0:	004a      	lsls	r2, r1, #1
   dbec2:	d211      	bcs.n	dbee8 <__aeabi_d2uiz+0x28>
   dbec4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbec8:	d211      	bcs.n	dbeee <__aeabi_d2uiz+0x2e>
   dbeca:	d50d      	bpl.n	dbee8 <__aeabi_d2uiz+0x28>
   dbecc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbed0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbed4:	d40e      	bmi.n	dbef4 <__aeabi_d2uiz+0x34>
   dbed6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbeda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbede:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbee2:	fa23 f002 	lsr.w	r0, r3, r2
   dbee6:	4770      	bx	lr
   dbee8:	f04f 0000 	mov.w	r0, #0
   dbeec:	4770      	bx	lr
   dbeee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbef2:	d102      	bne.n	dbefa <__aeabi_d2uiz+0x3a>
   dbef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbef8:	4770      	bx	lr
   dbefa:	f04f 0000 	mov.w	r0, #0
   dbefe:	4770      	bx	lr

000dbf00 <__aeabi_d2f>:
   dbf00:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbf04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dbf08:	bf24      	itt	cs
   dbf0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dbf0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dbf12:	d90d      	bls.n	dbf30 <__aeabi_d2f+0x30>
   dbf14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dbf18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dbf1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dbf20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dbf24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dbf28:	bf08      	it	eq
   dbf2a:	f020 0001 	biceq.w	r0, r0, #1
   dbf2e:	4770      	bx	lr
   dbf30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dbf34:	d121      	bne.n	dbf7a <__aeabi_d2f+0x7a>
   dbf36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dbf3a:	bfbc      	itt	lt
   dbf3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dbf40:	4770      	bxlt	lr
   dbf42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbf46:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dbf4a:	f1c2 0218 	rsb	r2, r2, #24
   dbf4e:	f1c2 0c20 	rsb	ip, r2, #32
   dbf52:	fa10 f30c 	lsls.w	r3, r0, ip
   dbf56:	fa20 f002 	lsr.w	r0, r0, r2
   dbf5a:	bf18      	it	ne
   dbf5c:	f040 0001 	orrne.w	r0, r0, #1
   dbf60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbf64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dbf68:	fa03 fc0c 	lsl.w	ip, r3, ip
   dbf6c:	ea40 000c 	orr.w	r0, r0, ip
   dbf70:	fa23 f302 	lsr.w	r3, r3, r2
   dbf74:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dbf78:	e7cc      	b.n	dbf14 <__aeabi_d2f+0x14>
   dbf7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dbf7e:	d107      	bne.n	dbf90 <__aeabi_d2f+0x90>
   dbf80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dbf84:	bf1e      	ittt	ne
   dbf86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dbf8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dbf8e:	4770      	bxne	lr
   dbf90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dbf94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dbf98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dbf9c:	4770      	bx	lr
   dbf9e:	bf00      	nop

000dbfa0 <__aeabi_f2lz>:
   dbfa0:	ee07 0a90 	vmov	s15, r0
   dbfa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dbfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbfac:	d401      	bmi.n	dbfb2 <__aeabi_f2lz+0x12>
   dbfae:	f000 b80b 	b.w	dbfc8 <__aeabi_f2ulz>
   dbfb2:	eef1 7a67 	vneg.f32	s15, s15
   dbfb6:	b508      	push	{r3, lr}
   dbfb8:	ee17 0a90 	vmov	r0, s15
   dbfbc:	f000 f804 	bl	dbfc8 <__aeabi_f2ulz>
   dbfc0:	4240      	negs	r0, r0
   dbfc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbfc6:	bd08      	pop	{r3, pc}

000dbfc8 <__aeabi_f2ulz>:
   dbfc8:	b5d0      	push	{r4, r6, r7, lr}
   dbfca:	f7ff fce7 	bl	db99c <__aeabi_f2d>
   dbfce:	4b0c      	ldr	r3, [pc, #48]	; (dc000 <__aeabi_f2ulz+0x38>)
   dbfd0:	2200      	movs	r2, #0
   dbfd2:	4606      	mov	r6, r0
   dbfd4:	460f      	mov	r7, r1
   dbfd6:	f7ff fd39 	bl	dba4c <__aeabi_dmul>
   dbfda:	f7ff ff71 	bl	dbec0 <__aeabi_d2uiz>
   dbfde:	4604      	mov	r4, r0
   dbfe0:	f7ff fcba 	bl	db958 <__aeabi_ui2d>
   dbfe4:	4b07      	ldr	r3, [pc, #28]	; (dc004 <__aeabi_f2ulz+0x3c>)
   dbfe6:	2200      	movs	r2, #0
   dbfe8:	f7ff fd30 	bl	dba4c <__aeabi_dmul>
   dbfec:	4602      	mov	r2, r0
   dbfee:	460b      	mov	r3, r1
   dbff0:	4630      	mov	r0, r6
   dbff2:	4639      	mov	r1, r7
   dbff4:	f7ff fb72 	bl	db6dc <__aeabi_dsub>
   dbff8:	f7ff ff62 	bl	dbec0 <__aeabi_d2uiz>
   dbffc:	4621      	mov	r1, r4
   dbffe:	bdd0      	pop	{r4, r6, r7, pc}
   dc000:	3df00000 	.word	0x3df00000
   dc004:	41f00000 	.word	0x41f00000

000dc008 <asctime_r>:
   dc008:	b510      	push	{r4, lr}
   dc00a:	460c      	mov	r4, r1
   dc00c:	6941      	ldr	r1, [r0, #20]
   dc00e:	6903      	ldr	r3, [r0, #16]
   dc010:	6982      	ldr	r2, [r0, #24]
   dc012:	b086      	sub	sp, #24
   dc014:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dc018:	9104      	str	r1, [sp, #16]
   dc01a:	6801      	ldr	r1, [r0, #0]
   dc01c:	9103      	str	r1, [sp, #12]
   dc01e:	6841      	ldr	r1, [r0, #4]
   dc020:	9102      	str	r1, [sp, #8]
   dc022:	6881      	ldr	r1, [r0, #8]
   dc024:	9101      	str	r1, [sp, #4]
   dc026:	68c1      	ldr	r1, [r0, #12]
   dc028:	9100      	str	r1, [sp, #0]
   dc02a:	4907      	ldr	r1, [pc, #28]	; (dc048 <asctime_r+0x40>)
   dc02c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dc030:	440b      	add	r3, r1
   dc032:	4906      	ldr	r1, [pc, #24]	; (dc04c <asctime_r+0x44>)
   dc034:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dc038:	440a      	add	r2, r1
   dc03a:	4620      	mov	r0, r4
   dc03c:	4904      	ldr	r1, [pc, #16]	; (dc050 <asctime_r+0x48>)
   dc03e:	f7fc f995 	bl	d836c <siprintf>
   dc042:	4620      	mov	r0, r4
   dc044:	b006      	add	sp, #24
   dc046:	bd10      	pop	{r4, pc}
   dc048:	000dd02e 	.word	0x000dd02e
   dc04c:	000dd019 	.word	0x000dd019
   dc050:	000dcff9 	.word	0x000dcff9

000dc054 <atoi>:
   dc054:	220a      	movs	r2, #10
   dc056:	2100      	movs	r1, #0
   dc058:	f000 b976 	b.w	dc348 <strtol>

000dc05c <__cxa_atexit>:
   dc05c:	b510      	push	{r4, lr}
   dc05e:	4c05      	ldr	r4, [pc, #20]	; (dc074 <__cxa_atexit+0x18>)
   dc060:	4613      	mov	r3, r2
   dc062:	b12c      	cbz	r4, dc070 <__cxa_atexit+0x14>
   dc064:	460a      	mov	r2, r1
   dc066:	4601      	mov	r1, r0
   dc068:	2002      	movs	r0, #2
   dc06a:	f3af 8000 	nop.w
   dc06e:	bd10      	pop	{r4, pc}
   dc070:	4620      	mov	r0, r4
   dc072:	e7fc      	b.n	dc06e <__cxa_atexit+0x12>
   dc074:	00000000 	.word	0x00000000

000dc078 <gmtime>:
   dc078:	b538      	push	{r3, r4, r5, lr}
   dc07a:	4b07      	ldr	r3, [pc, #28]	; (dc098 <gmtime+0x20>)
   dc07c:	681d      	ldr	r5, [r3, #0]
   dc07e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dc080:	4604      	mov	r4, r0
   dc082:	b91b      	cbnz	r3, dc08c <gmtime+0x14>
   dc084:	2024      	movs	r0, #36	; 0x24
   dc086:	f7fc f959 	bl	d833c <malloc>
   dc08a:	63e8      	str	r0, [r5, #60]	; 0x3c
   dc08c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dc08e:	4620      	mov	r0, r4
   dc090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc094:	f7fc b9aa 	b.w	d83ec <gmtime_r>
   dc098:	2003e2b8 	.word	0x2003e2b8

000dc09c <memcpy>:
   dc09c:	440a      	add	r2, r1
   dc09e:	4291      	cmp	r1, r2
   dc0a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc0a4:	d100      	bne.n	dc0a8 <memcpy+0xc>
   dc0a6:	4770      	bx	lr
   dc0a8:	b510      	push	{r4, lr}
   dc0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc0ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc0b2:	4291      	cmp	r1, r2
   dc0b4:	d1f9      	bne.n	dc0aa <memcpy+0xe>
   dc0b6:	bd10      	pop	{r4, pc}

000dc0b8 <memmove>:
   dc0b8:	4288      	cmp	r0, r1
   dc0ba:	b510      	push	{r4, lr}
   dc0bc:	eb01 0402 	add.w	r4, r1, r2
   dc0c0:	d902      	bls.n	dc0c8 <memmove+0x10>
   dc0c2:	4284      	cmp	r4, r0
   dc0c4:	4623      	mov	r3, r4
   dc0c6:	d807      	bhi.n	dc0d8 <memmove+0x20>
   dc0c8:	1e43      	subs	r3, r0, #1
   dc0ca:	42a1      	cmp	r1, r4
   dc0cc:	d008      	beq.n	dc0e0 <memmove+0x28>
   dc0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc0d2:	f803 2f01 	strb.w	r2, [r3, #1]!
   dc0d6:	e7f8      	b.n	dc0ca <memmove+0x12>
   dc0d8:	4402      	add	r2, r0
   dc0da:	4601      	mov	r1, r0
   dc0dc:	428a      	cmp	r2, r1
   dc0de:	d100      	bne.n	dc0e2 <memmove+0x2a>
   dc0e0:	bd10      	pop	{r4, pc}
   dc0e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dc0e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dc0ea:	e7f7      	b.n	dc0dc <memmove+0x24>

000dc0ec <memset>:
   dc0ec:	4402      	add	r2, r0
   dc0ee:	4603      	mov	r3, r0
   dc0f0:	4293      	cmp	r3, r2
   dc0f2:	d100      	bne.n	dc0f6 <memset+0xa>
   dc0f4:	4770      	bx	lr
   dc0f6:	f803 1b01 	strb.w	r1, [r3], #1
   dc0fa:	e7f9      	b.n	dc0f0 <memset+0x4>

000dc0fc <srand>:
   dc0fc:	b538      	push	{r3, r4, r5, lr}
   dc0fe:	4b0d      	ldr	r3, [pc, #52]	; (dc134 <srand+0x38>)
   dc100:	681d      	ldr	r5, [r3, #0]
   dc102:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc104:	4604      	mov	r4, r0
   dc106:	b97b      	cbnz	r3, dc128 <srand+0x2c>
   dc108:	2018      	movs	r0, #24
   dc10a:	f7fc f917 	bl	d833c <malloc>
   dc10e:	4a0a      	ldr	r2, [pc, #40]	; (dc138 <srand+0x3c>)
   dc110:	4b0a      	ldr	r3, [pc, #40]	; (dc13c <srand+0x40>)
   dc112:	63a8      	str	r0, [r5, #56]	; 0x38
   dc114:	e9c0 2300 	strd	r2, r3, [r0]
   dc118:	4b09      	ldr	r3, [pc, #36]	; (dc140 <srand+0x44>)
   dc11a:	6083      	str	r3, [r0, #8]
   dc11c:	230b      	movs	r3, #11
   dc11e:	8183      	strh	r3, [r0, #12]
   dc120:	2201      	movs	r2, #1
   dc122:	2300      	movs	r3, #0
   dc124:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc128:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc12a:	2200      	movs	r2, #0
   dc12c:	611c      	str	r4, [r3, #16]
   dc12e:	615a      	str	r2, [r3, #20]
   dc130:	bd38      	pop	{r3, r4, r5, pc}
   dc132:	bf00      	nop
   dc134:	2003e2b8 	.word	0x2003e2b8
   dc138:	abcd330e 	.word	0xabcd330e
   dc13c:	e66d1234 	.word	0xe66d1234
   dc140:	0005deec 	.word	0x0005deec

000dc144 <strchr>:
   dc144:	b2c9      	uxtb	r1, r1
   dc146:	4603      	mov	r3, r0
   dc148:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc14c:	b11a      	cbz	r2, dc156 <strchr+0x12>
   dc14e:	428a      	cmp	r2, r1
   dc150:	d1f9      	bne.n	dc146 <strchr+0x2>
   dc152:	4618      	mov	r0, r3
   dc154:	4770      	bx	lr
   dc156:	2900      	cmp	r1, #0
   dc158:	bf18      	it	ne
   dc15a:	2300      	movne	r3, #0
   dc15c:	e7f9      	b.n	dc152 <strchr+0xe>

000dc15e <strchrnul>:
   dc15e:	b510      	push	{r4, lr}
   dc160:	4604      	mov	r4, r0
   dc162:	f7ff ffef 	bl	dc144 <strchr>
   dc166:	b918      	cbnz	r0, dc170 <strchrnul+0x12>
   dc168:	4620      	mov	r0, r4
   dc16a:	f000 f832 	bl	dc1d2 <strlen>
   dc16e:	4420      	add	r0, r4
   dc170:	bd10      	pop	{r4, pc}

000dc172 <strcmp>:
   dc172:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc176:	f811 3b01 	ldrb.w	r3, [r1], #1
   dc17a:	2a01      	cmp	r2, #1
   dc17c:	bf28      	it	cs
   dc17e:	429a      	cmpcs	r2, r3
   dc180:	d0f7      	beq.n	dc172 <strcmp>
   dc182:	1ad0      	subs	r0, r2, r3
   dc184:	4770      	bx	lr

000dc186 <strcpy>:
   dc186:	4603      	mov	r3, r0
   dc188:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc18c:	f803 2b01 	strb.w	r2, [r3], #1
   dc190:	2a00      	cmp	r2, #0
   dc192:	d1f9      	bne.n	dc188 <strcpy+0x2>
   dc194:	4770      	bx	lr
	...

000dc198 <strdup>:
   dc198:	4b02      	ldr	r3, [pc, #8]	; (dc1a4 <strdup+0xc>)
   dc19a:	4601      	mov	r1, r0
   dc19c:	6818      	ldr	r0, [r3, #0]
   dc19e:	f000 b803 	b.w	dc1a8 <_strdup_r>
   dc1a2:	bf00      	nop
   dc1a4:	2003e2b8 	.word	0x2003e2b8

000dc1a8 <_strdup_r>:
   dc1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc1aa:	4604      	mov	r4, r0
   dc1ac:	4608      	mov	r0, r1
   dc1ae:	460d      	mov	r5, r1
   dc1b0:	f000 f80f 	bl	dc1d2 <strlen>
   dc1b4:	1c42      	adds	r2, r0, #1
   dc1b6:	4611      	mov	r1, r2
   dc1b8:	4620      	mov	r0, r4
   dc1ba:	9201      	str	r2, [sp, #4]
   dc1bc:	f7fc f8f6 	bl	d83ac <_malloc_r>
   dc1c0:	4604      	mov	r4, r0
   dc1c2:	b118      	cbz	r0, dc1cc <_strdup_r+0x24>
   dc1c4:	9a01      	ldr	r2, [sp, #4]
   dc1c6:	4629      	mov	r1, r5
   dc1c8:	f7ff ff68 	bl	dc09c <memcpy>
   dc1cc:	4620      	mov	r0, r4
   dc1ce:	b003      	add	sp, #12
   dc1d0:	bd30      	pop	{r4, r5, pc}

000dc1d2 <strlen>:
   dc1d2:	4603      	mov	r3, r0
   dc1d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc1d8:	2a00      	cmp	r2, #0
   dc1da:	d1fb      	bne.n	dc1d4 <strlen+0x2>
   dc1dc:	1a18      	subs	r0, r3, r0
   dc1de:	3801      	subs	r0, #1
   dc1e0:	4770      	bx	lr

000dc1e2 <strncmp>:
   dc1e2:	b510      	push	{r4, lr}
   dc1e4:	b16a      	cbz	r2, dc202 <strncmp+0x20>
   dc1e6:	3901      	subs	r1, #1
   dc1e8:	1884      	adds	r4, r0, r2
   dc1ea:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc1ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dc1f2:	4293      	cmp	r3, r2
   dc1f4:	d103      	bne.n	dc1fe <strncmp+0x1c>
   dc1f6:	42a0      	cmp	r0, r4
   dc1f8:	d001      	beq.n	dc1fe <strncmp+0x1c>
   dc1fa:	2b00      	cmp	r3, #0
   dc1fc:	d1f5      	bne.n	dc1ea <strncmp+0x8>
   dc1fe:	1a98      	subs	r0, r3, r2
   dc200:	bd10      	pop	{r4, pc}
   dc202:	4610      	mov	r0, r2
   dc204:	e7fc      	b.n	dc200 <strncmp+0x1e>

000dc206 <strncpy>:
   dc206:	b510      	push	{r4, lr}
   dc208:	3901      	subs	r1, #1
   dc20a:	4603      	mov	r3, r0
   dc20c:	b132      	cbz	r2, dc21c <strncpy+0x16>
   dc20e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc212:	f803 4b01 	strb.w	r4, [r3], #1
   dc216:	3a01      	subs	r2, #1
   dc218:	2c00      	cmp	r4, #0
   dc21a:	d1f7      	bne.n	dc20c <strncpy+0x6>
   dc21c:	441a      	add	r2, r3
   dc21e:	2100      	movs	r1, #0
   dc220:	4293      	cmp	r3, r2
   dc222:	d100      	bne.n	dc226 <strncpy+0x20>
   dc224:	bd10      	pop	{r4, pc}
   dc226:	f803 1b01 	strb.w	r1, [r3], #1
   dc22a:	e7f9      	b.n	dc220 <strncpy+0x1a>

000dc22c <strrchr>:
   dc22c:	b538      	push	{r3, r4, r5, lr}
   dc22e:	4603      	mov	r3, r0
   dc230:	460c      	mov	r4, r1
   dc232:	b969      	cbnz	r1, dc250 <strrchr+0x24>
   dc234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc238:	f7ff bf84 	b.w	dc144 <strchr>
   dc23c:	1c43      	adds	r3, r0, #1
   dc23e:	4605      	mov	r5, r0
   dc240:	4621      	mov	r1, r4
   dc242:	4618      	mov	r0, r3
   dc244:	f7ff ff7e 	bl	dc144 <strchr>
   dc248:	2800      	cmp	r0, #0
   dc24a:	d1f7      	bne.n	dc23c <strrchr+0x10>
   dc24c:	4628      	mov	r0, r5
   dc24e:	bd38      	pop	{r3, r4, r5, pc}
   dc250:	2500      	movs	r5, #0
   dc252:	e7f5      	b.n	dc240 <strrchr+0x14>

000dc254 <_strtol_l.isra.0>:
   dc254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc258:	4e3a      	ldr	r6, [pc, #232]	; (dc344 <_strtol_l.isra.0+0xf0>)
   dc25a:	4686      	mov	lr, r0
   dc25c:	468c      	mov	ip, r1
   dc25e:	4660      	mov	r0, ip
   dc260:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc264:	5da5      	ldrb	r5, [r4, r6]
   dc266:	f015 0508 	ands.w	r5, r5, #8
   dc26a:	d1f8      	bne.n	dc25e <_strtol_l.isra.0+0xa>
   dc26c:	2c2d      	cmp	r4, #45	; 0x2d
   dc26e:	d133      	bne.n	dc2d8 <_strtol_l.isra.0+0x84>
   dc270:	f89c 4000 	ldrb.w	r4, [ip]
   dc274:	f04f 0801 	mov.w	r8, #1
   dc278:	f100 0c02 	add.w	ip, r0, #2
   dc27c:	2b00      	cmp	r3, #0
   dc27e:	d05c      	beq.n	dc33a <_strtol_l.isra.0+0xe6>
   dc280:	2b10      	cmp	r3, #16
   dc282:	d10c      	bne.n	dc29e <_strtol_l.isra.0+0x4a>
   dc284:	2c30      	cmp	r4, #48	; 0x30
   dc286:	d10a      	bne.n	dc29e <_strtol_l.isra.0+0x4a>
   dc288:	f89c 0000 	ldrb.w	r0, [ip]
   dc28c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc290:	2858      	cmp	r0, #88	; 0x58
   dc292:	d14d      	bne.n	dc330 <_strtol_l.isra.0+0xdc>
   dc294:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc298:	2310      	movs	r3, #16
   dc29a:	f10c 0c02 	add.w	ip, ip, #2
   dc29e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dc2a2:	3f01      	subs	r7, #1
   dc2a4:	2600      	movs	r6, #0
   dc2a6:	fbb7 f9f3 	udiv	r9, r7, r3
   dc2aa:	4630      	mov	r0, r6
   dc2ac:	fb03 7a19 	mls	sl, r3, r9, r7
   dc2b0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dc2b4:	2d09      	cmp	r5, #9
   dc2b6:	d818      	bhi.n	dc2ea <_strtol_l.isra.0+0x96>
   dc2b8:	462c      	mov	r4, r5
   dc2ba:	42a3      	cmp	r3, r4
   dc2bc:	dd24      	ble.n	dc308 <_strtol_l.isra.0+0xb4>
   dc2be:	1c75      	adds	r5, r6, #1
   dc2c0:	d007      	beq.n	dc2d2 <_strtol_l.isra.0+0x7e>
   dc2c2:	4581      	cmp	r9, r0
   dc2c4:	d31d      	bcc.n	dc302 <_strtol_l.isra.0+0xae>
   dc2c6:	d101      	bne.n	dc2cc <_strtol_l.isra.0+0x78>
   dc2c8:	45a2      	cmp	sl, r4
   dc2ca:	db1a      	blt.n	dc302 <_strtol_l.isra.0+0xae>
   dc2cc:	fb00 4003 	mla	r0, r0, r3, r4
   dc2d0:	2601      	movs	r6, #1
   dc2d2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc2d6:	e7eb      	b.n	dc2b0 <_strtol_l.isra.0+0x5c>
   dc2d8:	2c2b      	cmp	r4, #43	; 0x2b
   dc2da:	bf08      	it	eq
   dc2dc:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc2e0:	46a8      	mov	r8, r5
   dc2e2:	bf08      	it	eq
   dc2e4:	f100 0c02 	addeq.w	ip, r0, #2
   dc2e8:	e7c8      	b.n	dc27c <_strtol_l.isra.0+0x28>
   dc2ea:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dc2ee:	2d19      	cmp	r5, #25
   dc2f0:	d801      	bhi.n	dc2f6 <_strtol_l.isra.0+0xa2>
   dc2f2:	3c37      	subs	r4, #55	; 0x37
   dc2f4:	e7e1      	b.n	dc2ba <_strtol_l.isra.0+0x66>
   dc2f6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dc2fa:	2d19      	cmp	r5, #25
   dc2fc:	d804      	bhi.n	dc308 <_strtol_l.isra.0+0xb4>
   dc2fe:	3c57      	subs	r4, #87	; 0x57
   dc300:	e7db      	b.n	dc2ba <_strtol_l.isra.0+0x66>
   dc302:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc306:	e7e4      	b.n	dc2d2 <_strtol_l.isra.0+0x7e>
   dc308:	1c73      	adds	r3, r6, #1
   dc30a:	d106      	bne.n	dc31a <_strtol_l.isra.0+0xc6>
   dc30c:	2322      	movs	r3, #34	; 0x22
   dc30e:	f8ce 3000 	str.w	r3, [lr]
   dc312:	4638      	mov	r0, r7
   dc314:	b942      	cbnz	r2, dc328 <_strtol_l.isra.0+0xd4>
   dc316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc31a:	f1b8 0f00 	cmp.w	r8, #0
   dc31e:	d000      	beq.n	dc322 <_strtol_l.isra.0+0xce>
   dc320:	4240      	negs	r0, r0
   dc322:	2a00      	cmp	r2, #0
   dc324:	d0f7      	beq.n	dc316 <_strtol_l.isra.0+0xc2>
   dc326:	b10e      	cbz	r6, dc32c <_strtol_l.isra.0+0xd8>
   dc328:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc32c:	6011      	str	r1, [r2, #0]
   dc32e:	e7f2      	b.n	dc316 <_strtol_l.isra.0+0xc2>
   dc330:	2430      	movs	r4, #48	; 0x30
   dc332:	2b00      	cmp	r3, #0
   dc334:	d1b3      	bne.n	dc29e <_strtol_l.isra.0+0x4a>
   dc336:	2308      	movs	r3, #8
   dc338:	e7b1      	b.n	dc29e <_strtol_l.isra.0+0x4a>
   dc33a:	2c30      	cmp	r4, #48	; 0x30
   dc33c:	d0a4      	beq.n	dc288 <_strtol_l.isra.0+0x34>
   dc33e:	230a      	movs	r3, #10
   dc340:	e7ad      	b.n	dc29e <_strtol_l.isra.0+0x4a>
   dc342:	bf00      	nop
   dc344:	000dd053 	.word	0x000dd053

000dc348 <strtol>:
   dc348:	4613      	mov	r3, r2
   dc34a:	460a      	mov	r2, r1
   dc34c:	4601      	mov	r1, r0
   dc34e:	4802      	ldr	r0, [pc, #8]	; (dc358 <strtol+0x10>)
   dc350:	6800      	ldr	r0, [r0, #0]
   dc352:	f7ff bf7f 	b.w	dc254 <_strtol_l.isra.0>
   dc356:	bf00      	nop
   dc358:	2003e2b8 	.word	0x2003e2b8

000dc35c <dynalib_user>:
   dc35c:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   dc36c:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
   dc37c:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
   dc38c:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
   dc39c:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
   dc3ac:	41435f45 424e5f54 6f4e0031 68432074     E_CAT_NB1.Not Ch
   dc3bc:	69677261 4300676e 67726168 44006465     arging.Charged.D
   dc3cc:	68637369 69677261 4600676e 746c7561     ischarging.Fault
   dc3dc:	63694400 656e6e6f 64657463 206f4e00     .Diconnected.No 
   dc3ec:	61746144 73655200 736e6f70 65522065     Data.Response Re
   dc3fc:	76696563 55006465 6f6e6b6e 72206e77     ceived.Unknown r
   dc40c:	6f707365 2065736e 65636572 64656976     esponse recevied
   dc41c:	00692520 64696255 2073746f 6b6f6f48      %i.Ubidots Hook
   dc42c:	72614800 65522064 20746573 32206e69     .Hard Reset in 2
   dc43c:	63657320 73646e6f 74655300 72655620      seconds.Set Ver
   dc44c:	65736f62 646f4d20 6c430065 65726165     bose Mode.Cleare
   dc45c:	65562064 736f6272 6f4d2065 4f006564     d Verbose Mode.O
   dc46c:	206e6570 656d6974 74657320 206f7420     pen time set to 
   dc47c:	44006925 796c6961 756f6320 7320746e     %i.Daily count s
   dc48c:	74207465 6925206f 69614400 5300796c     et to %i.Daily.S
   dc49c:	69736e65 69766974 73207974 74207465     ensitivity set t
   dc4ac:	6925206f 20692500 00636573 6f626544     o %i.%i sec.Debo
   dc4bc:	65636e75 74657320 206f7420 73206925     unce set to %i s
   dc4cc:	6e6f6365 4c007364 5020776f 7265776f     econds.Low Power
   dc4dc:	646f4d20 6f4e0065 6c616d72 65704f20      Mode.Normal Ope
   dc4ec:	69746172 00736e6f 20746f4e 20776f4c     rations.Not Low 
   dc4fc:	65776f50 6f430072 2c746e75 756f6820     Power.Count, hou
   dc50c:	3a796c72 2c692520 69616420 203a796c     rly: %i, daily: 
   dc51c:	43006925 7261656c 49206465 7265746e     %i.Cleared Inter
   dc52c:	74707572 68227b00 6c72756f 253a2279     rupt.{"hourly":%
   dc53c:	22202c69 6c696164 253a2279 62222c69     i, "daily":%i,"b
   dc54c:	65747461 3a227972 222c6925 3179656b     attery":%i,"key1
   dc55c:	25223a22 222c2273 706d6574 69253a22     ":"%s","temp":%i
   dc56c:	7222202c 74657365 253a2273 22202c69     , "resets":%i, "
   dc57c:	72656c61 3a227374 222c6925 6d78616d     alerts":%i,"maxm
   dc58c:	3a226e69 222c6925 6e6e6f63 74746365     in":%i,"connectt
   dc59c:	22656d69 2c69253a 6d697422 61747365     ime":%i,"timesta
   dc5ac:	3a22706d 30756c25 007d3030 64696255     mp":%lu000}.Ubid
   dc5bc:	2d73746f 6e756f43 2d726574 6b6f6f48     ots-Counter-Hook
   dc5cc:	0031762d 53207325 2e32253a 25256630     -v1.%s S:%2.0f%%
   dc5dc:	3a51202c 302e3225 20252566 74655300     , Q:%2.0f%% .Set
   dc5ec:	6c6f5320 50207261 7265776f 4d206465      Solar Powered M
   dc5fc:	0065646f 61656c43 20646572 616c6f53     ode.Cleared Sola
   dc60c:	6f502072 65726577 6f4d2064 4e006564     r Powered Mode.N
   dc61c:	69250041 0030303a 736f6c43 20676e69     A.%i:00.Closing 
   dc62c:	656d6974 74657320 206f7420 46006925     time set to %i.F
   dc63c:	206d6f72 74207325 7325206f 61745300     rom %s to %s.Sta
   dc64c:	54206574 736e6172 6f697469 7552006e     te Transition.Ru
   dc65c:	6e696e6e 61440067 20796c69 61656c43     nning.Daily Clea
   dc66c:	0070756e 64616f4c 20676e69 74737953     nup.Loading Syst
   dc67c:	44206d65 75616665 0073746c 72756f48     em Defaults.Hour
   dc68c:	6f43796c 00746e75 6e676953 52006c61     lyCount.Signal.R
   dc69c:	74657365 6e756f43 65540074 7265706d     esetCount.Temper
   dc6ac:	72757461 65520065 7361656c 74730065     ature.Release.st
   dc6bc:	4f657461 67684366 776f6c00 65776f50     ateOfChg.lowPowe
   dc6cc:	646f4d72 6c430065 5465736f 00656d69     rMode.CloseTime.
   dc6dc:	72656c41 54007374 4f656d69 65736666     Alerts.TimeOffse
   dc6ec:	61420074 72657474 6e6f4379 74786574     t.BatteryContext
   dc6fc:	74657300 6c696144 756f4379 7200746e     .setDailyCount.r
   dc70c:	74657365 6e756f43 48007374 52647261     esetCounts.HardR
   dc71c:	74657365 6e655300 776f4e64 776f4c00     eset.SendNow.Low
   dc72c:	65776f50 646f4d72 6f530065 2d72616c     PowerMode.Solar-
   dc73c:	65646f4d 72655600 65736f62 646f4d2d     Mode.Verbose-Mod
   dc74c:	65530065 69542d74 6f7a656d 5300656e     e.Set-Timezone.S
   dc75c:	442d7465 664f5453 74657366 74655300     et-DSTOffset.Set
   dc76c:	65704f2d 6d69546e 65530065 6c432d74     -OpenTime.Set-Cl
   dc77c:	0065736f 2d746553 736e6553 76697469     ose.Set-Sensitiv
   dc78c:	00797469 2d746553 6f626544 65636e75     ity.Set-Debounce
   dc79c:	41524600 6554204d 45207473 726f7272     .FRAM Test Error
   dc7ac:	2e322500 55206631 63004354 64756f6c     .%2.1f UTC.cloud
   dc7bc:	6e6f6320 7463656e 206e6f69 75736e75      connection unsu
   dc7cc:	73656363 6c756673 6e6f4300 7463656e     ccessful.Connect
   dc7dc:	69206465 6925206e 63657320 65430073     ed in %i secs.Ce
   dc7ec:	6c756c6c 66007261 656c6961 6f742064     llular.failed to
   dc7fc:	6e6f6320 7463656e 206f7420 756f6c63      connect to clou
   dc80c:	64202c64 676e696f 65656420 65722070     d, doing deep re
   dc81c:	00746573 6f727245 74532072 20657461     set.Error State 
   dc82c:	7546202d 4d206c6c 6d65646f 73655220     - Full Modem Res
   dc83c:	53007465 65746174 72724500 5320726f     et.State.Error S
   dc84c:	65746174 53202d20 65747379 6552206d     tate - System Re
   dc85c:	00746573 2074754f 6d20666f 726f6d65     set.Out of memor
   dc86c:	636f2079 72727563 73206465 3d657a69     y occurred size=
   dc87c:	4d006425 726f6d65 00000079              %d.Memory...

000dc888 <_ZTV5Timer>:
	...
   dc890:	000d43c5 000d4419 000d4209              .C...D...B..

000dc89c <_ZTVN5spark10LogHandlerE>:
	...
   dc8ac:	000d40a5 000d40c9                       .@...@..

000dc8b4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dc8bc:	000d435d 000d4391 000da21d 000d40cb     ]C...C.......@..

000dc8cc <_ZTV8MB85RC64>:
	...
   dc8d4:	000d423d 000d4251 000d71c1 000d7257     =B..QB...q..Wr..
   dc8e4:	000d72d9                                .r..

000dc8e8 <_ZTV17PublishQueueAsync>:
	...
   dc8f0:	000d4215 000d4229 000d7641 000d77cd     .B..)B..Av...w..
   dc900:	000d778d 000d776b 000d7913 000d77b3     .w..kw...y...w..
   dc910:	000dc370 000dc378 000dc37d 000dc382     p...x...}.......
   dc920:	000dc386 000dc38b 000dc390 000dc394     ................
   dc930:	000dc39f 000dc3aa                       ........

000dc938 <_ZL17FRAMversionNumber>:
   dc938:	00000003 656d6954 6e6f7a20 666f2065     ....Time zone of
   dc948:	74657366 00692520 20545344 7366666f     fset %i.DST offs
   dc958:	25207465 66312e32 69616600 2064656c     et %2.1f.failed 
   dc968:	72206f74 20646165 41676572 3d726464     to read regAddr=
   dc978:	78323025 756f6320 253d746e 61660075     %02x count=%u.fa
   dc988:	64656c69 206f7420 64616572 67657220     iled to read reg
   dc998:	72646441 3230253d 74732078 253d7461     Addr=%02x stat=%
   dc9a8:	4f460064 64205455 6e206469 6720746f     d.FOUT did not g
   dc9b8:	4948206f 6e004847 6420746f 63657465     o HIGH.not detec
   dc9c8:	00646574 6c696166 74206465 7277206f     ted.failed to wr
   dc9d8:	20657469 41676572 3d726464 78323025     ite regAddr=%02x
   dc9e8:	61747320 64253d74 74657300 20544457      stat=%d.setWDT 
   dc9f8:	77006425 68637461 20676f64 61656c63     %d.watchdog clea
   dca08:	20646572 73655262 3d746c75 77006425     red bResult=%d.w
   dca18:	68637461 20676f64 20746573 72756f66     atchdog set four
   dca28:	73636553 2064253d 73655262 3d746c75     Secs=%d bResult=
   dca38:	57006425 48435441 00474f44 50454544     %d.WATCHDOG.DEEP
   dca48:	574f505f 445f5245 004e574f 4e554f43     _POWER_DOWN.COUN
   dca58:	574f4454 49545f4e 0052454d 52414c41     TDOWN_TIMER.ALAR
   dca68:	6166004d 72756c69 6e692065 64707520     M.failure in upd
   dca78:	57657461 52656b61 6f736165 6425206e     ateWakeReason %d
   dca88:	6b617700 65722065 6e6f7361 25203d20     .wake reason = %
   dca98:	61660073 72756c69 6e692065 74657320     s.failure in set
   dcaa8:	6e756f43 776f6474 6d69546e 25207265     CountdownTimer %
   dcab8:	61660064 72756c69 6e692065 65656420     d.failure in dee
   dcac8:	776f5070 6f447265 25206e77 45520064     pPowerDown %d.RE
   dcad8:	4c535f47 5f504545 4c525443 2578303d     G_SLEEP_CTRL=0x%
   dcae8:	64007832 276e6469 6f702074 20726577     2x.didn't power 
   dcaf8:	6e776f64 34302500 30252d64 252d6432     down.%04d-%02d-%
   dcb08:	20643230 64323025 3230253a 30253a64     02d %02d:%02d:%0
   dcb18:	67006432 74527465 54734163 7325206d     2d.getRtcAsTm %s
   dcb28:	74657300 73797320 206d6574 636f6c63     .set system cloc
   dcb38:	7266206b 52206d6f 25204354 61660073     k from RTC %s.fa
   dcb48:	64656c69 206f7420 65746564 41207463     iled to detect A
   dcb58:	30383142 65730035 63745274 6d547341     B1805.setRtcAsTm
   dcb68:	00732520 6c696166 20657275 73206e69      %s.failure in s
   dcb78:	74527465 6f724663 206d546d 73006425     etRtcFromTm %d.s
   dcb88:	52207465 66204354 206d6f72 756f6c63     et RTC from clou
   dcb98:	73252064 70706100 3162612e 00353038     d %s.app.ab1805.

000dcba8 <_ZTV6AB1805>:
	...
   dcbb0:	000d6635 000d6637 000d6c81 000d6d07     5f..7f...l...m..
   dcbc0:	74697277 74614465 61662061 64656c69     writeData failed
   dcbd0:	72756420 20676e69 73617265 72662065      during erase fr
   dcbe0:	64416d61 253d7264 00000075              amAddr=%u...

000dcbec <_ZTV6MB85RC>:
	...
   dcbf4:	000d7111 000d7113 000d71c1 000d7257     .q...q...q..Wr..
   dcc04:	000d72d9 6c627550 51687369 65756575     .r..PublishQueue
   dcc14:	6e797341 75710063 69657565 6520676e     Async.queueing e
   dcc24:	746e6576 656d614e 2073253d 61746164     ventName=%s data
   dcc34:	2073253d 3d6c7474 66206425 7367616c     =%s ttl=%d flags
   dcc44:	64253d31 616c6620 3d327367 73206425     1=%d flags2=%d s
   dcc54:	3d657a69 70006425 696c6275 6e696873     ize=%d.publishin
   dcc64:	73252067 20732520 3d6c7474 66206425     g %s %s ttl=%d f
   dcc74:	7367616c 0078253d 6c627570 65687369     lags=%x.publishe
   dcc84:	75732064 73656363 6c756673 7000796c     d successfully.p
   dcc94:	696c6275 64656873 69616620 2c64656c     ublished failed,
   dcca4:	6c697720 6572206c 20797274 25206e69      will retry in %
   dccb4:	6d20756c 70610073 75702e70 00007162     lu ms.app.pubq..

000dccc4 <_ZTV21PublishQueueAsyncBase>:
	...
   dccd4:	000d7641 000d40a5 000d40a5 000d40a5     Av...@...@...@..
   dcce4:	000d40a5 000d40a5                       .@...@..

000dccec <_ZTV25PublishQueueAsyncRetained>:
	...
   dccf4:	000d7729 000d773d 000d7641 000d77cd     )w..=w..Av...w..
   dcd04:	000d778d 000d776b 000d7913 000d77b3     .w..kw...y...w..

000dcd14 <_ZTVN5spark13CellularClassE>:
	...
   dcd1c:	000d8523 000d8519 000d850f 000d84d1     #...............
   dcd2c:	000d8503 000d43a5 000da575 000da57d     .....C..u...}...
   dcd3c:	000d84f7 000d84ef 000d84e5 000d84db     ................
   dcd4c:	000da5ad                                ....

000dcd50 <_ZTV14CellularSignal>:
	...
   dcd58:	000d85d1 000d85d7 000d85d3 000d85e5     ................
   dcd68:	000d8619 000d8645 000d8679 000d86c9     ....E...y.......
   dcd78:	fffffffc 00000000 000d86ef              ............

000dcd84 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcd8c:	000d870f 000d8715 000d8753 000d8723     ........S...#...
   dcd9c:	000d8711                                ....

000dcda0 <_ZTVN5spark13EthernetClassE>:
	...
   dcda8:	000d8d83 000d8d79 000d8d6f 000d8d65     ....y...o...e...
   dcdb8:	000d8d59 000d8d4d 000da575 000da57d     Y...M...u...}...
   dcdc8:	000d8d41 000d8d39 000d8d2f 000d8d25     A...9.../...%...
   dcdd8:	000da5ad                                ....

000dcddc <_ZTV7TwoWire>:
	...
   dcde4:	000d8f35 000d8f7f 000d8f57 000d8f37     5.......W...7...
   dcdf4:	000d8f5f 000d8f67 000d8f6f 000d8f77     _...g...o...w...

000dce04 <_ZTV9IPAddress>:
	...
   dce0c:	000d9121 000d9111 000d9113 34302575     !...........u%04
   dce1c:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   dce2c:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   dce3c:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   dce4c:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   dce5c:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   dce6c:	20736c69 0d00203d 006d000a 66006e6c     ils = ....m.ln.f
   dce7c:	6f63006e 64006564 69617465 0000006c     n.code.detail...

000dce8c <_ZTVN5spark16JSONStreamWriterE>:
	...
   dce94:	000d95db 000d9601 000d95c1 000d9221     ............!...

000dcea4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dceac:	000d9a45 000d9a5d 000da21d 000d40cb     E...]........@..

000dcebc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dcec4:	000d9a71 000d9a85 000da3c1 000d95c9     q...............

000dced4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dcedc:	000d95d9 000d960f 000da159 000d95cb     ........Y.......

000dceec <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dcef4:	000d95d7 000d961d 000d998d 000d9639     ............9...

000dcf04 <_ZTVN5spark12NetworkClassE>:
	...
   dcf0c:	000da535 000da53f 000da549 000da553     5...?...I...S...
   dcf1c:	000da55d 000da569 000da575 000da57d     ]...i...u...}...
   dcf2c:	000da585 000da591 000da599 000da5a3     ................
   dcf3c:	000da5ad 69726977 5300676e 65747379     ....wiring.Syste
   dcf4c:	6c73206d 20706565 666e6f63 72756769     m sleep configur
   dcf5c:	6f697461 7369206e 766e6920 64696c61     ation is invalid
   dcf6c:	005a002e 33302b25 30253a64 25007532     ..Z.%+03d:%02u.%
   dcf7c:	6d252d59 5464252d 253a4825 53253a4d     Y-%m-%dT%H:%M:%S
   dcf8c:	61007a25 69746373 0000656d              %z.asctime..

000dcf98 <_ZTV11USARTSerial>:
	...
   dcfa0:	000db119 000db185 000db15d 000da7f3     ........].......
   dcfb0:	000db12d 000db149 000db13b 000db157     -...I...;...W...
   dcfc0:	000db11b 000db11f                       ........

000dcfc8 <_ZTV9USBSerial>:
	...
   dcfd0:	000db22d 000db295 000db26b 000da7f3     -.......k.......
   dcfe0:	000db25d 000db22f 000db23f 000db28f     ].../...?.......
   dcff0:	000db24f 000db229                       O...)...

000dcff8 <_ZSt7nothrow>:
   dcff8:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   dd008:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000dd019 <day_name.6145>:
   dd019:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   dd029:	61536972                                 riSat

000dd02e <mon_name.6146>:
   dd02e:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   dd03e:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   dd04e:	63654476                                vDec

000dd052 <_ctype_>:
   dd052:	20202000 20202020 28282020 20282828     .         ((((( 
   dd062:	20202020 20202020 20202020 20202020                     
   dd072:	10108820 10101010 10101010 10101010      ...............
   dd082:	04040410 04040404 10040404 10101010     ................
   dd092:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dd0a2:	01010101 01010101 01010101 10101010     ................
   dd0b2:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dd0c2:	02020202 02020202 02020202 10101010     ................
   dd0d2:	00000020 00000000 00000000 00000000      ...............
	...

000dd153 <link_const_variable_data_end>:
	...

000dd154 <link_constructors_location>:
   dd154:	000d58e5 	.word	0x000d58e5
   dd158:	000d6629 	.word	0x000d6629
   dd15c:	000d7101 	.word	0x000d7101
   dd160:	000d7ba5 	.word	0x000d7ba5
   dd164:	000d84a9 	.word	0x000d84a9
   dd168:	000d85a1 	.word	0x000d85a1
   dd16c:	000d8d8d 	.word	0x000d8d8d
   dd170:	000da20d 	.word	0x000da20d
   dd174:	000da681 	.word	0x000da681
   dd178:	000da90d 	.word	0x000da90d
   dd17c:	000dac81 	.word	0x000dac81
   dd180:	000db105 	.word	0x000db105

000dd184 <link_constructors_end>:
	...
