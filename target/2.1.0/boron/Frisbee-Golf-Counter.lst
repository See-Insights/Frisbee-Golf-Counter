
/Users/chipmc/Documents/Maker/Particle/Projects/Frisbee-Golf-Counter/target/2.1.0/boron/Frisbee-Golf-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009110  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dd130  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000134  2003e1e8  000dd934  0001e1e8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004d8  2003e320  2003e320  0002e320  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dda68  000dda68  0002da68  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dda94  000dda94  0002da94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e7983  00000000  00000000  0002da98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001f485  00000000  00000000  0021541b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003b530  00000000  00000000  002348a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003590  00000000  00000000  0026fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a158  00000000  00000000  00273360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00040d80  00000000  00000000  0027d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004fe7e  00000000  00000000  002be238  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00117b19  00000000  00000000  0030e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009788  00000000  00000000  00425bd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 ffdd 	bl	dbff0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 ffff 	bl	dc040 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1e8 	.word	0x2003e1e8
   d404c:	000dd934 	.word	0x000dd934
   d4050:	2003e31c 	.word	0x2003e31c
   d4054:	2003e320 	.word	0x2003e320
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 f977 	bl	db354 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dd0f4 	.word	0x000dd0f4
   d4080:	000dd124 	.word	0x000dd124

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b978 	b.w	d5378 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fe47 	bl	d5d1c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 b921 	b.w	db2d8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b9a1 	b.w	d83dc <malloc>

000d409a <_Znaj>:
   d409a:	f004 b99f 	b.w	d83dc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b9a5 	b.w	d83ec <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 f81a 	bl	d80e4 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7db5 	.word	0x000d7db5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z18outOfMemoryHandleryi+0x8>)
   d40d6:	601a      	str	r2, [r3, #0]
}
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003e228 	.word	0x2003e228

000d40e0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e0:	6803      	ldr	r3, [r0, #0]
   d40e2:	4718      	bx	r3

000d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40e4:	2a01      	cmp	r2, #1
   d40e6:	d003      	beq.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40e8:	2a02      	cmp	r2, #2
   d40ea:	d003      	beq.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40ec:	2000      	movs	r0, #0
   d40ee:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f0:	6001      	str	r1, [r0, #0]
	      break;
   d40f2:	e7fb      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40f4:	680b      	ldr	r3, [r1, #0]
   d40f6:	6003      	str	r3, [r0, #0]
	}
   d40f8:	e7f8      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40fa <_Z19countSignalTimerISRv>:
  sensorDetect = true;                                              // sets the sensor flag for the main loop
  pinSetFast(blueLED);                                                // Turn on the blue LED
}

void countSignalTimerISR() {
  digitalWrite(blueLED,LOW);
   d40fa:	2100      	movs	r1, #0
   d40fc:	2007      	movs	r0, #7
   d40fe:	f007 b9c2 	b.w	db486 <digitalWrite>
	...

000d4104 <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d4104:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d4106:	4b05      	ldr	r3, [pc, #20]	; (d411c <_Z21batteryContextMessagev+0x18>)
   d4108:	7b1a      	ldrb	r2, [r3, #12]
   d410a:	4b05      	ldr	r3, [pc, #20]	; (d4120 <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d410c:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d410e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d4112:	f006 fc08 	bl	da926 <_ZN6StringC1EPKc>
}
   d4116:	4620      	mov	r0, r4
   d4118:	bd10      	pop	{r4, pc}
   d411a:	bf00      	nop
   d411c:	2003e4c0 	.word	0x2003e4c0
   d4120:	2003e1e8 	.word	0x2003e1e8

000d4124 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4124:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4126:	6803      	ldr	r3, [r0, #0]
   d4128:	2b2f      	cmp	r3, #47	; 0x2f
{
   d412a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d412c:	d904      	bls.n	d4138 <nrf_gpio_pin_port_decode+0x14>
   d412e:	4a07      	ldr	r2, [pc, #28]	; (d414c <nrf_gpio_pin_port_decode+0x28>)
   d4130:	2100      	movs	r1, #0
   d4132:	200a      	movs	r0, #10
   d4134:	f003 ffd6 	bl	d80e4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d413c:	bf83      	ittte	hi
   d413e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4142:	4803      	ldrhi	r0, [pc, #12]	; (d4150 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4144:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4146:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d414a:	bd10      	pop	{r4, pc}
   d414c:	000d7db5 	.word	0x000d7db5
   d4150:	50000300 	.word	0x50000300

000d4154 <_Z9sensorISRv>:
{
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
  sensorDetect = true;                                              // sets the sensor flag for the main loop
   d4156:	4b1c      	ldr	r3, [pc, #112]	; (d41c8 <_Z9sensorISRv+0x74>)
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4158:	4c1c      	ldr	r4, [pc, #112]	; (d41cc <_Z9sensorISRv+0x78>)
   d415a:	4d1d      	ldr	r5, [pc, #116]	; (d41d0 <_Z9sensorISRv+0x7c>)
   d415c:	2201      	movs	r2, #1
   d415e:	701a      	strb	r2, [r3, #0]
   d4160:	7823      	ldrb	r3, [r4, #0]
   d4162:	f3bf 8f5b 	dmb	ish
   d4166:	f013 0f01 	tst.w	r3, #1
   d416a:	d109      	bne.n	d4180 <_Z9sensorISRv+0x2c>
   d416c:	4620      	mov	r0, r4
   d416e:	f7ff ffa3 	bl	d40b8 <__cxa_guard_acquire>
   d4172:	b128      	cbz	r0, d4180 <_Z9sensorISRv+0x2c>
   d4174:	f003 fe4e 	bl	d7e14 <HAL_Pin_Map>
   d4178:	6028      	str	r0, [r5, #0]
   d417a:	4620      	mov	r0, r4
   d417c:	f7ff ffa1 	bl	d40c2 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4180:	682b      	ldr	r3, [r5, #0]
   d4182:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   d4186:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4188:	7823      	ldrb	r3, [r4, #0]
   d418a:	f3bf 8f5b 	dmb	ish
   d418e:	07db      	lsls	r3, r3, #31
   d4190:	d409      	bmi.n	d41a6 <_Z9sensorISRv+0x52>
   d4192:	480e      	ldr	r0, [pc, #56]	; (d41cc <_Z9sensorISRv+0x78>)
   d4194:	f7ff ff90 	bl	d40b8 <__cxa_guard_acquire>
   d4198:	b128      	cbz	r0, d41a6 <_Z9sensorISRv+0x52>
   d419a:	f003 fe3b 	bl	d7e14 <HAL_Pin_Map>
   d419e:	6028      	str	r0, [r5, #0]
   d41a0:	480a      	ldr	r0, [pc, #40]	; (d41cc <_Z9sensorISRv+0x78>)
   d41a2:	f7ff ff8e 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41a6:	682b      	ldr	r3, [r5, #0]
   d41a8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d41ac:	f003 031f 	and.w	r3, r3, #31
   d41b0:	4333      	orrs	r3, r6
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41b2:	a801      	add	r0, sp, #4
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	f7ff ffb5 	bl	d4124 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d41ba:	9a01      	ldr	r2, [sp, #4]
   d41bc:	2301      	movs	r3, #1
   d41be:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d41c0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d41c4:	b002      	add	sp, #8
   d41c6:	bd70      	pop	{r4, r5, r6, pc}
   d41c8:	2003e4b4 	.word	0x2003e4b4
   d41cc:	2003e324 	.word	0x2003e324
   d41d0:	2003e328 	.word	0x2003e328

000d41d4 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d41d4:	b538      	push	{r3, r4, r5, lr}
   d41d6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d41d8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d41da:	b128      	cbz	r0, d41e8 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d41dc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d41de:	210c      	movs	r1, #12
   d41e0:	f007 fa19 	bl	db616 <_ZdlPvj>
            wakeupSource = next;
   d41e4:	4628      	mov	r0, r5
        while (wakeupSource) {
   d41e6:	e7f8      	b.n	d41da <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d41e8:	4620      	mov	r0, r4
   d41ea:	bd38      	pop	{r3, r4, r5, pc}

000d41ec <_Z7sendNow6String>:
{
   d41ec:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d41ee:	4904      	ldr	r1, [pc, #16]	; (d4200 <_Z7sendNow6String+0x14>)
   d41f0:	f006 fbef 	bl	da9d2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d41f4:	b118      	cbz	r0, d41fe <_Z7sendNow6String+0x12>
    state = REPORTING_STATE;
   d41f6:	4b03      	ldr	r3, [pc, #12]	; (d4204 <_Z7sendNow6String+0x18>)
   d41f8:	2206      	movs	r2, #6
   d41fa:	701a      	strb	r2, [r3, #0]
    return 1;
   d41fc:	2001      	movs	r0, #1
}
   d41fe:	bd08      	pop	{r3, pc}
   d4200:	000dc308 	.word	0x000dc308
   d4204:	2003e4b5 	.word	0x2003e4b5

000d4208 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4208:	6943      	ldr	r3, [r0, #20]
   d420a:	b113      	cbz	r3, d4212 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d420c:	6983      	ldr	r3, [r0, #24]
   d420e:	300c      	adds	r0, #12
   d4210:	4718      	bx	r3
            callback();
        }
    }
   d4212:	4770      	bx	lr

000d4214 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4214:	b510      	push	{r4, lr}
   d4216:	4b03      	ldr	r3, [pc, #12]	; (d4224 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4218:	6003      	str	r3, [r0, #0]
   d421a:	4604      	mov	r4, r0
   d421c:	f003 fad4 	bl	d77c8 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4220:	4620      	mov	r0, r4
   d4222:	bd10      	pop	{r4, pc}
   d4224:	000dc890 	.word	0x000dc890

000d4228 <_ZN17PublishQueueAsyncD0Ev>:
   d4228:	b510      	push	{r4, lr}
   d422a:	4604      	mov	r4, r0
   d422c:	f7ff fff2 	bl	d4214 <_ZN17PublishQueueAsyncD1Ev>
   d4230:	4620      	mov	r0, r4
   d4232:	2138      	movs	r1, #56	; 0x38
   d4234:	f007 f9ef 	bl	db616 <_ZdlPvj>
   d4238:	4620      	mov	r0, r4
   d423a:	bd10      	pop	{r4, pc}

000d423c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d423c:	b510      	push	{r4, lr}
   d423e:	4b03      	ldr	r3, [pc, #12]	; (d424c <_ZN8MB85RC64D1Ev+0x10>)
   d4240:	6003      	str	r3, [r0, #0]
   d4242:	4604      	mov	r4, r0
   d4244:	f002 ffb4 	bl	d71b0 <_ZN6MB85RCD1Ev>
   d4248:	4620      	mov	r0, r4
   d424a:	bd10      	pop	{r4, pc}
   d424c:	000dc874 	.word	0x000dc874

000d4250 <_ZN8MB85RC64D0Ev>:
   d4250:	b510      	push	{r4, lr}
   d4252:	4604      	mov	r4, r0
   d4254:	f7ff fff2 	bl	d423c <_ZN8MB85RC64D1Ev>
   d4258:	4620      	mov	r0, r4
   d425a:	2110      	movs	r1, #16
   d425c:	f007 f9db 	bl	db616 <_ZdlPvj>
   d4260:	4620      	mov	r0, r4
   d4262:	bd10      	pop	{r4, pc}

000d4264 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4264:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4266:	2100      	movs	r1, #0
   d4268:	4604      	mov	r4, r0
   d426a:	4608      	mov	r0, r1
   d426c:	f003 fd0a 	bl	d7c84 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4270:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4272:	4620      	mov	r0, r4
   d4274:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4276:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4278:	f003 fd1c 	bl	d7cb4 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d427c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d427e:	b10c      	cbz	r4, d4284 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4280:	2301      	movs	r3, #1
   d4282:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4284:	2100      	movs	r1, #0
   d4286:	2001      	movs	r0, #1
   d4288:	f003 fcfc 	bl	d7c84 <os_thread_scheduling>
            }
        }
        if (t) {
   d428c:	b12c      	cbz	r4, d429a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d428e:	6823      	ldr	r3, [r4, #0]
   d4290:	4620      	mov	r0, r4
   d4292:	689b      	ldr	r3, [r3, #8]
   d4294:	4798      	blx	r3
            t->running = false;
   d4296:	2300      	movs	r3, #0
   d4298:	7123      	strb	r3, [r4, #4]
        }
    }
   d429a:	b002      	add	sp, #8
   d429c:	bd10      	pop	{r4, pc}
	...

000d42a0 <_Z11resetCounts6String>:
{
   d42a0:	b508      	push	{r3, lr}
   d42a2:	490a      	ldr	r1, [pc, #40]	; (d42cc <_Z11resetCounts6String+0x2c>)
   d42a4:	f006 fb95 	bl	da9d2 <_ZNK6String6equalsEPKc>
   d42a8:	2300      	movs	r3, #0
  if (command == "1")
   d42aa:	b168      	cbz	r0, d42c8 <_Z11resetCounts6String+0x28>
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d42ac:	4a08      	ldr	r2, [pc, #32]	; (d42d0 <_Z11resetCounts6String+0x30>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d42ae:	4909      	ldr	r1, [pc, #36]	; (d42d4 <_Z11resetCounts6String+0x34>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d42b0:	6013      	str	r3, [r2, #0]
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d42b2:	6093      	str	r3, [r2, #8]
    current.alertCount = 0;                                           // Reset count variables
   d42b4:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d42b6:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d42b8:	4a07      	ldr	r2, [pc, #28]	; (d42d8 <_Z11resetCounts6String+0x38>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d42ba:	610b      	str	r3, [r1, #16]
    dataInFlight = false;
   d42bc:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d42be:	4b07      	ldr	r3, [pc, #28]	; (d42dc <_Z11resetCounts6String+0x3c>)
   d42c0:	2001      	movs	r0, #1
   d42c2:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d42c4:	4b06      	ldr	r3, [pc, #24]	; (d42e0 <_Z11resetCounts6String+0x40>)
   d42c6:	7018      	strb	r0, [r3, #0]
}
   d42c8:	bd08      	pop	{r3, pc}
   d42ca:	bf00      	nop
   d42cc:	000dc308 	.word	0x000dc308
   d42d0:	2003e3f4 	.word	0x2003e3f4
   d42d4:	2003e4c0 	.word	0x2003e4c0
   d42d8:	2003e423 	.word	0x2003e423
   d42dc:	2003e418 	.word	0x2003e418
   d42e0:	2003e4f0 	.word	0x2003e4f0

000d42e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d42e4:	b510      	push	{r4, lr}
   d42e6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d42e8:	6800      	ldr	r0, [r0, #0]
   d42ea:	b118      	cbz	r0, d42f4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d42ec:	f004 f87e 	bl	d83ec <free>
            wakeupSource_ = nullptr;
   d42f0:	2300      	movs	r3, #0
   d42f2:	6023      	str	r3, [r4, #0]
        }
    }
   d42f4:	bd10      	pop	{r4, pc}

000d42f6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d42f6:	b510      	push	{r4, lr}
   d42f8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d42fa:	f7ff fff3 	bl	d42e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d42fe:	4620      	mov	r0, r4
   d4300:	bd10      	pop	{r4, pc}

000d4302 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d4302:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4304:	2000      	movs	r0, #0
   d4306:	f003 ffe1 	bl	d82cc <spark_sync_time_pending>
   d430a:	b128      	cbz	r0, d4318 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d430c:	f003 ffb6 	bl	d827c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4310:	f080 0001 	eor.w	r0, r0, #1
   d4314:	b2c0      	uxtb	r0, r0
    }
   d4316:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4318:	2001      	movs	r0, #1
   d431a:	e7fc      	b.n	d4316 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d431c:	2300      	movs	r3, #0
   d431e:	2204      	movs	r2, #4
   d4320:	f003 bf8c 	b.w	d823c <spark_variable>

000d4324 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4324:	b530      	push	{r4, r5, lr}
   d4326:	b085      	sub	sp, #20
   d4328:	4603      	mov	r3, r0
   d432a:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d432c:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d432e:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d4330:	4798      	blx	r3
        size = str.length();
   d4332:	9802      	ldr	r0, [sp, #8]
   d4334:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d4336:	f004 f851 	bl	d83dc <malloc>
   d433a:	6028      	str	r0, [r5, #0]
        if (!data) {
   d433c:	b150      	cbz	r0, d4354 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d433e:	6822      	ldr	r2, [r4, #0]
   d4340:	9900      	ldr	r1, [sp, #0]
   d4342:	f007 fe55 	bl	dbff0 <memcpy>
        return 0;
   d4346:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4348:	4668      	mov	r0, sp
   d434a:	f006 faa1 	bl	da890 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d434e:	4620      	mov	r0, r4
   d4350:	b005      	add	sp, #20
   d4352:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d4354:	4c00      	ldr	r4, [pc, #0]	; (d4358 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d4356:	e7f7      	b.n	d4348 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4358:	fffffefc 	.word	0xfffffefc

000d435c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d435c:	4b0a      	ldr	r3, [pc, #40]	; (d4388 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d435e:	b510      	push	{r4, lr}
   d4360:	4604      	mov	r4, r0
   d4362:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4364:	f005 fa1c 	bl	d97a0 <_ZN5spark10LogManager8instanceEv>
   d4368:	4621      	mov	r1, r4
   d436a:	f005 fc1e 	bl	d9baa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d436e:	f006 ff67 	bl	db240 <_Z16_fetch_usbserialv>
   d4372:	f006 ff59 	bl	db228 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4376:	4620      	mov	r0, r4
   d4378:	4b04      	ldr	r3, [pc, #16]	; (d438c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d437a:	f840 3b04 	str.w	r3, [r0], #4
   d437e:	f005 fb01 	bl	d9984 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4382:	4620      	mov	r0, r4
   d4384:	bd10      	pop	{r4, pc}
   d4386:	bf00      	nop
   d4388:	000dc85c 	.word	0x000dc85c
   d438c:	000dc844 	.word	0x000dc844

000d4390 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4390:	b510      	push	{r4, lr}
   d4392:	4604      	mov	r4, r0
    }
   d4394:	f7ff ffe2 	bl	d435c <_ZN5spark16SerialLogHandlerD1Ev>
   d4398:	4620      	mov	r0, r4
   d439a:	2124      	movs	r1, #36	; 0x24
   d439c:	f007 f93b 	bl	db616 <_ZdlPvj>
   d43a0:	4620      	mov	r0, r4
   d43a2:	bd10      	pop	{r4, pc}

000d43a4 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d43a4:	2300      	movs	r3, #0
   d43a6:	6840      	ldr	r0, [r0, #4]
   d43a8:	461a      	mov	r2, r3
   d43aa:	4619      	mov	r1, r3
   d43ac:	f003 bfde 	b.w	d836c <network_off>

000d43b0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d43b0:	b510      	push	{r4, lr}
      if (_M_manager)
   d43b2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d43b4:	4604      	mov	r4, r0
      if (_M_manager)
   d43b6:	b113      	cbz	r3, d43be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d43b8:	2203      	movs	r2, #3
   d43ba:	4601      	mov	r1, r0
   d43bc:	4798      	blx	r3
    }
   d43be:	4620      	mov	r0, r4
   d43c0:	bd10      	pop	{r4, pc}
	...

000d43c4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d43c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43c6:	4b13      	ldr	r3, [pc, #76]	; (d4414 <_ZN5TimerD1Ev+0x50>)
   d43c8:	6003      	str	r3, [r0, #0]
   d43ca:	4604      	mov	r4, r0
        if (handle) {
   d43cc:	6880      	ldr	r0, [r0, #8]
   d43ce:	b1c8      	cbz	r0, d4404 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d43d0:	2500      	movs	r5, #0
   d43d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d43d6:	e9cd 3500 	strd	r3, r5, [sp]
   d43da:	2102      	movs	r1, #2
   d43dc:	462b      	mov	r3, r5
   d43de:	462a      	mov	r2, r5
   d43e0:	f003 fc70 	bl	d7cc4 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d43e4:	68a0      	ldr	r0, [r4, #8]
   d43e6:	4629      	mov	r1, r5
   d43e8:	f003 fcbc 	bl	d7d64 <os_timer_set_id>
            while (running) {
   d43ec:	7923      	ldrb	r3, [r4, #4]
   d43ee:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43f2:	b113      	cbz	r3, d43fa <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d43f4:	f003 fc3e 	bl	d7c74 <os_thread_yield>
            while (running) {
   d43f8:	e7f8      	b.n	d43ec <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d43fa:	68a0      	ldr	r0, [r4, #8]
   d43fc:	4629      	mov	r1, r5
   d43fe:	f003 fc51 	bl	d7ca4 <os_timer_destroy>
            handle = nullptr;
   d4402:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4404:	f104 000c 	add.w	r0, r4, #12
   d4408:	f7ff ffd2 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
    }
   d440c:	4620      	mov	r0, r4
   d440e:	b003      	add	sp, #12
   d4410:	bd30      	pop	{r4, r5, pc}
   d4412:	bf00      	nop
   d4414:	000dc830 	.word	0x000dc830

000d4418 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4418:	b510      	push	{r4, lr}
   d441a:	4604      	mov	r4, r0
    }
   d441c:	f7ff ffd2 	bl	d43c4 <_ZN5TimerD1Ev>
   d4420:	4620      	mov	r0, r4
   d4422:	211c      	movs	r1, #28
   d4424:	f007 f8f7 	bl	db616 <_ZdlPvj>
   d4428:	4620      	mov	r0, r4
   d442a:	bd10      	pop	{r4, pc}

000d442c <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d442c:	b538      	push	{r3, r4, r5, lr}
   d442e:	4604      	mov	r4, r0
            : conf_{} {
   d4430:	2520      	movs	r5, #32
   d4432:	462a      	mov	r2, r5
   d4434:	2100      	movs	r1, #0
   d4436:	f007 fe03 	bl	dc040 <memset>
        conf_.size = sizeof(conf_);
   d443a:	7165      	strb	r5, [r4, #5]
    }
   d443c:	4620      	mov	r0, r4
   d443e:	bd38      	pop	{r3, r4, r5, pc}

000d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4442:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4444:	4605      	mov	r5, r0
   d4446:	460f      	mov	r7, r1
   d4448:	4616      	mov	r6, r2
        if (valid_) {
   d444a:	b18b      	cbz	r3, d4470 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d444c:	6803      	ldr	r3, [r0, #0]
   d444e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4450:	b183      	cbz	r3, d4474 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4452:	889a      	ldrh	r2, [r3, #4]
   d4454:	2a01      	cmp	r2, #1
   d4456:	d006      	beq.n	d4466 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4458:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d445a:	e7f9      	b.n	d4450 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d445c:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d445e:	b14b      	cbz	r3, d4474 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4460:	889a      	ldrh	r2, [r3, #4]
   d4462:	2a01      	cmp	r2, #1
   d4464:	d1fa      	bne.n	d445c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4466:	b12b      	cbz	r3, d4474 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4468:	899a      	ldrh	r2, [r3, #12]
   d446a:	42ba      	cmp	r2, r7
   d446c:	d1f6      	bne.n	d445c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d446e:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4470:	4628      	mov	r0, r5
   d4472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4474:	490a      	ldr	r1, [pc, #40]	; (d44a0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4476:	2010      	movs	r0, #16
   d4478:	f007 f8cf 	bl	db61a <_ZnwjRKSt9nothrow_t>
   d447c:	4604      	mov	r4, r0
   d447e:	b168      	cbz	r0, d449c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4480:	2210      	movs	r2, #16
   d4482:	2100      	movs	r1, #0
   d4484:	f007 fddc 	bl	dc040 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4488:	4b06      	ldr	r3, [pc, #24]	; (d44a4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d448a:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d448c:	2301      	movs	r3, #1
   d448e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4490:	692b      	ldr	r3, [r5, #16]
   d4492:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4494:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4496:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4498:	612c      	str	r4, [r5, #16]
   d449a:	e7e9      	b.n	d4470 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d449c:	7528      	strb	r0, [r5, #20]
                return *this;
   d449e:	e7e7      	b.n	d4470 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d44a0:	000dcf98 	.word	0x000dcf98
   d44a4:	00030010 	.word	0x00030010

000d44a8 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d44a8:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d44aa:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d44ac:	4605      	mov	r5, r0
   d44ae:	460e      	mov	r6, r1
        if (valid_) {
   d44b0:	b1cb      	cbz	r3, d44e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d44b2:	6803      	ldr	r3, [r0, #0]
   d44b4:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d44b6:	b123      	cbz	r3, d44c2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d44b8:	889a      	ldrh	r2, [r3, #4]
   d44ba:	2a04      	cmp	r2, #4
   d44bc:	d017      	beq.n	d44ee <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d44be:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d44c0:	e7f9      	b.n	d44b6 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d44c2:	490c      	ldr	r1, [pc, #48]	; (d44f4 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d44c4:	2010      	movs	r0, #16
   d44c6:	f007 f8a8 	bl	db61a <_ZnwjRKSt9nothrow_t>
   d44ca:	4604      	mov	r4, r0
   d44cc:	b168      	cbz	r0, d44ea <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d44ce:	2210      	movs	r2, #16
   d44d0:	2100      	movs	r1, #0
   d44d2:	f007 fdb5 	bl	dc040 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d44d6:	4b08      	ldr	r3, [pc, #32]	; (d44f8 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d44d8:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d44da:	2304      	movs	r3, #4
   d44dc:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d44de:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d44e0:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d44e2:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d44e6:	4628      	mov	r0, r5
   d44e8:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d44ea:	7528      	strb	r0, [r5, #20]
                return *this;
   d44ec:	e7fb      	b.n	d44e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d44ee:	60de      	str	r6, [r3, #12]
                return *this;
   d44f0:	e7f9      	b.n	d44e6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d44f2:	bf00      	nop
   d44f4:	000dcf98 	.word	0x000dcf98
   d44f8:	00030010 	.word	0x00030010

000d44fc <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d44fc:	2000      	movs	r0, #0
   d44fe:	f003 bc71 	b.w	d7de4 <hal_timer_millis>
	...

000d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4504:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4506:	4801      	ldr	r0, [pc, #4]	; (d450c <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4508:	f004 b9ac 	b.w	d8864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d450c:	000d8839 	.word	0x000d8839

000d4510 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4510:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4512:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4514:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4516:	2100      	movs	r1, #0
   d4518:	b140      	cbz	r0, d452c <_ZN5Timer12changePeriodEjj+0x1c>
   d451a:	e9cd 2100 	strd	r2, r1, [sp]
   d451e:	460a      	mov	r2, r1
   d4520:	2103      	movs	r1, #3
   d4522:	f003 fbcf 	bl	d7cc4 <os_timer_change>
   d4526:	fab0 f080 	clz	r0, r0
   d452a:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d452c:	b003      	add	sp, #12
   d452e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4532 <_ZNK5Timer8isActiveEv>:
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4532:	b508      	push	{r3, lr}
    bool isValid() const { return handle!=nullptr; }
   d4534:	6880      	ldr	r0, [r0, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4536:	b128      	cbz	r0, d4544 <_ZNK5Timer8isActiveEv+0x12>
   d4538:	2100      	movs	r1, #0
   d453a:	f003 fc03 	bl	d7d44 <os_timer_is_active>
   d453e:	3800      	subs	r0, #0
   d4540:	bf18      	it	ne
   d4542:	2001      	movne	r0, #1
   d4544:	bd08      	pop	{r3, pc}

000d4546 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4546:	b40e      	push	{r1, r2, r3}
   d4548:	b510      	push	{r4, lr}
   d454a:	b08d      	sub	sp, #52	; 0x34
   d454c:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d454e:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4550:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4554:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4556:	2300      	movs	r3, #0
   d4558:	2020      	movs	r0, #32
   d455a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d455e:	e9cd 4200 	strd	r4, r2, [sp]
   d4562:	201e      	movs	r0, #30
   d4564:	aa04      	add	r2, sp, #16
   d4566:	f003 fdcd 	bl	d8104 <log_message_v>
}
   d456a:	b00d      	add	sp, #52	; 0x34
   d456c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4570:	b003      	add	sp, #12
   d4572:	4770      	bx	lr

000d4574 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d4574:	b40e      	push	{r1, r2, r3}
   d4576:	b510      	push	{r4, lr}
   d4578:	b08d      	sub	sp, #52	; 0x34
   d457a:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d457c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d457e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4582:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d4584:	2300      	movs	r3, #0
   d4586:	2020      	movs	r0, #32
   d4588:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d458c:	e9cd 4200 	strd	r4, r2, [sp]
   d4590:	2032      	movs	r0, #50	; 0x32
   d4592:	aa04      	add	r2, sp, #16
   d4594:	f003 fdb6 	bl	d8104 <log_message_v>
}
   d4598:	b00d      	add	sp, #52	; 0x34
   d459a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d459e:	b003      	add	sp, #12
   d45a0:	4770      	bx	lr

000d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d45a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d45a4:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d45a6:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d45aa:	f88d 3000 	strb.w	r3, [sp]
   d45ae:	f88d 5004 	strb.w	r5, [sp, #4]
   d45b2:	68e4      	ldr	r4, [r4, #12]
   d45b4:	233c      	movs	r3, #60	; 0x3c
   d45b6:	47a0      	blx	r4
	}
   d45b8:	b003      	add	sp, #12
   d45ba:	bd30      	pop	{r4, r5, pc}

000d45bc <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d45bc:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d45be:	780b      	ldrb	r3, [r1, #0]
   d45c0:	4d1c      	ldr	r5, [pc, #112]	; (d4634 <_Z14UbidotsHandlerPKcS0_+0x78>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d45c2:	b093      	sub	sp, #76	; 0x4c
   d45c4:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d45c6:	b993      	cbnz	r3, d45ee <_Z14UbidotsHandlerPKcS0_+0x32>
    snprintf(responseString, sizeof(responseString),"No Data");
   d45c8:	491b      	ldr	r1, [pc, #108]	; (d4638 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d45ca:	a802      	add	r0, sp, #8
   d45cc:	f007 fd85 	bl	dc0da <strcpy>
  if (sysStatus.verboseMode) publishQueue.publish("Ubidots Hook", responseString, PRIVATE, WITH_ACK);
   d45d0:	792b      	ldrb	r3, [r5, #4]
   d45d2:	b153      	cbz	r3, d45ea <_Z14UbidotsHandlerPKcS0_+0x2e>
inline particle::Flag<TagT, ValueT>::operator ValueT() const {
    return val_;
}

template<typename TagT, typename ValueT>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d45d4:	4b19      	ldr	r3, [pc, #100]	; (d463c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d45d6:	491a      	ldr	r1, [pc, #104]	; (d4640 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d45d8:	781b      	ldrb	r3, [r3, #0]
   d45da:	f88d 3000 	strb.w	r3, [sp]
   d45de:	4b19      	ldr	r3, [pc, #100]	; (d4644 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d45e0:	4819      	ldr	r0, [pc, #100]	; (d4648 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d45e2:	781b      	ldrb	r3, [r3, #0]
   d45e4:	aa02      	add	r2, sp, #8
   d45e6:	f7ff ffdc 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d45ea:	b013      	add	sp, #76	; 0x4c
   d45ec:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d45ee:	4608      	mov	r0, r1
   d45f0:	f007 fcda 	bl	dbfa8 <atoi>
   d45f4:	28c8      	cmp	r0, #200	; 0xc8
   d45f6:	d10d      	bne.n	d4614 <_Z14UbidotsHandlerPKcS0_+0x58>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d45f8:	4914      	ldr	r1, [pc, #80]	; (d464c <_Z14UbidotsHandlerPKcS0_+0x90>)
   d45fa:	a802      	add	r0, sp, #8
   d45fc:	f007 fd6d 	bl	dc0da <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4600:	f006 fcd7 	bl	dafb2 <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d4604:	4b12      	ldr	r3, [pc, #72]	; (d4650 <_Z14UbidotsHandlerPKcS0_+0x94>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4606:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d4608:	2201      	movs	r2, #1
   d460a:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d460c:	4b11      	ldr	r3, [pc, #68]	; (d4654 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d460e:	2200      	movs	r2, #0
   d4610:	701a      	strb	r2, [r3, #0]
   d4612:	e7dd      	b.n	d45d0 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4614:	4620      	mov	r0, r4
   d4616:	f007 fcc7 	bl	dbfa8 <atoi>
   d461a:	28c9      	cmp	r0, #201	; 0xc9
   d461c:	d0ec      	beq.n	d45f8 <_Z14UbidotsHandlerPKcS0_+0x3c>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d461e:	4620      	mov	r0, r4
   d4620:	f007 fcc2 	bl	dbfa8 <atoi>
   d4624:	4a0c      	ldr	r2, [pc, #48]	; (d4658 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d4626:	4603      	mov	r3, r0
   d4628:	2140      	movs	r1, #64	; 0x40
   d462a:	a802      	add	r0, sp, #8
   d462c:	f003 fef6 	bl	d841c <snprintf>
   d4630:	e7ce      	b.n	d45d0 <_Z14UbidotsHandlerPKcS0_+0x14>
   d4632:	bf00      	nop
   d4634:	2003e4c0 	.word	0x2003e4c0
   d4638:	000dc33d 	.word	0x000dc33d
   d463c:	2003e379 	.word	0x2003e379
   d4640:	000dc374 	.word	0x000dc374
   d4644:	2003e378 	.word	0x2003e378
   d4648:	2003e478 	.word	0x2003e478
   d464c:	000dc345 	.word	0x000dc345
   d4650:	2003e4f0 	.word	0x2003e4f0
   d4654:	2003e423 	.word	0x2003e423
   d4658:	000dc357 	.word	0x000dc357

000d465c <_Z12hardResetNow6String>:
{
   d465c:	b507      	push	{r0, r1, r2, lr}
   d465e:	490b      	ldr	r1, [pc, #44]	; (d468c <_Z12hardResetNow6String+0x30>)
   d4660:	f006 f9b7 	bl	da9d2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4664:	b170      	cbz	r0, d4684 <_Z12hardResetNow6String+0x28>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4666:	2300      	movs	r3, #0
   d4668:	f88d 3000 	strb.w	r3, [sp]
   d466c:	4b08      	ldr	r3, [pc, #32]	; (d4690 <_Z12hardResetNow6String+0x34>)
   d466e:	4a09      	ldr	r2, [pc, #36]	; (d4694 <_Z12hardResetNow6String+0x38>)
   d4670:	781b      	ldrb	r3, [r3, #0]
   d4672:	4909      	ldr	r1, [pc, #36]	; (d4698 <_Z12hardResetNow6String+0x3c>)
   d4674:	4809      	ldr	r0, [pc, #36]	; (d469c <_Z12hardResetNow6String+0x40>)
   d4676:	f7ff ff94 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    ab1805.deepPowerDown(10);
   d467a:	4809      	ldr	r0, [pc, #36]	; (d46a0 <_Z12hardResetNow6String+0x44>)
   d467c:	210a      	movs	r1, #10
   d467e:	f002 faa1 	bl	d6bc4 <_ZN6AB180513deepPowerDownEi>
   d4682:	2001      	movs	r0, #1
}
   d4684:	b003      	add	sp, #12
   d4686:	f85d fb04 	ldr.w	pc, [sp], #4
   d468a:	bf00      	nop
   d468c:	000dc308 	.word	0x000dc308
   d4690:	2003e378 	.word	0x2003e378
   d4694:	000dc381 	.word	0x000dc381
   d4698:	000dc7d9 	.word	0x000dc7d9
   d469c:	2003e478 	.word	0x2003e478
   d46a0:	2003e388 	.word	0x2003e388

000d46a4 <_Z14setVerboseMode6String>:
{
   d46a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d46a6:	4919      	ldr	r1, [pc, #100]	; (d470c <_Z14setVerboseMode6String+0x68>)
   d46a8:	4605      	mov	r5, r0
   d46aa:	f006 f992 	bl	da9d2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d46ae:	4604      	mov	r4, r0
   d46b0:	b1b0      	cbz	r0, d46e0 <_Z14setVerboseMode6String+0x3c>
    sysStatus.verboseMode = true;
   d46b2:	4b17      	ldr	r3, [pc, #92]	; (d4710 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d46b4:	4a17      	ldr	r2, [pc, #92]	; (d4714 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = true;
   d46b6:	2401      	movs	r4, #1
   d46b8:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d46ba:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d46bc:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d46be:	b913      	cbnz	r3, d46c6 <_Z14setVerboseMode6String+0x22>
    return 1;
   d46c0:	2001      	movs	r0, #1
}
   d46c2:	b003      	add	sp, #12
   d46c4:	bd30      	pop	{r4, r5, pc}
   d46c6:	4b14      	ldr	r3, [pc, #80]	; (d4718 <_Z14setVerboseMode6String+0x74>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d46c8:	4a14      	ldr	r2, [pc, #80]	; (d471c <_Z14setVerboseMode6String+0x78>)
   d46ca:	781b      	ldrb	r3, [r3, #0]
   d46cc:	f88d 3000 	strb.w	r3, [sp]
   d46d0:	4b13      	ldr	r3, [pc, #76]	; (d4720 <_Z14setVerboseMode6String+0x7c>)
   d46d2:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d46d4:	4913      	ldr	r1, [pc, #76]	; (d4724 <_Z14setVerboseMode6String+0x80>)
   d46d6:	4814      	ldr	r0, [pc, #80]	; (d4728 <_Z14setVerboseMode6String+0x84>)
   d46d8:	f7ff ff63 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d46dc:	4620      	mov	r0, r4
   d46de:	e7f0      	b.n	d46c2 <_Z14setVerboseMode6String+0x1e>
   d46e0:	4912      	ldr	r1, [pc, #72]	; (d472c <_Z14setVerboseMode6String+0x88>)
   d46e2:	4628      	mov	r0, r5
   d46e4:	f006 f975 	bl	da9d2 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d46e8:	2800      	cmp	r0, #0
   d46ea:	d0ea      	beq.n	d46c2 <_Z14setVerboseMode6String+0x1e>
    sysStatus.verboseMode = false;
   d46ec:	4b08      	ldr	r3, [pc, #32]	; (d4710 <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d46ee:	4a09      	ldr	r2, [pc, #36]	; (d4714 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = false;
   d46f0:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d46f2:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d46f4:	2401      	movs	r4, #1
   d46f6:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d46f8:	2b00      	cmp	r3, #0
   d46fa:	d0e1      	beq.n	d46c0 <_Z14setVerboseMode6String+0x1c>
   d46fc:	4b06      	ldr	r3, [pc, #24]	; (d4718 <_Z14setVerboseMode6String+0x74>)
   d46fe:	4a0c      	ldr	r2, [pc, #48]	; (d4730 <_Z14setVerboseMode6String+0x8c>)
   d4700:	781b      	ldrb	r3, [r3, #0]
   d4702:	f88d 3000 	strb.w	r3, [sp]
   d4706:	4b06      	ldr	r3, [pc, #24]	; (d4720 <_Z14setVerboseMode6String+0x7c>)
   d4708:	781b      	ldrb	r3, [r3, #0]
   d470a:	e7e3      	b.n	d46d4 <_Z14setVerboseMode6String+0x30>
   d470c:	000dc308 	.word	0x000dc308
   d4710:	2003e4c0 	.word	0x2003e4c0
   d4714:	2003e4f0 	.word	0x2003e4f0
   d4718:	2003e379 	.word	0x2003e379
   d471c:	000dc399 	.word	0x000dc399
   d4720:	2003e378 	.word	0x2003e378
   d4724:	000dc56a 	.word	0x000dc56a
   d4728:	2003e478 	.word	0x2003e478
   d472c:	000dc576 	.word	0x000dc576
   d4730:	000dc3aa 	.word	0x000dc3aa

000d4734 <_Z11setOpenTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setOpenTime(String command)
   d4734:	b500      	push	{lr}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  makeUpParkHourStrings();                                                    // Create the strings for the console
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (sysStatus.connectedStatus) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4736:	4b0c      	ldr	r3, [pc, #48]	; (d4768 <_Z11setOpenTime6String.part.0+0x34>)
   d4738:	4a0c      	ldr	r2, [pc, #48]	; (d476c <_Z11setOpenTime6String.part.0+0x38>)
   d473a:	7f1b      	ldrb	r3, [r3, #28]
int setOpenTime(String command)
   d473c:	b0c3      	sub	sp, #268	; 0x10c
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d473e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4742:	a802      	add	r0, sp, #8
   d4744:	f003 fe6a 	bl	d841c <snprintf>
   d4748:	4b09      	ldr	r3, [pc, #36]	; (d4770 <_Z11setOpenTime6String.part.0+0x3c>)
    publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d474a:	490a      	ldr	r1, [pc, #40]	; (d4774 <_Z11setOpenTime6String.part.0+0x40>)
   d474c:	781b      	ldrb	r3, [r3, #0]
   d474e:	f88d 3000 	strb.w	r3, [sp]
   d4752:	4b09      	ldr	r3, [pc, #36]	; (d4778 <_Z11setOpenTime6String.part.0+0x44>)
   d4754:	4809      	ldr	r0, [pc, #36]	; (d477c <_Z11setOpenTime6String.part.0+0x48>)
   d4756:	781b      	ldrb	r3, [r3, #0]
   d4758:	aa02      	add	r2, sp, #8
   d475a:	f7ff ff22 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d475e:	2001      	movs	r0, #1
   d4760:	b043      	add	sp, #268	; 0x10c
   d4762:	f85d fb04 	ldr.w	pc, [sp], #4
   d4766:	bf00      	nop
   d4768:	2003e4c0 	.word	0x2003e4c0
   d476c:	000dc3bf 	.word	0x000dc3bf
   d4770:	2003e379 	.word	0x2003e379
   d4774:	000dc62b 	.word	0x000dc62b
   d4778:	2003e378 	.word	0x2003e378
   d477c:	2003e478 	.word	0x2003e478

000d4780 <_Z13setDailyCount6String>:
 * Inputs outside of "0" - "1000" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setDailyCount(String command)
{
   d4780:	b530      	push	{r4, r5, lr}
   d4782:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempCount = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4784:	6800      	ldr	r0, [r0, #0]
   d4786:	220a      	movs	r2, #10
   d4788:	a903      	add	r1, sp, #12
   d478a:	f007 fd87 	bl	dc29c <strtol>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d478e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4792:	d81e      	bhi.n	d47d2 <_Z13setDailyCount6String+0x52>
  current.dailyCount = tempCount;
   d4794:	4d10      	ldr	r5, [pc, #64]	; (d47d8 <_Z13setDailyCount6String+0x58>)
   d4796:	60a8      	str	r0, [r5, #8]
  current.lastCountTime = Time.now();
   d4798:	f006 fc0b 	bl	dafb2 <_ZN9TimeClass3nowEv>
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d479c:	4b0f      	ldr	r3, [pc, #60]	; (d47dc <_Z13setDailyCount6String+0x5c>)
  current.lastCountTime = Time.now();
   d479e:	60e8      	str	r0, [r5, #12]
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d47a0:	2401      	movs	r4, #1
   d47a2:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Daily count set to %i",current.dailyCount);
   d47a4:	4a0e      	ldr	r2, [pc, #56]	; (d47e0 <_Z13setDailyCount6String+0x60>)
   d47a6:	68ab      	ldr	r3, [r5, #8]
   d47a8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d47ac:	a804      	add	r0, sp, #16
   d47ae:	f003 fe35 	bl	d841c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Daily",data, PRIVATE, WITH_ACK);
   d47b2:	4b0c      	ldr	r3, [pc, #48]	; (d47e4 <_Z13setDailyCount6String+0x64>)
   d47b4:	78db      	ldrb	r3, [r3, #3]
   d47b6:	b153      	cbz	r3, d47ce <_Z13setDailyCount6String+0x4e>
   d47b8:	4b0b      	ldr	r3, [pc, #44]	; (d47e8 <_Z13setDailyCount6String+0x68>)
   d47ba:	490c      	ldr	r1, [pc, #48]	; (d47ec <_Z13setDailyCount6String+0x6c>)
   d47bc:	781b      	ldrb	r3, [r3, #0]
   d47be:	f88d 3000 	strb.w	r3, [sp]
   d47c2:	4b0b      	ldr	r3, [pc, #44]	; (d47f0 <_Z13setDailyCount6String+0x70>)
   d47c4:	480b      	ldr	r0, [pc, #44]	; (d47f4 <_Z13setDailyCount6String+0x74>)
   d47c6:	781b      	ldrb	r3, [r3, #0]
   d47c8:	aa04      	add	r2, sp, #16
   d47ca:	f7ff feea 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d47ce:	4620      	mov	r0, r4
   d47d0:	e000      	b.n	d47d4 <_Z13setDailyCount6String+0x54>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d47d2:	2000      	movs	r0, #0
}
   d47d4:	b045      	add	sp, #276	; 0x114
   d47d6:	bd30      	pop	{r4, r5, pc}
   d47d8:	2003e3f4 	.word	0x2003e3f4
   d47dc:	2003e418 	.word	0x2003e418
   d47e0:	000dc3d3 	.word	0x000dc3d3
   d47e4:	2003e4c0 	.word	0x2003e4c0
   d47e8:	2003e379 	.word	0x2003e379
   d47ec:	000dc3e9 	.word	0x000dc3e9
   d47f0:	2003e378 	.word	0x2003e378
   d47f4:	2003e478 	.word	0x2003e478

000d47f8 <_Z14setSensitivity6String>:
 * @param Looking for a sensitivity level from 0 - not sensitive to 10 - very sensitive
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setSensitivity(String command)
{
   d47f8:	b530      	push	{r4, r5, lr}
   d47fa:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempValue = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d47fc:	6800      	ldr	r0, [r0, #0]
   d47fe:	220a      	movs	r2, #10
   d4800:	a903      	add	r1, sp, #12
   d4802:	f007 fd4b 	bl	dc29c <strtol>
  if ((tempValue < 0) || (tempValue > 10)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4806:	280a      	cmp	r0, #10
   d4808:	d827      	bhi.n	d485a <_Z14setSensitivity6String+0x62>
  sysStatus.sensitivity = tempValue;
   d480a:	4d15      	ldr	r5, [pc, #84]	; (d4860 <_Z14setSensitivity6String+0x68>)
   d480c:	b2c1      	uxtb	r1, r0
    accel.setupTapIntsPulse(sysStatus.sensitivity);                           // Initialize the accelerometer
   d480e:	4815      	ldr	r0, [pc, #84]	; (d4864 <_Z14setSensitivity6String+0x6c>)
  sysStatus.sensitivity = tempValue;
   d4810:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
    accel.setupTapIntsPulse(sysStatus.sensitivity);                           // Initialize the accelerometer
   d4814:	f002 feb0 	bl	d7578 <_ZN8MMA8452Q17setupTapIntsPulseEh>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4818:	4b13      	ldr	r3, [pc, #76]	; (d4868 <_Z14setSensitivity6String+0x70>)
  snprintf(sensitivityStr, sizeof(sensitivityStr), "%i", sysStatus.sensitivity);
   d481a:	4a14      	ldr	r2, [pc, #80]	; (d486c <_Z14setSensitivity6String+0x74>)
   d481c:	4814      	ldr	r0, [pc, #80]	; (d4870 <_Z14setSensitivity6String+0x78>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d481e:	2401      	movs	r4, #1
   d4820:	701c      	strb	r4, [r3, #0]
  snprintf(sensitivityStr, sizeof(sensitivityStr), "%i", sysStatus.sensitivity);
   d4822:	2108      	movs	r1, #8
   d4824:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   d4828:	f003 fdf8 	bl	d841c <snprintf>
  snprintf(data, sizeof(data), "Sensitivity set to %i",sysStatus.sensitivity);
   d482c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   d4830:	4a10      	ldr	r2, [pc, #64]	; (d4874 <_Z14setSensitivity6String+0x7c>)
   d4832:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4836:	a804      	add	r0, sp, #16
   d4838:	f003 fdf0 	bl	d841c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d483c:	78eb      	ldrb	r3, [r5, #3]
   d483e:	b153      	cbz	r3, d4856 <_Z14setSensitivity6String+0x5e>
   d4840:	4b0d      	ldr	r3, [pc, #52]	; (d4878 <_Z14setSensitivity6String+0x80>)
   d4842:	490e      	ldr	r1, [pc, #56]	; (d487c <_Z14setSensitivity6String+0x84>)
   d4844:	781b      	ldrb	r3, [r3, #0]
   d4846:	f88d 3000 	strb.w	r3, [sp]
   d484a:	4b0d      	ldr	r3, [pc, #52]	; (d4880 <_Z14setSensitivity6String+0x88>)
   d484c:	480d      	ldr	r0, [pc, #52]	; (d4884 <_Z14setSensitivity6String+0x8c>)
   d484e:	781b      	ldrb	r3, [r3, #0]
   d4850:	aa04      	add	r2, sp, #16
   d4852:	f7ff fea6 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d4856:	4620      	mov	r0, r4
   d4858:	e000      	b.n	d485c <_Z14setSensitivity6String+0x64>
  if ((tempValue < 0) || (tempValue > 10)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d485a:	2000      	movs	r0, #0
}
   d485c:	b045      	add	sp, #276	; 0x114
   d485e:	bd30      	pop	{r4, r5, pc}
   d4860:	2003e4c0 	.word	0x2003e4c0
   d4864:	2003e3a8 	.word	0x2003e3a8
   d4868:	2003e4f0 	.word	0x2003e4f0
   d486c:	000dc482 	.word	0x000dc482
   d4870:	2003e22c 	.word	0x2003e22c
   d4874:	000dc3ef 	.word	0x000dc3ef
   d4878:	2003e379 	.word	0x2003e379
   d487c:	000dc62b 	.word	0x000dc62b
   d4880:	2003e378 	.word	0x2003e378
   d4884:	2003e478 	.word	0x2003e478

000d4888 <_Z14setDebounceSec6String>:
 * @param Looking for a value from 0 to 60 second.  Sets the system value and changes the period of the stay awake timer
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setDebounceSec(String command)
{
   d4888:	b530      	push	{r4, r5, lr}
   d488a:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempValue = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d488c:	6800      	ldr	r0, [r0, #0]
   d488e:	220a      	movs	r2, #10
   d4890:	a903      	add	r1, sp, #12
   d4892:	f007 fd03 	bl	dc29c <strtol>
  if ((tempValue < 0) || (tempValue > 60)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4896:	283c      	cmp	r0, #60	; 0x3c
   d4898:	d82b      	bhi.n	d48f2 <_Z14setDebounceSec6String+0x6a>
  sysStatus.debounceSec = tempValue;
   d489a:	4d17      	ldr	r5, [pc, #92]	; (d48f8 <_Z14setDebounceSec6String+0x70>)
  countSignalTimer.changePeriod(sysStatus.debounceSec*1000);           // This keeps the device awake during debounce
   d489c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d48a0:	4341      	muls	r1, r0
  sysStatus.debounceSec = tempValue;
   d48a2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
  countSignalTimer.changePeriod(sysStatus.debounceSec*1000);           // This keeps the device awake during debounce
   d48a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d48aa:	4814      	ldr	r0, [pc, #80]	; (d48fc <_Z14setDebounceSec6String+0x74>)
   d48ac:	f7ff fe30 	bl	d4510 <_ZN5Timer12changePeriodEjj>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d48b0:	4b13      	ldr	r3, [pc, #76]	; (d4900 <_Z14setDebounceSec6String+0x78>)
  snprintf(debounceStr, sizeof(debounceStr), "%i sec", sysStatus.debounceSec);
   d48b2:	4a14      	ldr	r2, [pc, #80]	; (d4904 <_Z14setDebounceSec6String+0x7c>)
   d48b4:	4814      	ldr	r0, [pc, #80]	; (d4908 <_Z14setDebounceSec6String+0x80>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d48b6:	2401      	movs	r4, #1
   d48b8:	701c      	strb	r4, [r3, #0]
  snprintf(debounceStr, sizeof(debounceStr), "%i sec", sysStatus.debounceSec);
   d48ba:	2108      	movs	r1, #8
   d48bc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d48c0:	f003 fdac 	bl	d841c <snprintf>
  snprintf(data, sizeof(data), "Debounce set to %i seconds",sysStatus.debounceSec);
   d48c4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d48c8:	4a10      	ldr	r2, [pc, #64]	; (d490c <_Z14setDebounceSec6String+0x84>)
   d48ca:	f44f 7180 	mov.w	r1, #256	; 0x100
   d48ce:	a804      	add	r0, sp, #16
   d48d0:	f003 fda4 	bl	d841c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d48d4:	78eb      	ldrb	r3, [r5, #3]
   d48d6:	b153      	cbz	r3, d48ee <_Z14setDebounceSec6String+0x66>
   d48d8:	4b0d      	ldr	r3, [pc, #52]	; (d4910 <_Z14setDebounceSec6String+0x88>)
   d48da:	490e      	ldr	r1, [pc, #56]	; (d4914 <_Z14setDebounceSec6String+0x8c>)
   d48dc:	781b      	ldrb	r3, [r3, #0]
   d48de:	f88d 3000 	strb.w	r3, [sp]
   d48e2:	4b0d      	ldr	r3, [pc, #52]	; (d4918 <_Z14setDebounceSec6String+0x90>)
   d48e4:	480d      	ldr	r0, [pc, #52]	; (d491c <_Z14setDebounceSec6String+0x94>)
   d48e6:	781b      	ldrb	r3, [r3, #0]
   d48e8:	aa04      	add	r2, sp, #16
   d48ea:	f7ff fe5a 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d48ee:	4620      	mov	r0, r4
   d48f0:	e000      	b.n	d48f4 <_Z14setDebounceSec6String+0x6c>
  if ((tempValue < 0) || (tempValue > 60)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d48f2:	2000      	movs	r0, #0
}
   d48f4:	b045      	add	sp, #276	; 0x114
   d48f6:	bd30      	pop	{r4, r5, pc}
   d48f8:	2003e4c0 	.word	0x2003e4c0
   d48fc:	2003e3d8 	.word	0x2003e3d8
   d4900:	2003e4f0 	.word	0x2003e4f0
   d4904:	000dc405 	.word	0x000dc405
   d4908:	2003e216 	.word	0x2003e216
   d490c:	000dc40c 	.word	0x000dc40c
   d4910:	2003e379 	.word	0x2003e379
   d4914:	000dc62b 	.word	0x000dc62b
   d4918:	2003e378 	.word	0x2003e378
   d491c:	2003e478 	.word	0x2003e478

000d4920 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4920:	b513      	push	{r0, r1, r4, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4922:	4925      	ldr	r1, [pc, #148]	; (d49b8 <_Z15setLowPowerMode6String+0x98>)
   d4924:	4604      	mov	r4, r0
   d4926:	f006 f854 	bl	da9d2 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d492a:	b320      	cbz	r0, d4976 <_Z15setLowPowerMode6String+0x56>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d492c:	4922      	ldr	r1, [pc, #136]	; (d49b8 <_Z15setLowPowerMode6String+0x98>)
   d492e:	4620      	mov	r0, r4
   d4930:	f006 f84f 	bl	da9d2 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4934:	bb38      	cbnz	r0, d4986 <_Z15setLowPowerMode6String+0x66>
   d4936:	4921      	ldr	r1, [pc, #132]	; (d49bc <_Z15setLowPowerMode6String+0x9c>)
   d4938:	4620      	mov	r0, r4
   d493a:	f006 f84a 	bl	da9d2 <_ZNK6String6equalsEPKc>
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
    }
    sysStatus.lowPowerMode = true;
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d493e:	2800      	cmp	r0, #0
   d4940:	d036      	beq.n	d49b0 <_Z15setLowPowerMode6String+0x90>
  {
    if (!sysStatus.connectedStatus) {                                      // In case we are not connected, we will do so now.
   d4942:	4c1f      	ldr	r4, [pc, #124]	; (d49c0 <_Z15setLowPowerMode6String+0xa0>)
   d4944:	78e2      	ldrb	r2, [r4, #3]
   d4946:	b912      	cbnz	r2, d494e <_Z15setLowPowerMode6String+0x2e>
      particleConnectionNeeded = true;
   d4948:	4b1e      	ldr	r3, [pc, #120]	; (d49c4 <_Z15setLowPowerMode6String+0xa4>)
   d494a:	2201      	movs	r2, #1
   d494c:	701a      	strb	r2, [r3, #0]
   d494e:	4b1e      	ldr	r3, [pc, #120]	; (d49c8 <_Z15setLowPowerMode6String+0xa8>)
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE, WITH_ACK);
   d4950:	4a1e      	ldr	r2, [pc, #120]	; (d49cc <_Z15setLowPowerMode6String+0xac>)
   d4952:	781b      	ldrb	r3, [r3, #0]
   d4954:	f88d 3000 	strb.w	r3, [sp]
   d4958:	4b1d      	ldr	r3, [pc, #116]	; (d49d0 <_Z15setLowPowerMode6String+0xb0>)
   d495a:	491e      	ldr	r1, [pc, #120]	; (d49d4 <_Z15setLowPowerMode6String+0xb4>)
   d495c:	781b      	ldrb	r3, [r3, #0]
   d495e:	481e      	ldr	r0, [pc, #120]	; (d49d8 <_Z15setLowPowerMode6String+0xb8>)
   d4960:	f7ff fe1f 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4968:	f003 fdac 	bl	d84c4 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d496c:	2300      	movs	r3, #0
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d496e:	491b      	ldr	r1, [pc, #108]	; (d49dc <_Z15setLowPowerMode6String+0xbc>)
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4970:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d4972:	2210      	movs	r2, #16
   d4974:	e019      	b.n	d49aa <_Z15setLowPowerMode6String+0x8a>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4976:	4911      	ldr	r1, [pc, #68]	; (d49bc <_Z15setLowPowerMode6String+0x9c>)
   d4978:	4620      	mov	r0, r4
   d497a:	f006 f82a 	bl	da9d2 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d497e:	2800      	cmp	r0, #0
   d4980:	d1d4      	bne.n	d492c <_Z15setLowPowerMode6String+0xc>
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d4982:	b002      	add	sp, #8
   d4984:	bd10      	pop	{r4, pc}
    if (sysStatus.connectedStatus) {
   d4986:	4c0e      	ldr	r4, [pc, #56]	; (d49c0 <_Z15setLowPowerMode6String+0xa0>)
   d4988:	78e2      	ldrb	r2, [r4, #3]
   d498a:	b152      	cbz	r2, d49a2 <_Z15setLowPowerMode6String+0x82>
   d498c:	4b0e      	ldr	r3, [pc, #56]	; (d49c8 <_Z15setLowPowerMode6String+0xa8>)
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
   d498e:	4a14      	ldr	r2, [pc, #80]	; (d49e0 <_Z15setLowPowerMode6String+0xc0>)
   d4990:	781b      	ldrb	r3, [r3, #0]
   d4992:	f88d 3000 	strb.w	r3, [sp]
   d4996:	4b0e      	ldr	r3, [pc, #56]	; (d49d0 <_Z15setLowPowerMode6String+0xb0>)
   d4998:	490e      	ldr	r1, [pc, #56]	; (d49d4 <_Z15setLowPowerMode6String+0xb4>)
   d499a:	781b      	ldrb	r3, [r3, #0]
   d499c:	480e      	ldr	r0, [pc, #56]	; (d49d8 <_Z15setLowPowerMode6String+0xb8>)
   d499e:	f7ff fe00 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lowPowerMode = true;
   d49a2:	2301      	movs	r3, #1
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d49a4:	490f      	ldr	r1, [pc, #60]	; (d49e4 <_Z15setLowPowerMode6String+0xc4>)
    sysStatus.lowPowerMode = true;
   d49a6:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d49a8:	2210      	movs	r2, #16
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d49aa:	480f      	ldr	r0, [pc, #60]	; (d49e8 <_Z15setLowPowerMode6String+0xc8>)
   d49ac:	f007 fbd5 	bl	dc15a <strncpy>
  systemStatusWriteNeeded = true;
   d49b0:	4b0e      	ldr	r3, [pc, #56]	; (d49ec <_Z15setLowPowerMode6String+0xcc>)
   d49b2:	2001      	movs	r0, #1
   d49b4:	7018      	strb	r0, [r3, #0]
  return 1;
   d49b6:	e7e4      	b.n	d4982 <_Z15setLowPowerMode6String+0x62>
   d49b8:	000dc308 	.word	0x000dc308
   d49bc:	000dc576 	.word	0x000dc576
   d49c0:	2003e4c0 	.word	0x2003e4c0
   d49c4:	2003e475 	.word	0x2003e475
   d49c8:	2003e379 	.word	0x2003e379
   d49cc:	000dc436 	.word	0x000dc436
   d49d0:	2003e378 	.word	0x2003e378
   d49d4:	000dc56a 	.word	0x000dc56a
   d49d8:	2003e478 	.word	0x2003e478
   d49dc:	000dc448 	.word	0x000dc448
   d49e0:	000dc427 	.word	0x000dc427
   d49e4:	000dc44c 	.word	0x000dc44c
   d49e8:	2003e464 	.word	0x2003e464
   d49ec:	2003e4f0 	.word	0x2003e4f0

000d49f0 <_Z11recordCountv>:
{
   d49f0:	b570      	push	{r4, r5, r6, lr}
  if (sensorDetect) {
   d49f2:	4d50      	ldr	r5, [pc, #320]	; (d4b34 <_Z11recordCountv+0x144>)
   d49f4:	782b      	ldrb	r3, [r5, #0]
{
   d49f6:	b092      	sub	sp, #72	; 0x48
  if (sensorDetect) {
   d49f8:	b1a3      	cbz	r3, d4a24 <_Z11recordCountv+0x34>
    detachInterrupt(intPin);
   d49fa:	2002      	movs	r0, #2
   d49fc:	f004 fb18 	bl	d9030 <_Z15detachInterruptt>
    Log.info("Cleared Interrupt");
   d4a00:	494d      	ldr	r1, [pc, #308]	; (d4b38 <_Z11recordCountv+0x148>)
   d4a02:	484e      	ldr	r0, [pc, #312]	; (d4b3c <_Z11recordCountv+0x14c>)
   d4a04:	f7ff fd9f 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    sensorDetect = false;                                               // Reset the flag
   d4a08:	2400      	movs	r4, #0
    delay(1000);                                                        // Reset as there can be "ringing"
   d4a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sensorDetect = false;                                               // Reset the flag
   d4a0e:	702c      	strb	r4, [r5, #0]
    delay(1000);                                                        // Reset as there can be "ringing"
   d4a10:	f003 fd58 	bl	d84c4 <delay>
    attachInterrupt(intPin, sensorISR, RISING);                         // Sensor interrupt from low to high
   d4a14:	494a      	ldr	r1, [pc, #296]	; (d4b40 <_Z11recordCountv+0x150>)
   d4a16:	9400      	str	r4, [sp, #0]
   d4a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4a1c:	2201      	movs	r2, #1
   d4a1e:	2002      	movs	r0, #2
   d4a20:	f004 fadc 	bl	d8fdc <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (Time.now() - lastTapTime > sysStatus.debounceSec) {
   d4a24:	4c47      	ldr	r4, [pc, #284]	; (d4b44 <_Z11recordCountv+0x154>)
   d4a26:	4d48      	ldr	r5, [pc, #288]	; (d4b48 <_Z11recordCountv+0x158>)
   d4a28:	f006 fac3 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d4a2c:	6823      	ldr	r3, [r4, #0]
   d4a2e:	1ac0      	subs	r0, r0, r3
   d4a30:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d4a34:	4298      	cmp	r0, r3
   d4a36:	d943      	bls.n	d4ac0 <_Z11recordCountv+0xd0>
    lastTapTime = Time.now();
   d4a38:	f006 fabb 	bl	dafb2 <_ZN9TimeClass3nowEv>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
   d4a3c:	4b43      	ldr	r3, [pc, #268]	; (d4b4c <_Z11recordCountv+0x15c>)
   d4a3e:	6020      	str	r0, [r4, #0]
   d4a40:	6898      	ldr	r0, [r3, #8]
   d4a42:	b140      	cbz	r0, d4a56 <_Z11recordCountv+0x66>
   d4a44:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4a48:	2300      	movs	r3, #0
   d4a4a:	e9cd 2300 	strd	r2, r3, [sp]
   d4a4e:	2101      	movs	r1, #1
   d4a50:	461a      	mov	r2, r3
   d4a52:	f003 f937 	bl	d7cc4 <os_timer_change>
    if (currentMinutePeriod != Time.minute()) {                         // Done counting for the last minute
   d4a56:	4e3e      	ldr	r6, [pc, #248]	; (d4b50 <_Z11recordCountv+0x160>)
   d4a58:	7834      	ldrb	r4, [r6, #0]
   d4a5a:	f006 fac7 	bl	dafec <_ZN9TimeClass6minuteEv>
   d4a5e:	4284      	cmp	r4, r0
   d4a60:	4c3c      	ldr	r4, [pc, #240]	; (d4b54 <_Z11recordCountv+0x164>)
   d4a62:	d004      	beq.n	d4a6e <_Z11recordCountv+0x7e>
      currentMinutePeriod = Time.minute();                              // Reset period
   d4a64:	f006 fac2 	bl	dafec <_ZN9TimeClass6minuteEv>
      current.maxMinValue = 1;                                          // Reset for the new minute
   d4a68:	2301      	movs	r3, #1
      currentMinutePeriod = Time.minute();                              // Reset period
   d4a6a:	7030      	strb	r0, [r6, #0]
      current.maxMinValue = 1;                                          // Reset for the new minute
   d4a6c:	61a3      	str	r3, [r4, #24]
    current.maxMinValue++;
   d4a6e:	69a3      	ldr	r3, [r4, #24]
   d4a70:	3301      	adds	r3, #1
   d4a72:	61a3      	str	r3, [r4, #24]
    current.lastCountTime = Time.now();
   d4a74:	f006 fa9d 	bl	dafb2 <_ZN9TimeClass3nowEv>
    current.hourlyCount++;                                              // Increment the PersonCount
   d4a78:	6823      	ldr	r3, [r4, #0]
    current.dailyCount++;                                               // Increment the PersonCount
   d4a7a:	68a2      	ldr	r2, [r4, #8]
    current.lastCountTime = Time.now();
   d4a7c:	60e0      	str	r0, [r4, #12]
    current.hourlyCount++;                                              // Increment the PersonCount
   d4a7e:	3301      	adds	r3, #1
    current.dailyCount++;                                               // Increment the PersonCount
   d4a80:	3201      	adds	r2, #1
    current.hourlyCount++;                                              // Increment the PersonCount
   d4a82:	6023      	str	r3, [r4, #0]
    current.dailyCount++;                                               // Increment the PersonCount
   d4a84:	60a2      	str	r2, [r4, #8]
    snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d4a86:	2140      	movs	r1, #64	; 0x40
   d4a88:	9200      	str	r2, [sp, #0]
   d4a8a:	a802      	add	r0, sp, #8
   d4a8c:	4a32      	ldr	r2, [pc, #200]	; (d4b58 <_Z11recordCountv+0x168>)
   d4a8e:	f003 fcc5 	bl	d841c <snprintf>
    if (sysStatus.verboseMode && sysStatus.connectedStatus) publishQueue.publish("Count",data, PRIVATE);                      // Helpful for monitoring and calibration
   d4a92:	792b      	ldrb	r3, [r5, #4]
   d4a94:	b15b      	cbz	r3, d4aae <_Z11recordCountv+0xbe>
   d4a96:	78eb      	ldrb	r3, [r5, #3]
   d4a98:	b14b      	cbz	r3, d4aae <_Z11recordCountv+0xbe>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a9a:	2300      	movs	r3, #0
   d4a9c:	f88d 3000 	strb.w	r3, [sp]
   d4aa0:	4b2e      	ldr	r3, [pc, #184]	; (d4b5c <_Z11recordCountv+0x16c>)
   d4aa2:	492f      	ldr	r1, [pc, #188]	; (d4b60 <_Z11recordCountv+0x170>)
   d4aa4:	781b      	ldrb	r3, [r3, #0]
   d4aa6:	482f      	ldr	r0, [pc, #188]	; (d4b64 <_Z11recordCountv+0x174>)
   d4aa8:	aa02      	add	r2, sp, #8
   d4aaa:	f7ff fd7a 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    Log.info(data);
   d4aae:	4823      	ldr	r0, [pc, #140]	; (d4b3c <_Z11recordCountv+0x14c>)
   d4ab0:	a902      	add	r1, sp, #8
   d4ab2:	f7ff fd48 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d4ab6:	4b2c      	ldr	r3, [pc, #176]	; (d4b68 <_Z11recordCountv+0x178>)
   d4ab8:	2201      	movs	r2, #1
   d4aba:	701a      	strb	r2, [r3, #0]
}
   d4abc:	b012      	add	sp, #72	; 0x48
   d4abe:	bd70      	pop	{r4, r5, r6, pc}
  else if (!countSignalTimer.isActive()) pinResetFast(blueLED);
   d4ac0:	4822      	ldr	r0, [pc, #136]	; (d4b4c <_Z11recordCountv+0x15c>)
   d4ac2:	f7ff fd36 	bl	d4532 <_ZNK5Timer8isActiveEv>
   d4ac6:	2800      	cmp	r0, #0
   d4ac8:	d1f8      	bne.n	d4abc <_Z11recordCountv+0xcc>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4aca:	4c28      	ldr	r4, [pc, #160]	; (d4b6c <_Z11recordCountv+0x17c>)
   d4acc:	4d28      	ldr	r5, [pc, #160]	; (d4b70 <_Z11recordCountv+0x180>)
   d4ace:	7823      	ldrb	r3, [r4, #0]
   d4ad0:	f3bf 8f5b 	dmb	ish
   d4ad4:	f013 0f01 	tst.w	r3, #1
   d4ad8:	d109      	bne.n	d4aee <_Z11recordCountv+0xfe>
   d4ada:	4620      	mov	r0, r4
   d4adc:	f7ff faec 	bl	d40b8 <__cxa_guard_acquire>
   d4ae0:	b128      	cbz	r0, d4aee <_Z11recordCountv+0xfe>
   d4ae2:	f003 f997 	bl	d7e14 <HAL_Pin_Map>
   d4ae6:	6028      	str	r0, [r5, #0]
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f7ff faea 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4aee:	682b      	ldr	r3, [r5, #0]
   d4af0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   d4af4:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4af6:	7823      	ldrb	r3, [r4, #0]
   d4af8:	f3bf 8f5b 	dmb	ish
   d4afc:	07db      	lsls	r3, r3, #31
   d4afe:	d409      	bmi.n	d4b14 <_Z11recordCountv+0x124>
   d4b00:	481a      	ldr	r0, [pc, #104]	; (d4b6c <_Z11recordCountv+0x17c>)
   d4b02:	f7ff fad9 	bl	d40b8 <__cxa_guard_acquire>
   d4b06:	b128      	cbz	r0, d4b14 <_Z11recordCountv+0x124>
   d4b08:	f003 f984 	bl	d7e14 <HAL_Pin_Map>
   d4b0c:	6028      	str	r0, [r5, #0]
   d4b0e:	4817      	ldr	r0, [pc, #92]	; (d4b6c <_Z11recordCountv+0x17c>)
   d4b10:	f7ff fad7 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4b14:	682b      	ldr	r3, [r5, #0]
   d4b16:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d4b1a:	f003 031f 	and.w	r3, r3, #31
   d4b1e:	4333      	orrs	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4b20:	a802      	add	r0, sp, #8
   d4b22:	9302      	str	r3, [sp, #8]
   d4b24:	f7ff fafe 	bl	d4124 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4b28:	9a02      	ldr	r2, [sp, #8]
   d4b2a:	2301      	movs	r3, #1
   d4b2c:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4b2e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   d4b32:	e7c3      	b.n	d4abc <_Z11recordCountv+0xcc>
   d4b34:	2003e4b4 	.word	0x2003e4b4
   d4b38:	000dc456 	.word	0x000dc456
   d4b3c:	2003e5e0 	.word	0x2003e5e0
   d4b40:	000d4155 	.word	0x000d4155
   d4b44:	2003e37c 	.word	0x2003e37c
   d4b48:	2003e4c0 	.word	0x2003e4c0
   d4b4c:	2003e3d8 	.word	0x2003e3d8
   d4b50:	2003e380 	.word	0x2003e380
   d4b54:	2003e3f4 	.word	0x2003e3f4
   d4b58:	000dc468 	.word	0x000dc468
   d4b5c:	2003e378 	.word	0x2003e378
   d4b60:	000dc5f4 	.word	0x000dc5f4
   d4b64:	2003e478 	.word	0x2003e478
   d4b68:	2003e418 	.word	0x2003e418
   d4b6c:	2003e324 	.word	0x2003e324
   d4b70:	2003e328 	.word	0x2003e328

000d4b74 <_Z9sendEventv>:
void sendEvent() {
   d4b74:	b510      	push	{r4, lr}
  if (current.hourlyCount) {
   d4b76:	4c1a      	ldr	r4, [pc, #104]	; (d4be0 <_Z9sendEventv+0x6c>)
   d4b78:	6823      	ldr	r3, [r4, #0]
void sendEvent() {
   d4b7a:	b0ca      	sub	sp, #296	; 0x128
  if (current.hourlyCount) {
   d4b7c:	2b00      	cmp	r3, #0
   d4b7e:	d02c      	beq.n	d4bda <_Z9sendEventv+0x66>
    timeStampValue = current.lastCountTime;                           // If there was an event in the past hour, send the most recent event's timestamp
   d4b80:	68e2      	ldr	r2, [r4, #12]
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,\"key1\":\"%s\",\"temp\":%i, \"resets\":%i, \"alerts\":%i,\"maxmin\":%i,\"connecttime\":%i,\"timestamp\":%lu000}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContext[sysStatus.batteryState], current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue, sysStatus.lastConnectionDuration, timeStampValue);
   d4b82:	9208      	str	r2, [sp, #32]
   d4b84:	4a17      	ldr	r2, [pc, #92]	; (d4be4 <_Z9sendEventv+0x70>)
   d4b86:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   d4b88:	9107      	str	r1, [sp, #28]
   d4b8a:	69a1      	ldr	r1, [r4, #24]
   d4b8c:	9106      	str	r1, [sp, #24]
   d4b8e:	6961      	ldr	r1, [r4, #20]
   d4b90:	9105      	str	r1, [sp, #20]
   d4b92:	6911      	ldr	r1, [r2, #16]
   d4b94:	9104      	str	r1, [sp, #16]
   d4b96:	6921      	ldr	r1, [r4, #16]
   d4b98:	9103      	str	r1, [sp, #12]
   d4b9a:	7b10      	ldrb	r0, [r2, #12]
   d4b9c:	4912      	ldr	r1, [pc, #72]	; (d4be8 <_Z9sendEventv+0x74>)
   d4b9e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d4ba2:	9102      	str	r1, [sp, #8]
   d4ba4:	6892      	ldr	r2, [r2, #8]
   d4ba6:	9201      	str	r2, [sp, #4]
   d4ba8:	68a2      	ldr	r2, [r4, #8]
   d4baa:	9200      	str	r2, [sp, #0]
   d4bac:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4bb0:	4a0e      	ldr	r2, [pc, #56]	; (d4bec <_Z9sendEventv+0x78>)
   d4bb2:	a80a      	add	r0, sp, #40	; 0x28
   d4bb4:	f003 fc32 	bl	d841c <snprintf>
   d4bb8:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots-Counter-Hook-v1", data, PRIVATE);
   d4bba:	f88d 3000 	strb.w	r3, [sp]
   d4bbe:	4b0c      	ldr	r3, [pc, #48]	; (d4bf0 <_Z9sendEventv+0x7c>)
   d4bc0:	490c      	ldr	r1, [pc, #48]	; (d4bf4 <_Z9sendEventv+0x80>)
   d4bc2:	781b      	ldrb	r3, [r3, #0]
   d4bc4:	480c      	ldr	r0, [pc, #48]	; (d4bf8 <_Z9sendEventv+0x84>)
   d4bc6:	aa0a      	add	r2, sp, #40	; 0x28
   d4bc8:	f7ff fceb 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4bcc:	4b0b      	ldr	r3, [pc, #44]	; (d4bfc <_Z9sendEventv+0x88>)
   d4bce:	2201      	movs	r2, #1
   d4bd0:	701a      	strb	r2, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d4bd2:	6823      	ldr	r3, [r4, #0]
   d4bd4:	6063      	str	r3, [r4, #4]
}
   d4bd6:	b04a      	add	sp, #296	; 0x128
   d4bd8:	bd10      	pop	{r4, pc}
    timeStampValue = lastReportedTime;                                // This should be the beginning of the previous hour
   d4bda:	4a09      	ldr	r2, [pc, #36]	; (d4c00 <_Z9sendEventv+0x8c>)
   d4bdc:	6812      	ldr	r2, [r2, #0]
   d4bde:	e7d0      	b.n	d4b82 <_Z9sendEventv+0xe>
   d4be0:	2003e3f4 	.word	0x2003e3f4
   d4be4:	2003e4c0 	.word	0x2003e4c0
   d4be8:	2003e1e8 	.word	0x2003e1e8
   d4bec:	000dc485 	.word	0x000dc485
   d4bf0:	2003e378 	.word	0x2003e378
   d4bf4:	000dc50c 	.word	0x000dc50c
   d4bf8:	2003e478 	.word	0x2003e478
   d4bfc:	2003e423 	.word	0x2003e423
   d4c00:	2003e43c 	.word	0x2003e43c

000d4c04 <_Z16isItSafeToChargev>:
{         
   d4c04:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);                                 
   d4c06:	2101      	movs	r1, #1
   d4c08:	a801      	add	r0, sp, #4
   d4c0a:	f005 fcf4 	bl	da5f6 <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4c0e:	4b0b      	ldr	r3, [pc, #44]	; (d4c3c <_Z16isItSafeToChargev+0x38>)
   d4c10:	691b      	ldr	r3, [r3, #16]
   d4c12:	3b24      	subs	r3, #36	; 0x24
   d4c14:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4c16:	a801      	add	r0, sp, #4
   d4c18:	f04f 0401 	mov.w	r4, #1
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4c1c:	d90a      	bls.n	d4c34 <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4c1e:	f005 fd7d 	bl	da71c <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d4c22:	4b07      	ldr	r3, [pc, #28]	; (d4c40 <_Z16isItSafeToChargev+0x3c>)
   d4c24:	731c      	strb	r4, [r3, #12]
    return false;
   d4c26:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d4c28:	a801      	add	r0, sp, #4
   d4c2a:	f005 fcf3 	bl	da614 <_ZN4PMICD1Ev>
}
   d4c2e:	4620      	mov	r0, r4
   d4c30:	b002      	add	sp, #8
   d4c32:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                                            // It is safe to charge the battery
   d4c34:	f005 fd5b 	bl	da6ee <_ZN4PMIC14enableChargingEv>
    return true;
   d4c38:	e7f6      	b.n	d4c28 <_Z16isItSafeToChargev+0x24>
   d4c3a:	bf00      	nop
   d4c3c:	2003e3f4 	.word	0x2003e3f4
   d4c40:	2003e4c0 	.word	0x2003e4c0

000d4c44 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d4c44:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4c46:	4d19      	ldr	r5, [pc, #100]	; (d4cac <_Z17getSignalStrengthv+0x68>)
   d4c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4c4a:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4c4c:	ac04      	add	r4, sp, #16
   d4c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c54:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4c58:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4c5c:	4914      	ldr	r1, [pc, #80]	; (d4cb0 <_Z17getSignalStrengthv+0x6c>)
   d4c5e:	a80e      	add	r0, sp, #56	; 0x38
   d4c60:	f003 fcb4 	bl	d85cc <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4c64:	a80e      	add	r0, sp, #56	; 0x38
   d4c66:	f003 fd04 	bl	d8672 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4c6a:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4c6c:	a80e      	add	r0, sp, #56	; 0x38
   d4c6e:	f003 fd09 	bl	d8684 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d4c72:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4c74:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4c78:	f003 fd34 	bl	d86e4 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4c7c:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d4c7e:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4c82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4c86:	f006 fe33 	bl	db8f0 <__aeabi_f2d>
   d4c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4c8e:	4628      	mov	r0, r5
   d4c90:	f006 fe2e 	bl	db8f0 <__aeabi_f2d>
   d4c94:	e9cd 0100 	strd	r0, r1, [sp]
   d4c98:	4a06      	ldr	r2, [pc, #24]	; (d4cb4 <_Z17getSignalStrengthv+0x70>)
   d4c9a:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4c9e:	4806      	ldr	r0, [pc, #24]	; (d4cb8 <_Z17getSignalStrengthv+0x74>)
   d4ca0:	2140      	movs	r1, #64	; 0x40
   d4ca2:	f003 fbbb 	bl	d841c <snprintf>
}
   d4ca6:	b019      	add	sp, #100	; 0x64
   d4ca8:	bd30      	pop	{r4, r5, pc}
   d4caa:	bf00      	nop
   d4cac:	000dc8b0 	.word	0x000dc8b0
   d4cb0:	2003e50c 	.word	0x2003e50c
   d4cb4:	000dc524 	.word	0x000dc524
   d4cb8:	2003e32c 	.word	0x2003e32c
   d4cbc:	00000000 	.word	0x00000000

000d4cc0 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d4cc0:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d4cc2:	200f      	movs	r0, #15
   d4cc4:	f006 fc0b 	bl	db4de <analogRead>
  if (reading < 400) {                                                // This ocrresponds to 0 degrees - less than this and we should take another reading to be sure
   d4cc8:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d4ccc:	da05      	bge.n	d4cda <_Z14getTemperaturev+0x1a>
    delay(50);
   d4cce:	2032      	movs	r0, #50	; 0x32
   d4cd0:	f003 fbf8 	bl	d84c4 <delay>
    reading = analogRead(tmp36Pin);
   d4cd4:	200f      	movs	r0, #15
   d4cd6:	f006 fc02 	bl	db4de <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4cda:	f006 fdf7 	bl	db8cc <__aeabi_i2d>
   d4cde:	a320      	add	r3, pc, #128	; (adr r3, d4d60 <_Z14getTemperaturev+0xa0>)
   d4ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ce4:	f006 fe5c 	bl	db9a0 <__aeabi_dmul>
   d4ce8:	f007 f8b4 	bl	dbe54 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4cec:	eddf 7a14 	vldr	s15, [pc, #80]	; d4d40 <_Z14getTemperaturev+0x80>
   d4cf0:	ee07 0a10 	vmov	s14, r0
   d4cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4cf8:	ee17 0a90 	vmov	r0, s15
   d4cfc:	f006 fdf8 	bl	db8f0 <__aeabi_f2d>
   d4d00:	4b10      	ldr	r3, [pc, #64]	; (d4d44 <_Z14getTemperaturev+0x84>)
   d4d02:	2200      	movs	r2, #0
   d4d04:	f006 fc94 	bl	db630 <__aeabi_dsub>
   d4d08:	4b0f      	ldr	r3, [pc, #60]	; (d4d48 <_Z14getTemperaturev+0x88>)
   d4d0a:	2200      	movs	r2, #0
   d4d0c:	f006 fe48 	bl	db9a0 <__aeabi_dmul>
   d4d10:	f007 f858 	bl	dbdc4 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d4d14:	f006 fdda 	bl	db8cc <__aeabi_i2d>
   d4d18:	4b0c      	ldr	r3, [pc, #48]	; (d4d4c <_Z14getTemperaturev+0x8c>)
   d4d1a:	2200      	movs	r2, #0
   d4d1c:	f006 fe40 	bl	db9a0 <__aeabi_dmul>
   d4d20:	4b0b      	ldr	r3, [pc, #44]	; (d4d50 <_Z14getTemperaturev+0x90>)
   d4d22:	2200      	movs	r2, #0
   d4d24:	f006 ff66 	bl	dbbf4 <__aeabi_ddiv>
   d4d28:	4b0a      	ldr	r3, [pc, #40]	; (d4d54 <_Z14getTemperaturev+0x94>)
   d4d2a:	2200      	movs	r2, #0
   d4d2c:	f006 fc82 	bl	db634 <__adddf3>
   d4d30:	f007 f848 	bl	dbdc4 <__aeabi_d2iz>
   d4d34:	4b08      	ldr	r3, [pc, #32]	; (d4d58 <_Z14getTemperaturev+0x98>)
   d4d36:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d4d38:	4b08      	ldr	r3, [pc, #32]	; (d4d5c <_Z14getTemperaturev+0x9c>)
   d4d3a:	2201      	movs	r2, #1
   d4d3c:	701a      	strb	r2, [r3, #0]
}
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	39800000 	.word	0x39800000
   d4d44:	3fe00000 	.word	0x3fe00000
   d4d48:	40590000 	.word	0x40590000
   d4d4c:	40220000 	.word	0x40220000
   d4d50:	40140000 	.word	0x40140000
   d4d54:	40400000 	.word	0x40400000
   d4d58:	2003e3f4 	.word	0x2003e3f4
   d4d5c:	2003e418 	.word	0x2003e418
   d4d60:	66666666 	.word	0x66666666
   d4d64:	400a6666 	.word	0x400a6666

000d4d68 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d4d68:	b500      	push	{lr}
   d4d6a:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d4d6c:	4668      	mov	r0, sp
   d4d6e:	f7ff fb5d 	bl	d442c <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d4d72:	a808      	add	r0, sp, #32
   d4d74:	f7ff fb5a 	bl	d442c <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4d78:	2100      	movs	r1, #0
   d4d7a:	a808      	add	r0, sp, #32
   d4d7c:	f003 fa40 	bl	d8200 <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d4d80:	4b13      	ldr	r3, [pc, #76]	; (d4dd0 <_Z14setPowerConfigv+0x68>)
   d4d82:	7959      	ldrb	r1, [r3, #5]
   d4d84:	b1a1      	cbz	r1, d4db0 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4d86:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4d8a:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4d8e:	4b11      	ldr	r3, [pc, #68]	; (d4dd4 <_Z14setPowerConfigv+0x6c>)
   d4d90:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4d92:	f241 0370 	movw	r3, #4208	; 0x1070
   d4d96:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4d9a:	9b00      	ldr	r3, [sp, #0]
   d4d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4da0:	9300      	str	r3, [sp, #0]
   d4da2:	2100      	movs	r1, #0
   d4da4:	4668      	mov	r0, sp
   d4da6:	f003 fa2b 	bl	d8200 <system_power_management_set_config>
}
   d4daa:	b011      	add	sp, #68	; 0x44
   d4dac:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d4db0:	f241 0370 	movw	r3, #4208	; 0x1070
   d4db4:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4db8:	4b07      	ldr	r3, [pc, #28]	; (d4dd8 <_Z14setPowerConfigv+0x70>)
   d4dba:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4dbc:	f241 0310 	movw	r3, #4112	; 0x1010
   d4dc0:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d4dc4:	9b00      	ldr	r3, [sp, #0]
   d4dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4dca:	9300      	str	r3, [sp, #0]
   d4dcc:	e7ea      	b.n	d4da4 <_Z14setPowerConfigv+0x3c>
   d4dce:	bf00      	nop
   d4dd0:	2003e4c0 	.word	0x2003e4c0
   d4dd4:	04000384 	.word	0x04000384
   d4dd8:	03840384 	.word	0x03840384

000d4ddc <_Z12setSolarMode6String>:
{
   d4ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4dde:	491b      	ldr	r1, [pc, #108]	; (d4e4c <_Z12setSolarMode6String+0x70>)
   d4de0:	4605      	mov	r5, r0
   d4de2:	f005 fdf6 	bl	da9d2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4de6:	4604      	mov	r4, r0
   d4de8:	b1c0      	cbz	r0, d4e1c <_Z12setSolarMode6String+0x40>
    sysStatus.solarPowerMode = true;
   d4dea:	4d19      	ldr	r5, [pc, #100]	; (d4e50 <_Z12setSolarMode6String+0x74>)
   d4dec:	2401      	movs	r4, #1
   d4dee:	716c      	strb	r4, [r5, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4df0:	f7ff ffba 	bl	d4d68 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4df4:	4b17      	ldr	r3, [pc, #92]	; (d4e54 <_Z12setSolarMode6String+0x78>)
   d4df6:	701c      	strb	r4, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4df8:	78eb      	ldrb	r3, [r5, #3]
   d4dfa:	b913      	cbnz	r3, d4e02 <_Z12setSolarMode6String+0x26>
    return 1;
   d4dfc:	2001      	movs	r0, #1
}
   d4dfe:	b003      	add	sp, #12
   d4e00:	bd30      	pop	{r4, r5, pc}
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d4e02:	4b15      	ldr	r3, [pc, #84]	; (d4e58 <_Z12setSolarMode6String+0x7c>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4e04:	4a15      	ldr	r2, [pc, #84]	; (d4e5c <_Z12setSolarMode6String+0x80>)
   d4e06:	781b      	ldrb	r3, [r3, #0]
   d4e08:	f88d 3000 	strb.w	r3, [sp]
   d4e0c:	4b14      	ldr	r3, [pc, #80]	; (d4e60 <_Z12setSolarMode6String+0x84>)
   d4e0e:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4e10:	4914      	ldr	r1, [pc, #80]	; (d4e64 <_Z12setSolarMode6String+0x88>)
   d4e12:	4815      	ldr	r0, [pc, #84]	; (d4e68 <_Z12setSolarMode6String+0x8c>)
   d4e14:	f7ff fbc5 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4e18:	4620      	mov	r0, r4
   d4e1a:	e7f0      	b.n	d4dfe <_Z12setSolarMode6String+0x22>
   d4e1c:	4913      	ldr	r1, [pc, #76]	; (d4e6c <_Z12setSolarMode6String+0x90>)
   d4e1e:	4628      	mov	r0, r5
   d4e20:	f005 fdd7 	bl	da9d2 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4e24:	2800      	cmp	r0, #0
   d4e26:	d0ea      	beq.n	d4dfe <_Z12setSolarMode6String+0x22>
    sysStatus.solarPowerMode = false;
   d4e28:	4d09      	ldr	r5, [pc, #36]	; (d4e50 <_Z12setSolarMode6String+0x74>)
    systemStatusWriteNeeded=true;
   d4e2a:	4b0a      	ldr	r3, [pc, #40]	; (d4e54 <_Z12setSolarMode6String+0x78>)
    sysStatus.solarPowerMode = false;
   d4e2c:	716c      	strb	r4, [r5, #5]
    systemStatusWriteNeeded=true;
   d4e2e:	2401      	movs	r4, #1
   d4e30:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4e32:	f7ff ff99 	bl	d4d68 <_Z14setPowerConfigv>
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4e36:	78eb      	ldrb	r3, [r5, #3]
   d4e38:	2b00      	cmp	r3, #0
   d4e3a:	d0df      	beq.n	d4dfc <_Z12setSolarMode6String+0x20>
   d4e3c:	4b06      	ldr	r3, [pc, #24]	; (d4e58 <_Z12setSolarMode6String+0x7c>)
   d4e3e:	4a0c      	ldr	r2, [pc, #48]	; (d4e70 <_Z12setSolarMode6String+0x94>)
   d4e40:	781b      	ldrb	r3, [r3, #0]
   d4e42:	f88d 3000 	strb.w	r3, [sp]
   d4e46:	4b06      	ldr	r3, [pc, #24]	; (d4e60 <_Z12setSolarMode6String+0x84>)
   d4e48:	781b      	ldrb	r3, [r3, #0]
   d4e4a:	e7e1      	b.n	d4e10 <_Z12setSolarMode6String+0x34>
   d4e4c:	000dc308 	.word	0x000dc308
   d4e50:	2003e4c0 	.word	0x2003e4c0
   d4e54:	2003e4f0 	.word	0x2003e4f0
   d4e58:	2003e379 	.word	0x2003e379
   d4e5c:	000dc53d 	.word	0x000dc53d
   d4e60:	2003e378 	.word	0x2003e378
   d4e64:	000dc56a 	.word	0x000dc56a
   d4e68:	2003e478 	.word	0x2003e478
   d4e6c:	000dc576 	.word	0x000dc576
   d4e70:	000dc554 	.word	0x000dc554

000d4e74 <_Z17checkSystemValuesv>:
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e74:	4b24      	ldr	r3, [pc, #144]	; (d4f08 <_Z17checkSystemValuesv+0x94>)
   d4e76:	691a      	ldr	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e78:	edd3 7a05 	vldr	s15, [r3, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e7c:	2aff      	cmp	r2, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e7e:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e82:	bf88      	it	hi
   d4e84:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e86:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e8a:	bf88      	it	hi
   d4e8c:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e92:	d406      	bmi.n	d4ea2 <_Z17checkSystemValuesv+0x2e>
   d4e94:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4e98:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ea0:	dd01      	ble.n	d4ea6 <_Z17checkSystemValuesv+0x32>
   d4ea2:	4a1a      	ldr	r2, [pc, #104]	; (d4f0c <_Z17checkSystemValuesv+0x98>)
   d4ea4:	615a      	str	r2, [r3, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4ea6:	edd3 7a06 	vldr	s15, [r3, #24]
   d4eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eb2:	d406      	bmi.n	d4ec2 <_Z17checkSystemValuesv+0x4e>
   d4eb4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ec0:	dd02      	ble.n	d4ec8 <_Z17checkSystemValuesv+0x54>
   d4ec2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d4ec6:	619a      	str	r2, [r3, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d4ec8:	7f1a      	ldrb	r2, [r3, #28]
   d4eca:	2a0c      	cmp	r2, #12
   d4ecc:	bf84      	itt	hi
   d4ece:	2200      	movhi	r2, #0
   d4ed0:	771a      	strbhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4ed2:	7f5a      	ldrb	r2, [r3, #29]
   d4ed4:	3a0c      	subs	r2, #12
   d4ed6:	2a0c      	cmp	r2, #12
   d4ed8:	bf84      	itt	hi
   d4eda:	2218      	movhi	r2, #24
   d4edc:	775a      	strbhi	r2, [r3, #29]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4ede:	4a0c      	ldr	r2, [pc, #48]	; (d4f10 <_Z17checkSystemValuesv+0x9c>)
   d4ee0:	6811      	ldr	r1, [r2, #0]
   d4ee2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   d4ee4:	428a      	cmp	r2, r1
   d4ee6:	bf84      	itt	hi
   d4ee8:	2200      	movhi	r2, #0
   d4eea:	851a      	strhhi	r2, [r3, #40]	; 0x28
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4eec:	2201      	movs	r2, #1
   d4eee:	715a      	strb	r2, [r3, #5]
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4ef0:	4b08      	ldr	r3, [pc, #32]	; (d4f14 <_Z17checkSystemValuesv+0xa0>)
   d4ef2:	8b98      	ldrh	r0, [r3, #28]
   d4ef4:	4281      	cmp	r1, r0
    current.maxConnectTime = 0;
   d4ef6:	bf3f      	itttt	cc
   d4ef8:	2100      	movcc	r1, #0
   d4efa:	8399      	strhcc	r1, [r3, #28]
    currentCountsWriteNeeded = true;
   d4efc:	4b06      	ldrcc	r3, [pc, #24]	; (d4f18 <_Z17checkSystemValuesv+0xa4>)
   d4efe:	701a      	strbcc	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   d4f00:	4b06      	ldr	r3, [pc, #24]	; (d4f1c <_Z17checkSystemValuesv+0xa8>)
   d4f02:	2201      	movs	r2, #1
   d4f04:	701a      	strb	r2, [r3, #0]
}
   d4f06:	4770      	bx	lr
   d4f08:	2003e4c0 	.word	0x2003e4c0
   d4f0c:	c0a00000 	.word	0xc0a00000
   d4f10:	2003e20c 	.word	0x2003e20c
   d4f14:	2003e3f4 	.word	0x2003e3f4
   d4f18:	2003e418 	.word	0x2003e418
   d4f1c:	2003e4f0 	.word	0x2003e4f0

000d4f20 <_Z21makeUpParkHourStringsv>:
void makeUpParkHourStrings() {
   d4f20:	b510      	push	{r4, lr}
  if (sysStatus.openTime == 0 && sysStatus.closeTime == 24) {
   d4f22:	4c15      	ldr	r4, [pc, #84]	; (d4f78 <_Z21makeUpParkHourStringsv+0x58>)
   d4f24:	8ba3      	ldrh	r3, [r4, #28]
   d4f26:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4f2a:	d109      	bne.n	d4f40 <_Z21makeUpParkHourStringsv+0x20>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   d4f2c:	4913      	ldr	r1, [pc, #76]	; (d4f7c <_Z21makeUpParkHourStringsv+0x5c>)
   d4f2e:	4814      	ldr	r0, [pc, #80]	; (d4f80 <_Z21makeUpParkHourStringsv+0x60>)
   d4f30:	f007 f8d3 	bl	dc0da <strcpy>
}
   d4f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   d4f38:	4910      	ldr	r1, [pc, #64]	; (d4f7c <_Z21makeUpParkHourStringsv+0x5c>)
   d4f3a:	4812      	ldr	r0, [pc, #72]	; (d4f84 <_Z21makeUpParkHourStringsv+0x64>)
   d4f3c:	f007 b8cd 	b.w	dc0da <strcpy>
  snprintf(sensitivityStr, sizeof(sensitivityStr), "%i", sysStatus.sensitivity);
   d4f40:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   d4f44:	4a10      	ldr	r2, [pc, #64]	; (d4f88 <_Z21makeUpParkHourStringsv+0x68>)
   d4f46:	4811      	ldr	r0, [pc, #68]	; (d4f8c <_Z21makeUpParkHourStringsv+0x6c>)
   d4f48:	2108      	movs	r1, #8
   d4f4a:	f003 fa67 	bl	d841c <snprintf>
  snprintf(debounceStr, sizeof(debounceStr), "%i sec", sysStatus.debounceSec);
   d4f4e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4f52:	4a0f      	ldr	r2, [pc, #60]	; (d4f90 <_Z21makeUpParkHourStringsv+0x70>)
   d4f54:	480f      	ldr	r0, [pc, #60]	; (d4f94 <_Z21makeUpParkHourStringsv+0x74>)
   d4f56:	2108      	movs	r1, #8
   d4f58:	f003 fa60 	bl	d841c <snprintf>
  snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.openTime);
   d4f5c:	7f23      	ldrb	r3, [r4, #28]
   d4f5e:	4a0e      	ldr	r2, [pc, #56]	; (d4f98 <_Z21makeUpParkHourStringsv+0x78>)
   d4f60:	4807      	ldr	r0, [pc, #28]	; (d4f80 <_Z21makeUpParkHourStringsv+0x60>)
   d4f62:	2108      	movs	r1, #8
   d4f64:	f003 fa5a 	bl	d841c <snprintf>
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4f68:	7f63      	ldrb	r3, [r4, #29]
   d4f6a:	4a0b      	ldr	r2, [pc, #44]	; (d4f98 <_Z21makeUpParkHourStringsv+0x78>)
   d4f6c:	4805      	ldr	r0, [pc, #20]	; (d4f84 <_Z21makeUpParkHourStringsv+0x64>)
}
   d4f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4f72:	2108      	movs	r1, #8
   d4f74:	f003 ba52 	b.w	d841c <snprintf>
   d4f78:	2003e4c0 	.word	0x2003e4c0
   d4f7c:	000dc56f 	.word	0x000dc56f
   d4f80:	2003e21e 	.word	0x2003e21e
   d4f84:	2003e204 	.word	0x2003e204
   d4f88:	000dc482 	.word	0x000dc482
   d4f8c:	2003e22c 	.word	0x2003e22c
   d4f90:	000dc405 	.word	0x000dc405
   d4f94:	2003e216 	.word	0x2003e216
   d4f98:	000dc572 	.word	0x000dc572

000d4f9c <_Z11setOpenTime6String>:
{
   d4f9c:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4f9e:	220a      	movs	r2, #10
   d4fa0:	6800      	ldr	r0, [r0, #0]
   d4fa2:	a901      	add	r1, sp, #4
   d4fa4:	f007 f97a 	bl	dc29c <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4fa8:	2817      	cmp	r0, #23
   d4faa:	d80c      	bhi.n	d4fc6 <_Z11setOpenTime6String+0x2a>
  sysStatus.openTime = tempTime;
   d4fac:	4c07      	ldr	r4, [pc, #28]	; (d4fcc <_Z11setOpenTime6String+0x30>)
   d4fae:	7720      	strb	r0, [r4, #28]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4fb0:	f7ff ffb6 	bl	d4f20 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4fb4:	4b06      	ldr	r3, [pc, #24]	; (d4fd0 <_Z11setOpenTime6String+0x34>)
   d4fb6:	2001      	movs	r0, #1
   d4fb8:	7018      	strb	r0, [r3, #0]
  if (sysStatus.connectedStatus) {
   d4fba:	78e3      	ldrb	r3, [r4, #3]
   d4fbc:	b10b      	cbz	r3, d4fc2 <_Z11setOpenTime6String+0x26>
   d4fbe:	f7ff fbb9 	bl	d4734 <_Z11setOpenTime6String.part.0>
}
   d4fc2:	b002      	add	sp, #8
   d4fc4:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4fc6:	2000      	movs	r0, #0
   d4fc8:	e7fb      	b.n	d4fc2 <_Z11setOpenTime6String+0x26>
   d4fca:	bf00      	nop
   d4fcc:	2003e4c0 	.word	0x2003e4c0
   d4fd0:	2003e4f0 	.word	0x2003e4f0

000d4fd4 <_Z12setCloseTime6String>:
{
   d4fd4:	b530      	push	{r4, r5, lr}
   d4fd6:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4fd8:	6800      	ldr	r0, [r0, #0]
   d4fda:	220a      	movs	r2, #10
   d4fdc:	a903      	add	r1, sp, #12
   d4fde:	f007 f95d 	bl	dc29c <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4fe2:	2818      	cmp	r0, #24
   d4fe4:	d81c      	bhi.n	d5020 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
   d4fe6:	4d10      	ldr	r5, [pc, #64]	; (d5028 <_Z12setCloseTime6String+0x54>)
   d4fe8:	7768      	strb	r0, [r5, #29]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4fea:	f7ff ff99 	bl	d4f20 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4fee:	4b0f      	ldr	r3, [pc, #60]	; (d502c <_Z12setCloseTime6String+0x58>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4ff0:	4a0f      	ldr	r2, [pc, #60]	; (d5030 <_Z12setCloseTime6String+0x5c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4ff2:	2401      	movs	r4, #1
   d4ff4:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4ffa:	7f6b      	ldrb	r3, [r5, #29]
   d4ffc:	a804      	add	r0, sp, #16
   d4ffe:	f003 fa0d 	bl	d841c <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d5002:	78eb      	ldrb	r3, [r5, #3]
   d5004:	b153      	cbz	r3, d501c <_Z12setCloseTime6String+0x48>
   d5006:	4b0b      	ldr	r3, [pc, #44]	; (d5034 <_Z12setCloseTime6String+0x60>)
   d5008:	490b      	ldr	r1, [pc, #44]	; (d5038 <_Z12setCloseTime6String+0x64>)
   d500a:	781b      	ldrb	r3, [r3, #0]
   d500c:	f88d 3000 	strb.w	r3, [sp]
   d5010:	4b0a      	ldr	r3, [pc, #40]	; (d503c <_Z12setCloseTime6String+0x68>)
   d5012:	480b      	ldr	r0, [pc, #44]	; (d5040 <_Z12setCloseTime6String+0x6c>)
   d5014:	781b      	ldrb	r3, [r3, #0]
   d5016:	aa04      	add	r2, sp, #16
   d5018:	f7ff fac3 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d501c:	4620      	mov	r0, r4
   d501e:	e000      	b.n	d5022 <_Z12setCloseTime6String+0x4e>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d5020:	2000      	movs	r0, #0
}
   d5022:	b045      	add	sp, #276	; 0x114
   d5024:	bd30      	pop	{r4, r5, pc}
   d5026:	bf00      	nop
   d5028:	2003e4c0 	.word	0x2003e4c0
   d502c:	2003e4f0 	.word	0x2003e4f0
   d5030:	000dc578 	.word	0x000dc578
   d5034:	2003e379 	.word	0x2003e379
   d5038:	000dc62b 	.word	0x000dc62b
   d503c:	2003e378 	.word	0x2003e378
   d5040:	2003e478 	.word	0x2003e478

000d5044 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d5044:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d5046:	4c0a      	ldr	r4, [pc, #40]	; (d5070 <_Z15resetEverythingv+0x2c>)
   d5048:	2500      	movs	r5, #0
  current.hourlyCountInFlight = 0;
   d504a:	e9c4 5500 	strd	r5, r5, [r4]
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d504e:	60a5      	str	r5, [r4, #8]
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d5050:	f005 ffaf 	bl	dafb2 <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5054:	4b07      	ldr	r3, [pc, #28]	; (d5074 <_Z15resetEverythingv+0x30>)
  currentCountsWriteNeeded = true;
   d5056:	4a08      	ldr	r2, [pc, #32]	; (d5078 <_Z15resetEverythingv+0x34>)
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5058:	611d      	str	r5, [r3, #16]
  current.minBatteryLevel = 100;
   d505a:	2364      	movs	r3, #100	; 0x64
   d505c:	6223      	str	r3, [r4, #32]
  currentCountsWriteNeeded = true;
   d505e:	2301      	movs	r3, #1
   d5060:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d5062:	4a06      	ldr	r2, [pc, #24]	; (d507c <_Z15resetEverythingv+0x38>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d5064:	60e0      	str	r0, [r4, #12]
  systemStatusWriteNeeded=true;
   d5066:	7013      	strb	r3, [r2, #0]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5068:	6165      	str	r5, [r4, #20]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d506a:	83a5      	strh	r5, [r4, #28]
}
   d506c:	bd38      	pop	{r3, r4, r5, pc}
   d506e:	bf00      	nop
   d5070:	2003e3f4 	.word	0x2003e3f4
   d5074:	2003e4c0 	.word	0x2003e4c0
   d5078:	2003e418 	.word	0x2003e418
   d507c:	2003e4f0 	.word	0x2003e4f0

000d5080 <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition to the Log Handler and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d5080:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d5082:	4d14      	ldr	r5, [pc, #80]	; (d50d4 <_Z22publishStateTransitionv+0x54>)
   d5084:	4c14      	ldr	r4, [pc, #80]	; (d50d8 <_Z22publishStateTransitionv+0x58>)
   d5086:	4915      	ldr	r1, [pc, #84]	; (d50dc <_Z22publishStateTransitionv+0x5c>)
   d5088:	782a      	ldrb	r2, [r5, #0]
   d508a:	7820      	ldrb	r0, [r4, #0]
{
   d508c:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d508e:	230e      	movs	r3, #14
   d5090:	fb03 1202 	mla	r2, r3, r2, r1
   d5094:	9200      	str	r2, [sp, #0]
   d5096:	fb03 1300 	mla	r3, r3, r0, r1
   d509a:	4a11      	ldr	r2, [pc, #68]	; (d50e0 <_Z22publishStateTransitionv+0x60>)
   d509c:	2128      	movs	r1, #40	; 0x28
   d509e:	a802      	add	r0, sp, #8
   d50a0:	f003 f9bc 	bl	d841c <snprintf>
  oldState = state;
   d50a4:	782b      	ldrb	r3, [r5, #0]
   d50a6:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode && sysStatus.connectedStatus) publishQueue.publish("State Transition",stateTransitionString, PRIVATE, WITH_ACK);
   d50a8:	4b0e      	ldr	r3, [pc, #56]	; (d50e4 <_Z22publishStateTransitionv+0x64>)
   d50aa:	791a      	ldrb	r2, [r3, #4]
   d50ac:	b162      	cbz	r2, d50c8 <_Z22publishStateTransitionv+0x48>
   d50ae:	78db      	ldrb	r3, [r3, #3]
   d50b0:	b153      	cbz	r3, d50c8 <_Z22publishStateTransitionv+0x48>
   d50b2:	4b0d      	ldr	r3, [pc, #52]	; (d50e8 <_Z22publishStateTransitionv+0x68>)
   d50b4:	490d      	ldr	r1, [pc, #52]	; (d50ec <_Z22publishStateTransitionv+0x6c>)
   d50b6:	781b      	ldrb	r3, [r3, #0]
   d50b8:	f88d 3000 	strb.w	r3, [sp]
   d50bc:	4b0c      	ldr	r3, [pc, #48]	; (d50f0 <_Z22publishStateTransitionv+0x70>)
   d50be:	480d      	ldr	r0, [pc, #52]	; (d50f4 <_Z22publishStateTransitionv+0x74>)
   d50c0:	781b      	ldrb	r3, [r3, #0]
   d50c2:	aa02      	add	r2, sp, #8
   d50c4:	f7ff fa6d 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Log.info(stateTransitionString);
   d50c8:	480b      	ldr	r0, [pc, #44]	; (d50f8 <_Z22publishStateTransitionv+0x78>)
   d50ca:	a902      	add	r1, sp, #8
   d50cc:	f7ff fa3b 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
}
   d50d0:	b00d      	add	sp, #52	; 0x34
   d50d2:	bd30      	pop	{r4, r5, pc}
   d50d4:	2003e4b5 	.word	0x2003e4b5
   d50d8:	2003e474 	.word	0x2003e474
   d50dc:	2003e234 	.word	0x2003e234
   d50e0:	000dc58f 	.word	0x000dc58f
   d50e4:	2003e4c0 	.word	0x2003e4c0
   d50e8:	2003e379 	.word	0x2003e379
   d50ec:	000dc59d 	.word	0x000dc59d
   d50f0:	2003e378 	.word	0x2003e378
   d50f4:	2003e478 	.word	0x2003e478
   d50f8:	2003e5e0 	.word	0x2003e5e0

000d50fc <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details Syncs time with remote service and sets low power mode. Called from Reporting State ONLY.
 * Clean house at the end of the day
 */
void dailyCleanup() {
   d50fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5100:	4b22      	ldr	r3, [pc, #136]	; (d518c <_Z12dailyCleanupv+0x90>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
  sysStatus.verboseMode = false;
   d5102:	4c23      	ldr	r4, [pc, #140]	; (d5190 <_Z12dailyCleanupv+0x94>)
   d5104:	781b      	ldrb	r3, [r3, #0]
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d5106:	4a23      	ldr	r2, [pc, #140]	; (d5194 <_Z12dailyCleanupv+0x98>)
   d5108:	4923      	ldr	r1, [pc, #140]	; (d5198 <_Z12dailyCleanupv+0x9c>)
   d510a:	4824      	ldr	r0, [pc, #144]	; (d519c <_Z12dailyCleanupv+0xa0>)
void dailyCleanup() {
   d510c:	b086      	sub	sp, #24
  sysStatus.verboseMode = false;
   d510e:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d5110:	f88d 3000 	strb.w	r3, [sp]
   d5114:	4b22      	ldr	r3, [pc, #136]	; (d51a0 <_Z12dailyCleanupv+0xa4>)
   d5116:	781b      	ldrb	r3, [r3, #0]
   d5118:	f7ff fa43 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d511c:	7125      	strb	r5, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d511e:	f003 f8ad 	bl	d827c <spark_cloud_flag_connected>
        if (!connected()) {
   d5122:	b110      	cbz	r0, d512a <_Z12dailyCleanupv+0x2e>
        return spark_sync_time(NULL);
   d5124:	4628      	mov	r0, r5
   d5126:	f003 f8c9 	bl	d82bc <spark_sync_time>
        const system_tick_t start = millis();
   d512a:	f7ff f9e7 	bl	d44fc <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d512e:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d5132:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d5134:	f247 582f 	movw	r8, #29999	; 0x752f
   d5138:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d513c:	f7ff f9de 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5140:	1b46      	subs	r6, r0, r5
   d5142:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5146:	45b9      	cmp	r9, r7
   d5148:	bf08      	it	eq
   d514a:	45b0      	cmpeq	r8, r6
   d514c:	d305      	bcc.n	d515a <_Z12dailyCleanupv+0x5e>
  Particle.syncTime();                                                 // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                // Wait for up to 30 seconds for the SyncTime to complete
   d514e:	f7ff f8d8 	bl	d4302 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5152:	b910      	cbnz	r0, d515a <_Z12dailyCleanupv+0x5e>
            spark_process();
   d5154:	f003 f882 	bl	d825c <spark_process>
        while (_while() && !_condition()) {
   d5158:	e7f0      	b.n	d513c <_Z12dailyCleanupv+0x40>
   d515a:	f7ff f8d2 	bl	d4302 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {     // If Solar or if the battery is being discharged
   d515e:	7963      	ldrb	r3, [r4, #5]
   d5160:	b913      	cbnz	r3, d5168 <_Z12dailyCleanupv+0x6c>
   d5162:	68a3      	ldr	r3, [r4, #8]
   d5164:	2b46      	cmp	r3, #70	; 0x46
   d5166:	dc09      	bgt.n	d517c <_Z12dailyCleanupv+0x80>
    setLowPowerMode("1");
   d5168:	490e      	ldr	r1, [pc, #56]	; (d51a4 <_Z12dailyCleanupv+0xa8>)
   d516a:	a802      	add	r0, sp, #8
   d516c:	f005 fbdb 	bl	da926 <_ZN6StringC1EPKc>
   d5170:	a802      	add	r0, sp, #8
   d5172:	f7ff fbd5 	bl	d4920 <_Z15setLowPowerMode6String>
   d5176:	a802      	add	r0, sp, #8
   d5178:	f005 fb8a 	bl	da890 <_ZN6StringD1Ev>
  }

  resetEverything();                                               // If so, we need to Zero the counts for the new day
   d517c:	f7ff ff62 	bl	d5044 <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d5180:	4b09      	ldr	r3, [pc, #36]	; (d51a8 <_Z12dailyCleanupv+0xac>)
   d5182:	2201      	movs	r2, #1
   d5184:	701a      	strb	r2, [r3, #0]
   d5186:	b006      	add	sp, #24
   d5188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d518c:	2003e379 	.word	0x2003e379
   d5190:	2003e4c0 	.word	0x2003e4c0
   d5194:	000dc5ae 	.word	0x000dc5ae
   d5198:	000dc5b6 	.word	0x000dc5b6
   d519c:	2003e478 	.word	0x2003e478
   d51a0:	2003e378 	.word	0x2003e378
   d51a4:	000dc308 	.word	0x000dc308
   d51a8:	2003e4f0 	.word	0x2003e4f0

000d51ac <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d51ac:	b530      	push	{r4, r5, lr}
   d51ae:	b085      	sub	sp, #20
   d51b0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d51b2:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d51b4:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d51b6:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d51b8:	f002 ffbc 	bl	d8134 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d51bc:	b9b0      	cbnz	r0, d51ec <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d51be:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d51c0:	b10c      	cbz	r4, d51c6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d51c2:	6923      	ldr	r3, [r4, #16]
   d51c4:	b923      	cbnz	r3, d51d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d51c6:	4a0a      	ldr	r2, [pc, #40]	; (d51f0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d51c8:	2100      	movs	r1, #0
   d51ca:	200a      	movs	r0, #10
   d51cc:	f002 ff8a 	bl	d80e4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d51d0:	2300      	movs	r3, #0
   d51d2:	f8ad 3006 	strh.w	r3, [sp, #6]
   d51d6:	230c      	movs	r3, #12
   d51d8:	f8ad 3004 	strh.w	r3, [sp, #4]
   d51dc:	2304      	movs	r3, #4
   d51de:	9303      	str	r3, [sp, #12]
   d51e0:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d51e2:	6923      	ldr	r3, [r4, #16]
   d51e4:	aa01      	add	r2, sp, #4
   d51e6:	2101      	movs	r1, #1
   d51e8:	4620      	mov	r0, r4
   d51ea:	4798      	blx	r3
}
   d51ec:	b005      	add	sp, #20
   d51ee:	bd30      	pop	{r4, r5, pc}
   d51f0:	000d7db5 	.word	0x000d7db5

000d51f4 <_Z16takeMeasurementsv>:
{
   d51f4:	b530      	push	{r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d51f6:	4b26      	ldr	r3, [pc, #152]	; (d5290 <_Z16takeMeasurementsv+0x9c>)
   d51f8:	2200      	movs	r2, #0
   d51fa:	b089      	sub	sp, #36	; 0x24
   d51fc:	6858      	ldr	r0, [r3, #4]
   d51fe:	4611      	mov	r1, r2
   d5200:	f003 f8a4 	bl	d834c <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d5204:	b108      	cbz	r0, d520a <_Z16takeMeasurementsv+0x16>
   d5206:	f7ff fd1d 	bl	d4c44 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d520a:	f7ff fd59 	bl	d4cc0 <_Z14getTemperaturev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d520e:	4669      	mov	r1, sp
   d5210:	2007      	movs	r0, #7
   d5212:	f7ff ffcb 	bl	d51ac <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
  sysStatus.batteryState = System.batteryState();                     // Call before isItSafeToCharge() as it may overwrite the context
   d5216:	4c1f      	ldr	r4, [pc, #124]	; (d5294 <_Z16takeMeasurementsv+0xa0>)
   d5218:	4d1f      	ldr	r5, [pc, #124]	; (d5298 <_Z16takeMeasurementsv+0xa4>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d521a:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d521c:	bfa8      	it	ge
   d521e:	9800      	ldrge	r0, [sp, #0]
   d5220:	7320      	strb	r0, [r4, #12]
  if (!isItSafeToCharge()) current.alertCount++;                      // Increment the alert count
   d5222:	f7ff fcef 	bl	d4c04 <_Z16isItSafeToChargev>
   d5226:	b910      	cbnz	r0, d522e <_Z16takeMeasurementsv+0x3a>
   d5228:	696b      	ldr	r3, [r5, #20]
   d522a:	3301      	adds	r3, #1
   d522c:	616b      	str	r3, [r5, #20]
   d522e:	4669      	mov	r1, sp
   d5230:	2003      	movs	r0, #3
   d5232:	f7ff ffbb 	bl	d51ac <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d5236:	bb40      	cbnz	r0, d528a <_Z16takeMeasurementsv+0x96>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d5238:	f8bd 3000 	ldrh.w	r3, [sp]
   d523c:	ee07 3a90 	vmov	s15, r3
   d5240:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d5244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d5248:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d524c:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d524e:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5252:	dc09      	bgt.n	d5268 <_Z16takeMeasurementsv+0x74>
   d5254:	7b23      	ldrb	r3, [r4, #12]
   d5256:	2b01      	cmp	r3, #1
   d5258:	d106      	bne.n	d5268 <_Z16takeMeasurementsv+0x74>
    System.setPowerConfiguration(SystemPowerConfiguration());         // Reset the PMIC
   d525a:	4668      	mov	r0, sp
   d525c:	f7ff f8e6 	bl	d442c <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d5260:	2100      	movs	r1, #0
   d5262:	4668      	mov	r0, sp
   d5264:	f002 ffcc 	bl	d8200 <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) current.minBatteryLevel = sysStatus.stateOfCharge; // Keep track of lowest value for the day
   d5268:	68a3      	ldr	r3, [r4, #8]
   d526a:	6a2a      	ldr	r2, [r5, #32]
   d526c:	4293      	cmp	r3, r2
   d526e:	bfb8      	it	lt
   d5270:	622b      	strlt	r3, [r5, #32]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d5272:	2b1d      	cmp	r3, #29
   d5274:	bfcc      	ite	gt
   d5276:	2300      	movgt	r3, #0
   d5278:	2301      	movle	r3, #1
  systemStatusWriteNeeded = true;
   d527a:	4a08      	ldr	r2, [pc, #32]	; (d529c <_Z16takeMeasurementsv+0xa8>)
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d527c:	71e3      	strb	r3, [r4, #7]
  systemStatusWriteNeeded = true;
   d527e:	2301      	movs	r3, #1
   d5280:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d5282:	4a07      	ldr	r2, [pc, #28]	; (d52a0 <_Z16takeMeasurementsv+0xac>)
   d5284:	7013      	strb	r3, [r2, #0]
}
   d5286:	b009      	add	sp, #36	; 0x24
   d5288:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d528a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d528e:	e7d9      	b.n	d5244 <_Z16takeMeasurementsv+0x50>
   d5290:	2003e50c 	.word	0x2003e50c
   d5294:	2003e4c0 	.word	0x2003e4c0
   d5298:	2003e3f4 	.word	0x2003e3f4
   d529c:	2003e4f0 	.word	0x2003e4f0
   d52a0:	2003e418 	.word	0x2003e418

000d52a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d52a6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d52aa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52ac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d52ae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d52b2:	42ae      	cmp	r6, r5
   d52b4:	d004      	beq.n	d52c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d52b6:	4628      	mov	r0, r5
   d52b8:	f005 faea 	bl	da890 <_ZN6StringD1Ev>
   d52bc:	3514      	adds	r5, #20
   d52be:	e7f8      	b.n	d52b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d52c0:	6820      	ldr	r0, [r4, #0]
   d52c2:	f003 f893 	bl	d83ec <free>
    AllocatorT::free(data_);
}
   d52c6:	4620      	mov	r0, r4
   d52c8:	bd70      	pop	{r4, r5, r6, pc}

000d52ca <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d52ca:	2300      	movs	r3, #0
   d52cc:	2202      	movs	r2, #2
   d52ce:	f002 bfb5 	b.w	d823c <spark_variable>

000d52d2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d52d2:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d52d4:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d52d6:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d52d8:	68dd      	ldr	r5, [r3, #12]
   d52da:	2330      	movs	r3, #48	; 0x30
   d52dc:	47a8      	blx	r5
    }
   d52de:	4620      	mov	r0, r4
   d52e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d52e4 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d52e4:	b570      	push	{r4, r5, r6, lr}
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d52e6:	4b19      	ldr	r3, [pc, #100]	; (d534c <_Z18loadSystemDefaultsv+0x68>)
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d52e8:	4c19      	ldr	r4, [pc, #100]	; (d5350 <_Z18loadSystemDefaultsv+0x6c>)
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d52ea:	2201      	movs	r2, #1
   d52ec:	701a      	strb	r2, [r3, #0]
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d52ee:	78e3      	ldrb	r3, [r4, #3]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d52f0:	b086      	sub	sp, #24
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d52f2:	b153      	cbz	r3, d530a <_Z18loadSystemDefaultsv+0x26>
   d52f4:	4b17      	ldr	r3, [pc, #92]	; (d5354 <_Z18loadSystemDefaultsv+0x70>)
   d52f6:	4a18      	ldr	r2, [pc, #96]	; (d5358 <_Z18loadSystemDefaultsv+0x74>)
   d52f8:	781b      	ldrb	r3, [r3, #0]
   d52fa:	f88d 3000 	strb.w	r3, [sp]
   d52fe:	4b17      	ldr	r3, [pc, #92]	; (d535c <_Z18loadSystemDefaultsv+0x78>)
   d5300:	4917      	ldr	r1, [pc, #92]	; (d5360 <_Z18loadSystemDefaultsv+0x7c>)
   d5302:	781b      	ldrb	r3, [r3, #0]
   d5304:	4817      	ldr	r0, [pc, #92]	; (d5364 <_Z18loadSystemDefaultsv+0x80>)
   d5306:	f7ff f94c 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d530a:	2500      	movs	r5, #0
  setLowPowerMode("0");
   d530c:	4916      	ldr	r1, [pc, #88]	; (d5368 <_Z18loadSystemDefaultsv+0x84>)
  sysStatus.verboseMode = false;
   d530e:	7125      	strb	r5, [r4, #4]
  sysStatus.structuresVersion = 1;
   d5310:	2601      	movs	r6, #1
  setLowPowerMode("0");
   d5312:	a802      	add	r0, sp, #8
  sysStatus.structuresVersion = 1;
   d5314:	7026      	strb	r6, [r4, #0]
  sysStatus.clockSet = false;
   d5316:	70a5      	strb	r5, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d5318:	71e5      	strb	r5, [r4, #7]
  setLowPowerMode("0");
   d531a:	f005 fb04 	bl	da926 <_ZN6StringC1EPKc>
   d531e:	a802      	add	r0, sp, #8
   d5320:	f7ff fafe 	bl	d4920 <_Z15setLowPowerMode6String>
   d5324:	a802      	add	r0, sp, #8
   d5326:	f005 fab3 	bl	da890 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d532a:	4b10      	ldr	r3, [pc, #64]	; (d536c <_Z18loadSystemDefaultsv+0x88>)
   d532c:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d532e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5332:	61a3      	str	r3, [r4, #24]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5334:	4a06      	ldr	r2, [pc, #24]	; (d5350 <_Z18loadSystemDefaultsv+0x6c>)
   d5336:	480e      	ldr	r0, [pc, #56]	; (d5370 <_Z18loadSystemDefaultsv+0x8c>)
  sysStatus.solarPowerMode = true;  
   d5338:	7166      	strb	r6, [r4, #5]
  sysStatus.openTime = 6;
   d533a:	f241 5306 	movw	r3, #5382	; 0x1506
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d533e:	4631      	mov	r1, r6
  sysStatus.openTime = 6;
   d5340:	83a3      	strh	r3, [r4, #28]
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d5342:	8525      	strh	r5, [r4, #40]	; 0x28
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5344:	f7ff ffc5 	bl	d52d2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d5348:	b006      	add	sp, #24
   d534a:	bd70      	pop	{r4, r5, r6, pc}
   d534c:	2003e475 	.word	0x2003e475
   d5350:	2003e4c0 	.word	0x2003e4c0
   d5354:	2003e379 	.word	0x2003e379
   d5358:	000dc5c4 	.word	0x000dc5c4
   d535c:	2003e378 	.word	0x2003e378
   d5360:	000dc56a 	.word	0x000dc56a
   d5364:	2003e478 	.word	0x2003e478
   d5368:	000dc576 	.word	0x000dc576
   d536c:	c0a00000 	.word	0xc0a00000
   d5370:	2003e424 	.word	0x2003e424
   d5374:	00000000 	.word	0x00000000

000d5378 <setup>:
{
   d5378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d537c:	2100      	movs	r1, #0
{
   d537e:	b0aa      	sub	sp, #168	; 0xa8
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5380:	2008      	movs	r0, #8
   d5382:	f006 f86f 	bl	db464 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d5386:	2100      	movs	r1, #0
   d5388:	2004      	movs	r0, #4
   d538a:	f006 f86b 	bl	db464 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d538e:	2101      	movs	r1, #1
   d5390:	2007      	movs	r0, #7
   d5392:	f006 f867 	bl	db464 <pinMode>
  pinMode(intPin,INPUT);                            // sensor interrupt
   d5396:	2100      	movs	r1, #0
   d5398:	2002      	movs	r0, #2
   d539a:	f006 f863 	bl	db464 <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d539e:	2101      	movs	r1, #1
   d53a0:	2007      	movs	r0, #7
   d53a2:	f006 f870 	bl	db486 <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d53a6:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d53a8:	2500      	movs	r5, #0
   d53aa:	f002 ff6f 	bl	d828c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d53ae:	2300      	movs	r3, #0
   d53b0:	227d      	movs	r2, #125	; 0x7d
   d53b2:	a90a      	add	r1, sp, #40	; 0x28
   d53b4:	a806      	add	r0, sp, #24
   d53b6:	f005 fb1e 	bl	da9f6 <_ZNK6String8getBytesEPhjj>
   d53ba:	49bd      	ldr	r1, [pc, #756]	; (d56b0 <setup+0x338>)
   d53bc:	4fbd      	ldr	r7, [pc, #756]	; (d56b4 <setup+0x33c>)
   d53be:	4cbe      	ldr	r4, [pc, #760]	; (d56b8 <setup+0x340>)
   d53c0:	f8df 8420 	ldr.w	r8, [pc, #1056]	; d57e4 <setup+0x46c>
   d53c4:	462b      	mov	r3, r5
   d53c6:	462a      	mov	r2, r5
   d53c8:	e9cd 5500 	strd	r5, r5, [sp]
   d53cc:	a80a      	add	r0, sp, #40	; 0x28
   d53ce:	f002 ff6d 	bl	d82ac <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53d2:	462b      	mov	r3, r5
   d53d4:	2202      	movs	r2, #2
   d53d6:	49b7      	ldr	r1, [pc, #732]	; (d56b4 <setup+0x33c>)
   d53d8:	48b8      	ldr	r0, [pc, #736]	; (d56bc <setup+0x344>)
   d53da:	f002 ff2f 	bl	d823c <spark_variable>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d53de:	49b8      	ldr	r1, [pc, #736]	; (d56c0 <setup+0x348>)
   d53e0:	48b8      	ldr	r0, [pc, #736]	; (d56c4 <setup+0x34c>)
   d53e2:	f7ff ff72 	bl	d52ca <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return _variable(varKey, var, STRING);
   d53e6:	49b8      	ldr	r1, [pc, #736]	; (d56c8 <setup+0x350>)
   d53e8:	48b8      	ldr	r0, [pc, #736]	; (d56cc <setup+0x354>)
   d53ea:	f7fe ff97 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d53ee:	49b8      	ldr	r1, [pc, #736]	; (d56d0 <setup+0x358>)
   d53f0:	48b8      	ldr	r0, [pc, #736]	; (d56d4 <setup+0x35c>)
   d53f2:	f7ff ff6a 	bl	d52ca <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53f6:	462b      	mov	r3, r5
   d53f8:	2202      	movs	r2, #2
   d53fa:	49b7      	ldr	r1, [pc, #732]	; (d56d8 <setup+0x360>)
   d53fc:	48b7      	ldr	r0, [pc, #732]	; (d56dc <setup+0x364>)
   d53fe:	f002 ff1d 	bl	d823c <spark_variable>
        return _variable(varKey, var, STRING);
   d5402:	49b7      	ldr	r1, [pc, #732]	; (d56e0 <setup+0x368>)
   d5404:	48b7      	ldr	r0, [pc, #732]	; (d56e4 <setup+0x36c>)
   d5406:	f7fe ff89 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d540a:	49b7      	ldr	r1, [pc, #732]	; (d56e8 <setup+0x370>)
   d540c:	48b7      	ldr	r0, [pc, #732]	; (d56ec <setup+0x374>)
   d540e:	f7ff ff5c 	bl	d52ca <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
   d5412:	49b7      	ldr	r1, [pc, #732]	; (d56f0 <setup+0x378>)
   d5414:	48b7      	ldr	r0, [pc, #732]	; (d56f4 <setup+0x37c>)
   d5416:	f7fe ff81 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d541a:	49b7      	ldr	r1, [pc, #732]	; (d56f8 <setup+0x380>)
   d541c:	48b7      	ldr	r0, [pc, #732]	; (d56fc <setup+0x384>)
   d541e:	f7fe ff7d 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5422:	49b7      	ldr	r1, [pc, #732]	; (d5700 <setup+0x388>)
   d5424:	48b7      	ldr	r0, [pc, #732]	; (d5704 <setup+0x38c>)
   d5426:	f7fe ff79 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d542a:	462b      	mov	r3, r5
   d542c:	2202      	movs	r2, #2
   d542e:	49b6      	ldr	r1, [pc, #728]	; (d5708 <setup+0x390>)
   d5430:	48b6      	ldr	r0, [pc, #728]	; (d570c <setup+0x394>)
   d5432:	f002 ff03 	bl	d823c <spark_variable>
        return _variable(varKey, var, STRING);
   d5436:	49b6      	ldr	r1, [pc, #728]	; (d5710 <setup+0x398>)
   d5438:	48b6      	ldr	r0, [pc, #728]	; (d5714 <setup+0x39c>)
   d543a:	f7fe ff6f 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d543e:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d5440:	e9cd 5503 	strd	r5, r5, [sp, #12]
        extra.size = sizeof(extra);
   d5444:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d5448:	4bb3      	ldr	r3, [pc, #716]	; (d5718 <setup+0x3a0>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d544a:	49b4      	ldr	r1, [pc, #720]	; (d571c <setup+0x3a4>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d544c:	9305      	str	r3, [sp, #20]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d544e:	2204      	movs	r2, #4
   d5450:	ab03      	add	r3, sp, #12
   d5452:	48b3      	ldr	r0, [pc, #716]	; (d5720 <setup+0x3a8>)
   d5454:	f002 fef2 	bl	d823c <spark_variable>
        return _variable(varKey, var, STRING);
   d5458:	49b2      	ldr	r1, [pc, #712]	; (d5724 <setup+0x3ac>)
   d545a:	48b3      	ldr	r0, [pc, #716]	; (d5728 <setup+0x3b0>)
   d545c:	f7fe ff5e 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5460:	49b2      	ldr	r1, [pc, #712]	; (d572c <setup+0x3b4>)
   d5462:	48b3      	ldr	r0, [pc, #716]	; (d5730 <setup+0x3b8>)
   d5464:	f7fe ff5a 	bl	d431c <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d5468:	49b2      	ldr	r1, [pc, #712]	; (d5734 <setup+0x3bc>)
   d546a:	48b3      	ldr	r0, [pc, #716]	; (d5738 <setup+0x3c0>)
   d546c:	f7ff f84a 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5470:	49b2      	ldr	r1, [pc, #712]	; (d573c <setup+0x3c4>)
   d5472:	48b3      	ldr	r0, [pc, #716]	; (d5740 <setup+0x3c8>)
   d5474:	f7ff f846 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5478:	49b2      	ldr	r1, [pc, #712]	; (d5744 <setup+0x3cc>)
   d547a:	48b3      	ldr	r0, [pc, #716]	; (d5748 <setup+0x3d0>)
   d547c:	f7ff f842 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5480:	49b2      	ldr	r1, [pc, #712]	; (d574c <setup+0x3d4>)
   d5482:	48b3      	ldr	r0, [pc, #716]	; (d5750 <setup+0x3d8>)
   d5484:	f7ff f83e 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5488:	49b2      	ldr	r1, [pc, #712]	; (d5754 <setup+0x3dc>)
   d548a:	48b3      	ldr	r0, [pc, #716]	; (d5758 <setup+0x3e0>)
   d548c:	f7ff f83a 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5490:	49b2      	ldr	r1, [pc, #712]	; (d575c <setup+0x3e4>)
   d5492:	48b3      	ldr	r0, [pc, #716]	; (d5760 <setup+0x3e8>)
   d5494:	f7ff f836 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5498:	49b2      	ldr	r1, [pc, #712]	; (d5764 <setup+0x3ec>)
   d549a:	48b3      	ldr	r0, [pc, #716]	; (d5768 <setup+0x3f0>)
   d549c:	f7ff f832 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54a0:	49b2      	ldr	r1, [pc, #712]	; (d576c <setup+0x3f4>)
   d54a2:	48b3      	ldr	r0, [pc, #716]	; (d5770 <setup+0x3f8>)
   d54a4:	f7ff f82e 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54a8:	49b2      	ldr	r1, [pc, #712]	; (d5774 <setup+0x3fc>)
   d54aa:	48b3      	ldr	r0, [pc, #716]	; (d5778 <setup+0x400>)
   d54ac:	f7ff f82a 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54b0:	49b2      	ldr	r1, [pc, #712]	; (d577c <setup+0x404>)
   d54b2:	48b3      	ldr	r0, [pc, #716]	; (d5780 <setup+0x408>)
   d54b4:	f7ff f826 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54b8:	49b2      	ldr	r1, [pc, #712]	; (d5784 <setup+0x40c>)
   d54ba:	48b3      	ldr	r0, [pc, #716]	; (d5788 <setup+0x410>)
   d54bc:	f7ff f822 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54c0:	49b2      	ldr	r1, [pc, #712]	; (d578c <setup+0x414>)
   d54c2:	48b3      	ldr	r0, [pc, #716]	; (d5790 <setup+0x418>)
   d54c4:	f7ff f81e 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54c8:	49b2      	ldr	r1, [pc, #712]	; (d5794 <setup+0x41c>)
   d54ca:	48b3      	ldr	r0, [pc, #716]	; (d5798 <setup+0x420>)
   d54cc:	f7ff f81a 	bl	d4504 <_ZN10CloudClass9_functionEPKcPFi6StringE>
        graceful_(graceful),
        clearSession_(clearSession) {
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d54d0:	2601      	movs	r6, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d54d2:	2203      	movs	r2, #3
   d54d4:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d54d8:	a803      	add	r0, sp, #12
   d54da:	e9cd 2303 	strd	r2, r3, [sp, #12]
    graceful_ = enabled;
   d54de:	f8ad 6014 	strh.w	r6, [sp, #20]
   d54e2:	f003 f9ea 	bl	d88ba <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  fram.begin();                                                       // Initialize the FRAM module
   d54e6:	48ad      	ldr	r0, [pc, #692]	; (d579c <setup+0x424>)
   d54e8:	f001 fe78 	bl	d71dc <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54ec:	4633      	mov	r3, r6
   d54ee:	48ab      	ldr	r0, [pc, #684]	; (d579c <setup+0x424>)
   d54f0:	f10d 020b 	add.w	r2, sp, #11
   d54f4:	4629      	mov	r1, r5
   d54f6:	f001 feb3 	bl	d7260 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d54fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d54fe:	2b03      	cmp	r3, #3
   d5500:	f000 8182 	beq.w	d5808 <setup+0x490>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5504:	48a5      	ldr	r0, [pc, #660]	; (d579c <setup+0x424>)
   d5506:	f001 fe73 	bl	d71f0 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d550a:	4aa5      	ldr	r2, [pc, #660]	; (d57a0 <setup+0x428>)
   d550c:	48a3      	ldr	r0, [pc, #652]	; (d579c <setup+0x424>)
   d550e:	2304      	movs	r3, #4
   d5510:	4629      	mov	r1, r5
   d5512:	f001 fef0 	bl	d72f6 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5516:	4633      	mov	r3, r6
   d5518:	48a0      	ldr	r0, [pc, #640]	; (d579c <setup+0x424>)
   d551a:	f10d 020b 	add.w	r2, sp, #11
   d551e:	4629      	mov	r1, r5
   d5520:	f001 fe9e 	bl	d7260 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d5524:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5528:	2b03      	cmp	r3, #3
   d552a:	f000 816a 	beq.w	d5802 <setup+0x48a>
      Log.info("FRAM Test Error");
   d552e:	499d      	ldr	r1, [pc, #628]	; (d57a4 <setup+0x42c>)
   d5530:	489d      	ldr	r0, [pc, #628]	; (d57a8 <setup+0x430>)
      state = ERROR_STATE;                                            // Device will not work without FRAM
   d5532:	f888 6000 	strb.w	r6, [r8]
      Log.info("FRAM Test Error");
   d5536:	f7ff f806 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d553a:	4d9c      	ldr	r5, [pc, #624]	; (d57ac <setup+0x434>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d553c:	f7ff fc9a 	bl	d4e74 <_Z17checkSystemValuesv>
  makeUpParkHourStrings();                                            // Create the strings for the console
   d5540:	f7ff fcee 	bl	d4f20 <_Z21makeUpParkHourStringsv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d5544:	4a9a      	ldr	r2, [pc, #616]	; (d57b0 <setup+0x438>)
   d5546:	2300      	movs	r3, #0
   d5548:	2100      	movs	r1, #0
   d554a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d554e:	f002 fe13 	bl	d8178 <system_subscribe_event>
   d5552:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();                                        // The carrier board has D8 connected to FOUT for wake interrupts
   d5554:	2101      	movs	r1, #1
   d5556:	4628      	mov	r0, r5
   d5558:	816b      	strh	r3, [r5, #10]
   d555a:	f001 fcf1 	bl	d6f40 <_ZN6AB18055setupEb>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d555e:	2301      	movs	r3, #1
   d5560:	461a      	mov	r2, r3
   d5562:	2110      	movs	r1, #16
   d5564:	4628      	mov	r0, r5
   d5566:	f001 fa56 	bl	d6a16 <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                        // Enable watchdog
   d556a:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet = ab1805.isRTCSet();                             // Note whether the RTC is set 
   d556c:	70a0      	strb	r0, [r4, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                        // Enable watchdog
   d556e:	4628      	mov	r0, r5
   d5570:	f001 f9ce 	bl	d6910 <_ZN6AB18056setWDTEi>
  Time.setDSTOffset(sysStatus.dstOffset);                             // Set the value from FRAM if in limits
   d5574:	ed94 0a06 	vldr	s0, [r4, #24]
   d5578:	f005 fbd2 	bl	dad20 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                       // Perform the DST calculation here
   d557c:	f001 f800 	bl	d6580 <_Z8isDSTusav>
   d5580:	2800      	cmp	r0, #0
   d5582:	f000 814e 	beq.w	d5822 <setup+0x4aa>
   d5586:	f005 fbe9 	bl	dad5c <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                      // Set the Time Zone for our device
   d558a:	ed94 0a05 	vldr	s0, [r4, #20]
   d558e:	f005 fba7 	bl	dace0 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5592:	f005 fd53 	bl	db03c <_ZN9TimeClass5localEv>
   d5596:	4605      	mov	r5, r0
   d5598:	f005 fd0b 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d559c:	1a28      	subs	r0, r5, r0
   d559e:	f006 f995 	bl	db8cc <__aeabi_i2d>
   d55a2:	a341      	add	r3, pc, #260	; (adr r3, d56a8 <setup+0x330>)
   d55a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55a8:	f006 fb24 	bl	dbbf4 <__aeabi_ddiv>
   d55ac:	4a81      	ldr	r2, [pc, #516]	; (d57b4 <setup+0x43c>)
   d55ae:	e9cd 0100 	strd	r0, r1, [sp]
   d55b2:	210a      	movs	r1, #10
   d55b4:	4856      	ldr	r0, [pc, #344]	; (d5710 <setup+0x398>)
   d55b6:	f002 ff31 	bl	d841c <snprintf>
  accel.begin(SCALE_2G, ODR_100); // Set up accel with +/-2g range, and 100Hz ODR
   d55ba:	2203      	movs	r2, #3
   d55bc:	2102      	movs	r1, #2
   d55be:	487e      	ldr	r0, [pc, #504]	; (d57b8 <setup+0x440>)
   d55c0:	f002 f836 	bl	d7630 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>
  accel.setupTapIntsPulse(sysStatus.sensitivity);                          // Initialize the accelerometer
   d55c4:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
   d55c8:	487b      	ldr	r0, [pc, #492]	; (d57b8 <setup+0x440>)
   d55ca:	f001 ffd5 	bl	d7578 <_ZN8MMA8452Q17setupTapIntsPulseEh>
  countSignalTimer.changePeriod(sysStatus.debounceSec*1000);           // This keeps the device awake during debounce
   d55ce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d55d2:	487a      	ldr	r0, [pc, #488]	; (d57bc <setup+0x444>)
   d55d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d55d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d55dc:	4359      	muls	r1, r3
   d55de:	f7fe ff97 	bl	d4510 <_ZN5Timer12changePeriodEjj>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d55e2:	79a3      	ldrb	r3, [r4, #6]
   d55e4:	2210      	movs	r2, #16
   d55e6:	2b00      	cmp	r3, #0
   d55e8:	f000 811e 	beq.w	d5828 <setup+0x4b0>
   d55ec:	4974      	ldr	r1, [pc, #464]	; (d57c0 <setup+0x448>)
   d55ee:	4840      	ldr	r0, [pc, #256]	; (d56f0 <setup+0x378>)
   d55f0:	f006 fdb3 	bl	dc15a <strncpy>
        int reason = RESET_REASON_NONE;
   d55f4:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55f6:	4611      	mov	r1, r2
   d55f8:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d55fa:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55fc:	f002 fbc2 	bl	d7d84 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5600:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET) {
   d5602:	2b14      	cmp	r3, #20
   d5604:	f04f 0200 	mov.w	r2, #0
   d5608:	f040 8110 	bne.w	d582c <setup+0x4b4>
    Log.info("Restarted due to a pin reset");
   d560c:	496d      	ldr	r1, [pc, #436]	; (d57c4 <setup+0x44c>)
    Log.info("Restarted due to a user reset");
   d560e:	4866      	ldr	r0, [pc, #408]	; (d57a8 <setup+0x430>)
   d5610:	f7fe ff99 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.resetCount++;
   d5614:	6923      	ldr	r3, [r4, #16]
   d5616:	3301      	adds	r3, #1
   d5618:	6123      	str	r3, [r4, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d561a:	4b6b      	ldr	r3, [pc, #428]	; (d57c8 <setup+0x450>)
   d561c:	2201      	movs	r2, #1
   d561e:	701a      	strb	r2, [r3, #0]
  if (current.hourlyCount) lastReportedTime = current.lastCountTime;
   d5620:	683b      	ldr	r3, [r7, #0]
   d5622:	4d6a      	ldr	r5, [pc, #424]	; (d57cc <setup+0x454>)
   d5624:	2b00      	cmp	r3, #0
   d5626:	f000 810c 	beq.w	d5842 <setup+0x4ca>
   d562a:	68fb      	ldr	r3, [r7, #12]
   d562c:	602b      	str	r3, [r5, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d562e:	f7ff fb9b 	bl	d4d68 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d5632:	2004      	movs	r0, #4
   d5634:	f005 ff40 	bl	db4b8 <digitalRead>
   d5638:	b908      	cbnz	r0, d563e <setup+0x2c6>
   d563a:	f7ff fe53 	bl	d52e4 <_Z18loadSystemDefaultsv>
  if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   d563e:	f005 fce1 	bl	db004 <_ZN9TimeClass3dayEv>
   d5642:	2100      	movs	r1, #0
   d5644:	4605      	mov	r5, r0
   d5646:	68f8      	ldr	r0, [r7, #12]
   d5648:	f005 fb2e 	bl	daca8 <_ZN9TimeClass3dayEx>
   d564c:	4285      	cmp	r5, r0
   d564e:	d001      	beq.n	d5654 <setup+0x2dc>
    resetEverything();                                                 // Zero the counts for the new day
   d5650:	f7ff fcf8 	bl	d5044 <_Z15resetEverythingv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d5654:	f005 fcbe 	bl	dafd4 <_ZN9TimeClass4hourEv>
   d5658:	7f23      	ldrb	r3, [r4, #28]
   d565a:	4298      	cmp	r0, r3
   d565c:	db1b      	blt.n	d5696 <setup+0x31e>
   d565e:	f005 fcb9 	bl	dafd4 <_ZN9TimeClass4hourEv>
   d5662:	7f63      	ldrb	r3, [r4, #29]
   d5664:	4298      	cmp	r0, r3
   d5666:	da16      	bge.n	d5696 <setup+0x31e>
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d5668:	2300      	movs	r3, #0
   d566a:	9300      	str	r3, [sp, #0]
   d566c:	4958      	ldr	r1, [pc, #352]	; (d57d0 <setup+0x458>)
   d566e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5672:	2201      	movs	r2, #1
   d5674:	2002      	movs	r0, #2
   d5676:	f003 fcb1 	bl	d8fdc <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) {         // If the system thinks we are connected, let's make sure that we are
   d567a:	78e3      	ldrb	r3, [r4, #3]
   d567c:	b133      	cbz	r3, d568c <setup+0x314>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d567e:	f002 fdfd 	bl	d827c <spark_cloud_flag_connected>
   d5682:	b918      	cbnz	r0, d568c <setup+0x314>
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d5684:	4b53      	ldr	r3, [pc, #332]	; (d57d4 <setup+0x45c>)
      sysStatus.connectedStatus = false;                              // We will fix this.
   d5686:	70e0      	strb	r0, [r4, #3]
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d5688:	2201      	movs	r2, #1
   d568a:	701a      	strb	r2, [r3, #0]
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d568c:	f7ff fdb2 	bl	d51f4 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Boron awake after reboot - helps with recovery
   d5690:	4b51      	ldr	r3, [pc, #324]	; (d57d8 <setup+0x460>)
   d5692:	4a52      	ldr	r2, [pc, #328]	; (d57dc <setup+0x464>)
   d5694:	601a      	str	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5696:	f898 3000 	ldrb.w	r3, [r8]
   d569a:	b913      	cbnz	r3, d56a2 <setup+0x32a>
   d569c:	2302      	movs	r3, #2
   d569e:	f888 3000 	strb.w	r3, [r8]
  Log.info("Startup Complete");
   d56a2:	494f      	ldr	r1, [pc, #316]	; (d57e0 <setup+0x468>)
   d56a4:	e0a0      	b.n	d57e8 <setup+0x470>
   d56a6:	bf00      	nop
   d56a8:	00000000 	.word	0x00000000
   d56ac:	40ac2000 	.word	0x40ac2000
   d56b0:	000d45bd 	.word	0x000d45bd
   d56b4:	2003e3f4 	.word	0x2003e3f4
   d56b8:	2003e4c0 	.word	0x2003e4c0
   d56bc:	000dc5dc 	.word	0x000dc5dc
   d56c0:	2003e3fc 	.word	0x2003e3fc
   d56c4:	000dc654 	.word	0x000dc654
   d56c8:	2003e32c 	.word	0x2003e32c
   d56cc:	000dc5e8 	.word	0x000dc5e8
   d56d0:	2003e4d0 	.word	0x2003e4d0
   d56d4:	000dc5ef 	.word	0x000dc5ef
   d56d8:	2003e404 	.word	0x2003e404
   d56dc:	000dc5fa 	.word	0x000dc5fa
   d56e0:	2003e210 	.word	0x2003e210
   d56e4:	000dc606 	.word	0x000dc606
   d56e8:	2003e4c8 	.word	0x2003e4c8
   d56ec:	000dc60e 	.word	0x000dc60e
   d56f0:	2003e464 	.word	0x2003e464
   d56f4:	000dc619 	.word	0x000dc619
   d56f8:	2003e21e 	.word	0x2003e21e
   d56fc:	000dc6c1 	.word	0x000dc6c1
   d5700:	2003e204 	.word	0x2003e204
   d5704:	000dc626 	.word	0x000dc626
   d5708:	2003e408 	.word	0x2003e408
   d570c:	000dc630 	.word	0x000dc630
   d5710:	2003e419 	.word	0x2003e419
   d5714:	000dc637 	.word	0x000dc637
   d5718:	000d4325 	.word	0x000d4325
   d571c:	000d4105 	.word	0x000d4105
   d5720:	000dc642 	.word	0x000dc642
   d5724:	2003e22c 	.word	0x2003e22c
   d5728:	000dc6d8 	.word	0x000dc6d8
   d572c:	2003e216 	.word	0x2003e216
   d5730:	000dc6e8 	.word	0x000dc6e8
   d5734:	000d4781 	.word	0x000d4781
   d5738:	000dc651 	.word	0x000dc651
   d573c:	000d42a1 	.word	0x000d42a1
   d5740:	000dc65f 	.word	0x000dc65f
   d5744:	000d465d 	.word	0x000d465d
   d5748:	000dc66b 	.word	0x000dc66b
   d574c:	000d41ed 	.word	0x000d41ed
   d5750:	000dc675 	.word	0x000dc675
   d5754:	000d4921 	.word	0x000d4921
   d5758:	000dc67d 	.word	0x000dc67d
   d575c:	000d4ddd 	.word	0x000d4ddd
   d5760:	000dc68a 	.word	0x000dc68a
   d5764:	000d46a5 	.word	0x000d46a5
   d5768:	000dc695 	.word	0x000dc695
   d576c:	000d6459 	.word	0x000d6459
   d5770:	000dc6a2 	.word	0x000dc6a2
   d5774:	000d65c1 	.word	0x000d65c1
   d5778:	000dc6af 	.word	0x000dc6af
   d577c:	000d4f9d 	.word	0x000d4f9d
   d5780:	000dc6bd 	.word	0x000dc6bd
   d5784:	000d4fd5 	.word	0x000d4fd5
   d5788:	000dc6ca 	.word	0x000dc6ca
   d578c:	000d47f9 	.word	0x000d47f9
   d5790:	000dc6d4 	.word	0x000dc6d4
   d5794:	000d4889 	.word	0x000d4889
   d5798:	000dc6e4 	.word	0x000dc6e4
   d579c:	2003e424 	.word	0x2003e424
   d57a0:	000dc8d8 	.word	0x000dc8d8
   d57a4:	000dc6f1 	.word	0x000dc6f1
   d57a8:	2003e5e0 	.word	0x2003e5e0
   d57ac:	2003e388 	.word	0x2003e388
   d57b0:	000d40d5 	.word	0x000d40d5
   d57b4:	000dc701 	.word	0x000dc701
   d57b8:	2003e3a8 	.word	0x2003e3a8
   d57bc:	2003e3d8 	.word	0x2003e3d8
   d57c0:	000dc44c 	.word	0x000dc44c
   d57c4:	000dc70b 	.word	0x000dc70b
   d57c8:	2003e4f0 	.word	0x2003e4f0
   d57cc:	2003e43c 	.word	0x2003e43c
   d57d0:	000d4155 	.word	0x000d4155
   d57d4:	2003e475 	.word	0x2003e475
   d57d8:	2003e4b8 	.word	0x2003e4b8
   d57dc:	00015f90 	.word	0x00015f90
   d57e0:	000dc746 	.word	0x000dc746
   d57e4:	2003e4b5 	.word	0x2003e4b5
   d57e8:	4818      	ldr	r0, [pc, #96]	; (d584c <setup+0x4d4>)
   d57ea:	f7fe feac 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
  digitalWrite(blueLED,LOW);                                          // Signal the end of startup
   d57ee:	2100      	movs	r1, #0
   d57f0:	2007      	movs	r0, #7
   d57f2:	f005 fe48 	bl	db486 <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d57f6:	a806      	add	r0, sp, #24
   d57f8:	f005 f84a 	bl	da890 <_ZN6StringD1Ev>
}
   d57fc:	b02a      	add	sp, #168	; 0xa8
   d57fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5802:	f7ff fd6f 	bl	d52e4 <_Z18loadSystemDefaultsv>
   d5806:	e698      	b.n	d553a <setup+0x1c2>
   d5808:	4622      	mov	r2, r4
   d580a:	4631      	mov	r1, r6
   d580c:	2330      	movs	r3, #48	; 0x30
   d580e:	4810      	ldr	r0, [pc, #64]	; (d5850 <setup+0x4d8>)
   d5810:	f001 fd26 	bl	d7260 <_ZN6MB85RC8readDataEjPhj>
   d5814:	2324      	movs	r3, #36	; 0x24
   d5816:	463a      	mov	r2, r7
   d5818:	2150      	movs	r1, #80	; 0x50
   d581a:	480d      	ldr	r0, [pc, #52]	; (d5850 <setup+0x4d8>)
   d581c:	f001 fd20 	bl	d7260 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5820:	e68b      	b.n	d553a <setup+0x1c2>
  DSTRULES() ? Time.beginDST() : Time.endDST();                       // Perform the DST calculation here
   d5822:	f005 faa7 	bl	dad74 <_ZN9TimeClass6endDSTEv>
   d5826:	e6b0      	b.n	d558a <setup+0x212>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d5828:	490a      	ldr	r1, [pc, #40]	; (d5854 <setup+0x4dc>)
   d582a:	e6e0      	b.n	d55ee <setup+0x276>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d582c:	4611      	mov	r1, r2
   d582e:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5830:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5832:	f002 faa7 	bl	d7d84 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5836:	9b03      	ldr	r3, [sp, #12]
  else if (System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5838:	2b8c      	cmp	r3, #140	; 0x8c
   d583a:	f47f aef1 	bne.w	d5620 <setup+0x2a8>
    Log.info("Restarted due to a user reset");
   d583e:	4906      	ldr	r1, [pc, #24]	; (d5858 <setup+0x4e0>)
   d5840:	e6e5      	b.n	d560e <setup+0x296>
  else lastReportedTime = Time.now();                                  // Initialize it to now so that reporting can begin as soon as the hour changes
   d5842:	f005 fbb6 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d5846:	6028      	str	r0, [r5, #0]
   d5848:	e6f1      	b.n	d562e <setup+0x2b6>
   d584a:	bf00      	nop
   d584c:	2003e5e0 	.word	0x2003e5e0
   d5850:	2003e424 	.word	0x2003e424
   d5854:	000dc448 	.word	0x000dc448
   d5858:	000dc728 	.word	0x000dc728

000d585c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d585c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d585e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5860:	4604      	mov	r4, r0
   d5862:	460d      	mov	r5, r1
   d5864:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5866:	d916      	bls.n	d5896 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5868:	4290      	cmp	r0, r2
   d586a:	d215      	bcs.n	d5898 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d586c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d5870:	1a75      	subs	r5, r6, r1
   d5872:	f1a1 0714 	sub.w	r7, r1, #20
   d5876:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5878:	42b7      	cmp	r7, r6
   d587a:	d01c      	beq.n	d58b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d587c:	b12c      	cbz	r4, d588a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d587e:	4631      	mov	r1, r6
   d5880:	4620      	mov	r0, r4
   d5882:	f005 f881 	bl	da988 <_ZN6StringC1EOS_>
   d5886:	7c33      	ldrb	r3, [r6, #16]
   d5888:	7423      	strb	r3, [r4, #16]
   d588a:	4630      	mov	r0, r6
   d588c:	f005 f800 	bl	da890 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5890:	3e14      	subs	r6, #20
   d5892:	3c14      	subs	r4, #20
   d5894:	e7f0      	b.n	d5878 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5896:	d00e      	beq.n	d58b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5898:	42b5      	cmp	r5, r6
   d589a:	d00c      	beq.n	d58b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d589c:	b12c      	cbz	r4, d58aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d589e:	4629      	mov	r1, r5
   d58a0:	4620      	mov	r0, r4
   d58a2:	f005 f871 	bl	da988 <_ZN6StringC1EOS_>
   d58a6:	7c2b      	ldrb	r3, [r5, #16]
   d58a8:	7423      	strb	r3, [r4, #16]
   d58aa:	4628      	mov	r0, r5
   d58ac:	f004 fff0 	bl	da890 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d58b0:	3514      	adds	r5, #20
   d58b2:	3414      	adds	r4, #20
   d58b4:	e7f0      	b.n	d5898 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d58b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d58b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d58bc:	2300      	movs	r3, #0
   d58be:	e9c0 3300 	strd	r3, r3, [r0]
   d58c2:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d58c4:	684f      	ldr	r7, [r1, #4]
   d58c6:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d58c8:	4604      	mov	r4, r0
   d58ca:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d58cc:	dd23      	ble.n	d5916 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d58ce:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d58d2:	fb08 f007 	mul.w	r0, r8, r7
   d58d6:	f002 fd81 	bl	d83dc <malloc>
            if (!d) {
   d58da:	4605      	mov	r5, r0
   d58dc:	b1d8      	cbz	r0, d5916 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d58de:	e9d4 1200 	ldrd	r1, r2, [r4]
   d58e2:	fb08 1202 	mla	r2, r8, r2, r1
   d58e6:	f7ff ffb9 	bl	d585c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d58ea:	6820      	ldr	r0, [r4, #0]
   d58ec:	f002 fd7e 	bl	d83ec <free>
        data_ = d;
   d58f0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d58f2:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d58f4:	e9d6 7300 	ldrd	r7, r3, [r6]
   d58f8:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d58fc:	45b8      	cmp	r8, r7
   d58fe:	d008      	beq.n	d5912 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d5900:	4639      	mov	r1, r7
   d5902:	4628      	mov	r0, r5
   d5904:	f005 f85a 	bl	da9bc <_ZN6StringC1ERKS_>
   d5908:	7c3b      	ldrb	r3, [r7, #16]
   d590a:	742b      	strb	r3, [r5, #16]
   d590c:	3714      	adds	r7, #20
   d590e:	3514      	adds	r5, #20
   d5910:	e7f4      	b.n	d58fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5912:	6873      	ldr	r3, [r6, #4]
   d5914:	6063      	str	r3, [r4, #4]
}
   d5916:	4620      	mov	r0, r4
   d5918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d591c <_GLOBAL__sub_I___appProductID>:
   d591c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   d5920:	4b78      	ldr	r3, [pc, #480]	; (d5b04 <_GLOBAL__sub_I___appProductID+0x1e8>)
              error_(SYSTEM_ERROR_NONE) {
   d5922:	4d79      	ldr	r5, [pc, #484]	; (d5b08 <_GLOBAL__sub_I___appProductID+0x1ec>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5924:	4e79      	ldr	r6, [pc, #484]	; (d5b0c <_GLOBAL__sub_I___appProductID+0x1f0>)
   d5926:	f04f 0901 	mov.w	r9, #1
   d592a:	f883 9000 	strb.w	r9, [r3]
   d592e:	4b78      	ldr	r3, [pc, #480]	; (d5b10 <_GLOBAL__sub_I___appProductID+0x1f4>)
   d5930:	2208      	movs	r2, #8
   d5932:	b091      	sub	sp, #68	; 0x44
   d5934:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5936:	f005 fd3f 	bl	db3b8 <spark_protocol_instance>
   d593a:	2300      	movs	r3, #0
   d593c:	461a      	mov	r2, r3
   d593e:	210d      	movs	r1, #13
   d5940:	f005 fd42 	bl	db3c8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5944:	f005 fd38 	bl	db3b8 <spark_protocol_instance>
   d5948:	2300      	movs	r3, #0
   d594a:	461a      	mov	r2, r3
   d594c:	2109      	movs	r1, #9
   d594e:	f005 fd43 	bl	db3d8 <spark_protocol_set_product_firmware_version>
struct currentCounts_structure {                    // currently 10 bytes long
   d5952:	4b70      	ldr	r3, [pc, #448]	; (d5b14 <_GLOBAL__sub_I___appProductID+0x1f8>)
   d5954:	2400      	movs	r4, #0
   d5956:	2264      	movs	r2, #100	; 0x64
   d5958:	839c      	strh	r4, [r3, #28]
   d595a:	621a      	str	r2, [r3, #32]
    SleepResult() {}
   d595c:	4b6e      	ldr	r3, [pc, #440]	; (d5b18 <_GLOBAL__sub_I___appProductID+0x1fc>)
   d595e:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5960:	602c      	str	r4, [r5, #0]
   d5962:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d5964:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d5966:	2002      	movs	r0, #2
   d5968:	f002 fbf6 	bl	d8158 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d596c:	4632      	mov	r2, r6
   d596e:	496b      	ldr	r1, [pc, #428]	; (d5b1c <_GLOBAL__sub_I___appProductID+0x200>)
   d5970:	4628      	mov	r0, r5
   d5972:	f005 fe4b 	bl	db60c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5976:	4621      	mov	r1, r4
   d5978:	4648      	mov	r0, r9
   d597a:	f002 fc05 	bl	d8188 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d597e:	4649      	mov	r1, r9
   d5980:	2004      	movs	r0, #4
   d5982:	f002 f9f7 	bl	d7d74 <HAL_Feature_Set>
        : config_(config) {
   d5986:	4866      	ldr	r0, [pc, #408]	; (d5b20 <_GLOBAL__sub_I___appProductID+0x204>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5988:	4966      	ldr	r1, [pc, #408]	; (d5b24 <_GLOBAL__sub_I___appProductID+0x208>)
              valid_(true) {
   d598a:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d598e:	4603      	mov	r3, r0
   d5990:	1d02      	adds	r2, r0, #4
   d5992:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5996:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5998:	4b63      	ldr	r3, [pc, #396]	; (d5b28 <_GLOBAL__sub_I___appProductID+0x20c>)
   d599a:	6043      	str	r3, [r0, #4]
   d599c:	4632      	mov	r2, r6
        config_.wakeup_sources = nullptr;
   d599e:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d59a2:	f880 9014 	strb.w	r9, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d59a6:	7204      	strb	r4, [r0, #8]
   d59a8:	f005 fe30 	bl	db60c <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d59ac:	f005 fdde 	bl	db56c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d59b0:	4d5e      	ldr	r5, [pc, #376]	; (d5b2c <_GLOBAL__sub_I___appProductID+0x210>)
   d59b2:	4601      	mov	r1, r0
   d59b4:	4623      	mov	r3, r4
   d59b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d59ba:	4628      	mov	r0, r5
   d59bc:	f001 fc04 	bl	d71c8 <_ZN6MB85RCC1ER7TwoWireji>
   d59c0:	4b5b      	ldr	r3, [pc, #364]	; (d5b30 <_GLOBAL__sub_I___appProductID+0x214>)
   d59c2:	602b      	str	r3, [r5, #0]
   d59c4:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d59c6:	4d5b      	ldr	r5, [pc, #364]	; (d5b34 <_GLOBAL__sub_I___appProductID+0x218>)
   d59c8:	495b      	ldr	r1, [pc, #364]	; (d5b38 <_GLOBAL__sub_I___appProductID+0x21c>)
   d59ca:	4632      	mov	r2, r6
   d59cc:	f005 fe1e 	bl	db60c <__aeabi_atexit>
   d59d0:	495a      	ldr	r1, [pc, #360]	; (d5b3c <_GLOBAL__sub_I___appProductID+0x220>)
   d59d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d59d6:	4628      	mov	r0, r5
   d59d8:	f002 f81e 	bl	d7a18 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d59dc:	4b58      	ldr	r3, [pc, #352]	; (d5b40 <_GLOBAL__sub_I___appProductID+0x224>)
   d59de:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d59e0:	4632      	mov	r2, r6
   d59e2:	4958      	ldr	r1, [pc, #352]	; (d5b44 <_GLOBAL__sub_I___appProductID+0x228>)
   d59e4:	4628      	mov	r0, r5
   d59e6:	f005 fe11 	bl	db60c <__aeabi_atexit>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d59ea:	f005 fdbf 	bl	db56c <_Z19__fetch_global_Wirev>
   d59ee:	4d56      	ldr	r5, [pc, #344]	; (d5b48 <_GLOBAL__sub_I___appProductID+0x22c>)
   d59f0:	4601      	mov	r1, r0
   d59f2:	2269      	movs	r2, #105	; 0x69
   d59f4:	4628      	mov	r0, r5
   d59f6:	f000 fe8d 	bl	d6714 <_ZN6AB1805C1ER7TwoWireh>
   d59fa:	4628      	mov	r0, r5
FuelGauge fuel;                                     // Enable the fuel gauge API     
   d59fc:	4d53      	ldr	r5, [pc, #332]	; (d5b4c <_GLOBAL__sub_I___appProductID+0x230>)
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d59fe:	4954      	ldr	r1, [pc, #336]	; (d5b50 <_GLOBAL__sub_I___appProductID+0x234>)
   d5a00:	4632      	mov	r2, r6
   d5a02:	f005 fe03 	bl	db60c <__aeabi_atexit>
FuelGauge fuel;                                     // Enable the fuel gauge API     
   d5a06:	4621      	mov	r1, r4
   d5a08:	4628      	mov	r0, r5
   d5a0a:	f003 fa25 	bl	d8e58 <_ZN9FuelGaugeC1Eb>
   d5a0e:	4632      	mov	r2, r6
   d5a10:	4950      	ldr	r1, [pc, #320]	; (d5b54 <_GLOBAL__sub_I___appProductID+0x238>)
   d5a12:	4628      	mov	r0, r5
   d5a14:	f005 fdfa 	bl	db60c <__aeabi_atexit>
MMA8452Q accel;                                     // Default constructor, SA0 pin is HIGH
   d5a18:	211d      	movs	r1, #29
   d5a1a:	484f      	ldr	r0, [pc, #316]	; (d5b58 <_GLOBAL__sub_I___appProductID+0x23c>)
        filter_(level, filters) {
   d5a1c:	4d4f      	ldr	r5, [pc, #316]	; (d5b5c <_GLOBAL__sub_I___appProductID+0x240>)
   d5a1e:	f001 fd07 	bl	d7430 <_ZN8MMA8452QC1Eh>
        capacity_(0) {
   d5a22:	e9cd 4403 	strd	r4, r4, [sp, #12]
   d5a26:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   d5a28:	f005 fc0a 	bl	db240 <_Z16_fetch_usbserialv>
        stream_(&stream) {
   d5a2c:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   d5a30:	4682      	mov	sl, r0
   d5a32:	a903      	add	r1, sp, #12
   d5a34:	a806      	add	r0, sp, #24
   d5a36:	f7ff ff3f 	bl	d58b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5a3a:	46ab      	mov	fp, r5
        stream_(&stream) {
   d5a3c:	a906      	add	r1, sp, #24
   d5a3e:	4640      	mov	r0, r8
   d5a40:	f7ff ff3a 	bl	d58b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5a44:	4b46      	ldr	r3, [pc, #280]	; (d5b60 <_GLOBAL__sub_I___appProductID+0x244>)
   d5a46:	f84b 3b04 	str.w	r3, [fp], #4
   d5a4a:	af0c      	add	r7, sp, #48	; 0x30
   d5a4c:	4641      	mov	r1, r8
   d5a4e:	4638      	mov	r0, r7
   d5a50:	f7ff ff32 	bl	d58b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5a54:	463a      	mov	r2, r7
   d5a56:	211e      	movs	r1, #30
   d5a58:	4658      	mov	r0, fp
   d5a5a:	f004 f9f9 	bl	d9e50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5a5e:	4638      	mov	r0, r7
   d5a60:	f7ff fc20 	bl	d52a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5a64:	4640      	mov	r0, r8
   d5a66:	f7ff fc1d 	bl	d52a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a6a:	4b3e      	ldr	r3, [pc, #248]	; (d5b64 <_GLOBAL__sub_I___appProductID+0x248>)
   d5a6c:	602b      	str	r3, [r5, #0]
   d5a6e:	f8c5 a020 	str.w	sl, [r5, #32]
   d5a72:	a806      	add	r0, sp, #24
   d5a74:	f7ff fc16 	bl	d52a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a78:	4b3b      	ldr	r3, [pc, #236]	; (d5b68 <_GLOBAL__sub_I___appProductID+0x24c>)
   d5a7a:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d5a7c:	f005 fbe0 	bl	db240 <_Z16_fetch_usbserialv>
   d5a80:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5a84:	f005 fbcc 	bl	db220 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5a88:	f003 fe8a 	bl	d97a0 <_ZN5spark10LogManager8instanceEv>
   d5a8c:	4629      	mov	r1, r5
   d5a8e:	f004 f971 	bl	d9d74 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   d5a92:	a803      	add	r0, sp, #12
   d5a94:	f7ff fc06 	bl	d52a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a98:	4632      	mov	r2, r6
   d5a9a:	4934      	ldr	r1, [pc, #208]	; (d5b6c <_GLOBAL__sub_I___appProductID+0x250>)
   d5a9c:	4628      	mov	r0, r5
   d5a9e:	f005 fdb5 	bl	db60c <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5aa2:	4b33      	ldr	r3, [pc, #204]	; (d5b70 <_GLOBAL__sub_I___appProductID+0x254>)
   d5aa4:	930c      	str	r3, [sp, #48]	; 0x30
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5aa6:	4d33      	ldr	r5, [pc, #204]	; (d5b74 <_GLOBAL__sub_I___appProductID+0x258>)
   d5aa8:	4b33      	ldr	r3, [pc, #204]	; (d5b78 <_GLOBAL__sub_I___appProductID+0x25c>)
   d5aaa:	602b      	str	r3, [r5, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5aac:	e897 0003 	ldmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5ab0:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ab4:	e888 0003 	stmia.w	r8, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5ab8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5abc:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5ac0:	e898 0003 	ldmia.w	r8, {r0, r1}
   d5ac4:	e883 0003 	stmia.w	r3, {r0, r1}
   d5ac8:	4b2c      	ldr	r3, [pc, #176]	; (d5b7c <_GLOBAL__sub_I___appProductID+0x260>)
   d5aca:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5acc:	69ab      	ldr	r3, [r5, #24]
   d5ace:	930f      	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5ad0:	4b2b      	ldr	r3, [pc, #172]	; (d5b80 <_GLOBAL__sub_I___appProductID+0x264>)
   d5ad2:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5ad4:	4a2b      	ldr	r2, [pc, #172]	; (d5b84 <_GLOBAL__sub_I___appProductID+0x268>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5ad6:	712c      	strb	r4, [r5, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5ad8:	462b      	mov	r3, r5
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5ada:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5ae0:	e9cd 9400 	strd	r9, r4, [sp]
   d5ae4:	f105 0008 	add.w	r0, r5, #8
      __a = _GLIBCXX_MOVE(__b);
   d5ae8:	940e      	str	r4, [sp, #56]	; 0x38
   d5aea:	f002 f8d3 	bl	d7c94 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5aee:	4638      	mov	r0, r7
   d5af0:	f7fe fc5e 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
Timer countSignalTimer(1000, countSignalTimerISR, true);  // This is how we will ensure the BlueLED stays on long enough for folks to see it.
   d5af4:	4924      	ldr	r1, [pc, #144]	; (d5b88 <_GLOBAL__sub_I___appProductID+0x26c>)
   d5af6:	4632      	mov	r2, r6
   d5af8:	4628      	mov	r0, r5
   d5afa:	f005 fd87 	bl	db60c <__aeabi_atexit>
   d5afe:	b011      	add	sp, #68	; 0x44
   d5b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b04:	2003e378 	.word	0x2003e378
   d5b08:	2003e36c 	.word	0x2003e36c
   d5b0c:	2003e320 	.word	0x2003e320
   d5b10:	2003e379 	.word	0x2003e379
   d5b14:	2003e3f4 	.word	0x2003e3f4
   d5b18:	ffff0000 	.word	0xffff0000
   d5b1c:	000d42f7 	.word	0x000d42f7
   d5b20:	2003e3c0 	.word	0x2003e3c0
   d5b24:	000d41d5 	.word	0x000d41d5
   d5b28:	00030010 	.word	0x00030010
   d5b2c:	2003e424 	.word	0x2003e424
   d5b30:	000dc874 	.word	0x000dc874
   d5b34:	2003e478 	.word	0x2003e478
   d5b38:	000d423d 	.word	0x000d423d
   d5b3c:	2003f400 	.word	0x2003f400
   d5b40:	000dc890 	.word	0x000dc890
   d5b44:	000d4215 	.word	0x000d4215
   d5b48:	2003e388 	.word	0x2003e388
   d5b4c:	2003e434 	.word	0x2003e434
   d5b50:	000d66d5 	.word	0x000d66d5
   d5b54:	000d8e79 	.word	0x000d8e79
   d5b58:	2003e3a8 	.word	0x2003e3a8
   d5b5c:	2003e440 	.word	0x2003e440
   d5b60:	000dc844 	.word	0x000dc844
   d5b64:	000dce4c 	.word	0x000dce4c
   d5b68:	000dc85c 	.word	0x000dc85c
   d5b6c:	000d435d 	.word	0x000d435d
   d5b70:	000d40fb 	.word	0x000d40fb
   d5b74:	2003e3d8 	.word	0x2003e3d8
   d5b78:	000dc830 	.word	0x000dc830
   d5b7c:	000d40e5 	.word	0x000d40e5
   d5b80:	000d40e1 	.word	0x000d40e1
   d5b84:	000d4265 	.word	0x000d4265
   d5b88:	000d43c5 	.word	0x000d43c5

000d5b8c <_Z22disconnectFromParticlev>:
{
   d5b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b90:	b085      	sub	sp, #20
        clearSession_(clearSession) {
   d5b92:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();
   d5b96:	a801      	add	r0, sp, #4
   d5b98:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d5b9c:	f8ad a00c 	strh.w	sl, [sp, #12]
   d5ba0:	f002 fe71 	bl	d8886 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d5ba4:	f7fe fcaa 	bl	d44fc <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d5ba8:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d5bac:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d5bae:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5bb2:	f7fe fca3 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5bb6:	ebb0 060b 	subs.w	r6, r0, fp
   d5bba:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5bbe:	45b9      	cmp	r9, r7
   d5bc0:	bf08      	it	eq
   d5bc2:	45b0      	cmpeq	r8, r6
   d5bc4:	d305      	bcc.n	d5bd2 <_Z22disconnectFromParticlev+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5bc6:	f002 fb59 	bl	d827c <spark_cloud_flag_connected>
   d5bca:	b110      	cbz	r0, d5bd2 <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d5bcc:	f002 fb46 	bl	d825c <spark_process>
        while (_while() && !_condition()) {
   d5bd0:	e7ef      	b.n	d5bb2 <_Z22disconnectFromParticlev+0x26>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5bd2:	4e18      	ldr	r6, [pc, #96]	; (d5c34 <_Z22disconnectFromParticlev+0xa8>)
   d5bd4:	f002 fb52 	bl	d827c <spark_cloud_flag_connected>
   d5bd8:	2200      	movs	r2, #0
   d5bda:	2102      	movs	r1, #2
   d5bdc:	6870      	ldr	r0, [r6, #4]
   d5bde:	f002 fbad 	bl	d833c <network_disconnect>
  Cellular.off();                                                 // Turn off the cellular modem
   d5be2:	4630      	mov	r0, r6
   d5be4:	f7fe fbde 	bl	d43a4 <_ZN5spark13CellularClass3offEv>
        const system_tick_t start = millis();
   d5be8:	f7fe fc88 	bl	d44fc <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5bec:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d5bf0:	4607      	mov	r7, r0
        while (_while() && !_condition()) {
   d5bf2:	f247 582f 	movw	r8, #29999	; 0x752f
   d5bf6:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5bfa:	f7fe fc7f 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5bfe:	1bc4      	subs	r4, r0, r7
   d5c00:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d5c04:	45a9      	cmp	r9, r5
   d5c06:	bf08      	it	eq
   d5c08:	45a0      	cmpeq	r8, r4
   d5c0a:	d306      	bcc.n	d5c1a <_Z22disconnectFromParticlev+0x8e>
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5c0c:	4630      	mov	r0, r6
   d5c0e:	f004 fc5f 	bl	da4d0 <_ZN5spark12NetworkClass5isOffEv>
   d5c12:	b910      	cbnz	r0, d5c1a <_Z22disconnectFromParticlev+0x8e>
            spark_process();
   d5c14:	f002 fb22 	bl	d825c <spark_process>
        while (_while() && !_condition()) {
   d5c18:	e7ef      	b.n	d5bfa <_Z22disconnectFromParticlev+0x6e>
   d5c1a:	4806      	ldr	r0, [pc, #24]	; (d5c34 <_Z22disconnectFromParticlev+0xa8>)
   d5c1c:	f004 fc58 	bl	da4d0 <_ZN5spark12NetworkClass5isOffEv>
  sysStatus.connectedStatus = false;
   d5c20:	4b05      	ldr	r3, [pc, #20]	; (d5c38 <_Z22disconnectFromParticlev+0xac>)
   d5c22:	2200      	movs	r2, #0
   d5c24:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d5c26:	4b05      	ldr	r3, [pc, #20]	; (d5c3c <_Z22disconnectFromParticlev+0xb0>)
   d5c28:	2001      	movs	r0, #1
   d5c2a:	7018      	strb	r0, [r3, #0]
}
   d5c2c:	b005      	add	sp, #20
   d5c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c32:	bf00      	nop
   d5c34:	2003e50c 	.word	0x2003e50c
   d5c38:	2003e4c0 	.word	0x2003e4c0
   d5c3c:	2003e4f0 	.word	0x2003e4f0

000d5c40 <_Z14fullModemResetv>:
void fullModemReset() {  // 
   d5c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c44:	b085      	sub	sp, #20
        clearSession_(clearSession) {
   d5c46:	f04f 0a00 	mov.w	sl, #0
	Particle.disconnect(); 	                                          // Disconnect from the cloud    
   d5c4a:	a801      	add	r0, sp, #4
   d5c4c:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d5c50:	f8ad a00c 	strh.w	sl, [sp, #12]
   d5c54:	f002 fe17 	bl	d8886 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d5c58:	f7fe fc50 	bl	d44fc <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d5c5c:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d5c60:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d5c62:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5c66:	f7fe fc49 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5c6a:	ebb0 060b 	subs.w	r6, r0, fp
   d5c6e:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5c72:	45b9      	cmp	r9, r7
   d5c74:	bf08      	it	eq
   d5c76:	45b0      	cmpeq	r8, r6
   d5c78:	d305      	bcc.n	d5c86 <_Z14fullModemResetv+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5c7a:	f002 faff 	bl	d827c <spark_cloud_flag_connected>
   d5c7e:	b910      	cbnz	r0, d5c86 <_Z14fullModemResetv+0x46>
            spark_process();
   d5c80:	f002 faec 	bl	d825c <spark_process>
        while (_while() && !_condition()) {
   d5c84:	e7ef      	b.n	d5c66 <_Z14fullModemResetv+0x26>
   d5c86:	f002 faf9 	bl	d827c <spark_cloud_flag_connected>
  Cellular.off();                                                   // Turn off the Cellular modem
   d5c8a:	4821      	ldr	r0, [pc, #132]	; (d5d10 <_Z14fullModemResetv+0xd0>)
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5c8c:	f8df a080 	ldr.w	sl, [pc, #128]	; d5d10 <_Z14fullModemResetv+0xd0>
  Cellular.off();                                                   // Turn off the Cellular modem
   d5c90:	f7fe fb88 	bl	d43a4 <_ZN5spark13CellularClass3offEv>
        const system_tick_t start = millis();
   d5c94:	f7fe fc32 	bl	d44fc <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5c98:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
   d5c9c:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d5c9e:	f247 562f 	movw	r6, #29999	; 0x752f
   d5ca2:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5ca4:	f7fe fc2a 	bl	d44fc <_ZN11SystemClass6millisEv>
   d5ca8:	ebb0 0408 	subs.w	r4, r0, r8
   d5cac:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d5cb0:	42af      	cmp	r7, r5
   d5cb2:	bf08      	it	eq
   d5cb4:	42a6      	cmpeq	r6, r4
   d5cb6:	d306      	bcc.n	d5cc6 <_Z14fullModemResetv+0x86>
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5cb8:	4650      	mov	r0, sl
   d5cba:	f004 fc09 	bl	da4d0 <_ZN5spark12NetworkClass5isOffEv>
   d5cbe:	b910      	cbnz	r0, d5cc6 <_Z14fullModemResetv+0x86>
            spark_process();
   d5cc0:	f002 facc 	bl	d825c <spark_process>
        while (_while() && !_condition()) {
   d5cc4:	e7ee      	b.n	d5ca4 <_Z14fullModemResetv+0x64>
   d5cc6:	4812      	ldr	r0, [pc, #72]	; (d5d10 <_Z14fullModemResetv+0xd0>)
   d5cc8:	f004 fc02 	bl	da4d0 <_ZN5spark12NetworkClass5isOffEv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d5ccc:	4811      	ldr	r0, [pc, #68]	; (d5d14 <_Z14fullModemResetv+0xd4>)
   d5cce:	2100      	movs	r1, #0
   d5cd0:	f000 fe1e 	bl	d6910 <_ZN6AB18056setWDTEi>
        if (valid_) {
   d5cd4:	4b10      	ldr	r3, [pc, #64]	; (d5d18 <_Z14fullModemResetv+0xd8>)
   d5cd6:	7d1a      	ldrb	r2, [r3, #20]
   d5cd8:	b10a      	cbz	r2, d5cde <_Z14fullModemResetv+0x9e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5cda:	2202      	movs	r2, #2
   d5cdc:	721a      	strb	r2, [r3, #8]
    .gpio(userSwitch,CHANGE)
   d5cde:	2200      	movs	r2, #0
   d5ce0:	2104      	movs	r1, #4
   d5ce2:	480d      	ldr	r0, [pc, #52]	; (d5d18 <_Z14fullModemResetv+0xd8>)
   d5ce4:	f7fe fbac 	bl	d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
    .duration(10 * 1000);
   d5ce8:	f242 7110 	movw	r1, #10000	; 0x2710
   d5cec:	f7fe fbdc 	bl	d44a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
  System.sleep(config);                                             // Put the device to sleep device reboots from here   
   d5cf0:	4909      	ldr	r1, [pc, #36]	; (d5d18 <_Z14fullModemResetv+0xd8>)
   d5cf2:	a801      	add	r0, sp, #4
   d5cf4:	f004 ff0a 	bl	dab0c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
   d5cf8:	a801      	add	r0, sp, #4
   d5cfa:	f7fe faf3 	bl	d42e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d5cfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5d02:	4804      	ldr	r0, [pc, #16]	; (d5d14 <_Z14fullModemResetv+0xd4>)
   d5d04:	f000 fe04 	bl	d6910 <_ZN6AB18056setWDTEi>
}
   d5d08:	b005      	add	sp, #20
   d5d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d0e:	bf00      	nop
   d5d10:	2003e50c 	.word	0x2003e50c
   d5d14:	2003e388 	.word	0x2003e388
   d5d18:	2003e3c0 	.word	0x2003e3c0

000d5d1c <loop>:
{
   d5d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d5d20:	4c7f      	ldr	r4, [pc, #508]	; (d5f20 <loop+0x204>)
   d5d22:	f8df 8254 	ldr.w	r8, [pc, #596]	; d5f78 <loop+0x25c>
   d5d26:	7823      	ldrb	r3, [r4, #0]
   d5d28:	4f7e      	ldr	r7, [pc, #504]	; (d5f24 <loop+0x208>)
   d5d2a:	4e7f      	ldr	r6, [pc, #508]	; (d5f28 <loop+0x20c>)
   d5d2c:	3b01      	subs	r3, #1
{
   d5d2e:	b097      	sub	sp, #92	; 0x5c
   d5d30:	2b06      	cmp	r3, #6
   d5d32:	f200 80a5 	bhi.w	d5e80 <loop+0x164>
   d5d36:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5d3a:	02d9      	.short	0x02d9
   d5d3c:	003a0007 	.word	0x003a0007
   d5d40:	01b80121 	.word	0x01b80121
   d5d44:	02a9023a 	.word	0x02a9023a
    if (state != oldState) publishStateTransition();
   d5d48:	4b78      	ldr	r3, [pc, #480]	; (d5f2c <loop+0x210>)
   d5d4a:	781b      	ldrb	r3, [r3, #0]
   d5d4c:	2b02      	cmp	r3, #2
   d5d4e:	d001      	beq.n	d5d54 <loop+0x38>
   d5d50:	f7ff f996 	bl	d5080 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d5d54:	4d76      	ldr	r5, [pc, #472]	; (d5f30 <loop+0x214>)
   d5d56:	79ab      	ldrb	r3, [r5, #6]
   d5d58:	b153      	cbz	r3, d5d70 <loop+0x54>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5d5a:	f002 f833 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
   d5d5e:	4b75      	ldr	r3, [pc, #468]	; (d5f34 <loop+0x218>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	1ac0      	subs	r0, r0, r3
   d5d64:	4b74      	ldr	r3, [pc, #464]	; (d5f38 <loop+0x21c>)
   d5d66:	681b      	ldr	r3, [r3, #0]
   d5d68:	4298      	cmp	r0, r3
   d5d6a:	bf84      	itt	hi
   d5d6c:	2304      	movhi	r3, #4
   d5d6e:	7023      	strbhi	r3, [r4, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = REPORTING_STATE;                                  // We want to report on the hour but not after bedtime
   d5d70:	f005 f930 	bl	dafd4 <_ZN9TimeClass4hourEv>
   d5d74:	4b71      	ldr	r3, [pc, #452]	; (d5f3c <loop+0x220>)
   d5d76:	4681      	mov	r9, r0
   d5d78:	2100      	movs	r1, #0
   d5d7a:	6818      	ldr	r0, [r3, #0]
   d5d7c:	f004 ff8c 	bl	dac98 <_ZN9TimeClass4hourEx>
   d5d80:	4581      	cmp	r9, r0
   d5d82:	bf1c      	itt	ne
   d5d84:	2306      	movne	r3, #6
   d5d86:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5d88:	f005 f924 	bl	dafd4 <_ZN9TimeClass4hourEv>
   d5d8c:	7f6b      	ldrb	r3, [r5, #29]
   d5d8e:	4298      	cmp	r0, r3
   d5d90:	db07      	blt.n	d5da2 <loop+0x86>
   d5d92:	2303      	movs	r3, #3
   d5d94:	7023      	strb	r3, [r4, #0]
    if (particleConnectionNeeded) state = CONNECTING_STATE;                                                   // Someone raised the connection neeeded flag - will return to IDLE once attempt is completed
   d5d96:	4b6a      	ldr	r3, [pc, #424]	; (d5f40 <loop+0x224>)
   d5d98:	781b      	ldrb	r3, [r3, #0]
   d5d9a:	2b00      	cmp	r3, #0
   d5d9c:	d070      	beq.n	d5e80 <loop+0x164>
      state = CONNECTING_STATE;                                       // Will send us to connecting state - and it will send us back here                                             
   d5d9e:	2305      	movs	r3, #5
   d5da0:	e012      	b.n	d5dc8 <loop+0xac>
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5da2:	f005 f917 	bl	dafd4 <_ZN9TimeClass4hourEv>
   d5da6:	7f2b      	ldrb	r3, [r5, #28]
   d5da8:	4298      	cmp	r0, r3
   d5daa:	dbf2      	blt.n	d5d92 <loop+0x76>
   d5dac:	e7f3      	b.n	d5d96 <loop+0x7a>
    if (state != oldState) publishStateTransition();
   d5dae:	4b5f      	ldr	r3, [pc, #380]	; (d5f2c <loop+0x210>)
   d5db0:	781b      	ldrb	r3, [r3, #0]
   d5db2:	2b03      	cmp	r3, #3
   d5db4:	d001      	beq.n	d5dba <loop+0x9e>
   d5db6:	f7ff f963 	bl	d5080 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d5dba:	2002      	movs	r0, #2
   d5dbc:	f003 f938 	bl	d9030 <_Z15detachInterruptt>
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
   d5dc0:	4b60      	ldr	r3, [pc, #384]	; (d5f44 <loop+0x228>)
   d5dc2:	681b      	ldr	r3, [r3, #0]
   d5dc4:	b113      	cbz	r3, d5dcc <loop+0xb0>
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d5dc6:	2306      	movs	r3, #6
      state = ERROR_STATE;                                            // Response timed out
   d5dc8:	7023      	strb	r3, [r4, #0]
   d5dca:	e059      	b.n	d5e80 <loop+0x164>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5dcc:	4b58      	ldr	r3, [pc, #352]	; (d5f30 <loop+0x214>)
   d5dce:	78da      	ldrb	r2, [r3, #3]
   d5dd0:	4699      	mov	r9, r3
   d5dd2:	b10a      	cbz	r2, d5dd8 <loop+0xbc>
   d5dd4:	f7ff feda 	bl	d5b8c <_Z22disconnectFromParticlev>
    bool stopWDT() { return setWDT(0); };
   d5dd8:	2100      	movs	r1, #0
   d5dda:	485b      	ldr	r0, [pc, #364]	; (d5f48 <loop+0x22c>)
   d5ddc:	f000 fd98 	bl	d6910 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d5de0:	f005 f8e7 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d5de4:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d5de8:	fb90 f3f5 	sdiv	r3, r0, r5
   d5dec:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d5df0:	4b56      	ldr	r3, [pc, #344]	; (d5f4c <loop+0x230>)
   d5df2:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d5df6:	7d1a      	ldrb	r2, [r3, #20]
   d5df8:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d5dfc:	bfa8      	it	ge
   d5dfe:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d5e02:	b10a      	cbz	r2, d5e08 <loop+0xec>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5e04:	2202      	movs	r2, #2
   d5e06:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5e08:	2200      	movs	r2, #0
   d5e0a:	2104      	movs	r1, #4
   d5e0c:	484f      	ldr	r0, [pc, #316]	; (d5f4c <loop+0x230>)
   d5e0e:	f7fe fb17 	bl	d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5e12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5e16:	4369      	muls	r1, r5
   d5e18:	f7fe fb46 	bl	d44a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d5e1c:	494b      	ldr	r1, [pc, #300]	; (d5f4c <loop+0x230>)
   d5e1e:	a803      	add	r0, sp, #12
   d5e20:	f004 fe74 	bl	dab0c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d5e24:	4848      	ldr	r0, [pc, #288]	; (d5f48 <loop+0x22c>)
   d5e26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5e2a:	f000 fd71 	bl	d6910 <_ZN6AB18056setWDTEi>
    if (result.wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {   // Awoken by GPIO pin
   d5e2e:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5e30:	b14b      	cbz	r3, d5e46 <loop+0x12a>
   d5e32:	889a      	ldrh	r2, [r3, #4]
   d5e34:	2a01      	cmp	r2, #1
   d5e36:	d106      	bne.n	d5e46 <loop+0x12a>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d5e38:	899b      	ldrh	r3, [r3, #12]
      if (result.wakeupPin() == intPin) {                              // Executions starts here after sleep - time or sensor interrupt?
   d5e3a:	2b02      	cmp	r3, #2
   d5e3c:	d15e      	bne.n	d5efc <loop+0x1e0>
   d5e3e:	f001 ffc1 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
        stayAwakeTimeStamp = millis();
   d5e42:	4b3c      	ldr	r3, [pc, #240]	; (d5f34 <loop+0x218>)
   d5e44:	6018      	str	r0, [r3, #0]
    if (Time.hour() < sysStatus.closeTime && Time.hour() >= sysStatus.openTime) { // We might wake up and find it is opening time.  Park is open let's get ready for the day
   d5e46:	f005 f8c5 	bl	dafd4 <_ZN9TimeClass4hourEv>
   d5e4a:	f899 301d 	ldrb.w	r3, [r9, #29]
   d5e4e:	4298      	cmp	r0, r3
   d5e50:	da11      	bge.n	d5e76 <loop+0x15a>
   d5e52:	f005 f8bf 	bl	dafd4 <_ZN9TimeClass4hourEv>
   d5e56:	f899 301c 	ldrb.w	r3, [r9, #28]
   d5e5a:	4298      	cmp	r0, r3
   d5e5c:	db0b      	blt.n	d5e76 <loop+0x15a>
      attachInterrupt(intPin, sensorISR, RISING);                      // Pressure Sensor interrupt from low to high
   d5e5e:	2300      	movs	r3, #0
   d5e60:	9300      	str	r3, [sp, #0]
   d5e62:	2201      	movs	r2, #1
   d5e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5e68:	4939      	ldr	r1, [pc, #228]	; (d5f50 <loop+0x234>)
   d5e6a:	2002      	movs	r0, #2
   d5e6c:	f003 f8b6 	bl	d8fdc <_Z15attachInterrupttPFvvE13InterruptModeah>
      stayAwake = stayAwakeLong;                                       // Keeps Boron awake after deep sleep - may not be needed
   d5e70:	4b31      	ldr	r3, [pc, #196]	; (d5f38 <loop+0x21c>)
   d5e72:	4a38      	ldr	r2, [pc, #224]	; (d5f54 <loop+0x238>)
   d5e74:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                                // Head back to the idle state to see what to do next
   d5e76:	2302      	movs	r3, #2
   d5e78:	7023      	strb	r3, [r4, #0]
        freeWakeupSourceMemory();
   d5e7a:	a803      	add	r0, sp, #12
   d5e7c:	f7fe fa32 	bl	d42e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
  if (sensorDetect) {
   d5e80:	f898 3000 	ldrb.w	r3, [r8]
   d5e84:	b10b      	cbz	r3, d5e8a <loop+0x16e>
    recordCount();
   d5e86:	f7fe fdb3 	bl	d49f0 <_Z11recordCountv>
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d5e8a:	482f      	ldr	r0, [pc, #188]	; (d5f48 <loop+0x22c>)
   d5e8c:	f001 f938 	bl	d7100 <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d5e90:	783b      	ldrb	r3, [r7, #0]
   d5e92:	b133      	cbz	r3, d5ea2 <loop+0x186>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d5e94:	4a26      	ldr	r2, [pc, #152]	; (d5f30 <loop+0x214>)
   d5e96:	4830      	ldr	r0, [pc, #192]	; (d5f58 <loop+0x23c>)
   d5e98:	2101      	movs	r1, #1
   d5e9a:	f7ff fa1a 	bl	d52d2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d5e9e:	2300      	movs	r3, #0
   d5ea0:	703b      	strb	r3, [r7, #0]
  if (currentCountsWriteNeeded) {
   d5ea2:	7833      	ldrb	r3, [r6, #0]
   d5ea4:	b13b      	cbz	r3, d5eb6 <loop+0x19a>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5ea6:	2324      	movs	r3, #36	; 0x24
   d5ea8:	4a26      	ldr	r2, [pc, #152]	; (d5f44 <loop+0x228>)
   d5eaa:	482b      	ldr	r0, [pc, #172]	; (d5f58 <loop+0x23c>)
   d5eac:	2150      	movs	r1, #80	; 0x50
   d5eae:	f001 fa22 	bl	d72f6 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d5eb2:	2300      	movs	r3, #0
   d5eb4:	7033      	strb	r3, [r6, #0]
  if (outOfMemory >= 0) {                                               // In this function we are going to reset the system if there is an out of memory error
   d5eb6:	4b29      	ldr	r3, [pc, #164]	; (d5f5c <loop+0x240>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	2b00      	cmp	r3, #0
   d5ebc:	db1b      	blt.n	d5ef6 <loop+0x1da>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d5ebe:	4a28      	ldr	r2, [pc, #160]	; (d5f60 <loop+0x244>)
   d5ec0:	2140      	movs	r1, #64	; 0x40
   d5ec2:	a806      	add	r0, sp, #24
   d5ec4:	f002 faaa 	bl	d841c <snprintf>
    Log.info(message);
   d5ec8:	a906      	add	r1, sp, #24
   d5eca:	4826      	ldr	r0, [pc, #152]	; (d5f64 <loop+0x248>)
   d5ecc:	f7fe fb3b 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d5ed0:	2064      	movs	r0, #100	; 0x64
   d5ed2:	f002 faf7 	bl	d84c4 <delay>
        val_(0) {
   d5ed6:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);                     // Publish to the console - this is important so we will not filter on verboseMod
   d5ed8:	f88d 3000 	strb.w	r3, [sp]
   d5edc:	4b22      	ldr	r3, [pc, #136]	; (d5f68 <loop+0x24c>)
   d5ede:	4923      	ldr	r1, [pc, #140]	; (d5f6c <loop+0x250>)
   d5ee0:	781b      	ldrb	r3, [r3, #0]
   d5ee2:	4823      	ldr	r0, [pc, #140]	; (d5f70 <loop+0x254>)
   d5ee4:	aa06      	add	r2, sp, #24
   d5ee6:	f7fe fb5c 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d5eea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5eee:	f002 fae9 	bl	d84c4 <delay>
    System.reset();                                                     // An out of memory condition occurred - reset device.
   d5ef2:	f004 fe07 	bl	dab04 <_ZN11SystemClass5resetEv>
}
   d5ef6:	b017      	add	sp, #92	; 0x5c
   d5ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (result.wakeupPin() == userSwitch) {
   d5efc:	2b04      	cmp	r3, #4
   d5efe:	d1a2      	bne.n	d5e46 <loop+0x12a>
        setLowPowerMode("0");
   d5f00:	491c      	ldr	r1, [pc, #112]	; (d5f74 <loop+0x258>)
   d5f02:	a806      	add	r0, sp, #24
   d5f04:	f004 fd0f 	bl	da926 <_ZN6StringC1EPKc>
   d5f08:	a806      	add	r0, sp, #24
   d5f0a:	f7fe fd09 	bl	d4920 <_Z15setLowPowerMode6String>
   d5f0e:	a806      	add	r0, sp, #24
   d5f10:	f004 fcbe 	bl	da890 <_ZN6StringD1Ev>
        sysStatus.openTime = 0;
   d5f14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d5f18:	f8a9 301c 	strh.w	r3, [r9, #28]
   d5f1c:	e793      	b.n	d5e46 <loop+0x12a>
   d5f1e:	bf00      	nop
   d5f20:	2003e4b5 	.word	0x2003e4b5
   d5f24:	2003e4f0 	.word	0x2003e4f0
   d5f28:	2003e418 	.word	0x2003e418
   d5f2c:	2003e474 	.word	0x2003e474
   d5f30:	2003e4c0 	.word	0x2003e4c0
   d5f34:	2003e4bc 	.word	0x2003e4bc
   d5f38:	2003e4b8 	.word	0x2003e4b8
   d5f3c:	2003e43c 	.word	0x2003e43c
   d5f40:	2003e475 	.word	0x2003e475
   d5f44:	2003e3f4 	.word	0x2003e3f4
   d5f48:	2003e388 	.word	0x2003e388
   d5f4c:	2003e3c0 	.word	0x2003e3c0
   d5f50:	000d4155 	.word	0x000d4155
   d5f54:	00015f90 	.word	0x00015f90
   d5f58:	2003e424 	.word	0x2003e424
   d5f5c:	2003e228 	.word	0x2003e228
   d5f60:	000dc800 	.word	0x000dc800
   d5f64:	2003e5e0 	.word	0x2003e5e0
   d5f68:	2003e378 	.word	0x2003e378
   d5f6c:	000dc81f 	.word	0x000dc81f
   d5f70:	2003e478 	.word	0x2003e478
   d5f74:	000dc576 	.word	0x000dc576
   d5f78:	2003e4b4 	.word	0x2003e4b4
    if (state != oldState) publishStateTransition();
   d5f7c:	4ba9      	ldr	r3, [pc, #676]	; (d6224 <loop+0x508>)
   d5f7e:	781b      	ldrb	r3, [r3, #0]
   d5f80:	2b04      	cmp	r3, #4
   d5f82:	d001      	beq.n	d5f88 <loop+0x26c>
   d5f84:	f7ff f87c 	bl	d5080 <_Z22publishStateTransitionv>
    if (sensorDetect || countSignalTimer.isActive()) break;           // Don't nap until we are done with event
   d5f88:	f898 3000 	ldrb.w	r3, [r8]
   d5f8c:	2b00      	cmp	r3, #0
   d5f8e:	f47f af77 	bne.w	d5e80 <loop+0x164>
   d5f92:	48a5      	ldr	r0, [pc, #660]	; (d6228 <loop+0x50c>)
   d5f94:	f7fe facd 	bl	d4532 <_ZNK5Timer8isActiveEv>
   d5f98:	2800      	cmp	r0, #0
   d5f9a:	f47f af71 	bne.w	d5e80 <loop+0x164>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d5f9e:	4ba3      	ldr	r3, [pc, #652]	; (d622c <loop+0x510>)
   d5fa0:	78db      	ldrb	r3, [r3, #3]
   d5fa2:	b10b      	cbz	r3, d5fa8 <loop+0x28c>
   d5fa4:	f7ff fdf2 	bl	d5b8c <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                 // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d5fa8:	4ba1      	ldr	r3, [pc, #644]	; (d6230 <loop+0x514>)
   d5faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5fae:	601a      	str	r2, [r3, #0]
        if (valid_) {
   d5fb0:	4ba0      	ldr	r3, [pc, #640]	; (d6234 <loop+0x518>)
   d5fb2:	7d19      	ldrb	r1, [r3, #20]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d5fb4:	2202      	movs	r2, #2
   d5fb6:	7022      	strb	r2, [r4, #0]
   d5fb8:	b101      	cbz	r1, d5fbc <loop+0x2a0>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5fba:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5fbc:	2200      	movs	r2, #0
   d5fbe:	2104      	movs	r1, #4
   d5fc0:	489c      	ldr	r0, [pc, #624]	; (d6234 <loop+0x518>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d5fc2:	4d9d      	ldr	r5, [pc, #628]	; (d6238 <loop+0x51c>)
   d5fc4:	4c9d      	ldr	r4, [pc, #628]	; (d623c <loop+0x520>)
   d5fc6:	f7fe fa3b 	bl	d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .gpio(intPin,RISING)
   d5fca:	2201      	movs	r2, #1
   d5fcc:	2102      	movs	r1, #2
   d5fce:	f7fe fa37 	bl	d4440 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(60 * 1000);                                            // Only nap for one minute so we can check for a stuck interrupt
   d5fd2:	f64e 2160 	movw	r1, #60000	; 0xea60
   d5fd6:	f7fe fa67 	bl	d44a8 <_ZN8particle24SystemSleepConfiguration8durationEm>
    bool stopWDT() { return setWDT(0); };
   d5fda:	4899      	ldr	r0, [pc, #612]	; (d6240 <loop+0x524>)
   d5fdc:	2100      	movs	r1, #0
   d5fde:	f000 fc97 	bl	d6910 <_ZN6AB18056setWDTEi>
   d5fe2:	782b      	ldrb	r3, [r5, #0]
   d5fe4:	f3bf 8f5b 	dmb	ish
   d5fe8:	f013 0f01 	tst.w	r3, #1
   d5fec:	d109      	bne.n	d6002 <loop+0x2e6>
   d5fee:	4628      	mov	r0, r5
   d5ff0:	f7fe f862 	bl	d40b8 <__cxa_guard_acquire>
   d5ff4:	b128      	cbz	r0, d6002 <loop+0x2e6>
   d5ff6:	f001 ff0d 	bl	d7e14 <HAL_Pin_Map>
   d5ffa:	6020      	str	r0, [r4, #0]
   d5ffc:	4628      	mov	r0, r5
   d5ffe:	f7fe f860 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d6002:	6823      	ldr	r3, [r4, #0]
   d6004:	f893 9020 	ldrb.w	r9, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d6008:	782b      	ldrb	r3, [r5, #0]
   d600a:	f3bf 8f5b 	dmb	ish
   d600e:	07d8      	lsls	r0, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d6010:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d6014:	d409      	bmi.n	d602a <loop+0x30e>
   d6016:	4888      	ldr	r0, [pc, #544]	; (d6238 <loop+0x51c>)
   d6018:	f7fe f84e 	bl	d40b8 <__cxa_guard_acquire>
   d601c:	b128      	cbz	r0, d602a <loop+0x30e>
   d601e:	f001 fef9 	bl	d7e14 <HAL_Pin_Map>
   d6022:	6020      	str	r0, [r4, #0]
   d6024:	4884      	ldr	r0, [pc, #528]	; (d6238 <loop+0x51c>)
   d6026:	f7fe f84c 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d602a:	6823      	ldr	r3, [r4, #0]
   d602c:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   d6030:	f004 041f 	and.w	r4, r4, #31
   d6034:	ea44 0409 	orr.w	r4, r4, r9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d6038:	a806      	add	r0, sp, #24
   d603a:	9406      	str	r4, [sp, #24]
   d603c:	f7fe f872 	bl	d4124 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d6040:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d6044:	9406      	str	r4, [sp, #24]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d6046:	a806      	add	r0, sp, #24
   d6048:	f7fe f86c 	bl	d4124 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d604c:	9a06      	ldr	r2, [sp, #24]
    return p_reg->IN;
   d604e:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d6052:	40d3      	lsrs	r3, r2
    if (pinReadFast(intPin)) recordCount();
   d6054:	07d9      	lsls	r1, r3, #31
   d6056:	d501      	bpl.n	d605c <loop+0x340>
   d6058:	f7fe fcca 	bl	d49f0 <_Z11recordCountv>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d605c:	4975      	ldr	r1, [pc, #468]	; (d6234 <loop+0x518>)
   d605e:	a803      	add	r0, sp, #12
   d6060:	f004 fd54 	bl	dab0c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d6064:	4876      	ldr	r0, [pc, #472]	; (d6240 <loop+0x524>)
   d6066:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d606a:	f000 fc51 	bl	d6910 <_ZN6AB18056setWDTEi>
    if (result.wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {   // Awoken by GPIO pin
   d606e:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d6070:	2b00      	cmp	r3, #0
   d6072:	f43f af02 	beq.w	d5e7a <loop+0x15e>
   d6076:	889a      	ldrh	r2, [r3, #4]
   d6078:	2a01      	cmp	r2, #1
   d607a:	f47f aefe 	bne.w	d5e7a <loop+0x15e>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d607e:	899b      	ldrh	r3, [r3, #12]
      if (result.wakeupPin() == intPin) {                              // Executions starts here after sleep - time or sensor interrupt?
   d6080:	2b02      	cmp	r3, #2
   d6082:	d104      	bne.n	d608e <loop+0x372>
   d6084:	f001 fe9e 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
        stayAwakeTimeStamp = millis();
   d6088:	4b6e      	ldr	r3, [pc, #440]	; (d6244 <loop+0x528>)
   d608a:	6018      	str	r0, [r3, #0]
   d608c:	e6f5      	b.n	d5e7a <loop+0x15e>
      else if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d608e:	2b04      	cmp	r3, #4
   d6090:	f47f aef3 	bne.w	d5e7a <loop+0x15e>
   d6094:	496c      	ldr	r1, [pc, #432]	; (d6248 <loop+0x52c>)
   d6096:	a806      	add	r0, sp, #24
   d6098:	f004 fc45 	bl	da926 <_ZN6StringC1EPKc>
   d609c:	a806      	add	r0, sp, #24
   d609e:	f7fe fc3f 	bl	d4920 <_Z15setLowPowerMode6String>
   d60a2:	a806      	add	r0, sp, #24
   d60a4:	f004 fbf4 	bl	da890 <_ZN6StringD1Ev>
   d60a8:	e6e7      	b.n	d5e7a <loop+0x15e>
    if (state != oldState) {
   d60aa:	4b5e      	ldr	r3, [pc, #376]	; (d6224 <loop+0x508>)
   d60ac:	781b      	ldrb	r3, [r3, #0]
   d60ae:	2b05      	cmp	r3, #5
   d60b0:	d013      	beq.n	d60da <loop+0x3be>
      if (oldState == REPORTING_STATE) returnToReporting = true;
   d60b2:	1f9a      	subs	r2, r3, #6
   d60b4:	4253      	negs	r3, r2
   d60b6:	4153      	adcs	r3, r2
   d60b8:	4a64      	ldr	r2, [pc, #400]	; (d624c <loop+0x530>)
   d60ba:	7013      	strb	r3, [r2, #0]
      publishStateTransition();
   d60bc:	f7fe ffe0 	bl	d5080 <_Z22publishStateTransitionv>
      connectionStartTime = Time.now();                 // Start the clock first time we enter the state
   d60c0:	f004 ff77 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d60c4:	4b62      	ldr	r3, [pc, #392]	; (d6250 <loop+0x534>)
   d60c6:	6018      	str	r0, [r3, #0]
        network_on(*this, 0, 0, NULL);
   d60c8:	4862      	ldr	r0, [pc, #392]	; (d6254 <loop+0x538>)
   d60ca:	2300      	movs	r3, #0
   d60cc:	6840      	ldr	r0, [r0, #4]
   d60ce:	461a      	mov	r2, r3
   d60d0:	4619      	mov	r1, r3
   d60d2:	f002 f943 	bl	d835c <network_on>
        spark_cloud_flag_connect();
   d60d6:	f002 f8c9 	bl	d826c <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d60da:	f002 f8cf 	bl	d827c <spark_cloud_flag_connected>
   d60de:	4d5e      	ldr	r5, [pc, #376]	; (d6258 <loop+0x53c>)
    if (Particle.connected()) {
   d60e0:	4681      	mov	r9, r0
   d60e2:	2800      	cmp	r0, #0
   d60e4:	d042      	beq.n	d616c <loop+0x450>
      sysStatus.connectedStatus = true;
   d60e6:	f8df 9144 	ldr.w	r9, [pc, #324]	; d622c <loop+0x510>
      particleConnectionNeeded = false;                               // Connected so we don't need this flag
   d60ea:	2300      	movs	r3, #0
   d60ec:	702b      	strb	r3, [r5, #0]
      sysStatus.connectedStatus = true;
   d60ee:	2301      	movs	r3, #1
   d60f0:	f889 3003 	strb.w	r3, [r9, #3]
      sysStatus.lastConnection = Time.now();                          // This is the last time we attempted to connect
   d60f4:	f004 ff5d 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d60f8:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    if (!particleConnectionNeeded) {                                  // Whether the connection was successful or not, we will collect and publish metrics
   d60fc:	782b      	ldrb	r3, [r5, #0]
   d60fe:	2b00      	cmp	r3, #0
   d6100:	f47f aebe 	bne.w	d5e80 <loop+0x164>
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d6104:	f004 ff55 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d6108:	4b51      	ldr	r3, [pc, #324]	; (d6250 <loop+0x534>)
   d610a:	4d48      	ldr	r5, [pc, #288]	; (d622c <loop+0x510>)
   d610c:	681b      	ldr	r3, [r3, #0]
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d610e:	4a53      	ldr	r2, [pc, #332]	; (d625c <loop+0x540>)
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d6110:	1ac0      	subs	r0, r0, r3
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d6112:	4b53      	ldr	r3, [pc, #332]	; (d6260 <loop+0x544>)
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d6114:	8b91      	ldrh	r1, [r2, #28]
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d6116:	681b      	ldr	r3, [r3, #0]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d6118:	b280      	uxth	r0, r0
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d611a:	4298      	cmp	r0, r3
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d611c:	8528      	strh	r0, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d611e:	bf88      	it	hi
   d6120:	852b      	strhhi	r3, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d6122:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   d6124:	4299      	cmp	r1, r3
   d6126:	bf38      	it	cc
   d6128:	8393      	strhcc	r3, [r2, #28]
      snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d612a:	2120      	movs	r1, #32
   d612c:	4a4d      	ldr	r2, [pc, #308]	; (d6264 <loop+0x548>)
   d612e:	a806      	add	r0, sp, #24
   d6130:	f002 f974 	bl	d841c <snprintf>
      Log.info(connectionStr);
   d6134:	484c      	ldr	r0, [pc, #304]	; (d6268 <loop+0x54c>)
   d6136:	a906      	add	r1, sp, #24
   d6138:	f7fe fa05 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
      if (sysStatus.verboseMode) publishQueue.publish("Cellular",connectionStr,PRIVATE);
   d613c:	792b      	ldrb	r3, [r5, #4]
   d613e:	b14b      	cbz	r3, d6154 <loop+0x438>
   d6140:	2300      	movs	r3, #0
   d6142:	f88d 3000 	strb.w	r3, [sp]
   d6146:	4b49      	ldr	r3, [pc, #292]	; (d626c <loop+0x550>)
   d6148:	4949      	ldr	r1, [pc, #292]	; (d6270 <loop+0x554>)
   d614a:	781b      	ldrb	r3, [r3, #0]
   d614c:	4849      	ldr	r0, [pc, #292]	; (d6274 <loop+0x558>)
   d614e:	aa06      	add	r2, sp, #24
   d6150:	f7fe fa27 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      systemStatusWriteNeeded = true;
   d6154:	2301      	movs	r3, #1
   d6156:	703b      	strb	r3, [r7, #0]
      currentCountsWriteNeeded = true;
   d6158:	7033      	strb	r3, [r6, #0]
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d615a:	78eb      	ldrb	r3, [r5, #3]
   d615c:	b123      	cbz	r3, d6168 <loop+0x44c>
   d615e:	4b3b      	ldr	r3, [pc, #236]	; (d624c <loop+0x530>)
   d6160:	781b      	ldrb	r3, [r3, #0]
   d6162:	2b00      	cmp	r3, #0
   d6164:	f47f ae2f 	bne.w	d5dc6 <loop+0xaa>
      state = IDLE_STATE;
   d6168:	2302      	movs	r3, #2
   d616a:	e62d      	b.n	d5dc8 <loop+0xac>
    else if ((Time.now() - connectionStartTime) > connectMaxTimeSec) {
   d616c:	f004 ff21 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d6170:	4b37      	ldr	r3, [pc, #220]	; (d6250 <loop+0x534>)
   d6172:	4a3b      	ldr	r2, [pc, #236]	; (d6260 <loop+0x544>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	6812      	ldr	r2, [r2, #0]
   d6178:	1ac3      	subs	r3, r0, r3
   d617a:	4293      	cmp	r3, r2
   d617c:	d9be      	bls.n	d60fc <loop+0x3e0>
      particleConnectionNeeded = false;                               // Timed out so we will give up until the next hour
   d617e:	f885 9000 	strb.w	r9, [r5]
      if ((Time.now() - sysStatus.lastConnection) > 7200) {             // Only sends to ERROR_STATE if it has been over 2 hours
   d6182:	f004 ff16 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d6186:	4a29      	ldr	r2, [pc, #164]	; (d622c <loop+0x510>)
   d6188:	6a53      	ldr	r3, [r2, #36]	; 0x24
   d618a:	1ac3      	subs	r3, r0, r3
   d618c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
   d6190:	d906      	bls.n	d61a0 <loop+0x484>
        state = ERROR_STATE;     
   d6192:	2301      	movs	r3, #1
   d6194:	7023      	strb	r3, [r4, #0]
   d6196:	f001 fe15 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   d619a:	4b37      	ldr	r3, [pc, #220]	; (d6278 <loop+0x55c>)
   d619c:	6018      	str	r0, [r3, #0]
        break;
   d619e:	e66f      	b.n	d5e80 <loop+0x164>
      Log.info("cloud connection unsuccessful");
   d61a0:	4936      	ldr	r1, [pc, #216]	; (d627c <loop+0x560>)
   d61a2:	4831      	ldr	r0, [pc, #196]	; (d6268 <loop+0x54c>)
      sysStatus.connectedStatus = false;
   d61a4:	f882 9003 	strb.w	r9, [r2, #3]
      Log.info("cloud connection unsuccessful");
   d61a8:	f7fe f9cd 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d61ac:	e7a6      	b.n	d60fc <loop+0x3e0>
    if (state != oldState) publishStateTransition();
   d61ae:	4b1d      	ldr	r3, [pc, #116]	; (d6224 <loop+0x508>)
   d61b0:	781b      	ldrb	r3, [r3, #0]
   d61b2:	2b06      	cmp	r3, #6
   d61b4:	d001      	beq.n	d61ba <loop+0x49e>
   d61b6:	f7fe ff63 	bl	d5080 <_Z22publishStateTransitionv>
    lastReportedTime = Time.now();                                    // We are only going to try once
   d61ba:	f004 fefa 	bl	dafb2 <_ZN9TimeClass3nowEv>
    if (!sysStatus.connectedStatus) {                                 // Asking us to report but not connected
   d61be:	4d1b      	ldr	r5, [pc, #108]	; (d622c <loop+0x510>)
    lastReportedTime = Time.now();                                    // We are only going to try once
   d61c0:	4b2f      	ldr	r3, [pc, #188]	; (d6280 <loop+0x564>)
   d61c2:	6018      	str	r0, [r3, #0]
    if (!sysStatus.connectedStatus) {                                 // Asking us to report but not connected
   d61c4:	78eb      	ldrb	r3, [r5, #3]
   d61c6:	46a9      	mov	r9, r5
   d61c8:	b91b      	cbnz	r3, d61d2 <loop+0x4b6>
      particleConnectionNeeded = true;                                // Set the flag to connect us to Particle
   d61ca:	4b23      	ldr	r3, [pc, #140]	; (d6258 <loop+0x53c>)
   d61cc:	2201      	movs	r2, #1
   d61ce:	701a      	strb	r2, [r3, #0]
   d61d0:	e5e5      	b.n	d5d9e <loop+0x82>
    if (!sysStatus.lowPowerMode) takeMeasurements();                  // Do this here as device not in lowPowerMode will not meausre coming out of sleep / napping
   d61d2:	79ab      	ldrb	r3, [r5, #6]
   d61d4:	b1b3      	cbz	r3, d6204 <loop+0x4e8>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house and publish to Google Sheets
   d61d6:	f004 fefd 	bl	dafd4 <_ZN9TimeClass4hourEv>
   d61da:	f899 301c 	ldrb.w	r3, [r9, #28]
   d61de:	4298      	cmp	r0, r3
   d61e0:	d11d      	bne.n	d621e <loop+0x502>
   d61e2:	f7fe ff8b 	bl	d50fc <_Z12dailyCleanupv>
      if (Time.hour() == sysStatus.openTime && sysStatus.openTime==0) sendEvent();    // Need this so we can get 24 hour reporting for non-sleeping devices
   d61e6:	f004 fef5 	bl	dafd4 <_ZN9TimeClass4hourEv>
   d61ea:	f899 301c 	ldrb.w	r3, [r9, #28]
   d61ee:	4298      	cmp	r0, r3
   d61f0:	d102      	bne.n	d61f8 <loop+0x4dc>
   d61f2:	b908      	cbnz	r0, d61f8 <loop+0x4dc>
   d61f4:	f7fe fcbe 	bl	d4b74 <_Z9sendEventv>
   d61f8:	f001 fde4 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();                                    // This is for a webHook response timeout
   d61fc:	4b21      	ldr	r3, [pc, #132]	; (d6284 <loop+0x568>)
   d61fe:	6018      	str	r0, [r3, #0]
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d6200:	2307      	movs	r3, #7
   d6202:	e5e1      	b.n	d5dc8 <loop+0xac>
    if (!sysStatus.lowPowerMode) takeMeasurements();                  // Do this here as device not in lowPowerMode will not meausre coming out of sleep / napping
   d6204:	f7fe fff6 	bl	d51f4 <_Z16takeMeasurementsv>
    if (sysStatus.connectedStatus) {
   d6208:	78eb      	ldrb	r3, [r5, #3]
   d620a:	2b00      	cmp	r3, #0
   d620c:	d1e3      	bne.n	d61d6 <loop+0x4ba>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d620e:	4b08      	ldr	r3, [pc, #32]	; (d6230 <loop+0x514>)
   d6210:	4a1d      	ldr	r2, [pc, #116]	; (d6288 <loop+0x56c>)
   d6212:	601a      	str	r2, [r3, #0]
   d6214:	f001 fdd6 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d6218:	4b0a      	ldr	r3, [pc, #40]	; (d6244 <loop+0x528>)
   d621a:	6018      	str	r0, [r3, #0]
   d621c:	e7a4      	b.n	d6168 <loop+0x44c>
      else sendEvent();                                               // Send data to Ubidots but not at opening time as there is nothing to publish
   d621e:	f7fe fca9 	bl	d4b74 <_Z9sendEventv>
   d6222:	e7e0      	b.n	d61e6 <loop+0x4ca>
   d6224:	2003e474 	.word	0x2003e474
   d6228:	2003e3d8 	.word	0x2003e3d8
   d622c:	2003e4c0 	.word	0x2003e4c0
   d6230:	2003e4b8 	.word	0x2003e4b8
   d6234:	2003e3c0 	.word	0x2003e3c0
   d6238:	2003e324 	.word	0x2003e324
   d623c:	2003e328 	.word	0x2003e328
   d6240:	2003e388 	.word	0x2003e388
   d6244:	2003e4bc 	.word	0x2003e4bc
   d6248:	000dc576 	.word	0x000dc576
   d624c:	2003e381 	.word	0x2003e381
   d6250:	2003e384 	.word	0x2003e384
   d6254:	2003e50c 	.word	0x2003e50c
   d6258:	2003e475 	.word	0x2003e475
   d625c:	2003e3f4 	.word	0x2003e3f4
   d6260:	2003e20c 	.word	0x2003e20c
   d6264:	000dc775 	.word	0x000dc775
   d6268:	2003e5e0 	.word	0x2003e5e0
   d626c:	2003e378 	.word	0x2003e378
   d6270:	000dc78a 	.word	0x000dc78a
   d6274:	2003e478 	.word	0x2003e478
   d6278:	2003e4b0 	.word	0x2003e4b0
   d627c:	000dc757 	.word	0x000dc757
   d6280:	2003e43c 	.word	0x2003e43c
   d6284:	2003e4f4 	.word	0x2003e4f4
   d6288:	00015f90 	.word	0x00015f90
    if (state != oldState) publishStateTransition();
   d628c:	4b58      	ldr	r3, [pc, #352]	; (d63f0 <loop+0x6d4>)
   d628e:	781b      	ldrb	r3, [r3, #0]
   d6290:	2b07      	cmp	r3, #7
   d6292:	d001      	beq.n	d6298 <loop+0x57c>
   d6294:	f7fe fef4 	bl	d5080 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   d6298:	4b56      	ldr	r3, [pc, #344]	; (d63f4 <loop+0x6d8>)
   d629a:	781d      	ldrb	r5, [r3, #0]
   d629c:	b9b5      	cbnz	r5, d62cc <loop+0x5b0>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d629e:	4b56      	ldr	r3, [pc, #344]	; (d63f8 <loop+0x6dc>)
   d62a0:	4a56      	ldr	r2, [pc, #344]	; (d63fc <loop+0x6e0>)
   d62a2:	601a      	str	r2, [r3, #0]
   d62a4:	f001 fd8e 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d62a8:	4b55      	ldr	r3, [pc, #340]	; (d6400 <loop+0x6e4>)
   d62aa:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d62ac:	2302      	movs	r3, #2
   d62ae:	7023      	strb	r3, [r4, #0]
      if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d62b0:	4b54      	ldr	r3, [pc, #336]	; (d6404 <loop+0x6e8>)
   d62b2:	6859      	ldr	r1, [r3, #4]
   d62b4:	2900      	cmp	r1, #0
   d62b6:	f43f ade3 	beq.w	d5e80 <loop+0x164>
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d62ba:	681a      	ldr	r2, [r3, #0]
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d62bc:	605d      	str	r5, [r3, #4]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d62be:	1a52      	subs	r2, r2, r1
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d62c0:	e9c3 5505 	strd	r5, r5, [r3, #20]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d62c4:	601a      	str	r2, [r3, #0]
        currentCountsWriteNeeded=true;
   d62c6:	2301      	movs	r3, #1
   d62c8:	7033      	strb	r3, [r6, #0]
   d62ca:	e5d9      	b.n	d5e80 <loop+0x164>
   d62cc:	f001 fd7a 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d62d0:	4b4d      	ldr	r3, [pc, #308]	; (d6408 <loop+0x6ec>)
   d62d2:	681b      	ldr	r3, [r3, #0]
   d62d4:	1ac0      	subs	r0, r0, r3
   d62d6:	f247 5330 	movw	r3, #30000	; 0x7530
   d62da:	4298      	cmp	r0, r3
   d62dc:	f67f add0 	bls.w	d5e80 <loop+0x164>
   d62e0:	f001 fd70 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d62e4:	4b49      	ldr	r3, [pc, #292]	; (d640c <loop+0x6f0>)
   d62e6:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d62e8:	2301      	movs	r3, #1
   d62ea:	e56d      	b.n	d5dc8 <loop+0xac>
    if (state != oldState) publishStateTransition();
   d62ec:	4b40      	ldr	r3, [pc, #256]	; (d63f0 <loop+0x6d4>)
   d62ee:	781b      	ldrb	r3, [r3, #0]
   d62f0:	2b01      	cmp	r3, #1
   d62f2:	d001      	beq.n	d62f8 <loop+0x5dc>
   d62f4:	f7fe fec4 	bl	d5080 <_Z22publishStateTransitionv>
   d62f8:	f001 fd64 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d62fc:	4b43      	ldr	r3, [pc, #268]	; (d640c <loop+0x6f0>)
   d62fe:	681b      	ldr	r3, [r3, #0]
   d6300:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d6304:	3330      	adds	r3, #48	; 0x30
   d6306:	4283      	cmp	r3, r0
   d6308:	f4bf adba 	bcs.w	d5e80 <loop+0x164>
      if ((Time.now() - sysStatus.lastConnection) > 7200L) {           // It is been over two hours since we last connected to the cloud - time for a reset
   d630c:	4d40      	ldr	r5, [pc, #256]	; (d6410 <loop+0x6f4>)
   d630e:	f004 fe50 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d6312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d6314:	1ac0      	subs	r0, r0, r3
   d6316:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d631a:	462c      	mov	r4, r5
   d631c:	d913      	bls.n	d6346 <loop+0x62a>
        sysStatus.lastConnection = Time.now() - 3600;                 // Wait an hour before we come back to this condition
   d631e:	f004 fe48 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d6322:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d6326:	6268      	str	r0, [r5, #36]	; 0x24
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d6328:	462a      	mov	r2, r5
   d632a:	2101      	movs	r1, #1
   d632c:	4839      	ldr	r0, [pc, #228]	; (d6414 <loop+0x6f8>)
   d632e:	f7fe ffd0 	bl	d52d2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        Log.error("failed to connect to cloud, doing deep reset");
   d6332:	4839      	ldr	r0, [pc, #228]	; (d6418 <loop+0x6fc>)
   d6334:	4939      	ldr	r1, [pc, #228]	; (d641c <loop+0x700>)
   d6336:	f7fe f91d 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
        delay(100);
   d633a:	2064      	movs	r0, #100	; 0x64
   d633c:	f002 f8c2 	bl	d84c4 <delay>
        fullModemReset();                                             // Full Modem reset and reboot
   d6340:	f7ff fc7e 	bl	d5c40 <_Z14fullModemResetv>
   d6344:	e59c      	b.n	d5e80 <loop+0x164>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) {     //It has been more than two hours since a sucessful hook response
   d6346:	f004 fe34 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d634a:	6a2b      	ldr	r3, [r5, #32]
   d634c:	1ac0      	subs	r0, r0, r3
   d634e:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d6352:	78eb      	ldrb	r3, [r5, #3]
   d6354:	d919      	bls.n	d638a <loop+0x66e>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);  // Broadcast Reset Action
   d6356:	b153      	cbz	r3, d636e <loop+0x652>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d6358:	4b31      	ldr	r3, [pc, #196]	; (d6420 <loop+0x704>)
   d635a:	4a32      	ldr	r2, [pc, #200]	; (d6424 <loop+0x708>)
   d635c:	781b      	ldrb	r3, [r3, #0]
   d635e:	f88d 3000 	strb.w	r3, [sp]
   d6362:	4b31      	ldr	r3, [pc, #196]	; (d6428 <loop+0x70c>)
   d6364:	4931      	ldr	r1, [pc, #196]	; (d642c <loop+0x710>)
   d6366:	781b      	ldrb	r3, [r3, #0]
   d6368:	4831      	ldr	r0, [pc, #196]	; (d6430 <loop+0x714>)
   d636a:	f7fe f91a 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);                                                  // Time to publish
   d636e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6372:	f002 f8a7 	bl	d84c4 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d6376:	2300      	movs	r3, #0
   d6378:	6123      	str	r3, [r4, #16]
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d637a:	f004 fe1a 	bl	dafb2 <_ZN9TimeClass3nowEv>
        systemStatusWriteNeeded=true;
   d637e:	2301      	movs	r3, #1
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d6380:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d6384:	6220      	str	r0, [r4, #32]
        systemStatusWriteNeeded=true;
   d6386:	703b      	strb	r3, [r7, #0]
   d6388:	e7da      	b.n	d6340 <loop+0x624>
      else if (sysStatus.resetCount <= 3) {                                // First try simple reset
   d638a:	692a      	ldr	r2, [r5, #16]
   d638c:	2a03      	cmp	r2, #3
   d638e:	dc12      	bgt.n	d63b6 <loop+0x69a>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - System Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d6390:	b153      	cbz	r3, d63a8 <loop+0x68c>
   d6392:	4b23      	ldr	r3, [pc, #140]	; (d6420 <loop+0x704>)
   d6394:	4a27      	ldr	r2, [pc, #156]	; (d6434 <loop+0x718>)
   d6396:	781b      	ldrb	r3, [r3, #0]
   d6398:	f88d 3000 	strb.w	r3, [sp]
   d639c:	4b22      	ldr	r3, [pc, #136]	; (d6428 <loop+0x70c>)
   d639e:	4923      	ldr	r1, [pc, #140]	; (d642c <loop+0x710>)
   d63a0:	781b      	ldrb	r3, [r3, #0]
   d63a2:	4823      	ldr	r0, [pc, #140]	; (d6430 <loop+0x714>)
   d63a4:	f7fe f8fd 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d63a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d63ac:	f002 f88a 	bl	d84c4 <delay>
        System.reset();
   d63b0:	f004 fba8 	bl	dab04 <_ZN11SystemClass5resetEv>
   d63b4:	e564      	b.n	d5e80 <loop+0x164>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcase Reset Action
   d63b6:	b153      	cbz	r3, d63ce <loop+0x6b2>
   d63b8:	4b19      	ldr	r3, [pc, #100]	; (d6420 <loop+0x704>)
   d63ba:	4a1a      	ldr	r2, [pc, #104]	; (d6424 <loop+0x708>)
   d63bc:	781b      	ldrb	r3, [r3, #0]
   d63be:	f88d 3000 	strb.w	r3, [sp]
   d63c2:	4b19      	ldr	r3, [pc, #100]	; (d6428 <loop+0x70c>)
   d63c4:	4919      	ldr	r1, [pc, #100]	; (d642c <loop+0x710>)
   d63c6:	781b      	ldrb	r3, [r3, #0]
   d63c8:	4819      	ldr	r0, [pc, #100]	; (d6430 <loop+0x714>)
   d63ca:	f7fe f8ea 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d63ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d63d2:	f002 f877 	bl	d84c4 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d63d6:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d63d8:	4a0d      	ldr	r2, [pc, #52]	; (d6410 <loop+0x6f4>)
   d63da:	480e      	ldr	r0, [pc, #56]	; (d6414 <loop+0x6f8>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d63dc:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d63de:	2101      	movs	r1, #1
   d63e0:	f7fe ff77 	bl	d52d2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        ab1805.deepPowerDown();                                       // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d63e4:	211e      	movs	r1, #30
   d63e6:	4814      	ldr	r0, [pc, #80]	; (d6438 <loop+0x71c>)
   d63e8:	f000 fbec 	bl	d6bc4 <_ZN6AB180513deepPowerDownEi>
   d63ec:	e548      	b.n	d5e80 <loop+0x164>
   d63ee:	bf00      	nop
   d63f0:	2003e474 	.word	0x2003e474
   d63f4:	2003e423 	.word	0x2003e423
   d63f8:	2003e4b8 	.word	0x2003e4b8
   d63fc:	00015f90 	.word	0x00015f90
   d6400:	2003e4bc 	.word	0x2003e4bc
   d6404:	2003e3f4 	.word	0x2003e3f4
   d6408:	2003e4f4 	.word	0x2003e4f4
   d640c:	2003e4b0 	.word	0x2003e4b0
   d6410:	2003e4c0 	.word	0x2003e4c0
   d6414:	2003e424 	.word	0x2003e424
   d6418:	2003e5e0 	.word	0x2003e5e0
   d641c:	000dc793 	.word	0x000dc793
   d6420:	2003e379 	.word	0x2003e379
   d6424:	000dc7c0 	.word	0x000dc7c0
   d6428:	2003e378 	.word	0x2003e378
   d642c:	000dc7df 	.word	0x000dc7df
   d6430:	2003e478 	.word	0x2003e478
   d6434:	000dc7e5 	.word	0x000dc7e5
   d6438:	2003e388 	.word	0x2003e388

000d643c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d643c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d643e:	2000      	movs	r0, #0
   d6440:	f001 ff44 	bl	d82cc <spark_sync_time_pending>
   d6444:	b128      	cbz	r0, d6452 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6446:	f001 ff19 	bl	d827c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d644a:	f080 0001 	eor.w	r0, r0, #1
   d644e:	b2c0      	uxtb	r0, r0
    }
   d6450:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6452:	2001      	movs	r0, #1
   d6454:	e7fc      	b.n	d6450 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d6458 <_Z11setTimeZone6String>:
 * Values outside this range will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if successful, 0 if invalid command
 */
int setTimeZone(String command)
{
   d6458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d645c:	b0c8      	sub	sp, #288	; 0x120
   d645e:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6460:	f001 ff0c 	bl	d827c <spark_cloud_flag_connected>
        if (!connected()) {
   d6464:	b110      	cbz	r0, d646c <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d6466:	2000      	movs	r0, #0
   d6468:	f001 ff28 	bl	d82bc <spark_sync_time>
        return hal_timer_millis(nullptr);
   d646c:	2000      	movs	r0, #0
   d646e:	f001 fcb9 	bl	d7de4 <hal_timer_millis>
   d6472:	f04f 0a00 	mov.w	sl, #0
   d6476:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d6478:	f247 562f 	movw	r6, #29999	; 0x752f
   d647c:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d647e:	2000      	movs	r0, #0
   d6480:	f001 fcb0 	bl	d7de4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d6484:	ebb0 0409 	subs.w	r4, r0, r9
   d6488:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d648c:	42af      	cmp	r7, r5
   d648e:	bf08      	it	eq
   d6490:	42a6      	cmpeq	r6, r4
   d6492:	d305      	bcc.n	d64a0 <_Z11setTimeZone6String+0x48>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d6494:	f7ff ffd2 	bl	d643c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d6498:	b910      	cbnz	r0, d64a0 <_Z11setTimeZone6String+0x48>
            spark_process();
   d649a:	f001 fedf 	bl	d825c <spark_process>
        while (_while() && !_condition()) {
   d649e:	e7ee      	b.n	d647e <_Z11setTimeZone6String+0x26>
   d64a0:	f7ff ffcc 	bl	d643c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d64a4:	f8d8 0000 	ldr.w	r0, [r8]
   d64a8:	220a      	movs	r2, #10
   d64aa:	a903      	add	r1, sp, #12
   d64ac:	f005 fef6 	bl	dc29c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d64b0:	f100 030c 	add.w	r3, r0, #12
   d64b4:	b2db      	uxtb	r3, r3
   d64b6:	2b18      	cmp	r3, #24
   d64b8:	d848      	bhi.n	d654c <_Z11setTimeZone6String+0xf4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d64ba:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d64bc:	ee07 5a90 	vmov	s15, r5
   d64c0:	4b27      	ldr	r3, [pc, #156]	; (d6560 <_Z11setTimeZone6String+0x108>)
   d64c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d64c6:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d64c8:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d64cc:	f004 fc08 	bl	dace0 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d64d0:	4b24      	ldr	r3, [pc, #144]	; (d6564 <_Z11setTimeZone6String+0x10c>)
   d64d2:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d64d4:	f004 fdb2 	bl	db03c <_ZN9TimeClass5localEv>
   d64d8:	4606      	mov	r6, r0
   d64da:	f004 fd6a 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d64de:	1a30      	subs	r0, r6, r0
   d64e0:	f005 f9f4 	bl	db8cc <__aeabi_i2d>
   d64e4:	a31c      	add	r3, pc, #112	; (adr r3, d6558 <_Z11setTimeZone6String+0x100>)
   d64e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d64ea:	f005 fb83 	bl	dbbf4 <__aeabi_ddiv>
   d64ee:	4a1e      	ldr	r2, [pc, #120]	; (d6568 <_Z11setTimeZone6String+0x110>)
   d64f0:	e9cd 0100 	strd	r0, r1, [sp]
   d64f4:	210a      	movs	r1, #10
   d64f6:	481d      	ldr	r0, [pc, #116]	; (d656c <_Z11setTimeZone6String+0x114>)
   d64f8:	f001 ff90 	bl	d841c <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d64fc:	f001 febe 	bl	d827c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d6500:	b310      	cbz	r0, d6548 <_Z11setTimeZone6String+0xf0>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d6502:	462b      	mov	r3, r5
   d6504:	4a1a      	ldr	r2, [pc, #104]	; (d6570 <_Z11setTimeZone6String+0x118>)
   d6506:	4d1b      	ldr	r5, [pc, #108]	; (d6574 <_Z11setTimeZone6String+0x11c>)
   d6508:	f44f 7180 	mov.w	r1, #256	; 0x100
        val_(0) {
   d650c:	2600      	movs	r6, #0
   d650e:	a808      	add	r0, sp, #32
   d6510:	f001 ff84 	bl	d841c <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d6514:	f88d 6000 	strb.w	r6, [sp]
   d6518:	4917      	ldr	r1, [pc, #92]	; (d6578 <_Z11setTimeZone6String+0x120>)
   d651a:	782b      	ldrb	r3, [r5, #0]
   d651c:	4817      	ldr	r0, [pc, #92]	; (d657c <_Z11setTimeZone6String+0x124>)
   d651e:	aa08      	add	r2, sp, #32
   d6520:	f7fe f83f 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d6524:	f004 fd45 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d6528:	4602      	mov	r2, r0
   d652a:	17c3      	asrs	r3, r0, #31
   d652c:	a804      	add	r0, sp, #16
   d652e:	f004 fc3d 	bl	dadac <_ZN9TimeClass7timeStrEx>
   d6532:	f88d 6000 	strb.w	r6, [sp]
   d6536:	782b      	ldrb	r3, [r5, #0]
   d6538:	9a04      	ldr	r2, [sp, #16]
   d653a:	490f      	ldr	r1, [pc, #60]	; (d6578 <_Z11setTimeZone6String+0x120>)
   d653c:	480f      	ldr	r0, [pc, #60]	; (d657c <_Z11setTimeZone6String+0x124>)
   d653e:	f7fe f830 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6542:	a804      	add	r0, sp, #16
   d6544:	f004 f9a4 	bl	da890 <_ZN6StringD1Ev>
  }

  return 1;
   d6548:	4620      	mov	r0, r4
   d654a:	e000      	b.n	d654e <_Z11setTimeZone6String+0xf6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d654c:	2000      	movs	r0, #0
}
   d654e:	b048      	add	sp, #288	; 0x120
   d6550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6554:	f3af 8000 	nop.w
   d6558:	00000000 	.word	0x00000000
   d655c:	40ac2000 	.word	0x40ac2000
   d6560:	2003e4c0 	.word	0x2003e4c0
   d6564:	2003e4f0 	.word	0x2003e4f0
   d6568:	000dc701 	.word	0x000dc701
   d656c:	2003e419 	.word	0x2003e419
   d6570:	000dc8dc 	.word	0x000dc8dc
   d6574:	2003e4f8 	.word	0x2003e4f8
   d6578:	000dc62b 	.word	0x000dc62b
   d657c:	2003e478 	.word	0x2003e478

000d6580 <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d6580:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d6582:	f004 fd3f 	bl	db004 <_ZN9TimeClass3dayEv>
   d6586:	4605      	mov	r5, r0
  int month = Time.month();
   d6588:	f004 fd50 	bl	db02c <_ZN9TimeClass5monthEv>
   d658c:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d658e:	f004 fd45 	bl	db01c <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d6592:	1f23      	subs	r3, r4, #4
   d6594:	2b06      	cmp	r3, #6
   d6596:	d90e      	bls.n	d65b6 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d6598:	1ee3      	subs	r3, r4, #3
   d659a:	2b08      	cmp	r3, #8
   d659c:	d80d      	bhi.n	d65ba <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d659e:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d65a0:	1a2d      	subs	r5, r5, r0
   d65a2:	d504      	bpl.n	d65ae <_Z8isDSTusav+0x2e>
   d65a4:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d65a6:	bf14      	ite	ne
   d65a8:	2000      	movne	r0, #0
   d65aa:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d65ac:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d65ae:	2d07      	cmp	r5, #7
   d65b0:	dd03      	ble.n	d65ba <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d65b2:	2c03      	cmp	r4, #3
   d65b4:	e7f7      	b.n	d65a6 <_Z8isDSTusav+0x26>
    return true;
   d65b6:	2001      	movs	r0, #1
   d65b8:	e7f8      	b.n	d65ac <_Z8isDSTusav+0x2c>
    return false;
   d65ba:	2000      	movs	r0, #0
   d65bc:	e7f6      	b.n	d65ac <_Z8isDSTusav+0x2c>
	...

000d65c0 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d65c0:	b570      	push	{r4, r5, r6, lr}
   d65c2:	ed2d 8b02 	vpush	{d8}
   d65c6:	b0c8      	sub	sp, #288	; 0x120
   d65c8:	4605      	mov	r5, r0
  time_t t = Time.now();
   d65ca:	f004 fcf2 	bl	dafb2 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d65ce:	220a      	movs	r2, #10
  time_t t = Time.now();
   d65d0:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d65d2:	a903      	add	r1, sp, #12
   d65d4:	6828      	ldr	r0, [r5, #0]
   d65d6:	f005 fe61 	bl	dc29c <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d65da:	b2c3      	uxtb	r3, r0
   d65dc:	2b02      	cmp	r3, #2
   d65de:	d859      	bhi.n	d6694 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d65e0:	b243      	sxtb	r3, r0
   d65e2:	ee08 3a10 	vmov	s16, r3
   d65e6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d65ea:	eeb0 0a48 	vmov.f32	s0, s16
   d65ee:	f004 fb97 	bl	dad20 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d65f2:	4b2d      	ldr	r3, [pc, #180]	; (d66a8 <_Z12setDSTOffset6String+0xe8>)
   d65f4:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d65f8:	4b2c      	ldr	r3, [pc, #176]	; (d66ac <_Z12setDSTOffset6String+0xec>)
   d65fa:	2201      	movs	r2, #1
   d65fc:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d65fe:	ee18 0a10 	vmov	r0, s16
   d6602:	f005 f975 	bl	db8f0 <__aeabi_f2d>
   d6606:	4a2a      	ldr	r2, [pc, #168]	; (d66b0 <_Z12setDSTOffset6String+0xf0>)
   d6608:	e9cd 0100 	strd	r0, r1, [sp]
   d660c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d6610:	a808      	add	r0, sp, #32
   d6612:	f001 ff03 	bl	d841c <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d6616:	f004 fcaf 	bl	daf78 <_ZN9TimeClass7isValidEv>
   d661a:	b128      	cbz	r0, d6628 <_Z12setDSTOffset6String+0x68>
   d661c:	f7ff ffb0 	bl	d6580 <_Z8isDSTusav>
   d6620:	2800      	cmp	r0, #0
   d6622:	d034      	beq.n	d668e <_Z12setDSTOffset6String+0xce>
   d6624:	f004 fb9a 	bl	dad5c <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d6628:	f004 fd08 	bl	db03c <_ZN9TimeClass5localEv>
   d662c:	4605      	mov	r5, r0
   d662e:	f004 fcc0 	bl	dafb2 <_ZN9TimeClass3nowEv>
   d6632:	1a28      	subs	r0, r5, r0
   d6634:	f005 f94a 	bl	db8cc <__aeabi_i2d>
   d6638:	a319      	add	r3, pc, #100	; (adr r3, d66a0 <_Z12setDSTOffset6String+0xe0>)
   d663a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d663e:	f005 fad9 	bl	dbbf4 <__aeabi_ddiv>
   d6642:	4a1c      	ldr	r2, [pc, #112]	; (d66b4 <_Z12setDSTOffset6String+0xf4>)
   d6644:	e9cd 0100 	strd	r0, r1, [sp]
   d6648:	210a      	movs	r1, #10
   d664a:	481b      	ldr	r0, [pc, #108]	; (d66b8 <_Z12setDSTOffset6String+0xf8>)
   d664c:	f001 fee6 	bl	d841c <snprintf>
   d6650:	f001 fe14 	bl	d827c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d6654:	b1c8      	cbz	r0, d668a <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d6656:	4d19      	ldr	r5, [pc, #100]	; (d66bc <_Z12setDSTOffset6String+0xfc>)
   d6658:	4919      	ldr	r1, [pc, #100]	; (d66c0 <_Z12setDSTOffset6String+0x100>)
   d665a:	481a      	ldr	r0, [pc, #104]	; (d66c4 <_Z12setDSTOffset6String+0x104>)
   d665c:	2600      	movs	r6, #0
   d665e:	f88d 6000 	strb.w	r6, [sp]
   d6662:	782b      	ldrb	r3, [r5, #0]
   d6664:	aa08      	add	r2, sp, #32
   d6666:	f7fd ff9c 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d666a:	4622      	mov	r2, r4
   d666c:	17e3      	asrs	r3, r4, #31
   d666e:	a804      	add	r0, sp, #16
   d6670:	f004 fb9c 	bl	dadac <_ZN9TimeClass7timeStrEx>
   d6674:	f88d 6000 	strb.w	r6, [sp]
   d6678:	782b      	ldrb	r3, [r5, #0]
   d667a:	9a04      	ldr	r2, [sp, #16]
   d667c:	4910      	ldr	r1, [pc, #64]	; (d66c0 <_Z12setDSTOffset6String+0x100>)
   d667e:	4811      	ldr	r0, [pc, #68]	; (d66c4 <_Z12setDSTOffset6String+0x104>)
   d6680:	f7fd ff8f 	bl	d45a2 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6684:	a804      	add	r0, sp, #16
   d6686:	f004 f903 	bl	da890 <_ZN6StringD1Ev>
  return 1;
   d668a:	2001      	movs	r0, #1
   d668c:	e003      	b.n	d6696 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d668e:	f004 fb71 	bl	dad74 <_ZN9TimeClass6endDSTEv>
   d6692:	e7c9      	b.n	d6628 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d6694:	2000      	movs	r0, #0
}
   d6696:	b048      	add	sp, #288	; 0x120
   d6698:	ecbd 8b02 	vpop	{d8}
   d669c:	bd70      	pop	{r4, r5, r6, pc}
   d669e:	bf00      	nop
   d66a0:	00000000 	.word	0x00000000
   d66a4:	40ac2000 	.word	0x40ac2000
   d66a8:	2003e4c0 	.word	0x2003e4c0
   d66ac:	2003e4f0 	.word	0x2003e4f0
   d66b0:	000dc8f0 	.word	0x000dc8f0
   d66b4:	000dc701 	.word	0x000dc701
   d66b8:	2003e419 	.word	0x2003e419
   d66bc:	2003e4f8 	.word	0x2003e4f8
   d66c0:	000dc62b 	.word	0x000dc62b
   d66c4:	2003e478 	.word	0x2003e478

000d66c8 <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d66c8:	4b01      	ldr	r3, [pc, #4]	; (d66d0 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d66ca:	2201      	movs	r2, #1
   d66cc:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d66ce:	4770      	bx	lr
   d66d0:	2003e4f8 	.word	0x2003e4f8

000d66d4 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d66d4:	4770      	bx	lr

000d66d6 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d66d6:	b510      	push	{r4, lr}
}
   d66d8:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d66da:	4604      	mov	r4, r0
}
   d66dc:	f004 ff9b 	bl	db616 <_ZdlPvj>
   d66e0:	4620      	mov	r0, r4
   d66e2:	bd10      	pop	{r4, pc}

000d66e4 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d66e4:	b40e      	push	{r1, r2, r3}
   d66e6:	b510      	push	{r4, lr}
   d66e8:	b08d      	sub	sp, #52	; 0x34
   d66ea:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d66ec:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d66ee:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d66f2:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d66f4:	2300      	movs	r3, #0
   d66f6:	2020      	movs	r0, #32
   d66f8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d66fc:	e9cd 4200 	strd	r4, r2, [sp]
   d6700:	2001      	movs	r0, #1
   d6702:	aa04      	add	r2, sp, #16
   d6704:	f001 fcfe 	bl	d8104 <log_message_v>
}
   d6708:	b00d      	add	sp, #52	; 0x34
   d670a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d670e:	b003      	add	sp, #12
   d6710:	4770      	bx	lr
	...

000d6714 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d6714:	b510      	push	{r4, lr}
   d6716:	7202      	strb	r2, [r0, #8]
   d6718:	22ff      	movs	r2, #255	; 0xff
   d671a:	8142      	strh	r2, [r0, #10]
   d671c:	2200      	movs	r2, #0
   d671e:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d6722:	6142      	str	r2, [r0, #20]
   d6724:	7602      	strb	r2, [r0, #24]
   d6726:	61c2      	str	r2, [r0, #28]
    instance = this;
   d6728:	4a02      	ldr	r2, [pc, #8]	; (d6734 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d672a:	4c03      	ldr	r4, [pc, #12]	; (d6738 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d672c:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d672e:	e9c0 4100 	strd	r4, r1, [r0]
}
   d6732:	bd10      	pop	{r4, pc}
   d6734:	2003e500 	.word	0x2003e500
   d6738:	000dcb50 	.word	0x000dcb50

000d673c <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d673c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6740:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d6744:	4604      	mov	r4, r0
   d6746:	4689      	mov	r9, r1
   d6748:	4616      	mov	r6, r2
   d674a:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d674c:	f1b8 0f00 	cmp.w	r8, #0
   d6750:	d002      	beq.n	d6758 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d6752:	6840      	ldr	r0, [r0, #4]
   d6754:	f002 fc2e 	bl	d8fb4 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6758:	7a21      	ldrb	r1, [r4, #8]
   d675a:	6860      	ldr	r0, [r4, #4]
   d675c:	f002 fc04 	bl	d8f68 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6760:	6860      	ldr	r0, [r4, #4]
   d6762:	6803      	ldr	r3, [r0, #0]
   d6764:	4649      	mov	r1, r9
   d6766:	689b      	ldr	r3, [r3, #8]
   d6768:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d676a:	6860      	ldr	r0, [r4, #4]
   d676c:	2100      	movs	r1, #0
   d676e:	f002 fc1a 	bl	d8fa6 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6772:	4605      	mov	r5, r0
   d6774:	bb00      	cbnz	r0, d67b8 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6776:	2301      	movs	r3, #1
   d6778:	7a21      	ldrb	r1, [r4, #8]
   d677a:	6860      	ldr	r0, [r4, #4]
   d677c:	463a      	mov	r2, r7
   d677e:	f002 fbde 	bl	d8f3e <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d6782:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6784:	4603      	mov	r3, r0
        if (count == num) {
   d6786:	d109      	bne.n	d679c <_ZN6AB180513readRegistersEhPhjb+0x60>
   d6788:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d678a:	42be      	cmp	r6, r7
   d678c:	d01c      	beq.n	d67c8 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d678e:	6860      	ldr	r0, [r4, #4]
   d6790:	6803      	ldr	r3, [r0, #0]
   d6792:	695b      	ldr	r3, [r3, #20]
   d6794:	4798      	blx	r3
   d6796:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d679a:	e7f6      	b.n	d678a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d679c:	490b      	ldr	r1, [pc, #44]	; (d67cc <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d679e:	480c      	ldr	r0, [pc, #48]	; (d67d0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d67a0:	464a      	mov	r2, r9
   d67a2:	f7fd fee7 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d67a6:	f1b8 0f00 	cmp.w	r8, #0
   d67aa:	d002      	beq.n	d67b2 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d67ac:	6860      	ldr	r0, [r4, #4]
   d67ae:	f002 fc0a 	bl	d8fc6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d67b2:	4628      	mov	r0, r5
   d67b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d67b8:	4603      	mov	r3, r0
   d67ba:	4906      	ldr	r1, [pc, #24]	; (d67d4 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d67bc:	4804      	ldr	r0, [pc, #16]	; (d67d0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d67be:	464a      	mov	r2, r9
   d67c0:	f7fd fed8 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d67c4:	2500      	movs	r5, #0
   d67c6:	e7ee      	b.n	d67a6 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d67c8:	2501      	movs	r5, #1
   d67ca:	e7ec      	b.n	d67a6 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d67cc:	000dc901 	.word	0x000dc901
   d67d0:	2003e4fc 	.word	0x2003e4fc
   d67d4:	000dc926 	.word	0x000dc926

000d67d8 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d67d8:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d67da:	9300      	str	r3, [sp, #0]
   d67dc:	2301      	movs	r3, #1
   d67de:	f7ff ffad 	bl	d673c <_ZN6AB180513readRegistersEhPhjb>
}
   d67e2:	b003      	add	sp, #12
   d67e4:	f85d fb04 	ldr.w	pc, [sp], #4

000d67e8 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d67e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d67ea:	8943      	ldrh	r3, [r0, #10]
   d67ec:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d67ee:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d67f0:	d010      	beq.n	d6814 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d67f2:	4e19      	ldr	r6, [pc, #100]	; (d6858 <_ZN6AB180510detectChipEv+0x70>)
   d67f4:	4d19      	ldr	r5, [pc, #100]	; (d685c <_ZN6AB180510detectChipEv+0x74>)
   d67f6:	f001 fae5 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d67fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d67fe:	d209      	bcs.n	d6814 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d6800:	8960      	ldrh	r0, [r4, #10]
   d6802:	f004 fe59 	bl	db4b8 <digitalRead>
   d6806:	2801      	cmp	r0, #1
   d6808:	d004      	beq.n	d6814 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d680a:	4631      	mov	r1, r6
   d680c:	4628      	mov	r0, r5
   d680e:	f7fd fe9a 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d6812:	e7f0      	b.n	d67f6 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d6814:	2301      	movs	r3, #1
   d6816:	f10d 0207 	add.w	r2, sp, #7
   d681a:	2128      	movs	r1, #40	; 0x28
   d681c:	4620      	mov	r0, r4
   d681e:	f7ff ffdb 	bl	d67d8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d6822:	b930      	cbnz	r0, d6832 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d6824:	480d      	ldr	r0, [pc, #52]	; (d685c <_ZN6AB180510detectChipEv+0x74>)
   d6826:	490e      	ldr	r1, [pc, #56]	; (d6860 <_ZN6AB180510detectChipEv+0x78>)
   d6828:	f7fd fe8d 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d682c:	2000      	movs	r0, #0
}
   d682e:	b002      	add	sp, #8
   d6830:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d6832:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6836:	2b18      	cmp	r3, #24
   d6838:	d1f4      	bne.n	d6824 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d683a:	2301      	movs	r3, #1
   d683c:	f10d 0207 	add.w	r2, sp, #7
   d6840:	2129      	movs	r1, #41	; 0x29
   d6842:	4620      	mov	r0, r4
   d6844:	f7ff ffc8 	bl	d67d8 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d6848:	2800      	cmp	r0, #0
   d684a:	d0eb      	beq.n	d6824 <_ZN6AB180510detectChipEv+0x3c>
   d684c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6850:	2b05      	cmp	r3, #5
   d6852:	d1e7      	bne.n	d6824 <_ZN6AB180510detectChipEv+0x3c>
   d6854:	e7eb      	b.n	d682e <_ZN6AB180510detectChipEv+0x46>
   d6856:	bf00      	nop
   d6858:	000dc94a 	.word	0x000dc94a
   d685c:	2003e4fc 	.word	0x2003e4fc
   d6860:	000dc95f 	.word	0x000dc95f

000d6864 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d6864:	b507      	push	{r0, r1, r2, lr}
   d6866:	4613      	mov	r3, r2
    uint8_t value = 0;
   d6868:	2200      	movs	r2, #0
   d686a:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d686e:	f10d 0207 	add.w	r2, sp, #7
   d6872:	f7ff ffb1 	bl	d67d8 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d6876:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d687a:	b003      	add	sp, #12
   d687c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6880 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d6880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6884:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d6888:	4604      	mov	r4, r0
   d688a:	460f      	mov	r7, r1
   d688c:	4615      	mov	r5, r2
   d688e:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d6890:	f1b8 0f00 	cmp.w	r8, #0
   d6894:	d002      	beq.n	d689c <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d6896:	6840      	ldr	r0, [r0, #4]
   d6898:	f002 fb8c 	bl	d8fb4 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d689c:	7a21      	ldrb	r1, [r4, #8]
   d689e:	6860      	ldr	r0, [r4, #4]
   d68a0:	f002 fb62 	bl	d8f68 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d68a4:	6860      	ldr	r0, [r4, #4]
   d68a6:	6803      	ldr	r3, [r0, #0]
   d68a8:	4639      	mov	r1, r7
   d68aa:	689b      	ldr	r3, [r3, #8]
   d68ac:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d68ae:	442e      	add	r6, r5
   d68b0:	42b5      	cmp	r5, r6
   d68b2:	6860      	ldr	r0, [r4, #4]
   d68b4:	d005      	beq.n	d68c2 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d68b6:	6803      	ldr	r3, [r0, #0]
   d68b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d68bc:	689b      	ldr	r3, [r3, #8]
   d68be:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d68c0:	e7f6      	b.n	d68b0 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d68c2:	2101      	movs	r1, #1
   d68c4:	f002 fb6f 	bl	d8fa6 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d68c8:	4603      	mov	r3, r0
   d68ca:	b170      	cbz	r0, d68ea <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d68cc:	4908      	ldr	r1, [pc, #32]	; (d68f0 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d68ce:	4809      	ldr	r0, [pc, #36]	; (d68f4 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d68d0:	463a      	mov	r2, r7
   d68d2:	f7fd fe4f 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d68d6:	2500      	movs	r5, #0
    }

    if (lock) {
   d68d8:	f1b8 0f00 	cmp.w	r8, #0
   d68dc:	d002      	beq.n	d68e4 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d68de:	6860      	ldr	r0, [r4, #4]
   d68e0:	f002 fb71 	bl	d8fc6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d68e4:	4628      	mov	r0, r5
   d68e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d68ea:	2501      	movs	r5, #1
   d68ec:	e7f4      	b.n	d68d8 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d68ee:	bf00      	nop
   d68f0:	000dc96c 	.word	0x000dc96c
   d68f4:	2003e4fc 	.word	0x2003e4fc

000d68f8 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d68f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d68fa:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d68fe:	9300      	str	r3, [sp, #0]
   d6900:	f10d 020f 	add.w	r2, sp, #15
   d6904:	2301      	movs	r3, #1
   d6906:	f7ff ffbb 	bl	d6880 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d690a:	b005      	add	sp, #20
   d690c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6910 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d6910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d6912:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d6914:	460c      	mov	r4, r1
   d6916:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d6918:	491a      	ldr	r1, [pc, #104]	; (d6984 <_ZN6AB18056setWDTEi+0x74>)
   d691a:	481b      	ldr	r0, [pc, #108]	; (d6988 <_ZN6AB18056setWDTEi+0x78>)
   d691c:	f7fd fe13 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d6920:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d6922:	bfb8      	it	lt
   d6924:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d6926:	b97c      	cbnz	r4, d6948 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d6928:	2301      	movs	r3, #1
   d692a:	4622      	mov	r2, r4
   d692c:	211b      	movs	r1, #27
   d692e:	4628      	mov	r0, r5
   d6930:	f7ff ffe2 	bl	d68f8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6934:	4915      	ldr	r1, [pc, #84]	; (d698c <_ZN6AB18056setWDTEi+0x7c>)
   d6936:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d6938:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d693a:	4813      	ldr	r0, [pc, #76]	; (d6988 <_ZN6AB18056setWDTEi+0x78>)
   d693c:	f7ff fed2 	bl	d66e4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d6940:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d6942:	616c      	str	r4, [r5, #20]
}
   d6944:	4630      	mov	r0, r6
   d6946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d6948:	2c03      	cmp	r4, #3
   d694a:	dd19      	ble.n	d6980 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d694c:	10a7      	asrs	r7, r4, #2
   d694e:	2f1f      	cmp	r7, #31
   d6950:	bfa8      	it	ge
   d6952:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6954:	00ba      	lsls	r2, r7, #2
   d6956:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d695a:	2301      	movs	r3, #1
   d695c:	b2d2      	uxtb	r2, r2
   d695e:	211b      	movs	r1, #27
   d6960:	4628      	mov	r0, r5
   d6962:	f7ff ffc9 	bl	d68f8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d6966:	463a      	mov	r2, r7
   d6968:	4603      	mov	r3, r0
   d696a:	4909      	ldr	r1, [pc, #36]	; (d6990 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d696c:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d696e:	4806      	ldr	r0, [pc, #24]	; (d6988 <_ZN6AB18056setWDTEi+0x78>)
   d6970:	f7ff feb8 	bl	d66e4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6974:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d6978:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d697a:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d697c:	616f      	str	r7, [r5, #20]
   d697e:	e7e1      	b.n	d6944 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d6980:	2701      	movs	r7, #1
   d6982:	e7e7      	b.n	d6954 <_ZN6AB18056setWDTEi+0x44>
   d6984:	000dc991 	.word	0x000dc991
   d6988:	2003e4fc 	.word	0x2003e4fc
   d698c:	000dc99b 	.word	0x000dc99b
   d6990:	000dc9b7 	.word	0x000dc9b7

000d6994 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6994:	460b      	mov	r3, r1
    if (instance) {
   d6996:	4907      	ldr	r1, [pc, #28]	; (d69b4 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6998:	4602      	mov	r2, r0
    if (instance) {
   d699a:	6808      	ldr	r0, [r1, #0]
   d699c:	b148      	cbz	r0, d69b2 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d699e:	2b00      	cmp	r3, #0
   d69a0:	bf08      	it	eq
   d69a2:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d69a6:	d104      	bne.n	d69b2 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d69a8:	68c3      	ldr	r3, [r0, #12]
   d69aa:	b113      	cbz	r3, d69b2 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d69ac:	2100      	movs	r1, #0
   d69ae:	f7ff bfaf 	b.w	d6910 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d69b2:	4770      	bx	lr
   d69b4:	2003e500 	.word	0x2003e500

000d69b8 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d69b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d69bc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d69c0:	4605      	mov	r5, r0
   d69c2:	4616      	mov	r6, r2
   d69c4:	461f      	mov	r7, r3
    if (lock) {
   d69c6:	f1b8 0f00 	cmp.w	r8, #0
   d69ca:	d004      	beq.n	d69d6 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d69cc:	6840      	ldr	r0, [r0, #4]
   d69ce:	9101      	str	r1, [sp, #4]
   d69d0:	f002 faf0 	bl	d8fb4 <_ZN7TwoWire4lockEv>
   d69d4:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d69d6:	9101      	str	r1, [sp, #4]
   d69d8:	2300      	movs	r3, #0
   d69da:	f10d 020f 	add.w	r2, sp, #15
   d69de:	4628      	mov	r0, r5
   d69e0:	f7ff fefa 	bl	d67d8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d69e4:	4604      	mov	r4, r0
   d69e6:	b160      	cbz	r0, d6a02 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d69e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d69ec:	ea03 0206 	and.w	r2, r3, r6
   d69f0:	433a      	orrs	r2, r7
        if (newValue != value) {
   d69f2:	4293      	cmp	r3, r2
   d69f4:	d005      	beq.n	d6a02 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d69f6:	9901      	ldr	r1, [sp, #4]
   d69f8:	2300      	movs	r3, #0
   d69fa:	4628      	mov	r0, r5
   d69fc:	f7ff ff7c 	bl	d68f8 <_ZN6AB180513writeRegisterEhhb>
   d6a00:	4604      	mov	r4, r0
    if (lock) {
   d6a02:	f1b8 0f00 	cmp.w	r8, #0
   d6a06:	d002      	beq.n	d6a0e <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d6a08:	6868      	ldr	r0, [r5, #4]
   d6a0a:	f002 fadc 	bl	d8fc6 <_ZN7TwoWire6unlockEv>
}
   d6a0e:	4620      	mov	r0, r4
   d6a10:	b004      	add	sp, #16
   d6a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6a16 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6a16:	b513      	push	{r0, r1, r4, lr}
   d6a18:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6a1a:	f10d 0207 	add.w	r2, sp, #7
   d6a1e:	f7ff fedb 	bl	d67d8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d6a22:	b128      	cbz	r0, d6a30 <_ZN6AB180510isBitClearEhhb+0x1a>
   d6a24:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6a28:	421c      	tst	r4, r3
   d6a2a:	bf0c      	ite	eq
   d6a2c:	2001      	moveq	r0, #1
   d6a2e:	2000      	movne	r0, #0
}
   d6a30:	b002      	add	sp, #8
   d6a32:	bd10      	pop	{r4, pc}

000d6a34 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6a34:	b513      	push	{r0, r1, r4, lr}
   d6a36:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6a38:	f10d 0207 	add.w	r2, sp, #7
   d6a3c:	f7ff fecc 	bl	d67d8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d6a40:	b128      	cbz	r0, d6a4e <_ZN6AB18058isBitSetEhhb+0x1a>
   d6a42:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6a46:	421c      	tst	r4, r3
   d6a48:	bf14      	ite	ne
   d6a4a:	2001      	movne	r0, #1
   d6a4c:	2000      	moveq	r0, #0
}
   d6a4e:	b002      	add	sp, #8
   d6a50:	bd10      	pop	{r4, pc}

000d6a52 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6a52:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d6a54:	43d2      	mvns	r2, r2
   d6a56:	9300      	str	r3, [sp, #0]
   d6a58:	b2d2      	uxtb	r2, r2
   d6a5a:	2300      	movs	r3, #0
   d6a5c:	f7ff ffac 	bl	d69b8 <_ZN6AB180512maskRegisterEhhhb>
}
   d6a60:	b003      	add	sp, #12
   d6a62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6a68 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d6a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d6a6a:	2301      	movs	r3, #1
   d6a6c:	f10d 0207 	add.w	r2, sp, #7
   d6a70:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d6a72:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d6a74:	f7ff feb0 	bl	d67d8 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d6a78:	4605      	mov	r5, r0
   d6a7a:	b938      	cbnz	r0, d6a8c <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d6a7c:	491e      	ldr	r1, [pc, #120]	; (d6af8 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d6a7e:	481f      	ldr	r0, [pc, #124]	; (d6afc <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6a80:	22ad      	movs	r2, #173	; 0xad
   d6a82:	f7fd fd77 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
}
   d6a86:	4628      	mov	r0, r5
   d6a88:	b003      	add	sp, #12
   d6a8a:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d6a8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6a90:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d6a94:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d6a98:	d00b      	beq.n	d6ab2 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6a9a:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d6a9c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6a9e:	210f      	movs	r1, #15
   d6aa0:	4620      	mov	r0, r4
   d6aa2:	f7ff ffd6 	bl	d6a52 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d6aa6:	4a16      	ldr	r2, [pc, #88]	; (d6b00 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d6aa8:	4916      	ldr	r1, [pc, #88]	; (d6b04 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d6aaa:	4814      	ldr	r0, [pc, #80]	; (d6afc <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6aac:	f7fd fd4b 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d6ab0:	e7e9      	b.n	d6a86 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d6ab2:	2208      	movs	r2, #8
   d6ab4:	2117      	movs	r1, #23
   d6ab6:	4620      	mov	r0, r4
   d6ab8:	f7ff ffbc 	bl	d6a34 <_ZN6AB18058isBitSetEhhb>
   d6abc:	b118      	cbz	r0, d6ac6 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6abe:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d6ac0:	4a11      	ldr	r2, [pc, #68]	; (d6b08 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6ac2:	61e3      	str	r3, [r4, #28]
   d6ac4:	e7f0      	b.n	d6aa8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d6ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6aca:	071a      	lsls	r2, r3, #28
   d6acc:	d509      	bpl.n	d6ae2 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d6ace:	2303      	movs	r3, #3
   d6ad0:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d6ad2:	2208      	movs	r2, #8
   d6ad4:	2301      	movs	r3, #1
   d6ad6:	210f      	movs	r1, #15
   d6ad8:	4620      	mov	r0, r4
   d6ada:	f7ff ffba 	bl	d6a52 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d6ade:	4a0b      	ldr	r2, [pc, #44]	; (d6b0c <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d6ae0:	e7e2      	b.n	d6aa8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d6ae2:	075b      	lsls	r3, r3, #29
   d6ae4:	d5cf      	bpl.n	d6a86 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d6ae6:	2204      	movs	r2, #4
   d6ae8:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d6aea:	2301      	movs	r3, #1
   d6aec:	210f      	movs	r1, #15
   d6aee:	4620      	mov	r0, r4
   d6af0:	f7ff ffaf 	bl	d6a52 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d6af4:	4a06      	ldr	r2, [pc, #24]	; (d6b10 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d6af6:	e7d7      	b.n	d6aa8 <_ZN6AB180516updateWakeReasonEv+0x40>
   d6af8:	000dca0a 	.word	0x000dca0a
   d6afc:	2003e4fc 	.word	0x2003e4fc
   d6b00:	000dc9db 	.word	0x000dc9db
   d6b04:	000dca29 	.word	0x000dca29
   d6b08:	000dc9e4 	.word	0x000dc9e4
   d6b0c:	000dc9f4 	.word	0x000dc9f4
   d6b10:	000dca04 	.word	0x000dca04

000d6b14 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6b14:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d6b16:	9300      	str	r3, [sp, #0]
   d6b18:	4613      	mov	r3, r2
   d6b1a:	22ff      	movs	r2, #255	; 0xff
   d6b1c:	f7ff ff4c 	bl	d69b8 <_ZN6AB180512maskRegisterEhhhb>
}
   d6b20:	b003      	add	sp, #12
   d6b22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b28 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b2a:	460f      	mov	r7, r1
   d6b2c:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6b2e:	2301      	movs	r3, #1
   d6b30:	2200      	movs	r2, #0
   d6b32:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6b34:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6b36:	f7ff fedf 	bl	d68f8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6b3a:	4604      	mov	r4, r0
   d6b3c:	b938      	cbnz	r0, d6b4e <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d6b3e:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d6b42:	491e      	ldr	r1, [pc, #120]	; (d6bbc <_ZN6AB180517setCountdownTimerEib+0x94>)
   d6b44:	481e      	ldr	r0, [pc, #120]	; (d6bc0 <_ZN6AB180517setCountdownTimerEib+0x98>)
   d6b46:	f7fd fd15 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
}
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d6b4e:	2301      	movs	r3, #1
   d6b50:	2223      	movs	r2, #35	; 0x23
   d6b52:	2118      	movs	r1, #24
   d6b54:	4628      	mov	r0, r5
   d6b56:	f7ff fecf 	bl	d68f8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6b5a:	4604      	mov	r4, r0
   d6b5c:	b910      	cbnz	r0, d6b64 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d6b5e:	f240 229b 	movw	r2, #667	; 0x29b
   d6b62:	e7ee      	b.n	d6b42 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d6b64:	2fff      	cmp	r7, #255	; 0xff
   d6b66:	bfa8      	it	ge
   d6b68:	27ff      	movge	r7, #255	; 0xff
   d6b6a:	2f01      	cmp	r7, #1
   d6b6c:	bfb8      	it	lt
   d6b6e:	2701      	movlt	r7, #1
   d6b70:	2301      	movs	r3, #1
   d6b72:	b2fa      	uxtb	r2, r7
   d6b74:	2119      	movs	r1, #25
   d6b76:	4628      	mov	r0, r5
   d6b78:	f7ff febe 	bl	d68f8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6b7c:	4604      	mov	r4, r0
   d6b7e:	b910      	cbnz	r0, d6b86 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d6b80:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d6b84:	e7dd      	b.n	d6b42 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d6b86:	2301      	movs	r3, #1
   d6b88:	2208      	movs	r2, #8
   d6b8a:	2112      	movs	r1, #18
   d6b8c:	4628      	mov	r0, r5
   d6b8e:	f7ff ffc1 	bl	d6b14 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6b92:	4604      	mov	r4, r0
   d6b94:	b910      	cbnz	r0, d6b9c <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d6b96:	f240 22af 	movw	r2, #687	; 0x2af
   d6b9a:	e7d2      	b.n	d6b42 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d6b9c:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d6b9e:	f04f 0301 	mov.w	r3, #1
   d6ba2:	bf14      	ite	ne
   d6ba4:	2283      	movne	r2, #131	; 0x83
   d6ba6:	2282      	moveq	r2, #130	; 0x82
   d6ba8:	2118      	movs	r1, #24
   d6baa:	4628      	mov	r0, r5
   d6bac:	f7ff fea4 	bl	d68f8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6bb0:	4604      	mov	r4, r0
   d6bb2:	2800      	cmp	r0, #0
   d6bb4:	d1c9      	bne.n	d6b4a <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d6bb6:	f240 22b9 	movw	r2, #697	; 0x2b9
   d6bba:	e7c2      	b.n	d6b42 <_ZN6AB180517setCountdownTimerEib+0x1a>
   d6bbc:	000dca3a 	.word	0x000dca3a
   d6bc0:	2003e4fc 	.word	0x2003e4fc

000d6bc4 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d6bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d6bc8:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d6bca:	4605      	mov	r5, r0
   d6bcc:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d6bce:	484f      	ldr	r0, [pc, #316]	; (d6d0c <_ZN6AB180513deepPowerDownEi+0x148>)
   d6bd0:	494f      	ldr	r1, [pc, #316]	; (d6d10 <_ZN6AB180513deepPowerDownEi+0x14c>)
   d6bd2:	f7fd fcb8 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d6bd6:	2100      	movs	r1, #0
   d6bd8:	4628      	mov	r0, r5
   d6bda:	f7ff fe99 	bl	d6910 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d6bde:	4604      	mov	r4, r0
   d6be0:	b948      	cbnz	r0, d6bf6 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d6be2:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d6be6:	494b      	ldr	r1, [pc, #300]	; (d6d14 <_ZN6AB180513deepPowerDownEi+0x150>)
   d6be8:	4848      	ldr	r0, [pc, #288]	; (d6d0c <_ZN6AB180513deepPowerDownEi+0x148>)
   d6bea:	f7fd fcc3 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
}
   d6bee:	4620      	mov	r0, r4
   d6bf0:	b003      	add	sp, #12
   d6bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d6bf6:	2301      	movs	r3, #1
   d6bf8:	461a      	mov	r2, r3
   d6bfa:	2130      	movs	r1, #48	; 0x30
   d6bfc:	4628      	mov	r0, r5
   d6bfe:	f7ff ff89 	bl	d6b14 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6c02:	4604      	mov	r4, r0
   d6c04:	b910      	cbnz	r0, d6c0c <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d6c06:	f240 2205 	movw	r2, #517	; 0x205
   d6c0a:	e7ec      	b.n	d6be6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d6c0c:	2210      	movs	r2, #16
   d6c0e:	2301      	movs	r3, #1
   d6c10:	4611      	mov	r1, r2
   d6c12:	4628      	mov	r0, r5
   d6c14:	f7ff ff1d 	bl	d6a52 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d6c18:	4604      	mov	r4, r0
   d6c1a:	b910      	cbnz	r0, d6c22 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d6c1c:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d6c20:	e7e1      	b.n	d6be6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d6c22:	2301      	movs	r3, #1
   d6c24:	2226      	movs	r2, #38	; 0x26
   d6c26:	2113      	movs	r1, #19
   d6c28:	4628      	mov	r0, r5
   d6c2a:	f7ff fe65 	bl	d68f8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6c2e:	4604      	mov	r4, r0
   d6c30:	b910      	cbnz	r0, d6c38 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d6c32:	f240 2213 	movw	r2, #531	; 0x213
   d6c36:	e7d6      	b.n	d6be6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d6c38:	2601      	movs	r6, #1
   d6c3a:	9600      	str	r6, [sp, #0]
   d6c3c:	4633      	mov	r3, r6
   d6c3e:	22fc      	movs	r2, #252	; 0xfc
   d6c40:	2111      	movs	r1, #17
   d6c42:	4628      	mov	r0, r5
   d6c44:	f7ff feb8 	bl	d69b8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6c48:	4604      	mov	r4, r0
   d6c4a:	b910      	cbnz	r0, d6c52 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d6c4c:	f240 221b 	movw	r2, #539	; 0x21b
   d6c50:	e7c9      	b.n	d6be6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d6c52:	2200      	movs	r2, #0
   d6c54:	4639      	mov	r1, r7
   d6c56:	4628      	mov	r0, r5
   d6c58:	f7ff ff66 	bl	d6b28 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d6c5c:	4604      	mov	r4, r0
   d6c5e:	b910      	cbnz	r0, d6c66 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d6c60:	f240 2222 	movw	r2, #546	; 0x222
   d6c64:	e7bf      	b.n	d6be6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d6c66:	9600      	str	r6, [sp, #0]
   d6c68:	2302      	movs	r3, #2
   d6c6a:	2277      	movs	r2, #119	; 0x77
   d6c6c:	2110      	movs	r1, #16
   d6c6e:	4628      	mov	r0, r5
   d6c70:	f7ff fea2 	bl	d69b8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6c74:	4604      	mov	r4, r0
   d6c76:	b910      	cbnz	r0, d6c7e <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d6c78:	f240 222b 	movw	r2, #555	; 0x22b
   d6c7c:	e7b3      	b.n	d6be6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d6c7e:	4633      	mov	r3, r6
   d6c80:	2204      	movs	r2, #4
   d6c82:	211c      	movs	r1, #28
   d6c84:	4628      	mov	r0, r5
   d6c86:	f7ff ff45 	bl	d6b14 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6c8a:	4604      	mov	r4, r0
   d6c8c:	b910      	cbnz	r0, d6c94 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d6c8e:	f240 2232 	movw	r2, #562	; 0x232
   d6c92:	e7a8      	b.n	d6be6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d6c94:	9600      	str	r6, [sp, #0]
   d6c96:	2318      	movs	r3, #24
   d6c98:	22e3      	movs	r2, #227	; 0xe3
   d6c9a:	2111      	movs	r1, #17
   d6c9c:	4628      	mov	r0, r5
   d6c9e:	f7ff fe8b 	bl	d69b8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6ca2:	4604      	mov	r4, r0
   d6ca4:	b910      	cbnz	r0, d6cac <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d6ca6:	f240 2239 	movw	r2, #569	; 0x239
   d6caa:	e79c      	b.n	d6be6 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d6cac:	4633      	mov	r3, r6
   d6cae:	22c0      	movs	r2, #192	; 0xc0
   d6cb0:	2117      	movs	r1, #23
   d6cb2:	4628      	mov	r0, r5
   d6cb4:	f7ff fe20 	bl	d68f8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6cb8:	4604      	mov	r4, r0
   d6cba:	b910      	cbnz	r0, d6cc2 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d6cbc:	f44f 7210 	mov.w	r2, #576	; 0x240
   d6cc0:	e791      	b.n	d6be6 <_ZN6AB180513deepPowerDownEi+0x22>
   d6cc2:	f001 f87f 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6cc6:	f8df 9054 	ldr.w	r9, [pc, #84]	; d6d1c <_ZN6AB180513deepPowerDownEi+0x158>
   d6cca:	f8df 8040 	ldr.w	r8, [pc, #64]	; d6d0c <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6cce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6cd2:	4606      	mov	r6, r0
   d6cd4:	434f      	muls	r7, r1
   d6cd6:	f001 f875 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
   d6cda:	1b80      	subs	r0, r0, r6
   d6cdc:	42b8      	cmp	r0, r7
   d6cde:	d20e      	bcs.n	d6cfe <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6ce0:	2201      	movs	r2, #1
   d6ce2:	2117      	movs	r1, #23
   d6ce4:	4628      	mov	r0, r5
   d6ce6:	f7ff fdbd 	bl	d6864 <_ZN6AB180512readRegisterEhb>
   d6cea:	4649      	mov	r1, r9
   d6cec:	4602      	mov	r2, r0
   d6cee:	4640      	mov	r0, r8
   d6cf0:	f7fd fc29 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d6cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6cf8:	f001 fbe4 	bl	d84c4 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6cfc:	e7eb      	b.n	d6cd6 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d6cfe:	4906      	ldr	r1, [pc, #24]	; (d6d18 <_ZN6AB180513deepPowerDownEi+0x154>)
   d6d00:	4802      	ldr	r0, [pc, #8]	; (d6d0c <_ZN6AB180513deepPowerDownEi+0x148>)
   d6d02:	f7fd fc37 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d6d06:	f003 fefd 	bl	dab04 <_ZN11SystemClass5resetEv>
    return true;
   d6d0a:	e770      	b.n	d6bee <_ZN6AB180513deepPowerDownEi+0x2a>
   d6d0c:	2003e4fc 	.word	0x2003e4fc
   d6d10:	000dca65 	.word	0x000dca65
   d6d14:	000dca5a 	.word	0x000dca5a
   d6d18:	000dca8b 	.word	0x000dca8b
   d6d1c:	000dca76 	.word	0x000dca76

000d6d20 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d6d20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6d24:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6d28:	4605      	mov	r5, r0
   d6d2a:	460c      	mov	r4, r1
   d6d2c:	4691      	mov	r9, r2
   d6d2e:	461f      	mov	r7, r3
    if (lock) {
   d6d30:	f1ba 0f00 	cmp.w	sl, #0
   d6d34:	d002      	beq.n	d6d3c <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6d36:	6840      	ldr	r0, [r0, #4]
   d6d38:	f002 f93c 	bl	d8fb4 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6d3c:	b307      	cbz	r7, d6d80 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d6d3e:	2f20      	cmp	r7, #32
   d6d40:	463e      	mov	r6, r7
   d6d42:	bf28      	it	cs
   d6d44:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6d46:	2c7f      	cmp	r4, #127	; 0x7f
   d6d48:	d826      	bhi.n	d6d98 <_ZN6AB18057readRamEjPhjb+0x78>
   d6d4a:	1933      	adds	r3, r6, r4
   d6d4c:	2b80      	cmp	r3, #128	; 0x80
   d6d4e:	d901      	bls.n	d6d54 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d6d50:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6d54:	2301      	movs	r3, #1
   d6d56:	2204      	movs	r2, #4
   d6d58:	213f      	movs	r1, #63	; 0x3f
   d6d5a:	4628      	mov	r0, r5
   d6d5c:	f7ff fe79 	bl	d6a52 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6d60:	2300      	movs	r3, #0
   d6d62:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6d66:	9300      	str	r3, [sp, #0]
   d6d68:	464a      	mov	r2, r9
   d6d6a:	4633      	mov	r3, r6
   d6d6c:	b2c9      	uxtb	r1, r1
   d6d6e:	4628      	mov	r0, r5
   d6d70:	f7ff fce4 	bl	d673c <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6d74:	4680      	mov	r8, r0
   d6d76:	b128      	cbz	r0, d6d84 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6d78:	4434      	add	r4, r6
        dataLen -= count;
   d6d7a:	1bbf      	subs	r7, r7, r6
        data += count;
   d6d7c:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6d7e:	e7dd      	b.n	d6d3c <_ZN6AB18057readRamEjPhjb+0x1c>
   d6d80:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6d84:	f1ba 0f00 	cmp.w	sl, #0
   d6d88:	d002      	beq.n	d6d90 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6d8a:	6868      	ldr	r0, [r5, #4]
   d6d8c:	f002 f91b 	bl	d8fc6 <_ZN7TwoWire6unlockEv>
}
   d6d90:	4640      	mov	r0, r8
   d6d92:	b002      	add	sp, #8
   d6d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6d98:	2301      	movs	r3, #1
   d6d9a:	2204      	movs	r2, #4
   d6d9c:	213f      	movs	r1, #63	; 0x3f
   d6d9e:	4628      	mov	r0, r5
   d6da0:	f7ff feb8 	bl	d6b14 <_ZN6AB180514setRegisterBitEhhb>
   d6da4:	e7dc      	b.n	d6d60 <_ZN6AB18057readRamEjPhjb+0x40>

000d6da6 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6da6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6daa:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6dae:	4605      	mov	r5, r0
   d6db0:	460c      	mov	r4, r1
   d6db2:	4691      	mov	r9, r2
   d6db4:	461f      	mov	r7, r3
    if (lock) {
   d6db6:	f1ba 0f00 	cmp.w	sl, #0
   d6dba:	d002      	beq.n	d6dc2 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d6dbc:	6840      	ldr	r0, [r0, #4]
   d6dbe:	f002 f8f9 	bl	d8fb4 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6dc2:	b307      	cbz	r7, d6e06 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6dc4:	2f1f      	cmp	r7, #31
   d6dc6:	463e      	mov	r6, r7
   d6dc8:	bf28      	it	cs
   d6dca:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6dcc:	2c7f      	cmp	r4, #127	; 0x7f
   d6dce:	d826      	bhi.n	d6e1e <_ZN6AB18058writeRamEjPKhjb+0x78>
   d6dd0:	1933      	adds	r3, r6, r4
   d6dd2:	2b80      	cmp	r3, #128	; 0x80
   d6dd4:	d901      	bls.n	d6dda <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6dd6:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6dda:	2301      	movs	r3, #1
   d6ddc:	2204      	movs	r2, #4
   d6dde:	213f      	movs	r1, #63	; 0x3f
   d6de0:	4628      	mov	r0, r5
   d6de2:	f7ff fe36 	bl	d6a52 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6de6:	2300      	movs	r3, #0
   d6de8:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6dec:	9300      	str	r3, [sp, #0]
   d6dee:	464a      	mov	r2, r9
   d6df0:	4633      	mov	r3, r6
   d6df2:	b2c9      	uxtb	r1, r1
   d6df4:	4628      	mov	r0, r5
   d6df6:	f7ff fd43 	bl	d6880 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d6dfa:	4680      	mov	r8, r0
   d6dfc:	b128      	cbz	r0, d6e0a <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d6dfe:	4434      	add	r4, r6
        dataLen -= count;
   d6e00:	1bbf      	subs	r7, r7, r6
        data += count;
   d6e02:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6e04:	e7dd      	b.n	d6dc2 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d6e06:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6e0a:	f1ba 0f00 	cmp.w	sl, #0
   d6e0e:	d002      	beq.n	d6e16 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d6e10:	6868      	ldr	r0, [r5, #4]
   d6e12:	f002 f8d8 	bl	d8fc6 <_ZN7TwoWire6unlockEv>
}
   d6e16:	4640      	mov	r0, r8
   d6e18:	b002      	add	sp, #8
   d6e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6e1e:	2301      	movs	r3, #1
   d6e20:	2204      	movs	r2, #4
   d6e22:	213f      	movs	r1, #63	; 0x3f
   d6e24:	4628      	mov	r0, r5
   d6e26:	f7ff fe75 	bl	d6b14 <_ZN6AB180514setRegisterBitEhhb>
   d6e2a:	e7dc      	b.n	d6de6 <_ZN6AB18058writeRamEjPKhjb+0x40>

000d6e2c <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d6e2c:	b530      	push	{r4, r5, lr}
   d6e2e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6e30:	680d      	ldr	r5, [r1, #0]
   d6e32:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6e36:	9503      	str	r5, [sp, #12]
   d6e38:	684d      	ldr	r5, [r1, #4]
   d6e3a:	9502      	str	r5, [sp, #8]
   d6e3c:	688d      	ldr	r5, [r1, #8]
   d6e3e:	9501      	str	r5, [sp, #4]
   d6e40:	68c9      	ldr	r1, [r1, #12]
   d6e42:	9100      	str	r1, [sp, #0]
   d6e44:	3301      	adds	r3, #1
   d6e46:	4904      	ldr	r1, [pc, #16]	; (d6e58 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6e48:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d6e4c:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6e4e:	f003 fdeb 	bl	daa28 <_ZN6String6formatEPKcz>
}
   d6e52:	4620      	mov	r0, r4
   d6e54:	b005      	add	sp, #20
   d6e56:	bd30      	pop	{r4, r5, pc}
   d6e58:	000dca9d 	.word	0x000dca9d

000d6e5c <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6e5c:	1103      	asrs	r3, r0, #4
}
   d6e5e:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6e60:	f000 000f 	and.w	r0, r0, #15
}
   d6e64:	fb02 0003 	mla	r0, r2, r3, r0
   d6e68:	4770      	bx	lr

000d6e6a <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6e6a:	b538      	push	{r3, r4, r5, lr}
   d6e6c:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d6e6e:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6e70:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d6e72:	f7ff fff3 	bl	d6e5c <_ZN6AB180510bcdToValueEh>
   d6e76:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6e78:	7860      	ldrb	r0, [r4, #1]
   d6e7a:	f7ff ffef 	bl	d6e5c <_ZN6AB180510bcdToValueEh>
   d6e7e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6e80:	78a0      	ldrb	r0, [r4, #2]
   d6e82:	f7ff ffeb 	bl	d6e5c <_ZN6AB180510bcdToValueEh>
   d6e86:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6e88:	78e0      	ldrb	r0, [r4, #3]
   d6e8a:	f7ff ffe7 	bl	d6e5c <_ZN6AB180510bcdToValueEh>
   d6e8e:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6e90:	7920      	ldrb	r0, [r4, #4]
   d6e92:	f7ff ffe3 	bl	d6e5c <_ZN6AB180510bcdToValueEh>
   d6e96:	3801      	subs	r0, #1
   d6e98:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6e9a:	b92d      	cbnz	r5, d6ea8 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6e9c:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d6e9e:	7828      	ldrb	r0, [r5, #0]
   d6ea0:	f7ff ffdc 	bl	d6e5c <_ZN6AB180510bcdToValueEh>
   d6ea4:	6188      	str	r0, [r1, #24]
}
   d6ea6:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6ea8:	7960      	ldrb	r0, [r4, #5]
   d6eaa:	f7ff ffd7 	bl	d6e5c <_ZN6AB180510bcdToValueEh>
   d6eae:	3064      	adds	r0, #100	; 0x64
   d6eb0:	1da5      	adds	r5, r4, #6
   d6eb2:	6148      	str	r0, [r1, #20]
   d6eb4:	e7f3      	b.n	d6e9e <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6eb8 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6eb8:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6eba:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6ebc:	b088      	sub	sp, #32
   d6ebe:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6ec0:	461a      	mov	r2, r3
   d6ec2:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6ec4:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6ec6:	f7ff fda6 	bl	d6a16 <_ZN6AB180510isBitClearEhhb>
   d6eca:	b1f0      	cbz	r0, d6f0a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6ecc:	2308      	movs	r3, #8
   d6ece:	2601      	movs	r6, #1
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	9600      	str	r6, [sp, #0]
   d6ed4:	eb0d 0203 	add.w	r2, sp, r3
   d6ed8:	2100      	movs	r1, #0
   d6eda:	f7ff fc2f 	bl	d673c <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d6ede:	4604      	mov	r4, r0
   d6ee0:	b198      	cbz	r0, d6f0a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d6ee2:	4632      	mov	r2, r6
   d6ee4:	4629      	mov	r1, r5
   d6ee6:	f10d 0009 	add.w	r0, sp, #9
   d6eea:	f7ff ffbe 	bl	d6e6a <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d6eee:	a804      	add	r0, sp, #16
   d6ef0:	f7ff ff9c 	bl	d6e2c <_ZN6AB180510tmToStringEPK2tm>
   d6ef4:	4808      	ldr	r0, [pc, #32]	; (d6f18 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d6ef6:	9a04      	ldr	r2, [sp, #16]
   d6ef8:	4908      	ldr	r1, [pc, #32]	; (d6f1c <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d6efa:	f7fd fb24 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d6efe:	a804      	add	r0, sp, #16
   d6f00:	f003 fcc6 	bl	da890 <_ZN6StringD1Ev>
}
   d6f04:	4620      	mov	r0, r4
   d6f06:	b008      	add	sp, #32
   d6f08:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d6f0a:	2224      	movs	r2, #36	; 0x24
   d6f0c:	2100      	movs	r1, #0
   d6f0e:	4628      	mov	r0, r5
   d6f10:	f005 f896 	bl	dc040 <memset>
   d6f14:	2400      	movs	r4, #0
   d6f16:	e7f5      	b.n	d6f04 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d6f18:	2003e4fc 	.word	0x2003e4fc
   d6f1c:	000dcabb 	.word	0x000dcabb

000d6f20 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d6f20:	b530      	push	{r4, r5, lr}
   d6f22:	b08b      	sub	sp, #44	; 0x2c
   d6f24:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6f26:	a901      	add	r1, sp, #4
   d6f28:	f7ff ffc6 	bl	d6eb8 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d6f2c:	4604      	mov	r4, r0
   d6f2e:	b120      	cbz	r0, d6f3a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d6f30:	a801      	add	r0, sp, #4
   d6f32:	f001 fab3 	bl	d849c <mktime>
   d6f36:	e9c5 0100 	strd	r0, r1, [r5]
}
   d6f3a:	4620      	mov	r0, r4
   d6f3c:	b00b      	add	sp, #44	; 0x2c
   d6f3e:	bd30      	pop	{r4, r5, pc}

000d6f40 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d6f40:	b510      	push	{r4, lr}
   d6f42:	4604      	mov	r4, r0
   d6f44:	b088      	sub	sp, #32
    if (callBegin) {
   d6f46:	b111      	cbz	r1, d6f4e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d6f48:	6840      	ldr	r0, [r0, #4]
   d6f4a:	f001 ffdb 	bl	d8f04 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d6f4e:	4620      	mov	r0, r4
   d6f50:	f7ff fc4a 	bl	d67e8 <_ZN6AB180510detectChipEv>
   d6f54:	b370      	cbz	r0, d6fb4 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6f56:	4620      	mov	r0, r4
   d6f58:	f7ff fd86 	bl	d6a68 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6f5c:	2301      	movs	r3, #1
   d6f5e:	461a      	mov	r2, r3
   d6f60:	2110      	movs	r1, #16
   d6f62:	4620      	mov	r0, r4
   d6f64:	f7ff fd57 	bl	d6a16 <_ZN6AB180510isBitClearEhhb>
   d6f68:	b1d8      	cbz	r0, d6fa2 <_ZN6AB18055setupEb+0x62>
   d6f6a:	f004 f805 	bl	daf78 <_ZN9TimeClass7isValidEv>
   d6f6e:	b9c0      	cbnz	r0, d6fa2 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6f70:	a902      	add	r1, sp, #8
   d6f72:	4620      	mov	r0, r4
   d6f74:	f7ff ffd4 	bl	d6f20 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6f7c:	f003 ff02 	bl	dad84 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6f80:	4b0f      	ldr	r3, [pc, #60]	; (d6fc0 <_ZN6AB18055setupEb+0x80>)
   d6f82:	4910      	ldr	r1, [pc, #64]	; (d6fc4 <_ZN6AB18055setupEb+0x84>)
   d6f84:	681b      	ldr	r3, [r3, #0]
   d6f86:	9300      	str	r3, [sp, #0]
   d6f88:	a804      	add	r0, sp, #16
   d6f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6f8e:	f003 ffb1 	bl	daef4 <_ZN9TimeClass6formatExPKc>
   d6f92:	480d      	ldr	r0, [pc, #52]	; (d6fc8 <_ZN6AB18055setupEb+0x88>)
   d6f94:	9a04      	ldr	r2, [sp, #16]
   d6f96:	490d      	ldr	r1, [pc, #52]	; (d6fcc <_ZN6AB18055setupEb+0x8c>)
   d6f98:	f7fd fad5 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d6f9c:	a804      	add	r0, sp, #16
   d6f9e:	f003 fc77 	bl	da890 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6fa2:	4a0b      	ldr	r2, [pc, #44]	; (d6fd0 <_ZN6AB18055setupEb+0x90>)
   d6fa4:	2300      	movs	r3, #0
   d6fa6:	2100      	movs	r1, #0
   d6fa8:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6fac:	f001 f8e4 	bl	d8178 <system_subscribe_event>
}
   d6fb0:	b008      	add	sp, #32
   d6fb2:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6fb4:	4907      	ldr	r1, [pc, #28]	; (d6fd4 <_ZN6AB18055setupEb+0x94>)
   d6fb6:	4804      	ldr	r0, [pc, #16]	; (d6fc8 <_ZN6AB18055setupEb+0x88>)
   d6fb8:	f7fd fadc 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
   d6fbc:	e7f1      	b.n	d6fa2 <_ZN6AB18055setupEb+0x62>
   d6fbe:	bf00      	nop
   d6fc0:	2003e2ac 	.word	0x2003e2ac
   d6fc4:	2003e634 	.word	0x2003e634
   d6fc8:	2003e4fc 	.word	0x2003e4fc
   d6fcc:	000dcac9 	.word	0x000dcac9
   d6fd0:	000d6995 	.word	0x000d6995
   d6fd4:	000dcae6 	.word	0x000dcae6

000d6fd8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6fd8:	220a      	movs	r2, #10
   d6fda:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d6fde:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d6fe2:	fb93 f1f2 	sdiv	r1, r3, r2
   d6fe6:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6fea:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d6fee:	b2c0      	uxtb	r0, r0
   d6ff0:	4770      	bx	lr

000d6ff2 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6ff2:	b570      	push	{r4, r5, r6, lr}
   d6ff4:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6ff6:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6ff8:	460c      	mov	r4, r1
   d6ffa:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6ffc:	f7ff ffec 	bl	d6fd8 <_ZN6AB180510valueToBcdEi>
   d7000:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d7002:	6868      	ldr	r0, [r5, #4]
   d7004:	f7ff ffe8 	bl	d6fd8 <_ZN6AB180510valueToBcdEi>
   d7008:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d700a:	68a8      	ldr	r0, [r5, #8]
   d700c:	f7ff ffe4 	bl	d6fd8 <_ZN6AB180510valueToBcdEi>
   d7010:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d7012:	68e8      	ldr	r0, [r5, #12]
   d7014:	f7ff ffe0 	bl	d6fd8 <_ZN6AB180510valueToBcdEi>
   d7018:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d701a:	6928      	ldr	r0, [r5, #16]
   d701c:	3001      	adds	r0, #1
   d701e:	f7ff ffdb 	bl	d6fd8 <_ZN6AB180510valueToBcdEi>
   d7022:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d7024:	b92e      	cbnz	r6, d7032 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d7026:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d7028:	69a8      	ldr	r0, [r5, #24]
   d702a:	f7ff ffd5 	bl	d6fd8 <_ZN6AB180510valueToBcdEi>
   d702e:	7030      	strb	r0, [r6, #0]
}
   d7030:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d7032:	696a      	ldr	r2, [r5, #20]
   d7034:	2364      	movs	r3, #100	; 0x64
   d7036:	fb92 f0f3 	sdiv	r0, r2, r3
   d703a:	fb03 2010 	mls	r0, r3, r0, r2
   d703e:	f7ff ffcb 	bl	d6fd8 <_ZN6AB180510valueToBcdEi>
   d7042:	1da6      	adds	r6, r4, #6
   d7044:	7160      	strb	r0, [r4, #5]
   d7046:	e7ef      	b.n	d7028 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d7048 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d7048:	b5f0      	push	{r4, r5, r6, r7, lr}
   d704a:	b087      	sub	sp, #28
   d704c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d704e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d7050:	4616      	mov	r6, r2
   d7052:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d7054:	f7ff feea 	bl	d6e2c <_ZN6AB180510tmToStringEPK2tm>
   d7058:	481e      	ldr	r0, [pc, #120]	; (d70d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d705a:	9a02      	ldr	r2, [sp, #8]
   d705c:	491e      	ldr	r1, [pc, #120]	; (d70d8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d705e:	f7fd fa72 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d7062:	a802      	add	r0, sp, #8
   d7064:	f003 fc14 	bl	da890 <_ZN6StringD1Ev>
    if (lock) {
   d7068:	b116      	cbz	r6, d7070 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d706a:	6868      	ldr	r0, [r5, #4]
   d706c:	f001 ffa2 	bl	d8fb4 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d7070:	4620      	mov	r0, r4
   d7072:	2201      	movs	r2, #1
   d7074:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d7078:	2700      	movs	r7, #0
   d707a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d707e:	f7ff ffb8 	bl	d6ff2 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d7082:	2301      	movs	r3, #1
   d7084:	461a      	mov	r2, r3
   d7086:	2110      	movs	r1, #16
   d7088:	4628      	mov	r0, r5
   d708a:	f7ff fd43 	bl	d6b14 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d708e:	4604      	mov	r4, r0
   d7090:	b1e8      	cbz	r0, d70ce <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d7092:	2308      	movs	r3, #8
   d7094:	9700      	str	r7, [sp, #0]
   d7096:	eb0d 0203 	add.w	r2, sp, r3
   d709a:	4639      	mov	r1, r7
   d709c:	4628      	mov	r0, r5
   d709e:	f7ff fbef 	bl	d6880 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d70a2:	4604      	mov	r4, r0
   d70a4:	b160      	cbz	r0, d70c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d70a6:	2301      	movs	r3, #1
   d70a8:	461a      	mov	r2, r3
   d70aa:	2110      	movs	r1, #16
   d70ac:	4628      	mov	r0, r5
   d70ae:	f7ff fcd0 	bl	d6a52 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d70b2:	b116      	cbz	r6, d70ba <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d70b4:	6868      	ldr	r0, [r5, #4]
   d70b6:	f001 ff86 	bl	d8fc6 <_ZN7TwoWire6unlockEv>
}
   d70ba:	4620      	mov	r0, r4
   d70bc:	b007      	add	sp, #28
   d70be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d70c0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d70c4:	4905      	ldr	r1, [pc, #20]	; (d70dc <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d70c6:	4803      	ldr	r0, [pc, #12]	; (d70d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d70c8:	f7fd fa54 	bl	d4574 <_ZNK5spark6Logger5errorEPKcz>
   d70cc:	e7f1      	b.n	d70b2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d70ce:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d70d2:	e7f7      	b.n	d70c4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d70d4:	2003e4fc 	.word	0x2003e4fc
   d70d8:	000dcafe 	.word	0x000dcafe
   d70dc:	000dcb0c 	.word	0x000dcb0c

000d70e0 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d70e0:	b513      	push	{r0, r1, r4, lr}
   d70e2:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d70e4:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d70e6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d70ea:	f004 ff6f 	bl	dbfcc <gmtime>
    return setRtcFromTm(tm, lock);
   d70ee:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d70f2:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d70f4:	4620      	mov	r0, r4
   d70f6:	f7ff ffa7 	bl	d7048 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d70fa:	b002      	add	sp, #8
   d70fc:	bd10      	pop	{r4, pc}
	...

000d7100 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d7100:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d7102:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d7104:	b089      	sub	sp, #36	; 0x24
   d7106:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d7108:	bb75      	cbnz	r5, d7168 <_ZN6AB18054loopEv+0x68>
   d710a:	f003 ff35 	bl	daf78 <_ZN9TimeClass7isValidEv>
   d710e:	b358      	cbz	r0, d7168 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d7110:	2600      	movs	r6, #0
   d7112:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d7114:	a904      	add	r1, sp, #16
   d7116:	4628      	mov	r0, r5
        tm = 0;
   d7118:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d711c:	f001 f8de 	bl	d82dc <spark_sync_time_last>
   d7120:	b310      	cbz	r0, d7168 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d7122:	2501      	movs	r5, #1
   d7124:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d7126:	f003 ff44 	bl	dafb2 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d712a:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d712c:	4602      	mov	r2, r0
   d712e:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d7130:	4620      	mov	r0, r4
        time_t time = Time.now();
   d7132:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d7136:	f7ff ffd3 	bl	d70e0 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d713a:	a902      	add	r1, sp, #8
   d713c:	4620      	mov	r0, r4
        time = 0;
   d713e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d7142:	f7ff feed 	bl	d6f20 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d7146:	4b12      	ldr	r3, [pc, #72]	; (d7190 <_ZN6AB18054loopEv+0x90>)
   d7148:	4912      	ldr	r1, [pc, #72]	; (d7194 <_ZN6AB18054loopEv+0x94>)
   d714a:	681b      	ldr	r3, [r3, #0]
   d714c:	9300      	str	r3, [sp, #0]
   d714e:	a804      	add	r0, sp, #16
   d7150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7154:	f003 fece 	bl	daef4 <_ZN9TimeClass6formatExPKc>
   d7158:	480f      	ldr	r0, [pc, #60]	; (d7198 <_ZN6AB18054loopEv+0x98>)
   d715a:	9a04      	ldr	r2, [sp, #16]
   d715c:	490f      	ldr	r1, [pc, #60]	; (d719c <_ZN6AB18054loopEv+0x9c>)
   d715e:	f7fd f9f2 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
   d7162:	a804      	add	r0, sp, #16
   d7164:	f003 fb94 	bl	da890 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d7168:	6963      	ldr	r3, [r4, #20]
   d716a:	b173      	cbz	r3, d718a <_ZN6AB18054loopEv+0x8a>
   d716c:	f000 fe2a 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d7170:	6923      	ldr	r3, [r4, #16]
   d7172:	1ac0      	subs	r0, r0, r3
   d7174:	6963      	ldr	r3, [r4, #20]
   d7176:	4298      	cmp	r0, r3
   d7178:	d307      	bcc.n	d718a <_ZN6AB18054loopEv+0x8a>
   d717a:	f000 fe23 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d717e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d7182:	6120      	str	r0, [r4, #16]
            setWDT();
   d7184:	4620      	mov	r0, r4
   d7186:	f7ff fbc3 	bl	d6910 <_ZN6AB18056setWDTEi>
}
   d718a:	b009      	add	sp, #36	; 0x24
   d718c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d718e:	bf00      	nop
   d7190:	2003e2ac 	.word	0x2003e2ac
   d7194:	2003e634 	.word	0x2003e634
   d7198:	2003e4fc 	.word	0x2003e4fc
   d719c:	000dcb27 	.word	0x000dcb27

000d71a0 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d71a0:	4b01      	ldr	r3, [pc, #4]	; (d71a8 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d71a2:	4a02      	ldr	r2, [pc, #8]	; (d71ac <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d71a4:	601a      	str	r2, [r3, #0]
}
   d71a6:	4770      	bx	lr
   d71a8:	2003e4fc 	.word	0x2003e4fc
   d71ac:	000dcb3d 	.word	0x000dcb3d

000d71b0 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d71b0:	4770      	bx	lr

000d71b2 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d71b2:	b510      	push	{r4, lr}
}
   d71b4:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d71b6:	4604      	mov	r4, r0
}
   d71b8:	f004 fa2d 	bl	db616 <_ZdlPvj>
   d71bc:	4620      	mov	r0, r4
   d71be:	bd10      	pop	{r4, pc}

000d71c0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d71c0:	6803      	ldr	r3, [r0, #0]
   d71c2:	b2c9      	uxtb	r1, r1
   d71c4:	689b      	ldr	r3, [r3, #8]
   d71c6:	4718      	bx	r3

000d71c8 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d71c8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d71ca:	4d03      	ldr	r5, [pc, #12]	; (d71d8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d71cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d71d0:	e9c0 5100 	strd	r5, r1, [r0]
}
   d71d4:	bd30      	pop	{r4, r5, pc}
   d71d6:	bf00      	nop
   d71d8:	000dcb94 	.word	0x000dcb94

000d71dc <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d71dc:	6840      	ldr	r0, [r0, #4]
   d71de:	f001 be91 	b.w	d8f04 <_ZN7TwoWire5beginEv>

000d71e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d71e2:	b510      	push	{r4, lr}
   d71e4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d71e6:	6800      	ldr	r0, [r0, #0]
   d71e8:	f001 feed 	bl	d8fc6 <_ZN7TwoWire6unlockEv>
   d71ec:	4620      	mov	r0, r4
   d71ee:	bd10      	pop	{r4, pc}

000d71f0 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d71f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d71f4:	b08a      	sub	sp, #40	; 0x28
   d71f6:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d71f8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d71fa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d71fc:	f001 feda 	bl	d8fb4 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7200:	221e      	movs	r2, #30
   d7202:	2100      	movs	r1, #0
   d7204:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d7206:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d7208:	f004 ff1a 	bl	dc040 <memset>
		size_t framAddr = 0;
   d720c:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d720e:	b1ef      	cbz	r7, d724c <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7210:	6823      	ldr	r3, [r4, #0]
   d7212:	2f1e      	cmp	r7, #30
   d7214:	46b8      	mov	r8, r7
   d7216:	bf28      	it	cs
   d7218:	f04f 081e 	movcs.w	r8, #30
   d721c:	68dd      	ldr	r5, [r3, #12]
   d721e:	aa02      	add	r2, sp, #8
   d7220:	4643      	mov	r3, r8
   d7222:	4631      	mov	r1, r6
   d7224:	4620      	mov	r0, r4
   d7226:	47a8      	blx	r5
			if (!result) {
   d7228:	4605      	mov	r5, r0
   d722a:	b958      	cbnz	r0, d7244 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d722c:	480a      	ldr	r0, [pc, #40]	; (d7258 <_ZN6MB85RC5eraseEv+0x68>)
   d722e:	490b      	ldr	r1, [pc, #44]	; (d725c <_ZN6MB85RC5eraseEv+0x6c>)
   d7230:	4632      	mov	r2, r6
   d7232:	f7fd f988 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7236:	a801      	add	r0, sp, #4
   d7238:	f7ff ffd3 	bl	d71e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d723c:	4628      	mov	r0, r5
   d723e:	b00a      	add	sp, #40	; 0x28
   d7240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7244:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d7248:	4446      	add	r6, r8
		while(totalLen > 0) {
   d724a:	e7e0      	b.n	d720e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d724c:	a801      	add	r0, sp, #4
   d724e:	f7ff ffc8 	bl	d71e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d7252:	2501      	movs	r5, #1
   d7254:	e7f2      	b.n	d723c <_ZN6MB85RC5eraseEv+0x4c>
   d7256:	bf00      	nop
   d7258:	2003e5e0 	.word	0x2003e5e0
   d725c:	000dcb60 	.word	0x000dcb60

000d7260 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7264:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7266:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7268:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d726a:	460d      	mov	r5, r1
   d726c:	4616      	mov	r6, r2
   d726e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d7270:	f001 fea0 	bl	d8fb4 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7274:	b1a7      	cbz	r7, d72a0 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7276:	68e1      	ldr	r1, [r4, #12]
   d7278:	6860      	ldr	r0, [r4, #4]
   d727a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d727e:	f001 fe77 	bl	d8f70 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7282:	0a29      	lsrs	r1, r5, #8
   d7284:	6860      	ldr	r0, [r4, #4]
   d7286:	f7ff ff9b 	bl	d71c0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d728a:	4629      	mov	r1, r5
   d728c:	6860      	ldr	r0, [r4, #4]
   d728e:	f7ff ff97 	bl	d71c0 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d7292:	6860      	ldr	r0, [r4, #4]
   d7294:	2100      	movs	r1, #0
   d7296:	f001 fe86 	bl	d8fa6 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d729a:	b148      	cbz	r0, d72b0 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d729c:	2400      	movs	r4, #0
   d729e:	e000      	b.n	d72a2 <_ZN6MB85RC8readDataEjPhj+0x42>
   d72a0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d72a2:	a801      	add	r0, sp, #4
   d72a4:	f7ff ff9d 	bl	d71e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d72a8:	4620      	mov	r0, r4
   d72aa:	b003      	add	sp, #12
   d72ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d72b0:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d72b2:	7b21      	ldrb	r1, [r4, #12]
   d72b4:	6860      	ldr	r0, [r4, #4]
   d72b6:	46b8      	mov	r8, r7
   d72b8:	bf28      	it	cs
   d72ba:	f04f 0820 	movcs.w	r8, #32
   d72be:	2301      	movs	r3, #1
   d72c0:	4642      	mov	r2, r8
   d72c2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d72c6:	f001 fe3a 	bl	d8f3e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d72ca:	f004 f94f 	bl	db56c <_Z19__fetch_global_Wirev>
   d72ce:	6803      	ldr	r3, [r0, #0]
   d72d0:	691b      	ldr	r3, [r3, #16]
   d72d2:	4798      	blx	r3
   d72d4:	4540      	cmp	r0, r8
   d72d6:	dbe1      	blt.n	d729c <_ZN6MB85RC8readDataEjPhj+0x3c>
   d72d8:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d72dc:	f004 f946 	bl	db56c <_Z19__fetch_global_Wirev>
   d72e0:	6803      	ldr	r3, [r0, #0]
   d72e2:	695b      	ldr	r3, [r3, #20]
   d72e4:	4798      	blx	r3
   d72e6:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d72ea:	454e      	cmp	r6, r9
   d72ec:	d1f6      	bne.n	d72dc <_ZN6MB85RC8readDataEjPhj+0x7c>
   d72ee:	4445      	add	r5, r8
   d72f0:	eba7 0708 	sub.w	r7, r7, r8
   d72f4:	e7be      	b.n	d7274 <_ZN6MB85RC8readDataEjPhj+0x14>

000d72f6 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d72f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d72fa:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d72fc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72fe:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7300:	460e      	mov	r6, r1
   d7302:	4690      	mov	r8, r2
   d7304:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d7306:	f001 fe55 	bl	d8fb4 <_ZN7TwoWire4lockEv>
   d730a:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d730e:	f1b9 0f00 	cmp.w	r9, #0
   d7312:	d02a      	beq.n	d736a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7314:	b34d      	cbz	r5, d736a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7316:	68e1      	ldr	r1, [r4, #12]
   d7318:	6860      	ldr	r0, [r4, #4]
   d731a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d731e:	f001 fe27 	bl	d8f70 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7322:	0a31      	lsrs	r1, r6, #8
   d7324:	6860      	ldr	r0, [r4, #4]
   d7326:	f7ff ff4b 	bl	d71c0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d732a:	6860      	ldr	r0, [r4, #4]
   d732c:	4631      	mov	r1, r6
   d732e:	f7ff ff47 	bl	d71c0 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7332:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7336:	4647      	mov	r7, r8
   d7338:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d733c:	6860      	ldr	r0, [r4, #4]
   d733e:	f817 1b01 	ldrb.w	r1, [r7], #1
   d7342:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7344:	3d01      	subs	r5, #1
				wire.write(*data);
   d7346:	689b      	ldr	r3, [r3, #8]
   d7348:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d734a:	4555      	cmp	r5, sl
   d734c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d7350:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7352:	d001      	beq.n	d7358 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7354:	2d00      	cmp	r5, #0
   d7356:	d1f1      	bne.n	d733c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7358:	6860      	ldr	r0, [r4, #4]
   d735a:	2101      	movs	r1, #1
   d735c:	f001 fe23 	bl	d8fa6 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7360:	2800      	cmp	r0, #0
   d7362:	d0d7      	beq.n	d7314 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7364:	f04f 0900 	mov.w	r9, #0
   d7368:	e7d1      	b.n	d730e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d736a:	a801      	add	r0, sp, #4
   d736c:	f7ff ff39 	bl	d71e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d7370:	4648      	mov	r0, r9
   d7372:	b003      	add	sp, #12
   d7374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7378 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d737c:	b08b      	sub	sp, #44	; 0x2c
   d737e:	460e      	mov	r6, r1
   d7380:	4615      	mov	r5, r2
   d7382:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d7384:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7386:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7388:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d738a:	f001 fe13 	bl	d8fb4 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d738e:	42ae      	cmp	r6, r5
   d7390:	d229      	bcs.n	d73e6 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d7392:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d7394:	4425      	add	r5, r4
			while(numBytes > 0) {
   d7396:	b18c      	cbz	r4, d73bc <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d7398:	2c1e      	cmp	r4, #30
   d739a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d739c:	f8d8 3000 	ldr.w	r3, [r8]
   d73a0:	bf28      	it	cs
   d73a2:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d73a4:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d73a6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d73aa:	aa02      	add	r2, sp, #8
   d73ac:	463b      	mov	r3, r7
   d73ae:	4631      	mov	r1, r6
   d73b0:	4640      	mov	r0, r8
				framAddrTo -= count;
   d73b2:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d73b4:	47c8      	blx	r9
				if (!result) {
   d73b6:	b948      	cbnz	r0, d73cc <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d73b8:	2400      	movs	r4, #0
   d73ba:	e000      	b.n	d73be <_ZN6MB85RC8moveDataEjjj+0x46>
   d73bc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d73be:	a801      	add	r0, sp, #4
   d73c0:	f7ff ff0f 	bl	d71e2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d73c4:	4620      	mov	r0, r4
   d73c6:	b00b      	add	sp, #44	; 0x2c
   d73c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d73cc:	f8d8 3000 	ldr.w	r3, [r8]
   d73d0:	aa02      	add	r2, sp, #8
   d73d2:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d73d6:	4629      	mov	r1, r5
   d73d8:	463b      	mov	r3, r7
   d73da:	4640      	mov	r0, r8
   d73dc:	47c8      	blx	r9
				if (!result) {
   d73de:	2800      	cmp	r0, #0
   d73e0:	d0ea      	beq.n	d73b8 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d73e2:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d73e4:	e7d7      	b.n	d7396 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d73e6:	d9e9      	bls.n	d73bc <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d73e8:	2c00      	cmp	r4, #0
   d73ea:	d0e7      	beq.n	d73bc <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d73ec:	f8d8 3000 	ldr.w	r3, [r8]
   d73f0:	2c1e      	cmp	r4, #30
   d73f2:	4627      	mov	r7, r4
   d73f4:	bf28      	it	cs
   d73f6:	271e      	movcs	r7, #30
   d73f8:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d73fc:	aa02      	add	r2, sp, #8
   d73fe:	463b      	mov	r3, r7
   d7400:	4631      	mov	r1, r6
   d7402:	4640      	mov	r0, r8
   d7404:	47c8      	blx	r9
				if (!result) {
   d7406:	2800      	cmp	r0, #0
   d7408:	d0d6      	beq.n	d73b8 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d740a:	f8d8 3000 	ldr.w	r3, [r8]
   d740e:	aa02      	add	r2, sp, #8
   d7410:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7414:	4629      	mov	r1, r5
   d7416:	463b      	mov	r3, r7
   d7418:	4640      	mov	r0, r8
   d741a:	47c8      	blx	r9
				if (!result) {
   d741c:	2800      	cmp	r0, #0
   d741e:	d0cb      	beq.n	d73b8 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d7420:	443e      	add	r6, r7
				framAddrTo += count;
   d7422:	443d      	add	r5, r7
				numBytes -= count;
   d7424:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7426:	e7df      	b.n	d73e8 <_ZN6MB85RC8moveDataEjjj+0x70>

000d7428 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d7428:	6803      	ldr	r3, [r0, #0]
   d742a:	b2c9      	uxtb	r1, r1
   d742c:	689b      	ldr	r3, [r3, #8]
   d742e:	4718      	bx	r3

000d7430 <_ZN8MMA8452QC1Eh>:
//   supplied address into a private variable for future use.
//   The variable addr should be either 0x1C or 0x1D, depending on which voltage
//   the SA0 pin is tied to (GND or 3.3V respectively).
MMA8452Q::MMA8452Q(byte addr)
{
	address = addr; // Store address into private variable
   d7430:	7501      	strb	r1, [r0, #20]
}
   d7432:	4770      	bx	lr

000d7434 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>:

// WRITE MULTIPLE REGISTERS
//	Write an array of "len" bytes ("buffer"), starting at register "reg", and
//	auto-incrmenting to the next.
void MMA8452Q::writeRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
   d7434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7436:	4607      	mov	r7, r0
   d7438:	460c      	mov	r4, r1
   d743a:	4615      	mov	r5, r2
   d743c:	461e      	mov	r6, r3
	Wire.beginTransmission(address);
   d743e:	f004 f895 	bl	db56c <_Z19__fetch_global_Wirev>
   d7442:	7d39      	ldrb	r1, [r7, #20]
   d7444:	f001 fd90 	bl	d8f68 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d7448:	f004 f890 	bl	db56c <_Z19__fetch_global_Wirev>
   d744c:	4621      	mov	r1, r4
   d744e:	f7ff ffeb 	bl	d7428 <_ZN7TwoWire5writeEi>
	for (int x = 0; x < len; x++)
   d7452:	2400      	movs	r4, #0
   d7454:	42a6      	cmp	r6, r4
   d7456:	dd07      	ble.n	d7468 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x34>
		Wire.write(buffer[x]);
   d7458:	f004 f888 	bl	db56c <_Z19__fetch_global_Wirev>
   d745c:	6803      	ldr	r3, [r0, #0]
   d745e:	5d29      	ldrb	r1, [r5, r4]
   d7460:	689b      	ldr	r3, [r3, #8]
   d7462:	4798      	blx	r3
	for (int x = 0; x < len; x++)
   d7464:	3401      	adds	r4, #1
   d7466:	e7f5      	b.n	d7454 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x20>
	Wire.endTransmission(); //Stop transmitting
   d7468:	f004 f880 	bl	db56c <_Z19__fetch_global_Wirev>
}
   d746c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Wire.endTransmission(); //Stop transmitting
   d7470:	f001 bd9d 	b.w	d8fae <_ZN7TwoWire15endTransmissionEv>

000d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>:
{
   d7474:	b507      	push	{r0, r1, r2, lr}
	writeRegisters(reg, &data, 1);
   d7476:	2301      	movs	r3, #1
{
   d7478:	f88d 2007 	strb.w	r2, [sp, #7]
	writeRegisters(reg, &data, 1);
   d747c:	f10d 0207 	add.w	r2, sp, #7
   d7480:	f7ff ffd8 	bl	d7434 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>
}
   d7484:	b003      	add	sp, #12
   d7486:	f85d fb04 	ldr.w	pc, [sp], #4

000d748a <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:

// READ A SINGLE REGISTER
//	Read a byte from the MMA8452Q register "reg".
byte MMA8452Q::readRegister(MMA8452Q_Register reg)
{
   d748a:	b538      	push	{r3, r4, r5, lr}
   d748c:	4604      	mov	r4, r0
   d748e:	460d      	mov	r5, r1
	Wire.beginTransmission(address);
   d7490:	f004 f86c 	bl	db56c <_Z19__fetch_global_Wirev>
   d7494:	7d21      	ldrb	r1, [r4, #20]
   d7496:	f001 fd67 	bl	d8f68 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d749a:	f004 f867 	bl	db56c <_Z19__fetch_global_Wirev>
   d749e:	4629      	mov	r1, r5
   d74a0:	f7ff ffc2 	bl	d7428 <_ZN7TwoWire5writeEi>
	//endTransmission but keep the connection active
	if (Wire.endTransmission(false) == 0)
   d74a4:	f004 f862 	bl	db56c <_Z19__fetch_global_Wirev>
   d74a8:	2100      	movs	r1, #0
   d74aa:	f001 fd7c 	bl	d8fa6 <_ZN7TwoWire15endTransmissionEh>
   d74ae:	b108      	cbz	r0, d74b4 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x2a>
        //Ask for 1 byte, once done, bus is released by default
    	if (Wire.requestFrom(address, 1) == 1)
    	    return Wire.read();
	}

    return 0;
   d74b0:	2000      	movs	r0, #0
}
   d74b2:	bd38      	pop	{r3, r4, r5, pc}
    	if (Wire.requestFrom(address, 1) == 1)
   d74b4:	f004 f85a 	bl	db56c <_Z19__fetch_global_Wirev>
   d74b8:	7d21      	ldrb	r1, [r4, #20]
   d74ba:	2201      	movs	r2, #1
   d74bc:	f001 fd51 	bl	d8f62 <_ZN7TwoWire11requestFromEhj>
   d74c0:	2801      	cmp	r0, #1
   d74c2:	d1f5      	bne.n	d74b0 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x26>
    	    return Wire.read();
   d74c4:	f004 f852 	bl	db56c <_Z19__fetch_global_Wirev>
   d74c8:	6803      	ldr	r3, [r0, #0]
   d74ca:	695b      	ldr	r3, [r3, #20]
   d74cc:	4798      	blx	r3
   d74ce:	b2c0      	uxtb	r0, r0
   d74d0:	e7ef      	b.n	d74b2 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x28>

000d74d2 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:
{
   d74d2:	b538      	push	{r3, r4, r5, lr}
   d74d4:	460d      	mov	r5, r1
	byte cfg = readRegister(XYZ_DATA_CFG);
   d74d6:	210e      	movs	r1, #14
{
   d74d8:	4604      	mov	r4, r0
	byte cfg = readRegister(XYZ_DATA_CFG);
   d74da:	f7ff ffd6 	bl	d748a <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	cfg &= 0xFC; // Mask out scale bits
   d74de:	f020 0203 	bic.w	r2, r0, #3
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
   d74e2:	ea42 0295 	orr.w	r2, r2, r5, lsr #2
	writeRegister(XYZ_DATA_CFG, cfg);
   d74e6:	4620      	mov	r0, r4
   d74e8:	b2d2      	uxtb	r2, r2
}
   d74ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(XYZ_DATA_CFG, cfg);
   d74ee:	210e      	movs	r1, #14
   d74f0:	f7ff bfc0 	b.w	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d74f4 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
{
   d74f4:	b538      	push	{r3, r4, r5, lr}
   d74f6:	460d      	mov	r5, r1
	byte ctrl = readRegister(CTRL_REG1);
   d74f8:	212a      	movs	r1, #42	; 0x2a
{
   d74fa:	4604      	mov	r4, r0
	byte ctrl = readRegister(CTRL_REG1);
   d74fc:	f7ff ffc5 	bl	d748a <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	ctrl &= 0xCF; // Mask out data rate bits
   d7500:	f020 0230 	bic.w	r2, r0, #48	; 0x30
	ctrl |= (odr << 3);
   d7504:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
	writeRegister(CTRL_REG1, ctrl);
   d7508:	4620      	mov	r0, r4
   d750a:	b2d2      	uxtb	r2, r2
}
   d750c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(CTRL_REG1, ctrl);
   d7510:	212a      	movs	r1, #42	; 0x2a
   d7512:	f7ff bfaf 	b.w	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7516 <_ZN8MMA8452Q7setupPLEv>:
{
   d7516:	b510      	push	{r4, lr}
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d7518:	2111      	movs	r1, #17
{
   d751a:	4604      	mov	r4, r0
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d751c:	f7ff ffb5 	bl	d748a <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
   d7520:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   d7524:	b2c2      	uxtb	r2, r0
   d7526:	2111      	movs	r1, #17
   d7528:	4620      	mov	r0, r4
   d752a:	f7ff ffa3 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d752e:	4620      	mov	r0, r4
   d7530:	2250      	movs	r2, #80	; 0x50
}
   d7532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d7536:	2112      	movs	r1, #18
   d7538:	f7ff bf9c 	b.w	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d753c <_ZN8MMA8452Q7standbyEv>:
{
   d753c:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d753e:	212a      	movs	r1, #42	; 0x2a
{
   d7540:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d7542:	f7ff ffa2 	bl	d748a <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d7546:	212a      	movs	r1, #42	; 0x2a
   d7548:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
   d754c:	4620      	mov	r0, r4
}
   d754e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d7552:	f7ff bf8f 	b.w	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7556 <_ZN8MMA8452Q6activeEv>:
{
   d7556:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d7558:	212a      	movs	r1, #42	; 0x2a
{
   d755a:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d755c:	f7ff ff95 	bl	d748a <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d7560:	f040 0001 	orr.w	r0, r0, #1
   d7564:	b2c2      	uxtb	r2, r0
   d7566:	212a      	movs	r1, #42	; 0x2a
   d7568:	4620      	mov	r0, r4
}
   d756a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d756e:	f7ff bf81 	b.w	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
   d7572:	0000      	movs	r0, r0
   d7574:	0000      	movs	r0, r0
	...

000d7578 <_ZN8MMA8452Q17setupTapIntsPulseEh>:
{
   d7578:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d757a:	4604      	mov	r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d757c:	2900      	cmp	r1, #0
   d757e:	d04f      	beq.n	d7620 <_ZN8MMA8452Q17setupTapIntsPulseEh+0xa8>
   d7580:	290a      	cmp	r1, #10
   d7582:	bfa8      	it	ge
   d7584:	210a      	movge	r1, #10
   d7586:	4608      	mov	r0, r1
	sensitivity *= 12.7;																	// Convert to range from 1-127;
   d7588:	f004 f9a0 	bl	db8cc <__aeabi_i2d>
   d758c:	a326      	add	r3, pc, #152	; (adr r3, d7628 <_ZN8MMA8452Q17setupTapIntsPulseEh+0xb0>)
   d758e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7592:	f004 fa05 	bl	db9a0 <__aeabi_dmul>
   d7596:	f004 fc3d 	bl	dbe14 <__aeabi_d2uiz>
	interruptThreshold = map(sensitivity , 0x01, 0x7F, 0x10, 0x01);			// Map and compress the threshold
   d759a:	2101      	movs	r1, #1
   d759c:	2310      	movs	r3, #16
   d759e:	9100      	str	r1, [sp, #0]
   d75a0:	227f      	movs	r2, #127	; 0x7f
   d75a2:	b2c0      	uxtb	r0, r0
   d75a4:	f000 ff82 	bl	d84ac <_Z3mapiiiii>
   d75a8:	b2c5      	uxtb	r5, r0
  standby();  // Must be in standby to change registers
   d75aa:	4620      	mov	r0, r4
   d75ac:	f7ff ffc6 	bl	d753c <_ZN8MMA8452Q7standbyEv>
  writeRegister(PULSE_CFG, 0x15);  // 1. single taps only on all axes - without latch
   d75b0:	4620      	mov	r0, r4
   d75b2:	2215      	movs	r2, #21
   d75b4:	2121      	movs	r1, #33	; 0x21
   d75b6:	f7ff ff5d 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_THSX, interruptThreshold);  // 2. x thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d75ba:	462a      	mov	r2, r5
   d75bc:	4620      	mov	r0, r4
   d75be:	2123      	movs	r1, #35	; 0x23
   d75c0:	f7ff ff58 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_THSY, interruptThreshold);  // 2. y thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d75c4:	462a      	mov	r2, r5
   d75c6:	4620      	mov	r0, r4
   d75c8:	2124      	movs	r1, #36	; 0x24
   d75ca:	f7ff ff53 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_THSZ, interruptThreshold);  // 2. z thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d75ce:	462a      	mov	r2, r5
   d75d0:	4620      	mov	r0, r4
   d75d2:	2125      	movs	r1, #37	; 0x25
   d75d4:	f7ff ff4e 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_TMLT, 0xFF);  // 3. Max time limit at 100Hz odr, this is very dependent on data rate, see the app note
   d75d8:	4620      	mov	r0, r4
   d75da:	22ff      	movs	r2, #255	; 0xff
   d75dc:	2126      	movs	r1, #38	; 0x26
   d75de:	f7ff ff49 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_LTCY, 0xFF);  // 4. max time between taps
   d75e2:	4620      	mov	r0, r4
   d75e4:	22ff      	movs	r2, #255	; 0xff
   d75e6:	2127      	movs	r1, #39	; 0x27
   d75e8:	f7ff ff44 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_WIND, 0xFF);  // 5. 318ms (max value) between taps max
   d75ec:	4620      	mov	r0, r4
   d75ee:	22ff      	movs	r2, #255	; 0xff
   d75f0:	2128      	movs	r1, #40	; 0x28
   d75f2:	f7ff ff3f 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(CTRL_REG3, 0x02);  // Active high, push-pull interrupts
   d75f6:	4620      	mov	r0, r4
   d75f8:	2202      	movs	r2, #2
   d75fa:	212c      	movs	r1, #44	; 0x2c
   d75fc:	f7ff ff3a 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(CTRL_REG4, 0x08);  // Tap ints enabled
   d7600:	4620      	mov	r0, r4
   d7602:	2208      	movs	r2, #8
   d7604:	212d      	movs	r1, #45	; 0x2d
   d7606:	f7ff ff35 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(CTRL_REG5, 0x08);  // Taps on INT2
   d760a:	4620      	mov	r0, r4
   d760c:	2208      	movs	r2, #8
   d760e:	212e      	movs	r1, #46	; 0x2e
   d7610:	f7ff ff30 	bl	d7474 <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  active();  // Set to active to start reading
   d7614:	4620      	mov	r0, r4
}
   d7616:	b003      	add	sp, #12
   d7618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  active();  // Set to active to start reading
   d761c:	f7ff bf9b 	b.w	d7556 <_ZN8MMA8452Q6activeEv>
   d7620:	2001      	movs	r0, #1
   d7622:	e7b1      	b.n	d7588 <_ZN8MMA8452Q17setupTapIntsPulseEh+0x10>
   d7624:	f3af 8000 	nop.w
   d7628:	66666666 	.word	0x66666666
   d762c:	40296666 	.word	0x40296666

000d7630 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>:
{
   d7630:	b538      	push	{r3, r4, r5, lr}
	scale = fsr; // Haul fsr into our class variable, scale
   d7632:	7541      	strb	r1, [r0, #21]
{
   d7634:	4615      	mov	r5, r2
   d7636:	4604      	mov	r4, r0
	Wire.begin(); // Initialize I2C
   d7638:	f003 ff98 	bl	db56c <_Z19__fetch_global_Wirev>
   d763c:	f001 fc62 	bl	d8f04 <_ZN7TwoWire5beginEv>
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
   d7640:	210d      	movs	r1, #13
   d7642:	4620      	mov	r0, r4
   d7644:	f7ff ff21 	bl	d748a <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
   d7648:	282a      	cmp	r0, #42	; 0x2a
   d764a:	d112      	bne.n	d7672 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x42>
	standby();  // Must be in standby to change registers
   d764c:	4620      	mov	r0, r4
   d764e:	f7ff ff75 	bl	d753c <_ZN8MMA8452Q7standbyEv>
	setScale(scale);  // Set up accelerometer scale
   d7652:	7d61      	ldrb	r1, [r4, #21]
   d7654:	4620      	mov	r0, r4
   d7656:	f7ff ff3c 	bl	d74d2 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>
	setODR(odr);  // Set up output data rate
   d765a:	4629      	mov	r1, r5
   d765c:	4620      	mov	r0, r4
   d765e:	f7ff ff49 	bl	d74f4 <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>
	setupPL();  // Set up portrait/landscape detection
   d7662:	4620      	mov	r0, r4
   d7664:	f7ff ff57 	bl	d7516 <_ZN8MMA8452Q7setupPLEv>
	active();  // Set to active to start reading
   d7668:	4620      	mov	r0, r4
   d766a:	f7ff ff74 	bl	d7556 <_ZN8MMA8452Q6activeEv>
   d766e:	2001      	movs	r0, #1
}
   d7670:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   d7672:	2000      	movs	r0, #0
   d7674:	e7fc      	b.n	d7670 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x40>

000d7676 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d7676:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7678:	4603      	mov	r3, r0
	switch (__op)
   d767a:	d102      	bne.n	d7682 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d767c:	6001      	str	r1, [r0, #0]
      }
   d767e:	2000      	movs	r0, #0
   d7680:	4770      	bx	lr
	  switch (__op)
   d7682:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7684:	bf04      	itt	eq
   d7686:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d768a:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d768e:	e7f6      	b.n	d767e <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7690 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d7690:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d7692:	2301      	movs	r3, #1
   d7694:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d7696:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d7698:	4604      	mov	r4, r0
        if (th->func) {
   d769a:	b143      	cbz	r3, d76ae <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d769c:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d769e:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d76a0:	2301      	movs	r3, #1
   d76a2:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d76a4:	2000      	movs	r0, #0
    }
   d76a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d76aa:	f000 bb53 	b.w	d7d54 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d76ae:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d76b0:	2800      	cmp	r0, #0
   d76b2:	d0f5      	beq.n	d76a0 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d76b4:	6883      	ldr	r3, [r0, #8]
   d76b6:	b90b      	cbnz	r3, d76bc <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d76b8:	f003 ffb3 	bl	db622 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d76bc:	68c3      	ldr	r3, [r0, #12]
   d76be:	e7ee      	b.n	d769e <_ZN6Thread3runEPv+0xe>

000d76c0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d76c0:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d76c2:	6842      	ldr	r2, [r0, #4]
   d76c4:	4603      	mov	r3, r0
   d76c6:	1054      	asrs	r4, r2, #1
   d76c8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d76cc:	07d2      	lsls	r2, r2, #31
   d76ce:	bf48      	it	mi
   d76d0:	590a      	ldrmi	r2, [r1, r4]
   d76d2:	681b      	ldr	r3, [r3, #0]
      }
   d76d4:	f85d 4b04 	ldr.w	r4, [sp], #4
   d76d8:	bf48      	it	mi
   d76da:	58d3      	ldrmi	r3, [r2, r3]
   d76dc:	4718      	bx	r3
	...

000d76e0 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d76e0:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d76e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d76e4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d76e8:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d76ea:	3008      	adds	r0, #8
   d76ec:	f000 faf2 	bl	d7cd4 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d76f0:	2004      	movs	r0, #4
   d76f2:	f7fc fcd0 	bl	d4096 <_Znwj>
   d76f6:	4605      	mov	r5, r0
   d76f8:	b398      	cbz	r0, d7762 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d76fa:	491b      	ldr	r1, [pc, #108]	; (d7768 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d76fc:	2014      	movs	r0, #20
   d76fe:	f003 ff8c 	bl	db61a <_ZnwjRKSt9nothrow_t>
   d7702:	b130      	cbz	r0, d7712 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7704:	2300      	movs	r3, #0
            exited(false) {
   d7706:	e9c0 3300 	strd	r3, r3, [r0]
   d770a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d770e:	7403      	strb	r3, [r0, #16]
   d7710:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d7712:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7714:	b1a0      	cbz	r0, d7740 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7716:	4b15      	ldr	r3, [pc, #84]	; (d776c <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7718:	4915      	ldr	r1, [pc, #84]	; (d7770 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d771a:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d771e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d7722:	e9cd 0300 	strd	r0, r3, [sp]
   d7726:	2202      	movs	r2, #2
   d7728:	4b12      	ldr	r3, [pc, #72]	; (d7774 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d772a:	3004      	adds	r0, #4
   d772c:	f000 fa9a 	bl	d7c64 <os_thread_create>
   d7730:	b930      	cbnz	r0, d7740 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7732:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d7734:	7c1b      	ldrb	r3, [r3, #16]
   d7736:	b9a3      	cbnz	r3, d7762 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d7738:	2001      	movs	r0, #1
   d773a:	f000 fb33 	bl	d7da4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d773e:	e7f8      	b.n	d7732 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7740:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7742:	2300      	movs	r3, #0
   d7744:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d7746:	b164      	cbz	r4, d7762 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d7748:	6827      	ldr	r7, [r4, #0]
   d774a:	b137      	cbz	r7, d775a <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d774c:	4638      	mov	r0, r7
   d774e:	f7fc fe2f 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d7752:	2110      	movs	r1, #16
   d7754:	4638      	mov	r0, r7
   d7756:	f003 ff5e 	bl	db616 <_ZdlPvj>
   d775a:	2114      	movs	r1, #20
   d775c:	4620      	mov	r0, r4
   d775e:	f003 ff5a 	bl	db616 <_ZdlPvj>
   d7762:	6075      	str	r5, [r6, #4]
}
   d7764:	b003      	add	sp, #12
   d7766:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7768:	000dcf98 	.word	0x000dcf98
   d776c:	000d797f 	.word	0x000d797f
   d7770:	000dcba8 	.word	0x000dcba8
   d7774:	000d7691 	.word	0x000d7691

000d7778 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7778:	f247 5130 	movw	r1, #30000	; 0x7530
   d777c:	4a08      	ldr	r2, [pc, #32]	; (d77a0 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d777e:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7780:	4908      	ldr	r1, [pc, #32]	; (d77a4 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d7782:	6002      	str	r2, [r0, #0]
   d7784:	2200      	movs	r2, #0
   d7786:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d778a:	4907      	ldr	r1, [pc, #28]	; (d77a8 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d778c:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d778e:	4907      	ldr	r1, [pc, #28]	; (d77ac <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d7790:	6042      	str	r2, [r0, #4]
   d7792:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7796:	6181      	str	r1, [r0, #24]
   d7798:	8502      	strh	r2, [r0, #40]	; 0x28
   d779a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d779e:	4770      	bx	lr
   d77a0:	000dcc6c 	.word	0x000dcc6c
   d77a4:	000d7ae9 	.word	0x000d7ae9
   d77a8:	000d76c1 	.word	0x000d76c1
   d77ac:	000d7677 	.word	0x000d7677

000d77b0 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d77b0:	b510      	push	{r4, lr}
   d77b2:	4b04      	ldr	r3, [pc, #16]	; (d77c4 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d77b4:	4604      	mov	r4, r0
   d77b6:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d77ba:	f7fc fdf9 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
}
   d77be:	4620      	mov	r0, r4
   d77c0:	bd10      	pop	{r4, pc}
   d77c2:	bf00      	nop
   d77c4:	000dcc6c 	.word	0x000dcc6c

000d77c8 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d77c8:	b510      	push	{r4, lr}
   d77ca:	4b03      	ldr	r3, [pc, #12]	; (d77d8 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d77cc:	6003      	str	r3, [r0, #0]
   d77ce:	4604      	mov	r4, r0
   d77d0:	f7ff ffee 	bl	d77b0 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d77d4:	4620      	mov	r0, r4
   d77d6:	bd10      	pop	{r4, pc}
   d77d8:	000dcc94 	.word	0x000dcc94

000d77dc <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d77dc:	b510      	push	{r4, lr}
   d77de:	4604      	mov	r4, r0
}
   d77e0:	f7ff fff2 	bl	d77c8 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d77e4:	4620      	mov	r0, r4
   d77e6:	2138      	movs	r1, #56	; 0x38
   d77e8:	f003 ff15 	bl	db616 <_ZdlPvj>
   d77ec:	4620      	mov	r0, r4
   d77ee:	bd10      	pop	{r4, pc}

000d77f0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d77f0:	6880      	ldr	r0, [r0, #8]
   d77f2:	f000 ba77 	b.w	d7ce4 <os_mutex_lock>

000d77f6 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d77f6:	6880      	ldr	r0, [r0, #8]
   d77f8:	f000 ba7c 	b.w	d7cf4 <os_mutex_unlock>

000d77fc <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d77fc:	b510      	push	{r4, lr}
   d77fe:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d7800:	6800      	ldr	r0, [r0, #0]
   d7802:	f7ff fff8 	bl	d77f6 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7806:	4620      	mov	r0, r4
   d7808:	bd10      	pop	{r4, pc}

000d780a <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d780a:	b513      	push	{r0, r1, r4, lr}
   d780c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d780e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7810:	f7ff ffee 	bl	d77f0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7814:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7816:	88dc      	ldrh	r4, [r3, #6]
   d7818:	b2a4      	uxth	r4, r4
   d781a:	b10c      	cbz	r4, d7820 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d781c:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d7820:	a801      	add	r0, sp, #4
   d7822:	f7ff ffeb 	bl	d77fc <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d7826:	4620      	mov	r0, r4
   d7828:	b002      	add	sp, #8
   d782a:	bd10      	pop	{r4, pc}

000d782c <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d782c:	b513      	push	{r0, r1, r4, lr}
   d782e:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7830:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7832:	f7ff ffdd 	bl	d77f0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d7836:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d783a:	b943      	cbnz	r3, d784e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d783c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d783e:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d7840:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d7842:	a801      	add	r0, sp, #4
   d7844:	f7ff ffda 	bl	d77fc <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d7848:	4620      	mov	r0, r4
   d784a:	b002      	add	sp, #8
   d784c:	bd10      	pop	{r4, pc}
	bool result = false;
   d784e:	2400      	movs	r4, #0
   d7850:	e7f7      	b.n	d7842 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d7852 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d7852:	b513      	push	{r0, r1, r4, lr}
   d7854:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7856:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7858:	f7ff ffca 	bl	d77f0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d785c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d785e:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d7860:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d7862:	f7ff ffcb 	bl	d77fc <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d7866:	4620      	mov	r0, r4
   d7868:	b002      	add	sp, #8
   d786a:	bd10      	pop	{r4, pc}

000d786c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d786c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7870:	4699      	mov	r9, r3
   d7872:	b086      	sub	sp, #24
	if (!haveSetup) {
   d7874:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7878:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d787c:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7880:	4604      	mov	r4, r0
   d7882:	460f      	mov	r7, r1
   d7884:	4616      	mov	r6, r2
	if (!haveSetup) {
   d7886:	b913      	cbnz	r3, d788e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7888:	6803      	ldr	r3, [r0, #0]
   d788a:	689b      	ldr	r3, [r3, #8]
   d788c:	4798      	blx	r3
		data = "";
   d788e:	4b31      	ldr	r3, [pc, #196]	; (d7954 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7890:	4638      	mov	r0, r7
		data = "";
   d7892:	2e00      	cmp	r6, #0
   d7894:	bf08      	it	eq
   d7896:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7898:	f004 fc45 	bl	dc126 <strlen>
   d789c:	4605      	mov	r5, r0
   d789e:	4630      	mov	r0, r6
   d78a0:	f004 fc41 	bl	dc126 <strlen>
   d78a4:	4428      	add	r0, r5
   d78a6:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d78aa:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d78ac:	bf1c      	itt	ne
   d78ae:	f025 0503 	bicne.w	r5, r5, #3
   d78b2:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d78b4:	4633      	mov	r3, r6
   d78b6:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d78ba:	e9cd 9a00 	strd	r9, sl, [sp]
   d78be:	4926      	ldr	r1, [pc, #152]	; (d7958 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d78c0:	4826      	ldr	r0, [pc, #152]	; (d795c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d78c2:	463a      	mov	r2, r7
   d78c4:	f7fc fe3f 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d78c8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d78ca:	3b08      	subs	r3, #8
   d78cc:	42ab      	cmp	r3, r5
   d78ce:	d212      	bcs.n	d78f6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d78d0:	2400      	movs	r4, #0
}
   d78d2:	4620      	mov	r0, r4
   d78d4:	b006      	add	sp, #24
   d78d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d78da:	88cb      	ldrh	r3, [r1, #6]
   d78dc:	2b01      	cmp	r3, #1
   d78de:	d036      	beq.n	d794e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d78e0:	a805      	add	r0, sp, #20
   d78e2:	f7ff ff8b 	bl	d77fc <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d78e6:	6823      	ldr	r3, [r4, #0]
   d78e8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d78ec:	699b      	ldr	r3, [r3, #24]
   d78ee:	4620      	mov	r0, r4
   d78f0:	4798      	blx	r3
   d78f2:	2800      	cmp	r0, #0
   d78f4:	d0ec      	beq.n	d78d0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d78f6:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d78f8:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d78fa:	f7ff ff79 	bl	d77f0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d78fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7900:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d7902:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7904:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d7906:	1ad2      	subs	r2, r2, r3
   d7908:	42aa      	cmp	r2, r5
   d790a:	d3e6      	bcc.n	d78da <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d790c:	ea48 080a 	orr.w	r8, r8, sl
   d7910:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d7914:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d7918:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d791a:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d791e:	4639      	mov	r1, r7
   d7920:	4640      	mov	r0, r8
   d7922:	f004 fbda 	bl	dc0da <strcpy>
				cp += strlen(cp) + 1;
   d7926:	4640      	mov	r0, r8
   d7928:	f004 fbfd 	bl	dc126 <strlen>
   d792c:	3001      	adds	r0, #1
				strcpy(cp, data);
   d792e:	4631      	mov	r1, r6
   d7930:	4440      	add	r0, r8
   d7932:	f004 fbd2 	bl	dc0da <strcpy>
				nextFree += size;
   d7936:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7938:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d793a:	441d      	add	r5, r3
   d793c:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d793e:	88d3      	ldrh	r3, [r2, #6]
   d7940:	3301      	adds	r3, #1
   d7942:	80d3      	strh	r3, [r2, #6]
				return true;
   d7944:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d7946:	a805      	add	r0, sp, #20
   d7948:	f7ff ff58 	bl	d77fc <_ZN11StMutexLockD1Ev>
   d794c:	e7c1      	b.n	d78d2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d794e:	2400      	movs	r4, #0
   d7950:	e7f9      	b.n	d7946 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d7952:	bf00      	nop
   d7954:	000dce15 	.word	0x000dce15
   d7958:	000dcbba 	.word	0x000dcbba
   d795c:	2003e504 	.word	0x2003e504

000d7960 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d7960:	b508      	push	{r3, lr}
   d7962:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7964:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7968:	69a3      	ldr	r3, [r4, #24]
   d796a:	b90b      	cbnz	r3, d7970 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d796c:	f003 fe59 	bl	db622 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7970:	69e3      	ldr	r3, [r4, #28]
   d7972:	4621      	mov	r1, r4
   d7974:	4628      	mov	r0, r5
   d7976:	4798      	blx	r3
		os_thread_yield();
   d7978:	f000 f97c 	bl	d7c74 <os_thread_yield>
	while(true) {
   d797c:	e7f4      	b.n	d7968 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d797e <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d797e:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d7980:	f7ff ffee 	bl	d7960 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7984 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7984:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7986:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d798a:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d798c:	4628      	mov	r0, r5
   d798e:	f004 fbca 	bl	dc126 <strlen>
   d7992:	3001      	adds	r0, #1
   d7994:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7996:	4628      	mov	r0, r5
   d7998:	f004 fbc5 	bl	dc126 <strlen>
	size_t offset = start - retainedBuffer;
   d799c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d799e:	3001      	adds	r0, #1
   d79a0:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d79a2:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d79a4:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d79a8:	bf1c      	itt	ne
   d79aa:	f1c3 0304 	rsbne	r3, r3, #4
   d79ae:	18c0      	addne	r0, r0, r3
}
   d79b0:	bd68      	pop	{r3, r5, r6, pc}

000d79b2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d79b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d79b4:	4604      	mov	r4, r0
   d79b6:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d79b8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d79ba:	f7ff ff19 	bl	d77f0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d79be:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d79c0:	88fb      	ldrh	r3, [r7, #6]
   d79c2:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d79c6:	b1e6      	cbz	r6, d7a02 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d79c8:	2b01      	cmp	r3, #1
   d79ca:	d922      	bls.n	d7a12 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d79cc:	4629      	mov	r1, r5
   d79ce:	4620      	mov	r0, r4
   d79d0:	f7ff ffd8 	bl	d7984 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d79d4:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d79d6:	4629      	mov	r1, r5
   d79d8:	4620      	mov	r0, r4
   d79da:	f7ff ffd3 	bl	d7984 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d79de:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d79e0:	443a      	add	r2, r7
	if (after > 0) {
   d79e2:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d79e4:	4601      	mov	r1, r0
	size_t len = next - start;
   d79e6:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d79ea:	d002      	beq.n	d79f2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d79ec:	4628      	mov	r0, r5
   d79ee:	f004 fb0d 	bl	dc00c <memmove>
	nextFree -= len;
   d79f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d79f4:	1b9b      	subs	r3, r3, r6
   d79f6:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d79f8:	88fb      	ldrh	r3, [r7, #6]
   d79fa:	3b01      	subs	r3, #1
   d79fc:	80fb      	strh	r3, [r7, #6]
	return true;
   d79fe:	2601      	movs	r6, #1
   d7a00:	e001      	b.n	d7a06 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d7a02:	2b00      	cmp	r3, #0
   d7a04:	d1e7      	bne.n	d79d6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d7a06:	a801      	add	r0, sp, #4
   d7a08:	f7ff fef8 	bl	d77fc <_ZN11StMutexLockD1Ev>
}
   d7a0c:	4630      	mov	r0, r6
   d7a0e:	b003      	add	sp, #12
   d7a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d7a12:	2600      	movs	r6, #0
   d7a14:	e7f7      	b.n	d7a06 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d7a18 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a1c:	460d      	mov	r5, r1
   d7a1e:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a20:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7a22:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7a24:	f7ff fea8 	bl	d7778 <_ZN21PublishQueueAsyncBaseC1Ev>
   d7a28:	4b15      	ldr	r3, [pc, #84]	; (d7a80 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a2a:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7a2e:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a30:	4b14      	ldr	r3, [pc, #80]	; (d7a84 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7a32:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a34:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d7a36:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d7a38:	4698      	mov	r8, r3
   d7a3a:	d117      	bne.n	d7a6c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d7a3c:	88ab      	ldrh	r3, [r5, #4]
   d7a3e:	b29b      	uxth	r3, r3
   d7a40:	42b3      	cmp	r3, r6
   d7a42:	d113      	bne.n	d7a6c <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7a44:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7a48:	6367      	str	r7, [r4, #52]	; 0x34
   d7a4a:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d7a4e:	88eb      	ldrh	r3, [r5, #6]
   d7a50:	fa1f f289 	uxth.w	r2, r9
   d7a54:	b29b      	uxth	r3, r3
   d7a56:	429a      	cmp	r2, r3
   d7a58:	d20e      	bcs.n	d7a78 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d7a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d7a5c:	4620      	mov	r0, r4
   d7a5e:	f7ff ff91 	bl	d7984 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d7a62:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d7a64:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d7a66:	f109 0901 	add.w	r9, r9, #1
   d7a6a:	d9f0      	bls.n	d7a4e <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d7a6c:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d7a6e:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7a72:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7a74:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7a76:	80eb      	strh	r3, [r5, #6]
}
   d7a78:	4620      	mov	r0, r4
   d7a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a7e:	bf00      	nop
   d7a80:	000dcc94 	.word	0x000dcc94
   d7a84:	d19cab61 	.word	0xd19cab61

000d7a88 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7a88:	b510      	push	{r4, lr}
   d7a8a:	e9d1 2300 	ldrd	r2, r3, [r1]
   d7a8e:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7a90:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7a92:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7a94:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7a96:	b90a      	cbnz	r2, d7a9c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7a98:	07d9      	lsls	r1, r3, #31
   d7a9a:	d505      	bpl.n	d7aa8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7a9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7aa0:	4b0f      	ldr	r3, [pc, #60]	; (d7ae0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7aa2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7aa4:	4b0f      	ldr	r3, [pc, #60]	; (d7ae4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7aa6:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7aa8:	ab02      	add	r3, sp, #8
   d7aaa:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7aae:	466a      	mov	r2, sp
   d7ab0:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7ab4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7ab8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7abc:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ac0:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ac2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7ac6:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ac8:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7aca:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7acc:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7ace:	4618      	mov	r0, r3
   d7ad0:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ad2:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7ad4:	9105      	str	r1, [sp, #20]
   d7ad6:	f7fc fc6b 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
	}
   d7ada:	4620      	mov	r0, r4
   d7adc:	b006      	add	sp, #24
   d7ade:	bd10      	pop	{r4, pc}
   d7ae0:	000d76c1 	.word	0x000d76c1
   d7ae4:	000d7677 	.word	0x000d7677

000d7ae8 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7ae8:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7aea:	4b05      	ldr	r3, [pc, #20]	; (d7b00 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7aec:	9300      	str	r3, [sp, #0]
   d7aee:	4669      	mov	r1, sp
   d7af0:	2300      	movs	r3, #0
   d7af2:	3010      	adds	r0, #16
   d7af4:	9301      	str	r3, [sp, #4]
   d7af6:	f7ff ffc7 	bl	d7a88 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7afa:	b003      	add	sp, #12
   d7afc:	f85d fb04 	ldr.w	pc, [sp], #4
   d7b00:	000d7b31 	.word	0x000d7b31

000d7b04 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7b04:	b513      	push	{r0, r1, r4, lr}
   d7b06:	4604      	mov	r4, r0
   d7b08:	f000 f95c 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7b0e:	1ac0      	subs	r0, r0, r3
   d7b10:	68e3      	ldr	r3, [r4, #12]
   d7b12:	4298      	cmp	r0, r3
   d7b14:	d308      	bcc.n	d7b28 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7b16:	4b05      	ldr	r3, [pc, #20]	; (d7b2c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7b18:	9300      	str	r3, [sp, #0]
   d7b1a:	4669      	mov	r1, sp
   d7b1c:	2300      	movs	r3, #0
   d7b1e:	f104 0010 	add.w	r0, r4, #16
   d7b22:	9301      	str	r3, [sp, #4]
   d7b24:	f7ff ffb0 	bl	d7a88 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7b28:	b002      	add	sp, #8
   d7b2a:	bd10      	pop	{r4, pc}
   d7b2c:	000d7b31 	.word	0x000d7b31

000d7b30 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d7b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7b34:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7b38:	b086      	sub	sp, #24
   d7b3a:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7b3c:	2b00      	cmp	r3, #0
   d7b3e:	d164      	bne.n	d7c0a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7b40:	f000 fb9c 	bl	d827c <spark_cloud_flag_connected>
   d7b44:	2800      	cmp	r0, #0
   d7b46:	d060      	beq.n	d7c0a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7b48:	f000 f93c 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
   d7b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7b4e:	1ac0      	subs	r0, r0, r3
   d7b50:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7b54:	4298      	cmp	r0, r3
   d7b56:	d958      	bls.n	d7c0a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7b58:	6823      	ldr	r3, [r4, #0]
   d7b5a:	4620      	mov	r0, r4
   d7b5c:	695b      	ldr	r3, [r3, #20]
   d7b5e:	4798      	blx	r3
		if (data) {
   d7b60:	4605      	mov	r5, r0
   d7b62:	2800      	cmp	r0, #0
   d7b64:	d051      	beq.n	d7c0a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7b66:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7b6a:	2301      	movs	r3, #1
   d7b6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d7b70:	4638      	mov	r0, r7
   d7b72:	f004 fad8 	bl	dc126 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7b76:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b7a:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d7b7e:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b80:	682b      	ldr	r3, [r5, #0]
   d7b82:	492b      	ldr	r1, [pc, #172]	; (d7c30 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7b84:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7b86:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b88:	4633      	mov	r3, r6
   d7b8a:	482a      	ldr	r0, [pc, #168]	; (d7c34 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b8c:	463a      	mov	r2, r7
   d7b8e:	f7fc fcda 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7b92:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7b94:	f88d 8000 	strb.w	r8, [sp]
   d7b98:	4632      	mov	r2, r6
   d7b9a:	4639      	mov	r1, r7
   d7b9c:	a802      	add	r0, sp, #8
   d7b9e:	f000 ff9b 	bl	d8ad8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7ba2:	9d02      	ldr	r5, [sp, #8]
   d7ba4:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7ba6:	b91b      	cbnz	r3, d7bb0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7ba8:	2001      	movs	r0, #1
   d7baa:	f000 fc8b 	bl	d84c4 <delay>
			while(!request.isDone()) {
   d7bae:	e7f8      	b.n	d7ba2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7bb0:	2000      	movs	r0, #0
   d7bb2:	f000 faf1 	bl	d8198 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7bb6:	b120      	cbz	r0, d7bc2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7bb8:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7bba:	b913      	cbnz	r3, d7bc2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d7bbc:	f000 fb4e 	bl	d825c <spark_process>
    }
   d7bc0:	e7fa      	b.n	d7bb8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7bc2:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7bc4:	2b01      	cmp	r3, #1
   d7bc6:	d123      	bne.n	d7c10 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d7bc8:	491b      	ldr	r1, [pc, #108]	; (d7c38 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7bca:	481a      	ldr	r0, [pc, #104]	; (d7c34 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7bcc:	f7fc fcbb 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d7bd0:	6823      	ldr	r3, [r4, #0]
   d7bd2:	2100      	movs	r1, #0
   d7bd4:	699b      	ldr	r3, [r3, #24]
   d7bd6:	4620      	mov	r0, r4
   d7bd8:	4798      	blx	r3
			isSending = false;
   d7bda:	2300      	movs	r3, #0
   d7bdc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d7be0:	f000 f8f0 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7be4:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7be6:	9c03      	ldr	r4, [sp, #12]
   d7be8:	b17c      	cbz	r4, d7c0a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d7bea:	6863      	ldr	r3, [r4, #4]
   d7bec:	3b01      	subs	r3, #1
   d7bee:	6063      	str	r3, [r4, #4]
   d7bf0:	b95b      	cbnz	r3, d7c0a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d7bf2:	6823      	ldr	r3, [r4, #0]
   d7bf4:	4620      	mov	r0, r4
   d7bf6:	689b      	ldr	r3, [r3, #8]
   d7bf8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7bfa:	68a3      	ldr	r3, [r4, #8]
   d7bfc:	3b01      	subs	r3, #1
   d7bfe:	60a3      	str	r3, [r4, #8]
   d7c00:	b91b      	cbnz	r3, d7c0a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d7c02:	6823      	ldr	r3, [r4, #0]
   d7c04:	4620      	mov	r0, r4
   d7c06:	68db      	ldr	r3, [r3, #12]
   d7c08:	4798      	blx	r3
}
   d7c0a:	b006      	add	sp, #24
   d7c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d7c10:	68e2      	ldr	r2, [r4, #12]
   d7c12:	490a      	ldr	r1, [pc, #40]	; (d7c3c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7c14:	4807      	ldr	r0, [pc, #28]	; (d7c34 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7c16:	f7fc fc96 	bl	d4546 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7c1a:	4b09      	ldr	r3, [pc, #36]	; (d7c40 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7c1c:	9304      	str	r3, [sp, #16]
   d7c1e:	a904      	add	r1, sp, #16
   d7c20:	2300      	movs	r3, #0
   d7c22:	f104 0010 	add.w	r0, r4, #16
   d7c26:	9305      	str	r3, [sp, #20]
   d7c28:	f7ff ff2e 	bl	d7a88 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7c2c:	e7d5      	b.n	d7bda <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d7c2e:	bf00      	nop
   d7c30:	000dcbfb 	.word	0x000dcbfb
   d7c34:	2003e504 	.word	0x2003e504
   d7c38:	000dcc1c 	.word	0x000dcc1c
   d7c3c:	000dcc33 	.word	0x000dcc33
   d7c40:	000d7b05 	.word	0x000d7b05

000d7c44 <_GLOBAL__sub_I_pubqLogger>:
   d7c44:	4b01      	ldr	r3, [pc, #4]	; (d7c4c <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7c46:	4a02      	ldr	r2, [pc, #8]	; (d7c50 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7c48:	601a      	str	r2, [r3, #0]
}
   d7c4a:	4770      	bx	lr
   d7c4c:	2003e504 	.word	0x2003e504
   d7c50:	000dcc5a 	.word	0x000dcc5a

000d7c54 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7c54:	b508      	push	{r3, lr}
   d7c56:	4b02      	ldr	r3, [pc, #8]	; (d7c60 <cellular_signal+0xc>)
   d7c58:	681b      	ldr	r3, [r3, #0]
   d7c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c5c:	9301      	str	r3, [sp, #4]
   d7c5e:	bd08      	pop	{r3, pc}
   d7c60:	00030274 	.word	0x00030274

000d7c64 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7c64:	b508      	push	{r3, lr}
   d7c66:	4b02      	ldr	r3, [pc, #8]	; (d7c70 <os_thread_create+0xc>)
   d7c68:	681b      	ldr	r3, [r3, #0]
   d7c6a:	685b      	ldr	r3, [r3, #4]
   d7c6c:	9301      	str	r3, [sp, #4]
   d7c6e:	bd08      	pop	{r3, pc}
   d7c70:	00030248 	.word	0x00030248

000d7c74 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7c74:	b508      	push	{r3, lr}
   d7c76:	4b02      	ldr	r3, [pc, #8]	; (d7c80 <os_thread_yield+0xc>)
   d7c78:	681b      	ldr	r3, [r3, #0]
   d7c7a:	68db      	ldr	r3, [r3, #12]
   d7c7c:	9301      	str	r3, [sp, #4]
   d7c7e:	bd08      	pop	{r3, pc}
   d7c80:	00030248 	.word	0x00030248

000d7c84 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7c84:	b508      	push	{r3, lr}
   d7c86:	4b02      	ldr	r3, [pc, #8]	; (d7c90 <os_thread_scheduling+0xc>)
   d7c88:	681b      	ldr	r3, [r3, #0]
   d7c8a:	69db      	ldr	r3, [r3, #28]
   d7c8c:	9301      	str	r3, [sp, #4]
   d7c8e:	bd08      	pop	{r3, pc}
   d7c90:	00030248 	.word	0x00030248

000d7c94 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7c94:	b508      	push	{r3, lr}
   d7c96:	4b02      	ldr	r3, [pc, #8]	; (d7ca0 <os_timer_create+0xc>)
   d7c98:	681b      	ldr	r3, [r3, #0]
   d7c9a:	6a1b      	ldr	r3, [r3, #32]
   d7c9c:	9301      	str	r3, [sp, #4]
   d7c9e:	bd08      	pop	{r3, pc}
   d7ca0:	00030248 	.word	0x00030248

000d7ca4 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7ca4:	b508      	push	{r3, lr}
   d7ca6:	4b02      	ldr	r3, [pc, #8]	; (d7cb0 <os_timer_destroy+0xc>)
   d7ca8:	681b      	ldr	r3, [r3, #0]
   d7caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7cac:	9301      	str	r3, [sp, #4]
   d7cae:	bd08      	pop	{r3, pc}
   d7cb0:	00030248 	.word	0x00030248

000d7cb4 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7cb4:	b508      	push	{r3, lr}
   d7cb6:	4b02      	ldr	r3, [pc, #8]	; (d7cc0 <os_timer_get_id+0xc>)
   d7cb8:	681b      	ldr	r3, [r3, #0]
   d7cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7cbc:	9301      	str	r3, [sp, #4]
   d7cbe:	bd08      	pop	{r3, pc}
   d7cc0:	00030248 	.word	0x00030248

000d7cc4 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7cc4:	b508      	push	{r3, lr}
   d7cc6:	4b02      	ldr	r3, [pc, #8]	; (d7cd0 <os_timer_change+0xc>)
   d7cc8:	681b      	ldr	r3, [r3, #0]
   d7cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ccc:	9301      	str	r3, [sp, #4]
   d7cce:	bd08      	pop	{r3, pc}
   d7cd0:	00030248 	.word	0x00030248

000d7cd4 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7cd4:	b508      	push	{r3, lr}
   d7cd6:	4b02      	ldr	r3, [pc, #8]	; (d7ce0 <os_mutex_create+0xc>)
   d7cd8:	681b      	ldr	r3, [r3, #0]
   d7cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7cdc:	9301      	str	r3, [sp, #4]
   d7cde:	bd08      	pop	{r3, pc}
   d7ce0:	00030248 	.word	0x00030248

000d7ce4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7ce4:	b508      	push	{r3, lr}
   d7ce6:	4b02      	ldr	r3, [pc, #8]	; (d7cf0 <os_mutex_lock+0xc>)
   d7ce8:	681b      	ldr	r3, [r3, #0]
   d7cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7cec:	9301      	str	r3, [sp, #4]
   d7cee:	bd08      	pop	{r3, pc}
   d7cf0:	00030248 	.word	0x00030248

000d7cf4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7cf4:	b508      	push	{r3, lr}
   d7cf6:	4b02      	ldr	r3, [pc, #8]	; (d7d00 <os_mutex_unlock+0xc>)
   d7cf8:	681b      	ldr	r3, [r3, #0]
   d7cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7cfc:	9301      	str	r3, [sp, #4]
   d7cfe:	bd08      	pop	{r3, pc}
   d7d00:	00030248 	.word	0x00030248

000d7d04 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7d04:	b508      	push	{r3, lr}
   d7d06:	4b02      	ldr	r3, [pc, #8]	; (d7d10 <os_mutex_recursive_create+0xc>)
   d7d08:	681b      	ldr	r3, [r3, #0]
   d7d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d0c:	9301      	str	r3, [sp, #4]
   d7d0e:	bd08      	pop	{r3, pc}
   d7d10:	00030248 	.word	0x00030248

000d7d14 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7d14:	b508      	push	{r3, lr}
   d7d16:	4b02      	ldr	r3, [pc, #8]	; (d7d20 <os_mutex_recursive_destroy+0xc>)
   d7d18:	681b      	ldr	r3, [r3, #0]
   d7d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7d1c:	9301      	str	r3, [sp, #4]
   d7d1e:	bd08      	pop	{r3, pc}
   d7d20:	00030248 	.word	0x00030248

000d7d24 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7d24:	b508      	push	{r3, lr}
   d7d26:	4b02      	ldr	r3, [pc, #8]	; (d7d30 <os_mutex_recursive_lock+0xc>)
   d7d28:	681b      	ldr	r3, [r3, #0]
   d7d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7d2c:	9301      	str	r3, [sp, #4]
   d7d2e:	bd08      	pop	{r3, pc}
   d7d30:	00030248 	.word	0x00030248

000d7d34 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7d34:	b508      	push	{r3, lr}
   d7d36:	4b02      	ldr	r3, [pc, #8]	; (d7d40 <os_mutex_recursive_unlock+0xc>)
   d7d38:	681b      	ldr	r3, [r3, #0]
   d7d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7d3c:	9301      	str	r3, [sp, #4]
   d7d3e:	bd08      	pop	{r3, pc}
   d7d40:	00030248 	.word	0x00030248

000d7d44 <os_timer_is_active>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d7d44:	b508      	push	{r3, lr}
   d7d46:	4b02      	ldr	r3, [pc, #8]	; (d7d50 <os_timer_is_active+0xc>)
   d7d48:	681b      	ldr	r3, [r3, #0]
   d7d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7d4c:	9301      	str	r3, [sp, #4]
   d7d4e:	bd08      	pop	{r3, pc}
   d7d50:	00030248 	.word	0x00030248

000d7d54 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7d54:	b508      	push	{r3, lr}
   d7d56:	4b02      	ldr	r3, [pc, #8]	; (d7d60 <os_thread_exit+0xc>)
   d7d58:	681b      	ldr	r3, [r3, #0]
   d7d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7d5c:	9301      	str	r3, [sp, #4]
   d7d5e:	bd08      	pop	{r3, pc}
   d7d60:	00030248 	.word	0x00030248

000d7d64 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7d64:	b508      	push	{r3, lr}
   d7d66:	4b02      	ldr	r3, [pc, #8]	; (d7d70 <os_timer_set_id+0xc>)
   d7d68:	681b      	ldr	r3, [r3, #0]
   d7d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7d6c:	9301      	str	r3, [sp, #4]
   d7d6e:	bd08      	pop	{r3, pc}
   d7d70:	00030248 	.word	0x00030248

000d7d74 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7d74:	b508      	push	{r3, lr}
   d7d76:	4b02      	ldr	r3, [pc, #8]	; (d7d80 <HAL_Feature_Set+0xc>)
   d7d78:	681b      	ldr	r3, [r3, #0]
   d7d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7d7c:	9301      	str	r3, [sp, #4]
   d7d7e:	bd08      	pop	{r3, pc}
   d7d80:	00030234 	.word	0x00030234

000d7d84 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7d84:	b508      	push	{r3, lr}
   d7d86:	4b02      	ldr	r3, [pc, #8]	; (d7d90 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7d88:	681b      	ldr	r3, [r3, #0]
   d7d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7d8c:	9301      	str	r3, [sp, #4]
   d7d8e:	bd08      	pop	{r3, pc}
   d7d90:	00030234 	.word	0x00030234

000d7d94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7d94:	b508      	push	{r3, lr}
   d7d96:	4b02      	ldr	r3, [pc, #8]	; (d7da0 <HAL_RNG_GetRandomNumber+0xc>)
   d7d98:	681b      	ldr	r3, [r3, #0]
   d7d9a:	685b      	ldr	r3, [r3, #4]
   d7d9c:	9301      	str	r3, [sp, #4]
   d7d9e:	bd08      	pop	{r3, pc}
   d7da0:	00030218 	.word	0x00030218

000d7da4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7da4:	b508      	push	{r3, lr}
   d7da6:	4b02      	ldr	r3, [pc, #8]	; (d7db0 <HAL_Delay_Milliseconds+0xc>)
   d7da8:	681b      	ldr	r3, [r3, #0]
   d7daa:	689b      	ldr	r3, [r3, #8]
   d7dac:	9301      	str	r3, [sp, #4]
   d7dae:	bd08      	pop	{r3, pc}
   d7db0:	00030218 	.word	0x00030218

000d7db4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7db4:	b508      	push	{r3, lr}
   d7db6:	4b02      	ldr	r3, [pc, #8]	; (d7dc0 <HAL_Delay_Microseconds+0xc>)
   d7db8:	681b      	ldr	r3, [r3, #0]
   d7dba:	68db      	ldr	r3, [r3, #12]
   d7dbc:	9301      	str	r3, [sp, #4]
   d7dbe:	bd08      	pop	{r3, pc}
   d7dc0:	00030218 	.word	0x00030218

000d7dc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7dc4:	b508      	push	{r3, lr}
   d7dc6:	4b02      	ldr	r3, [pc, #8]	; (d7dd0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7dc8:	681b      	ldr	r3, [r3, #0]
   d7dca:	695b      	ldr	r3, [r3, #20]
   d7dcc:	9301      	str	r3, [sp, #4]
   d7dce:	bd08      	pop	{r3, pc}
   d7dd0:	00030218 	.word	0x00030218

000d7dd4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7dd4:	b508      	push	{r3, lr}
   d7dd6:	4b02      	ldr	r3, [pc, #8]	; (d7de0 <hal_rtc_time_is_valid+0xc>)
   d7dd8:	681b      	ldr	r3, [r3, #0]
   d7dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7ddc:	9301      	str	r3, [sp, #4]
   d7dde:	bd08      	pop	{r3, pc}
   d7de0:	00030218 	.word	0x00030218

000d7de4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7de4:	b508      	push	{r3, lr}
   d7de6:	4b02      	ldr	r3, [pc, #8]	; (d7df0 <hal_timer_millis+0xc>)
   d7de8:	681b      	ldr	r3, [r3, #0]
   d7dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7dec:	9301      	str	r3, [sp, #4]
   d7dee:	bd08      	pop	{r3, pc}
   d7df0:	00030218 	.word	0x00030218

000d7df4 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7df4:	b508      	push	{r3, lr}
   d7df6:	4b02      	ldr	r3, [pc, #8]	; (d7e00 <hal_rtc_get_time+0xc>)
   d7df8:	681b      	ldr	r3, [r3, #0]
   d7dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7dfc:	9301      	str	r3, [sp, #4]
   d7dfe:	bd08      	pop	{r3, pc}
   d7e00:	00030218 	.word	0x00030218

000d7e04 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7e04:	b508      	push	{r3, lr}
   d7e06:	4b02      	ldr	r3, [pc, #8]	; (d7e10 <hal_rtc_set_time+0xc>)
   d7e08:	681b      	ldr	r3, [r3, #0]
   d7e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7e0c:	9301      	str	r3, [sp, #4]
   d7e0e:	bd08      	pop	{r3, pc}
   d7e10:	00030218 	.word	0x00030218

000d7e14 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7e14:	b508      	push	{r3, lr}
   d7e16:	4b02      	ldr	r3, [pc, #8]	; (d7e20 <HAL_Pin_Map+0xc>)
   d7e18:	681b      	ldr	r3, [r3, #0]
   d7e1a:	681b      	ldr	r3, [r3, #0]
   d7e1c:	9301      	str	r3, [sp, #4]
   d7e1e:	bd08      	pop	{r3, pc}
   d7e20:	0003022c 	.word	0x0003022c

000d7e24 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7e24:	b508      	push	{r3, lr}
   d7e26:	4b02      	ldr	r3, [pc, #8]	; (d7e30 <HAL_Validate_Pin_Function+0xc>)
   d7e28:	681b      	ldr	r3, [r3, #0]
   d7e2a:	685b      	ldr	r3, [r3, #4]
   d7e2c:	9301      	str	r3, [sp, #4]
   d7e2e:	bd08      	pop	{r3, pc}
   d7e30:	0003022c 	.word	0x0003022c

000d7e34 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7e34:	b508      	push	{r3, lr}
   d7e36:	4b02      	ldr	r3, [pc, #8]	; (d7e40 <HAL_Pin_Mode+0xc>)
   d7e38:	681b      	ldr	r3, [r3, #0]
   d7e3a:	689b      	ldr	r3, [r3, #8]
   d7e3c:	9301      	str	r3, [sp, #4]
   d7e3e:	bd08      	pop	{r3, pc}
   d7e40:	0003022c 	.word	0x0003022c

000d7e44 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7e44:	b508      	push	{r3, lr}
   d7e46:	4b02      	ldr	r3, [pc, #8]	; (d7e50 <HAL_Get_Pin_Mode+0xc>)
   d7e48:	681b      	ldr	r3, [r3, #0]
   d7e4a:	68db      	ldr	r3, [r3, #12]
   d7e4c:	9301      	str	r3, [sp, #4]
   d7e4e:	bd08      	pop	{r3, pc}
   d7e50:	0003022c 	.word	0x0003022c

000d7e54 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7e54:	b508      	push	{r3, lr}
   d7e56:	4b02      	ldr	r3, [pc, #8]	; (d7e60 <HAL_GPIO_Write+0xc>)
   d7e58:	681b      	ldr	r3, [r3, #0]
   d7e5a:	691b      	ldr	r3, [r3, #16]
   d7e5c:	9301      	str	r3, [sp, #4]
   d7e5e:	bd08      	pop	{r3, pc}
   d7e60:	0003022c 	.word	0x0003022c

000d7e64 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7e64:	b508      	push	{r3, lr}
   d7e66:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <HAL_GPIO_Read+0xc>)
   d7e68:	681b      	ldr	r3, [r3, #0]
   d7e6a:	695b      	ldr	r3, [r3, #20]
   d7e6c:	9301      	str	r3, [sp, #4]
   d7e6e:	bd08      	pop	{r3, pc}
   d7e70:	0003022c 	.word	0x0003022c

000d7e74 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7e74:	b508      	push	{r3, lr}
   d7e76:	4b02      	ldr	r3, [pc, #8]	; (d7e80 <HAL_Interrupts_Attach+0xc>)
   d7e78:	681b      	ldr	r3, [r3, #0]
   d7e7a:	699b      	ldr	r3, [r3, #24]
   d7e7c:	9301      	str	r3, [sp, #4]
   d7e7e:	bd08      	pop	{r3, pc}
   d7e80:	0003022c 	.word	0x0003022c

000d7e84 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7e84:	b508      	push	{r3, lr}
   d7e86:	4b02      	ldr	r3, [pc, #8]	; (d7e90 <HAL_Interrupts_Detach+0xc>)
   d7e88:	681b      	ldr	r3, [r3, #0]
   d7e8a:	69db      	ldr	r3, [r3, #28]
   d7e8c:	9301      	str	r3, [sp, #4]
   d7e8e:	bd08      	pop	{r3, pc}
   d7e90:	0003022c 	.word	0x0003022c

000d7e94 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7e94:	b508      	push	{r3, lr}
   d7e96:	4b02      	ldr	r3, [pc, #8]	; (d7ea0 <hal_adc_read+0xc>)
   d7e98:	681b      	ldr	r3, [r3, #0]
   d7e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e9c:	9301      	str	r3, [sp, #4]
   d7e9e:	bd08      	pop	{r3, pc}
   d7ea0:	0003022c 	.word	0x0003022c

000d7ea4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7ea4:	b508      	push	{r3, lr}
   d7ea6:	4b02      	ldr	r3, [pc, #8]	; (d7eb0 <hal_i2c_begin+0xc>)
   d7ea8:	681b      	ldr	r3, [r3, #0]
   d7eaa:	68db      	ldr	r3, [r3, #12]
   d7eac:	9301      	str	r3, [sp, #4]
   d7eae:	bd08      	pop	{r3, pc}
   d7eb0:	00030228 	.word	0x00030228

000d7eb4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7eb4:	b508      	push	{r3, lr}
   d7eb6:	4b02      	ldr	r3, [pc, #8]	; (d7ec0 <hal_i2c_begin_transmission+0xc>)
   d7eb8:	681b      	ldr	r3, [r3, #0]
   d7eba:	699b      	ldr	r3, [r3, #24]
   d7ebc:	9301      	str	r3, [sp, #4]
   d7ebe:	bd08      	pop	{r3, pc}
   d7ec0:	00030228 	.word	0x00030228

000d7ec4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7ec4:	b508      	push	{r3, lr}
   d7ec6:	4b02      	ldr	r3, [pc, #8]	; (d7ed0 <hal_i2c_end_transmission+0xc>)
   d7ec8:	681b      	ldr	r3, [r3, #0]
   d7eca:	69db      	ldr	r3, [r3, #28]
   d7ecc:	9301      	str	r3, [sp, #4]
   d7ece:	bd08      	pop	{r3, pc}
   d7ed0:	00030228 	.word	0x00030228

000d7ed4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7ed4:	b508      	push	{r3, lr}
   d7ed6:	4b02      	ldr	r3, [pc, #8]	; (d7ee0 <hal_i2c_write+0xc>)
   d7ed8:	681b      	ldr	r3, [r3, #0]
   d7eda:	6a1b      	ldr	r3, [r3, #32]
   d7edc:	9301      	str	r3, [sp, #4]
   d7ede:	bd08      	pop	{r3, pc}
   d7ee0:	00030228 	.word	0x00030228

000d7ee4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7ee4:	b508      	push	{r3, lr}
   d7ee6:	4b02      	ldr	r3, [pc, #8]	; (d7ef0 <hal_i2c_available+0xc>)
   d7ee8:	681b      	ldr	r3, [r3, #0]
   d7eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7eec:	9301      	str	r3, [sp, #4]
   d7eee:	bd08      	pop	{r3, pc}
   d7ef0:	00030228 	.word	0x00030228

000d7ef4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7ef4:	b508      	push	{r3, lr}
   d7ef6:	4b02      	ldr	r3, [pc, #8]	; (d7f00 <hal_i2c_read+0xc>)
   d7ef8:	681b      	ldr	r3, [r3, #0]
   d7efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7efc:	9301      	str	r3, [sp, #4]
   d7efe:	bd08      	pop	{r3, pc}
   d7f00:	00030228 	.word	0x00030228

000d7f04 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7f04:	b508      	push	{r3, lr}
   d7f06:	4b02      	ldr	r3, [pc, #8]	; (d7f10 <hal_i2c_peek+0xc>)
   d7f08:	681b      	ldr	r3, [r3, #0]
   d7f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7f0c:	9301      	str	r3, [sp, #4]
   d7f0e:	bd08      	pop	{r3, pc}
   d7f10:	00030228 	.word	0x00030228

000d7f14 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7f14:	b508      	push	{r3, lr}
   d7f16:	4b02      	ldr	r3, [pc, #8]	; (d7f20 <hal_i2c_flush+0xc>)
   d7f18:	681b      	ldr	r3, [r3, #0]
   d7f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7f1c:	9301      	str	r3, [sp, #4]
   d7f1e:	bd08      	pop	{r3, pc}
   d7f20:	00030228 	.word	0x00030228

000d7f24 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7f24:	b508      	push	{r3, lr}
   d7f26:	4b02      	ldr	r3, [pc, #8]	; (d7f30 <hal_i2c_is_enabled+0xc>)
   d7f28:	681b      	ldr	r3, [r3, #0]
   d7f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7f2c:	9301      	str	r3, [sp, #4]
   d7f2e:	bd08      	pop	{r3, pc}
   d7f30:	00030228 	.word	0x00030228

000d7f34 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7f34:	b508      	push	{r3, lr}
   d7f36:	4b02      	ldr	r3, [pc, #8]	; (d7f40 <hal_i2c_init+0xc>)
   d7f38:	681b      	ldr	r3, [r3, #0]
   d7f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7f3c:	9301      	str	r3, [sp, #4]
   d7f3e:	bd08      	pop	{r3, pc}
   d7f40:	00030228 	.word	0x00030228

000d7f44 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7f44:	b508      	push	{r3, lr}
   d7f46:	4b02      	ldr	r3, [pc, #8]	; (d7f50 <hal_i2c_lock+0xc>)
   d7f48:	681b      	ldr	r3, [r3, #0]
   d7f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7f4c:	9301      	str	r3, [sp, #4]
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	00030228 	.word	0x00030228

000d7f54 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7f54:	b508      	push	{r3, lr}
   d7f56:	4b02      	ldr	r3, [pc, #8]	; (d7f60 <hal_i2c_unlock+0xc>)
   d7f58:	681b      	ldr	r3, [r3, #0]
   d7f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7f5c:	9301      	str	r3, [sp, #4]
   d7f5e:	bd08      	pop	{r3, pc}
   d7f60:	00030228 	.word	0x00030228

000d7f64 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7f64:	b508      	push	{r3, lr}
   d7f66:	4b02      	ldr	r3, [pc, #8]	; (d7f70 <hal_i2c_request_ex+0xc>)
   d7f68:	681b      	ldr	r3, [r3, #0]
   d7f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7f6c:	9301      	str	r3, [sp, #4]
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	00030228 	.word	0x00030228

000d7f74 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7f74:	b508      	push	{r3, lr}
   d7f76:	4b02      	ldr	r3, [pc, #8]	; (d7f80 <inet_inet_ntop+0xc>)
   d7f78:	681b      	ldr	r3, [r3, #0]
   d7f7a:	695b      	ldr	r3, [r3, #20]
   d7f7c:	9301      	str	r3, [sp, #4]
   d7f7e:	bd08      	pop	{r3, pc}
   d7f80:	00030264 	.word	0x00030264

000d7f84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7f84:	b508      	push	{r3, lr}
   d7f86:	4b02      	ldr	r3, [pc, #8]	; (d7f90 <netdb_freeaddrinfo+0xc>)
   d7f88:	681b      	ldr	r3, [r3, #0]
   d7f8a:	689b      	ldr	r3, [r3, #8]
   d7f8c:	9301      	str	r3, [sp, #4]
   d7f8e:	bd08      	pop	{r3, pc}
   d7f90:	00030268 	.word	0x00030268

000d7f94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7f94:	b508      	push	{r3, lr}
   d7f96:	4b02      	ldr	r3, [pc, #8]	; (d7fa0 <netdb_getaddrinfo+0xc>)
   d7f98:	681b      	ldr	r3, [r3, #0]
   d7f9a:	68db      	ldr	r3, [r3, #12]
   d7f9c:	9301      	str	r3, [sp, #4]
   d7f9e:	bd08      	pop	{r3, pc}
   d7fa0:	00030268 	.word	0x00030268

000d7fa4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7fa4:	b508      	push	{r3, lr}
   d7fa6:	4b02      	ldr	r3, [pc, #8]	; (d7fb0 <hal_spi_init+0xc>)
   d7fa8:	681b      	ldr	r3, [r3, #0]
   d7faa:	69db      	ldr	r3, [r3, #28]
   d7fac:	9301      	str	r3, [sp, #4]
   d7fae:	bd08      	pop	{r3, pc}
   d7fb0:	00030230 	.word	0x00030230

000d7fb4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7fb4:	b508      	push	{r3, lr}
   d7fb6:	4b02      	ldr	r3, [pc, #8]	; (d7fc0 <hal_spi_is_enabled+0xc>)
   d7fb8:	681b      	ldr	r3, [r3, #0]
   d7fba:	6a1b      	ldr	r3, [r3, #32]
   d7fbc:	9301      	str	r3, [sp, #4]
   d7fbe:	bd08      	pop	{r3, pc}
   d7fc0:	00030230 	.word	0x00030230

000d7fc4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7fc4:	b508      	push	{r3, lr}
   d7fc6:	4b02      	ldr	r3, [pc, #8]	; (d7fd0 <hal_usart_init+0xc>)
   d7fc8:	681b      	ldr	r3, [r3, #0]
   d7fca:	681b      	ldr	r3, [r3, #0]
   d7fcc:	9301      	str	r3, [sp, #4]
   d7fce:	bd08      	pop	{r3, pc}
   d7fd0:	0003023c 	.word	0x0003023c

000d7fd4 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d7fd4:	b508      	push	{r3, lr}
   d7fd6:	4b02      	ldr	r3, [pc, #8]	; (d7fe0 <hal_usart_end+0xc>)
   d7fd8:	681b      	ldr	r3, [r3, #0]
   d7fda:	689b      	ldr	r3, [r3, #8]
   d7fdc:	9301      	str	r3, [sp, #4]
   d7fde:	bd08      	pop	{r3, pc}
   d7fe0:	0003023c 	.word	0x0003023c

000d7fe4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7fe4:	b508      	push	{r3, lr}
   d7fe6:	4b02      	ldr	r3, [pc, #8]	; (d7ff0 <hal_usart_write+0xc>)
   d7fe8:	681b      	ldr	r3, [r3, #0]
   d7fea:	68db      	ldr	r3, [r3, #12]
   d7fec:	9301      	str	r3, [sp, #4]
   d7fee:	bd08      	pop	{r3, pc}
   d7ff0:	0003023c 	.word	0x0003023c

000d7ff4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7ff4:	b508      	push	{r3, lr}
   d7ff6:	4b02      	ldr	r3, [pc, #8]	; (d8000 <hal_usart_available+0xc>)
   d7ff8:	681b      	ldr	r3, [r3, #0]
   d7ffa:	691b      	ldr	r3, [r3, #16]
   d7ffc:	9301      	str	r3, [sp, #4]
   d7ffe:	bd08      	pop	{r3, pc}
   d8000:	0003023c 	.word	0x0003023c

000d8004 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d8004:	b508      	push	{r3, lr}
   d8006:	4b02      	ldr	r3, [pc, #8]	; (d8010 <hal_usart_read+0xc>)
   d8008:	681b      	ldr	r3, [r3, #0]
   d800a:	695b      	ldr	r3, [r3, #20]
   d800c:	9301      	str	r3, [sp, #4]
   d800e:	bd08      	pop	{r3, pc}
   d8010:	0003023c 	.word	0x0003023c

000d8014 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d8014:	b508      	push	{r3, lr}
   d8016:	4b02      	ldr	r3, [pc, #8]	; (d8020 <hal_usart_peek+0xc>)
   d8018:	681b      	ldr	r3, [r3, #0]
   d801a:	699b      	ldr	r3, [r3, #24]
   d801c:	9301      	str	r3, [sp, #4]
   d801e:	bd08      	pop	{r3, pc}
   d8020:	0003023c 	.word	0x0003023c

000d8024 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8024:	b508      	push	{r3, lr}
   d8026:	4b02      	ldr	r3, [pc, #8]	; (d8030 <hal_usart_flush+0xc>)
   d8028:	681b      	ldr	r3, [r3, #0]
   d802a:	69db      	ldr	r3, [r3, #28]
   d802c:	9301      	str	r3, [sp, #4]
   d802e:	bd08      	pop	{r3, pc}
   d8030:	0003023c 	.word	0x0003023c

000d8034 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8034:	b508      	push	{r3, lr}
   d8036:	4b02      	ldr	r3, [pc, #8]	; (d8040 <hal_usart_is_enabled+0xc>)
   d8038:	681b      	ldr	r3, [r3, #0]
   d803a:	6a1b      	ldr	r3, [r3, #32]
   d803c:	9301      	str	r3, [sp, #4]
   d803e:	bd08      	pop	{r3, pc}
   d8040:	0003023c 	.word	0x0003023c

000d8044 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8044:	b508      	push	{r3, lr}
   d8046:	4b02      	ldr	r3, [pc, #8]	; (d8050 <hal_usart_available_data_for_write+0xc>)
   d8048:	681b      	ldr	r3, [r3, #0]
   d804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d804c:	9301      	str	r3, [sp, #4]
   d804e:	bd08      	pop	{r3, pc}
   d8050:	0003023c 	.word	0x0003023c

000d8054 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d8054:	b508      	push	{r3, lr}
   d8056:	4b02      	ldr	r3, [pc, #8]	; (d8060 <hal_usart_begin_config+0xc>)
   d8058:	681b      	ldr	r3, [r3, #0]
   d805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d805c:	9301      	str	r3, [sp, #4]
   d805e:	bd08      	pop	{r3, pc}
   d8060:	0003023c 	.word	0x0003023c

000d8064 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8064:	b508      	push	{r3, lr}
   d8066:	4b02      	ldr	r3, [pc, #8]	; (d8070 <HAL_USB_USART_Init+0xc>)
   d8068:	681b      	ldr	r3, [r3, #0]
   d806a:	681b      	ldr	r3, [r3, #0]
   d806c:	9301      	str	r3, [sp, #4]
   d806e:	bd08      	pop	{r3, pc}
   d8070:	0003024c 	.word	0x0003024c

000d8074 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8074:	b508      	push	{r3, lr}
   d8076:	4b02      	ldr	r3, [pc, #8]	; (d8080 <HAL_USB_USART_Begin+0xc>)
   d8078:	681b      	ldr	r3, [r3, #0]
   d807a:	685b      	ldr	r3, [r3, #4]
   d807c:	9301      	str	r3, [sp, #4]
   d807e:	bd08      	pop	{r3, pc}
   d8080:	0003024c 	.word	0x0003024c

000d8084 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d8084:	b508      	push	{r3, lr}
   d8086:	4b02      	ldr	r3, [pc, #8]	; (d8090 <HAL_USB_USART_End+0xc>)
   d8088:	681b      	ldr	r3, [r3, #0]
   d808a:	689b      	ldr	r3, [r3, #8]
   d808c:	9301      	str	r3, [sp, #4]
   d808e:	bd08      	pop	{r3, pc}
   d8090:	0003024c 	.word	0x0003024c

000d8094 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8094:	b508      	push	{r3, lr}
   d8096:	4b02      	ldr	r3, [pc, #8]	; (d80a0 <HAL_USB_USART_Available_Data+0xc>)
   d8098:	681b      	ldr	r3, [r3, #0]
   d809a:	691b      	ldr	r3, [r3, #16]
   d809c:	9301      	str	r3, [sp, #4]
   d809e:	bd08      	pop	{r3, pc}
   d80a0:	0003024c 	.word	0x0003024c

000d80a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d80a4:	b508      	push	{r3, lr}
   d80a6:	4b02      	ldr	r3, [pc, #8]	; (d80b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d80a8:	681b      	ldr	r3, [r3, #0]
   d80aa:	695b      	ldr	r3, [r3, #20]
   d80ac:	9301      	str	r3, [sp, #4]
   d80ae:	bd08      	pop	{r3, pc}
   d80b0:	0003024c 	.word	0x0003024c

000d80b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d80b4:	b508      	push	{r3, lr}
   d80b6:	4b02      	ldr	r3, [pc, #8]	; (d80c0 <HAL_USB_USART_Receive_Data+0xc>)
   d80b8:	681b      	ldr	r3, [r3, #0]
   d80ba:	699b      	ldr	r3, [r3, #24]
   d80bc:	9301      	str	r3, [sp, #4]
   d80be:	bd08      	pop	{r3, pc}
   d80c0:	0003024c 	.word	0x0003024c

000d80c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d80c4:	b508      	push	{r3, lr}
   d80c6:	4b02      	ldr	r3, [pc, #8]	; (d80d0 <HAL_USB_USART_Send_Data+0xc>)
   d80c8:	681b      	ldr	r3, [r3, #0]
   d80ca:	69db      	ldr	r3, [r3, #28]
   d80cc:	9301      	str	r3, [sp, #4]
   d80ce:	bd08      	pop	{r3, pc}
   d80d0:	0003024c 	.word	0x0003024c

000d80d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d80d4:	b508      	push	{r3, lr}
   d80d6:	4b02      	ldr	r3, [pc, #8]	; (d80e0 <HAL_USB_USART_Flush_Data+0xc>)
   d80d8:	681b      	ldr	r3, [r3, #0]
   d80da:	6a1b      	ldr	r3, [r3, #32]
   d80dc:	9301      	str	r3, [sp, #4]
   d80de:	bd08      	pop	{r3, pc}
   d80e0:	0003024c 	.word	0x0003024c

000d80e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d80e4:	b508      	push	{r3, lr}
   d80e6:	4b02      	ldr	r3, [pc, #8]	; (d80f0 <panic_+0xc>)
   d80e8:	681b      	ldr	r3, [r3, #0]
   d80ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d80ec:	9301      	str	r3, [sp, #4]
   d80ee:	bd08      	pop	{r3, pc}
   d80f0:	00030260 	.word	0x00030260

000d80f4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d80f4:	b508      	push	{r3, lr}
   d80f6:	4b02      	ldr	r3, [pc, #8]	; (d8100 <log_message+0xc>)
   d80f8:	681b      	ldr	r3, [r3, #0]
   d80fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d80fc:	9301      	str	r3, [sp, #4]
   d80fe:	bd08      	pop	{r3, pc}
   d8100:	00030260 	.word	0x00030260

000d8104 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8104:	b508      	push	{r3, lr}
   d8106:	4b02      	ldr	r3, [pc, #8]	; (d8110 <log_message_v+0xc>)
   d8108:	681b      	ldr	r3, [r3, #0]
   d810a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d810c:	9301      	str	r3, [sp, #4]
   d810e:	bd08      	pop	{r3, pc}
   d8110:	00030260 	.word	0x00030260

000d8114 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d8114:	b508      	push	{r3, lr}
   d8116:	4b02      	ldr	r3, [pc, #8]	; (d8120 <log_level_name+0xc>)
   d8118:	681b      	ldr	r3, [r3, #0]
   d811a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d811c:	9301      	str	r3, [sp, #4]
   d811e:	bd08      	pop	{r3, pc}
   d8120:	00030260 	.word	0x00030260

000d8124 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d8124:	b508      	push	{r3, lr}
   d8126:	4b02      	ldr	r3, [pc, #8]	; (d8130 <log_set_callbacks+0xc>)
   d8128:	681b      	ldr	r3, [r3, #0]
   d812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d812c:	9301      	str	r3, [sp, #4]
   d812e:	bd08      	pop	{r3, pc}
   d8130:	00030260 	.word	0x00030260

000d8134 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8134:	b508      	push	{r3, lr}
   d8136:	4b03      	ldr	r3, [pc, #12]	; (d8144 <diag_get_source+0x10>)
   d8138:	681b      	ldr	r3, [r3, #0]
   d813a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d813e:	9301      	str	r3, [sp, #4]
   d8140:	bd08      	pop	{r3, pc}
   d8142:	0000      	.short	0x0000
   d8144:	00030260 	.word	0x00030260

000d8148 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8148:	b508      	push	{r3, lr}
   d814a:	4b02      	ldr	r3, [pc, #8]	; (d8154 <system_mode+0xc>)
   d814c:	681b      	ldr	r3, [r3, #0]
   d814e:	681b      	ldr	r3, [r3, #0]
   d8150:	9301      	str	r3, [sp, #4]
   d8152:	bd08      	pop	{r3, pc}
   d8154:	00030220 	.word	0x00030220

000d8158 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8158:	b508      	push	{r3, lr}
   d815a:	4b02      	ldr	r3, [pc, #8]	; (d8164 <set_system_mode+0xc>)
   d815c:	681b      	ldr	r3, [r3, #0]
   d815e:	685b      	ldr	r3, [r3, #4]
   d8160:	9301      	str	r3, [sp, #4]
   d8162:	bd08      	pop	{r3, pc}
   d8164:	00030220 	.word	0x00030220

000d8168 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8168:	b508      	push	{r3, lr}
   d816a:	4b02      	ldr	r3, [pc, #8]	; (d8174 <system_delay_ms+0xc>)
   d816c:	681b      	ldr	r3, [r3, #0]
   d816e:	695b      	ldr	r3, [r3, #20]
   d8170:	9301      	str	r3, [sp, #4]
   d8172:	bd08      	pop	{r3, pc}
   d8174:	00030220 	.word	0x00030220

000d8178 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d8178:	b508      	push	{r3, lr}
   d817a:	4b02      	ldr	r3, [pc, #8]	; (d8184 <system_subscribe_event+0xc>)
   d817c:	681b      	ldr	r3, [r3, #0]
   d817e:	6a1b      	ldr	r3, [r3, #32]
   d8180:	9301      	str	r3, [sp, #4]
   d8182:	bd08      	pop	{r3, pc}
   d8184:	00030220 	.word	0x00030220

000d8188 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8188:	b508      	push	{r3, lr}
   d818a:	4b02      	ldr	r3, [pc, #8]	; (d8194 <system_thread_set_state+0xc>)
   d818c:	681b      	ldr	r3, [r3, #0]
   d818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8190:	9301      	str	r3, [sp, #4]
   d8192:	bd08      	pop	{r3, pc}
   d8194:	00030220 	.word	0x00030220

000d8198 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8198:	b508      	push	{r3, lr}
   d819a:	4b02      	ldr	r3, [pc, #8]	; (d81a4 <application_thread_current+0xc>)
   d819c:	681b      	ldr	r3, [r3, #0]
   d819e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d81a0:	9301      	str	r3, [sp, #4]
   d81a2:	bd08      	pop	{r3, pc}
   d81a4:	00030220 	.word	0x00030220

000d81a8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d81a8:	b508      	push	{r3, lr}
   d81aa:	4b02      	ldr	r3, [pc, #8]	; (d81b4 <application_thread_invoke+0xc>)
   d81ac:	681b      	ldr	r3, [r3, #0]
   d81ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d81b0:	9301      	str	r3, [sp, #4]
   d81b2:	bd08      	pop	{r3, pc}
   d81b4:	00030220 	.word	0x00030220

000d81b8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d81b8:	b508      	push	{r3, lr}
   d81ba:	4b02      	ldr	r3, [pc, #8]	; (d81c4 <system_thread_get_state+0xc>)
   d81bc:	681b      	ldr	r3, [r3, #0]
   d81be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d81c0:	9301      	str	r3, [sp, #4]
   d81c2:	bd08      	pop	{r3, pc}
   d81c4:	00030220 	.word	0x00030220

000d81c8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d81c8:	b508      	push	{r3, lr}
   d81ca:	4b02      	ldr	r3, [pc, #8]	; (d81d4 <system_notify_time_changed+0xc>)
   d81cc:	681b      	ldr	r3, [r3, #0]
   d81ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d81d0:	9301      	str	r3, [sp, #4]
   d81d2:	bd08      	pop	{r3, pc}
   d81d4:	00030220 	.word	0x00030220

000d81d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d81d8:	b508      	push	{r3, lr}
   d81da:	4b03      	ldr	r3, [pc, #12]	; (d81e8 <system_ctrl_set_app_request_handler+0x10>)
   d81dc:	681b      	ldr	r3, [r3, #0]
   d81de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d81e2:	9301      	str	r3, [sp, #4]
   d81e4:	bd08      	pop	{r3, pc}
   d81e6:	0000      	.short	0x0000
   d81e8:	00030220 	.word	0x00030220

000d81ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d81ec:	b508      	push	{r3, lr}
   d81ee:	4b03      	ldr	r3, [pc, #12]	; (d81fc <system_ctrl_set_result+0x10>)
   d81f0:	681b      	ldr	r3, [r3, #0]
   d81f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d81f6:	9301      	str	r3, [sp, #4]
   d81f8:	bd08      	pop	{r3, pc}
   d81fa:	0000      	.short	0x0000
   d81fc:	00030220 	.word	0x00030220

000d8200 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8200:	b508      	push	{r3, lr}
   d8202:	4b03      	ldr	r3, [pc, #12]	; (d8210 <system_power_management_set_config+0x10>)
   d8204:	681b      	ldr	r3, [r3, #0]
   d8206:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d820a:	9301      	str	r3, [sp, #4]
   d820c:	bd08      	pop	{r3, pc}
   d820e:	0000      	.short	0x0000
   d8210:	00030220 	.word	0x00030220

000d8214 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d8214:	b508      	push	{r3, lr}
   d8216:	4b03      	ldr	r3, [pc, #12]	; (d8224 <system_sleep_ext+0x10>)
   d8218:	681b      	ldr	r3, [r3, #0]
   d821a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d821e:	9301      	str	r3, [sp, #4]
   d8220:	bd08      	pop	{r3, pc}
   d8222:	0000      	.short	0x0000
   d8224:	00030220 	.word	0x00030220

000d8228 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8228:	b508      	push	{r3, lr}
   d822a:	4b03      	ldr	r3, [pc, #12]	; (d8238 <system_reset+0x10>)
   d822c:	681b      	ldr	r3, [r3, #0]
   d822e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d8232:	9301      	str	r3, [sp, #4]
   d8234:	bd08      	pop	{r3, pc}
   d8236:	0000      	.short	0x0000
   d8238:	00030220 	.word	0x00030220

000d823c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d823c:	b508      	push	{r3, lr}
   d823e:	4b02      	ldr	r3, [pc, #8]	; (d8248 <spark_variable+0xc>)
   d8240:	681b      	ldr	r3, [r3, #0]
   d8242:	681b      	ldr	r3, [r3, #0]
   d8244:	9301      	str	r3, [sp, #4]
   d8246:	bd08      	pop	{r3, pc}
   d8248:	00030244 	.word	0x00030244

000d824c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d824c:	b508      	push	{r3, lr}
   d824e:	4b02      	ldr	r3, [pc, #8]	; (d8258 <spark_function+0xc>)
   d8250:	681b      	ldr	r3, [r3, #0]
   d8252:	685b      	ldr	r3, [r3, #4]
   d8254:	9301      	str	r3, [sp, #4]
   d8256:	bd08      	pop	{r3, pc}
   d8258:	00030244 	.word	0x00030244

000d825c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d825c:	b508      	push	{r3, lr}
   d825e:	4b02      	ldr	r3, [pc, #8]	; (d8268 <spark_process+0xc>)
   d8260:	681b      	ldr	r3, [r3, #0]
   d8262:	689b      	ldr	r3, [r3, #8]
   d8264:	9301      	str	r3, [sp, #4]
   d8266:	bd08      	pop	{r3, pc}
   d8268:	00030244 	.word	0x00030244

000d826c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d826c:	b508      	push	{r3, lr}
   d826e:	4b02      	ldr	r3, [pc, #8]	; (d8278 <spark_cloud_flag_connect+0xc>)
   d8270:	681b      	ldr	r3, [r3, #0]
   d8272:	68db      	ldr	r3, [r3, #12]
   d8274:	9301      	str	r3, [sp, #4]
   d8276:	bd08      	pop	{r3, pc}
   d8278:	00030244 	.word	0x00030244

000d827c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d827c:	b508      	push	{r3, lr}
   d827e:	4b02      	ldr	r3, [pc, #8]	; (d8288 <spark_cloud_flag_connected+0xc>)
   d8280:	681b      	ldr	r3, [r3, #0]
   d8282:	695b      	ldr	r3, [r3, #20]
   d8284:	9301      	str	r3, [sp, #4]
   d8286:	bd08      	pop	{r3, pc}
   d8288:	00030244 	.word	0x00030244

000d828c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d828c:	b508      	push	{r3, lr}
   d828e:	4b02      	ldr	r3, [pc, #8]	; (d8298 <spark_deviceID+0xc>)
   d8290:	681b      	ldr	r3, [r3, #0]
   d8292:	69db      	ldr	r3, [r3, #28]
   d8294:	9301      	str	r3, [sp, #4]
   d8296:	bd08      	pop	{r3, pc}
   d8298:	00030244 	.word	0x00030244

000d829c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d829c:	b508      	push	{r3, lr}
   d829e:	4b02      	ldr	r3, [pc, #8]	; (d82a8 <spark_send_event+0xc>)
   d82a0:	681b      	ldr	r3, [r3, #0]
   d82a2:	6a1b      	ldr	r3, [r3, #32]
   d82a4:	9301      	str	r3, [sp, #4]
   d82a6:	bd08      	pop	{r3, pc}
   d82a8:	00030244 	.word	0x00030244

000d82ac <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d82ac:	b508      	push	{r3, lr}
   d82ae:	4b02      	ldr	r3, [pc, #8]	; (d82b8 <spark_subscribe+0xc>)
   d82b0:	681b      	ldr	r3, [r3, #0]
   d82b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d82b4:	9301      	str	r3, [sp, #4]
   d82b6:	bd08      	pop	{r3, pc}
   d82b8:	00030244 	.word	0x00030244

000d82bc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d82bc:	b508      	push	{r3, lr}
   d82be:	4b02      	ldr	r3, [pc, #8]	; (d82c8 <spark_sync_time+0xc>)
   d82c0:	681b      	ldr	r3, [r3, #0]
   d82c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d82c4:	9301      	str	r3, [sp, #4]
   d82c6:	bd08      	pop	{r3, pc}
   d82c8:	00030244 	.word	0x00030244

000d82cc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d82cc:	b508      	push	{r3, lr}
   d82ce:	4b02      	ldr	r3, [pc, #8]	; (d82d8 <spark_sync_time_pending+0xc>)
   d82d0:	681b      	ldr	r3, [r3, #0]
   d82d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d82d4:	9301      	str	r3, [sp, #4]
   d82d6:	bd08      	pop	{r3, pc}
   d82d8:	00030244 	.word	0x00030244

000d82dc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d82dc:	b508      	push	{r3, lr}
   d82de:	4b02      	ldr	r3, [pc, #8]	; (d82e8 <spark_sync_time_last+0xc>)
   d82e0:	681b      	ldr	r3, [r3, #0]
   d82e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d82e4:	9301      	str	r3, [sp, #4]
   d82e6:	bd08      	pop	{r3, pc}
   d82e8:	00030244 	.word	0x00030244

000d82ec <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d82ec:	b508      	push	{r3, lr}
   d82ee:	4b02      	ldr	r3, [pc, #8]	; (d82f8 <spark_set_connection_property+0xc>)
   d82f0:	681b      	ldr	r3, [r3, #0]
   d82f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d82f4:	9301      	str	r3, [sp, #4]
   d82f6:	bd08      	pop	{r3, pc}
   d82f8:	00030244 	.word	0x00030244

000d82fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d82fc:	b508      	push	{r3, lr}
   d82fe:	4b02      	ldr	r3, [pc, #8]	; (d8308 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8300:	681b      	ldr	r3, [r3, #0]
   d8302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8304:	9301      	str	r3, [sp, #4]
   d8306:	bd08      	pop	{r3, pc}
   d8308:	00030244 	.word	0x00030244

000d830c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d830c:	b508      	push	{r3, lr}
   d830e:	4b02      	ldr	r3, [pc, #8]	; (d8318 <spark_cloud_disconnect+0xc>)
   d8310:	681b      	ldr	r3, [r3, #0]
   d8312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8314:	9301      	str	r3, [sp, #4]
   d8316:	bd08      	pop	{r3, pc}
   d8318:	00030244 	.word	0x00030244

000d831c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d831c:	b508      	push	{r3, lr}
   d831e:	4b02      	ldr	r3, [pc, #8]	; (d8328 <network_connect+0xc>)
   d8320:	681b      	ldr	r3, [r3, #0]
   d8322:	685b      	ldr	r3, [r3, #4]
   d8324:	9301      	str	r3, [sp, #4]
   d8326:	bd08      	pop	{r3, pc}
   d8328:	00030240 	.word	0x00030240

000d832c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d832c:	b508      	push	{r3, lr}
   d832e:	4b02      	ldr	r3, [pc, #8]	; (d8338 <network_connecting+0xc>)
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	689b      	ldr	r3, [r3, #8]
   d8334:	9301      	str	r3, [sp, #4]
   d8336:	bd08      	pop	{r3, pc}
   d8338:	00030240 	.word	0x00030240

000d833c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d833c:	b508      	push	{r3, lr}
   d833e:	4b02      	ldr	r3, [pc, #8]	; (d8348 <network_disconnect+0xc>)
   d8340:	681b      	ldr	r3, [r3, #0]
   d8342:	68db      	ldr	r3, [r3, #12]
   d8344:	9301      	str	r3, [sp, #4]
   d8346:	bd08      	pop	{r3, pc}
   d8348:	00030240 	.word	0x00030240

000d834c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d834c:	b508      	push	{r3, lr}
   d834e:	4b02      	ldr	r3, [pc, #8]	; (d8358 <network_ready+0xc>)
   d8350:	681b      	ldr	r3, [r3, #0]
   d8352:	691b      	ldr	r3, [r3, #16]
   d8354:	9301      	str	r3, [sp, #4]
   d8356:	bd08      	pop	{r3, pc}
   d8358:	00030240 	.word	0x00030240

000d835c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d835c:	b508      	push	{r3, lr}
   d835e:	4b02      	ldr	r3, [pc, #8]	; (d8368 <network_on+0xc>)
   d8360:	681b      	ldr	r3, [r3, #0]
   d8362:	695b      	ldr	r3, [r3, #20]
   d8364:	9301      	str	r3, [sp, #4]
   d8366:	bd08      	pop	{r3, pc}
   d8368:	00030240 	.word	0x00030240

000d836c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d836c:	b508      	push	{r3, lr}
   d836e:	4b02      	ldr	r3, [pc, #8]	; (d8378 <network_off+0xc>)
   d8370:	681b      	ldr	r3, [r3, #0]
   d8372:	699b      	ldr	r3, [r3, #24]
   d8374:	9301      	str	r3, [sp, #4]
   d8376:	bd08      	pop	{r3, pc}
   d8378:	00030240 	.word	0x00030240

000d837c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d837c:	b508      	push	{r3, lr}
   d837e:	4b02      	ldr	r3, [pc, #8]	; (d8388 <network_listen+0xc>)
   d8380:	681b      	ldr	r3, [r3, #0]
   d8382:	69db      	ldr	r3, [r3, #28]
   d8384:	9301      	str	r3, [sp, #4]
   d8386:	bd08      	pop	{r3, pc}
   d8388:	00030240 	.word	0x00030240

000d838c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d838c:	b508      	push	{r3, lr}
   d838e:	4b02      	ldr	r3, [pc, #8]	; (d8398 <network_listening+0xc>)
   d8390:	681b      	ldr	r3, [r3, #0]
   d8392:	6a1b      	ldr	r3, [r3, #32]
   d8394:	9301      	str	r3, [sp, #4]
   d8396:	bd08      	pop	{r3, pc}
   d8398:	00030240 	.word	0x00030240

000d839c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d839c:	b508      	push	{r3, lr}
   d839e:	4b02      	ldr	r3, [pc, #8]	; (d83a8 <network_set_listen_timeout+0xc>)
   d83a0:	681b      	ldr	r3, [r3, #0]
   d83a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83a4:	9301      	str	r3, [sp, #4]
   d83a6:	bd08      	pop	{r3, pc}
   d83a8:	00030240 	.word	0x00030240

000d83ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d83ac:	b508      	push	{r3, lr}
   d83ae:	4b02      	ldr	r3, [pc, #8]	; (d83b8 <network_get_listen_timeout+0xc>)
   d83b0:	681b      	ldr	r3, [r3, #0]
   d83b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d83b4:	9301      	str	r3, [sp, #4]
   d83b6:	bd08      	pop	{r3, pc}
   d83b8:	00030240 	.word	0x00030240

000d83bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d83bc:	b508      	push	{r3, lr}
   d83be:	4b02      	ldr	r3, [pc, #8]	; (d83c8 <network_is_on+0xc>)
   d83c0:	681b      	ldr	r3, [r3, #0]
   d83c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d83c4:	9301      	str	r3, [sp, #4]
   d83c6:	bd08      	pop	{r3, pc}
   d83c8:	00030240 	.word	0x00030240

000d83cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d83cc:	b508      	push	{r3, lr}
   d83ce:	4b02      	ldr	r3, [pc, #8]	; (d83d8 <network_is_off+0xc>)
   d83d0:	681b      	ldr	r3, [r3, #0]
   d83d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d83d4:	9301      	str	r3, [sp, #4]
   d83d6:	bd08      	pop	{r3, pc}
   d83d8:	00030240 	.word	0x00030240

000d83dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d83dc:	b508      	push	{r3, lr}
   d83de:	4b02      	ldr	r3, [pc, #8]	; (d83e8 <malloc+0xc>)
   d83e0:	681b      	ldr	r3, [r3, #0]
   d83e2:	681b      	ldr	r3, [r3, #0]
   d83e4:	9301      	str	r3, [sp, #4]
   d83e6:	bd08      	pop	{r3, pc}
   d83e8:	0003021c 	.word	0x0003021c

000d83ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d83ec:	b508      	push	{r3, lr}
   d83ee:	4b02      	ldr	r3, [pc, #8]	; (d83f8 <free+0xc>)
   d83f0:	681b      	ldr	r3, [r3, #0]
   d83f2:	685b      	ldr	r3, [r3, #4]
   d83f4:	9301      	str	r3, [sp, #4]
   d83f6:	bd08      	pop	{r3, pc}
   d83f8:	0003021c 	.word	0x0003021c

000d83fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d83fc:	b508      	push	{r3, lr}
   d83fe:	4b02      	ldr	r3, [pc, #8]	; (d8408 <realloc+0xc>)
   d8400:	681b      	ldr	r3, [r3, #0]
   d8402:	689b      	ldr	r3, [r3, #8]
   d8404:	9301      	str	r3, [sp, #4]
   d8406:	bd08      	pop	{r3, pc}
   d8408:	0003021c 	.word	0x0003021c

000d840c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d840c:	b508      	push	{r3, lr}
   d840e:	4b02      	ldr	r3, [pc, #8]	; (d8418 <siprintf+0xc>)
   d8410:	681b      	ldr	r3, [r3, #0]
   d8412:	691b      	ldr	r3, [r3, #16]
   d8414:	9301      	str	r3, [sp, #4]
   d8416:	bd08      	pop	{r3, pc}
   d8418:	0003021c 	.word	0x0003021c

000d841c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d841c:	b508      	push	{r3, lr}
   d841e:	4b02      	ldr	r3, [pc, #8]	; (d8428 <snprintf+0xc>)
   d8420:	681b      	ldr	r3, [r3, #0]
   d8422:	69db      	ldr	r3, [r3, #28]
   d8424:	9301      	str	r3, [sp, #4]
   d8426:	bd08      	pop	{r3, pc}
   d8428:	0003021c 	.word	0x0003021c

000d842c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d842c:	b508      	push	{r3, lr}
   d842e:	4b02      	ldr	r3, [pc, #8]	; (d8438 <vsnprintf+0xc>)
   d8430:	681b      	ldr	r3, [r3, #0]
   d8432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8434:	9301      	str	r3, [sp, #4]
   d8436:	bd08      	pop	{r3, pc}
   d8438:	0003021c 	.word	0x0003021c

000d843c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d843c:	b508      	push	{r3, lr}
   d843e:	4b02      	ldr	r3, [pc, #8]	; (d8448 <abort+0xc>)
   d8440:	681b      	ldr	r3, [r3, #0]
   d8442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8444:	9301      	str	r3, [sp, #4]
   d8446:	bd08      	pop	{r3, pc}
   d8448:	0003021c 	.word	0x0003021c

000d844c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d844c:	b508      	push	{r3, lr}
   d844e:	4b02      	ldr	r3, [pc, #8]	; (d8458 <_malloc_r+0xc>)
   d8450:	681b      	ldr	r3, [r3, #0]
   d8452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8454:	9301      	str	r3, [sp, #4]
   d8456:	bd08      	pop	{r3, pc}
   d8458:	0003021c 	.word	0x0003021c

000d845c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d845c:	b508      	push	{r3, lr}
   d845e:	4b02      	ldr	r3, [pc, #8]	; (d8468 <newlib_impure_ptr_callback+0xc>)
   d8460:	681b      	ldr	r3, [r3, #0]
   d8462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8464:	9301      	str	r3, [sp, #4]
   d8466:	bd08      	pop	{r3, pc}
   d8468:	0003021c 	.word	0x0003021c

000d846c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d846c:	b508      	push	{r3, lr}
   d846e:	4b02      	ldr	r3, [pc, #8]	; (d8478 <strftime+0xc>)
   d8470:	681b      	ldr	r3, [r3, #0]
   d8472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8474:	9301      	str	r3, [sp, #4]
   d8476:	bd08      	pop	{r3, pc}
   d8478:	0003021c 	.word	0x0003021c

000d847c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d847c:	b508      	push	{r3, lr}
   d847e:	4b02      	ldr	r3, [pc, #8]	; (d8488 <localtime_r+0xc>)
   d8480:	681b      	ldr	r3, [r3, #0]
   d8482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8484:	9301      	str	r3, [sp, #4]
   d8486:	bd08      	pop	{r3, pc}
   d8488:	0003021c 	.word	0x0003021c

000d848c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d848c:	b508      	push	{r3, lr}
   d848e:	4b02      	ldr	r3, [pc, #8]	; (d8498 <gmtime_r+0xc>)
   d8490:	681b      	ldr	r3, [r3, #0]
   d8492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8494:	9301      	str	r3, [sp, #4]
   d8496:	bd08      	pop	{r3, pc}
   d8498:	0003021c 	.word	0x0003021c

000d849c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d849c:	b508      	push	{r3, lr}
   d849e:	4b02      	ldr	r3, [pc, #8]	; (d84a8 <mktime+0xc>)
   d84a0:	681b      	ldr	r3, [r3, #0]
   d84a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d84a4:	9301      	str	r3, [sp, #4]
   d84a6:	bd08      	pop	{r3, pc}
   d84a8:	0003021c 	.word	0x0003021c

000d84ac <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d84ac:	428a      	cmp	r2, r1
{
   d84ae:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d84b0:	d007      	beq.n	d84c2 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d84b2:	9c02      	ldr	r4, [sp, #8]
   d84b4:	1a40      	subs	r0, r0, r1
   d84b6:	1ae4      	subs	r4, r4, r3
   d84b8:	4360      	muls	r0, r4
   d84ba:	1a52      	subs	r2, r2, r1
   d84bc:	fb90 f0f2 	sdiv	r0, r0, r2
   d84c0:	4418      	add	r0, r3
}
   d84c2:	bd10      	pop	{r4, pc}

000d84c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d84c4:	2100      	movs	r1, #0
   d84c6:	f7ff be4f 	b.w	d8168 <system_delay_ms>

000d84ca <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d84ca:	b510      	push	{r4, lr}
      if (_M_empty())
   d84cc:	6883      	ldr	r3, [r0, #8]
   d84ce:	4604      	mov	r4, r0
   d84d0:	b90b      	cbnz	r3, d84d6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d84d2:	f003 f8a6 	bl	db622 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d84d6:	68c3      	ldr	r3, [r0, #12]
   d84d8:	4798      	blx	r3
      if (_M_manager)
   d84da:	68a3      	ldr	r3, [r4, #8]
   d84dc:	b11b      	cbz	r3, d84e6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d84de:	2203      	movs	r2, #3
   d84e0:	4621      	mov	r1, r4
   d84e2:	4620      	mov	r0, r4
   d84e4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d84e6:	4620      	mov	r0, r4
   d84e8:	2110      	movs	r1, #16
}
   d84ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d84ee:	f003 b892 	b.w	db616 <_ZdlPvj>

000d84f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d84f2:	b510      	push	{r4, lr}
          _M_dispose();
   d84f4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d84f6:	4604      	mov	r4, r0
          _M_dispose();
   d84f8:	689b      	ldr	r3, [r3, #8]
   d84fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d84fc:	68a3      	ldr	r3, [r4, #8]
   d84fe:	3b01      	subs	r3, #1
   d8500:	60a3      	str	r3, [r4, #8]
   d8502:	b92b      	cbnz	r3, d8510 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8504:	6823      	ldr	r3, [r4, #0]
   d8506:	4620      	mov	r0, r4
   d8508:	68db      	ldr	r3, [r3, #12]
    }
   d850a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d850e:	4718      	bx	r3
    }
   d8510:	bd10      	pop	{r4, pc}

000d8512 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8512:	b510      	push	{r4, lr}
   d8514:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8516:	6800      	ldr	r0, [r0, #0]
   d8518:	b108      	cbz	r0, d851e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d851a:	f7ff fbfb 	bl	d7d14 <os_mutex_recursive_destroy>
    }
   d851e:	4620      	mov	r0, r4
   d8520:	bd10      	pop	{r4, pc}

000d8522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d8522:	680b      	ldr	r3, [r1, #0]
   d8524:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d8526:	b113      	cbz	r3, d852e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8528:	685a      	ldr	r2, [r3, #4]
   d852a:	3201      	adds	r2, #1
   d852c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d852e:	4770      	bx	lr

000d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d8530:	b510      	push	{r4, lr}
   d8532:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d8534:	6800      	ldr	r0, [r0, #0]
   d8536:	b128      	cbz	r0, d8544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d8538:	6843      	ldr	r3, [r0, #4]
   d853a:	3b01      	subs	r3, #1
   d853c:	6043      	str	r3, [r0, #4]
   d853e:	b90b      	cbnz	r3, d8544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d8540:	f7ff ffd7 	bl	d84f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d8544:	4620      	mov	r0, r4
   d8546:	bd10      	pop	{r4, pc}

000d8548 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8548:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d854a:	4c06      	ldr	r4, [pc, #24]	; (d8564 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d854c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d854e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d8550:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d8552:	f7ff fbd7 	bl	d7d04 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d8556:	4620      	mov	r0, r4
   d8558:	4a03      	ldr	r2, [pc, #12]	; (d8568 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d855a:	4904      	ldr	r1, [pc, #16]	; (d856c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d855c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d8560:	f003 b854 	b.w	db60c <__aeabi_atexit>
   d8564:	2003e508 	.word	0x2003e508
   d8568:	2003e320 	.word	0x2003e320
   d856c:	000d8513 	.word	0x000d8513

000d8570 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8570:	2200      	movs	r2, #0
   d8572:	6840      	ldr	r0, [r0, #4]
   d8574:	4611      	mov	r1, r2
   d8576:	f7ff bee9 	b.w	d834c <network_ready>

000d857a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d857a:	2200      	movs	r2, #0
   d857c:	6840      	ldr	r0, [r0, #4]
   d857e:	4611      	mov	r1, r2
   d8580:	f7ff bf04 	b.w	d838c <network_listening>

000d8584 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8584:	2200      	movs	r2, #0
   d8586:	6840      	ldr	r0, [r0, #4]
   d8588:	4611      	mov	r1, r2
   d858a:	f7ff bf0f 	b.w	d83ac <network_get_listen_timeout>

000d858e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d858e:	6840      	ldr	r0, [r0, #4]
   d8590:	2200      	movs	r2, #0
   d8592:	f7ff bf03 	b.w	d839c <network_set_listen_timeout>

000d8596 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8596:	6840      	ldr	r0, [r0, #4]
   d8598:	2200      	movs	r2, #0
   d859a:	f081 0101 	eor.w	r1, r1, #1
   d859e:	f7ff beed 	b.w	d837c <network_listen>

000d85a2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d85a2:	2300      	movs	r3, #0
   d85a4:	6840      	ldr	r0, [r0, #4]
   d85a6:	461a      	mov	r2, r3
   d85a8:	4619      	mov	r1, r3
   d85aa:	f7ff bed7 	b.w	d835c <network_on>

000d85ae <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d85ae:	2200      	movs	r2, #0
   d85b0:	6840      	ldr	r0, [r0, #4]
   d85b2:	4611      	mov	r1, r2
   d85b4:	f7ff beba 	b.w	d832c <network_connecting>

000d85b8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d85b8:	6840      	ldr	r0, [r0, #4]
   d85ba:	2200      	movs	r2, #0
   d85bc:	2102      	movs	r1, #2
   d85be:	f7ff bebd 	b.w	d833c <network_disconnect>

000d85c2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d85c2:	2300      	movs	r3, #0
   d85c4:	6840      	ldr	r0, [r0, #4]
   d85c6:	461a      	mov	r2, r3
   d85c8:	f7ff bea8 	b.w	d831c <network_connect>

000d85cc <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d85cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d85ce:	4b1b      	ldr	r3, [pc, #108]	; (d863c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d85d0:	6003      	str	r3, [r0, #0]
   d85d2:	2500      	movs	r5, #0
   d85d4:	460f      	mov	r7, r1
   d85d6:	3328      	adds	r3, #40	; 0x28
   d85d8:	2618      	movs	r6, #24
   d85da:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d85de:	b089      	sub	sp, #36	; 0x24
   d85e0:	6043      	str	r3, [r0, #4]
   d85e2:	4632      	mov	r2, r6
   d85e4:	4629      	mov	r1, r5
   d85e6:	4604      	mov	r4, r0
   d85e8:	3010      	adds	r0, #16
   d85ea:	f003 fd29 	bl	dc040 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d85ee:	6878      	ldr	r0, [r7, #4]
   d85f0:	462a      	mov	r2, r5
   d85f2:	4629      	mov	r1, r5
   d85f4:	f7ff feaa 	bl	d834c <network_ready>
   d85f8:	b918      	cbnz	r0, d8602 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d85fa:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d85fc:	4620      	mov	r0, r4
   d85fe:	b009      	add	sp, #36	; 0x24
   d8600:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d8602:	4629      	mov	r1, r5
   d8604:	4632      	mov	r2, r6
   d8606:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d8608:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d860c:	f003 fd18 	bl	dc040 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8610:	a902      	add	r1, sp, #8
   d8612:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d8614:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8618:	f7ff fb1c 	bl	d7c54 <cellular_signal>
   d861c:	b110      	cbz	r0, d8624 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d861e:	2301      	movs	r3, #1
   d8620:	60a3      	str	r3, [r4, #8]
            return sig;
   d8622:	e7eb      	b.n	d85fc <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8624:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d8626:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d8628:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d862a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d862c:	b90b      	cbnz	r3, d8632 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d862e:	2302      	movs	r3, #2
   d8630:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d8632:	a902      	add	r1, sp, #8
   d8634:	4620      	mov	r0, r4
   d8636:	f000 f8ae 	bl	d8796 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d863a:	e7df      	b.n	d85fc <_ZN5spark13CellularClass4RSSIEv+0x30>
   d863c:	000dccf8 	.word	0x000dccf8

000d8640 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8640:	4b08      	ldr	r3, [pc, #32]	; (d8664 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8642:	b510      	push	{r4, lr}
   d8644:	2428      	movs	r4, #40	; 0x28
   d8646:	4622      	mov	r2, r4
   d8648:	4618      	mov	r0, r3
   d864a:	2100      	movs	r1, #0
   d864c:	f003 fcf8 	bl	dc040 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8650:	4b05      	ldr	r3, [pc, #20]	; (d8668 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d8652:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8658:	6042      	str	r2, [r0, #4]
   d865a:	2204      	movs	r2, #4
   d865c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d865e:	4a03      	ldr	r2, [pc, #12]	; (d866c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8660:	601a      	str	r2, [r3, #0]
   d8662:	bd10      	pop	{r4, pc}
   d8664:	2003e514 	.word	0x2003e514
   d8668:	2003e50c 	.word	0x2003e50c
   d866c:	000dccbc 	.word	0x000dccbc

000d8670 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8670:	4770      	bx	lr

000d8672 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8672:	7d00      	ldrb	r0, [r0, #20]
   d8674:	4770      	bx	lr

000d8676 <_ZN14CellularSignalD0Ev>:
   d8676:	b510      	push	{r4, lr}
   d8678:	2128      	movs	r1, #40	; 0x28
   d867a:	4604      	mov	r4, r0
   d867c:	f002 ffcb 	bl	db616 <_ZdlPvj>
   d8680:	4620      	mov	r0, r4
   d8682:	bd10      	pop	{r4, pc}

000d8684 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8684:	7d03      	ldrb	r3, [r0, #20]
   d8686:	b17b      	cbz	r3, d86a8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d8688:	69c3      	ldr	r3, [r0, #28]
   d868a:	2b00      	cmp	r3, #0
   d868c:	db0c      	blt.n	d86a8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d868e:	ee07 3a90 	vmov	s15, r3
   d8692:	ed9f 7a07 	vldr	s14, [pc, #28]	; d86b0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d8696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d869a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d869e:	eddf 7a05 	vldr	s15, [pc, #20]	; d86b4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d86a2:	ee20 0a27 	vmul.f32	s0, s0, s15
   d86a6:	4770      	bx	lr
    }

    return -1.0f;
   d86a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d86ac:	4770      	bx	lr
   d86ae:	bf00      	nop
   d86b0:	477fff00 	.word	0x477fff00
   d86b4:	42c80000 	.word	0x42c80000

000d86b8 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d86b8:	7d03      	ldrb	r3, [r0, #20]
   d86ba:	b163      	cbz	r3, d86d6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d86bc:	6983      	ldr	r3, [r0, #24]
   d86be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d86c2:	d008      	beq.n	d86d6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d86c4:	ee07 3a90 	vmov	s15, r3
   d86c8:	ed9f 7a04 	vldr	s14, [pc, #16]	; d86dc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d86cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d86d0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d86d4:	4770      	bx	lr
    }

    return 0.0f;
   d86d6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d86e0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d86da:	4770      	bx	lr
   d86dc:	42c80000 	.word	0x42c80000
   d86e0:	00000000 	.word	0x00000000

000d86e4 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d86e4:	7d03      	ldrb	r3, [r0, #20]
   d86e6:	b17b      	cbz	r3, d8708 <_ZNK14CellularSignal10getQualityEv+0x24>
   d86e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d86ea:	2b00      	cmp	r3, #0
   d86ec:	db0c      	blt.n	d8708 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d86ee:	ee07 3a90 	vmov	s15, r3
   d86f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8710 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d86f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d86fa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d86fe:	eddf 7a05 	vldr	s15, [pc, #20]	; d8714 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8702:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8706:	4770      	bx	lr
    }

    return -1.0f;
   d8708:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d870c:	4770      	bx	lr
   d870e:	bf00      	nop
   d8710:	477fff00 	.word	0x477fff00
   d8714:	42c80000 	.word	0x42c80000

000d8718 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8718:	7d03      	ldrb	r3, [r0, #20]
   d871a:	b163      	cbz	r3, d8736 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d871c:	6a03      	ldr	r3, [r0, #32]
   d871e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8722:	d008      	beq.n	d8736 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8724:	ee07 3a90 	vmov	s15, r3
   d8728:	ed9f 7a04 	vldr	s14, [pc, #16]	; d873c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d872c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8730:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8734:	4770      	bx	lr
    }

    return 0.0f;
   d8736:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8740 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d873a:	4770      	bx	lr
   d873c:	42c80000 	.word	0x42c80000
   d8740:	00000000 	.word	0x00000000

000d8744 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d8744:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d8746:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8748:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d874a:	da0a      	bge.n	d8762 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d874c:	212d      	movs	r1, #45	; 0x2d
   d874e:	f002 f822 	bl	da796 <_ZN5Print5printEc>
            val = -n;
   d8752:	4261      	negs	r1, r4
            t = print('-');
   d8754:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8756:	220a      	movs	r2, #10
   d8758:	4630      	mov	r0, r6
   d875a:	f002 f82b 	bl	da7b4 <_ZN5Print11printNumberEmh>
    }
}
   d875e:	4428      	add	r0, r5
   d8760:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d8762:	4621      	mov	r1, r4
        size_t t = 0;
   d8764:	2500      	movs	r5, #0
   d8766:	e7f6      	b.n	d8756 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8768 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d8768:	b570      	push	{r4, r5, r6, lr}
   d876a:	460c      	mov	r4, r1
   d876c:	4605      	mov	r5, r0
   d876e:	6881      	ldr	r1, [r0, #8]
   d8770:	4620      	mov	r0, r4
   d8772:	f7ff ffe7 	bl	d8744 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d8776:	212c      	movs	r1, #44	; 0x2c
   d8778:	4606      	mov	r6, r0
   d877a:	4620      	mov	r0, r4
   d877c:	f002 f80b 	bl	da796 <_ZN5Print5printEc>
   d8780:	68e9      	ldr	r1, [r5, #12]
   d8782:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d8784:	4620      	mov	r0, r4
   d8786:	f7ff ffdd 	bl	d8744 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d878a:	4430      	add	r0, r6
   d878c:	bd70      	pop	{r4, r5, r6, pc}

000d878e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d878e:	f1a0 0004 	sub.w	r0, r0, #4
   d8792:	f7ff bfe9 	b.w	d8768 <_ZNK14CellularSignal7printToER5Print>

000d8796 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d8796:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d8798:	460d      	mov	r5, r1
   d879a:	f100 0410 	add.w	r4, r0, #16
   d879e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d87a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d87a2:	e895 0003 	ldmia.w	r5, {r0, r1}
   d87a6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d87aa:	2001      	movs	r0, #1
   d87ac:	bd30      	pop	{r4, r5, pc}

000d87ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d87ae:	4770      	bx	lr

000d87b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d87b0:	2000      	movs	r0, #0
   d87b2:	4770      	bx	lr

000d87b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d87b4:	b510      	push	{r4, lr}
   d87b6:	2110      	movs	r1, #16
   d87b8:	4604      	mov	r4, r0
   d87ba:	f002 ff2c 	bl	db616 <_ZdlPvj>
   d87be:	4620      	mov	r0, r4
   d87c0:	bd10      	pop	{r4, pc}

000d87c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d87c2:	b508      	push	{r3, lr}
      { delete this; }
   d87c4:	f7ff fff6 	bl	d87b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d87c8:	bd08      	pop	{r3, pc}

000d87ca <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d87ca:	b530      	push	{r4, r5, lr}
        type_(type) {
   d87cc:	2200      	movs	r2, #0
   d87ce:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d87d2:	6002      	str	r2, [r0, #0]
   d87d4:	8084      	strh	r4, [r0, #4]
   d87d6:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d87d8:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d87da:	680c      	ldr	r4, [r1, #0]
   d87dc:	8085      	strh	r5, [r0, #4]
   d87de:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d87e0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d87e2:	bd30      	pop	{r4, r5, pc}

000d87e4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d87e4:	b510      	push	{r4, lr}
   d87e6:	4604      	mov	r4, r0
    free((void*)msg_);
   d87e8:	6800      	ldr	r0, [r0, #0]
   d87ea:	f7ff fdff 	bl	d83ec <free>
}
   d87ee:	4620      	mov	r0, r4
   d87f0:	bd10      	pop	{r4, pc}

000d87f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d87f2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d87f4:	68c4      	ldr	r4, [r0, #12]
   d87f6:	b1f4      	cbz	r4, d8836 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d87f8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d87fa:	2b02      	cmp	r3, #2
   d87fc:	d103      	bne.n	d8806 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d87fe:	f104 000c 	add.w	r0, r4, #12
   d8802:	f7ff ffef 	bl	d87e4 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8806:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8808:	b135      	cbz	r5, d8818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d880a:	4628      	mov	r0, r5
   d880c:	f7fb fdd0 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
   d8810:	2110      	movs	r1, #16
   d8812:	4628      	mov	r0, r5
   d8814:	f002 feff 	bl	db616 <_ZdlPvj>
   d8818:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d881a:	b135      	cbz	r5, d882a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d881c:	4628      	mov	r0, r5
   d881e:	f7fb fdc7 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
   d8822:	2110      	movs	r1, #16
   d8824:	4628      	mov	r0, r5
   d8826:	f002 fef6 	bl	db616 <_ZdlPvj>
   d882a:	4620      	mov	r0, r4
   d882c:	2114      	movs	r1, #20
   d882e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8832:	f002 bef0 	b.w	db616 <_ZdlPvj>
   d8836:	bd38      	pop	{r3, r4, r5, pc}

000d8838 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8838:	b510      	push	{r4, lr}
   d883a:	b088      	sub	sp, #32
   d883c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d883e:	4668      	mov	r0, sp
   d8840:	f002 f871 	bl	da926 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8844:	4669      	mov	r1, sp
   d8846:	a804      	add	r0, sp, #16
   d8848:	f002 f8b8 	bl	da9bc <_ZN6StringC1ERKS_>
   d884c:	a804      	add	r0, sp, #16
   d884e:	47a0      	blx	r4
   d8850:	4604      	mov	r4, r0
   d8852:	a804      	add	r0, sp, #16
   d8854:	f002 f81c 	bl	da890 <_ZN6StringD1Ev>
    String p(param);
   d8858:	4668      	mov	r0, sp
   d885a:	f002 f819 	bl	da890 <_ZN6StringD1Ev>
}
   d885e:	4620      	mov	r0, r4
   d8860:	b008      	add	sp, #32
   d8862:	bd10      	pop	{r4, pc}

000d8864 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8866:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8868:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d886c:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d886e:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8870:	461a      	mov	r2, r3
   d8872:	4669      	mov	r1, sp
   d8874:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d8876:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d887a:	f8ad 4000 	strh.w	r4, [sp]
   d887e:	f7ff fce5 	bl	d824c <spark_function>
}
   d8882:	b004      	add	sp, #16
   d8884:	bd10      	pop	{r4, pc}

000d8886 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d8886:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d8888:	230c      	movs	r3, #12
   d888a:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d888e:	6803      	ldr	r3, [r0, #0]
   d8890:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d8894:	7a03      	ldrb	r3, [r0, #8]
   d8896:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d889a:	6843      	ldr	r3, [r0, #4]
   d889c:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d889e:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d88a0:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d88a2:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d88a6:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d88a8:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d88ac:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d88b0:	f7ff fd2c 	bl	d830c <spark_cloud_disconnect>
}
   d88b4:	b005      	add	sp, #20
   d88b6:	f85d fb04 	ldr.w	pc, [sp], #4

000d88ba <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d88ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d88bc:	220c      	movs	r2, #12
   d88be:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   d88c2:	6802      	ldr	r2, [r0, #0]
   d88c4:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   d88c8:	7a02      	ldrb	r2, [r0, #8]
   d88ca:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   d88ce:	6842      	ldr	r2, [r0, #4]
   d88d0:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d88d2:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   d88d4:	7a42      	ldrb	r2, [r0, #9]
   d88d6:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d88da:	4619      	mov	r1, r3
   d88dc:	aa01      	add	r2, sp, #4
   d88de:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   d88e0:	f8ad 300d 	strh.w	r3, [sp, #13]
   d88e4:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d88e8:	f7ff fd00 	bl	d82ec <spark_set_connection_property>
}
   d88ec:	b005      	add	sp, #20
   d88ee:	f85d fb04 	ldr.w	pc, [sp], #4

000d88f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d88f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d88f4:	460e      	mov	r6, r1
   d88f6:	4604      	mov	r4, r0
   d88f8:	f856 3b04 	ldr.w	r3, [r6], #4
   d88fc:	9300      	str	r3, [sp, #0]
   d88fe:	460d      	mov	r5, r1
   d8900:	a801      	add	r0, sp, #4
   d8902:	4631      	mov	r1, r6
   d8904:	f7ff fe0d 	bl	d8522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8908:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d890a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d890c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d890e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8910:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8912:	2300      	movs	r3, #0
   d8914:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8916:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8918:	f7ff fe0a 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d891c:	4630      	mov	r0, r6
   d891e:	f7ff fe07 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8922:	4628      	mov	r0, r5
   d8924:	2108      	movs	r1, #8
   d8926:	f002 fe76 	bl	db616 <_ZdlPvj>
        return p;
    }
   d892a:	4620      	mov	r0, r4
   d892c:	b002      	add	sp, #8
   d892e:	bd70      	pop	{r4, r5, r6, pc}

000d8930 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d8930:	b513      	push	{r0, r1, r4, lr}
   d8932:	460b      	mov	r3, r1
   d8934:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8936:	e9d0 0100 	ldrd	r0, r1, [r0]
   d893a:	466c      	mov	r4, sp
   d893c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8940:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8944:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8948:	e894 0003 	ldmia.w	r4, {r0, r1}
   d894c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8950:	b002      	add	sp, #8
   d8952:	bd10      	pop	{r4, pc}

000d8954 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8954:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8956:	b510      	push	{r4, lr}
      if (_M_empty())
   d8958:	b90a      	cbnz	r2, d895e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d895a:	f002 fe62 	bl	db622 <_ZSt25__throw_bad_function_callv>
    }
   d895e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8962:	68c3      	ldr	r3, [r0, #12]
   d8964:	4718      	bx	r3

000d8966 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8966:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8968:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d896a:	f100 0110 	add.w	r1, r0, #16
   d896e:	f7ff fff1 	bl	d8954 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8972:	bd08      	pop	{r3, pc}

000d8974 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8974:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8976:	b510      	push	{r4, lr}
      if (_M_empty())
   d8978:	b90a      	cbnz	r2, d897e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d897a:	f002 fe52 	bl	db622 <_ZSt25__throw_bad_function_callv>
    }
   d897e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8982:	68c3      	ldr	r3, [r0, #12]
   d8984:	4718      	bx	r3

000d8986 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8986:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8988:	6800      	ldr	r0, [r0, #0]
   d898a:	f100 0110 	add.w	r1, r0, #16
   d898e:	f7ff fff1 	bl	d8974 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8992:	bd08      	pop	{r3, pc}

000d8994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8994:	b538      	push	{r3, r4, r5, lr}
   d8996:	2300      	movs	r3, #0
   d8998:	4604      	mov	r4, r0
   d899a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d899c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d899e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d89a0:	f7fb fb79 	bl	d4096 <_Znwj>
   d89a4:	b128      	cbz	r0, d89b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d89a6:	2301      	movs	r3, #1
   d89a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d89ac:	4b02      	ldr	r3, [pc, #8]	; (d89b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d89ae:	6003      	str	r3, [r0, #0]
   d89b0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d89b2:	6020      	str	r0, [r4, #0]
	}
   d89b4:	4620      	mov	r0, r4
   d89b6:	bd38      	pop	{r3, r4, r5, pc}
   d89b8:	000dcd2c 	.word	0x000dcd2c

000d89bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d89bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d89be:	2300      	movs	r3, #0
   d89c0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d89c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d89c4:	4604      	mov	r4, r0
   d89c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d89c8:	b12b      	cbz	r3, d89d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d89ca:	2202      	movs	r2, #2
   d89cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d89ce:	68eb      	ldr	r3, [r5, #12]
   d89d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d89d2:	68ab      	ldr	r3, [r5, #8]
   d89d4:	60a3      	str	r3, [r4, #8]
    }
   d89d6:	4620      	mov	r0, r4
   d89d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d89dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d89dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d89de:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d89e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d89e2:	4668      	mov	r0, sp
   d89e4:	f7ff fef1 	bl	d87ca <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d89e8:	f04f 0302 	mov.w	r3, #2
   d89ec:	e8d4 2f4f 	ldrexb	r2, [r4]
   d89f0:	2a00      	cmp	r2, #0
   d89f2:	d103      	bne.n	d89fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d89f4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d89f8:	2900      	cmp	r1, #0
   d89fa:	d1f7      	bne.n	d89ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d89fc:	d125      	bne.n	d8a4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d89fe:	f104 050c 	add.w	r5, r4, #12
   d8a02:	4669      	mov	r1, sp
   d8a04:	4628      	mov	r0, r5
   d8a06:	f7ff fee0 	bl	d87ca <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8a0a:	f3bf 8f5b 	dmb	ish
   d8a0e:	2301      	movs	r3, #1
   d8a10:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8a12:	2000      	movs	r0, #0
   d8a14:	f104 0308 	add.w	r3, r4, #8
   d8a18:	f3bf 8f5b 	dmb	ish
   d8a1c:	e853 6f00 	ldrex	r6, [r3]
   d8a20:	e843 0200 	strex	r2, r0, [r3]
   d8a24:	2a00      	cmp	r2, #0
   d8a26:	d1f9      	bne.n	d8a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8a28:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8a2c:	b16e      	cbz	r6, d8a4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8a2e:	f7ff fbb3 	bl	d8198 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8a32:	b178      	cbz	r0, d8a54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8a34:	4629      	mov	r1, r5
   d8a36:	4630      	mov	r0, r6
   d8a38:	f7ff ff8c 	bl	d8954 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8a3c:	4630      	mov	r0, r6
   d8a3e:	f7fb fcb7 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8a42:	2110      	movs	r1, #16
   d8a44:	4630      	mov	r0, r6
   d8a46:	f002 fde6 	bl	db616 <_ZdlPvj>
        p_->setError(std::move(error));
   d8a4a:	4668      	mov	r0, sp
   d8a4c:	f7ff feca 	bl	d87e4 <_ZN8particle5ErrorD1Ev>
    }
   d8a50:	b009      	add	sp, #36	; 0x24
   d8a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8a54:	4631      	mov	r1, r6
   d8a56:	a802      	add	r0, sp, #8
   d8a58:	f7ff ffb0 	bl	d89bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8a5c:	68e0      	ldr	r0, [r4, #12]
   d8a5e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8a62:	b108      	cbz	r0, d8a68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8a64:	f003 fb42 	bl	dc0ec <strdup>
        type_(type) {
   d8a68:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8a6a:	2010      	movs	r0, #16
   d8a6c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8a70:	f7fb fb11 	bl	d4096 <_Znwj>
   d8a74:	4605      	mov	r5, r0
   d8a76:	b1e8      	cbz	r0, d8ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8a78:	2700      	movs	r7, #0
   d8a7a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8a7c:	2018      	movs	r0, #24
   d8a7e:	f7fb fb0a 	bl	d4096 <_Znwj>
   d8a82:	4604      	mov	r4, r0
   d8a84:	b188      	cbz	r0, d8aaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8a86:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8a88:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8a8a:	a802      	add	r0, sp, #8
   d8a8c:	f7ff ff50 	bl	d8930 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a90:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8a92:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a94:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a96:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8a98:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8a9a:	a906      	add	r1, sp, #24
   d8a9c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a9e:	60e3      	str	r3, [r4, #12]
   d8aa0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8aa4:	9205      	str	r2, [sp, #20]
   d8aa6:	f7ff fe90 	bl	d87ca <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8aaa:	4b08      	ldr	r3, [pc, #32]	; (d8acc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8aac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8aae:	4b08      	ldr	r3, [pc, #32]	; (d8ad0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8ab0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8ab2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8ab4:	a806      	add	r0, sp, #24
   d8ab6:	f7ff fe95 	bl	d87e4 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8aba:	a802      	add	r0, sp, #8
   d8abc:	f7fb fc78 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8ac0:	2200      	movs	r2, #0
   d8ac2:	4629      	mov	r1, r5
   d8ac4:	4803      	ldr	r0, [pc, #12]	; (d8ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8ac6:	f7ff fb6f 	bl	d81a8 <application_thread_invoke>
   d8aca:	e7b7      	b.n	d8a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8acc:	000d8967 	.word	0x000d8967
   d8ad0:	000d8bfd 	.word	0x000d8bfd
   d8ad4:	000d84cb 	.word	0x000d84cb

000d8ad8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8adc:	b08a      	sub	sp, #40	; 0x28
   d8ade:	4605      	mov	r5, r0
   d8ae0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8ae4:	460c      	mov	r4, r1
   d8ae6:	4617      	mov	r7, r2
   d8ae8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8aea:	f7ff fbc7 	bl	d827c <spark_cloud_flag_connected>
   d8aee:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8af0:	4682      	mov	sl, r0
   d8af2:	bb38      	cbnz	r0, d8b44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8af4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8af8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8afa:	a905      	add	r1, sp, #20
   d8afc:	4630      	mov	r0, r6
   d8afe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8b02:	f7ff fe62 	bl	d87ca <_ZN8particle5ErrorC1EOS0_>
   d8b06:	2014      	movs	r0, #20
   d8b08:	f7fb fac5 	bl	d4096 <_Znwj>
   d8b0c:	4604      	mov	r4, r0
   d8b0e:	b148      	cbz	r0, d8b24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8b10:	2302      	movs	r3, #2
   d8b12:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8b14:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8b16:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8b1a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8b1c:	4631      	mov	r1, r6
   d8b1e:	300c      	adds	r0, #12
   d8b20:	f7ff fe53 	bl	d87ca <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8b24:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8b26:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8b28:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8b2c:	f7ff ff32 	bl	d8994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8b30:	4630      	mov	r0, r6
   d8b32:	f7ff fe57 	bl	d87e4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8b36:	a805      	add	r0, sp, #20
   d8b38:	f7ff fe54 	bl	d87e4 <_ZN8particle5ErrorD1Ev>
}
   d8b3c:	4628      	mov	r0, r5
   d8b3e:	b00a      	add	sp, #40	; 0x28
   d8b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8b44:	230c      	movs	r3, #12
   d8b46:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8b4a:	2014      	movs	r0, #20
   d8b4c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8b50:	9307      	str	r3, [sp, #28]
   d8b52:	f7fb faa0 	bl	d4096 <_Znwj>
   d8b56:	4601      	mov	r1, r0
   d8b58:	b128      	cbz	r0, d8b66 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8b5a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8b5e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8b62:	f880 a001 	strb.w	sl, [r0, #1]
   d8b66:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8b68:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8b6a:	f7ff ff13 	bl	d8994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8b6e:	4b22      	ldr	r3, [pc, #136]	; (d8bf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8b70:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8b72:	2008      	movs	r0, #8
   d8b74:	f7fb fa8f 	bl	d4096 <_Znwj>
   d8b78:	4682      	mov	sl, r0
   d8b7a:	b128      	cbz	r0, d8b88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8b7c:	9b03      	ldr	r3, [sp, #12]
   d8b7e:	f840 3b04 	str.w	r3, [r0], #4
   d8b82:	a904      	add	r1, sp, #16
   d8b84:	f7ff fccd 	bl	d8522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8b88:	9600      	str	r6, [sp, #0]
   d8b8a:	fa5f f389 	uxtb.w	r3, r9
   d8b8e:	4642      	mov	r2, r8
   d8b90:	4639      	mov	r1, r7
   d8b92:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8b94:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8b98:	f7ff fb80 	bl	d829c <spark_send_event>
   d8b9c:	b9b8      	cbnz	r0, d8bce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8b9e:	9b03      	ldr	r3, [sp, #12]
   d8ba0:	785b      	ldrb	r3, [r3, #1]
   d8ba2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8ba6:	b993      	cbnz	r3, d8bce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8ba8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8bac:	a905      	add	r1, sp, #20
   d8bae:	a803      	add	r0, sp, #12
   d8bb0:	9205      	str	r2, [sp, #20]
   d8bb2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8bb6:	f7ff ff11 	bl	d89dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8bba:	a805      	add	r0, sp, #20
   d8bbc:	f7ff fe12 	bl	d87e4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8bc0:	a805      	add	r0, sp, #20
   d8bc2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8bc4:	f7ff fe95 	bl	d88f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8bc8:	a806      	add	r0, sp, #24
   d8bca:	f7ff fcb1 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8bce:	9b03      	ldr	r3, [sp, #12]
   d8bd0:	9305      	str	r3, [sp, #20]
   d8bd2:	a904      	add	r1, sp, #16
   d8bd4:	a806      	add	r0, sp, #24
   d8bd6:	f7ff fca4 	bl	d8522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8bda:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8bdc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8bde:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8be0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8be2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8be4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8be6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8be8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8bea:	f7ff fca1 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8bee:	a804      	add	r0, sp, #16
   d8bf0:	f7ff fc9e 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8bf4:	e7a2      	b.n	d8b3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8bf6:	bf00      	nop
   d8bf8:	000d8cc1 	.word	0x000d8cc1

000d8bfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8bfc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8c00:	4605      	mov	r5, r0
	  switch (__op)
   d8c02:	d007      	beq.n	d8c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8c04:	2a03      	cmp	r2, #3
   d8c06:	d018      	beq.n	d8c3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8c08:	2a01      	cmp	r2, #1
   d8c0a:	d101      	bne.n	d8c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8c0c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8c0e:	6003      	str	r3, [r0, #0]
	}
   d8c10:	2000      	movs	r0, #0
   d8c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c14:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8c16:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c18:	f7fb fa3d 	bl	d4096 <_Znwj>
   d8c1c:	4604      	mov	r4, r0
   d8c1e:	b150      	cbz	r0, d8c36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8c20:	4631      	mov	r1, r6
   d8c22:	f7ff fecb 	bl	d89bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8c26:	6930      	ldr	r0, [r6, #16]
   d8c28:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8c2c:	b108      	cbz	r0, d8c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8c2e:	f003 fa5d 	bl	dc0ec <strdup>
        type_(type) {
   d8c32:	6120      	str	r0, [r4, #16]
   d8c34:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8c36:	602c      	str	r4, [r5, #0]
	}
   d8c38:	e7ea      	b.n	d8c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8c3a:	6804      	ldr	r4, [r0, #0]
   d8c3c:	2c00      	cmp	r4, #0
   d8c3e:	d0e7      	beq.n	d8c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8c40:	f104 0010 	add.w	r0, r4, #16
   d8c44:	f7ff fdce 	bl	d87e4 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8c48:	4620      	mov	r0, r4
   d8c4a:	f7fb fbb1 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8c4e:	2118      	movs	r1, #24
   d8c50:	4620      	mov	r0, r4
   d8c52:	f002 fce0 	bl	db616 <_ZdlPvj>
   d8c56:	e7db      	b.n	d8c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8c58 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8c58:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8c5a:	2300      	movs	r3, #0
   d8c5c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8c5e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8c60:	4604      	mov	r4, r0
   d8c62:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8c64:	b12b      	cbz	r3, d8c72 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8c66:	2202      	movs	r2, #2
   d8c68:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8c6a:	68eb      	ldr	r3, [r5, #12]
   d8c6c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8c6e:	68ab      	ldr	r3, [r5, #8]
   d8c70:	60a3      	str	r3, [r4, #8]
    }
   d8c72:	4620      	mov	r0, r4
   d8c74:	bd38      	pop	{r3, r4, r5, pc}

000d8c76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8c76:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8c78:	b570      	push	{r4, r5, r6, lr}
   d8c7a:	4604      	mov	r4, r0
	  switch (__op)
   d8c7c:	d007      	beq.n	d8c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8c7e:	2a03      	cmp	r2, #3
   d8c80:	d012      	beq.n	d8ca8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8c82:	2a01      	cmp	r2, #1
   d8c84:	d101      	bne.n	d8c8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8c86:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8c88:	6003      	str	r3, [r0, #0]
	}
   d8c8a:	2000      	movs	r0, #0
   d8c8c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c8e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8c90:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c92:	f7fb fa00 	bl	d4096 <_Znwj>
   d8c96:	4605      	mov	r5, r0
   d8c98:	b120      	cbz	r0, d8ca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8c9a:	4631      	mov	r1, r6
   d8c9c:	f7ff ffdc 	bl	d8c58 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8ca0:	7c33      	ldrb	r3, [r6, #16]
   d8ca2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8ca4:	6025      	str	r5, [r4, #0]
	}
   d8ca6:	e7f0      	b.n	d8c8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8ca8:	6804      	ldr	r4, [r0, #0]
   d8caa:	2c00      	cmp	r4, #0
   d8cac:	d0ed      	beq.n	d8c8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8cae:	4620      	mov	r0, r4
   d8cb0:	f7fb fb7e 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8cb4:	2114      	movs	r1, #20
   d8cb6:	4620      	mov	r0, r4
   d8cb8:	f002 fcad 	bl	db616 <_ZdlPvj>
   d8cbc:	e7e5      	b.n	d8c8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8cc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8cc2:	b089      	sub	sp, #36	; 0x24
   d8cc4:	4604      	mov	r4, r0
   d8cc6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8cc8:	a801      	add	r0, sp, #4
   d8cca:	4611      	mov	r1, r2
   d8ccc:	f7ff fe11 	bl	d88f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8cd0:	b1a4      	cbz	r4, d8cfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8cd2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8cd4:	b11d      	cbz	r5, d8cde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8cd6:	4628      	mov	r0, r5
   d8cd8:	f003 fa08 	bl	dc0ec <strdup>
   d8cdc:	4605      	mov	r5, r0
   d8cde:	a801      	add	r0, sp, #4
   d8ce0:	a903      	add	r1, sp, #12
        type_(type) {
   d8ce2:	9503      	str	r5, [sp, #12]
   d8ce4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8ce8:	f7ff fe78 	bl	d89dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8cec:	a803      	add	r0, sp, #12
   d8cee:	f7ff fd79 	bl	d87e4 <_ZN8particle5ErrorD1Ev>
   d8cf2:	a802      	add	r0, sp, #8
   d8cf4:	f7ff fc1c 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8cf8:	b009      	add	sp, #36	; 0x24
   d8cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8cfc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8cfe:	2301      	movs	r3, #1
   d8d00:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8d04:	2a00      	cmp	r2, #0
   d8d06:	d103      	bne.n	d8d10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8d08:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8d0c:	2900      	cmp	r1, #0
   d8d0e:	d1f7      	bne.n	d8d00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8d10:	d1ef      	bne.n	d8cf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8d12:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8d14:	f3bf 8f5b 	dmb	ish
   d8d18:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8d1a:	1d2b      	adds	r3, r5, #4
   d8d1c:	f3bf 8f5b 	dmb	ish
   d8d20:	e853 6f00 	ldrex	r6, [r3]
   d8d24:	e843 4200 	strex	r2, r4, [r3]
   d8d28:	2a00      	cmp	r2, #0
   d8d2a:	d1f9      	bne.n	d8d20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8d2c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8d30:	2e00      	cmp	r6, #0
   d8d32:	d0de      	beq.n	d8cf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8d34:	4620      	mov	r0, r4
   d8d36:	f7ff fa2f 	bl	d8198 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8d3a:	4607      	mov	r7, r0
   d8d3c:	b160      	cbz	r0, d8d58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8d3e:	f105 010c 	add.w	r1, r5, #12
   d8d42:	4630      	mov	r0, r6
   d8d44:	f7ff fe16 	bl	d8974 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8d48:	4630      	mov	r0, r6
   d8d4a:	f7fb fb31 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8d4e:	2110      	movs	r1, #16
   d8d50:	4630      	mov	r0, r6
   d8d52:	f002 fc60 	bl	db616 <_ZdlPvj>
   d8d56:	e7cc      	b.n	d8cf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8d58:	4631      	mov	r1, r6
   d8d5a:	a803      	add	r0, sp, #12
   d8d5c:	f7ff ff7c 	bl	d8c58 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8d60:	7b2b      	ldrb	r3, [r5, #12]
   d8d62:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8d66:	2010      	movs	r0, #16
   d8d68:	f7fb f995 	bl	d4096 <_Znwj>
   d8d6c:	4605      	mov	r5, r0
   d8d6e:	b1d0      	cbz	r0, d8da6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8d70:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8d72:	2014      	movs	r0, #20
   d8d74:	f7fb f98f 	bl	d4096 <_Znwj>
   d8d78:	4604      	mov	r4, r0
   d8d7a:	b178      	cbz	r0, d8d9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8d7c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8d7e:	4601      	mov	r1, r0
   d8d80:	a803      	add	r0, sp, #12
   d8d82:	f7ff fdd5 	bl	d8930 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d86:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8d88:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d8a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d8c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8d8e:	9205      	str	r2, [sp, #20]
   d8d90:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d92:	60e3      	str	r3, [r4, #12]
   d8d94:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8d98:	9206      	str	r2, [sp, #24]
   d8d9a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8d9c:	4b06      	ldr	r3, [pc, #24]	; (d8db8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8d9e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8da0:	4b06      	ldr	r3, [pc, #24]	; (d8dbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8da2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8da4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8da6:	a803      	add	r0, sp, #12
   d8da8:	f7fb fb02 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8dac:	2200      	movs	r2, #0
   d8dae:	4629      	mov	r1, r5
   d8db0:	4803      	ldr	r0, [pc, #12]	; (d8dc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8db2:	f7ff f9f9 	bl	d81a8 <application_thread_invoke>
   d8db6:	e7c7      	b.n	d8d48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8db8:	000d8987 	.word	0x000d8987
   d8dbc:	000d8c77 	.word	0x000d8c77
   d8dc0:	000d84cb 	.word	0x000d84cb

000d8dc4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8dc4:	2200      	movs	r2, #0
   d8dc6:	6840      	ldr	r0, [r0, #4]
   d8dc8:	4611      	mov	r1, r2
   d8dca:	f7ff badf 	b.w	d838c <network_listening>

000d8dce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8dce:	2200      	movs	r2, #0
   d8dd0:	6840      	ldr	r0, [r0, #4]
   d8dd2:	4611      	mov	r1, r2
   d8dd4:	f7ff baea 	b.w	d83ac <network_get_listen_timeout>

000d8dd8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8dd8:	6840      	ldr	r0, [r0, #4]
   d8dda:	2200      	movs	r2, #0
   d8ddc:	f7ff bade 	b.w	d839c <network_set_listen_timeout>

000d8de0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8de0:	6840      	ldr	r0, [r0, #4]
   d8de2:	2200      	movs	r2, #0
   d8de4:	f081 0101 	eor.w	r1, r1, #1
   d8de8:	f7ff bac8 	b.w	d837c <network_listen>

000d8dec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8dec:	2300      	movs	r3, #0
   d8dee:	6840      	ldr	r0, [r0, #4]
   d8df0:	461a      	mov	r2, r3
   d8df2:	4619      	mov	r1, r3
   d8df4:	f7ff baba 	b.w	d836c <network_off>

000d8df8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8df8:	2300      	movs	r3, #0
   d8dfa:	6840      	ldr	r0, [r0, #4]
   d8dfc:	461a      	mov	r2, r3
   d8dfe:	4619      	mov	r1, r3
   d8e00:	f7ff baac 	b.w	d835c <network_on>

000d8e04 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8e04:	2200      	movs	r2, #0
   d8e06:	6840      	ldr	r0, [r0, #4]
   d8e08:	4611      	mov	r1, r2
   d8e0a:	f7ff ba9f 	b.w	d834c <network_ready>

000d8e0e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8e0e:	2200      	movs	r2, #0
   d8e10:	6840      	ldr	r0, [r0, #4]
   d8e12:	4611      	mov	r1, r2
   d8e14:	f7ff ba8a 	b.w	d832c <network_connecting>

000d8e18 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8e18:	6840      	ldr	r0, [r0, #4]
   d8e1a:	2200      	movs	r2, #0
   d8e1c:	2102      	movs	r1, #2
   d8e1e:	f7ff ba8d 	b.w	d833c <network_disconnect>

000d8e22 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8e22:	2300      	movs	r3, #0
   d8e24:	6840      	ldr	r0, [r0, #4]
   d8e26:	461a      	mov	r2, r3
   d8e28:	f7ff ba78 	b.w	d831c <network_connect>

000d8e2c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8e2c:	4b02      	ldr	r3, [pc, #8]	; (d8e38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8e2e:	2203      	movs	r2, #3
   d8e30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8e32:	4a02      	ldr	r2, [pc, #8]	; (d8e3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8e34:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8e36:	4770      	bx	lr
   d8e38:	2003e53c 	.word	0x2003e53c
   d8e3c:	000dcd48 	.word	0x000dcd48

000d8e40 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8e40:	6800      	ldr	r0, [r0, #0]
   d8e42:	f000 b8b7 	b.w	d8fb4 <_ZN7TwoWire4lockEv>

000d8e46 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8e46:	b510      	push	{r4, lr}
   d8e48:	4604      	mov	r4, r0
      lock_(_lock) {
   d8e4a:	6001      	str	r1, [r0, #0]
   d8e4c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d8e4e:	b10a      	cbz	r2, d8e54 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8e50:	f7ff fff6 	bl	d8e40 <_ZN9FuelGauge4lockEv>
}
   d8e54:	4620      	mov	r0, r4
   d8e56:	bd10      	pop	{r4, pc}

000d8e58 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d8e58:	b513      	push	{r0, r1, r4, lr}
   d8e5a:	4604      	mov	r4, r0
   d8e5c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d8e5e:	f002 fbad 	bl	db5bc <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d8e62:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d8e64:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d8e66:	4620      	mov	r0, r4
   d8e68:	f7ff ffed 	bl	d8e46 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d8e6c:	4620      	mov	r0, r4
   d8e6e:	b002      	add	sp, #8
   d8e70:	bd10      	pop	{r4, pc}

000d8e72 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d8e72:	6800      	ldr	r0, [r0, #0]
   d8e74:	f000 b8a7 	b.w	d8fc6 <_ZN7TwoWire6unlockEv>

000d8e78 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d8e78:	b510      	push	{r4, lr}
    if (lock_) {
   d8e7a:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d8e7c:	4604      	mov	r4, r0
    if (lock_) {
   d8e7e:	b10b      	cbz	r3, d8e84 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d8e80:	f7ff fff7 	bl	d8e72 <_ZN9FuelGauge6unlockEv>
}
   d8e84:	4620      	mov	r0, r4
   d8e86:	bd10      	pop	{r4, pc}

000d8e88 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8e88:	4770      	bx	lr

000d8e8a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8e8c:	4606      	mov	r6, r0
   d8e8e:	4615      	mov	r5, r2
   d8e90:	460c      	mov	r4, r1
   d8e92:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8e94:	42bc      	cmp	r4, r7
   d8e96:	d006      	beq.n	d8ea6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8e98:	6833      	ldr	r3, [r6, #0]
   d8e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8e9e:	689b      	ldr	r3, [r3, #8]
   d8ea0:	4630      	mov	r0, r6
   d8ea2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8ea4:	e7f6      	b.n	d8e94 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8ea6:	4628      	mov	r0, r5
   d8ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8eaa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8eaa:	7c00      	ldrb	r0, [r0, #16]
   d8eac:	2200      	movs	r2, #0
   d8eae:	f7ff b811 	b.w	d7ed4 <hal_i2c_write>

000d8eb2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8eb2:	7c00      	ldrb	r0, [r0, #16]
   d8eb4:	2100      	movs	r1, #0
   d8eb6:	f7ff b815 	b.w	d7ee4 <hal_i2c_available>

000d8eba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8eba:	7c00      	ldrb	r0, [r0, #16]
   d8ebc:	2100      	movs	r1, #0
   d8ebe:	f7ff b819 	b.w	d7ef4 <hal_i2c_read>

000d8ec2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8ec2:	7c00      	ldrb	r0, [r0, #16]
   d8ec4:	2100      	movs	r1, #0
   d8ec6:	f7ff b81d 	b.w	d7f04 <hal_i2c_peek>

000d8eca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8eca:	7c00      	ldrb	r0, [r0, #16]
   d8ecc:	2100      	movs	r1, #0
   d8ece:	f7ff b821 	b.w	d7f14 <hal_i2c_flush>

000d8ed2 <_ZN7TwoWireD0Ev>:
   d8ed2:	b510      	push	{r4, lr}
   d8ed4:	2114      	movs	r1, #20
   d8ed6:	4604      	mov	r4, r0
   d8ed8:	f002 fb9d 	bl	db616 <_ZdlPvj>
   d8edc:	4620      	mov	r0, r4
   d8ede:	bd10      	pop	{r4, pc}

000d8ee0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8ee0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8ee6:	4604      	mov	r4, r0
   d8ee8:	4608      	mov	r0, r1
   d8eea:	2100      	movs	r1, #0
   d8eec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8ef0:	4b03      	ldr	r3, [pc, #12]	; (d8f00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8ef2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8ef4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8ef6:	4611      	mov	r1, r2
   d8ef8:	f7ff f81c 	bl	d7f34 <hal_i2c_init>
}
   d8efc:	4620      	mov	r0, r4
   d8efe:	bd10      	pop	{r4, pc}
   d8f00:	000dcd84 	.word	0x000dcd84

000d8f04 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8f04:	2300      	movs	r3, #0
   d8f06:	7c00      	ldrb	r0, [r0, #16]
   d8f08:	461a      	mov	r2, r3
   d8f0a:	4619      	mov	r1, r3
   d8f0c:	f7fe bfca 	b.w	d7ea4 <hal_i2c_begin>

000d8f10 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8f10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8f12:	2200      	movs	r2, #0
   d8f14:	2314      	movs	r3, #20
   d8f16:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8f1a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8f1e:	780b      	ldrb	r3, [r1, #0]
   d8f20:	f88d 3008 	strb.w	r3, [sp, #8]
   d8f24:	684b      	ldr	r3, [r1, #4]
   d8f26:	9303      	str	r3, [sp, #12]
   d8f28:	68cb      	ldr	r3, [r1, #12]
   d8f2a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8f2c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8f2e:	7a0b      	ldrb	r3, [r1, #8]
   d8f30:	9305      	str	r3, [sp, #20]
   d8f32:	a901      	add	r1, sp, #4
   d8f34:	f7ff f816 	bl	d7f64 <hal_i2c_request_ex>
}
   d8f38:	b007      	add	sp, #28
   d8f3a:	f85d fb04 	ldr.w	pc, [sp], #4

000d8f3e <_ZN7TwoWire11requestFromEhjh>:
{
   d8f3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8f40:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8f42:	f88d 1000 	strb.w	r1, [sp]
   d8f46:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8f4a:	9103      	str	r1, [sp, #12]
   d8f4c:	bf18      	it	ne
   d8f4e:	2301      	movne	r3, #1
   d8f50:	4669      	mov	r1, sp
    size_ = size;
   d8f52:	9201      	str	r2, [sp, #4]
   d8f54:	f88d 3008 	strb.w	r3, [sp, #8]
   d8f58:	f7ff ffda 	bl	d8f10 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8f5c:	b005      	add	sp, #20
   d8f5e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8f62 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d8f62:	2301      	movs	r3, #1
   d8f64:	f7ff bfeb 	b.w	d8f3e <_ZN7TwoWire11requestFromEhjh>

000d8f68 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8f68:	7c00      	ldrb	r0, [r0, #16]
   d8f6a:	2200      	movs	r2, #0
   d8f6c:	f7fe bfa2 	b.w	d7eb4 <hal_i2c_begin_transmission>

000d8f70 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8f70:	b2c9      	uxtb	r1, r1
   d8f72:	f7ff bff9 	b.w	d8f68 <_ZN7TwoWire17beginTransmissionEh>

000d8f76 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d8f76:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8f78:	2300      	movs	r3, #0
   d8f7a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d8f7e:	684a      	ldr	r2, [r1, #4]
   d8f80:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d8f82:	2314      	movs	r3, #20
    };
   d8f84:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8f86:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d8f8a:	780b      	ldrb	r3, [r1, #0]
    };
   d8f8c:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8f8e:	7a0a      	ldrb	r2, [r1, #8]
   d8f90:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d8f92:	7c00      	ldrb	r0, [r0, #16]
    };
   d8f94:	f88d 3008 	strb.w	r3, [sp, #8]
   d8f98:	aa01      	add	r2, sp, #4
   d8f9a:	4619      	mov	r1, r3
   d8f9c:	f7fe ff8a 	bl	d7eb4 <hal_i2c_begin_transmission>
}
   d8fa0:	b007      	add	sp, #28
   d8fa2:	f85d fb04 	ldr.w	pc, [sp], #4

000d8fa6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8fa6:	7c00      	ldrb	r0, [r0, #16]
   d8fa8:	2200      	movs	r2, #0
   d8faa:	f7fe bf8b 	b.w	d7ec4 <hal_i2c_end_transmission>

000d8fae <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8fae:	2101      	movs	r1, #1
   d8fb0:	f7ff bff9 	b.w	d8fa6 <_ZN7TwoWire15endTransmissionEh>

000d8fb4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8fb4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8fb6:	2100      	movs	r1, #0
   d8fb8:	7c00      	ldrb	r0, [r0, #16]
   d8fba:	f7fe ffc3 	bl	d7f44 <hal_i2c_lock>
}
   d8fbe:	fab0 f080 	clz	r0, r0
   d8fc2:	0940      	lsrs	r0, r0, #5
   d8fc4:	bd08      	pop	{r3, pc}

000d8fc6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8fc6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8fc8:	2100      	movs	r1, #0
   d8fca:	7c00      	ldrb	r0, [r0, #16]
   d8fcc:	f7fe ffc2 	bl	d7f54 <hal_i2c_unlock>
}
   d8fd0:	fab0 f080 	clz	r0, r0
   d8fd4:	0940      	lsrs	r0, r0, #5
   d8fd6:	bd08      	pop	{r3, pc}

000d8fd8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8fd8:	4700      	bx	r0
	...

000d8fdc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8fdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8fe0:	2400      	movs	r4, #0
{
   d8fe2:	461d      	mov	r5, r3
   d8fe4:	460f      	mov	r7, r1
   d8fe6:	4690      	mov	r8, r2
   d8fe8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8fea:	f7fe ff4b 	bl	d7e84 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8fee:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8ff0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8ff4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8ff8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8ffc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d9000:	bfa2      	ittt	ge
   d9002:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9006:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d900a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d900c:	4907      	ldr	r1, [pc, #28]	; (d902c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d900e:	9400      	str	r4, [sp, #0]
   d9010:	4643      	mov	r3, r8
   d9012:	463a      	mov	r2, r7
   d9014:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9016:	bfa8      	it	ge
   d9018:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d901c:	f7fe ff2a 	bl	d7e74 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9020:	fab0 f080 	clz	r0, r0
   d9024:	0940      	lsrs	r0, r0, #5
   d9026:	b004      	add	sp, #16
   d9028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d902c:	000d8fd9 	.word	0x000d8fd9

000d9030 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d9030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9032:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d9034:	f7fe ff26 	bl	d7e84 <HAL_Interrupts_Detach>
   d9038:	4605      	mov	r5, r0
   d903a:	b970      	cbnz	r0, d905a <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   d903c:	4f08      	ldr	r7, [pc, #32]	; (d9060 <_Z15detachInterruptt+0x30>)
   d903e:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   d9042:	b146      	cbz	r6, d9056 <_Z15detachInterruptt+0x26>
   d9044:	4630      	mov	r0, r6
   d9046:	f7fb f9b3 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d904a:	2110      	movs	r1, #16
   d904c:	4630      	mov	r0, r6
   d904e:	f002 fae2 	bl	db616 <_ZdlPvj>
        handlers[pin] = nullptr;
   d9052:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   d9056:	2001      	movs	r0, #1
   d9058:	e000      	b.n	d905c <_Z15detachInterruptt+0x2c>
        return false;
   d905a:	2000      	movs	r0, #0
    }
    return true;
}
   d905c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d905e:	bf00      	nop
   d9060:	2003e544 	.word	0x2003e544

000d9064 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9064:	4770      	bx	lr

000d9066 <_ZN9IPAddressD0Ev>:
   d9066:	b510      	push	{r4, lr}
   d9068:	2118      	movs	r1, #24
   d906a:	4604      	mov	r4, r0
   d906c:	f002 fad3 	bl	db616 <_ZdlPvj>
   d9070:	4620      	mov	r0, r4
   d9072:	bd10      	pop	{r4, pc}

000d9074 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9074:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9076:	7d03      	ldrb	r3, [r0, #20]
   d9078:	2b06      	cmp	r3, #6
{
   d907a:	b08d      	sub	sp, #52	; 0x34
   d907c:	460e      	mov	r6, r1
   d907e:	f100 0704 	add.w	r7, r0, #4
   d9082:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d9086:	d012      	beq.n	d90ae <_ZNK9IPAddress7printToER5Print+0x3a>
   d9088:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d908c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9090:	220a      	movs	r2, #10
   d9092:	4630      	mov	r0, r6
   d9094:	f001 fb8e 	bl	da7b4 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9098:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d909a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d909c:	d019      	beq.n	d90d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d909e:	2c00      	cmp	r4, #0
   d90a0:	d0f4      	beq.n	d908c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d90a2:	212e      	movs	r1, #46	; 0x2e
   d90a4:	4630      	mov	r0, r6
   d90a6:	f001 fb76 	bl	da796 <_ZN5Print5printEc>
   d90aa:	4404      	add	r4, r0
   d90ac:	e7ee      	b.n	d908c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d90ae:	232f      	movs	r3, #47	; 0x2f
   d90b0:	466a      	mov	r2, sp
   d90b2:	4639      	mov	r1, r7
   d90b4:	200a      	movs	r0, #10
		buf[0] = 0;
   d90b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d90ba:	f7fe ff5b 	bl	d7f74 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d90be:	4668      	mov	r0, sp
   d90c0:	f003 f831 	bl	dc126 <strlen>
   d90c4:	6833      	ldr	r3, [r6, #0]
   d90c6:	4602      	mov	r2, r0
   d90c8:	68db      	ldr	r3, [r3, #12]
   d90ca:	4669      	mov	r1, sp
   d90cc:	4630      	mov	r0, r6
   d90ce:	4798      	blx	r3
   d90d0:	4604      	mov	r4, r0
    }
    return n;
}
   d90d2:	4620      	mov	r0, r4
   d90d4:	b00d      	add	sp, #52	; 0x34
   d90d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d90d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d90d8:	b510      	push	{r4, lr}
   d90da:	4b05      	ldr	r3, [pc, #20]	; (d90f0 <_ZN9IPAddressC1Ev+0x18>)
   d90dc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d90de:	2211      	movs	r2, #17
   d90e0:	f840 3b04 	str.w	r3, [r0], #4
   d90e4:	2100      	movs	r1, #0
   d90e6:	f002 ffab 	bl	dc040 <memset>
}
   d90ea:	4620      	mov	r0, r4
   d90ec:	bd10      	pop	{r4, pc}
   d90ee:	bf00      	nop
   d90f0:	000dcdac 	.word	0x000dcdac

000d90f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d90f4:	4603      	mov	r3, r0
   d90f6:	4a07      	ldr	r2, [pc, #28]	; (d9114 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d90f8:	b510      	push	{r4, lr}
   d90fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d90fe:	f101 0210 	add.w	r2, r1, #16
   d9102:	f851 4b04 	ldr.w	r4, [r1], #4
   d9106:	f843 4b04 	str.w	r4, [r3], #4
   d910a:	4291      	cmp	r1, r2
   d910c:	d1f9      	bne.n	d9102 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d910e:	780a      	ldrb	r2, [r1, #0]
   d9110:	701a      	strb	r2, [r3, #0]
}
   d9112:	bd10      	pop	{r4, pc}
   d9114:	000dcdac 	.word	0x000dcdac

000d9118 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9118:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d911a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d911e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9122:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9126:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d912a:	2304      	movs	r3, #4
   d912c:	6041      	str	r1, [r0, #4]
   d912e:	7503      	strb	r3, [r0, #20]
}
   d9130:	bd10      	pop	{r4, pc}

000d9132 <_ZN9IPAddressaSEPKh>:
{
   d9132:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9134:	78cb      	ldrb	r3, [r1, #3]
   d9136:	9300      	str	r3, [sp, #0]
   d9138:	788b      	ldrb	r3, [r1, #2]
   d913a:	784a      	ldrb	r2, [r1, #1]
   d913c:	7809      	ldrb	r1, [r1, #0]
   d913e:	f7ff ffeb 	bl	d9118 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9142:	b002      	add	sp, #8
   d9144:	bd10      	pop	{r4, pc}

000d9146 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d9146:	f100 0310 	add.w	r3, r0, #16
   d914a:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d914c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d9150:	2901      	cmp	r1, #1
   d9152:	4618      	mov	r0, r3
   d9154:	d108      	bne.n	d9168 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d9156:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d915a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d915e:	3a01      	subs	r2, #1
   d9160:	f103 0310 	add.w	r3, r3, #16
   d9164:	d1f2      	bne.n	d914c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d9166:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d9168:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d916a:	bf04      	itt	eq
   d916c:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d9170:	1852      	addeq	r2, r2, r1
   d9172:	e7f4      	b.n	d915e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d9174 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d9174:	b40e      	push	{r1, r2, r3}
   d9176:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9178:	b088      	sub	sp, #32
   d917a:	af00      	add	r7, sp, #0
   d917c:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9180:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9182:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9186:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9188:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d918a:	462b      	mov	r3, r5
   d918c:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d918e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9190:	f7ff f94c 	bl	d842c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9194:	280f      	cmp	r0, #15
   d9196:	687a      	ldr	r2, [r7, #4]
   d9198:	d91a      	bls.n	d91d0 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d919a:	f100 0308 	add.w	r3, r0, #8
   d919e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d91a2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d91a4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d91a8:	1c41      	adds	r1, r0, #1
   d91aa:	462b      	mov	r3, r5
   d91ac:	4668      	mov	r0, sp
        va_start(args, fmt);
   d91ae:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d91b0:	f7ff f93c 	bl	d842c <vsnprintf>
        if (n > 0) {
   d91b4:	1e02      	subs	r2, r0, #0
   d91b6:	dd04      	ble.n	d91c2 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d91b8:	6823      	ldr	r3, [r4, #0]
   d91ba:	4669      	mov	r1, sp
   d91bc:	689b      	ldr	r3, [r3, #8]
   d91be:	4620      	mov	r0, r4
   d91c0:	4798      	blx	r3
   d91c2:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d91c4:	3720      	adds	r7, #32
   d91c6:	46bd      	mov	sp, r7
   d91c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d91cc:	b003      	add	sp, #12
   d91ce:	4770      	bx	lr
    } else if (n > 0) {
   d91d0:	2800      	cmp	r0, #0
   d91d2:	d0f7      	beq.n	d91c4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d91d4:	6823      	ldr	r3, [r4, #0]
   d91d6:	4602      	mov	r2, r0
   d91d8:	689b      	ldr	r3, [r3, #8]
   d91da:	f107 0110 	add.w	r1, r7, #16
   d91de:	4620      	mov	r0, r4
   d91e0:	4798      	blx	r3
}
   d91e2:	e7ef      	b.n	d91c4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d91e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d91e4:	b510      	push	{r4, lr}
          _M_dispose();
   d91e6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d91e8:	4604      	mov	r4, r0
          _M_dispose();
   d91ea:	689b      	ldr	r3, [r3, #8]
   d91ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d91ee:	68a3      	ldr	r3, [r4, #8]
   d91f0:	3b01      	subs	r3, #1
   d91f2:	60a3      	str	r3, [r4, #8]
   d91f4:	b92b      	cbnz	r3, d9202 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d91f6:	6823      	ldr	r3, [r4, #0]
   d91f8:	4620      	mov	r0, r4
   d91fa:	68db      	ldr	r3, [r3, #12]
    }
   d91fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d9200:	4718      	bx	r3
    }
   d9202:	bd10      	pop	{r4, pc}

000d9204 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9204:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d9206:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d9208:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d920c:	689b      	ldr	r3, [r3, #8]
   d920e:	2201      	movs	r2, #1
   d9210:	f10d 0107 	add.w	r1, sp, #7
   d9214:	4798      	blx	r3
}
   d9216:	b003      	add	sp, #12
   d9218:	f85d fb04 	ldr.w	pc, [sp], #4

000d921c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d921c:	b538      	push	{r3, r4, r5, lr}
   d921e:	680b      	ldr	r3, [r1, #0]
   d9220:	6003      	str	r3, [r0, #0]
   d9222:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d9224:	6843      	ldr	r3, [r0, #4]
   d9226:	429d      	cmp	r5, r3
    class __shared_ptr
   d9228:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d922a:	d00c      	beq.n	d9246 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d922c:	b115      	cbz	r5, d9234 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d922e:	686b      	ldr	r3, [r5, #4]
   d9230:	3301      	adds	r3, #1
   d9232:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d9234:	6860      	ldr	r0, [r4, #4]
   d9236:	b128      	cbz	r0, d9244 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d9238:	6843      	ldr	r3, [r0, #4]
   d923a:	3b01      	subs	r3, #1
   d923c:	6043      	str	r3, [r0, #4]
   d923e:	b90b      	cbnz	r3, d9244 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d9240:	f7ff ffd0 	bl	d91e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d9244:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d9246:	4620      	mov	r0, r4
   d9248:	bd38      	pop	{r3, r4, r5, pc}

000d924a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d924a:	460b      	mov	r3, r1
   d924c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d924e:	2200      	movs	r2, #0
   d9250:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d9252:	e9c0 2200 	strd	r2, r2, [r0]
   d9256:	4604      	mov	r4, r0
        t_ = t;
   d9258:	6083      	str	r3, [r0, #8]
    if (t) {
   d925a:	b90b      	cbnz	r3, d9260 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d925c:	4620      	mov	r0, r4
   d925e:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d9260:	f7ff ffdc 	bl	d921c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d9264:	e7fa      	b.n	d925c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d9266 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d9266:	6883      	ldr	r3, [r0, #8]
   d9268:	b1eb      	cbz	r3, d92a6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d926a:	781a      	ldrb	r2, [r3, #0]
   d926c:	2a03      	cmp	r2, #3
   d926e:	d81a      	bhi.n	d92a6 <_ZNK5spark9JSONValue4typeEv+0x40>
   d9270:	e8df f002 	tbb	[pc, r2]
   d9274:	1b021704 	.word	0x1b021704
   d9278:	2005      	movs	r0, #5
   d927a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d927c:	6802      	ldr	r2, [r0, #0]
   d927e:	685b      	ldr	r3, [r3, #4]
   d9280:	6852      	ldr	r2, [r2, #4]
   d9282:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d9284:	282d      	cmp	r0, #45	; 0x2d
   d9286:	d012      	beq.n	d92ae <_ZNK5spark9JSONValue4typeEv+0x48>
   d9288:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d928c:	2b09      	cmp	r3, #9
   d928e:	d90e      	bls.n	d92ae <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d9290:	2874      	cmp	r0, #116	; 0x74
   d9292:	d00e      	beq.n	d92b2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9294:	2866      	cmp	r0, #102	; 0x66
   d9296:	d00c      	beq.n	d92b2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d9298:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d929c:	4258      	negs	r0, r3
   d929e:	4158      	adcs	r0, r3
   d92a0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d92a2:	2006      	movs	r0, #6
   d92a4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d92a6:	2000      	movs	r0, #0
   d92a8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d92aa:	2004      	movs	r0, #4
   d92ac:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d92ae:	2003      	movs	r0, #3
   d92b0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d92b2:	2002      	movs	r0, #2
}
   d92b4:	4770      	bx	lr

000d92b6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d92b6:	b510      	push	{r4, lr}
   d92b8:	4604      	mov	r4, r0
    switch (type()) {
   d92ba:	f7ff ffd4 	bl	d9266 <_ZNK5spark9JSONValue4typeEv>
   d92be:	2802      	cmp	r0, #2
   d92c0:	d00e      	beq.n	d92e0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d92c2:	1ec3      	subs	r3, r0, #3
   d92c4:	b2db      	uxtb	r3, r3
   d92c6:	2b01      	cmp	r3, #1
   d92c8:	d814      	bhi.n	d92f4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d92ca:	6822      	ldr	r2, [r4, #0]
   d92cc:	68a3      	ldr	r3, [r4, #8]
   d92ce:	6850      	ldr	r0, [r2, #4]
   d92d0:	685b      	ldr	r3, [r3, #4]
}
   d92d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d92d6:	220a      	movs	r2, #10
   d92d8:	2100      	movs	r1, #0
   d92da:	4418      	add	r0, r3
   d92dc:	f002 bfde 	b.w	dc29c <strtol>
        const char* const s = d_->json + t_->start;
   d92e0:	6822      	ldr	r2, [r4, #0]
   d92e2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d92e4:	6852      	ldr	r2, [r2, #4]
   d92e6:	685b      	ldr	r3, [r3, #4]
   d92e8:	5cd0      	ldrb	r0, [r2, r3]
   d92ea:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d92ee:	4258      	negs	r0, r3
   d92f0:	4158      	adcs	r0, r3
}
   d92f2:	bd10      	pop	{r4, pc}
    switch (type()) {
   d92f4:	2000      	movs	r0, #0
   d92f6:	e7fc      	b.n	d92f2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d92f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d92f8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d92fa:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d92fc:	e9c0 3300 	strd	r3, r3, [r0]
   d9300:	4604      	mov	r4, r0
        n_(0) {
   d9302:	480e      	ldr	r0, [pc, #56]	; (d933c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9304:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9308:	b1a9      	cbz	r1, d9336 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d930a:	780b      	ldrb	r3, [r1, #0]
   d930c:	2b03      	cmp	r3, #3
   d930e:	d006      	beq.n	d931e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d9310:	b98b      	cbnz	r3, d9336 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d9312:	6813      	ldr	r3, [r2, #0]
   d9314:	6858      	ldr	r0, [r3, #4]
   d9316:	684b      	ldr	r3, [r1, #4]
   d9318:	5cc3      	ldrb	r3, [r0, r3]
   d931a:	2b6e      	cmp	r3, #110	; 0x6e
   d931c:	d007      	beq.n	d932e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d931e:	6813      	ldr	r3, [r2, #0]
   d9320:	684d      	ldr	r5, [r1, #4]
   d9322:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9324:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d9326:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d9328:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d932a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d932c:	60e3      	str	r3, [r4, #12]
   d932e:	4611      	mov	r1, r2
   d9330:	4620      	mov	r0, r4
   d9332:	f7ff ff73 	bl	d921c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9336:	4620      	mov	r0, r4
   d9338:	bd38      	pop	{r3, r4, r5, pc}
   d933a:	bf00      	nop
   d933c:	000dce15 	.word	0x000dce15

000d9340 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9340:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9342:	2500      	movs	r5, #0
   d9344:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d9346:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d934a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d934e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d9352:	4604      	mov	r4, r0
   d9354:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d9356:	b14b      	cbz	r3, d936c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d9358:	781a      	ldrb	r2, [r3, #0]
   d935a:	2a01      	cmp	r2, #1
   d935c:	d106      	bne.n	d936c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d935e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d9362:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d9364:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d9366:	6143      	str	r3, [r0, #20]
   d9368:	f7ff ff58 	bl	d921c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d936c:	4620      	mov	r0, r4
   d936e:	bd38      	pop	{r3, r4, r5, pc}

000d9370 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d9370:	b510      	push	{r4, lr}
    if (!n_) {
   d9372:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d9374:	4604      	mov	r4, r0
    if (!n_) {
   d9376:	b163      	cbz	r3, d9392 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d9378:	6880      	ldr	r0, [r0, #8]
   d937a:	60e0      	str	r0, [r4, #12]
    --n_;
   d937c:	3b01      	subs	r3, #1
    ++t_;
   d937e:	3010      	adds	r0, #16
   d9380:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d9382:	6120      	str	r0, [r4, #16]
    --n_;
   d9384:	6163      	str	r3, [r4, #20]
    if (n_) {
   d9386:	b113      	cbz	r3, d938e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d9388:	f7ff fedd 	bl	d9146 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d938c:	60a0      	str	r0, [r4, #8]
    return true;
   d938e:	2001      	movs	r0, #1
   d9390:	e000      	b.n	d9394 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d9392:	4618      	mov	r0, r3
}
   d9394:	bd10      	pop	{r4, pc}

000d9396 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9396:	b510      	push	{r4, lr}
    write('}');
   d9398:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d939a:	4604      	mov	r4, r0
    write('}');
   d939c:	f7ff ff32 	bl	d9204 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d93a0:	2301      	movs	r3, #1
   d93a2:	7123      	strb	r3, [r4, #4]
}
   d93a4:	4620      	mov	r0, r4
   d93a6:	bd10      	pop	{r4, pc}

000d93a8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d93a8:	b508      	push	{r3, lr}
    switch (state_) {
   d93aa:	7903      	ldrb	r3, [r0, #4]
   d93ac:	2b01      	cmp	r3, #1
   d93ae:	d002      	beq.n	d93b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d93b0:	2b02      	cmp	r3, #2
   d93b2:	d004      	beq.n	d93be <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d93b4:	bd08      	pop	{r3, pc}
        write(',');
   d93b6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d93b8:	f7ff ff24 	bl	d9204 <_ZN5spark10JSONWriter5writeEc>
}
   d93bc:	e7fa      	b.n	d93b4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d93be:	213a      	movs	r1, #58	; 0x3a
   d93c0:	e7fa      	b.n	d93b8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d93c2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d93c2:	b510      	push	{r4, lr}
   d93c4:	4604      	mov	r4, r0
    writeSeparator();
   d93c6:	f7ff ffef 	bl	d93a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d93ca:	4620      	mov	r0, r4
   d93cc:	217b      	movs	r1, #123	; 0x7b
   d93ce:	f7ff ff19 	bl	d9204 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d93d2:	2300      	movs	r3, #0
   d93d4:	7123      	strb	r3, [r4, #4]
}
   d93d6:	4620      	mov	r0, r4
   d93d8:	bd10      	pop	{r4, pc}
	...

000d93dc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d93dc:	b513      	push	{r0, r1, r4, lr}
   d93de:	4604      	mov	r4, r0
   d93e0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d93e2:	f7ff ffe1 	bl	d93a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d93e6:	6823      	ldr	r3, [r4, #0]
   d93e8:	9a01      	ldr	r2, [sp, #4]
   d93ea:	68db      	ldr	r3, [r3, #12]
   d93ec:	4903      	ldr	r1, [pc, #12]	; (d93fc <_ZN5spark10JSONWriter5valueEi+0x20>)
   d93ee:	4620      	mov	r0, r4
   d93f0:	4798      	blx	r3
    state_ = NEXT;
   d93f2:	2301      	movs	r3, #1
}
   d93f4:	4620      	mov	r0, r4
    state_ = NEXT;
   d93f6:	7123      	strb	r3, [r4, #4]
}
   d93f8:	b002      	add	sp, #8
   d93fa:	bd10      	pop	{r4, pc}
   d93fc:	000dc998 	.word	0x000dc998

000d9400 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d9400:	b513      	push	{r0, r1, r4, lr}
   d9402:	4604      	mov	r4, r0
   d9404:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9406:	f7ff ffcf 	bl	d93a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d940a:	6823      	ldr	r3, [r4, #0]
   d940c:	9a01      	ldr	r2, [sp, #4]
   d940e:	68db      	ldr	r3, [r3, #12]
   d9410:	4903      	ldr	r1, [pc, #12]	; (d9420 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d9412:	4620      	mov	r0, r4
   d9414:	4798      	blx	r3
    state_ = NEXT;
   d9416:	2301      	movs	r3, #1
}
   d9418:	4620      	mov	r0, r4
    state_ = NEXT;
   d941a:	7123      	strb	r3, [r4, #4]
}
   d941c:	b002      	add	sp, #8
   d941e:	bd10      	pop	{r4, pc}
   d9420:	000dcb87 	.word	0x000dcb87

000d9424 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9428:	460d      	mov	r5, r1
   d942a:	4617      	mov	r7, r2
    write('"');
   d942c:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d942e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d94d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9432:	4604      	mov	r4, r0
    const char* const end = str + size;
   d9434:	442f      	add	r7, r5
    write('"');
   d9436:	f7ff fee5 	bl	d9204 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d943a:	4629      	mov	r1, r5
    while (s != end) {
   d943c:	42bd      	cmp	r5, r7
   d943e:	462a      	mov	r2, r5
   d9440:	d038      	beq.n	d94b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d9442:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d9446:	2e22      	cmp	r6, #34	; 0x22
   d9448:	d003      	beq.n	d9452 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d944a:	2e5c      	cmp	r6, #92	; 0x5c
   d944c:	d001      	beq.n	d9452 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d944e:	2e1f      	cmp	r6, #31
   d9450:	d8f4      	bhi.n	d943c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d9452:	6823      	ldr	r3, [r4, #0]
   d9454:	1a52      	subs	r2, r2, r1
   d9456:	689b      	ldr	r3, [r3, #8]
   d9458:	4620      	mov	r0, r4
   d945a:	4798      	blx	r3
            write('\\');
   d945c:	215c      	movs	r1, #92	; 0x5c
   d945e:	4620      	mov	r0, r4
   d9460:	f7ff fed0 	bl	d9204 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d9464:	2e0d      	cmp	r6, #13
   d9466:	d80a      	bhi.n	d947e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d9468:	2e07      	cmp	r6, #7
   d946a:	d91c      	bls.n	d94a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d946c:	f1a6 0308 	sub.w	r3, r6, #8
   d9470:	2b05      	cmp	r3, #5
   d9472:	d818      	bhi.n	d94a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9474:	e8df f003 	tbb	[pc, r3]
   d9478:	17110f0d 	.word	0x17110f0d
   d947c:	1513      	.short	0x1513
   d947e:	2e22      	cmp	r6, #34	; 0x22
   d9480:	d001      	beq.n	d9486 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d9482:	2e5c      	cmp	r6, #92	; 0x5c
   d9484:	d10f      	bne.n	d94a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d9486:	4631      	mov	r1, r6
                write('b');
   d9488:	4620      	mov	r0, r4
   d948a:	f7ff febb 	bl	d9204 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d948e:	4629      	mov	r1, r5
    while (s != end) {
   d9490:	e7d4      	b.n	d943c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d9492:	2162      	movs	r1, #98	; 0x62
   d9494:	e7f8      	b.n	d9488 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d9496:	2174      	movs	r1, #116	; 0x74
   d9498:	e7f6      	b.n	d9488 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d949a:	216e      	movs	r1, #110	; 0x6e
   d949c:	e7f4      	b.n	d9488 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d949e:	2166      	movs	r1, #102	; 0x66
   d94a0:	e7f2      	b.n	d9488 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d94a2:	2172      	movs	r1, #114	; 0x72
   d94a4:	e7f0      	b.n	d9488 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d94a6:	6823      	ldr	r3, [r4, #0]
   d94a8:	4632      	mov	r2, r6
   d94aa:	68db      	ldr	r3, [r3, #12]
   d94ac:	4641      	mov	r1, r8
   d94ae:	4620      	mov	r0, r4
   d94b0:	4798      	blx	r3
                break;
   d94b2:	e7ec      	b.n	d948e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d94b4:	428d      	cmp	r5, r1
   d94b6:	d004      	beq.n	d94c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d94b8:	6823      	ldr	r3, [r4, #0]
   d94ba:	1a6a      	subs	r2, r5, r1
   d94bc:	689b      	ldr	r3, [r3, #8]
   d94be:	4620      	mov	r0, r4
   d94c0:	4798      	blx	r3
    }
    write('"');
   d94c2:	2122      	movs	r1, #34	; 0x22
   d94c4:	4620      	mov	r0, r4
   d94c6:	f7ff fe9d 	bl	d9204 <_ZN5spark10JSONWriter5writeEc>
}
   d94ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d94ce:	bf00      	nop
   d94d0:	000dcdb8 	.word	0x000dcdb8

000d94d4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d94d4:	b513      	push	{r0, r1, r4, lr}
   d94d6:	4604      	mov	r4, r0
   d94d8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d94dc:	f7ff ff64 	bl	d93a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d94e0:	4620      	mov	r0, r4
   d94e2:	e9dd 2100 	ldrd	r2, r1, [sp]
   d94e6:	f7ff ff9d 	bl	d9424 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d94ea:	2302      	movs	r3, #2
}
   d94ec:	4620      	mov	r0, r4
    state_ = VALUE;
   d94ee:	7123      	strb	r3, [r4, #4]
}
   d94f0:	b002      	add	sp, #8
   d94f2:	bd10      	pop	{r4, pc}

000d94f4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d94f4:	b513      	push	{r0, r1, r4, lr}
   d94f6:	4604      	mov	r4, r0
   d94f8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d94fc:	f7ff ff54 	bl	d93a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d9500:	4620      	mov	r0, r4
   d9502:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9506:	f7ff ff8d 	bl	d9424 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d950a:	2301      	movs	r3, #1
}
   d950c:	4620      	mov	r0, r4
    state_ = NEXT;
   d950e:	7123      	strb	r3, [r4, #4]
}
   d9510:	b002      	add	sp, #8
   d9512:	bd10      	pop	{r4, pc}

000d9514 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d9514:	6880      	ldr	r0, [r0, #8]
   d9516:	6803      	ldr	r3, [r0, #0]
   d9518:	68db      	ldr	r3, [r3, #12]
   d951a:	4718      	bx	r3

000d951c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d951c:	4770      	bx	lr

000d951e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d951e:	4608      	mov	r0, r1
   d9520:	b111      	cbz	r1, d9528 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d9522:	680b      	ldr	r3, [r1, #0]
   d9524:	685b      	ldr	r3, [r3, #4]
   d9526:	4718      	bx	r3
}
   d9528:	4770      	bx	lr

000d952a <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d952a:	4770      	bx	lr

000d952c <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d952c:	4770      	bx	lr

000d952e <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d952e:	4770      	bx	lr

000d9530 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d9530:	b538      	push	{r3, r4, r5, lr}
   d9532:	4604      	mov	r4, r0
   d9534:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d9536:	6800      	ldr	r0, [r0, #0]
   d9538:	212e      	movs	r1, #46	; 0x2e
   d953a:	f002 fdba 	bl	dc0b2 <strchrnul>
    size = s - category;
   d953e:	6823      	ldr	r3, [r4, #0]
   d9540:	1ac3      	subs	r3, r0, r3
   d9542:	602b      	str	r3, [r5, #0]
    if (size) {
   d9544:	b123      	cbz	r3, d9550 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d9546:	7803      	ldrb	r3, [r0, #0]
   d9548:	b103      	cbz	r3, d954c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d954a:	3001      	adds	r0, #1
   d954c:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d954e:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d9550:	4618      	mov	r0, r3
   d9552:	bd38      	pop	{r3, r4, r5, pc}

000d9554 <_ZN5spark16JSONStreamWriterD0Ev>:
   d9554:	b510      	push	{r4, lr}
   d9556:	210c      	movs	r1, #12
   d9558:	4604      	mov	r4, r0
   d955a:	f002 f85c 	bl	db616 <_ZdlPvj>
   d955e:	4620      	mov	r0, r4
   d9560:	bd10      	pop	{r4, pc}

000d9562 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d9562:	b510      	push	{r4, lr}
   d9564:	2104      	movs	r1, #4
   d9566:	4604      	mov	r4, r0
   d9568:	f002 f855 	bl	db616 <_ZdlPvj>
   d956c:	4620      	mov	r0, r4
   d956e:	bd10      	pop	{r4, pc}

000d9570 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d9570:	b510      	push	{r4, lr}
   d9572:	2104      	movs	r1, #4
   d9574:	4604      	mov	r4, r0
   d9576:	f002 f84e 	bl	db616 <_ZdlPvj>
   d957a:	4620      	mov	r0, r4
   d957c:	bd10      	pop	{r4, pc}

000d957e <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d957e:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d9580:	f002 fda1 	bl	dc0c6 <strcmp>
}
   d9584:	fab0 f080 	clz	r0, r0
   d9588:	0940      	lsrs	r0, r0, #5
   d958a:	bd08      	pop	{r3, pc}

000d958c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d958c:	b510      	push	{r4, lr}
   d958e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d9590:	f001 fe56 	bl	db240 <_Z16_fetch_usbserialv>
   d9594:	4284      	cmp	r4, r0
   d9596:	d010      	beq.n	d95ba <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d9598:	f001 fdc6 	bl	db128 <_Z22__fetch_global_Serial1v>
   d959c:	4284      	cmp	r4, r0
   d959e:	d105      	bne.n	d95ac <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d95a0:	f001 fdc2 	bl	db128 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d95a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d95a8:	f001 bdbb 	b.w	db122 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d95ac:	b12c      	cbz	r4, d95ba <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d95ae:	6823      	ldr	r3, [r4, #0]
   d95b0:	4620      	mov	r0, r4
   d95b2:	685b      	ldr	r3, [r3, #4]
}
   d95b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d95b8:	4718      	bx	r3
   d95ba:	bd10      	pop	{r4, pc}

000d95bc <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d95bc:	b513      	push	{r0, r1, r4, lr}
   d95be:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d95c0:	4608      	mov	r0, r1
   d95c2:	9101      	str	r1, [sp, #4]
   d95c4:	f002 fdaf 	bl	dc126 <strlen>
   d95c8:	9901      	ldr	r1, [sp, #4]
   d95ca:	4602      	mov	r2, r0
   d95cc:	4620      	mov	r0, r4
}
   d95ce:	b002      	add	sp, #8
   d95d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d95d4:	f7ff bf8e 	b.w	d94f4 <_ZN5spark10JSONWriter5valueEPKcj>

000d95d8 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d95d8:	b513      	push	{r0, r1, r4, lr}
   d95da:	4604      	mov	r4, r0
    write(str, strlen(str));
   d95dc:	4608      	mov	r0, r1
   d95de:	9101      	str	r1, [sp, #4]
   d95e0:	f002 fda1 	bl	dc126 <strlen>
   d95e4:	6823      	ldr	r3, [r4, #0]
   d95e6:	9901      	ldr	r1, [sp, #4]
   d95e8:	68db      	ldr	r3, [r3, #12]
   d95ea:	4602      	mov	r2, r0
   d95ec:	4620      	mov	r0, r4
}
   d95ee:	b002      	add	sp, #8
   d95f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d95f4:	4718      	bx	r3

000d95f6 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d95f6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d95f8:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d95fa:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d95fe:	68db      	ldr	r3, [r3, #12]
   d9600:	2201      	movs	r2, #1
   d9602:	f10d 0107 	add.w	r1, sp, #7
   d9606:	4798      	blx	r3
}
   d9608:	b003      	add	sp, #12
   d960a:	f85d fb04 	ldr.w	pc, [sp], #4

000d960e <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d960e:	b40e      	push	{r1, r2, r3}
   d9610:	b503      	push	{r0, r1, lr}
   d9612:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d9614:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d9616:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d961a:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d961c:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d961e:	f001 f8e7 	bl	da7f0 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d9622:	b002      	add	sp, #8
   d9624:	f85d eb04 	ldr.w	lr, [sp], #4
   d9628:	b003      	add	sp, #12
   d962a:	4770      	bx	lr

000d962c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d962c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d9630:	e9d0 9500 	ldrd	r9, r5, [r0]
   d9634:	f04f 0814 	mov.w	r8, #20
   d9638:	fb08 f505 	mul.w	r5, r8, r5
   d963c:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d963e:	10ab      	asrs	r3, r5, #2
   d9640:	4d18      	ldr	r5, [pc, #96]	; (d96a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d9642:	4617      	mov	r7, r2
   d9644:	435d      	muls	r5, r3
   d9646:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d9648:	2d00      	cmp	r5, #0
   d964a:	dd23      	ble.n	d9694 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d964c:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d964e:	fb08 f006 	mul.w	r0, r8, r6
   d9652:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d9656:	463a      	mov	r2, r7
   d9658:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d965c:	5820      	ldr	r0, [r4, r0]
   d965e:	9101      	str	r1, [sp, #4]
   d9660:	455f      	cmp	r7, fp
   d9662:	bf28      	it	cs
   d9664:	465a      	movcs	r2, fp
   d9666:	f002 fd66 	bl	dc136 <strncmp>
                if (cmp == 0) {
   d966a:	9901      	ldr	r1, [sp, #4]
   d966c:	2301      	movs	r3, #1
   d966e:	b978      	cbnz	r0, d9690 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d9670:	455f      	cmp	r7, fp
   d9672:	d103      	bne.n	d967c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d9674:	9a00      	ldr	r2, [sp, #0]
   d9676:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d9678:	4635      	mov	r5, r6
   d967a:	e7e5      	b.n	d9648 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d967c:	bf8c      	ite	hi
   d967e:	2001      	movhi	r0, #1
   d9680:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d9682:	2800      	cmp	r0, #0
   d9684:	d0f8      	beq.n	d9678 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d9686:	1bae      	subs	r6, r5, r6
	      ++__first;
   d9688:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d968c:	3e01      	subs	r6, #1
   d968e:	e7f3      	b.n	d9678 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d9690:	0fc0      	lsrs	r0, r0, #31
   d9692:	e7f6      	b.n	d9682 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d9694:	eba4 0409 	sub.w	r4, r4, r9
}
   d9698:	4802      	ldr	r0, [pc, #8]	; (d96a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d969a:	10a4      	asrs	r4, r4, #2
   d969c:	4360      	muls	r0, r4
   d969e:	b003      	add	sp, #12
   d96a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d96a4:	cccccccd 	.word	0xcccccccd

000d96a8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d96a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d96aa:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d96ac:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d96ae:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d96b0:	b30b      	cbz	r3, d96f6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d96b2:	b301      	cbz	r1, d96f6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d96b4:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d96b6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d96ba:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d96bc:	a903      	add	r1, sp, #12
   d96be:	a801      	add	r0, sp, #4
   d96c0:	f7ff ff36 	bl	d9530 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d96c4:	4601      	mov	r1, r0
   d96c6:	b1b0      	cbz	r0, d96f6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d96c8:	f10d 030b 	add.w	r3, sp, #11
   d96cc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d96ce:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d96d2:	4620      	mov	r0, r4
   d96d4:	f7ff ffaa 	bl	d962c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d96d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d96dc:	b15b      	cbz	r3, d96f6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d96de:	6824      	ldr	r4, [r4, #0]
   d96e0:	2314      	movs	r3, #20
   d96e2:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d96e6:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d96ea:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d96ee:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d96f0:	bfa8      	it	ge
   d96f2:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d96f4:	e7e2      	b.n	d96bc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d96f6:	4630      	mov	r0, r6
   d96f8:	b004      	add	sp, #16
   d96fa:	bd70      	pop	{r4, r5, r6, pc}

000d96fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d96fc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d96fe:	4c0a      	ldr	r4, [pc, #40]	; (d9728 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d9700:	7823      	ldrb	r3, [r4, #0]
   d9702:	f3bf 8f5b 	dmb	ish
   d9706:	07db      	lsls	r3, r3, #31
   d9708:	d40b      	bmi.n	d9722 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d970a:	4620      	mov	r0, r4
   d970c:	f7fa fcd4 	bl	d40b8 <__cxa_guard_acquire>
   d9710:	b138      	cbz	r0, d9722 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d9712:	4620      	mov	r0, r4
   d9714:	f7fa fcd5 	bl	d40c2 <__cxa_guard_release>
   d9718:	4a04      	ldr	r2, [pc, #16]	; (d972c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d971a:	4905      	ldr	r1, [pc, #20]	; (d9730 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d971c:	4805      	ldr	r0, [pc, #20]	; (d9734 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d971e:	f001 ff75 	bl	db60c <__aeabi_atexit>
}
   d9722:	4804      	ldr	r0, [pc, #16]	; (d9734 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d9724:	bd10      	pop	{r4, pc}
   d9726:	bf00      	nop
   d9728:	2003e5d8 	.word	0x2003e5d8
   d972c:	2003e320 	.word	0x2003e320
   d9730:	000d952d 	.word	0x000d952d
   d9734:	2003e2a4 	.word	0x2003e2a4

000d9738 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d9738:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d973a:	4c0a      	ldr	r4, [pc, #40]	; (d9764 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d973c:	7823      	ldrb	r3, [r4, #0]
   d973e:	f3bf 8f5b 	dmb	ish
   d9742:	07db      	lsls	r3, r3, #31
   d9744:	d40b      	bmi.n	d975e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d9746:	4620      	mov	r0, r4
   d9748:	f7fa fcb6 	bl	d40b8 <__cxa_guard_acquire>
   d974c:	b138      	cbz	r0, d975e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d974e:	4620      	mov	r0, r4
   d9750:	f7fa fcb7 	bl	d40c2 <__cxa_guard_release>
   d9754:	4a04      	ldr	r2, [pc, #16]	; (d9768 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d9756:	4905      	ldr	r1, [pc, #20]	; (d976c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d9758:	4805      	ldr	r0, [pc, #20]	; (d9770 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d975a:	f001 ff57 	bl	db60c <__aeabi_atexit>
    return &factory;
}
   d975e:	4804      	ldr	r0, [pc, #16]	; (d9770 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d9760:	bd10      	pop	{r4, pc}
   d9762:	bf00      	nop
   d9764:	2003e5dc 	.word	0x2003e5dc
   d9768:	2003e320 	.word	0x2003e320
   d976c:	000d952b 	.word	0x000d952b
   d9770:	2003e2a8 	.word	0x2003e2a8

000d9774 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d9774:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d9776:	2500      	movs	r5, #0
   d9778:	4604      	mov	r4, r0
   d977a:	e9c0 5500 	strd	r5, r5, [r0]
   d977e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d9782:	6085      	str	r5, [r0, #8]
   d9784:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d9786:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d978a:	f7fe fabb 	bl	d7d04 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d978e:	f7ff ffb5 	bl	d96fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d9792:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9794:	f7ff ffd0 	bl	d9738 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d9798:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d979a:	6220      	str	r0, [r4, #32]
}
   d979c:	4620      	mov	r0, r4
   d979e:	bd38      	pop	{r3, r4, r5, pc}

000d97a0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d97a0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d97a2:	4c0b      	ldr	r4, [pc, #44]	; (d97d0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d97a4:	7823      	ldrb	r3, [r4, #0]
   d97a6:	f3bf 8f5b 	dmb	ish
   d97aa:	07db      	lsls	r3, r3, #31
   d97ac:	d40e      	bmi.n	d97cc <_ZN5spark10LogManager8instanceEv+0x2c>
   d97ae:	4620      	mov	r0, r4
   d97b0:	f7fa fc82 	bl	d40b8 <__cxa_guard_acquire>
   d97b4:	b150      	cbz	r0, d97cc <_ZN5spark10LogManager8instanceEv+0x2c>
   d97b6:	4807      	ldr	r0, [pc, #28]	; (d97d4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d97b8:	f7ff ffdc 	bl	d9774 <_ZN5spark10LogManagerC1Ev>
   d97bc:	4620      	mov	r0, r4
   d97be:	f7fa fc80 	bl	d40c2 <__cxa_guard_release>
   d97c2:	4a05      	ldr	r2, [pc, #20]	; (d97d8 <_ZN5spark10LogManager8instanceEv+0x38>)
   d97c4:	4905      	ldr	r1, [pc, #20]	; (d97dc <_ZN5spark10LogManager8instanceEv+0x3c>)
   d97c6:	4803      	ldr	r0, [pc, #12]	; (d97d4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d97c8:	f001 ff20 	bl	db60c <__aeabi_atexit>
    return &mgr;
}
   d97cc:	4801      	ldr	r0, [pc, #4]	; (d97d4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d97ce:	bd10      	pop	{r4, pc}
   d97d0:	2003e5d4 	.word	0x2003e5d4
   d97d4:	2003e5e4 	.word	0x2003e5e4
   d97d8:	2003e320 	.word	0x2003e320
   d97dc:	000d9c35 	.word	0x000d9c35

000d97e0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d97e0:	4a02      	ldr	r2, [pc, #8]	; (d97ec <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d97e2:	4903      	ldr	r1, [pc, #12]	; (d97f0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d97e4:	4803      	ldr	r0, [pc, #12]	; (d97f4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d97e6:	2300      	movs	r3, #0
   d97e8:	f7fe bc9c 	b.w	d8124 <log_set_callbacks>
   d97ec:	000d9b11 	.word	0x000d9b11
   d97f0:	000d9a9d 	.word	0x000d9a9d
   d97f4:	000d9a1d 	.word	0x000d9a1d

000d97f8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d97f8:	2300      	movs	r3, #0
   d97fa:	461a      	mov	r2, r3
   d97fc:	4619      	mov	r1, r3
   d97fe:	4618      	mov	r0, r3
   d9800:	f7fe bc90 	b.w	d8124 <log_set_callbacks>

000d9804 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9804:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d9806:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9808:	f851 3b04 	ldr.w	r3, [r1], #4
   d980c:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d980e:	4604      	mov	r4, r0
   d9810:	a801      	add	r0, sp, #4
   d9812:	f7fe fe86 	bl	d8522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d9816:	466a      	mov	r2, sp
   d9818:	4629      	mov	r1, r5
   d981a:	4620      	mov	r0, r4
   d981c:	f7ff fd15 	bl	d924a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9820:	a801      	add	r0, sp, #4
   d9822:	f7fe fe85 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9826:	4620      	mov	r0, r4
   d9828:	b003      	add	sp, #12
   d982a:	bd30      	pop	{r4, r5, pc}

000d982c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d982c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d982e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9830:	f851 3b04 	ldr.w	r3, [r1], #4
   d9834:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9836:	4604      	mov	r4, r0
   d9838:	a801      	add	r0, sp, #4
   d983a:	f7fe fe72 	bl	d8522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d983e:	466a      	mov	r2, sp
   d9840:	4629      	mov	r1, r5
   d9842:	4620      	mov	r0, r4
   d9844:	f7ff fd7c 	bl	d9340 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9848:	a801      	add	r0, sp, #4
   d984a:	f7fe fe71 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d984e:	4620      	mov	r0, r4
   d9850:	b003      	add	sp, #12
   d9852:	bd30      	pop	{r4, r5, pc}

000d9854 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9854:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d9856:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9858:	f851 3b04 	ldr.w	r3, [r1], #4
   d985c:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d985e:	4604      	mov	r4, r0
   d9860:	a801      	add	r0, sp, #4
   d9862:	f7fe fe5e 	bl	d8522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d9866:	466a      	mov	r2, sp
   d9868:	4629      	mov	r1, r5
   d986a:	4620      	mov	r0, r4
   d986c:	f7ff fd44 	bl	d92f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9870:	a801      	add	r0, sp, #4
   d9872:	f7fe fe5d 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9876:	4620      	mov	r0, r4
   d9878:	b003      	add	sp, #12
   d987a:	bd30      	pop	{r4, r5, pc}

000d987c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d987c:	b570      	push	{r4, r5, r6, lr}
   d987e:	b08a      	sub	sp, #40	; 0x28
   d9880:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d9882:	4601      	mov	r1, r0
   d9884:	a804      	add	r0, sp, #16
   d9886:	f7ff ffd1 	bl	d982c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d988a:	4e14      	ldr	r6, [pc, #80]	; (d98dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d988c:	a804      	add	r0, sp, #16
   d988e:	f7ff fd6f 	bl	d9370 <_ZN5spark18JSONObjectIterator4nextEv>
   d9892:	b1e8      	cbz	r0, d98d0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d9894:	a904      	add	r1, sp, #16
   d9896:	4668      	mov	r0, sp
   d9898:	f7ff ffdc 	bl	d9854 <_ZNK5spark18JSONObjectIterator4nameEv>
   d989c:	9802      	ldr	r0, [sp, #8]
   d989e:	4631      	mov	r1, r6
   d98a0:	f7ff fe6d 	bl	d957e <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d98a4:	4604      	mov	r4, r0
   d98a6:	b110      	cbz	r0, d98ae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d98a8:	1e2c      	subs	r4, r5, #0
   d98aa:	bf18      	it	ne
   d98ac:	2401      	movne	r4, #1
   d98ae:	a801      	add	r0, sp, #4
   d98b0:	f7fe fe3e 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d98b4:	2c00      	cmp	r4, #0
   d98b6:	d0e9      	beq.n	d988c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d98b8:	a904      	add	r1, sp, #16
   d98ba:	4668      	mov	r0, sp
   d98bc:	f7ff ffa2 	bl	d9804 <_ZNK5spark18JSONObjectIterator5valueEv>
   d98c0:	4668      	mov	r0, sp
   d98c2:	f7ff fcf8 	bl	d92b6 <_ZNK5spark9JSONValue5toIntEv>
   d98c6:	6028      	str	r0, [r5, #0]
   d98c8:	a801      	add	r0, sp, #4
   d98ca:	f7fe fe31 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d98ce:	e7dd      	b.n	d988c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d98d0:	a805      	add	r0, sp, #20
   d98d2:	f7fe fe2d 	bl	d8530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d98d6:	b00a      	add	sp, #40	; 0x28
   d98d8:	bd70      	pop	{r4, r5, r6, pc}
   d98da:	bf00      	nop
   d98dc:	000dcdbe 	.word	0x000dcdbe

000d98e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d98e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d98e2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d98e4:	4620      	mov	r0, r4
   d98e6:	4912      	ldr	r1, [pc, #72]	; (d9930 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d98e8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d98ea:	f002 fbec 	bl	dc0c6 <strcmp>
   d98ee:	b948      	cbnz	r0, d9904 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d98f0:	f001 fca6 	bl	db240 <_Z16_fetch_usbserialv>
   d98f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d98f8:	f001 fc92 	bl	db220 <_ZN9USBSerial5beginEl>
        return &Serial;
   d98fc:	f001 fca0 	bl	db240 <_Z16_fetch_usbserialv>
}
   d9900:	b003      	add	sp, #12
   d9902:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d9904:	490b      	ldr	r1, [pc, #44]	; (d9934 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d9906:	4620      	mov	r0, r4
   d9908:	f002 fbdd 	bl	dc0c6 <strcmp>
   d990c:	b970      	cbnz	r0, d992c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d990e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d9912:	a901      	add	r1, sp, #4
   d9914:	4628      	mov	r0, r5
        int baud = 9600;
   d9916:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d9918:	f7ff ffb0 	bl	d987c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d991c:	f001 fc04 	bl	db128 <_Z22__fetch_global_Serial1v>
   d9920:	9901      	ldr	r1, [sp, #4]
   d9922:	f001 fbfb 	bl	db11c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d9926:	f001 fbff 	bl	db128 <_Z22__fetch_global_Serial1v>
   d992a:	e7e9      	b.n	d9900 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d992c:	2000      	movs	r0, #0
   d992e:	e7e7      	b.n	d9900 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d9930:	000dcdc3 	.word	0x000dcdc3
   d9934:	000dcdca 	.word	0x000dcdca

000d9938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9938:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d993a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d993e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9940:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9942:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9946:	42ae      	cmp	r6, r5
   d9948:	d005      	beq.n	d9956 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d994a:	f105 0008 	add.w	r0, r5, #8
   d994e:	f7ff fff3 	bl	d9938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9952:	3514      	adds	r5, #20
   d9954:	e7f7      	b.n	d9946 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d9956:	6820      	ldr	r0, [r4, #0]
   d9958:	f7fe fd48 	bl	d83ec <free>
}
   d995c:	4620      	mov	r0, r4
   d995e:	bd70      	pop	{r4, r5, r6, pc}

000d9960 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9960:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9962:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9966:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9968:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d996c:	42ae      	cmp	r6, r5
   d996e:	d004      	beq.n	d997a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d9970:	4628      	mov	r0, r5
   d9972:	f000 ff8d 	bl	da890 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d9976:	3510      	adds	r5, #16
   d9978:	e7f8      	b.n	d996c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d997a:	6820      	ldr	r0, [r4, #0]
   d997c:	f7fe fd36 	bl	d83ec <free>
}
   d9980:	4620      	mov	r0, r4
   d9982:	bd70      	pop	{r4, r5, r6, pc}

000d9984 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d9984:	b510      	push	{r4, lr}
   d9986:	4604      	mov	r4, r0
   d9988:	300c      	adds	r0, #12
   d998a:	f7ff ffd5 	bl	d9938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d998e:	4620      	mov	r0, r4
   d9990:	f7ff ffe6 	bl	d9960 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9994:	4620      	mov	r0, r4
   d9996:	bd10      	pop	{r4, pc}

000d9998 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d9998:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d999a:	4b04      	ldr	r3, [pc, #16]	; (d99ac <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d999c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d999e:	f840 3b04 	str.w	r3, [r0], #4
   d99a2:	f7ff ffef 	bl	d9984 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d99a6:	4620      	mov	r0, r4
   d99a8:	bd10      	pop	{r4, pc}
   d99aa:	bf00      	nop
   d99ac:	000dc844 	.word	0x000dc844

000d99b0 <_ZN5spark16StreamLogHandlerD0Ev>:
   d99b0:	b510      	push	{r4, lr}
   d99b2:	4604      	mov	r4, r0
   d99b4:	f7ff fff0 	bl	d9998 <_ZN5spark16StreamLogHandlerD1Ev>
   d99b8:	4620      	mov	r0, r4
   d99ba:	2124      	movs	r1, #36	; 0x24
   d99bc:	f001 fe2b 	bl	db616 <_ZdlPvj>
   d99c0:	4620      	mov	r0, r4
   d99c2:	bd10      	pop	{r4, pc}

000d99c4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d99c4:	b510      	push	{r4, lr}
   d99c6:	4b03      	ldr	r3, [pc, #12]	; (d99d4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d99c8:	6003      	str	r3, [r0, #0]
   d99ca:	4604      	mov	r4, r0
   d99cc:	f7ff ffe4 	bl	d9998 <_ZN5spark16StreamLogHandlerD1Ev>
   d99d0:	4620      	mov	r0, r4
   d99d2:	bd10      	pop	{r4, pc}
   d99d4:	000dce64 	.word	0x000dce64

000d99d8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d99d8:	b510      	push	{r4, lr}
   d99da:	4604      	mov	r4, r0
   d99dc:	f7ff fff2 	bl	d99c4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d99e0:	4620      	mov	r0, r4
   d99e2:	2124      	movs	r1, #36	; 0x24
   d99e4:	f001 fe17 	bl	db616 <_ZdlPvj>
   d99e8:	4620      	mov	r0, r4
   d99ea:	bd10      	pop	{r4, pc}

000d99ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d99ec:	2200      	movs	r2, #0
   d99ee:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d99f2:	b510      	push	{r4, lr}
        capacity_(0) {
   d99f4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d99f6:	680c      	ldr	r4, [r1, #0]
   d99f8:	6004      	str	r4, [r0, #0]
   d99fa:	684c      	ldr	r4, [r1, #4]
   d99fc:	6044      	str	r4, [r0, #4]
   d99fe:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9a00:	600a      	str	r2, [r1, #0]
   d9a02:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9a04:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9a06:	608a      	str	r2, [r1, #8]
}
   d9a08:	bd10      	pop	{r4, pc}

000d9a0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d9a0a:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d9a0c:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d9a0e:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9a10:	6818      	ldr	r0, [r3, #0]
   d9a12:	f7fe f98f 	bl	d7d34 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d9a16:	4620      	mov	r0, r4
   d9a18:	bd10      	pop	{r4, pc}
	...

000d9a1c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9a20:	b087      	sub	sp, #28
   d9a22:	4680      	mov	r8, r0
   d9a24:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d9a26:	4b1c      	ldr	r3, [pc, #112]	; (d9a98 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d9a28:	685b      	ldr	r3, [r3, #4]
   d9a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9a2e:	4689      	mov	r9, r1
   d9a30:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9a32:	b96b      	cbnz	r3, d9a50 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d9a34:	f7ff feb4 	bl	d97a0 <_ZN5spark10LogManager8instanceEv>
   d9a38:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9a3a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d9a3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9a40:	9305      	str	r3, [sp, #20]
   d9a42:	f7fe f96f 	bl	d7d24 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d9a46:	7b23      	ldrb	r3, [r4, #12]
   d9a48:	b12b      	cbz	r3, d9a56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d9a4a:	a805      	add	r0, sp, #20
   d9a4c:	f7ff ffdd 	bl	d9a0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9a50:	b007      	add	sp, #28
   d9a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9a56:	2301      	movs	r3, #1
   d9a58:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d9a5a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d9a5e:	fa5f f989 	uxtb.w	r9, r9
   d9a62:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9a66:	45aa      	cmp	sl, r5
   d9a68:	d012      	beq.n	d9a90 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d9a6a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d9a6e:	4631      	mov	r1, r6
   d9a70:	1d38      	adds	r0, r7, #4
   d9a72:	f7ff fe19 	bl	d96a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9a76:	4581      	cmp	r9, r0
   d9a78:	d3f5      	bcc.n	d9a66 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d9a7a:	683b      	ldr	r3, [r7, #0]
   d9a7c:	9a03      	ldr	r2, [sp, #12]
   d9a7e:	9200      	str	r2, [sp, #0]
   d9a80:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d9a84:	464a      	mov	r2, r9
   d9a86:	4633      	mov	r3, r6
   d9a88:	4641      	mov	r1, r8
   d9a8a:	4638      	mov	r0, r7
   d9a8c:	47d8      	blx	fp
   d9a8e:	e7ea      	b.n	d9a66 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d9a90:	2300      	movs	r3, #0
   d9a92:	7323      	strb	r3, [r4, #12]
   d9a94:	e7d9      	b.n	d9a4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d9a96:	bf00      	nop
   d9a98:	e000ed00 	.word	0xe000ed00

000d9a9c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9aa0:	469b      	mov	fp, r3
   d9aa2:	4b1a      	ldr	r3, [pc, #104]	; (d9b0c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d9aa4:	685b      	ldr	r3, [r3, #4]
   d9aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9aaa:	4680      	mov	r8, r0
   d9aac:	4689      	mov	r9, r1
   d9aae:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d9ab0:	b96b      	cbnz	r3, d9ace <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d9ab2:	f7ff fe75 	bl	d97a0 <_ZN5spark10LogManager8instanceEv>
   d9ab6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9ab8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d9abc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9abe:	9301      	str	r3, [sp, #4]
   d9ac0:	f7fe f930 	bl	d7d24 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d9ac4:	7b23      	ldrb	r3, [r4, #12]
   d9ac6:	b12b      	cbz	r3, d9ad4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d9ac8:	a801      	add	r0, sp, #4
   d9aca:	f7ff ff9e 	bl	d9a0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9ace:	b003      	add	sp, #12
   d9ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d9ad4:	2301      	movs	r3, #1
   d9ad6:	7323      	strb	r3, [r4, #12]
   d9ad8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d9adc:	b2f6      	uxtb	r6, r6
   d9ade:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9ae2:	4555      	cmp	r5, sl
   d9ae4:	d00e      	beq.n	d9b04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d9ae6:	f855 7b04 	ldr.w	r7, [r5], #4
   d9aea:	4659      	mov	r1, fp
   d9aec:	1d38      	adds	r0, r7, #4
   d9aee:	f7ff fddb 	bl	d96a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9af2:	4286      	cmp	r6, r0
   d9af4:	d3f5      	bcc.n	d9ae2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d9af6:	683b      	ldr	r3, [r7, #0]
   d9af8:	464a      	mov	r2, r9
   d9afa:	68db      	ldr	r3, [r3, #12]
   d9afc:	4641      	mov	r1, r8
   d9afe:	4638      	mov	r0, r7
   d9b00:	4798      	blx	r3
   d9b02:	e7ee      	b.n	d9ae2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d9b04:	2300      	movs	r3, #0
   d9b06:	7323      	strb	r3, [r4, #12]
   d9b08:	e7de      	b.n	d9ac8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d9b0a:	bf00      	nop
   d9b0c:	e000ed00 	.word	0xe000ed00

000d9b10 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d9b10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9b14:	4b16      	ldr	r3, [pc, #88]	; (d9b70 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d9b16:	685b      	ldr	r3, [r3, #4]
   d9b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9b1c:	4605      	mov	r5, r0
   d9b1e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d9b20:	bb1b      	cbnz	r3, d9b6a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d9b22:	f7ff fe3d 	bl	d97a0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d9b26:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d9b2a:	4604      	mov	r4, r0
   d9b2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9b2e:	9301      	str	r3, [sp, #4]
   d9b30:	f7fe f8f8 	bl	d7d24 <os_mutex_recursive_lock>
   d9b34:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d9b38:	2446      	movs	r4, #70	; 0x46
   d9b3a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9b3e:	45b0      	cmp	r8, r6
   d9b40:	d109      	bne.n	d9b56 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d9b42:	a801      	add	r0, sp, #4
   d9b44:	f7ff ff61 	bl	d9a0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d9b48:	42a5      	cmp	r5, r4
   d9b4a:	bfb4      	ite	lt
   d9b4c:	2000      	movlt	r0, #0
   d9b4e:	2001      	movge	r0, #1
}
   d9b50:	b002      	add	sp, #8
   d9b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d9b56:	f856 0b04 	ldr.w	r0, [r6], #4
   d9b5a:	4639      	mov	r1, r7
   d9b5c:	3004      	adds	r0, #4
   d9b5e:	f7ff fda3 	bl	d96a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d9b62:	4284      	cmp	r4, r0
   d9b64:	bfa8      	it	ge
   d9b66:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d9b68:	e7e9      	b.n	d9b3e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d9b6a:	2000      	movs	r0, #0
   d9b6c:	e7f0      	b.n	d9b50 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9b6e:	bf00      	nop
   d9b70:	e000ed00 	.word	0xe000ed00

000d9b74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9b74:	b570      	push	{r4, r5, r6, lr}
   d9b76:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9b78:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9b7c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9b7e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d9b82:	4282      	cmp	r2, r0
   d9b84:	d007      	beq.n	d9b96 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d9b86:	4601      	mov	r1, r0
            if (*p == value) {
   d9b88:	681d      	ldr	r5, [r3, #0]
   d9b8a:	f851 6b04 	ldr.w	r6, [r1], #4
   d9b8e:	42ae      	cmp	r6, r5
   d9b90:	d003      	beq.n	d9b9a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d9b92:	4608      	mov	r0, r1
   d9b94:	e7f5      	b.n	d9b82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d9b96:	2000      	movs	r0, #0
}
   d9b98:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9b9a:	1a52      	subs	r2, r2, r1
   d9b9c:	f002 fa36 	bl	dc00c <memmove>
    --size_;
   d9ba0:	6863      	ldr	r3, [r4, #4]
   d9ba2:	3b01      	subs	r3, #1
   d9ba4:	6063      	str	r3, [r4, #4]
    return true;
   d9ba6:	2001      	movs	r0, #1
   d9ba8:	e7f6      	b.n	d9b98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d9baa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9baa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9bac:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9bb0:	4604      	mov	r4, r0
   d9bb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9bb4:	9101      	str	r1, [sp, #4]
   d9bb6:	9303      	str	r3, [sp, #12]
   d9bb8:	f7fe f8b4 	bl	d7d24 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9bbc:	a901      	add	r1, sp, #4
   d9bbe:	4620      	mov	r0, r4
   d9bc0:	f7ff ffd8 	bl	d9b74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d9bc4:	b118      	cbz	r0, d9bce <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d9bc6:	6863      	ldr	r3, [r4, #4]
   d9bc8:	b90b      	cbnz	r3, d9bce <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d9bca:	f7ff fe15 	bl	d97f8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9bce:	a803      	add	r0, sp, #12
   d9bd0:	f7ff ff1b 	bl	d9a0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9bd4:	b004      	add	sp, #16
   d9bd6:	bd10      	pop	{r4, pc}

000d9bd8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d9bd8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d9bda:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d9bde:	2318      	movs	r3, #24
   d9be0:	4604      	mov	r4, r0
   d9be2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9be6:	42ae      	cmp	r6, r5
   d9be8:	d015      	beq.n	d9c16 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9bea:	f105 0110 	add.w	r1, r5, #16
   d9bee:	4620      	mov	r0, r4
   d9bf0:	f7ff ffc0 	bl	d9b74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9bf4:	6863      	ldr	r3, [r4, #4]
   d9bf6:	b90b      	cbnz	r3, d9bfc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9bf8:	f7ff fdfe 	bl	d97f8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d9bfc:	69e0      	ldr	r0, [r4, #28]
   d9bfe:	6929      	ldr	r1, [r5, #16]
   d9c00:	6803      	ldr	r3, [r0, #0]
   d9c02:	68db      	ldr	r3, [r3, #12]
   d9c04:	4798      	blx	r3
        if (h.stream) {
   d9c06:	6969      	ldr	r1, [r5, #20]
   d9c08:	b119      	cbz	r1, d9c12 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d9c0a:	6a20      	ldr	r0, [r4, #32]
   d9c0c:	6803      	ldr	r3, [r0, #0]
   d9c0e:	68db      	ldr	r3, [r3, #12]
   d9c10:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d9c12:	3518      	adds	r5, #24
   d9c14:	e7e7      	b.n	d9be6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d9c16:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9c1a:	2618      	movs	r6, #24
   d9c1c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9c20:	42ae      	cmp	r6, r5
   d9c22:	d004      	beq.n	d9c2e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9c24:	4628      	mov	r0, r5
   d9c26:	f000 fe33 	bl	da890 <_ZN6StringD1Ev>
   d9c2a:	3518      	adds	r5, #24
   d9c2c:	e7f8      	b.n	d9c20 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d9c2e:	2300      	movs	r3, #0
   d9c30:	6163      	str	r3, [r4, #20]
}
   d9c32:	bd70      	pop	{r4, r5, r6, pc}

000d9c34 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9c36:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d9c38:	f7ff fdde 	bl	d97f8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9c3c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9c40:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9c42:	9301      	str	r3, [sp, #4]
   d9c44:	f7fe f86e 	bl	d7d24 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d9c48:	4620      	mov	r0, r4
   d9c4a:	f7ff ffc5 	bl	d9bd8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d9c4e:	a801      	add	r0, sp, #4
   d9c50:	f7ff fedb 	bl	d9a0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9c54:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9c56:	b108      	cbz	r0, d9c5c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9c58:	f7fe f85c 	bl	d7d14 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9c5c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9c60:	2618      	movs	r6, #24
   d9c62:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9c66:	42ae      	cmp	r6, r5
   d9c68:	d004      	beq.n	d9c74 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d9c6a:	4628      	mov	r0, r5
   d9c6c:	f000 fe10 	bl	da890 <_ZN6StringD1Ev>
   d9c70:	3518      	adds	r5, #24
   d9c72:	e7f8      	b.n	d9c66 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9c74:	6920      	ldr	r0, [r4, #16]
   d9c76:	f7fe fbb9 	bl	d83ec <free>
   d9c7a:	6820      	ldr	r0, [r4, #0]
   d9c7c:	f7fe fbb6 	bl	d83ec <free>
}
   d9c80:	4620      	mov	r0, r4
   d9c82:	b002      	add	sp, #8
   d9c84:	bd70      	pop	{r4, r5, r6, pc}

000d9c86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9c86:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9c8a:	4606      	mov	r6, r0
   d9c8c:	460c      	mov	r4, r1
   d9c8e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9c90:	d927      	bls.n	d9ce2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9c92:	4290      	cmp	r0, r2
   d9c94:	d226      	bcs.n	d9ce4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9c96:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9c9a:	1a6c      	subs	r4, r5, r1
   d9c9c:	f1a1 0714 	sub.w	r7, r1, #20
   d9ca0:	4404      	add	r4, r0
        capacity_(0) {
   d9ca2:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d9ca4:	42af      	cmp	r7, r5
   d9ca6:	d03d      	beq.n	d9d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d9ca8:	b1a4      	cbz	r4, d9cd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9caa:	682b      	ldr	r3, [r5, #0]
   d9cac:	6023      	str	r3, [r4, #0]
   d9cae:	88ab      	ldrh	r3, [r5, #4]
   d9cb0:	80a3      	strh	r3, [r4, #4]
   d9cb2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d9cb6:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d9cb8:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9cbc:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9cbe:	68ab      	ldr	r3, [r5, #8]
   d9cc0:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9cc2:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9cc4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9cc6:	68ea      	ldr	r2, [r5, #12]
   d9cc8:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9cca:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9ccc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9cce:	692a      	ldr	r2, [r5, #16]
   d9cd0:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9cd2:	612b      	str	r3, [r5, #16]
   d9cd4:	f105 0008 	add.w	r0, r5, #8
   d9cd8:	f7ff fe2e 	bl	d9938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d9cdc:	3d14      	subs	r5, #20
   d9cde:	3c14      	subs	r4, #20
   d9ce0:	e7e0      	b.n	d9ca4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d9ce2:	d01f      	beq.n	d9d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d9ce4:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d9ce6:	42ac      	cmp	r4, r5
   d9ce8:	d01c      	beq.n	d9d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d9cea:	b1a6      	cbz	r6, d9d16 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d9cec:	6823      	ldr	r3, [r4, #0]
   d9cee:	6033      	str	r3, [r6, #0]
   d9cf0:	88a3      	ldrh	r3, [r4, #4]
   d9cf2:	80b3      	strh	r3, [r6, #4]
   d9cf4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d9cf8:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d9cfa:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d9cfe:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9d00:	68a3      	ldr	r3, [r4, #8]
   d9d02:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9d04:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9d06:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9d08:	68e2      	ldr	r2, [r4, #12]
   d9d0a:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9d0c:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9d0e:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9d10:	6922      	ldr	r2, [r4, #16]
   d9d12:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9d14:	6123      	str	r3, [r4, #16]
   d9d16:	f104 0008 	add.w	r0, r4, #8
   d9d1a:	f7ff fe0d 	bl	d9938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d9d1e:	3414      	adds	r4, #20
   d9d20:	3614      	adds	r6, #20
   d9d22:	e7e0      	b.n	d9ce6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d9d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9d26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9d28:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d9d2c:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9d2e:	4604      	mov	r4, r0
   d9d30:	460e      	mov	r6, r1
   d9d32:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9d34:	db0d      	blt.n	d9d52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9d36:	3501      	adds	r5, #1
        if (n > 0) {
   d9d38:	2d00      	cmp	r5, #0
   d9d3a:	6800      	ldr	r0, [r0, #0]
   d9d3c:	dd04      	ble.n	d9d48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9d3e:	00a9      	lsls	r1, r5, #2
   d9d40:	f7fe fb5c 	bl	d83fc <realloc>
            if (!d) {
   d9d44:	b918      	cbnz	r0, d9d4e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d9d48:	f7fe fb50 	bl	d83ec <free>
        T* d = nullptr;
   d9d4c:	2000      	movs	r0, #0
        data_ = d;
   d9d4e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9d50:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9d52:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9d54:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9d56:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d9d5a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9d5c:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9d60:	1d08      	adds	r0, r1, #4
   d9d62:	f002 f953 	bl	dc00c <memmove>
    new(p) T(std::move(value));
   d9d66:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9d6a:	6863      	ldr	r3, [r4, #4]
   d9d6c:	3301      	adds	r3, #1
   d9d6e:	6063      	str	r3, [r4, #4]
    return true;
   d9d70:	2001      	movs	r0, #1
   d9d72:	e7e8      	b.n	d9d46 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d9d74 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9d76:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9d7a:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9d7c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9d7e:	9301      	str	r3, [sp, #4]
   d9d80:	460d      	mov	r5, r1
   d9d82:	f7fd ffcf 	bl	d7d24 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9d86:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9d8a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9d8e:	4283      	cmp	r3, r0
   d9d90:	461a      	mov	r2, r3
   d9d92:	d00b      	beq.n	d9dac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d9d94:	6812      	ldr	r2, [r2, #0]
   d9d96:	42aa      	cmp	r2, r5
   d9d98:	f103 0304 	add.w	r3, r3, #4
   d9d9c:	d1f7      	bne.n	d9d8e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9d9e:	a801      	add	r0, sp, #4
   d9da0:	f7ff fe33 	bl	d9a0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d9da4:	2500      	movs	r5, #0
}
   d9da6:	4628      	mov	r0, r5
   d9da8:	b003      	add	sp, #12
   d9daa:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d9dac:	462a      	mov	r2, r5
   d9dae:	4620      	mov	r0, r4
   d9db0:	f7ff ffb9 	bl	d9d26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d9db4:	4605      	mov	r5, r0
   d9db6:	2800      	cmp	r0, #0
   d9db8:	d0f1      	beq.n	d9d9e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d9dba:	6863      	ldr	r3, [r4, #4]
   d9dbc:	2b01      	cmp	r3, #1
   d9dbe:	d101      	bne.n	d9dc4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d9dc0:	f7ff fd0e 	bl	d97e0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9dc4:	a801      	add	r0, sp, #4
   d9dc6:	f7ff fe20 	bl	d9a0a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d9dca:	e7ec      	b.n	d9da6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d9dcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d9dcc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9dd0:	4604      	mov	r4, r0
   d9dd2:	460d      	mov	r5, r1
   d9dd4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d9dd6:	d914      	bls.n	d9e02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d9dd8:	4290      	cmp	r0, r2
   d9dda:	d213      	bcs.n	d9e04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d9ddc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d9de0:	1a75      	subs	r5, r6, r1
   d9de2:	f1a1 0710 	sub.w	r7, r1, #16
   d9de6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d9de8:	42b7      	cmp	r7, r6
   d9dea:	d018      	beq.n	d9e1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d9dec:	b11c      	cbz	r4, d9df6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d9dee:	4631      	mov	r1, r6
   d9df0:	4620      	mov	r0, r4
   d9df2:	f000 fdc9 	bl	da988 <_ZN6StringC1EOS_>
                end->~T();
   d9df6:	4630      	mov	r0, r6
   d9df8:	f000 fd4a 	bl	da890 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d9dfc:	3e10      	subs	r6, #16
   d9dfe:	3c10      	subs	r4, #16
   d9e00:	e7f2      	b.n	d9de8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d9e02:	d00c      	beq.n	d9e1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d9e04:	42b5      	cmp	r5, r6
   d9e06:	d00a      	beq.n	d9e1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d9e08:	b11c      	cbz	r4, d9e12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d9e0a:	4629      	mov	r1, r5
   d9e0c:	4620      	mov	r0, r4
   d9e0e:	f000 fdbb 	bl	da988 <_ZN6StringC1EOS_>
                p->~T();
   d9e12:	4628      	mov	r0, r5
   d9e14:	f000 fd3c 	bl	da890 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d9e18:	3510      	adds	r5, #16
   d9e1a:	3410      	adds	r4, #16
   d9e1c:	e7f2      	b.n	d9e04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d9e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9e20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d9e20:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d9e22:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d9e24:	4605      	mov	r5, r0
        if (n > 0) {
   d9e26:	dd11      	ble.n	d9e4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d9e28:	0130      	lsls	r0, r6, #4
   d9e2a:	f7fe fad7 	bl	d83dc <malloc>
            if (!d) {
   d9e2e:	4604      	mov	r4, r0
   d9e30:	b158      	cbz	r0, d9e4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d9e32:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9e36:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d9e3a:	f7ff ffc7 	bl	d9dcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d9e3e:	6828      	ldr	r0, [r5, #0]
   d9e40:	f7fe fad4 	bl	d83ec <free>
        data_ = d;
   d9e44:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9e46:	60ae      	str	r6, [r5, #8]
        return true;
   d9e48:	2001      	movs	r0, #1
    }
   d9e4a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d9e4c:	2400      	movs	r4, #0
   d9e4e:	e7f6      	b.n	d9e3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9e50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e54:	4691      	mov	r9, r2
   d9e56:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d9e58:	2300      	movs	r3, #0
   d9e5a:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d9e5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9e60:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9e62:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d9e64:	4299      	cmp	r1, r3
        capacity_(0) {
   d9e66:	e9c0 3300 	strd	r3, r3, [r0]
   d9e6a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9e72:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9e76:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9e78:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d9e7a:	dc23      	bgt.n	d9ec4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d9e7c:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9e80:	2314      	movs	r3, #20
   d9e82:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d9e86:	42af      	cmp	r7, r5
   d9e88:	d03b      	beq.n	d9f02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9e8a:	4629      	mov	r1, r5
   d9e8c:	a80d      	add	r0, sp, #52	; 0x34
   d9e8e:	f000 fd7b 	bl	da988 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9e92:	a90d      	add	r1, sp, #52	; 0x34
   d9e94:	a811      	add	r0, sp, #68	; 0x44
   d9e96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d9e98:	f000 fd76 	bl	da988 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9e9c:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9ea0:	4299      	cmp	r1, r3
   d9ea2:	da1b      	bge.n	d9edc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d9ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d9ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d9ea8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9eac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d9eb0:	4631      	mov	r1, r6
   d9eb2:	f106 0010 	add.w	r0, r6, #16
   d9eb6:	f7ff ff89 	bl	d9dcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9eba:	b9ee      	cbnz	r6, d9ef8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d9ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9ebe:	3301      	adds	r3, #1
   d9ec0:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d9ec2:	e011      	b.n	d9ee8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d9ec4:	a80a      	add	r0, sp, #40	; 0x28
   d9ec6:	f7ff ffab 	bl	d9e20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9eca:	2800      	cmp	r0, #0
   d9ecc:	d1d6      	bne.n	d9e7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d9ece:	a80a      	add	r0, sp, #40	; 0x28
   d9ed0:	f7ff fd46 	bl	d9960 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9ed4:	4620      	mov	r0, r4
   d9ed6:	b017      	add	sp, #92	; 0x5c
   d9ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9edc:	3101      	adds	r1, #1
   d9ede:	a80a      	add	r0, sp, #40	; 0x28
   d9ee0:	f7ff ff9e 	bl	d9e20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9ee4:	2800      	cmp	r0, #0
   d9ee6:	d1dd      	bne.n	d9ea4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d9ee8:	a811      	add	r0, sp, #68	; 0x44
   d9eea:	f000 fcd1 	bl	da890 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d9eee:	a80d      	add	r0, sp, #52	; 0x34
   d9ef0:	f000 fcce 	bl	da890 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d9ef4:	3514      	adds	r5, #20
   d9ef6:	e7c6      	b.n	d9e86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d9ef8:	a911      	add	r1, sp, #68	; 0x44
   d9efa:	4630      	mov	r0, r6
   d9efc:	f000 fd44 	bl	da988 <_ZN6StringC1EOS_>
   d9f00:	e7dc      	b.n	d9ebc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d9f02:	2600      	movs	r6, #0
   d9f04:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d9f08:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d9f0a:	4637      	mov	r7, r6
   d9f0c:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d9f10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9f14:	429e      	cmp	r6, r3
   d9f16:	f280 8097 	bge.w	da048 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d9f1a:	0133      	lsls	r3, r6, #4
   d9f1c:	58d3      	ldr	r3, [r2, r3]
   d9f1e:	9308      	str	r3, [sp, #32]
        if (!category) {
   d9f20:	b90b      	cbnz	r3, d9f26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d9f22:	3601      	adds	r6, #1
   d9f24:	e7f4      	b.n	d9f10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d9f26:	fb0a f306 	mul.w	r3, sl, r6
   d9f2a:	9709      	str	r7, [sp, #36]	; 0x24
   d9f2c:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d9f2e:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d9f30:	a909      	add	r1, sp, #36	; 0x24
   d9f32:	a808      	add	r0, sp, #32
   d9f34:	f7ff fafc 	bl	d9530 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9f38:	4683      	mov	fp, r0
   d9f3a:	2800      	cmp	r0, #0
   d9f3c:	d0f1      	beq.n	d9f22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9f3e:	4601      	mov	r1, r0
   d9f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d9f42:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9f46:	f10d 031f 	add.w	r3, sp, #31
   d9f4a:	4628      	mov	r0, r5
   d9f4c:	f7ff fb6e 	bl	d962c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9f50:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9f54:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9f56:	f1b8 0f00 	cmp.w	r8, #0
   d9f5a:	d166      	bne.n	da02a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d9f5c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d9f60:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d9f64:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d9f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9f6c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d9f70:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d9f74:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9f78:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d9f7c:	4293      	cmp	r3, r2
   d9f7e:	db1a      	blt.n	d9fb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d9f80:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d9f84:	f1bb 0f00 	cmp.w	fp, #0
   d9f88:	dd4a      	ble.n	da020 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d9f8a:	fb0a f00b 	mul.w	r0, sl, fp
   d9f8e:	f7fe fa25 	bl	d83dc <malloc>
            if (!d) {
   d9f92:	9004      	str	r0, [sp, #16]
   d9f94:	2800      	cmp	r0, #0
   d9f96:	d045      	beq.n	da024 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d9f98:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9f9c:	fb0a 1202 	mla	r2, sl, r2, r1
   d9fa0:	f7ff fe71 	bl	d9c86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d9fa4:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d9fa6:	6828      	ldr	r0, [r5, #0]
   d9fa8:	9304      	str	r3, [sp, #16]
   d9faa:	f7fe fa1f 	bl	d83ec <free>
        data_ = d;
   d9fae:	9b04      	ldr	r3, [sp, #16]
   d9fb0:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d9fb2:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d9fb6:	9b01      	ldr	r3, [sp, #4]
   d9fb8:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d9fbc:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d9fbe:	fb0a f303 	mul.w	r3, sl, r3
   d9fc2:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d9fc6:	f101 0014 	add.w	r0, r1, #20
   d9fca:	fb0a b202 	mla	r2, sl, r2, fp
   d9fce:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d9fd0:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d9fd2:	f7ff fe58 	bl	d9c86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d9fd6:	9904      	ldr	r1, [sp, #16]
   d9fd8:	b1a9      	cbz	r1, da006 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d9fda:	9b05      	ldr	r3, [sp, #20]
   d9fdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9fde:	f84b 2003 	str.w	r2, [fp, r3]
   d9fe2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d9fe6:	808b      	strh	r3, [r1, #4]
   d9fe8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d9fec:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d9fee:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d9ff2:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9ff6:	608b      	str	r3, [r1, #8]
   d9ff8:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d9ffa:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d9ffc:	60cb      	str	r3, [r1, #12]
   d9ffe:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   da000:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   da002:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   da004:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   da006:	686b      	ldr	r3, [r5, #4]
   da008:	3301      	adds	r3, #1
   da00a:	606b      	str	r3, [r5, #4]
   da00c:	a813      	add	r0, sp, #76	; 0x4c
   da00e:	f7ff fc93 	bl	d9938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da012:	f1b8 0f00 	cmp.w	r8, #0
   da016:	d008      	beq.n	da02a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   da018:	a80d      	add	r0, sp, #52	; 0x34
   da01a:	f7ff fc8d 	bl	d9938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da01e:	e756      	b.n	d9ece <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   da020:	4643      	mov	r3, r8
   da022:	e7c0      	b.n	d9fa6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da024:	f04f 0801 	mov.w	r8, #1
   da028:	e7f0      	b.n	da00c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   da02a:	9b01      	ldr	r3, [sp, #4]
   da02c:	682d      	ldr	r5, [r5, #0]
   da02e:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   da032:	9b08      	ldr	r3, [sp, #32]
   da034:	781b      	ldrb	r3, [r3, #0]
   da036:	b92b      	cbnz	r3, da044 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   da038:	f8d9 3000 	ldr.w	r3, [r9]
   da03c:	9a02      	ldr	r2, [sp, #8]
   da03e:	4413      	add	r3, r2
   da040:	7c1b      	ldrb	r3, [r3, #16]
   da042:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   da044:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   da046:	e773      	b.n	d9f30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da048:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da04a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da04c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   da04e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da050:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da052:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   da054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   da056:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da058:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da05a:	60a2      	str	r2, [r4, #8]
   da05c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   da05e:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da060:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   da062:	60e2      	str	r2, [r4, #12]
   da064:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   da066:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da068:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   da06a:	6122      	str	r2, [r4, #16]
   da06c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   da06e:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   da070:	9b03      	ldr	r3, [sp, #12]
   da072:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   da074:	6162      	str	r2, [r4, #20]
   da076:	7623      	strb	r3, [r4, #24]
   da078:	e7ce      	b.n	da018 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000da07c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da07c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   da07e:	4605      	mov	r5, r0
   da080:	4b09      	ldr	r3, [pc, #36]	; (da0a8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   da082:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da086:	4604      	mov	r4, r0
   da088:	460e      	mov	r6, r1
        filter_(level, filters) {
   da08a:	a801      	add	r0, sp, #4
   da08c:	4611      	mov	r1, r2
   da08e:	f7fb fc13 	bl	d58b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da092:	aa01      	add	r2, sp, #4
   da094:	4631      	mov	r1, r6
   da096:	4628      	mov	r0, r5
   da098:	f7ff feda 	bl	d9e50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da09c:	a801      	add	r0, sp, #4
   da09e:	f7fb f901 	bl	d52a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   da0a2:	4620      	mov	r0, r4
   da0a4:	b004      	add	sp, #16
   da0a6:	bd70      	pop	{r4, r5, r6, pc}
   da0a8:	000dc844 	.word	0x000dc844

000da0ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   da0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   da0ae:	460f      	mov	r7, r1
   da0b0:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da0b2:	4926      	ldr	r1, [pc, #152]	; (da14c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   da0b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da0b6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   da0b8:	4616      	mov	r6, r2
   da0ba:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da0bc:	f002 f803 	bl	dc0c6 <strcmp>
   da0c0:	bb00      	cbnz	r0, da104 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   da0c2:	b1e4      	cbz	r4, da0fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   da0c4:	4629      	mov	r1, r5
   da0c6:	4668      	mov	r0, sp
   da0c8:	f7ff fc90 	bl	d99ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da0cc:	4920      	ldr	r1, [pc, #128]	; (da150 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da0ce:	2024      	movs	r0, #36	; 0x24
   da0d0:	f001 faa3 	bl	db61a <_ZnwjRKSt9nothrow_t>
   da0d4:	4605      	mov	r5, r0
   da0d6:	b170      	cbz	r0, da0f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da0d8:	4669      	mov	r1, sp
   da0da:	a803      	add	r0, sp, #12
   da0dc:	f7fb fbec 	bl	d58b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da0e0:	aa03      	add	r2, sp, #12
   da0e2:	4631      	mov	r1, r6
   da0e4:	4628      	mov	r0, r5
   da0e6:	f7ff ffc9 	bl	da07c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da0ea:	a803      	add	r0, sp, #12
   da0ec:	f7fb f8da 	bl	d52a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   da0f0:	4b18      	ldr	r3, [pc, #96]	; (da154 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   da0f2:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   da0f4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da0f6:	4668      	mov	r0, sp
   da0f8:	f7fb f8d4 	bl	d52a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da0fc:	462c      	mov	r4, r5
}
   da0fe:	4620      	mov	r0, r4
   da100:	b007      	add	sp, #28
   da102:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   da104:	4914      	ldr	r1, [pc, #80]	; (da158 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   da106:	4638      	mov	r0, r7
   da108:	f001 ffdd 	bl	dc0c6 <strcmp>
   da10c:	b9e0      	cbnz	r0, da148 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   da10e:	2c00      	cmp	r4, #0
   da110:	d0f5      	beq.n	da0fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da112:	4629      	mov	r1, r5
   da114:	4668      	mov	r0, sp
   da116:	f7ff fc69 	bl	d99ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da11a:	490d      	ldr	r1, [pc, #52]	; (da150 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da11c:	2024      	movs	r0, #36	; 0x24
   da11e:	f001 fa7c 	bl	db61a <_ZnwjRKSt9nothrow_t>
   da122:	4605      	mov	r5, r0
   da124:	2800      	cmp	r0, #0
   da126:	d0e6      	beq.n	da0f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da128:	4669      	mov	r1, sp
   da12a:	a803      	add	r0, sp, #12
   da12c:	f7fb fbc4 	bl	d58b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da130:	aa03      	add	r2, sp, #12
   da132:	4631      	mov	r1, r6
   da134:	4628      	mov	r0, r5
   da136:	f7ff ffa1 	bl	da07c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da13a:	a803      	add	r0, sp, #12
   da13c:	f7fb f8b2 	bl	d52a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da140:	4b06      	ldr	r3, [pc, #24]	; (da15c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   da142:	602b      	str	r3, [r5, #0]
   da144:	622c      	str	r4, [r5, #32]
}
   da146:	e7d6      	b.n	da0f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   da148:	2400      	movs	r4, #0
   da14a:	e7d8      	b.n	da0fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   da14c:	000dcdd2 	.word	0x000dcdd2
   da150:	000dcf98 	.word	0x000dcf98
   da154:	000dce64 	.word	0x000dce64
   da158:	000dcdd6 	.word	0x000dcdd6
   da15c:	000dce4c 	.word	0x000dce4c

000da160 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   da160:	4b01      	ldr	r3, [pc, #4]	; (da168 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da162:	4a02      	ldr	r2, [pc, #8]	; (da16c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da164:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   da166:	4770      	bx	lr
   da168:	2003e5e0 	.word	0x2003e5e0
   da16c:	000dcde7 	.word	0x000dcde7

000da170 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da174:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   da176:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da17a:	4604      	mov	r4, r0
   da17c:	460e      	mov	r6, r1
   da17e:	4617      	mov	r7, r2
   da180:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   da182:	f001 f85d 	bl	db240 <_Z16_fetch_usbserialv>
   da186:	4581      	cmp	r9, r0
   da188:	d04c      	beq.n	da224 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   da18a:	792b      	ldrb	r3, [r5, #4]
   da18c:	0719      	lsls	r1, r3, #28
   da18e:	d504      	bpl.n	da19a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   da190:	696a      	ldr	r2, [r5, #20]
   da192:	4954      	ldr	r1, [pc, #336]	; (da2e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   da194:	4620      	mov	r0, r4
   da196:	f7ff fa3a 	bl	d960e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   da19a:	f1b8 0f00 	cmp.w	r8, #0
   da19e:	d00d      	beq.n	da1bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   da1a0:	215b      	movs	r1, #91	; 0x5b
   da1a2:	4620      	mov	r0, r4
   da1a4:	f7ff fa27 	bl	d95f6 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   da1a8:	4641      	mov	r1, r8
   da1aa:	4620      	mov	r0, r4
   da1ac:	f7ff fa14 	bl	d95d8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   da1b0:	6823      	ldr	r3, [r4, #0]
   da1b2:	494d      	ldr	r1, [pc, #308]	; (da2e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   da1b4:	68db      	ldr	r3, [r3, #12]
   da1b6:	2202      	movs	r2, #2
   da1b8:	4620      	mov	r0, r4
   da1ba:	4798      	blx	r3
    if (attr.has_file) {
   da1bc:	792b      	ldrb	r3, [r5, #4]
   da1be:	07da      	lsls	r2, r3, #31
   da1c0:	d523      	bpl.n	da20a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   da1c2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   da1c6:	212f      	movs	r1, #47	; 0x2f
   da1c8:	4640      	mov	r0, r8
   da1ca:	f001 ffd9 	bl	dc180 <strrchr>
    if (s1) {
   da1ce:	b108      	cbz	r0, da1d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   da1d0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   da1d4:	4641      	mov	r1, r8
   da1d6:	4620      	mov	r0, r4
   da1d8:	f7ff f9fe 	bl	d95d8 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   da1dc:	792b      	ldrb	r3, [r5, #4]
   da1de:	079b      	lsls	r3, r3, #30
   da1e0:	d508      	bpl.n	da1f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   da1e2:	213a      	movs	r1, #58	; 0x3a
   da1e4:	4620      	mov	r0, r4
   da1e6:	f7ff fa06 	bl	d95f6 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   da1ea:	68ea      	ldr	r2, [r5, #12]
   da1ec:	493f      	ldr	r1, [pc, #252]	; (da2ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   da1ee:	4620      	mov	r0, r4
   da1f0:	f7ff fa0d 	bl	d960e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   da1f4:	792a      	ldrb	r2, [r5, #4]
   da1f6:	6823      	ldr	r3, [r4, #0]
   da1f8:	f012 0f04 	tst.w	r2, #4
   da1fc:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   da1fe:	bf14      	ite	ne
   da200:	493b      	ldrne	r1, [pc, #236]	; (da2f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   da202:	493c      	ldreq	r1, [pc, #240]	; (da2f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   da204:	2202      	movs	r2, #2
            write(": ", 2);
   da206:	4620      	mov	r0, r4
   da208:	4798      	blx	r3
    if (attr.has_function) {
   da20a:	792b      	ldrb	r3, [r5, #4]
   da20c:	0758      	lsls	r0, r3, #29
   da20e:	d51d      	bpl.n	da24c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da210:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da212:	460b      	mov	r3, r1
   da214:	461a      	mov	r2, r3
    for (; *s; ++s) {
   da216:	f813 0b01 	ldrb.w	r0, [r3], #1
   da21a:	b160      	cbz	r0, da236 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   da21c:	2820      	cmp	r0, #32
   da21e:	d108      	bne.n	da232 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   da220:	4619      	mov	r1, r3
   da222:	e7f7      	b.n	da214 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   da224:	4834      	ldr	r0, [pc, #208]	; (da2f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   da226:	f000 f966 	bl	da4f6 <_ZN5spark12NetworkClass9listeningEv>
   da22a:	2800      	cmp	r0, #0
   da22c:	d0ad      	beq.n	da18a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   da22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   da232:	2828      	cmp	r0, #40	; 0x28
   da234:	d1ee      	bne.n	da214 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   da236:	6823      	ldr	r3, [r4, #0]
   da238:	1a52      	subs	r2, r2, r1
   da23a:	68db      	ldr	r3, [r3, #12]
   da23c:	4620      	mov	r0, r4
   da23e:	4798      	blx	r3
        write("(): ", 4);
   da240:	6823      	ldr	r3, [r4, #0]
   da242:	492e      	ldr	r1, [pc, #184]	; (da2fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   da244:	68db      	ldr	r3, [r3, #12]
   da246:	2204      	movs	r2, #4
   da248:	4620      	mov	r0, r4
   da24a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   da24c:	2100      	movs	r1, #0
   da24e:	4638      	mov	r0, r7
   da250:	f7fd ff60 	bl	d8114 <log_level_name>
   da254:	4601      	mov	r1, r0
    write(s);
   da256:	4620      	mov	r0, r4
   da258:	f7ff f9be 	bl	d95d8 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   da25c:	6823      	ldr	r3, [r4, #0]
   da25e:	4925      	ldr	r1, [pc, #148]	; (da2f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   da260:	68db      	ldr	r3, [r3, #12]
   da262:	2202      	movs	r2, #2
   da264:	4620      	mov	r0, r4
   da266:	4798      	blx	r3
    if (msg) {
   da268:	b11e      	cbz	r6, da272 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   da26a:	4631      	mov	r1, r6
   da26c:	4620      	mov	r0, r4
   da26e:	f7ff f9b3 	bl	d95d8 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   da272:	792b      	ldrb	r3, [r5, #4]
   da274:	f013 0f30 	tst.w	r3, #48	; 0x30
   da278:	d02c      	beq.n	da2d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   da27a:	6823      	ldr	r3, [r4, #0]
   da27c:	4920      	ldr	r1, [pc, #128]	; (da300 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   da27e:	68db      	ldr	r3, [r3, #12]
   da280:	2202      	movs	r2, #2
   da282:	4620      	mov	r0, r4
   da284:	4798      	blx	r3
        if (attr.has_code) {
   da286:	792b      	ldrb	r3, [r5, #4]
   da288:	06d9      	lsls	r1, r3, #27
   da28a:	d50a      	bpl.n	da2a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   da28c:	6823      	ldr	r3, [r4, #0]
   da28e:	491d      	ldr	r1, [pc, #116]	; (da304 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da290:	68db      	ldr	r3, [r3, #12]
   da292:	2207      	movs	r2, #7
   da294:	4620      	mov	r0, r4
   da296:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   da298:	69aa      	ldr	r2, [r5, #24]
   da29a:	491b      	ldr	r1, [pc, #108]	; (da308 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   da29c:	4620      	mov	r0, r4
   da29e:	f7ff f9b6 	bl	d960e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   da2a2:	792b      	ldrb	r3, [r5, #4]
   da2a4:	069a      	lsls	r2, r3, #26
   da2a6:	d511      	bpl.n	da2cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   da2a8:	06db      	lsls	r3, r3, #27
   da2aa:	d505      	bpl.n	da2b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   da2ac:	6823      	ldr	r3, [r4, #0]
   da2ae:	4910      	ldr	r1, [pc, #64]	; (da2f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   da2b0:	68db      	ldr	r3, [r3, #12]
   da2b2:	2202      	movs	r2, #2
   da2b4:	4620      	mov	r0, r4
   da2b6:	4798      	blx	r3
            write("details = ", 10);
   da2b8:	6823      	ldr	r3, [r4, #0]
   da2ba:	4914      	ldr	r1, [pc, #80]	; (da30c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   da2bc:	68db      	ldr	r3, [r3, #12]
   da2be:	4620      	mov	r0, r4
   da2c0:	220a      	movs	r2, #10
   da2c2:	4798      	blx	r3
            write(attr.details);
   da2c4:	69e9      	ldr	r1, [r5, #28]
   da2c6:	4620      	mov	r0, r4
   da2c8:	f7ff f986 	bl	d95d8 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   da2cc:	215d      	movs	r1, #93	; 0x5d
   da2ce:	4620      	mov	r0, r4
   da2d0:	f7ff f991 	bl	d95f6 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   da2d4:	6823      	ldr	r3, [r4, #0]
   da2d6:	490e      	ldr	r1, [pc, #56]	; (da310 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   da2d8:	68db      	ldr	r3, [r3, #12]
   da2da:	4620      	mov	r0, r4
   da2dc:	2202      	movs	r2, #2
}
   da2de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   da2e2:	4718      	bx	r3
   da2e4:	000dcdeb 	.word	0x000dcdeb
   da2e8:	000dcdf2 	.word	0x000dcdf2
   da2ec:	000dc998 	.word	0x000dc998
   da2f0:	000dcdf5 	.word	0x000dcdf5
   da2f4:	000dcdfa 	.word	0x000dcdfa
   da2f8:	2003e60c 	.word	0x2003e60c
   da2fc:	000dcdf8 	.word	0x000dcdf8
   da300:	000dcdfd 	.word	0x000dcdfd
   da304:	000dce00 	.word	0x000dce00
   da308:	000dc482 	.word	0x000dc482
   da30c:	000dce08 	.word	0x000dce08
   da310:	000dce13 	.word	0x000dce13

000da314 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da318:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   da31a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da31e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   da320:	4605      	mov	r5, r0
   da322:	460f      	mov	r7, r1
   da324:	4690      	mov	r8, r2
   da326:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   da328:	f000 ff8a 	bl	db240 <_Z16_fetch_usbserialv>
   da32c:	4581      	cmp	r9, r0
   da32e:	d105      	bne.n	da33c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   da330:	4849      	ldr	r0, [pc, #292]	; (da458 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   da332:	f000 f8e0 	bl	da4f6 <_ZN5spark12NetworkClass9listeningEv>
   da336:	2800      	cmp	r0, #0
   da338:	f040 808a 	bne.w	da450 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   da33c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   da33e:	4a47      	ldr	r2, [pc, #284]	; (da45c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   da340:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   da342:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   da346:	a801      	add	r0, sp, #4
        strm_(stream) {
   da348:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   da34a:	f88d 9008 	strb.w	r9, [sp, #8]
   da34e:	f7ff f838 	bl	d93c2 <_ZN5spark10JSONWriter11beginObjectEv>
   da352:	4649      	mov	r1, r9
   da354:	4640      	mov	r0, r8
   da356:	f7fd fedd 	bl	d8114 <log_level_name>
    json.name("l", 1).value(s);
   da35a:	4941      	ldr	r1, [pc, #260]	; (da460 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   da35c:	4680      	mov	r8, r0
   da35e:	2201      	movs	r2, #1
   da360:	a801      	add	r0, sp, #4
   da362:	f7ff f8b7 	bl	d94d4 <_ZN5spark10JSONWriter4nameEPKcj>
   da366:	4641      	mov	r1, r8
   da368:	f7ff f928 	bl	d95bc <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   da36c:	b13f      	cbz	r7, da37e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   da36e:	493d      	ldr	r1, [pc, #244]	; (da464 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   da370:	2201      	movs	r2, #1
   da372:	a801      	add	r0, sp, #4
   da374:	f7ff f8ae 	bl	d94d4 <_ZN5spark10JSONWriter4nameEPKcj>
   da378:	4639      	mov	r1, r7
   da37a:	f7ff f91f 	bl	d95bc <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   da37e:	b13e      	cbz	r6, da390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   da380:	4939      	ldr	r1, [pc, #228]	; (da468 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   da382:	2201      	movs	r2, #1
   da384:	a801      	add	r0, sp, #4
   da386:	f7ff f8a5 	bl	d94d4 <_ZN5spark10JSONWriter4nameEPKcj>
   da38a:	4631      	mov	r1, r6
   da38c:	f7ff f916 	bl	d95bc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   da390:	7923      	ldrb	r3, [r4, #4]
   da392:	07df      	lsls	r7, r3, #31
   da394:	d50e      	bpl.n	da3b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   da396:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   da398:	212f      	movs	r1, #47	; 0x2f
   da39a:	4630      	mov	r0, r6
   da39c:	f001 fef0 	bl	dc180 <strrchr>
    if (s1) {
   da3a0:	b100      	cbz	r0, da3a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   da3a2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   da3a4:	4931      	ldr	r1, [pc, #196]	; (da46c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   da3a6:	2201      	movs	r2, #1
   da3a8:	a801      	add	r0, sp, #4
   da3aa:	f7ff f893 	bl	d94d4 <_ZN5spark10JSONWriter4nameEPKcj>
   da3ae:	4631      	mov	r1, r6
   da3b0:	f7ff f904 	bl	d95bc <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   da3b4:	7923      	ldrb	r3, [r4, #4]
   da3b6:	079e      	lsls	r6, r3, #30
   da3b8:	d507      	bpl.n	da3ca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   da3ba:	492d      	ldr	r1, [pc, #180]	; (da470 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   da3bc:	2202      	movs	r2, #2
   da3be:	a801      	add	r0, sp, #4
   da3c0:	f7ff f888 	bl	d94d4 <_ZN5spark10JSONWriter4nameEPKcj>
   da3c4:	68e1      	ldr	r1, [r4, #12]
   da3c6:	f7ff f809 	bl	d93dc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   da3ca:	7923      	ldrb	r3, [r4, #4]
   da3cc:	0758      	lsls	r0, r3, #29
   da3ce:	d514      	bpl.n	da3fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da3d0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da3d2:	4633      	mov	r3, r6
   da3d4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   da3d6:	f813 2b01 	ldrb.w	r2, [r3], #1
   da3da:	b12a      	cbz	r2, da3e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   da3dc:	2a20      	cmp	r2, #32
   da3de:	d101      	bne.n	da3e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   da3e0:	461e      	mov	r6, r3
   da3e2:	e7f7      	b.n	da3d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   da3e4:	2a28      	cmp	r2, #40	; 0x28
   da3e6:	d1f5      	bne.n	da3d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   da3e8:	4922      	ldr	r1, [pc, #136]	; (da474 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   da3ea:	2202      	movs	r2, #2
   da3ec:	a801      	add	r0, sp, #4
   da3ee:	f7ff f871 	bl	d94d4 <_ZN5spark10JSONWriter4nameEPKcj>
   da3f2:	1bba      	subs	r2, r7, r6
   da3f4:	4631      	mov	r1, r6
   da3f6:	f7ff f87d 	bl	d94f4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   da3fa:	7923      	ldrb	r3, [r4, #4]
   da3fc:	0719      	lsls	r1, r3, #28
   da3fe:	d507      	bpl.n	da410 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   da400:	491d      	ldr	r1, [pc, #116]	; (da478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   da402:	2201      	movs	r2, #1
   da404:	a801      	add	r0, sp, #4
   da406:	f7ff f865 	bl	d94d4 <_ZN5spark10JSONWriter4nameEPKcj>
   da40a:	6961      	ldr	r1, [r4, #20]
   da40c:	f7fe fff8 	bl	d9400 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   da410:	7923      	ldrb	r3, [r4, #4]
   da412:	06da      	lsls	r2, r3, #27
   da414:	d508      	bpl.n	da428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   da416:	2204      	movs	r2, #4
   da418:	4918      	ldr	r1, [pc, #96]	; (da47c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   da41a:	eb0d 0002 	add.w	r0, sp, r2
   da41e:	f7ff f859 	bl	d94d4 <_ZN5spark10JSONWriter4nameEPKcj>
   da422:	69a1      	ldr	r1, [r4, #24]
   da424:	f7fe ffda 	bl	d93dc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   da428:	7923      	ldrb	r3, [r4, #4]
   da42a:	069b      	lsls	r3, r3, #26
   da42c:	d507      	bpl.n	da43e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   da42e:	4914      	ldr	r1, [pc, #80]	; (da480 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   da430:	2206      	movs	r2, #6
   da432:	a801      	add	r0, sp, #4
   da434:	f7ff f84e 	bl	d94d4 <_ZN5spark10JSONWriter4nameEPKcj>
   da438:	69e1      	ldr	r1, [r4, #28]
   da43a:	f7ff f8bf 	bl	d95bc <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   da43e:	a801      	add	r0, sp, #4
   da440:	f7fe ffa9 	bl	d9396 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   da444:	6a28      	ldr	r0, [r5, #32]
   da446:	490f      	ldr	r1, [pc, #60]	; (da484 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   da448:	6803      	ldr	r3, [r0, #0]
   da44a:	2202      	movs	r2, #2
   da44c:	68db      	ldr	r3, [r3, #12]
   da44e:	4798      	blx	r3
}
   da450:	b005      	add	sp, #20
   da452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da456:	bf00      	nop
   da458:	2003e60c 	.word	0x2003e60c
   da45c:	000dce34 	.word	0x000dce34
   da460:	000dcdc8 	.word	0x000dcdc8
   da464:	000dce16 	.word	0x000dce16
   da468:	000dc40a 	.word	0x000dc40a
   da46c:	000dc8ff 	.word	0x000dc8ff
   da470:	000dce18 	.word	0x000dce18
   da474:	000dce1b 	.word	0x000dce1b
   da478:	000dc7dd 	.word	0x000dc7dd
   da47c:	000dce1e 	.word	0x000dce1e
   da480:	000dce23 	.word	0x000dce23
   da484:	000dce13 	.word	0x000dce13

000da488 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da488:	2300      	movs	r3, #0
   da48a:	6840      	ldr	r0, [r0, #4]
   da48c:	461a      	mov	r2, r3
   da48e:	f7fd bf45 	b.w	d831c <network_connect>

000da492 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da492:	6840      	ldr	r0, [r0, #4]
   da494:	2200      	movs	r2, #0
   da496:	2102      	movs	r1, #2
   da498:	f7fd bf50 	b.w	d833c <network_disconnect>

000da49c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da49c:	2200      	movs	r2, #0
   da49e:	6840      	ldr	r0, [r0, #4]
   da4a0:	4611      	mov	r1, r2
   da4a2:	f7fd bf43 	b.w	d832c <network_connecting>

000da4a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da4a6:	2200      	movs	r2, #0
   da4a8:	6840      	ldr	r0, [r0, #4]
   da4aa:	4611      	mov	r1, r2
   da4ac:	f7fd bf4e 	b.w	d834c <network_ready>

000da4b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da4b0:	2300      	movs	r3, #0
   da4b2:	6840      	ldr	r0, [r0, #4]
   da4b4:	461a      	mov	r2, r3
   da4b6:	4619      	mov	r1, r3
   da4b8:	f7fd bf50 	b.w	d835c <network_on>

000da4bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da4bc:	2300      	movs	r3, #0
   da4be:	6840      	ldr	r0, [r0, #4]
   da4c0:	461a      	mov	r2, r3
   da4c2:	4619      	mov	r1, r3
   da4c4:	f7fd bf52 	b.w	d836c <network_off>

000da4c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   da4c8:	6840      	ldr	r0, [r0, #4]
   da4ca:	2100      	movs	r1, #0
   da4cc:	f7fd bf76 	b.w	d83bc <network_is_on>

000da4d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   da4d0:	6840      	ldr	r0, [r0, #4]
   da4d2:	2100      	movs	r1, #0
   da4d4:	f7fd bf7a 	b.w	d83cc <network_is_off>

000da4d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da4d8:	6840      	ldr	r0, [r0, #4]
   da4da:	2200      	movs	r2, #0
   da4dc:	f081 0101 	eor.w	r1, r1, #1
   da4e0:	f7fd bf4c 	b.w	d837c <network_listen>

000da4e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da4e4:	6840      	ldr	r0, [r0, #4]
   da4e6:	2200      	movs	r2, #0
   da4e8:	f7fd bf58 	b.w	d839c <network_set_listen_timeout>

000da4ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da4ec:	2200      	movs	r2, #0
   da4ee:	6840      	ldr	r0, [r0, #4]
   da4f0:	4611      	mov	r1, r2
   da4f2:	f7fd bf5b 	b.w	d83ac <network_get_listen_timeout>

000da4f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da4f6:	2200      	movs	r2, #0
   da4f8:	6840      	ldr	r0, [r0, #4]
   da4fa:	4611      	mov	r1, r2
   da4fc:	f7fd bf46 	b.w	d838c <network_listening>

000da500 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da504:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   da506:	b095      	sub	sp, #84	; 0x54
   da508:	4616      	mov	r6, r2
   da50a:	460d      	mov	r5, r1
   da50c:	4607      	mov	r7, r0
    IPAddress addr;
   da50e:	f7fe fde3 	bl	d90d8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   da512:	4621      	mov	r1, r4
   da514:	2218      	movs	r2, #24
   da516:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   da518:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da51a:	f001 fd91 	bl	dc040 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da51e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   da520:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da524:	4621      	mov	r1, r4
   da526:	466b      	mov	r3, sp
   da528:	aa0c      	add	r2, sp, #48	; 0x30
   da52a:	4630      	mov	r0, r6
   da52c:	f7fd fd32 	bl	d7f94 <netdb_getaddrinfo>
    if (!r) {
   da530:	4604      	mov	r4, r0
   da532:	2800      	cmp	r0, #0
   da534:	d146      	bne.n	da5c4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da536:	4602      	mov	r2, r0
   da538:	2101      	movs	r1, #1
   da53a:	6868      	ldr	r0, [r5, #4]
   da53c:	f7fd ff06 	bl	d834c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da540:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da542:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da544:	4622      	mov	r2, r4
   da546:	6868      	ldr	r0, [r5, #4]
   da548:	f7fd ff00 	bl	d834c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da54c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da54e:	4681      	mov	r9, r0
        bool ok = false;
   da550:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da552:	2e00      	cmp	r6, #0
   da554:	d036      	beq.n	da5c4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   da556:	2900      	cmp	r1, #0
   da558:	d134      	bne.n	da5c4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da55a:	6873      	ldr	r3, [r6, #4]
   da55c:	2b02      	cmp	r3, #2
   da55e:	d003      	beq.n	da568 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   da560:	2b0a      	cmp	r3, #10
   da562:	d00b      	beq.n	da57c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da564:	69f6      	ldr	r6, [r6, #28]
   da566:	e7f4      	b.n	da552 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   da568:	f1b8 0f00 	cmp.w	r8, #0
   da56c:	d004      	beq.n	da578 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da56e:	6971      	ldr	r1, [r6, #20]
   da570:	4638      	mov	r0, r7
   da572:	3104      	adds	r1, #4
   da574:	f7fe fddd 	bl	d9132 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   da578:	4641      	mov	r1, r8
   da57a:	e7f3      	b.n	da564 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   da57c:	f1b9 0f00 	cmp.w	r9, #0
   da580:	d101      	bne.n	da586 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   da582:	4649      	mov	r1, r9
   da584:	e7ee      	b.n	da564 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da586:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da588:	2210      	movs	r2, #16
   da58a:	a801      	add	r0, sp, #4
   da58c:	f001 fd58 	bl	dc040 <memset>
                    a.v = 6;
   da590:	2306      	movs	r3, #6
   da592:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da596:	ad01      	add	r5, sp, #4
   da598:	f104 0308 	add.w	r3, r4, #8
   da59c:	3418      	adds	r4, #24
   da59e:	6818      	ldr	r0, [r3, #0]
   da5a0:	6859      	ldr	r1, [r3, #4]
   da5a2:	462a      	mov	r2, r5
   da5a4:	c203      	stmia	r2!, {r0, r1}
   da5a6:	3308      	adds	r3, #8
   da5a8:	42a3      	cmp	r3, r4
   da5aa:	4615      	mov	r5, r2
   da5ac:	d1f7      	bne.n	da59e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   da5ae:	a901      	add	r1, sp, #4
   da5b0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   da5b2:	ad07      	add	r5, sp, #28
   da5b4:	f7fe fd9e 	bl	d90f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da5b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da5ba:	1d3c      	adds	r4, r7, #4
   da5bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da5be:	682b      	ldr	r3, [r5, #0]
   da5c0:	7023      	strb	r3, [r4, #0]
   da5c2:	e7de      	b.n	da582 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da5c4:	9800      	ldr	r0, [sp, #0]
   da5c6:	f7fd fcdd 	bl	d7f84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da5ca:	4638      	mov	r0, r7
   da5cc:	b015      	add	sp, #84	; 0x54
   da5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da5d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da5d4:	4b02      	ldr	r3, [pc, #8]	; (da5e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da5d6:	4a03      	ldr	r2, [pc, #12]	; (da5e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da5d8:	601a      	str	r2, [r3, #0]
   da5da:	2200      	movs	r2, #0
   da5dc:	605a      	str	r2, [r3, #4]

} // spark
   da5de:	4770      	bx	lr
   da5e0:	2003e60c 	.word	0x2003e60c
   da5e4:	000dceac 	.word	0x000dceac

000da5e8 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   da5e8:	b508      	push	{r3, lr}
            return &Wire1;
   da5ea:	f000 ffe7 	bl	db5bc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   da5ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   da5f2:	f7fe bcdf 	b.w	d8fb4 <_ZN7TwoWire4lockEv>

000da5f6 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   da5f6:	b510      	push	{r4, lr}
   da5f8:	4604      	mov	r4, r0
    lock_(_lock)
   da5fa:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   da5fc:	b109      	cbz	r1, da602 <_ZN4PMICC1Eb+0xc>
        lock();
   da5fe:	f7ff fff3 	bl	da5e8 <_ZN4PMIC4lockEv.constprop.0>
}
   da602:	4620      	mov	r0, r4
   da604:	bd10      	pop	{r4, pc}

000da606 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   da606:	b508      	push	{r3, lr}
            return &Wire1;
   da608:	f000 ffd8 	bl	db5bc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   da60c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   da610:	f7fe bcd9 	b.w	d8fc6 <_ZN7TwoWire6unlockEv>

000da614 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   da614:	b510      	push	{r4, lr}
    if (lock_) {
   da616:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   da618:	4604      	mov	r4, r0
    if (lock_) {
   da61a:	b10b      	cbz	r3, da620 <_ZN4PMICD1Ev+0xc>
        unlock();
   da61c:	f7ff fff3 	bl	da606 <_ZN4PMIC6unlockEv>
}
   da620:	4620      	mov	r0, r4
   da622:	bd10      	pop	{r4, pc}

000da624 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   da624:	b510      	push	{r4, lr}
   da626:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   da628:	6800      	ldr	r0, [r0, #0]
   da62a:	f7ff ffec 	bl	da606 <_ZN4PMIC6unlockEv>
   da62e:	4620      	mov	r0, r4
   da630:	bd10      	pop	{r4, pc}

000da632 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   da632:	b530      	push	{r4, r5, lr}
   da634:	b087      	sub	sp, #28
   da636:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da638:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da63a:	f7ff ffd5 	bl	da5e8 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da63e:	236b      	movs	r3, #107	; 0x6b
   da640:	f88d 3008 	strb.w	r3, [sp, #8]
   da644:	2300      	movs	r3, #0
   da646:	2401      	movs	r4, #1
   da648:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   da64a:	230a      	movs	r3, #10
   da64c:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da64e:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   da652:	f000 ffb3 	bl	db5bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da656:	a902      	add	r1, sp, #8
   da658:	f7fe fc8d 	bl	d8f76 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da65c:	f000 ffae 	bl	db5bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   da660:	6803      	ldr	r3, [r0, #0]
   da662:	4629      	mov	r1, r5
   da664:	689b      	ldr	r3, [r3, #8]
   da666:	4798      	blx	r3
            return &Wire1;
   da668:	f000 ffa8 	bl	db5bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da66c:	4621      	mov	r1, r4
   da66e:	f7fe fc9a 	bl	d8fa6 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   da672:	9403      	str	r4, [sp, #12]
            return &Wire1;
   da674:	f000 ffa2 	bl	db5bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   da678:	a902      	add	r1, sp, #8
   da67a:	f7fe fc49 	bl	d8f10 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   da67e:	f000 ff9d 	bl	db5bc <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   da682:	6803      	ldr	r3, [r0, #0]
   da684:	695b      	ldr	r3, [r3, #20]
   da686:	4798      	blx	r3
   da688:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   da68a:	a801      	add	r0, sp, #4
   da68c:	f7ff ffca 	bl	da624 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da690:	b2e0      	uxtb	r0, r4
   da692:	b007      	add	sp, #28
   da694:	bd30      	pop	{r4, r5, pc}

000da696 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   da696:	b570      	push	{r4, r5, r6, lr}
   da698:	b086      	sub	sp, #24
   da69a:	4614      	mov	r4, r2
   da69c:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da69e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da6a0:	f7ff ffa2 	bl	da5e8 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da6a4:	236b      	movs	r3, #107	; 0x6b
   da6a6:	f88d 3008 	strb.w	r3, [sp, #8]
   da6aa:	2300      	movs	r3, #0
   da6ac:	9303      	str	r3, [sp, #12]
   da6ae:	2601      	movs	r6, #1
    timeout_ = ms;
   da6b0:	230a      	movs	r3, #10
   da6b2:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da6b4:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   da6b8:	f000 ff80 	bl	db5bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da6bc:	a902      	add	r1, sp, #8
   da6be:	f7fe fc5a 	bl	d8f76 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da6c2:	f000 ff7b 	bl	db5bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   da6c6:	6803      	ldr	r3, [r0, #0]
   da6c8:	4629      	mov	r1, r5
   da6ca:	689b      	ldr	r3, [r3, #8]
   da6cc:	4798      	blx	r3
            return &Wire1;
   da6ce:	f000 ff75 	bl	db5bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   da6d2:	6803      	ldr	r3, [r0, #0]
   da6d4:	4621      	mov	r1, r4
   da6d6:	689b      	ldr	r3, [r3, #8]
   da6d8:	4798      	blx	r3
            return &Wire1;
   da6da:	f000 ff6f 	bl	db5bc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da6de:	4631      	mov	r1, r6
   da6e0:	f7fe fc61 	bl	d8fa6 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   da6e4:	a801      	add	r0, sp, #4
   da6e6:	f7ff ff9d 	bl	da624 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da6ea:	b006      	add	sp, #24
   da6ec:	bd70      	pop	{r4, r5, r6, pc}

000da6ee <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   da6ee:	b513      	push	{r0, r1, r4, lr}
   da6f0:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da6f2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da6f4:	f7ff ff78 	bl	da5e8 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da6f8:	2101      	movs	r1, #1
   da6fa:	4620      	mov	r0, r4
   da6fc:	f7ff ff99 	bl	da632 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   da700:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   da704:	f040 0210 	orr.w	r2, r0, #16
   da708:	2101      	movs	r1, #1
   da70a:	4620      	mov	r0, r4
   da70c:	f7ff ffc3 	bl	da696 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da710:	a801      	add	r0, sp, #4
   da712:	f7ff ff87 	bl	da624 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da716:	2001      	movs	r0, #1
   da718:	b002      	add	sp, #8
   da71a:	bd10      	pop	{r4, pc}

000da71c <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   da71c:	b513      	push	{r0, r1, r4, lr}
   da71e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da720:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da722:	f7ff ff61 	bl	da5e8 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da726:	2101      	movs	r1, #1
   da728:	4620      	mov	r0, r4
   da72a:	f7ff ff82 	bl	da632 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   da72e:	2101      	movs	r1, #1
   da730:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   da734:	4620      	mov	r0, r4
   da736:	f7ff ffae 	bl	da696 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da73a:	a801      	add	r0, sp, #4
   da73c:	f7ff ff72 	bl	da624 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da740:	2001      	movs	r0, #1
   da742:	b002      	add	sp, #8
   da744:	bd10      	pop	{r4, pc}

000da746 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da748:	4606      	mov	r6, r0
   da74a:	460d      	mov	r5, r1
  size_t n = 0;
   da74c:	188f      	adds	r7, r1, r2
   da74e:	2400      	movs	r4, #0
  while (size--) {
   da750:	42bd      	cmp	r5, r7
   da752:	d00c      	beq.n	da76e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da754:	6833      	ldr	r3, [r6, #0]
   da756:	f815 1b01 	ldrb.w	r1, [r5], #1
   da75a:	689b      	ldr	r3, [r3, #8]
   da75c:	4630      	mov	r0, r6
   da75e:	4798      	blx	r3
     if (chunk>=0)
   da760:	1e03      	subs	r3, r0, #0
   da762:	db01      	blt.n	da768 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da764:	441c      	add	r4, r3
  while (size--) {
   da766:	e7f3      	b.n	da750 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da768:	2c00      	cmp	r4, #0
   da76a:	bf08      	it	eq
   da76c:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   da76e:	4620      	mov	r0, r4
   da770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da772 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   da772:	b513      	push	{r0, r1, r4, lr}
   da774:	4604      	mov	r4, r0
    }
   da776:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   da778:	b159      	cbz	r1, da792 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   da77a:	9101      	str	r1, [sp, #4]
   da77c:	f001 fcd3 	bl	dc126 <strlen>
   da780:	6823      	ldr	r3, [r4, #0]
   da782:	9901      	ldr	r1, [sp, #4]
   da784:	68db      	ldr	r3, [r3, #12]
   da786:	4602      	mov	r2, r0
   da788:	4620      	mov	r0, r4
    }
   da78a:	b002      	add	sp, #8
   da78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   da790:	4718      	bx	r3
    }
   da792:	b002      	add	sp, #8
   da794:	bd10      	pop	{r4, pc}

000da796 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da796:	6803      	ldr	r3, [r0, #0]
   da798:	689b      	ldr	r3, [r3, #8]
   da79a:	4718      	bx	r3

000da79c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da79c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da79e:	210d      	movs	r1, #13
{
   da7a0:	4605      	mov	r5, r0
  size_t n = print('\r');
   da7a2:	f7ff fff8 	bl	da796 <_ZN5Print5printEc>
  n += print('\n');
   da7a6:	210a      	movs	r1, #10
  size_t n = print('\r');
   da7a8:	4604      	mov	r4, r0
  n += print('\n');
   da7aa:	4628      	mov	r0, r5
   da7ac:	f7ff fff3 	bl	da796 <_ZN5Print5printEc>
  return n;
}
   da7b0:	4420      	add	r0, r4
   da7b2:	bd38      	pop	{r3, r4, r5, pc}

000da7b4 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da7b4:	b530      	push	{r4, r5, lr}
   da7b6:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da7b8:	2300      	movs	r3, #0
   da7ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da7be:	2a01      	cmp	r2, #1
   da7c0:	bf98      	it	ls
   da7c2:	220a      	movls	r2, #10
   da7c4:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   da7c6:	460d      	mov	r5, r1
   da7c8:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   da7cc:	fb01 5312 	mls	r3, r1, r2, r5
   da7d0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da7d4:	2b09      	cmp	r3, #9
   da7d6:	bf94      	ite	ls
   da7d8:	3330      	addls	r3, #48	; 0x30
   da7da:	3337      	addhi	r3, #55	; 0x37
   da7dc:	b2db      	uxtb	r3, r3
  } while(n);
   da7de:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da7e0:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   da7e4:	d9ef      	bls.n	da7c6 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   da7e6:	4621      	mov	r1, r4
   da7e8:	f7ff ffc3 	bl	da772 <_ZN5Print5writeEPKc>
}
   da7ec:	b00b      	add	sp, #44	; 0x2c
   da7ee:	bd30      	pop	{r4, r5, pc}

000da7f0 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   da7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da7f4:	b086      	sub	sp, #24
   da7f6:	af00      	add	r7, sp, #0
   da7f8:	4605      	mov	r5, r0
   da7fa:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   da7fc:	1d38      	adds	r0, r7, #4
   da7fe:	2114      	movs	r1, #20
{
   da800:	4614      	mov	r4, r2
    va_copy(args2, args);
   da802:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   da804:	f7fd fe12 	bl	d842c <vsnprintf>

    if (n<bufsize)
   da808:	2813      	cmp	r0, #19
   da80a:	d80e      	bhi.n	da82a <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   da80c:	1d39      	adds	r1, r7, #4
   da80e:	4628      	mov	r0, r5
   da810:	f7ff ffaf 	bl	da772 <_ZN5Print5writeEPKc>
   da814:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   da816:	b11e      	cbz	r6, da820 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   da818:	4628      	mov	r0, r5
   da81a:	f7ff ffbf 	bl	da79c <_ZN5Print7printlnEv>
   da81e:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   da820:	4620      	mov	r0, r4
   da822:	3718      	adds	r7, #24
   da824:	46bd      	mov	sp, r7
   da826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   da82a:	f100 0308 	add.w	r3, r0, #8
   da82e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   da832:	46e8      	mov	r8, sp
        char bigger[n+1];
   da834:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   da838:	4622      	mov	r2, r4
   da83a:	1c41      	adds	r1, r0, #1
   da83c:	683b      	ldr	r3, [r7, #0]
   da83e:	4668      	mov	r0, sp
   da840:	f7fd fdf4 	bl	d842c <vsnprintf>
  return write(str);
   da844:	4669      	mov	r1, sp
   da846:	4628      	mov	r0, r5
   da848:	f7ff ff93 	bl	da772 <_ZN5Print5writeEPKc>
   da84c:	4604      	mov	r4, r0
   da84e:	46c5      	mov	sp, r8
   da850:	e7e1      	b.n	da816 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000da852 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da852:	b510      	push	{r4, lr}
   da854:	4604      	mov	r4, r0
   da856:	f7f9 fdab 	bl	d43b0 <_ZNSt14_Function_baseD1Ev>
   da85a:	4620      	mov	r0, r4
   da85c:	bd10      	pop	{r4, pc}
	...

000da860 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   da860:	4803      	ldr	r0, [pc, #12]	; (da870 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da862:	4a04      	ldr	r2, [pc, #16]	; (da874 <_GLOBAL__sub_I_RGB+0x14>)
   da864:	4904      	ldr	r1, [pc, #16]	; (da878 <_GLOBAL__sub_I_RGB+0x18>)
   da866:	2300      	movs	r3, #0
   da868:	6083      	str	r3, [r0, #8]
   da86a:	f000 becf 	b.w	db60c <__aeabi_atexit>
   da86e:	bf00      	nop
   da870:	2003e614 	.word	0x2003e614
   da874:	2003e320 	.word	0x2003e320
   da878:	000da853 	.word	0x000da853

000da87c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   da87c:	b510      	push	{r4, lr}
   da87e:	4604      	mov	r4, r0
   da880:	4608      	mov	r0, r1
{
    _spi = spi;
   da882:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   da884:	f7fd fb8e 	bl	d7fa4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   da888:	2300      	movs	r3, #0
   da88a:	6063      	str	r3, [r4, #4]
}
   da88c:	4620      	mov	r0, r4
   da88e:	bd10      	pop	{r4, pc}

000da890 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   da890:	b510      	push	{r4, lr}
   da892:	4604      	mov	r4, r0
{
	free(buffer);
   da894:	6800      	ldr	r0, [r0, #0]
   da896:	f7fd fda9 	bl	d83ec <free>
}
   da89a:	4620      	mov	r0, r4
   da89c:	bd10      	pop	{r4, pc}

000da89e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   da89e:	b510      	push	{r4, lr}
   da8a0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   da8a2:	6800      	ldr	r0, [r0, #0]
   da8a4:	b108      	cbz	r0, da8aa <_ZN6String10invalidateEv+0xc>
   da8a6:	f7fd fda1 	bl	d83ec <free>
	buffer = NULL;
   da8aa:	2300      	movs	r3, #0
	capacity = len = 0;
   da8ac:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   da8b0:	6023      	str	r3, [r4, #0]
}
   da8b2:	bd10      	pop	{r4, pc}

000da8b4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   da8b4:	b538      	push	{r3, r4, r5, lr}
   da8b6:	4604      	mov	r4, r0
   da8b8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   da8ba:	6800      	ldr	r0, [r0, #0]
   da8bc:	3101      	adds	r1, #1
   da8be:	f7fd fd9d 	bl	d83fc <realloc>
	if (newbuffer) {
   da8c2:	b110      	cbz	r0, da8ca <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   da8c4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   da8c8:	2001      	movs	r0, #1
	}
	return 0;
}
   da8ca:	bd38      	pop	{r3, r4, r5, pc}

000da8cc <_ZN6String7reserveEj>:
{
   da8cc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da8ce:	6803      	ldr	r3, [r0, #0]
{
   da8d0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da8d2:	b123      	cbz	r3, da8de <_ZN6String7reserveEj+0x12>
   da8d4:	6843      	ldr	r3, [r0, #4]
   da8d6:	428b      	cmp	r3, r1
   da8d8:	d301      	bcc.n	da8de <_ZN6String7reserveEj+0x12>
   da8da:	2001      	movs	r0, #1
}
   da8dc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   da8de:	4620      	mov	r0, r4
   da8e0:	f7ff ffe8 	bl	da8b4 <_ZN6String12changeBufferEj>
   da8e4:	2800      	cmp	r0, #0
   da8e6:	d0f9      	beq.n	da8dc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   da8e8:	68a3      	ldr	r3, [r4, #8]
   da8ea:	2b00      	cmp	r3, #0
   da8ec:	d1f5      	bne.n	da8da <_ZN6String7reserveEj+0xe>
   da8ee:	6822      	ldr	r2, [r4, #0]
   da8f0:	7013      	strb	r3, [r2, #0]
   da8f2:	e7f2      	b.n	da8da <_ZN6String7reserveEj+0xe>

000da8f4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da8f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da8f6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   da8f8:	4611      	mov	r1, r2
   da8fa:	9201      	str	r2, [sp, #4]
{
   da8fc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   da8fe:	f7ff ffe5 	bl	da8cc <_ZN6String7reserveEj>
   da902:	9a01      	ldr	r2, [sp, #4]
   da904:	b928      	cbnz	r0, da912 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   da906:	4620      	mov	r0, r4
   da908:	f7ff ffc9 	bl	da89e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   da90c:	4620      	mov	r0, r4
   da90e:	b003      	add	sp, #12
   da910:	bd30      	pop	{r4, r5, pc}
	len = length;
   da912:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   da914:	4629      	mov	r1, r5
   da916:	6820      	ldr	r0, [r4, #0]
   da918:	f001 fb6a 	bl	dbff0 <memcpy>
	buffer[len] = 0;
   da91c:	6822      	ldr	r2, [r4, #0]
   da91e:	68a3      	ldr	r3, [r4, #8]
   da920:	2100      	movs	r1, #0
   da922:	54d1      	strb	r1, [r2, r3]
	return *this;
   da924:	e7f2      	b.n	da90c <_ZN6String4copyEPKcj+0x18>

000da926 <_ZN6StringC1EPKc>:
	buffer = NULL;
   da926:	2300      	movs	r3, #0
String::String(const char *cstr)
   da928:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   da92a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   da92e:	4604      	mov	r4, r0
	len = 0;
   da930:	6083      	str	r3, [r0, #8]
	flags = 0;
   da932:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   da934:	b141      	cbz	r1, da948 <_ZN6StringC1EPKc+0x22>
   da936:	4608      	mov	r0, r1
   da938:	9101      	str	r1, [sp, #4]
   da93a:	f001 fbf4 	bl	dc126 <strlen>
   da93e:	9901      	ldr	r1, [sp, #4]
   da940:	4602      	mov	r2, r0
   da942:	4620      	mov	r0, r4
   da944:	f7ff ffd6 	bl	da8f4 <_ZN6String4copyEPKcj>
}
   da948:	4620      	mov	r0, r4
   da94a:	b002      	add	sp, #8
   da94c:	bd10      	pop	{r4, pc}

000da94e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da94e:	b538      	push	{r3, r4, r5, lr}
   da950:	4605      	mov	r5, r0
	if (buffer) {
   da952:	6800      	ldr	r0, [r0, #0]
{
   da954:	460c      	mov	r4, r1
	if (buffer) {
   da956:	b168      	cbz	r0, da974 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   da958:	686a      	ldr	r2, [r5, #4]
   da95a:	688b      	ldr	r3, [r1, #8]
   da95c:	429a      	cmp	r2, r3
   da95e:	d307      	bcc.n	da970 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   da960:	6809      	ldr	r1, [r1, #0]
   da962:	f001 fbba 	bl	dc0da <strcpy>
			len = rhs.len;
   da966:	68a3      	ldr	r3, [r4, #8]
   da968:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   da96a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   da96c:	60a3      	str	r3, [r4, #8]
}
   da96e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   da970:	f7fd fd3c 	bl	d83ec <free>
	buffer = rhs.buffer;
   da974:	6823      	ldr	r3, [r4, #0]
   da976:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   da978:	6863      	ldr	r3, [r4, #4]
   da97a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   da97c:	68a3      	ldr	r3, [r4, #8]
   da97e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   da980:	2300      	movs	r3, #0
	rhs.capacity = 0;
   da982:	e9c4 3300 	strd	r3, r3, [r4]
   da986:	e7f1      	b.n	da96c <_ZN6String4moveERS_+0x1e>

000da988 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   da988:	b510      	push	{r4, lr}
	buffer = NULL;
   da98a:	2300      	movs	r3, #0
	capacity = 0;
   da98c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   da990:	4604      	mov	r4, r0
	len = 0;
   da992:	6083      	str	r3, [r0, #8]
	flags = 0;
   da994:	7303      	strb	r3, [r0, #12]
	move(rval);
   da996:	f7ff ffda 	bl	da94e <_ZN6String4moveERS_>
}
   da99a:	4620      	mov	r0, r4
   da99c:	bd10      	pop	{r4, pc}

000da99e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da99e:	4288      	cmp	r0, r1
{
   da9a0:	b510      	push	{r4, lr}
   da9a2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da9a4:	d005      	beq.n	da9b2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da9a6:	680b      	ldr	r3, [r1, #0]
   da9a8:	b12b      	cbz	r3, da9b6 <_ZN6StringaSERKS_+0x18>
   da9aa:	688a      	ldr	r2, [r1, #8]
   da9ac:	4619      	mov	r1, r3
   da9ae:	f7ff ffa1 	bl	da8f4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da9b2:	4620      	mov	r0, r4
   da9b4:	bd10      	pop	{r4, pc}
	else invalidate();
   da9b6:	f7ff ff72 	bl	da89e <_ZN6String10invalidateEv>
   da9ba:	e7fa      	b.n	da9b2 <_ZN6StringaSERKS_+0x14>

000da9bc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   da9bc:	b510      	push	{r4, lr}
	buffer = NULL;
   da9be:	2300      	movs	r3, #0
String::String(const String &value)
   da9c0:	4604      	mov	r4, r0
	capacity = 0;
   da9c2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   da9c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   da9c8:	7303      	strb	r3, [r0, #12]
	*this = value;
   da9ca:	f7ff ffe8 	bl	da99e <_ZN6StringaSERKS_>
}
   da9ce:	4620      	mov	r0, r4
   da9d0:	bd10      	pop	{r4, pc}

000da9d2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da9d2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da9d4:	6882      	ldr	r2, [r0, #8]
   da9d6:	b93a      	cbnz	r2, da9e8 <_ZNK6String6equalsEPKc+0x16>
   da9d8:	b121      	cbz	r1, da9e4 <_ZNK6String6equalsEPKc+0x12>
   da9da:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   da9dc:	fab0 f080 	clz	r0, r0
   da9e0:	0940      	lsrs	r0, r0, #5
   da9e2:	e000      	b.n	da9e6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da9e4:	2001      	movs	r0, #1
}
   da9e6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   da9e8:	6800      	ldr	r0, [r0, #0]
   da9ea:	b909      	cbnz	r1, da9f0 <_ZNK6String6equalsEPKc+0x1e>
   da9ec:	7800      	ldrb	r0, [r0, #0]
   da9ee:	e7f5      	b.n	da9dc <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   da9f0:	f001 fb69 	bl	dc0c6 <strcmp>
   da9f4:	e7f2      	b.n	da9dc <_ZNK6String6equalsEPKc+0xa>

000da9f6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   da9f6:	b558      	push	{r3, r4, r6, lr}
   da9f8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   da9fa:	b12a      	cbz	r2, daa08 <_ZNK6String8getBytesEPhjj+0x12>
   da9fc:	b121      	cbz	r1, daa08 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   da9fe:	6884      	ldr	r4, [r0, #8]
   daa00:	42a3      	cmp	r3, r4
   daa02:	d302      	bcc.n	daa0a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   daa04:	2300      	movs	r3, #0
   daa06:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   daa08:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   daa0a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   daa0c:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   daa0e:	6801      	ldr	r1, [r0, #0]
   daa10:	4294      	cmp	r4, r2
   daa12:	bf28      	it	cs
   daa14:	4614      	movcs	r4, r2
   daa16:	4419      	add	r1, r3
   daa18:	4622      	mov	r2, r4
   daa1a:	4630      	mov	r0, r6
   daa1c:	f001 fb9d 	bl	dc15a <strncpy>
	buf[n] = 0;
   daa20:	2300      	movs	r3, #0
   daa22:	5533      	strb	r3, [r6, r4]
   daa24:	e7f0      	b.n	daa08 <_ZNK6String8getBytesEPhjj+0x12>
	...

000daa28 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   daa28:	b40e      	push	{r1, r2, r3}
   daa2a:	b570      	push	{r4, r5, r6, lr}
   daa2c:	b087      	sub	sp, #28
   daa2e:	ad0b      	add	r5, sp, #44	; 0x2c
   daa30:	4604      	mov	r4, r0
   daa32:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   daa36:	9201      	str	r2, [sp, #4]
   daa38:	462b      	mov	r3, r5
   daa3a:	2105      	movs	r1, #5
   daa3c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   daa3e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   daa40:	f7fd fcf4 	bl	d842c <vsnprintf>
    va_end(marker);

    String result;
   daa44:	490b      	ldr	r1, [pc, #44]	; (daa74 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   daa46:	4606      	mov	r6, r0
    String result;
   daa48:	4620      	mov	r0, r4
   daa4a:	f7ff ff6c 	bl	da926 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   daa4e:	4631      	mov	r1, r6
   daa50:	4620      	mov	r0, r4
   daa52:	f7ff ff3b 	bl	da8cc <_ZN6String7reserveEj>
    if (result.buffer) {
   daa56:	6820      	ldr	r0, [r4, #0]
   daa58:	b130      	cbz	r0, daa68 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   daa5a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   daa5c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   daa5e:	462b      	mov	r3, r5
   daa60:	1c71      	adds	r1, r6, #1
   daa62:	f7fd fce3 	bl	d842c <vsnprintf>
        va_end(marker);
        result.len = n;
   daa66:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   daa68:	4620      	mov	r0, r4
   daa6a:	b007      	add	sp, #28
   daa6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   daa70:	b003      	add	sp, #12
   daa72:	4770      	bx	lr
   daa74:	000dce15 	.word	0x000dce15

000daa78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   daa78:	b510      	push	{r4, lr}
   daa7a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   daa7c:	6800      	ldr	r0, [r0, #0]
   daa7e:	b118      	cbz	r0, daa88 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   daa80:	f7fd fcb4 	bl	d83ec <free>
            wakeupSource_ = nullptr;
   daa84:	2300      	movs	r3, #0
   daa86:	6023      	str	r3, [r4, #0]
        }
    }
   daa88:	bd10      	pop	{r4, pc}

000daa8a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   daa8a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   daa8c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   daa90:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   daa92:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   daa94:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   daa96:	f853 2f06 	ldr.w	r2, [r3, #6]!
   daa9a:	f8c0 2006 	str.w	r2, [r0, #6]
   daa9e:	889b      	ldrh	r3, [r3, #4]
   daaa0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   daaa2:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   daaa4:	f7ff ffe8 	bl	daa78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   daaa8:	682b      	ldr	r3, [r5, #0]
   daaaa:	b113      	cbz	r3, daab2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   daaac:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   daaae:	2300      	movs	r3, #0
   daab0:	602b      	str	r3, [r5, #0]
    }
   daab2:	4620      	mov	r0, r4
   daab4:	bd38      	pop	{r3, r4, r5, pc}
	...

000daab8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   daab8:	b538      	push	{r3, r4, r5, lr}
   daaba:	460c      	mov	r4, r1
   daabc:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   daabe:	f7ff ffdb 	bl	daa78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   daac2:	b144      	cbz	r4, daad6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   daac4:	8820      	ldrh	r0, [r4, #0]
   daac6:	f7fd fc89 	bl	d83dc <malloc>
   daaca:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   daacc:	b128      	cbz	r0, daada <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   daace:	8822      	ldrh	r2, [r4, #0]
   daad0:	4621      	mov	r1, r4
   daad2:	f001 fa8d 	bl	dbff0 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   daad6:	2000      	movs	r0, #0
    }
   daad8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   daada:	4801      	ldr	r0, [pc, #4]	; (daae0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   daadc:	e7fc      	b.n	daad8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   daade:	bf00      	nop
   daae0:	fffffefc 	.word	0xfffffefc

000daae4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   daae4:	b507      	push	{r0, r1, r2, lr}
   daae6:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   daae8:	2100      	movs	r1, #0
{
   daaea:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   daaec:	9100      	str	r1, [sp, #0]
   daaee:	2001      	movs	r0, #1
   daaf0:	218c      	movs	r1, #140	; 0x8c
   daaf2:	f7fd fb99 	bl	d8228 <system_reset>
}
   daaf6:	b003      	add	sp, #12
   daaf8:	f85d fb04 	ldr.w	pc, [sp], #4

000daafc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   daafc:	4601      	mov	r1, r0
    reset(0, flags);
   daafe:	2000      	movs	r0, #0
   dab00:	f7ff bff0 	b.w	daae4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000dab04 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   dab04:	2000      	movs	r0, #0
   dab06:	f7ff bff9 	b.w	daafc <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000dab0c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   dab0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dab0e:	4d2d      	ldr	r5, [pc, #180]	; (dabc4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   dab10:	7d0b      	ldrb	r3, [r1, #20]
   dab12:	4604      	mov	r4, r0
   dab14:	b08b      	sub	sp, #44	; 0x2c
   dab16:	4608      	mov	r0, r1
   dab18:	1daf      	adds	r7, r5, #6
   dab1a:	2b00      	cmp	r3, #0
   dab1c:	d038      	beq.n	dab90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   dab1e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   dab20:	791b      	ldrb	r3, [r3, #4]
   dab22:	2b00      	cmp	r3, #0
   dab24:	d034      	beq.n	dab90 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   dab26:	2200      	movs	r2, #0
    SleepResult() {}
   dab28:	4b27      	ldr	r3, [pc, #156]	; (dabc8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dab2a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   dab2c:	a902      	add	r1, sp, #8
   dab2e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   dab30:	9202      	str	r2, [sp, #8]
   dab32:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   dab36:	f88d 200e 	strb.w	r2, [sp, #14]
   dab3a:	f7fd fb6b 	bl	d8214 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   dab3e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   dab42:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   dab46:	b200      	sxth	r0, r0
   dab48:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   dab4c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   dab50:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   dab52:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dab54:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dab56:	4628      	mov	r0, r5
   dab58:	f7ff ffae 	bl	daab8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dab5c:	a802      	add	r0, sp, #8
   dab5e:	f7ff ff8b 	bl	daa78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dab62:	2300      	movs	r3, #0
   dab64:	6023      	str	r3, [r4, #0]
   dab66:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dab68:	71a3      	strb	r3, [r4, #6]
   dab6a:	8123      	strh	r3, [r4, #8]
   dab6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dab70:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dab72:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dab76:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dab78:	683b      	ldr	r3, [r7, #0]
   dab7a:	f8c4 3006 	str.w	r3, [r4, #6]
   dab7e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dab80:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dab82:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dab84:	4620      	mov	r0, r4
   dab86:	f7ff ff97 	bl	daab8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dab8a:	4620      	mov	r0, r4
   dab8c:	b00b      	add	sp, #44	; 0x2c
   dab8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dab90:	2600      	movs	r6, #0
   dab92:	2320      	movs	r3, #32
   dab94:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dab98:	4b0c      	ldr	r3, [pc, #48]	; (dabcc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dab9a:	9300      	str	r3, [sp, #0]
   dab9c:	490c      	ldr	r1, [pc, #48]	; (dabd0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dab9e:	4633      	mov	r3, r6
   daba0:	aa02      	add	r2, sp, #8
   daba2:	2032      	movs	r0, #50	; 0x32
   daba4:	f7fd faa6 	bl	d80f4 <log_message>
    SleepResult() {}
   daba8:	4b07      	ldr	r3, [pc, #28]	; (dabc8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dabaa:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dabac:	a902      	add	r1, sp, #8
        error_ = error;
   dabae:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dabb2:	4804      	ldr	r0, [pc, #16]	; (dabc4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dabb4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dabb6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dabba:	f8ad 300c 	strh.w	r3, [sp, #12]
   dabbe:	f7ff ff64 	bl	daa8a <_ZN17SystemSleepResultaSEOS_>
   dabc2:	e7cb      	b.n	dab5c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dabc4:	2003e624 	.word	0x2003e624
   dabc8:	ffff0000 	.word	0xffff0000
   dabcc:	000dcee7 	.word	0x000dcee7
   dabd0:	000dcee0 	.word	0x000dcee0

000dabd4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   dabd4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dabd6:	4b09      	ldr	r3, [pc, #36]	; (dabfc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   dabd8:	4c09      	ldr	r4, [pc, #36]	; (dac00 <_GLOBAL__sub_I_System+0x2c>)
   dabda:	2202      	movs	r2, #2
   dabdc:	2000      	movs	r0, #0
   dabde:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   dabe0:	4b08      	ldr	r3, [pc, #32]	; (dac04 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   dabe2:	6020      	str	r0, [r4, #0]
   dabe4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   dabe6:	71a0      	strb	r0, [r4, #6]
   dabe8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dabea:	f7fd fab5 	bl	d8158 <set_system_mode>
SystemClass System;
   dabee:	4620      	mov	r0, r4
   dabf0:	4a05      	ldr	r2, [pc, #20]	; (dac08 <_GLOBAL__sub_I_System+0x34>)
   dabf2:	4906      	ldr	r1, [pc, #24]	; (dac0c <_GLOBAL__sub_I_System+0x38>)
   dabf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   dabf8:	f000 bd08 	b.w	db60c <__aeabi_atexit>
   dabfc:	2003e630 	.word	0x2003e630
   dac00:	2003e624 	.word	0x2003e624
   dac04:	ffff0000 	.word	0xffff0000
   dac08:	2003e320 	.word	0x2003e320
   dac0c:	000d42f7 	.word	0x000d42f7

000dac10 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   dac14:	4a15      	ldr	r2, [pc, #84]	; (dac6c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dac16:	f8df 8060 	ldr.w	r8, [pc, #96]	; dac78 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   dac1a:	e9d2 3200 	ldrd	r3, r2, [r2]
   dac1e:	18c0      	adds	r0, r0, r3
   dac20:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   dac24:	4a12      	ldr	r2, [pc, #72]	; (dac70 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   dac26:	e9d2 3200 	ldrd	r3, r2, [r2]
   dac2a:	18c6      	adds	r6, r0, r3
   dac2c:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   dac30:	e9d8 2300 	ldrd	r2, r3, [r8]
   dac34:	42bb      	cmp	r3, r7
   dac36:	bf08      	it	eq
   dac38:	42b2      	cmpeq	r2, r6
{
   dac3a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   dac3c:	d013      	beq.n	dac66 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   dac3e:	a903      	add	r1, sp, #12
   dac40:	4668      	mov	r0, sp
   dac42:	e9cd 6700 	strd	r6, r7, [sp]
   dac46:	f7fd fc19 	bl	d847c <localtime_r>
	calendar_time.tm_year += 1900;
   dac4a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dac4c:	4d09      	ldr	r5, [pc, #36]	; (dac74 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   dac4e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dac52:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   dac54:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dac56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dac58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dac5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dac5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dac5e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dac62:	6823      	ldr	r3, [r4, #0]
   dac64:	602b      	str	r3, [r5, #0]
    }
}
   dac66:	b00c      	add	sp, #48	; 0x30
   dac68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dac6c:	2003e668 	.word	0x2003e668
   dac70:	2003e660 	.word	0x2003e660
   dac74:	2003e63c 	.word	0x2003e63c
   dac78:	2003e670 	.word	0x2003e670

000dac7c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dac7c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dac7e:	2000      	movs	r0, #0
   dac80:	f7fd fb24 	bl	d82cc <spark_sync_time_pending>
   dac84:	b128      	cbz	r0, dac92 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dac86:	f7fd faf9 	bl	d827c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dac8a:	f080 0001 	eor.w	r0, r0, #1
   dac8e:	b2c0      	uxtb	r0, r0
    }
   dac90:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dac92:	2001      	movs	r0, #1
   dac94:	e7fc      	b.n	dac90 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000dac98 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   dac98:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dac9a:	f7ff ffb9 	bl	dac10 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   dac9e:	4b01      	ldr	r3, [pc, #4]	; (daca4 <_ZN9TimeClass4hourEx+0xc>)
   daca0:	6898      	ldr	r0, [r3, #8]
   daca2:	bd08      	pop	{r3, pc}
   daca4:	2003e63c 	.word	0x2003e63c

000daca8 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   daca8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dacaa:	f7ff ffb1 	bl	dac10 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   dacae:	4b01      	ldr	r3, [pc, #4]	; (dacb4 <_ZN9TimeClass3dayEx+0xc>)
   dacb0:	68d8      	ldr	r0, [r3, #12]
   dacb2:	bd08      	pop	{r3, pc}
   dacb4:	2003e63c 	.word	0x2003e63c

000dacb8 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   dacb8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dacba:	f7ff ffa9 	bl	dac10 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   dacbe:	4b02      	ldr	r3, [pc, #8]	; (dacc8 <_ZN9TimeClass7weekdayEx+0x10>)
   dacc0:	6998      	ldr	r0, [r3, #24]
}
   dacc2:	3001      	adds	r0, #1
   dacc4:	bd08      	pop	{r3, pc}
   dacc6:	bf00      	nop
   dacc8:	2003e63c 	.word	0x2003e63c

000daccc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   daccc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dacce:	f7ff ff9f 	bl	dac10 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dacd2:	4b02      	ldr	r3, [pc, #8]	; (dacdc <_ZN9TimeClass5monthEx+0x10>)
   dacd4:	6918      	ldr	r0, [r3, #16]
}
   dacd6:	3001      	adds	r0, #1
   dacd8:	bd08      	pop	{r3, pc}
   dacda:	bf00      	nop
   dacdc:	2003e63c 	.word	0x2003e63c

000dace0 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dace0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   dace4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dace8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dacec:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dacee:	d411      	bmi.n	dad14 <_ZN9TimeClass4zoneEf+0x34>
   dacf0:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   dacf4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dacf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dacfc:	dc0a      	bgt.n	dad14 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   dacfe:	eddf 7a06 	vldr	s15, [pc, #24]	; dad18 <_ZN9TimeClass4zoneEf+0x38>
   dad02:	ee60 7a27 	vmul.f32	s15, s0, s15
   dad06:	ee17 0a90 	vmov	r0, s15
   dad0a:	f001 f8f3 	bl	dbef4 <__aeabi_f2lz>
   dad0e:	4b03      	ldr	r3, [pc, #12]	; (dad1c <_ZN9TimeClass4zoneEf+0x3c>)
   dad10:	e9c3 0100 	strd	r0, r1, [r3]
}
   dad14:	bd08      	pop	{r3, pc}
   dad16:	bf00      	nop
   dad18:	45610000 	.word	0x45610000
   dad1c:	2003e668 	.word	0x2003e668

000dad20 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   dad20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   dad24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dad28:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   dad2a:	d411      	bmi.n	dad50 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   dad2c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dad30:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dad34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dad38:	dc0a      	bgt.n	dad50 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   dad3a:	eddf 7a06 	vldr	s15, [pc, #24]	; dad54 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   dad3e:	ee60 7a27 	vmul.f32	s15, s0, s15
   dad42:	ee17 0a90 	vmov	r0, s15
   dad46:	f001 f8d5 	bl	dbef4 <__aeabi_f2lz>
   dad4a:	4b03      	ldr	r3, [pc, #12]	; (dad58 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   dad4c:	e9c3 0100 	strd	r0, r1, [r3]
}
   dad50:	bd08      	pop	{r3, pc}
   dad52:	bf00      	nop
   dad54:	45610000 	.word	0x45610000
   dad58:	2003e2b0 	.word	0x2003e2b0

000dad5c <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   dad5c:	4b03      	ldr	r3, [pc, #12]	; (dad6c <_ZN9TimeClass8beginDSTEv+0x10>)
   dad5e:	e9d3 0100 	ldrd	r0, r1, [r3]
   dad62:	4b03      	ldr	r3, [pc, #12]	; (dad70 <_ZN9TimeClass8beginDSTEv+0x14>)
   dad64:	e9c3 0100 	strd	r0, r1, [r3]
}
   dad68:	4770      	bx	lr
   dad6a:	bf00      	nop
   dad6c:	2003e2b0 	.word	0x2003e2b0
   dad70:	2003e660 	.word	0x2003e660

000dad74 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   dad74:	4b02      	ldr	r3, [pc, #8]	; (dad80 <_ZN9TimeClass6endDSTEv+0xc>)
   dad76:	2000      	movs	r0, #0
   dad78:	2100      	movs	r1, #0
   dad7a:	e9c3 0100 	strd	r0, r1, [r3]
}
   dad7e:	4770      	bx	lr
   dad80:	2003e660 	.word	0x2003e660

000dad84 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dad84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dad86:	4602      	mov	r2, r0
   dad88:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dad8a:	4668      	mov	r0, sp
    struct timeval tv = {
   dad8c:	2100      	movs	r1, #0
    };
   dad8e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dad92:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dad96:	f7fd f835 	bl	d7e04 <hal_rtc_set_time>
   dad9a:	4602      	mov	r2, r0
   dad9c:	b910      	cbnz	r0, dada4 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dad9e:	4601      	mov	r1, r0
   dada0:	f7fd fa12 	bl	d81c8 <system_notify_time_changed>
    }
}
   dada4:	b005      	add	sp, #20
   dada6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dadac <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dadac:	b530      	push	{r4, r5, lr}
   dadae:	4604      	mov	r4, r0
    t += time_zone_cache;
   dadb0:	4818      	ldr	r0, [pc, #96]	; (dae14 <_ZN9TimeClass7timeStrEx+0x68>)
   dadb2:	e9d0 1000 	ldrd	r1, r0, [r0]
   dadb6:	1852      	adds	r2, r2, r1
   dadb8:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dadbc:	4816      	ldr	r0, [pc, #88]	; (dae18 <_ZN9TimeClass7timeStrEx+0x6c>)
   dadbe:	e9d0 1000 	ldrd	r1, r0, [r0]
   dadc2:	1852      	adds	r2, r2, r1
{
   dadc4:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dadc6:	eb40 0303 	adc.w	r3, r0, r3
   dadca:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dadce:	2224      	movs	r2, #36	; 0x24
   dadd0:	eb0d 0002 	add.w	r0, sp, r2
   dadd4:	2100      	movs	r1, #0
   dadd6:	f001 f933 	bl	dc040 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dadda:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   daddc:	a909      	add	r1, sp, #36	; 0x24
   dadde:	4668      	mov	r0, sp
   dade0:	f7fd fb4c 	bl	d847c <localtime_r>
    char ascstr[26] = {};
   dade4:	2216      	movs	r2, #22
   dade6:	4629      	mov	r1, r5
   dade8:	a803      	add	r0, sp, #12
   dadea:	9502      	str	r5, [sp, #8]
   dadec:	f001 f928 	bl	dc040 <memset>
    asctime_r(&calendar_time, ascstr);
   dadf0:	a902      	add	r1, sp, #8
   dadf2:	a809      	add	r0, sp, #36	; 0x24
   dadf4:	f001 f8b2 	bl	dbf5c <asctime_r>
    int len = strlen(ascstr);
   dadf8:	a802      	add	r0, sp, #8
   dadfa:	f001 f994 	bl	dc126 <strlen>
    ascstr[len-1] = 0; // remove final newline
   dadfe:	ab12      	add	r3, sp, #72	; 0x48
   dae00:	4418      	add	r0, r3
    return String(ascstr);
   dae02:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dae04:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dae08:	4620      	mov	r0, r4
   dae0a:	f7ff fd8c 	bl	da926 <_ZN6StringC1EPKc>
}
   dae0e:	4620      	mov	r0, r4
   dae10:	b013      	add	sp, #76	; 0x4c
   dae12:	bd30      	pop	{r4, r5, pc}
   dae14:	2003e668 	.word	0x2003e668
   dae18:	2003e660 	.word	0x2003e660

000dae1c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae20:	b0a5      	sub	sp, #148	; 0x94
   dae22:	4607      	mov	r7, r0
   dae24:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dae26:	a814      	add	r0, sp, #80	; 0x50
{
   dae28:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dae2a:	223f      	movs	r2, #63	; 0x3f
{
   dae2c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dae2e:	f001 f994 	bl	dc15a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dae32:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dae34:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dae36:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dae3a:	f001 f974 	bl	dc126 <strlen>
   dae3e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dae40:	bb5d      	cbnz	r5, dae9a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dae42:	492a      	ldr	r1, [pc, #168]	; (daeec <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dae44:	a803      	add	r0, sp, #12
   dae46:	f001 f948 	bl	dc0da <strcpy>
   dae4a:	ae14      	add	r6, sp, #80	; 0x50
{
   dae4c:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dae4e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dae52:	45ab      	cmp	fp, r5
   dae54:	d936      	bls.n	daec4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dae56:	46b1      	mov	r9, r6
   dae58:	f105 0a01 	add.w	sl, r5, #1
   dae5c:	f819 3b01 	ldrb.w	r3, [r9], #1
   dae60:	2b25      	cmp	r3, #37	; 0x25
   dae62:	d117      	bne.n	dae94 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dae64:	7873      	ldrb	r3, [r6, #1]
   dae66:	2b7a      	cmp	r3, #122	; 0x7a
   dae68:	d114      	bne.n	dae94 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dae6a:	a803      	add	r0, sp, #12
   dae6c:	f001 f95b 	bl	dc126 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dae70:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dae72:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dae74:	1828      	adds	r0, r5, r0
   dae76:	4418      	add	r0, r3
   dae78:	ebab 0205 	sub.w	r2, fp, r5
   dae7c:	1cb1      	adds	r1, r6, #2
   dae7e:	f001 f8b7 	bl	dbff0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dae82:	4622      	mov	r2, r4
   dae84:	a903      	add	r1, sp, #12
   dae86:	4630      	mov	r0, r6
   dae88:	f001 f8b2 	bl	dbff0 <memcpy>
            len = strlen(format_str);
   dae8c:	a814      	add	r0, sp, #80	; 0x50
   dae8e:	f001 f94a 	bl	dc126 <strlen>
   dae92:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dae94:	464e      	mov	r6, r9
   dae96:	4655      	mov	r5, sl
   dae98:	e7d9      	b.n	dae4e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dae9a:	213c      	movs	r1, #60	; 0x3c
   dae9c:	fb95 f3f1 	sdiv	r3, r5, r1
   daea0:	2b00      	cmp	r3, #0
   daea2:	bfb8      	it	lt
   daea4:	425b      	neglt	r3, r3
   daea6:	fbb3 f2f1 	udiv	r2, r3, r1
   daeaa:	fb01 3312 	mls	r3, r1, r2, r3
   daeae:	9300      	str	r3, [sp, #0]
   daeb0:	4a0f      	ldr	r2, [pc, #60]	; (daef0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   daeb2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   daeb6:	2110      	movs	r1, #16
   daeb8:	a803      	add	r0, sp, #12
   daeba:	fb95 f3f3 	sdiv	r3, r5, r3
   daebe:	f7fd faad 	bl	d841c <snprintf>
   daec2:	e7c2      	b.n	dae4a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   daec4:	2100      	movs	r1, #0
   daec6:	222e      	movs	r2, #46	; 0x2e
   daec8:	a808      	add	r0, sp, #32
   daeca:	9107      	str	r1, [sp, #28]
   daecc:	f001 f8b8 	bl	dc040 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   daed0:	4643      	mov	r3, r8
   daed2:	aa14      	add	r2, sp, #80	; 0x50
   daed4:	2132      	movs	r1, #50	; 0x32
   daed6:	a807      	add	r0, sp, #28
   daed8:	f7fd fac8 	bl	d846c <strftime>
    return String(buf);
   daedc:	a907      	add	r1, sp, #28
   daede:	4638      	mov	r0, r7
   daee0:	f7ff fd21 	bl	da926 <_ZN6StringC1EPKc>
}
   daee4:	4638      	mov	r0, r7
   daee6:	b025      	add	sp, #148	; 0x94
   daee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daeec:	000dcf0e 	.word	0x000dcf0e
   daef0:	000dcf10 	.word	0x000dcf10

000daef4 <_ZN9TimeClass6formatExPKc>:
{
   daef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   daef6:	b08d      	sub	sp, #52	; 0x34
   daef8:	e9cd 2300 	strd	r2, r3, [sp]
   daefc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   daefe:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   daf00:	b915      	cbnz	r5, daf08 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   daf02:	4b19      	ldr	r3, [pc, #100]	; (daf68 <_ZN9TimeClass6formatExPKc+0x74>)
   daf04:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   daf06:	b12d      	cbz	r5, daf14 <_ZN9TimeClass6formatExPKc+0x20>
   daf08:	4b18      	ldr	r3, [pc, #96]	; (daf6c <_ZN9TimeClass6formatExPKc+0x78>)
   daf0a:	4628      	mov	r0, r5
   daf0c:	6819      	ldr	r1, [r3, #0]
   daf0e:	f001 f8da 	bl	dc0c6 <strcmp>
   daf12:	b938      	cbnz	r0, daf24 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   daf14:	e9dd 2300 	ldrd	r2, r3, [sp]
   daf18:	4620      	mov	r0, r4
   daf1a:	f7ff ff47 	bl	dadac <_ZN9TimeClass7timeStrEx>
}
   daf1e:	4620      	mov	r0, r4
   daf20:	b00d      	add	sp, #52	; 0x34
   daf22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   daf24:	4e12      	ldr	r6, [pc, #72]	; (daf70 <_ZN9TimeClass6formatExPKc+0x7c>)
   daf26:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   daf28:	4f12      	ldr	r7, [pc, #72]	; (daf74 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   daf2a:	e9d6 3200 	ldrd	r3, r2, [r6]
   daf2e:	185b      	adds	r3, r3, r1
   daf30:	9901      	ldr	r1, [sp, #4]
   daf32:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   daf36:	e9d7 0100 	ldrd	r0, r1, [r7]
   daf3a:	181b      	adds	r3, r3, r0
   daf3c:	eb41 0202 	adc.w	r2, r1, r2
   daf40:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   daf44:	2100      	movs	r1, #0
   daf46:	2224      	movs	r2, #36	; 0x24
   daf48:	a803      	add	r0, sp, #12
   daf4a:	f001 f879 	bl	dc040 <memset>
    localtime_r(&t, &calendar_time);
   daf4e:	a903      	add	r1, sp, #12
   daf50:	4668      	mov	r0, sp
   daf52:	f7fd fa93 	bl	d847c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   daf56:	6832      	ldr	r2, [r6, #0]
   daf58:	683b      	ldr	r3, [r7, #0]
   daf5a:	a903      	add	r1, sp, #12
   daf5c:	4413      	add	r3, r2
   daf5e:	4620      	mov	r0, r4
   daf60:	462a      	mov	r2, r5
   daf62:	f7ff ff5b 	bl	dae1c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   daf66:	e7da      	b.n	daf1e <_ZN9TimeClass6formatExPKc+0x2a>
   daf68:	2003e638 	.word	0x2003e638
   daf6c:	2003e2ac 	.word	0x2003e2ac
   daf70:	2003e668 	.word	0x2003e668
   daf74:	2003e660 	.word	0x2003e660

000daf78 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   daf78:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   daf7a:	2000      	movs	r0, #0
   daf7c:	f7fc ff2a 	bl	d7dd4 <hal_rtc_time_is_valid>
    if (rtcstate)
   daf80:	4604      	mov	r4, r0
   daf82:	b9a0      	cbnz	r0, dafae <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   daf84:	f7fd f8e0 	bl	d8148 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   daf88:	2801      	cmp	r0, #1
   daf8a:	d110      	bne.n	dafae <_ZN9TimeClass7isValidEv+0x36>
   daf8c:	4620      	mov	r0, r4
   daf8e:	f7fd f913 	bl	d81b8 <system_thread_get_state>
   daf92:	b960      	cbnz	r0, dafae <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   daf94:	f7ff fe72 	bl	dac7c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   daf98:	b910      	cbnz	r0, dafa0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   daf9a:	f7fd f95f 	bl	d825c <spark_process>
        while (_while() && !_condition()) {
   daf9e:	e7f9      	b.n	daf94 <_ZN9TimeClass7isValidEv+0x1c>
   dafa0:	f7ff fe6c 	bl	dac7c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   dafa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   dafa8:	2000      	movs	r0, #0
   dafaa:	f7fc bf13 	b.w	d7dd4 <hal_rtc_time_is_valid>
}
   dafae:	4620      	mov	r0, r4
   dafb0:	bd10      	pop	{r4, pc}

000dafb2 <_ZN9TimeClass3nowEv>:
{
   dafb2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   dafb4:	f7ff ffe0 	bl	daf78 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   dafb8:	2210      	movs	r2, #16
   dafba:	2100      	movs	r1, #0
   dafbc:	4668      	mov	r0, sp
   dafbe:	f001 f83f 	bl	dc040 <memset>
    hal_rtc_get_time(&tv, nullptr);
   dafc2:	2100      	movs	r1, #0
   dafc4:	4668      	mov	r0, sp
   dafc6:	f7fc ff15 	bl	d7df4 <hal_rtc_get_time>
}
   dafca:	9800      	ldr	r0, [sp, #0]
   dafcc:	b005      	add	sp, #20
   dafce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dafd4 <_ZN9TimeClass4hourEv>:
{
   dafd4:	b508      	push	{r3, lr}
	return hour(now());
   dafd6:	f7ff ffec 	bl	dafb2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dafda:	17c1      	asrs	r1, r0, #31
   dafdc:	f7ff fe18 	bl	dac10 <_ZL22Refresh_UnixTime_Cachex>
}
   dafe0:	4b01      	ldr	r3, [pc, #4]	; (dafe8 <_ZN9TimeClass4hourEv+0x14>)
   dafe2:	6898      	ldr	r0, [r3, #8]
   dafe4:	bd08      	pop	{r3, pc}
   dafe6:	bf00      	nop
   dafe8:	2003e63c 	.word	0x2003e63c

000dafec <_ZN9TimeClass6minuteEv>:
{
   dafec:	b508      	push	{r3, lr}
	return minute(now());
   dafee:	f7ff ffe0 	bl	dafb2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   daff2:	17c1      	asrs	r1, r0, #31
   daff4:	f7ff fe0c 	bl	dac10 <_ZL22Refresh_UnixTime_Cachex>
}
   daff8:	4b01      	ldr	r3, [pc, #4]	; (db000 <_ZN9TimeClass6minuteEv+0x14>)
   daffa:	6858      	ldr	r0, [r3, #4]
   daffc:	bd08      	pop	{r3, pc}
   daffe:	bf00      	nop
   db000:	2003e63c 	.word	0x2003e63c

000db004 <_ZN9TimeClass3dayEv>:
{
   db004:	b508      	push	{r3, lr}
	return day(now());
   db006:	f7ff ffd4 	bl	dafb2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db00a:	17c1      	asrs	r1, r0, #31
   db00c:	f7ff fe00 	bl	dac10 <_ZL22Refresh_UnixTime_Cachex>
}
   db010:	4b01      	ldr	r3, [pc, #4]	; (db018 <_ZN9TimeClass3dayEv+0x14>)
   db012:	68d8      	ldr	r0, [r3, #12]
   db014:	bd08      	pop	{r3, pc}
   db016:	bf00      	nop
   db018:	2003e63c 	.word	0x2003e63c

000db01c <_ZN9TimeClass7weekdayEv>:
{
   db01c:	b508      	push	{r3, lr}
	return weekday(now());
   db01e:	f7ff ffc8 	bl	dafb2 <_ZN9TimeClass3nowEv>
}
   db022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   db026:	17c1      	asrs	r1, r0, #31
   db028:	f7ff be46 	b.w	dacb8 <_ZN9TimeClass7weekdayEx>

000db02c <_ZN9TimeClass5monthEv>:
{
   db02c:	b508      	push	{r3, lr}
	return month(now());
   db02e:	f7ff ffc0 	bl	dafb2 <_ZN9TimeClass3nowEv>
}
   db032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   db036:	17c1      	asrs	r1, r0, #31
   db038:	f7ff be48 	b.w	daccc <_ZN9TimeClass5monthEx>

000db03c <_ZN9TimeClass5localEv>:
{
   db03c:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   db03e:	f7ff ffb8 	bl	dafb2 <_ZN9TimeClass3nowEv>
   db042:	4b03      	ldr	r3, [pc, #12]	; (db050 <_ZN9TimeClass5localEv+0x14>)
   db044:	4a03      	ldr	r2, [pc, #12]	; (db054 <_ZN9TimeClass5localEv+0x18>)
   db046:	681b      	ldr	r3, [r3, #0]
   db048:	6812      	ldr	r2, [r2, #0]
   db04a:	4413      	add	r3, r2
}
   db04c:	4418      	add	r0, r3
   db04e:	bd08      	pop	{r3, pc}
   db050:	2003e668 	.word	0x2003e668
   db054:	2003e660 	.word	0x2003e660

000db058 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   db058:	4b02      	ldr	r3, [pc, #8]	; (db064 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   db05a:	681a      	ldr	r2, [r3, #0]
   db05c:	4b02      	ldr	r3, [pc, #8]	; (db068 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   db05e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   db060:	4770      	bx	lr
   db062:	bf00      	nop
   db064:	2003e2ac 	.word	0x2003e2ac
   db068:	2003e638 	.word	0x2003e638

000db06c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   db06c:	4770      	bx	lr

000db06e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db06e:	7441      	strb	r1, [r0, #17]
}
   db070:	4770      	bx	lr

000db072 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   db072:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   db074:	7c00      	ldrb	r0, [r0, #16]
   db076:	f7fc ffe5 	bl	d8044 <hal_usart_available_data_for_write>
}
   db07a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db07e:	bd08      	pop	{r3, pc}

000db080 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db080:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   db082:	7c00      	ldrb	r0, [r0, #16]
   db084:	f7fc ffb6 	bl	d7ff4 <hal_usart_available>
}
   db088:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db08c:	bd08      	pop	{r3, pc}

000db08e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db08e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   db090:	7c00      	ldrb	r0, [r0, #16]
   db092:	f7fc ffbf 	bl	d8014 <hal_usart_peek>
}
   db096:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db09a:	bd08      	pop	{r3, pc}

000db09c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db09c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   db09e:	7c00      	ldrb	r0, [r0, #16]
   db0a0:	f7fc ffb0 	bl	d8004 <hal_usart_read>
}
   db0a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db0a8:	bd08      	pop	{r3, pc}

000db0aa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   db0aa:	7c00      	ldrb	r0, [r0, #16]
   db0ac:	f7fc bfba 	b.w	d8024 <hal_usart_flush>

000db0b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db0b2:	7c45      	ldrb	r5, [r0, #17]
{
   db0b4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db0b6:	b12d      	cbz	r5, db0c4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   db0b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db0ba:	b003      	add	sp, #12
   db0bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   db0c0:	f7fc bf90 	b.w	d7fe4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db0c4:	7c00      	ldrb	r0, [r0, #16]
   db0c6:	9101      	str	r1, [sp, #4]
   db0c8:	f7fc ffbc 	bl	d8044 <hal_usart_available_data_for_write>
   db0cc:	2800      	cmp	r0, #0
   db0ce:	9901      	ldr	r1, [sp, #4]
   db0d0:	dcf2      	bgt.n	db0b8 <_ZN11USARTSerial5writeEh+0x8>
}
   db0d2:	4628      	mov	r0, r5
   db0d4:	b003      	add	sp, #12
   db0d6:	bd30      	pop	{r4, r5, pc}

000db0d8 <_ZN11USARTSerialD0Ev>:
   db0d8:	b510      	push	{r4, lr}
   db0da:	2114      	movs	r1, #20
   db0dc:	4604      	mov	r4, r0
   db0de:	f000 fa9a 	bl	db616 <_ZdlPvj>
   db0e2:	4620      	mov	r0, r4
   db0e4:	bd10      	pop	{r4, pc}
	...

000db0e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db0e8:	b510      	push	{r4, lr}
   db0ea:	f04f 0c00 	mov.w	ip, #0
   db0ee:	4604      	mov	r4, r0
   db0f0:	4608      	mov	r0, r1
   db0f2:	4611      	mov	r1, r2
   db0f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db0f8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db0fc:	4a04      	ldr	r2, [pc, #16]	; (db110 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db0fe:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db100:	2201      	movs	r2, #1
  _serial = serial;
   db102:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db104:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db106:	461a      	mov	r2, r3
   db108:	f7fc ff5c 	bl	d7fc4 <hal_usart_init>
}
   db10c:	4620      	mov	r0, r4
   db10e:	bd10      	pop	{r4, pc}
   db110:	000dcf40 	.word	0x000dcf40

000db114 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   db114:	7c00      	ldrb	r0, [r0, #16]
   db116:	2300      	movs	r3, #0
   db118:	f7fc bf9c 	b.w	d8054 <hal_usart_begin_config>

000db11c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   db11c:	2200      	movs	r2, #0
   db11e:	f7ff bff9 	b.w	db114 <_ZN11USARTSerial5beginEmm>

000db122 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   db122:	7c00      	ldrb	r0, [r0, #16]
   db124:	f7fc bf56 	b.w	d7fd4 <hal_usart_end>

000db128 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db128:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db12a:	4c0e      	ldr	r4, [pc, #56]	; (db164 <_Z22__fetch_global_Serial1v+0x3c>)
   db12c:	7821      	ldrb	r1, [r4, #0]
   db12e:	f3bf 8f5b 	dmb	ish
   db132:	f011 0101 	ands.w	r1, r1, #1
   db136:	d112      	bne.n	db15e <_Z22__fetch_global_Serial1v+0x36>
   db138:	4620      	mov	r0, r4
   db13a:	9101      	str	r1, [sp, #4]
   db13c:	f7f8 ffbc 	bl	d40b8 <__cxa_guard_acquire>
   db140:	9901      	ldr	r1, [sp, #4]
   db142:	b160      	cbz	r0, db15e <_Z22__fetch_global_Serial1v+0x36>
   db144:	4a08      	ldr	r2, [pc, #32]	; (db168 <_Z22__fetch_global_Serial1v+0x40>)
   db146:	4b09      	ldr	r3, [pc, #36]	; (db16c <_Z22__fetch_global_Serial1v+0x44>)
   db148:	4809      	ldr	r0, [pc, #36]	; (db170 <_Z22__fetch_global_Serial1v+0x48>)
   db14a:	f7ff ffcd 	bl	db0e8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db14e:	4620      	mov	r0, r4
   db150:	f7f8 ffb7 	bl	d40c2 <__cxa_guard_release>
   db154:	4a07      	ldr	r2, [pc, #28]	; (db174 <_Z22__fetch_global_Serial1v+0x4c>)
   db156:	4908      	ldr	r1, [pc, #32]	; (db178 <_Z22__fetch_global_Serial1v+0x50>)
   db158:	4805      	ldr	r0, [pc, #20]	; (db170 <_Z22__fetch_global_Serial1v+0x48>)
   db15a:	f000 fa57 	bl	db60c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db15e:	4804      	ldr	r0, [pc, #16]	; (db170 <_Z22__fetch_global_Serial1v+0x48>)
   db160:	b002      	add	sp, #8
   db162:	bd10      	pop	{r4, pc}
   db164:	2003e678 	.word	0x2003e678
   db168:	2003e67c 	.word	0x2003e67c
   db16c:	2003e700 	.word	0x2003e700
   db170:	2003e784 	.word	0x2003e784
   db174:	2003e320 	.word	0x2003e320
   db178:	000db06d 	.word	0x000db06d

000db17c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db17c:	7441      	strb	r1, [r0, #17]
}
   db17e:	4770      	bx	lr

000db180 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db180:	4770      	bx	lr

000db182 <_ZN9USBSerial4readEv>:
{
   db182:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db184:	2100      	movs	r1, #0
   db186:	7c00      	ldrb	r0, [r0, #16]
   db188:	f7fc ff94 	bl	d80b4 <HAL_USB_USART_Receive_Data>
}
   db18c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db190:	bd08      	pop	{r3, pc}

000db192 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   db192:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db194:	2101      	movs	r1, #1
   db196:	7c00      	ldrb	r0, [r0, #16]
   db198:	f7fc ff8c 	bl	d80b4 <HAL_USB_USART_Receive_Data>
}
   db19c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db1a0:	bd08      	pop	{r3, pc}

000db1a2 <_ZN9USBSerial17availableForWriteEv>:
{
   db1a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db1a4:	7c00      	ldrb	r0, [r0, #16]
   db1a6:	f7fc ff7d 	bl	d80a4 <HAL_USB_USART_Available_Data_For_Write>
}
   db1aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db1ae:	bd08      	pop	{r3, pc}

000db1b0 <_ZN9USBSerial9availableEv>:
{
   db1b0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db1b2:	7c00      	ldrb	r0, [r0, #16]
   db1b4:	f7fc ff6e 	bl	d8094 <HAL_USB_USART_Available_Data>
}
   db1b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db1bc:	bd08      	pop	{r3, pc}

000db1be <_ZN9USBSerial5writeEh>:
{
   db1be:	b513      	push	{r0, r1, r4, lr}
   db1c0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db1c2:	7c00      	ldrb	r0, [r0, #16]
{
   db1c4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db1c6:	f7fc ff6d 	bl	d80a4 <HAL_USB_USART_Available_Data_For_Write>
   db1ca:	2800      	cmp	r0, #0
   db1cc:	9901      	ldr	r1, [sp, #4]
   db1ce:	dc01      	bgt.n	db1d4 <_ZN9USBSerial5writeEh+0x16>
   db1d0:	7c60      	ldrb	r0, [r4, #17]
   db1d2:	b120      	cbz	r0, db1de <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db1d4:	7c20      	ldrb	r0, [r4, #16]
   db1d6:	f7fc ff75 	bl	d80c4 <HAL_USB_USART_Send_Data>
   db1da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db1de:	b002      	add	sp, #8
   db1e0:	bd10      	pop	{r4, pc}

000db1e2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db1e2:	7c00      	ldrb	r0, [r0, #16]
   db1e4:	f7fc bf76 	b.w	d80d4 <HAL_USB_USART_Flush_Data>

000db1e8 <_ZN9USBSerialD0Ev>:
   db1e8:	b510      	push	{r4, lr}
   db1ea:	2114      	movs	r1, #20
   db1ec:	4604      	mov	r4, r0
   db1ee:	f000 fa12 	bl	db616 <_ZdlPvj>
   db1f2:	4620      	mov	r0, r4
   db1f4:	bd10      	pop	{r4, pc}
	...

000db1f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db1f8:	b510      	push	{r4, lr}
   db1fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db1fe:	4604      	mov	r4, r0
   db200:	4608      	mov	r0, r1
   db202:	2100      	movs	r1, #0
   db204:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db208:	4b04      	ldr	r3, [pc, #16]	; (db21c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db20a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db20c:	2301      	movs	r3, #1
  _serial = serial;
   db20e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db210:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db212:	4611      	mov	r1, r2
   db214:	f7fc ff26 	bl	d8064 <HAL_USB_USART_Init>
}
   db218:	4620      	mov	r0, r4
   db21a:	bd10      	pop	{r4, pc}
   db21c:	000dcf70 	.word	0x000dcf70

000db220 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db220:	7c00      	ldrb	r0, [r0, #16]
   db222:	2200      	movs	r2, #0
   db224:	f7fc bf26 	b.w	d8074 <HAL_USB_USART_Begin>

000db228 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   db228:	7c00      	ldrb	r0, [r0, #16]
   db22a:	f7fc bf2b 	b.w	d8084 <HAL_USB_USART_End>

000db22e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db22e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db230:	2214      	movs	r2, #20
{
   db232:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db234:	2100      	movs	r1, #0
   db236:	f000 ff03 	bl	dc040 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db23a:	4620      	mov	r0, r4
   db23c:	bd10      	pop	{r4, pc}
	...

000db240 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db240:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db242:	4c10      	ldr	r4, [pc, #64]	; (db284 <_Z16_fetch_usbserialv+0x44>)
{
   db244:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db246:	a803      	add	r0, sp, #12
   db248:	f7ff fff1 	bl	db22e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db24c:	7821      	ldrb	r1, [r4, #0]
   db24e:	f3bf 8f5b 	dmb	ish
   db252:	f011 0101 	ands.w	r1, r1, #1
   db256:	d111      	bne.n	db27c <_Z16_fetch_usbserialv+0x3c>
   db258:	4620      	mov	r0, r4
   db25a:	9101      	str	r1, [sp, #4]
   db25c:	f7f8 ff2c 	bl	d40b8 <__cxa_guard_acquire>
   db260:	9901      	ldr	r1, [sp, #4]
   db262:	b158      	cbz	r0, db27c <_Z16_fetch_usbserialv+0x3c>
   db264:	aa03      	add	r2, sp, #12
   db266:	4808      	ldr	r0, [pc, #32]	; (db288 <_Z16_fetch_usbserialv+0x48>)
   db268:	f7ff ffc6 	bl	db1f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db26c:	4620      	mov	r0, r4
   db26e:	f7f8 ff28 	bl	d40c2 <__cxa_guard_release>
   db272:	4a06      	ldr	r2, [pc, #24]	; (db28c <_Z16_fetch_usbserialv+0x4c>)
   db274:	4906      	ldr	r1, [pc, #24]	; (db290 <_Z16_fetch_usbserialv+0x50>)
   db276:	4804      	ldr	r0, [pc, #16]	; (db288 <_Z16_fetch_usbserialv+0x48>)
   db278:	f000 f9c8 	bl	db60c <__aeabi_atexit>
	return _usbserial;
}
   db27c:	4802      	ldr	r0, [pc, #8]	; (db288 <_Z16_fetch_usbserialv+0x48>)
   db27e:	b008      	add	sp, #32
   db280:	bd10      	pop	{r4, pc}
   db282:	bf00      	nop
   db284:	2003e798 	.word	0x2003e798
   db288:	2003e79c 	.word	0x2003e79c
   db28c:	2003e320 	.word	0x2003e320
   db290:	000db181 	.word	0x000db181

000db294 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db294:	4b01      	ldr	r3, [pc, #4]	; (db29c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db296:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db298:	4770      	bx	lr
   db29a:	bf00      	nop
   db29c:	2003e2b8 	.word	0x2003e2b8

000db2a0 <serialEventRun>:
{
   db2a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db2a2:	4b0b      	ldr	r3, [pc, #44]	; (db2d0 <serialEventRun+0x30>)
   db2a4:	b143      	cbz	r3, db2b8 <serialEventRun+0x18>
   db2a6:	f7ff ffcb 	bl	db240 <_Z16_fetch_usbserialv>
   db2aa:	6803      	ldr	r3, [r0, #0]
   db2ac:	691b      	ldr	r3, [r3, #16]
   db2ae:	4798      	blx	r3
   db2b0:	2800      	cmp	r0, #0
   db2b2:	dd01      	ble.n	db2b8 <serialEventRun+0x18>
        serialEvent();
   db2b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db2b8:	4b06      	ldr	r3, [pc, #24]	; (db2d4 <serialEventRun+0x34>)
   db2ba:	b143      	cbz	r3, db2ce <serialEventRun+0x2e>
   db2bc:	f7ff ff34 	bl	db128 <_Z22__fetch_global_Serial1v>
   db2c0:	6803      	ldr	r3, [r0, #0]
   db2c2:	691b      	ldr	r3, [r3, #16]
   db2c4:	4798      	blx	r3
   db2c6:	2800      	cmp	r0, #0
   db2c8:	dd01      	ble.n	db2ce <serialEventRun+0x2e>
        serialEvent1();
   db2ca:	f3af 8000 	nop.w
}
   db2ce:	bd08      	pop	{r3, pc}
	...

000db2d8 <_post_loop>:
{
   db2d8:	b508      	push	{r3, lr}
	serialEventRun();
   db2da:	f7ff ffe1 	bl	db2a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db2de:	f7fc fd71 	bl	d7dc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db2e2:	4b01      	ldr	r3, [pc, #4]	; (db2e8 <_post_loop+0x10>)
   db2e4:	6018      	str	r0, [r3, #0]
}
   db2e6:	bd08      	pop	{r3, pc}
   db2e8:	2003e7c4 	.word	0x2003e7c4

000db2ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db2ec:	4802      	ldr	r0, [pc, #8]	; (db2f8 <_Z33system_initialize_user_backup_ramv+0xc>)
   db2ee:	4a03      	ldr	r2, [pc, #12]	; (db2fc <_Z33system_initialize_user_backup_ramv+0x10>)
   db2f0:	4903      	ldr	r1, [pc, #12]	; (db300 <_Z33system_initialize_user_backup_ramv+0x14>)
   db2f2:	1a12      	subs	r2, r2, r0
   db2f4:	f000 be7c 	b.w	dbff0 <memcpy>
   db2f8:	2003f400 	.word	0x2003f400
   db2fc:	2003fc04 	.word	0x2003fc04
   db300:	000dd130 	.word	0x000dd130

000db304 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db304:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db306:	2300      	movs	r3, #0
   db308:	9300      	str	r3, [sp, #0]
   db30a:	461a      	mov	r2, r3
   db30c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db310:	f7fc ff6c 	bl	d81ec <system_ctrl_set_result>
}
   db314:	b003      	add	sp, #12
   db316:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db31c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db31c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db31e:	8843      	ldrh	r3, [r0, #2]
   db320:	2b0a      	cmp	r3, #10
   db322:	d008      	beq.n	db336 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db324:	2b50      	cmp	r3, #80	; 0x50
   db326:	d10b      	bne.n	db340 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db328:	4b09      	ldr	r3, [pc, #36]	; (db350 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db32a:	681b      	ldr	r3, [r3, #0]
   db32c:	b14b      	cbz	r3, db342 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db32e:	b003      	add	sp, #12
   db330:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db334:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db336:	f7ff ffe5 	bl	db304 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db33a:	b003      	add	sp, #12
   db33c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db340:	2300      	movs	r3, #0
   db342:	9300      	str	r3, [sp, #0]
   db344:	461a      	mov	r2, r3
   db346:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db34a:	f7fc ff4f 	bl	d81ec <system_ctrl_set_result>
}
   db34e:	e7f4      	b.n	db33a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db350:	2003e7b4 	.word	0x2003e7b4

000db354 <module_user_init_hook>:
{
   db354:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db356:	4c12      	ldr	r4, [pc, #72]	; (db3a0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db358:	4812      	ldr	r0, [pc, #72]	; (db3a4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db35a:	4d13      	ldr	r5, [pc, #76]	; (db3a8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db35c:	2100      	movs	r1, #0
   db35e:	f7fd f87d 	bl	d845c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db362:	6823      	ldr	r3, [r4, #0]
   db364:	42ab      	cmp	r3, r5
   db366:	4b11      	ldr	r3, [pc, #68]	; (db3ac <module_user_init_hook+0x58>)
   db368:	bf0c      	ite	eq
   db36a:	2201      	moveq	r2, #1
   db36c:	2200      	movne	r2, #0
   db36e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db370:	d002      	beq.n	db378 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   db372:	f7ff ffbb 	bl	db2ec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   db376:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db378:	f7fc fd0c 	bl	d7d94 <HAL_RNG_GetRandomNumber>
   db37c:	4604      	mov	r4, r0
    srand(seed);
   db37e:	f000 fe67 	bl	dc050 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db382:	4b0b      	ldr	r3, [pc, #44]	; (db3b0 <module_user_init_hook+0x5c>)
   db384:	b113      	cbz	r3, db38c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   db386:	4620      	mov	r0, r4
   db388:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db38c:	2100      	movs	r1, #0
   db38e:	4808      	ldr	r0, [pc, #32]	; (db3b0 <module_user_init_hook+0x5c>)
   db390:	f7fc ffb4 	bl	d82fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db398:	4806      	ldr	r0, [pc, #24]	; (db3b4 <module_user_init_hook+0x60>)
   db39a:	2100      	movs	r1, #0
   db39c:	f7fc bf1c 	b.w	d81d8 <system_ctrl_set_app_request_handler>
   db3a0:	2003fc00 	.word	0x2003fc00
   db3a4:	000db295 	.word	0x000db295
   db3a8:	9a271c1e 	.word	0x9a271c1e
   db3ac:	2003e7b0 	.word	0x2003e7b0
   db3b0:	00000000 	.word	0x00000000
   db3b4:	000db31d 	.word	0x000db31d

000db3b8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   db3b8:	b508      	push	{r3, lr}
   db3ba:	4b02      	ldr	r3, [pc, #8]	; (db3c4 <spark_protocol_instance+0xc>)
   db3bc:	681b      	ldr	r3, [r3, #0]
   db3be:	681b      	ldr	r3, [r3, #0]
   db3c0:	9301      	str	r3, [sp, #4]
   db3c2:	bd08      	pop	{r3, pc}
   db3c4:	0003025c 	.word	0x0003025c

000db3c8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   db3c8:	b508      	push	{r3, lr}
   db3ca:	4b02      	ldr	r3, [pc, #8]	; (db3d4 <spark_protocol_set_product_id+0xc>)
   db3cc:	681b      	ldr	r3, [r3, #0]
   db3ce:	685b      	ldr	r3, [r3, #4]
   db3d0:	9301      	str	r3, [sp, #4]
   db3d2:	bd08      	pop	{r3, pc}
   db3d4:	0003025c 	.word	0x0003025c

000db3d8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   db3d8:	b508      	push	{r3, lr}
   db3da:	4b02      	ldr	r3, [pc, #8]	; (db3e4 <spark_protocol_set_product_firmware_version+0xc>)
   db3dc:	681b      	ldr	r3, [r3, #0]
   db3de:	689b      	ldr	r3, [r3, #8]
   db3e0:	9301      	str	r3, [sp, #4]
   db3e2:	bd08      	pop	{r3, pc}
   db3e4:	0003025c 	.word	0x0003025c

000db3e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db3e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db3ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db3ec:	d902      	bls.n	db3f4 <pinAvailable+0xc>
    return false;
   db3ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db3f0:	b002      	add	sp, #8
   db3f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db3f4:	f1a0 030b 	sub.w	r3, r0, #11
   db3f8:	2b02      	cmp	r3, #2
   db3fa:	d81a      	bhi.n	db432 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db3fc:	4c17      	ldr	r4, [pc, #92]	; (db45c <pinAvailable+0x74>)
   db3fe:	7821      	ldrb	r1, [r4, #0]
   db400:	f3bf 8f5b 	dmb	ish
   db404:	f011 0101 	ands.w	r1, r1, #1
   db408:	d10b      	bne.n	db422 <pinAvailable+0x3a>
   db40a:	4620      	mov	r0, r4
   db40c:	9101      	str	r1, [sp, #4]
   db40e:	f7f8 fe53 	bl	d40b8 <__cxa_guard_acquire>
   db412:	9901      	ldr	r1, [sp, #4]
   db414:	b128      	cbz	r0, db422 <pinAvailable+0x3a>
   db416:	4812      	ldr	r0, [pc, #72]	; (db460 <pinAvailable+0x78>)
   db418:	f7ff fa30 	bl	da87c <_ZN8SPIClassC1E19hal_spi_interface_t>
   db41c:	4620      	mov	r0, r4
   db41e:	f7f8 fe50 	bl	d40c2 <__cxa_guard_release>
   db422:	4b0f      	ldr	r3, [pc, #60]	; (db460 <pinAvailable+0x78>)
   db424:	7818      	ldrb	r0, [r3, #0]
   db426:	f7fc fdc5 	bl	d7fb4 <hal_spi_is_enabled>
   db42a:	2800      	cmp	r0, #0
   db42c:	d1df      	bne.n	db3ee <pinAvailable+0x6>
  return true; // 'pin' is available
   db42e:	2001      	movs	r0, #1
   db430:	e7de      	b.n	db3f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db432:	2801      	cmp	r0, #1
   db434:	d809      	bhi.n	db44a <pinAvailable+0x62>
   db436:	f000 f899 	bl	db56c <_Z19__fetch_global_Wirev>
   db43a:	2100      	movs	r1, #0
   db43c:	7c00      	ldrb	r0, [r0, #16]
   db43e:	f7fc fd71 	bl	d7f24 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db442:	f080 0001 	eor.w	r0, r0, #1
   db446:	b2c0      	uxtb	r0, r0
   db448:	e7d2      	b.n	db3f0 <pinAvailable+0x8>
   db44a:	3809      	subs	r0, #9
   db44c:	2801      	cmp	r0, #1
   db44e:	d8ee      	bhi.n	db42e <pinAvailable+0x46>
   db450:	f7ff fe6a 	bl	db128 <_Z22__fetch_global_Serial1v>
   db454:	7c00      	ldrb	r0, [r0, #16]
   db456:	f7fc fded 	bl	d8034 <hal_usart_is_enabled>
   db45a:	e7f2      	b.n	db442 <pinAvailable+0x5a>
   db45c:	2003e7b8 	.word	0x2003e7b8
   db460:	2003e7bc 	.word	0x2003e7bc

000db464 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db464:	2823      	cmp	r0, #35	; 0x23
{
   db466:	b538      	push	{r3, r4, r5, lr}
   db468:	4604      	mov	r4, r0
   db46a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db46c:	d80a      	bhi.n	db484 <pinMode+0x20>
   db46e:	29ff      	cmp	r1, #255	; 0xff
   db470:	d008      	beq.n	db484 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db472:	f7ff ffb9 	bl	db3e8 <pinAvailable>
   db476:	b128      	cbz	r0, db484 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db478:	4629      	mov	r1, r5
   db47a:	4620      	mov	r0, r4
}
   db47c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db480:	f7fc bcd8 	b.w	d7e34 <HAL_Pin_Mode>
}
   db484:	bd38      	pop	{r3, r4, r5, pc}

000db486 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db486:	b538      	push	{r3, r4, r5, lr}
   db488:	4604      	mov	r4, r0
   db48a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db48c:	f7fc fcda 	bl	d7e44 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db490:	28ff      	cmp	r0, #255	; 0xff
   db492:	d010      	beq.n	db4b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db494:	2806      	cmp	r0, #6
   db496:	d804      	bhi.n	db4a2 <digitalWrite+0x1c>
   db498:	234d      	movs	r3, #77	; 0x4d
   db49a:	fa23 f000 	lsr.w	r0, r3, r0
   db49e:	07c3      	lsls	r3, r0, #31
   db4a0:	d409      	bmi.n	db4b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db4a2:	4620      	mov	r0, r4
   db4a4:	f7ff ffa0 	bl	db3e8 <pinAvailable>
   db4a8:	b128      	cbz	r0, db4b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db4aa:	4629      	mov	r1, r5
   db4ac:	4620      	mov	r0, r4
}
   db4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db4b2:	f7fc bccf 	b.w	d7e54 <HAL_GPIO_Write>
}
   db4b6:	bd38      	pop	{r3, r4, r5, pc}

000db4b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   db4b8:	b510      	push	{r4, lr}
   db4ba:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db4bc:	f7fc fcc2 	bl	d7e44 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   db4c0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   db4c2:	b2db      	uxtb	r3, r3
   db4c4:	2b01      	cmp	r3, #1
   db4c6:	d908      	bls.n	db4da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   db4c8:	4620      	mov	r0, r4
   db4ca:	f7ff ff8d 	bl	db3e8 <pinAvailable>
   db4ce:	b120      	cbz	r0, db4da <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   db4d0:	4620      	mov	r0, r4
}
   db4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   db4d6:	f7fc bcc5 	b.w	d7e64 <HAL_GPIO_Read>
}
   db4da:	2000      	movs	r0, #0
   db4dc:	bd10      	pop	{r4, pc}

000db4de <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db4de:	280d      	cmp	r0, #13
{
   db4e0:	b510      	push	{r4, lr}
   db4e2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   db4e4:	bf9c      	itt	ls
   db4e6:	340e      	addls	r4, #14
   db4e8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db4ea:	4620      	mov	r0, r4
   db4ec:	f7ff ff7c 	bl	db3e8 <pinAvailable>
   db4f0:	b150      	cbz	r0, db508 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db4f2:	2103      	movs	r1, #3
   db4f4:	4620      	mov	r0, r4
   db4f6:	f7fc fc95 	bl	d7e24 <HAL_Validate_Pin_Function>
   db4fa:	2803      	cmp	r0, #3
   db4fc:	d104      	bne.n	db508 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   db4fe:	4620      	mov	r0, r4
}
   db500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   db504:	f7fc bcc6 	b.w	d7e94 <hal_adc_read>
}
   db508:	2000      	movs	r0, #0
   db50a:	bd10      	pop	{r4, pc}

000db50c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   db50c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   db50e:	2300      	movs	r3, #0
   db510:	2520      	movs	r5, #32
   db512:	8043      	strh	r3, [r0, #2]
   db514:	2314      	movs	r3, #20
{
   db516:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   db518:	8003      	strh	r3, [r0, #0]
   db51a:	6085      	str	r5, [r0, #8]
   db51c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db51e:	4906      	ldr	r1, [pc, #24]	; (db538 <_Z17acquireWireBufferv+0x2c>)
   db520:	4628      	mov	r0, r5
   db522:	f000 f87c 	bl	db61e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db526:	4904      	ldr	r1, [pc, #16]	; (db538 <_Z17acquireWireBufferv+0x2c>)
	};
   db528:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db52a:	4628      	mov	r0, r5
   db52c:	f000 f877 	bl	db61e <_ZnajRKSt9nothrow_t>
	};
   db530:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   db532:	4620      	mov	r0, r4
   db534:	bd38      	pop	{r3, r4, r5, pc}
   db536:	bf00      	nop
   db538:	000dcf98 	.word	0x000dcf98

000db53c <_Z18acquireWire1Bufferv>:
   db53c:	b538      	push	{r3, r4, r5, lr}
   db53e:	2300      	movs	r3, #0
   db540:	2520      	movs	r5, #32
   db542:	8043      	strh	r3, [r0, #2]
   db544:	2314      	movs	r3, #20
   db546:	4604      	mov	r4, r0
   db548:	8003      	strh	r3, [r0, #0]
   db54a:	6085      	str	r5, [r0, #8]
   db54c:	6105      	str	r5, [r0, #16]
   db54e:	4906      	ldr	r1, [pc, #24]	; (db568 <_Z18acquireWire1Bufferv+0x2c>)
   db550:	4628      	mov	r0, r5
   db552:	f000 f864 	bl	db61e <_ZnajRKSt9nothrow_t>
   db556:	4904      	ldr	r1, [pc, #16]	; (db568 <_Z18acquireWire1Bufferv+0x2c>)
   db558:	6060      	str	r0, [r4, #4]
   db55a:	4628      	mov	r0, r5
   db55c:	f000 f85f 	bl	db61e <_ZnajRKSt9nothrow_t>
   db560:	60e0      	str	r0, [r4, #12]
   db562:	4620      	mov	r0, r4
   db564:	bd38      	pop	{r3, r4, r5, pc}
   db566:	bf00      	nop
   db568:	000dcf98 	.word	0x000dcf98

000db56c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   db56c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db56e:	4d0f      	ldr	r5, [pc, #60]	; (db5ac <_Z19__fetch_global_Wirev+0x40>)
   db570:	7829      	ldrb	r1, [r5, #0]
   db572:	f3bf 8f5b 	dmb	ish
   db576:	f011 0401 	ands.w	r4, r1, #1
{
   db57a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db57c:	d113      	bne.n	db5a6 <_Z19__fetch_global_Wirev+0x3a>
   db57e:	4628      	mov	r0, r5
   db580:	f7f8 fd9a 	bl	d40b8 <__cxa_guard_acquire>
   db584:	b178      	cbz	r0, db5a6 <_Z19__fetch_global_Wirev+0x3a>
   db586:	a801      	add	r0, sp, #4
   db588:	f7ff ffc0 	bl	db50c <_Z17acquireWireBufferv>
   db58c:	aa01      	add	r2, sp, #4
   db58e:	4621      	mov	r1, r4
   db590:	4807      	ldr	r0, [pc, #28]	; (db5b0 <_Z19__fetch_global_Wirev+0x44>)
   db592:	f7fd fca5 	bl	d8ee0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db596:	4628      	mov	r0, r5
   db598:	f7f8 fd93 	bl	d40c2 <__cxa_guard_release>
   db59c:	4a05      	ldr	r2, [pc, #20]	; (db5b4 <_Z19__fetch_global_Wirev+0x48>)
   db59e:	4906      	ldr	r1, [pc, #24]	; (db5b8 <_Z19__fetch_global_Wirev+0x4c>)
   db5a0:	4803      	ldr	r0, [pc, #12]	; (db5b0 <_Z19__fetch_global_Wirev+0x44>)
   db5a2:	f000 f833 	bl	db60c <__aeabi_atexit>
	return wire;
}
   db5a6:	4802      	ldr	r0, [pc, #8]	; (db5b0 <_Z19__fetch_global_Wirev+0x44>)
   db5a8:	b007      	add	sp, #28
   db5aa:	bd30      	pop	{r4, r5, pc}
   db5ac:	2003e7c8 	.word	0x2003e7c8
   db5b0:	2003e7d0 	.word	0x2003e7d0
   db5b4:	2003e320 	.word	0x2003e320
   db5b8:	000d8e89 	.word	0x000d8e89

000db5bc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   db5bc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db5be:	4c0f      	ldr	r4, [pc, #60]	; (db5fc <_Z20__fetch_global_Wire1v+0x40>)
   db5c0:	7823      	ldrb	r3, [r4, #0]
   db5c2:	f3bf 8f5b 	dmb	ish
   db5c6:	07db      	lsls	r3, r3, #31
{
   db5c8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db5ca:	d413      	bmi.n	db5f4 <_Z20__fetch_global_Wire1v+0x38>
   db5cc:	4620      	mov	r0, r4
   db5ce:	f7f8 fd73 	bl	d40b8 <__cxa_guard_acquire>
   db5d2:	b178      	cbz	r0, db5f4 <_Z20__fetch_global_Wire1v+0x38>
   db5d4:	a801      	add	r0, sp, #4
   db5d6:	f7ff ffb1 	bl	db53c <_Z18acquireWire1Bufferv>
   db5da:	aa01      	add	r2, sp, #4
   db5dc:	2101      	movs	r1, #1
   db5de:	4808      	ldr	r0, [pc, #32]	; (db600 <_Z20__fetch_global_Wire1v+0x44>)
   db5e0:	f7fd fc7e 	bl	d8ee0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db5e4:	4620      	mov	r0, r4
   db5e6:	f7f8 fd6c 	bl	d40c2 <__cxa_guard_release>
   db5ea:	4a06      	ldr	r2, [pc, #24]	; (db604 <_Z20__fetch_global_Wire1v+0x48>)
   db5ec:	4906      	ldr	r1, [pc, #24]	; (db608 <_Z20__fetch_global_Wire1v+0x4c>)
   db5ee:	4804      	ldr	r0, [pc, #16]	; (db600 <_Z20__fetch_global_Wire1v+0x44>)
   db5f0:	f000 f80c 	bl	db60c <__aeabi_atexit>
	return wire;
}
   db5f4:	4802      	ldr	r0, [pc, #8]	; (db600 <_Z20__fetch_global_Wire1v+0x44>)
   db5f6:	b006      	add	sp, #24
   db5f8:	bd10      	pop	{r4, pc}
   db5fa:	bf00      	nop
   db5fc:	2003e7cc 	.word	0x2003e7cc
   db600:	2003e7e4 	.word	0x2003e7e4
   db604:	2003e320 	.word	0x2003e320
   db608:	000d8e89 	.word	0x000d8e89

000db60c <__aeabi_atexit>:
   db60c:	460b      	mov	r3, r1
   db60e:	4601      	mov	r1, r0
   db610:	4618      	mov	r0, r3
   db612:	f000 bccd 	b.w	dbfb0 <__cxa_atexit>

000db616 <_ZdlPvj>:
   db616:	f7f8 bd42 	b.w	d409e <_ZdlPv>

000db61a <_ZnwjRKSt9nothrow_t>:
   db61a:	f7f8 bd3c 	b.w	d4096 <_Znwj>

000db61e <_ZnajRKSt9nothrow_t>:
   db61e:	f7f8 bd3c 	b.w	d409a <_Znaj>

000db622 <_ZSt25__throw_bad_function_callv>:
   db622:	b508      	push	{r3, lr}
   db624:	f7fc ff0a 	bl	d843c <abort>

000db628 <__aeabi_drsub>:
   db628:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db62c:	e002      	b.n	db634 <__adddf3>
   db62e:	bf00      	nop

000db630 <__aeabi_dsub>:
   db630:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db634 <__adddf3>:
   db634:	b530      	push	{r4, r5, lr}
   db636:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db63a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db63e:	ea94 0f05 	teq	r4, r5
   db642:	bf08      	it	eq
   db644:	ea90 0f02 	teqeq	r0, r2
   db648:	bf1f      	itttt	ne
   db64a:	ea54 0c00 	orrsne.w	ip, r4, r0
   db64e:	ea55 0c02 	orrsne.w	ip, r5, r2
   db652:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db656:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db65a:	f000 80e2 	beq.w	db822 <__adddf3+0x1ee>
   db65e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db662:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db666:	bfb8      	it	lt
   db668:	426d      	neglt	r5, r5
   db66a:	dd0c      	ble.n	db686 <__adddf3+0x52>
   db66c:	442c      	add	r4, r5
   db66e:	ea80 0202 	eor.w	r2, r0, r2
   db672:	ea81 0303 	eor.w	r3, r1, r3
   db676:	ea82 0000 	eor.w	r0, r2, r0
   db67a:	ea83 0101 	eor.w	r1, r3, r1
   db67e:	ea80 0202 	eor.w	r2, r0, r2
   db682:	ea81 0303 	eor.w	r3, r1, r3
   db686:	2d36      	cmp	r5, #54	; 0x36
   db688:	bf88      	it	hi
   db68a:	bd30      	pophi	{r4, r5, pc}
   db68c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db690:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db694:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db698:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db69c:	d002      	beq.n	db6a4 <__adddf3+0x70>
   db69e:	4240      	negs	r0, r0
   db6a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db6a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db6a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db6ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db6b0:	d002      	beq.n	db6b8 <__adddf3+0x84>
   db6b2:	4252      	negs	r2, r2
   db6b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db6b8:	ea94 0f05 	teq	r4, r5
   db6bc:	f000 80a7 	beq.w	db80e <__adddf3+0x1da>
   db6c0:	f1a4 0401 	sub.w	r4, r4, #1
   db6c4:	f1d5 0e20 	rsbs	lr, r5, #32
   db6c8:	db0d      	blt.n	db6e6 <__adddf3+0xb2>
   db6ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   db6ce:	fa22 f205 	lsr.w	r2, r2, r5
   db6d2:	1880      	adds	r0, r0, r2
   db6d4:	f141 0100 	adc.w	r1, r1, #0
   db6d8:	fa03 f20e 	lsl.w	r2, r3, lr
   db6dc:	1880      	adds	r0, r0, r2
   db6de:	fa43 f305 	asr.w	r3, r3, r5
   db6e2:	4159      	adcs	r1, r3
   db6e4:	e00e      	b.n	db704 <__adddf3+0xd0>
   db6e6:	f1a5 0520 	sub.w	r5, r5, #32
   db6ea:	f10e 0e20 	add.w	lr, lr, #32
   db6ee:	2a01      	cmp	r2, #1
   db6f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   db6f4:	bf28      	it	cs
   db6f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   db6fa:	fa43 f305 	asr.w	r3, r3, r5
   db6fe:	18c0      	adds	r0, r0, r3
   db700:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db704:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db708:	d507      	bpl.n	db71a <__adddf3+0xe6>
   db70a:	f04f 0e00 	mov.w	lr, #0
   db70e:	f1dc 0c00 	rsbs	ip, ip, #0
   db712:	eb7e 0000 	sbcs.w	r0, lr, r0
   db716:	eb6e 0101 	sbc.w	r1, lr, r1
   db71a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db71e:	d31b      	bcc.n	db758 <__adddf3+0x124>
   db720:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db724:	d30c      	bcc.n	db740 <__adddf3+0x10c>
   db726:	0849      	lsrs	r1, r1, #1
   db728:	ea5f 0030 	movs.w	r0, r0, rrx
   db72c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db730:	f104 0401 	add.w	r4, r4, #1
   db734:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db738:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db73c:	f080 809a 	bcs.w	db874 <__adddf3+0x240>
   db740:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db744:	bf08      	it	eq
   db746:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db74a:	f150 0000 	adcs.w	r0, r0, #0
   db74e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db752:	ea41 0105 	orr.w	r1, r1, r5
   db756:	bd30      	pop	{r4, r5, pc}
   db758:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db75c:	4140      	adcs	r0, r0
   db75e:	eb41 0101 	adc.w	r1, r1, r1
   db762:	3c01      	subs	r4, #1
   db764:	bf28      	it	cs
   db766:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db76a:	d2e9      	bcs.n	db740 <__adddf3+0x10c>
   db76c:	f091 0f00 	teq	r1, #0
   db770:	bf04      	itt	eq
   db772:	4601      	moveq	r1, r0
   db774:	2000      	moveq	r0, #0
   db776:	fab1 f381 	clz	r3, r1
   db77a:	bf08      	it	eq
   db77c:	3320      	addeq	r3, #32
   db77e:	f1a3 030b 	sub.w	r3, r3, #11
   db782:	f1b3 0220 	subs.w	r2, r3, #32
   db786:	da0c      	bge.n	db7a2 <__adddf3+0x16e>
   db788:	320c      	adds	r2, #12
   db78a:	dd08      	ble.n	db79e <__adddf3+0x16a>
   db78c:	f102 0c14 	add.w	ip, r2, #20
   db790:	f1c2 020c 	rsb	r2, r2, #12
   db794:	fa01 f00c 	lsl.w	r0, r1, ip
   db798:	fa21 f102 	lsr.w	r1, r1, r2
   db79c:	e00c      	b.n	db7b8 <__adddf3+0x184>
   db79e:	f102 0214 	add.w	r2, r2, #20
   db7a2:	bfd8      	it	le
   db7a4:	f1c2 0c20 	rsble	ip, r2, #32
   db7a8:	fa01 f102 	lsl.w	r1, r1, r2
   db7ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   db7b0:	bfdc      	itt	le
   db7b2:	ea41 010c 	orrle.w	r1, r1, ip
   db7b6:	4090      	lslle	r0, r2
   db7b8:	1ae4      	subs	r4, r4, r3
   db7ba:	bfa2      	ittt	ge
   db7bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db7c0:	4329      	orrge	r1, r5
   db7c2:	bd30      	popge	{r4, r5, pc}
   db7c4:	ea6f 0404 	mvn.w	r4, r4
   db7c8:	3c1f      	subs	r4, #31
   db7ca:	da1c      	bge.n	db806 <__adddf3+0x1d2>
   db7cc:	340c      	adds	r4, #12
   db7ce:	dc0e      	bgt.n	db7ee <__adddf3+0x1ba>
   db7d0:	f104 0414 	add.w	r4, r4, #20
   db7d4:	f1c4 0220 	rsb	r2, r4, #32
   db7d8:	fa20 f004 	lsr.w	r0, r0, r4
   db7dc:	fa01 f302 	lsl.w	r3, r1, r2
   db7e0:	ea40 0003 	orr.w	r0, r0, r3
   db7e4:	fa21 f304 	lsr.w	r3, r1, r4
   db7e8:	ea45 0103 	orr.w	r1, r5, r3
   db7ec:	bd30      	pop	{r4, r5, pc}
   db7ee:	f1c4 040c 	rsb	r4, r4, #12
   db7f2:	f1c4 0220 	rsb	r2, r4, #32
   db7f6:	fa20 f002 	lsr.w	r0, r0, r2
   db7fa:	fa01 f304 	lsl.w	r3, r1, r4
   db7fe:	ea40 0003 	orr.w	r0, r0, r3
   db802:	4629      	mov	r1, r5
   db804:	bd30      	pop	{r4, r5, pc}
   db806:	fa21 f004 	lsr.w	r0, r1, r4
   db80a:	4629      	mov	r1, r5
   db80c:	bd30      	pop	{r4, r5, pc}
   db80e:	f094 0f00 	teq	r4, #0
   db812:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db816:	bf06      	itte	eq
   db818:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db81c:	3401      	addeq	r4, #1
   db81e:	3d01      	subne	r5, #1
   db820:	e74e      	b.n	db6c0 <__adddf3+0x8c>
   db822:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db826:	bf18      	it	ne
   db828:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db82c:	d029      	beq.n	db882 <__adddf3+0x24e>
   db82e:	ea94 0f05 	teq	r4, r5
   db832:	bf08      	it	eq
   db834:	ea90 0f02 	teqeq	r0, r2
   db838:	d005      	beq.n	db846 <__adddf3+0x212>
   db83a:	ea54 0c00 	orrs.w	ip, r4, r0
   db83e:	bf04      	itt	eq
   db840:	4619      	moveq	r1, r3
   db842:	4610      	moveq	r0, r2
   db844:	bd30      	pop	{r4, r5, pc}
   db846:	ea91 0f03 	teq	r1, r3
   db84a:	bf1e      	ittt	ne
   db84c:	2100      	movne	r1, #0
   db84e:	2000      	movne	r0, #0
   db850:	bd30      	popne	{r4, r5, pc}
   db852:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db856:	d105      	bne.n	db864 <__adddf3+0x230>
   db858:	0040      	lsls	r0, r0, #1
   db85a:	4149      	adcs	r1, r1
   db85c:	bf28      	it	cs
   db85e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db862:	bd30      	pop	{r4, r5, pc}
   db864:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db868:	bf3c      	itt	cc
   db86a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db86e:	bd30      	popcc	{r4, r5, pc}
   db870:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db874:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db87c:	f04f 0000 	mov.w	r0, #0
   db880:	bd30      	pop	{r4, r5, pc}
   db882:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db886:	bf1a      	itte	ne
   db888:	4619      	movne	r1, r3
   db88a:	4610      	movne	r0, r2
   db88c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db890:	bf1c      	itt	ne
   db892:	460b      	movne	r3, r1
   db894:	4602      	movne	r2, r0
   db896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db89a:	bf06      	itte	eq
   db89c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db8a0:	ea91 0f03 	teqeq	r1, r3
   db8a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db8a8:	bd30      	pop	{r4, r5, pc}
   db8aa:	bf00      	nop

000db8ac <__aeabi_ui2d>:
   db8ac:	f090 0f00 	teq	r0, #0
   db8b0:	bf04      	itt	eq
   db8b2:	2100      	moveq	r1, #0
   db8b4:	4770      	bxeq	lr
   db8b6:	b530      	push	{r4, r5, lr}
   db8b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db8bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db8c0:	f04f 0500 	mov.w	r5, #0
   db8c4:	f04f 0100 	mov.w	r1, #0
   db8c8:	e750      	b.n	db76c <__adddf3+0x138>
   db8ca:	bf00      	nop

000db8cc <__aeabi_i2d>:
   db8cc:	f090 0f00 	teq	r0, #0
   db8d0:	bf04      	itt	eq
   db8d2:	2100      	moveq	r1, #0
   db8d4:	4770      	bxeq	lr
   db8d6:	b530      	push	{r4, r5, lr}
   db8d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db8dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db8e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db8e4:	bf48      	it	mi
   db8e6:	4240      	negmi	r0, r0
   db8e8:	f04f 0100 	mov.w	r1, #0
   db8ec:	e73e      	b.n	db76c <__adddf3+0x138>
   db8ee:	bf00      	nop

000db8f0 <__aeabi_f2d>:
   db8f0:	0042      	lsls	r2, r0, #1
   db8f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db8f6:	ea4f 0131 	mov.w	r1, r1, rrx
   db8fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db8fe:	bf1f      	itttt	ne
   db900:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db904:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db908:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db90c:	4770      	bxne	lr
   db90e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db912:	bf08      	it	eq
   db914:	4770      	bxeq	lr
   db916:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db91a:	bf04      	itt	eq
   db91c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db920:	4770      	bxeq	lr
   db922:	b530      	push	{r4, r5, lr}
   db924:	f44f 7460 	mov.w	r4, #896	; 0x380
   db928:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db92c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db930:	e71c      	b.n	db76c <__adddf3+0x138>
   db932:	bf00      	nop

000db934 <__aeabi_ul2d>:
   db934:	ea50 0201 	orrs.w	r2, r0, r1
   db938:	bf08      	it	eq
   db93a:	4770      	bxeq	lr
   db93c:	b530      	push	{r4, r5, lr}
   db93e:	f04f 0500 	mov.w	r5, #0
   db942:	e00a      	b.n	db95a <__aeabi_l2d+0x16>

000db944 <__aeabi_l2d>:
   db944:	ea50 0201 	orrs.w	r2, r0, r1
   db948:	bf08      	it	eq
   db94a:	4770      	bxeq	lr
   db94c:	b530      	push	{r4, r5, lr}
   db94e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db952:	d502      	bpl.n	db95a <__aeabi_l2d+0x16>
   db954:	4240      	negs	r0, r0
   db956:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db95a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db95e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db962:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db966:	f43f aed8 	beq.w	db71a <__adddf3+0xe6>
   db96a:	f04f 0203 	mov.w	r2, #3
   db96e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db972:	bf18      	it	ne
   db974:	3203      	addne	r2, #3
   db976:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db97a:	bf18      	it	ne
   db97c:	3203      	addne	r2, #3
   db97e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db982:	f1c2 0320 	rsb	r3, r2, #32
   db986:	fa00 fc03 	lsl.w	ip, r0, r3
   db98a:	fa20 f002 	lsr.w	r0, r0, r2
   db98e:	fa01 fe03 	lsl.w	lr, r1, r3
   db992:	ea40 000e 	orr.w	r0, r0, lr
   db996:	fa21 f102 	lsr.w	r1, r1, r2
   db99a:	4414      	add	r4, r2
   db99c:	e6bd      	b.n	db71a <__adddf3+0xe6>
   db99e:	bf00      	nop

000db9a0 <__aeabi_dmul>:
   db9a0:	b570      	push	{r4, r5, r6, lr}
   db9a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db9a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db9aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db9ae:	bf1d      	ittte	ne
   db9b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db9b4:	ea94 0f0c 	teqne	r4, ip
   db9b8:	ea95 0f0c 	teqne	r5, ip
   db9bc:	f000 f8de 	bleq	dbb7c <__aeabi_dmul+0x1dc>
   db9c0:	442c      	add	r4, r5
   db9c2:	ea81 0603 	eor.w	r6, r1, r3
   db9c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db9ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db9ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db9d2:	bf18      	it	ne
   db9d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db9d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db9dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db9e0:	d038      	beq.n	dba54 <__aeabi_dmul+0xb4>
   db9e2:	fba0 ce02 	umull	ip, lr, r0, r2
   db9e6:	f04f 0500 	mov.w	r5, #0
   db9ea:	fbe1 e502 	umlal	lr, r5, r1, r2
   db9ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db9f2:	fbe0 e503 	umlal	lr, r5, r0, r3
   db9f6:	f04f 0600 	mov.w	r6, #0
   db9fa:	fbe1 5603 	umlal	r5, r6, r1, r3
   db9fe:	f09c 0f00 	teq	ip, #0
   dba02:	bf18      	it	ne
   dba04:	f04e 0e01 	orrne.w	lr, lr, #1
   dba08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dba0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dba10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dba14:	d204      	bcs.n	dba20 <__aeabi_dmul+0x80>
   dba16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dba1a:	416d      	adcs	r5, r5
   dba1c:	eb46 0606 	adc.w	r6, r6, r6
   dba20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dba24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dba28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dba2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dba30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dba34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dba38:	bf88      	it	hi
   dba3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dba3e:	d81e      	bhi.n	dba7e <__aeabi_dmul+0xde>
   dba40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dba44:	bf08      	it	eq
   dba46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dba4a:	f150 0000 	adcs.w	r0, r0, #0
   dba4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dba52:	bd70      	pop	{r4, r5, r6, pc}
   dba54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dba58:	ea46 0101 	orr.w	r1, r6, r1
   dba5c:	ea40 0002 	orr.w	r0, r0, r2
   dba60:	ea81 0103 	eor.w	r1, r1, r3
   dba64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dba68:	bfc2      	ittt	gt
   dba6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dba6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dba72:	bd70      	popgt	{r4, r5, r6, pc}
   dba74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dba78:	f04f 0e00 	mov.w	lr, #0
   dba7c:	3c01      	subs	r4, #1
   dba7e:	f300 80ab 	bgt.w	dbbd8 <__aeabi_dmul+0x238>
   dba82:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dba86:	bfde      	ittt	le
   dba88:	2000      	movle	r0, #0
   dba8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dba8e:	bd70      	pople	{r4, r5, r6, pc}
   dba90:	f1c4 0400 	rsb	r4, r4, #0
   dba94:	3c20      	subs	r4, #32
   dba96:	da35      	bge.n	dbb04 <__aeabi_dmul+0x164>
   dba98:	340c      	adds	r4, #12
   dba9a:	dc1b      	bgt.n	dbad4 <__aeabi_dmul+0x134>
   dba9c:	f104 0414 	add.w	r4, r4, #20
   dbaa0:	f1c4 0520 	rsb	r5, r4, #32
   dbaa4:	fa00 f305 	lsl.w	r3, r0, r5
   dbaa8:	fa20 f004 	lsr.w	r0, r0, r4
   dbaac:	fa01 f205 	lsl.w	r2, r1, r5
   dbab0:	ea40 0002 	orr.w	r0, r0, r2
   dbab4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dbab8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbabc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbac0:	fa21 f604 	lsr.w	r6, r1, r4
   dbac4:	eb42 0106 	adc.w	r1, r2, r6
   dbac8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbacc:	bf08      	it	eq
   dbace:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbad2:	bd70      	pop	{r4, r5, r6, pc}
   dbad4:	f1c4 040c 	rsb	r4, r4, #12
   dbad8:	f1c4 0520 	rsb	r5, r4, #32
   dbadc:	fa00 f304 	lsl.w	r3, r0, r4
   dbae0:	fa20 f005 	lsr.w	r0, r0, r5
   dbae4:	fa01 f204 	lsl.w	r2, r1, r4
   dbae8:	ea40 0002 	orr.w	r0, r0, r2
   dbaec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbaf0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbaf4:	f141 0100 	adc.w	r1, r1, #0
   dbaf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbafc:	bf08      	it	eq
   dbafe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbb02:	bd70      	pop	{r4, r5, r6, pc}
   dbb04:	f1c4 0520 	rsb	r5, r4, #32
   dbb08:	fa00 f205 	lsl.w	r2, r0, r5
   dbb0c:	ea4e 0e02 	orr.w	lr, lr, r2
   dbb10:	fa20 f304 	lsr.w	r3, r0, r4
   dbb14:	fa01 f205 	lsl.w	r2, r1, r5
   dbb18:	ea43 0302 	orr.w	r3, r3, r2
   dbb1c:	fa21 f004 	lsr.w	r0, r1, r4
   dbb20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbb24:	fa21 f204 	lsr.w	r2, r1, r4
   dbb28:	ea20 0002 	bic.w	r0, r0, r2
   dbb2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dbb30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbb34:	bf08      	it	eq
   dbb36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbb3a:	bd70      	pop	{r4, r5, r6, pc}
   dbb3c:	f094 0f00 	teq	r4, #0
   dbb40:	d10f      	bne.n	dbb62 <__aeabi_dmul+0x1c2>
   dbb42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dbb46:	0040      	lsls	r0, r0, #1
   dbb48:	eb41 0101 	adc.w	r1, r1, r1
   dbb4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbb50:	bf08      	it	eq
   dbb52:	3c01      	subeq	r4, #1
   dbb54:	d0f7      	beq.n	dbb46 <__aeabi_dmul+0x1a6>
   dbb56:	ea41 0106 	orr.w	r1, r1, r6
   dbb5a:	f095 0f00 	teq	r5, #0
   dbb5e:	bf18      	it	ne
   dbb60:	4770      	bxne	lr
   dbb62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dbb66:	0052      	lsls	r2, r2, #1
   dbb68:	eb43 0303 	adc.w	r3, r3, r3
   dbb6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dbb70:	bf08      	it	eq
   dbb72:	3d01      	subeq	r5, #1
   dbb74:	d0f7      	beq.n	dbb66 <__aeabi_dmul+0x1c6>
   dbb76:	ea43 0306 	orr.w	r3, r3, r6
   dbb7a:	4770      	bx	lr
   dbb7c:	ea94 0f0c 	teq	r4, ip
   dbb80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbb84:	bf18      	it	ne
   dbb86:	ea95 0f0c 	teqne	r5, ip
   dbb8a:	d00c      	beq.n	dbba6 <__aeabi_dmul+0x206>
   dbb8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbb90:	bf18      	it	ne
   dbb92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbb96:	d1d1      	bne.n	dbb3c <__aeabi_dmul+0x19c>
   dbb98:	ea81 0103 	eor.w	r1, r1, r3
   dbb9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbba0:	f04f 0000 	mov.w	r0, #0
   dbba4:	bd70      	pop	{r4, r5, r6, pc}
   dbba6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbbaa:	bf06      	itte	eq
   dbbac:	4610      	moveq	r0, r2
   dbbae:	4619      	moveq	r1, r3
   dbbb0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbbb4:	d019      	beq.n	dbbea <__aeabi_dmul+0x24a>
   dbbb6:	ea94 0f0c 	teq	r4, ip
   dbbba:	d102      	bne.n	dbbc2 <__aeabi_dmul+0x222>
   dbbbc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dbbc0:	d113      	bne.n	dbbea <__aeabi_dmul+0x24a>
   dbbc2:	ea95 0f0c 	teq	r5, ip
   dbbc6:	d105      	bne.n	dbbd4 <__aeabi_dmul+0x234>
   dbbc8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dbbcc:	bf1c      	itt	ne
   dbbce:	4610      	movne	r0, r2
   dbbd0:	4619      	movne	r1, r3
   dbbd2:	d10a      	bne.n	dbbea <__aeabi_dmul+0x24a>
   dbbd4:	ea81 0103 	eor.w	r1, r1, r3
   dbbd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbbdc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbbe0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbbe4:	f04f 0000 	mov.w	r0, #0
   dbbe8:	bd70      	pop	{r4, r5, r6, pc}
   dbbea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbbee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dbbf2:	bd70      	pop	{r4, r5, r6, pc}

000dbbf4 <__aeabi_ddiv>:
   dbbf4:	b570      	push	{r4, r5, r6, lr}
   dbbf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbbfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbbfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbc02:	bf1d      	ittte	ne
   dbc04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbc08:	ea94 0f0c 	teqne	r4, ip
   dbc0c:	ea95 0f0c 	teqne	r5, ip
   dbc10:	f000 f8a7 	bleq	dbd62 <__aeabi_ddiv+0x16e>
   dbc14:	eba4 0405 	sub.w	r4, r4, r5
   dbc18:	ea81 0e03 	eor.w	lr, r1, r3
   dbc1c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbc20:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbc24:	f000 8088 	beq.w	dbd38 <__aeabi_ddiv+0x144>
   dbc28:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbc2c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dbc30:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dbc34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dbc38:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dbc3c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dbc40:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dbc44:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dbc48:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dbc4c:	429d      	cmp	r5, r3
   dbc4e:	bf08      	it	eq
   dbc50:	4296      	cmpeq	r6, r2
   dbc52:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dbc56:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dbc5a:	d202      	bcs.n	dbc62 <__aeabi_ddiv+0x6e>
   dbc5c:	085b      	lsrs	r3, r3, #1
   dbc5e:	ea4f 0232 	mov.w	r2, r2, rrx
   dbc62:	1ab6      	subs	r6, r6, r2
   dbc64:	eb65 0503 	sbc.w	r5, r5, r3
   dbc68:	085b      	lsrs	r3, r3, #1
   dbc6a:	ea4f 0232 	mov.w	r2, r2, rrx
   dbc6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dbc72:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dbc76:	ebb6 0e02 	subs.w	lr, r6, r2
   dbc7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbc7e:	bf22      	ittt	cs
   dbc80:	1ab6      	subcs	r6, r6, r2
   dbc82:	4675      	movcs	r5, lr
   dbc84:	ea40 000c 	orrcs.w	r0, r0, ip
   dbc88:	085b      	lsrs	r3, r3, #1
   dbc8a:	ea4f 0232 	mov.w	r2, r2, rrx
   dbc8e:	ebb6 0e02 	subs.w	lr, r6, r2
   dbc92:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbc96:	bf22      	ittt	cs
   dbc98:	1ab6      	subcs	r6, r6, r2
   dbc9a:	4675      	movcs	r5, lr
   dbc9c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dbca0:	085b      	lsrs	r3, r3, #1
   dbca2:	ea4f 0232 	mov.w	r2, r2, rrx
   dbca6:	ebb6 0e02 	subs.w	lr, r6, r2
   dbcaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbcae:	bf22      	ittt	cs
   dbcb0:	1ab6      	subcs	r6, r6, r2
   dbcb2:	4675      	movcs	r5, lr
   dbcb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dbcb8:	085b      	lsrs	r3, r3, #1
   dbcba:	ea4f 0232 	mov.w	r2, r2, rrx
   dbcbe:	ebb6 0e02 	subs.w	lr, r6, r2
   dbcc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbcc6:	bf22      	ittt	cs
   dbcc8:	1ab6      	subcs	r6, r6, r2
   dbcca:	4675      	movcs	r5, lr
   dbccc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbcd0:	ea55 0e06 	orrs.w	lr, r5, r6
   dbcd4:	d018      	beq.n	dbd08 <__aeabi_ddiv+0x114>
   dbcd6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dbcda:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dbcde:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dbce2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dbce6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dbcea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dbcee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dbcf2:	d1c0      	bne.n	dbc76 <__aeabi_ddiv+0x82>
   dbcf4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbcf8:	d10b      	bne.n	dbd12 <__aeabi_ddiv+0x11e>
   dbcfa:	ea41 0100 	orr.w	r1, r1, r0
   dbcfe:	f04f 0000 	mov.w	r0, #0
   dbd02:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dbd06:	e7b6      	b.n	dbc76 <__aeabi_ddiv+0x82>
   dbd08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbd0c:	bf04      	itt	eq
   dbd0e:	4301      	orreq	r1, r0
   dbd10:	2000      	moveq	r0, #0
   dbd12:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbd16:	bf88      	it	hi
   dbd18:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbd1c:	f63f aeaf 	bhi.w	dba7e <__aeabi_dmul+0xde>
   dbd20:	ebb5 0c03 	subs.w	ip, r5, r3
   dbd24:	bf04      	itt	eq
   dbd26:	ebb6 0c02 	subseq.w	ip, r6, r2
   dbd2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbd2e:	f150 0000 	adcs.w	r0, r0, #0
   dbd32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbd36:	bd70      	pop	{r4, r5, r6, pc}
   dbd38:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dbd3c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dbd40:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dbd44:	bfc2      	ittt	gt
   dbd46:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbd4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbd4e:	bd70      	popgt	{r4, r5, r6, pc}
   dbd50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbd54:	f04f 0e00 	mov.w	lr, #0
   dbd58:	3c01      	subs	r4, #1
   dbd5a:	e690      	b.n	dba7e <__aeabi_dmul+0xde>
   dbd5c:	ea45 0e06 	orr.w	lr, r5, r6
   dbd60:	e68d      	b.n	dba7e <__aeabi_dmul+0xde>
   dbd62:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbd66:	ea94 0f0c 	teq	r4, ip
   dbd6a:	bf08      	it	eq
   dbd6c:	ea95 0f0c 	teqeq	r5, ip
   dbd70:	f43f af3b 	beq.w	dbbea <__aeabi_dmul+0x24a>
   dbd74:	ea94 0f0c 	teq	r4, ip
   dbd78:	d10a      	bne.n	dbd90 <__aeabi_ddiv+0x19c>
   dbd7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbd7e:	f47f af34 	bne.w	dbbea <__aeabi_dmul+0x24a>
   dbd82:	ea95 0f0c 	teq	r5, ip
   dbd86:	f47f af25 	bne.w	dbbd4 <__aeabi_dmul+0x234>
   dbd8a:	4610      	mov	r0, r2
   dbd8c:	4619      	mov	r1, r3
   dbd8e:	e72c      	b.n	dbbea <__aeabi_dmul+0x24a>
   dbd90:	ea95 0f0c 	teq	r5, ip
   dbd94:	d106      	bne.n	dbda4 <__aeabi_ddiv+0x1b0>
   dbd96:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbd9a:	f43f aefd 	beq.w	dbb98 <__aeabi_dmul+0x1f8>
   dbd9e:	4610      	mov	r0, r2
   dbda0:	4619      	mov	r1, r3
   dbda2:	e722      	b.n	dbbea <__aeabi_dmul+0x24a>
   dbda4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbda8:	bf18      	it	ne
   dbdaa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbdae:	f47f aec5 	bne.w	dbb3c <__aeabi_dmul+0x19c>
   dbdb2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dbdb6:	f47f af0d 	bne.w	dbbd4 <__aeabi_dmul+0x234>
   dbdba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dbdbe:	f47f aeeb 	bne.w	dbb98 <__aeabi_dmul+0x1f8>
   dbdc2:	e712      	b.n	dbbea <__aeabi_dmul+0x24a>

000dbdc4 <__aeabi_d2iz>:
   dbdc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbdc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbdcc:	d215      	bcs.n	dbdfa <__aeabi_d2iz+0x36>
   dbdce:	d511      	bpl.n	dbdf4 <__aeabi_d2iz+0x30>
   dbdd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbdd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbdd8:	d912      	bls.n	dbe00 <__aeabi_d2iz+0x3c>
   dbdda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbdde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbde2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbde6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbdea:	fa23 f002 	lsr.w	r0, r3, r2
   dbdee:	bf18      	it	ne
   dbdf0:	4240      	negne	r0, r0
   dbdf2:	4770      	bx	lr
   dbdf4:	f04f 0000 	mov.w	r0, #0
   dbdf8:	4770      	bx	lr
   dbdfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbdfe:	d105      	bne.n	dbe0c <__aeabi_d2iz+0x48>
   dbe00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dbe04:	bf08      	it	eq
   dbe06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbe0a:	4770      	bx	lr
   dbe0c:	f04f 0000 	mov.w	r0, #0
   dbe10:	4770      	bx	lr
   dbe12:	bf00      	nop

000dbe14 <__aeabi_d2uiz>:
   dbe14:	004a      	lsls	r2, r1, #1
   dbe16:	d211      	bcs.n	dbe3c <__aeabi_d2uiz+0x28>
   dbe18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbe1c:	d211      	bcs.n	dbe42 <__aeabi_d2uiz+0x2e>
   dbe1e:	d50d      	bpl.n	dbe3c <__aeabi_d2uiz+0x28>
   dbe20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbe24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbe28:	d40e      	bmi.n	dbe48 <__aeabi_d2uiz+0x34>
   dbe2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbe2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbe32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbe36:	fa23 f002 	lsr.w	r0, r3, r2
   dbe3a:	4770      	bx	lr
   dbe3c:	f04f 0000 	mov.w	r0, #0
   dbe40:	4770      	bx	lr
   dbe42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbe46:	d102      	bne.n	dbe4e <__aeabi_d2uiz+0x3a>
   dbe48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbe4c:	4770      	bx	lr
   dbe4e:	f04f 0000 	mov.w	r0, #0
   dbe52:	4770      	bx	lr

000dbe54 <__aeabi_d2f>:
   dbe54:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbe58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dbe5c:	bf24      	itt	cs
   dbe5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dbe62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dbe66:	d90d      	bls.n	dbe84 <__aeabi_d2f+0x30>
   dbe68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dbe6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dbe70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dbe74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dbe78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dbe7c:	bf08      	it	eq
   dbe7e:	f020 0001 	biceq.w	r0, r0, #1
   dbe82:	4770      	bx	lr
   dbe84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dbe88:	d121      	bne.n	dbece <__aeabi_d2f+0x7a>
   dbe8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dbe8e:	bfbc      	itt	lt
   dbe90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dbe94:	4770      	bxlt	lr
   dbe96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbe9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dbe9e:	f1c2 0218 	rsb	r2, r2, #24
   dbea2:	f1c2 0c20 	rsb	ip, r2, #32
   dbea6:	fa10 f30c 	lsls.w	r3, r0, ip
   dbeaa:	fa20 f002 	lsr.w	r0, r0, r2
   dbeae:	bf18      	it	ne
   dbeb0:	f040 0001 	orrne.w	r0, r0, #1
   dbeb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbeb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dbebc:	fa03 fc0c 	lsl.w	ip, r3, ip
   dbec0:	ea40 000c 	orr.w	r0, r0, ip
   dbec4:	fa23 f302 	lsr.w	r3, r3, r2
   dbec8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dbecc:	e7cc      	b.n	dbe68 <__aeabi_d2f+0x14>
   dbece:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dbed2:	d107      	bne.n	dbee4 <__aeabi_d2f+0x90>
   dbed4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dbed8:	bf1e      	ittt	ne
   dbeda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dbede:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dbee2:	4770      	bxne	lr
   dbee4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dbee8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dbeec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dbef0:	4770      	bx	lr
   dbef2:	bf00      	nop

000dbef4 <__aeabi_f2lz>:
   dbef4:	ee07 0a90 	vmov	s15, r0
   dbef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dbefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbf00:	d401      	bmi.n	dbf06 <__aeabi_f2lz+0x12>
   dbf02:	f000 b80b 	b.w	dbf1c <__aeabi_f2ulz>
   dbf06:	eef1 7a67 	vneg.f32	s15, s15
   dbf0a:	b508      	push	{r3, lr}
   dbf0c:	ee17 0a90 	vmov	r0, s15
   dbf10:	f000 f804 	bl	dbf1c <__aeabi_f2ulz>
   dbf14:	4240      	negs	r0, r0
   dbf16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbf1a:	bd08      	pop	{r3, pc}

000dbf1c <__aeabi_f2ulz>:
   dbf1c:	b5d0      	push	{r4, r6, r7, lr}
   dbf1e:	f7ff fce7 	bl	db8f0 <__aeabi_f2d>
   dbf22:	4b0c      	ldr	r3, [pc, #48]	; (dbf54 <__aeabi_f2ulz+0x38>)
   dbf24:	2200      	movs	r2, #0
   dbf26:	4606      	mov	r6, r0
   dbf28:	460f      	mov	r7, r1
   dbf2a:	f7ff fd39 	bl	db9a0 <__aeabi_dmul>
   dbf2e:	f7ff ff71 	bl	dbe14 <__aeabi_d2uiz>
   dbf32:	4604      	mov	r4, r0
   dbf34:	f7ff fcba 	bl	db8ac <__aeabi_ui2d>
   dbf38:	4b07      	ldr	r3, [pc, #28]	; (dbf58 <__aeabi_f2ulz+0x3c>)
   dbf3a:	2200      	movs	r2, #0
   dbf3c:	f7ff fd30 	bl	db9a0 <__aeabi_dmul>
   dbf40:	4602      	mov	r2, r0
   dbf42:	460b      	mov	r3, r1
   dbf44:	4630      	mov	r0, r6
   dbf46:	4639      	mov	r1, r7
   dbf48:	f7ff fb72 	bl	db630 <__aeabi_dsub>
   dbf4c:	f7ff ff62 	bl	dbe14 <__aeabi_d2uiz>
   dbf50:	4621      	mov	r1, r4
   dbf52:	bdd0      	pop	{r4, r6, r7, pc}
   dbf54:	3df00000 	.word	0x3df00000
   dbf58:	41f00000 	.word	0x41f00000

000dbf5c <asctime_r>:
   dbf5c:	b510      	push	{r4, lr}
   dbf5e:	460c      	mov	r4, r1
   dbf60:	6941      	ldr	r1, [r0, #20]
   dbf62:	6903      	ldr	r3, [r0, #16]
   dbf64:	6982      	ldr	r2, [r0, #24]
   dbf66:	b086      	sub	sp, #24
   dbf68:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dbf6c:	9104      	str	r1, [sp, #16]
   dbf6e:	6801      	ldr	r1, [r0, #0]
   dbf70:	9103      	str	r1, [sp, #12]
   dbf72:	6841      	ldr	r1, [r0, #4]
   dbf74:	9102      	str	r1, [sp, #8]
   dbf76:	6881      	ldr	r1, [r0, #8]
   dbf78:	9101      	str	r1, [sp, #4]
   dbf7a:	68c1      	ldr	r1, [r0, #12]
   dbf7c:	9100      	str	r1, [sp, #0]
   dbf7e:	4907      	ldr	r1, [pc, #28]	; (dbf9c <asctime_r+0x40>)
   dbf80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dbf84:	440b      	add	r3, r1
   dbf86:	4906      	ldr	r1, [pc, #24]	; (dbfa0 <asctime_r+0x44>)
   dbf88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dbf8c:	440a      	add	r2, r1
   dbf8e:	4620      	mov	r0, r4
   dbf90:	4904      	ldr	r1, [pc, #16]	; (dbfa4 <asctime_r+0x48>)
   dbf92:	f7fc fa3b 	bl	d840c <siprintf>
   dbf96:	4620      	mov	r0, r4
   dbf98:	b006      	add	sp, #24
   dbf9a:	bd10      	pop	{r4, pc}
   dbf9c:	000dcfce 	.word	0x000dcfce
   dbfa0:	000dcfb9 	.word	0x000dcfb9
   dbfa4:	000dcf99 	.word	0x000dcf99

000dbfa8 <atoi>:
   dbfa8:	220a      	movs	r2, #10
   dbfaa:	2100      	movs	r1, #0
   dbfac:	f000 b976 	b.w	dc29c <strtol>

000dbfb0 <__cxa_atexit>:
   dbfb0:	b510      	push	{r4, lr}
   dbfb2:	4c05      	ldr	r4, [pc, #20]	; (dbfc8 <__cxa_atexit+0x18>)
   dbfb4:	4613      	mov	r3, r2
   dbfb6:	b12c      	cbz	r4, dbfc4 <__cxa_atexit+0x14>
   dbfb8:	460a      	mov	r2, r1
   dbfba:	4601      	mov	r1, r0
   dbfbc:	2002      	movs	r0, #2
   dbfbe:	f3af 8000 	nop.w
   dbfc2:	bd10      	pop	{r4, pc}
   dbfc4:	4620      	mov	r0, r4
   dbfc6:	e7fc      	b.n	dbfc2 <__cxa_atexit+0x12>
   dbfc8:	00000000 	.word	0x00000000

000dbfcc <gmtime>:
   dbfcc:	b538      	push	{r3, r4, r5, lr}
   dbfce:	4b07      	ldr	r3, [pc, #28]	; (dbfec <gmtime+0x20>)
   dbfd0:	681d      	ldr	r5, [r3, #0]
   dbfd2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dbfd4:	4604      	mov	r4, r0
   dbfd6:	b91b      	cbnz	r3, dbfe0 <gmtime+0x14>
   dbfd8:	2024      	movs	r0, #36	; 0x24
   dbfda:	f7fc f9ff 	bl	d83dc <malloc>
   dbfde:	63e8      	str	r0, [r5, #60]	; 0x3c
   dbfe0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dbfe2:	4620      	mov	r0, r4
   dbfe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbfe8:	f7fc ba50 	b.w	d848c <gmtime_r>
   dbfec:	2003e2b8 	.word	0x2003e2b8

000dbff0 <memcpy>:
   dbff0:	440a      	add	r2, r1
   dbff2:	4291      	cmp	r1, r2
   dbff4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dbff8:	d100      	bne.n	dbffc <memcpy+0xc>
   dbffa:	4770      	bx	lr
   dbffc:	b510      	push	{r4, lr}
   dbffe:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc002:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc006:	4291      	cmp	r1, r2
   dc008:	d1f9      	bne.n	dbffe <memcpy+0xe>
   dc00a:	bd10      	pop	{r4, pc}

000dc00c <memmove>:
   dc00c:	4288      	cmp	r0, r1
   dc00e:	b510      	push	{r4, lr}
   dc010:	eb01 0402 	add.w	r4, r1, r2
   dc014:	d902      	bls.n	dc01c <memmove+0x10>
   dc016:	4284      	cmp	r4, r0
   dc018:	4623      	mov	r3, r4
   dc01a:	d807      	bhi.n	dc02c <memmove+0x20>
   dc01c:	1e43      	subs	r3, r0, #1
   dc01e:	42a1      	cmp	r1, r4
   dc020:	d008      	beq.n	dc034 <memmove+0x28>
   dc022:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc026:	f803 2f01 	strb.w	r2, [r3, #1]!
   dc02a:	e7f8      	b.n	dc01e <memmove+0x12>
   dc02c:	4402      	add	r2, r0
   dc02e:	4601      	mov	r1, r0
   dc030:	428a      	cmp	r2, r1
   dc032:	d100      	bne.n	dc036 <memmove+0x2a>
   dc034:	bd10      	pop	{r4, pc}
   dc036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dc03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dc03e:	e7f7      	b.n	dc030 <memmove+0x24>

000dc040 <memset>:
   dc040:	4402      	add	r2, r0
   dc042:	4603      	mov	r3, r0
   dc044:	4293      	cmp	r3, r2
   dc046:	d100      	bne.n	dc04a <memset+0xa>
   dc048:	4770      	bx	lr
   dc04a:	f803 1b01 	strb.w	r1, [r3], #1
   dc04e:	e7f9      	b.n	dc044 <memset+0x4>

000dc050 <srand>:
   dc050:	b538      	push	{r3, r4, r5, lr}
   dc052:	4b0d      	ldr	r3, [pc, #52]	; (dc088 <srand+0x38>)
   dc054:	681d      	ldr	r5, [r3, #0]
   dc056:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc058:	4604      	mov	r4, r0
   dc05a:	b97b      	cbnz	r3, dc07c <srand+0x2c>
   dc05c:	2018      	movs	r0, #24
   dc05e:	f7fc f9bd 	bl	d83dc <malloc>
   dc062:	4a0a      	ldr	r2, [pc, #40]	; (dc08c <srand+0x3c>)
   dc064:	4b0a      	ldr	r3, [pc, #40]	; (dc090 <srand+0x40>)
   dc066:	63a8      	str	r0, [r5, #56]	; 0x38
   dc068:	e9c0 2300 	strd	r2, r3, [r0]
   dc06c:	4b09      	ldr	r3, [pc, #36]	; (dc094 <srand+0x44>)
   dc06e:	6083      	str	r3, [r0, #8]
   dc070:	230b      	movs	r3, #11
   dc072:	8183      	strh	r3, [r0, #12]
   dc074:	2201      	movs	r2, #1
   dc076:	2300      	movs	r3, #0
   dc078:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc07c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc07e:	2200      	movs	r2, #0
   dc080:	611c      	str	r4, [r3, #16]
   dc082:	615a      	str	r2, [r3, #20]
   dc084:	bd38      	pop	{r3, r4, r5, pc}
   dc086:	bf00      	nop
   dc088:	2003e2b8 	.word	0x2003e2b8
   dc08c:	abcd330e 	.word	0xabcd330e
   dc090:	e66d1234 	.word	0xe66d1234
   dc094:	0005deec 	.word	0x0005deec

000dc098 <strchr>:
   dc098:	b2c9      	uxtb	r1, r1
   dc09a:	4603      	mov	r3, r0
   dc09c:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc0a0:	b11a      	cbz	r2, dc0aa <strchr+0x12>
   dc0a2:	428a      	cmp	r2, r1
   dc0a4:	d1f9      	bne.n	dc09a <strchr+0x2>
   dc0a6:	4618      	mov	r0, r3
   dc0a8:	4770      	bx	lr
   dc0aa:	2900      	cmp	r1, #0
   dc0ac:	bf18      	it	ne
   dc0ae:	2300      	movne	r3, #0
   dc0b0:	e7f9      	b.n	dc0a6 <strchr+0xe>

000dc0b2 <strchrnul>:
   dc0b2:	b510      	push	{r4, lr}
   dc0b4:	4604      	mov	r4, r0
   dc0b6:	f7ff ffef 	bl	dc098 <strchr>
   dc0ba:	b918      	cbnz	r0, dc0c4 <strchrnul+0x12>
   dc0bc:	4620      	mov	r0, r4
   dc0be:	f000 f832 	bl	dc126 <strlen>
   dc0c2:	4420      	add	r0, r4
   dc0c4:	bd10      	pop	{r4, pc}

000dc0c6 <strcmp>:
   dc0c6:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc0ca:	f811 3b01 	ldrb.w	r3, [r1], #1
   dc0ce:	2a01      	cmp	r2, #1
   dc0d0:	bf28      	it	cs
   dc0d2:	429a      	cmpcs	r2, r3
   dc0d4:	d0f7      	beq.n	dc0c6 <strcmp>
   dc0d6:	1ad0      	subs	r0, r2, r3
   dc0d8:	4770      	bx	lr

000dc0da <strcpy>:
   dc0da:	4603      	mov	r3, r0
   dc0dc:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc0e0:	f803 2b01 	strb.w	r2, [r3], #1
   dc0e4:	2a00      	cmp	r2, #0
   dc0e6:	d1f9      	bne.n	dc0dc <strcpy+0x2>
   dc0e8:	4770      	bx	lr
	...

000dc0ec <strdup>:
   dc0ec:	4b02      	ldr	r3, [pc, #8]	; (dc0f8 <strdup+0xc>)
   dc0ee:	4601      	mov	r1, r0
   dc0f0:	6818      	ldr	r0, [r3, #0]
   dc0f2:	f000 b803 	b.w	dc0fc <_strdup_r>
   dc0f6:	bf00      	nop
   dc0f8:	2003e2b8 	.word	0x2003e2b8

000dc0fc <_strdup_r>:
   dc0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc0fe:	4604      	mov	r4, r0
   dc100:	4608      	mov	r0, r1
   dc102:	460d      	mov	r5, r1
   dc104:	f000 f80f 	bl	dc126 <strlen>
   dc108:	1c42      	adds	r2, r0, #1
   dc10a:	4611      	mov	r1, r2
   dc10c:	4620      	mov	r0, r4
   dc10e:	9201      	str	r2, [sp, #4]
   dc110:	f7fc f99c 	bl	d844c <_malloc_r>
   dc114:	4604      	mov	r4, r0
   dc116:	b118      	cbz	r0, dc120 <_strdup_r+0x24>
   dc118:	9a01      	ldr	r2, [sp, #4]
   dc11a:	4629      	mov	r1, r5
   dc11c:	f7ff ff68 	bl	dbff0 <memcpy>
   dc120:	4620      	mov	r0, r4
   dc122:	b003      	add	sp, #12
   dc124:	bd30      	pop	{r4, r5, pc}

000dc126 <strlen>:
   dc126:	4603      	mov	r3, r0
   dc128:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc12c:	2a00      	cmp	r2, #0
   dc12e:	d1fb      	bne.n	dc128 <strlen+0x2>
   dc130:	1a18      	subs	r0, r3, r0
   dc132:	3801      	subs	r0, #1
   dc134:	4770      	bx	lr

000dc136 <strncmp>:
   dc136:	b510      	push	{r4, lr}
   dc138:	b16a      	cbz	r2, dc156 <strncmp+0x20>
   dc13a:	3901      	subs	r1, #1
   dc13c:	1884      	adds	r4, r0, r2
   dc13e:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc142:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dc146:	4293      	cmp	r3, r2
   dc148:	d103      	bne.n	dc152 <strncmp+0x1c>
   dc14a:	42a0      	cmp	r0, r4
   dc14c:	d001      	beq.n	dc152 <strncmp+0x1c>
   dc14e:	2b00      	cmp	r3, #0
   dc150:	d1f5      	bne.n	dc13e <strncmp+0x8>
   dc152:	1a98      	subs	r0, r3, r2
   dc154:	bd10      	pop	{r4, pc}
   dc156:	4610      	mov	r0, r2
   dc158:	e7fc      	b.n	dc154 <strncmp+0x1e>

000dc15a <strncpy>:
   dc15a:	b510      	push	{r4, lr}
   dc15c:	3901      	subs	r1, #1
   dc15e:	4603      	mov	r3, r0
   dc160:	b132      	cbz	r2, dc170 <strncpy+0x16>
   dc162:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc166:	f803 4b01 	strb.w	r4, [r3], #1
   dc16a:	3a01      	subs	r2, #1
   dc16c:	2c00      	cmp	r4, #0
   dc16e:	d1f7      	bne.n	dc160 <strncpy+0x6>
   dc170:	441a      	add	r2, r3
   dc172:	2100      	movs	r1, #0
   dc174:	4293      	cmp	r3, r2
   dc176:	d100      	bne.n	dc17a <strncpy+0x20>
   dc178:	bd10      	pop	{r4, pc}
   dc17a:	f803 1b01 	strb.w	r1, [r3], #1
   dc17e:	e7f9      	b.n	dc174 <strncpy+0x1a>

000dc180 <strrchr>:
   dc180:	b538      	push	{r3, r4, r5, lr}
   dc182:	4603      	mov	r3, r0
   dc184:	460c      	mov	r4, r1
   dc186:	b969      	cbnz	r1, dc1a4 <strrchr+0x24>
   dc188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc18c:	f7ff bf84 	b.w	dc098 <strchr>
   dc190:	1c43      	adds	r3, r0, #1
   dc192:	4605      	mov	r5, r0
   dc194:	4621      	mov	r1, r4
   dc196:	4618      	mov	r0, r3
   dc198:	f7ff ff7e 	bl	dc098 <strchr>
   dc19c:	2800      	cmp	r0, #0
   dc19e:	d1f7      	bne.n	dc190 <strrchr+0x10>
   dc1a0:	4628      	mov	r0, r5
   dc1a2:	bd38      	pop	{r3, r4, r5, pc}
   dc1a4:	2500      	movs	r5, #0
   dc1a6:	e7f5      	b.n	dc194 <strrchr+0x14>

000dc1a8 <_strtol_l.isra.0>:
   dc1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc1ac:	4e3a      	ldr	r6, [pc, #232]	; (dc298 <_strtol_l.isra.0+0xf0>)
   dc1ae:	4686      	mov	lr, r0
   dc1b0:	468c      	mov	ip, r1
   dc1b2:	4660      	mov	r0, ip
   dc1b4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc1b8:	5da5      	ldrb	r5, [r4, r6]
   dc1ba:	f015 0508 	ands.w	r5, r5, #8
   dc1be:	d1f8      	bne.n	dc1b2 <_strtol_l.isra.0+0xa>
   dc1c0:	2c2d      	cmp	r4, #45	; 0x2d
   dc1c2:	d133      	bne.n	dc22c <_strtol_l.isra.0+0x84>
   dc1c4:	f89c 4000 	ldrb.w	r4, [ip]
   dc1c8:	f04f 0801 	mov.w	r8, #1
   dc1cc:	f100 0c02 	add.w	ip, r0, #2
   dc1d0:	2b00      	cmp	r3, #0
   dc1d2:	d05c      	beq.n	dc28e <_strtol_l.isra.0+0xe6>
   dc1d4:	2b10      	cmp	r3, #16
   dc1d6:	d10c      	bne.n	dc1f2 <_strtol_l.isra.0+0x4a>
   dc1d8:	2c30      	cmp	r4, #48	; 0x30
   dc1da:	d10a      	bne.n	dc1f2 <_strtol_l.isra.0+0x4a>
   dc1dc:	f89c 0000 	ldrb.w	r0, [ip]
   dc1e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc1e4:	2858      	cmp	r0, #88	; 0x58
   dc1e6:	d14d      	bne.n	dc284 <_strtol_l.isra.0+0xdc>
   dc1e8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc1ec:	2310      	movs	r3, #16
   dc1ee:	f10c 0c02 	add.w	ip, ip, #2
   dc1f2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dc1f6:	3f01      	subs	r7, #1
   dc1f8:	2600      	movs	r6, #0
   dc1fa:	fbb7 f9f3 	udiv	r9, r7, r3
   dc1fe:	4630      	mov	r0, r6
   dc200:	fb03 7a19 	mls	sl, r3, r9, r7
   dc204:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dc208:	2d09      	cmp	r5, #9
   dc20a:	d818      	bhi.n	dc23e <_strtol_l.isra.0+0x96>
   dc20c:	462c      	mov	r4, r5
   dc20e:	42a3      	cmp	r3, r4
   dc210:	dd24      	ble.n	dc25c <_strtol_l.isra.0+0xb4>
   dc212:	1c75      	adds	r5, r6, #1
   dc214:	d007      	beq.n	dc226 <_strtol_l.isra.0+0x7e>
   dc216:	4581      	cmp	r9, r0
   dc218:	d31d      	bcc.n	dc256 <_strtol_l.isra.0+0xae>
   dc21a:	d101      	bne.n	dc220 <_strtol_l.isra.0+0x78>
   dc21c:	45a2      	cmp	sl, r4
   dc21e:	db1a      	blt.n	dc256 <_strtol_l.isra.0+0xae>
   dc220:	fb00 4003 	mla	r0, r0, r3, r4
   dc224:	2601      	movs	r6, #1
   dc226:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc22a:	e7eb      	b.n	dc204 <_strtol_l.isra.0+0x5c>
   dc22c:	2c2b      	cmp	r4, #43	; 0x2b
   dc22e:	bf08      	it	eq
   dc230:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc234:	46a8      	mov	r8, r5
   dc236:	bf08      	it	eq
   dc238:	f100 0c02 	addeq.w	ip, r0, #2
   dc23c:	e7c8      	b.n	dc1d0 <_strtol_l.isra.0+0x28>
   dc23e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dc242:	2d19      	cmp	r5, #25
   dc244:	d801      	bhi.n	dc24a <_strtol_l.isra.0+0xa2>
   dc246:	3c37      	subs	r4, #55	; 0x37
   dc248:	e7e1      	b.n	dc20e <_strtol_l.isra.0+0x66>
   dc24a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dc24e:	2d19      	cmp	r5, #25
   dc250:	d804      	bhi.n	dc25c <_strtol_l.isra.0+0xb4>
   dc252:	3c57      	subs	r4, #87	; 0x57
   dc254:	e7db      	b.n	dc20e <_strtol_l.isra.0+0x66>
   dc256:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc25a:	e7e4      	b.n	dc226 <_strtol_l.isra.0+0x7e>
   dc25c:	1c73      	adds	r3, r6, #1
   dc25e:	d106      	bne.n	dc26e <_strtol_l.isra.0+0xc6>
   dc260:	2322      	movs	r3, #34	; 0x22
   dc262:	f8ce 3000 	str.w	r3, [lr]
   dc266:	4638      	mov	r0, r7
   dc268:	b942      	cbnz	r2, dc27c <_strtol_l.isra.0+0xd4>
   dc26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc26e:	f1b8 0f00 	cmp.w	r8, #0
   dc272:	d000      	beq.n	dc276 <_strtol_l.isra.0+0xce>
   dc274:	4240      	negs	r0, r0
   dc276:	2a00      	cmp	r2, #0
   dc278:	d0f7      	beq.n	dc26a <_strtol_l.isra.0+0xc2>
   dc27a:	b10e      	cbz	r6, dc280 <_strtol_l.isra.0+0xd8>
   dc27c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc280:	6011      	str	r1, [r2, #0]
   dc282:	e7f2      	b.n	dc26a <_strtol_l.isra.0+0xc2>
   dc284:	2430      	movs	r4, #48	; 0x30
   dc286:	2b00      	cmp	r3, #0
   dc288:	d1b3      	bne.n	dc1f2 <_strtol_l.isra.0+0x4a>
   dc28a:	2308      	movs	r3, #8
   dc28c:	e7b1      	b.n	dc1f2 <_strtol_l.isra.0+0x4a>
   dc28e:	2c30      	cmp	r4, #48	; 0x30
   dc290:	d0a4      	beq.n	dc1dc <_strtol_l.isra.0+0x34>
   dc292:	230a      	movs	r3, #10
   dc294:	e7ad      	b.n	dc1f2 <_strtol_l.isra.0+0x4a>
   dc296:	bf00      	nop
   dc298:	000dcff3 	.word	0x000dcff3

000dc29c <strtol>:
   dc29c:	4613      	mov	r3, r2
   dc29e:	460a      	mov	r2, r1
   dc2a0:	4601      	mov	r1, r0
   dc2a2:	4802      	ldr	r0, [pc, #8]	; (dc2ac <strtol+0x10>)
   dc2a4:	6800      	ldr	r0, [r0, #0]
   dc2a6:	f7ff bf7f 	b.w	dc1a8 <_strtol_l.isra.0>
   dc2aa:	bf00      	nop
   dc2ac:	2003e2b8 	.word	0x2003e2b8

000dc2b0 <dynalib_user>:
   dc2b0:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   dc2c0:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
   dc2d0:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
   dc2e0:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
   dc2f0:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
   dc300:	41435f45 424e5f54 6f4e0031 68432074     E_CAT_NB1.Not Ch
   dc310:	69677261 4300676e 67726168 44006465     arging.Charged.D
   dc320:	68637369 69677261 4600676e 746c7561     ischarging.Fault
   dc330:	63694400 656e6e6f 64657463 206f4e00     .Diconnected.No 
   dc340:	61746144 73655200 736e6f70 65522065     Data.Response Re
   dc350:	76696563 55006465 6f6e6b6e 72206e77     ceived.Unknown r
   dc360:	6f707365 2065736e 65636572 64656976     esponse recevied
   dc370:	00692520 64696255 2073746f 6b6f6f48      %i.Ubidots Hook
   dc380:	72614800 65522064 20746573 32206e69     .Hard Reset in 2
   dc390:	63657320 73646e6f 74655300 72655620      seconds.Set Ver
   dc3a0:	65736f62 646f4d20 6c430065 65726165     bose Mode.Cleare
   dc3b0:	65562064 736f6272 6f4d2065 4f006564     d Verbose Mode.O
   dc3c0:	206e6570 656d6974 74657320 206f7420     pen time set to 
   dc3d0:	44006925 796c6961 756f6320 7320746e     %i.Daily count s
   dc3e0:	74207465 6925206f 69614400 5300796c     et to %i.Daily.S
   dc3f0:	69736e65 69766974 73207974 74207465     ensitivity set t
   dc400:	6925206f 20692500 00636573 6f626544     o %i.%i sec.Debo
   dc410:	65636e75 74657320 206f7420 73206925     unce set to %i s
   dc420:	6e6f6365 4c007364 5020776f 7265776f     econds.Low Power
   dc430:	646f4d20 6f4e0065 6c616d72 65704f20      Mode.Normal Ope
   dc440:	69746172 00736e6f 20746f4e 20776f4c     rations.Not Low 
   dc450:	65776f50 6c430072 65726165 6e492064     Power.Cleared In
   dc460:	72726574 00747075 6e756f43 68202c74     terrupt.Count, h
   dc470:	6c72756f 25203a79 64202c69 796c6961     ourly: %i, daily
   dc480:	6925203a 68227b00 6c72756f 253a2279     : %i.{"hourly":%
   dc490:	22202c69 6c696164 253a2279 62222c69     i, "daily":%i,"b
   dc4a0:	65747461 3a227972 222c6925 3179656b     attery":%i,"key1
   dc4b0:	25223a22 222c2273 706d6574 69253a22     ":"%s","temp":%i
   dc4c0:	7222202c 74657365 253a2273 22202c69     , "resets":%i, "
   dc4d0:	72656c61 3a227374 222c6925 6d78616d     alerts":%i,"maxm
   dc4e0:	3a226e69 222c6925 6e6e6f63 74746365     in":%i,"connectt
   dc4f0:	22656d69 2c69253a 6d697422 61747365     ime":%i,"timesta
   dc500:	3a22706d 30756c25 007d3030 64696255     mp":%lu000}.Ubid
   dc510:	2d73746f 6e756f43 2d726574 6b6f6f48     ots-Counter-Hook
   dc520:	0031762d 53207325 2e32253a 25256630     -v1.%s S:%2.0f%%
   dc530:	3a51202c 302e3225 20252566 74655300     , Q:%2.0f%% .Set
   dc540:	6c6f5320 50207261 7265776f 4d206465      Solar Powered M
   dc550:	0065646f 61656c43 20646572 616c6f53     ode.Cleared Sola
   dc560:	6f502072 65726577 6f4d2064 4e006564     r Powered Mode.N
   dc570:	69250041 0030303a 736f6c43 20676e69     A.%i:00.Closing 
   dc580:	656d6974 74657320 206f7420 46006925     time set to %i.F
   dc590:	206d6f72 74207325 7325206f 61745300     rom %s to %s.Sta
   dc5a0:	54206574 736e6172 6f697469 7552006e     te Transition.Ru
   dc5b0:	6e696e6e 61440067 20796c69 61656c43     nning.Daily Clea
   dc5c0:	0070756e 64616f4c 20676e69 74737953     nup.Loading Syst
   dc5d0:	44206d65 75616665 0073746c 72756f48     em Defaults.Hour
   dc5e0:	6f43796c 00746e75 6e676953 52006c61     lyCount.Signal.R
   dc5f0:	74657365 6e756f43 65540074 7265706d     esetCount.Temper
   dc600:	72757461 65520065 7361656c 74730065     ature.Release.st
   dc610:	4f657461 67684366 776f6c00 65776f50     ateOfChg.lowPowe
   dc620:	646f4d72 6c430065 5465736f 00656d69     rMode.CloseTime.
   dc630:	72656c41 54007374 4f656d69 65736666     Alerts.TimeOffse
   dc640:	61420074 72657474 6e6f4379 74786574     t.BatteryContext
   dc650:	74657300 6c696144 756f4379 7200746e     .setDailyCount.r
   dc660:	74657365 6e756f43 48007374 52647261     esetCounts.HardR
   dc670:	74657365 6e655300 776f4e64 776f4c00     eset.SendNow.Low
   dc680:	65776f50 646f4d72 6f530065 2d72616c     PowerMode.Solar-
   dc690:	65646f4d 72655600 65736f62 646f4d2d     Mode.Verbose-Mod
   dc6a0:	65530065 69542d74 6f7a656d 5300656e     e.Set-Timezone.S
   dc6b0:	442d7465 664f5453 74657366 74655300     et-DSTOffset.Set
   dc6c0:	65704f2d 6d69546e 65530065 6c432d74     -OpenTime.Set-Cl
   dc6d0:	0065736f 2d746553 736e6553 76697469     ose.Set-Sensitiv
   dc6e0:	00797469 2d746553 6f626544 65636e75     ity.Set-Debounce
   dc6f0:	41524600 6554204d 45207473 726f7272     .FRAM Test Error
   dc700:	2e322500 55206631 52004354 61747365     .%2.1f UTC.Resta
   dc710:	64657472 65756420 206f7420 69702061     rted due to a pi
   dc720:	6572206e 00746573 74736552 65747261     n reset.Restarte
   dc730:	75642064 6f742065 75206120 20726573     d due to a user 
   dc740:	65736572 74530074 75747261 6f432070     reset.Startup Co
   dc750:	656c706d 63006574 64756f6c 6e6f6320     mplete.cloud con
   dc760:	7463656e 206e6f69 75736e75 73656363     nection unsucces
   dc770:	6c756673 6e6f4300 7463656e 69206465     sful.Connected i
   dc780:	6925206e 63657320 65430073 6c756c6c     n %i secs.Cellul
   dc790:	66007261 656c6961 6f742064 6e6f6320     ar.failed to con
   dc7a0:	7463656e 206f7420 756f6c63 64202c64     nect to cloud, d
   dc7b0:	676e696f 65656420 65722070 00746573     oing deep reset.
   dc7c0:	6f727245 74532072 20657461 7546202d     Error State - Fu
   dc7d0:	4d206c6c 6d65646f 73655220 53007465     ll Modem Reset.S
   dc7e0:	65746174 72724500 5320726f 65746174     tate.Error State
   dc7f0:	53202d20 65747379 6552206d 00746573      - System Reset.
   dc800:	2074754f 6d20666f 726f6d65 636f2079     Out of memory oc
   dc810:	72727563 73206465 3d657a69 4d006425     curred size=%d.M
   dc820:	726f6d65 00000079                       emory...

000dc828 <_ZTV5Timer>:
	...
   dc830:	000d43c5 000d4419 000d4209              .C...D...B..

000dc83c <_ZTVN5spark10LogHandlerE>:
	...
   dc84c:	000d40a5 000d40c9                       .@...@..

000dc854 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dc85c:	000d435d 000d4391 000da171 000d40cb     ]C...C..q....@..

000dc86c <_ZTV8MB85RC64>:
	...
   dc874:	000d423d 000d4251 000d7261 000d72f7     =B..QB..ar...r..
   dc884:	000d7379                                ys..

000dc888 <_ZTV17PublishQueueAsync>:
	...
   dc890:	000d4215 000d4229 000d76e1 000d786d     .B..)B...v..mx..
   dc8a0:	000d782d 000d780b 000d79b3 000d7853     -x...x...y..Sx..
   dc8b0:	000dc2c4 000dc2cc 000dc2d1 000dc2d6     ................
   dc8c0:	000dc2da 000dc2df 000dc2e4 000dc2e8     ................
   dc8d0:	000dc2f3 000dc2fe                       ........

000dc8d8 <_ZL17FRAMversionNumber>:
   dc8d8:	00000003 656d6954 6e6f7a20 666f2065     ....Time zone of
   dc8e8:	74657366 00692520 20545344 7366666f     fset %i.DST offs
   dc8f8:	25207465 66312e32 69616600 2064656c     et %2.1f.failed 
   dc908:	72206f74 20646165 41676572 3d726464     to read regAddr=
   dc918:	78323025 756f6320 253d746e 61660075     %02x count=%u.fa
   dc928:	64656c69 206f7420 64616572 67657220     iled to read reg
   dc938:	72646441 3230253d 74732078 253d7461     Addr=%02x stat=%
   dc948:	4f460064 64205455 6e206469 6720746f     d.FOUT did not g
   dc958:	4948206f 6e004847 6420746f 63657465     o HIGH.not detec
   dc968:	00646574 6c696166 74206465 7277206f     ted.failed to wr
   dc978:	20657469 41676572 3d726464 78323025     ite regAddr=%02x
   dc988:	61747320 64253d74 74657300 20544457      stat=%d.setWDT 
   dc998:	77006425 68637461 20676f64 61656c63     %d.watchdog clea
   dc9a8:	20646572 73655262 3d746c75 77006425     red bResult=%d.w
   dc9b8:	68637461 20676f64 20746573 72756f66     atchdog set four
   dc9c8:	73636553 2064253d 73655262 3d746c75     Secs=%d bResult=
   dc9d8:	57006425 48435441 00474f44 50454544     %d.WATCHDOG.DEEP
   dc9e8:	574f505f 445f5245 004e574f 4e554f43     _POWER_DOWN.COUN
   dc9f8:	574f4454 49545f4e 0052454d 52414c41     TDOWN_TIMER.ALAR
   dca08:	6166004d 72756c69 6e692065 64707520     M.failure in upd
   dca18:	57657461 52656b61 6f736165 6425206e     ateWakeReason %d
   dca28:	6b617700 65722065 6e6f7361 25203d20     .wake reason = %
   dca38:	61660073 72756c69 6e692065 74657320     s.failure in set
   dca48:	6e756f43 776f6474 6d69546e 25207265     CountdownTimer %
   dca58:	61660064 72756c69 6e692065 65656420     d.failure in dee
   dca68:	776f5070 6f447265 25206e77 45520064     pPowerDown %d.RE
   dca78:	4c535f47 5f504545 4c525443 2578303d     G_SLEEP_CTRL=0x%
   dca88:	64007832 276e6469 6f702074 20726577     2x.didn't power 
   dca98:	6e776f64 34302500 30252d64 252d6432     down.%04d-%02d-%
   dcaa8:	20643230 64323025 3230253a 30253a64     02d %02d:%02d:%0
   dcab8:	67006432 74527465 54734163 7325206d     2d.getRtcAsTm %s
   dcac8:	74657300 73797320 206d6574 636f6c63     .set system cloc
   dcad8:	7266206b 52206d6f 25204354 61660073     k from RTC %s.fa
   dcae8:	64656c69 206f7420 65746564 41207463     iled to detect A
   dcaf8:	30383142 65730035 63745274 6d547341     B1805.setRtcAsTm
   dcb08:	00732520 6c696166 20657275 73206e69      %s.failure in s
   dcb18:	74527465 6f724663 206d546d 73006425     etRtcFromTm %d.s
   dcb28:	52207465 66204354 206d6f72 756f6c63     et RTC from clou
   dcb38:	73252064 70706100 3162612e 00353038     d %s.app.ab1805.

000dcb48 <_ZTV6AB1805>:
	...
   dcb50:	000d66d5 000d66d7 000d6d21 000d6da7     .f...f..!m...m..
   dcb60:	74697277 74614465 61662061 64656c69     writeData failed
   dcb70:	72756420 20676e69 73617265 72662065      during erase fr
   dcb80:	64416d61 253d7264 00000075              amAddr=%u...

000dcb8c <_ZTV6MB85RC>:
	...
   dcb94:	000d71b1 000d71b3 000d7261 000d72f7     .q...q..ar...r..
   dcba4:	000d7379 6c627550 51687369 65756575     ys..PublishQueue
   dcbb4:	6e797341 75710063 69657565 6520676e     Async.queueing e
   dcbc4:	746e6576 656d614e 2073253d 61746164     ventName=%s data
   dcbd4:	2073253d 3d6c7474 66206425 7367616c     =%s ttl=%d flags
   dcbe4:	64253d31 616c6620 3d327367 73206425     1=%d flags2=%d s
   dcbf4:	3d657a69 70006425 696c6275 6e696873     ize=%d.publishin
   dcc04:	73252067 20732520 3d6c7474 66206425     g %s %s ttl=%d f
   dcc14:	7367616c 0078253d 6c627570 65687369     lags=%x.publishe
   dcc24:	75732064 73656363 6c756673 7000796c     d successfully.p
   dcc34:	696c6275 64656873 69616620 2c64656c     ublished failed,
   dcc44:	6c697720 6572206c 20797274 25206e69      will retry in %
   dcc54:	6d20756c 70610073 75702e70 00007162     lu ms.app.pubq..

000dcc64 <_ZTV21PublishQueueAsyncBase>:
	...
   dcc74:	000d76e1 000d40a5 000d40a5 000d40a5     .v...@...@...@..
   dcc84:	000d40a5 000d40a5                       .@...@..

000dcc8c <_ZTV25PublishQueueAsyncRetained>:
	...
   dcc94:	000d77c9 000d77dd 000d76e1 000d786d     .w...w...v..mx..
   dcca4:	000d782d 000d780b 000d79b3 000d7853     -x...x...y..Sx..

000dccb4 <_ZTVN5spark13CellularClassE>:
	...
   dccbc:	000d85c3 000d85b9 000d85af 000d8571     ............q...
   dcccc:	000d85a3 000d43a5 000da4c9 000da4d1     .....C..........
   dccdc:	000d8597 000d858f 000d8585 000d857b     ............{...
   dccec:	000da501                                ....

000dccf0 <_ZTV14CellularSignal>:
	...
   dccf8:	000d8671 000d8677 000d8673 000d8685     q...w...s.......
   dcd08:	000d86b9 000d86e5 000d8719 000d8769     ............i...
   dcd18:	fffffffc 00000000 000d878f              ............

000dcd24 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcd2c:	000d87af 000d87b5 000d87f3 000d87c3     ................
   dcd3c:	000d87b1                                ....

000dcd40 <_ZTVN5spark13EthernetClassE>:
	...
   dcd48:	000d8e23 000d8e19 000d8e0f 000d8e05     #...............
   dcd58:	000d8df9 000d8ded 000da4c9 000da4d1     ................
   dcd68:	000d8de1 000d8dd9 000d8dcf 000d8dc5     ................
   dcd78:	000da501                                ....

000dcd7c <_ZTV7TwoWire>:
	...
   dcd84:	000d8e89 000d8ed3 000d8eab 000d8e8b     ................
   dcd94:	000d8eb3 000d8ebb 000d8ec3 000d8ecb     ................

000dcda4 <_ZTV9IPAddress>:
	...
   dcdac:	000d9075 000d9065 000d9067 34302575     u...e...g...u%04
   dcdbc:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   dcdcc:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   dcddc:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   dcdec:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   dcdfc:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   dce0c:	20736c69 0d00203d 006d000a 66006e6c     ils = ....m.ln.f
   dce1c:	6f63006e 64006564 69617465 0000006c     n.code.detail...

000dce2c <_ZTVN5spark16JSONStreamWriterE>:
	...
   dce34:	000d952f 000d9555 000d9515 000d9175     /...U.......u...

000dce44 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dce4c:	000d9999 000d99b1 000da171 000d40cb     ........q....@..

000dce5c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dce64:	000d99c5 000d99d9 000da315 000d951d     ................

000dce74 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dce7c:	000d952d 000d9563 000da0ad 000d951f     -...c...........

000dce8c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dce94:	000d952b 000d9571 000d98e1 000d958d     +...q...........

000dcea4 <_ZTVN5spark12NetworkClassE>:
	...
   dceac:	000da489 000da493 000da49d 000da4a7     ................
   dcebc:	000da4b1 000da4bd 000da4c9 000da4d1     ................
   dcecc:	000da4d9 000da4e5 000da4ed 000da4f7     ................
   dcedc:	000da501 69726977 5300676e 65747379     ....wiring.Syste
   dceec:	6c73206d 20706565 666e6f63 72756769     m sleep configur
   dcefc:	6f697461 7369206e 766e6920 64696c61     ation is invalid
   dcf0c:	005a002e 33302b25 30253a64 25007532     ..Z.%+03d:%02u.%
   dcf1c:	6d252d59 5464252d 253a4825 53253a4d     Y-%m-%dT%H:%M:%S
   dcf2c:	61007a25 69746373 0000656d              %z.asctime..

000dcf38 <_ZTV11USARTSerial>:
	...
   dcf40:	000db06d 000db0d9 000db0b1 000da747     m...........G...
   dcf50:	000db081 000db09d 000db08f 000db0ab     ................
   dcf60:	000db06f 000db073                       o...s...

000dcf68 <_ZTV9USBSerial>:
	...
   dcf70:	000db181 000db1e9 000db1bf 000da747     ............G...
   dcf80:	000db1b1 000db183 000db193 000db1e3     ................
   dcf90:	000db1a3 000db17d                       ....}...

000dcf98 <_ZSt7nothrow>:
   dcf98:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   dcfa8:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000dcfb9 <day_name.6145>:
   dcfb9:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   dcfc9:	61536972                                 riSat

000dcfce <mon_name.6146>:
   dcfce:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   dcfde:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   dcfee:	63654476                                vDec

000dcff2 <_ctype_>:
   dcff2:	20202000 20202020 28282020 20282828     .         ((((( 
   dd002:	20202020 20202020 20202020 20202020                     
   dd012:	10108820 10101010 10101010 10101010      ...............
   dd022:	04040410 04040404 10040404 10101010     ................
   dd032:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dd042:	01010101 01010101 01010101 10101010     ................
   dd052:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dd062:	02020202 02020202 02020202 10101010     ................
   dd072:	00000020 00000000 00000000 00000000      ...............
	...

000dd0f3 <link_const_variable_data_end>:
	...

000dd0f4 <link_constructors_location>:
   dd0f4:	000d591d 	.word	0x000d591d
   dd0f8:	000d66c9 	.word	0x000d66c9
   dd0fc:	000d71a1 	.word	0x000d71a1
   dd100:	000d7c45 	.word	0x000d7c45
   dd104:	000d8549 	.word	0x000d8549
   dd108:	000d8641 	.word	0x000d8641
   dd10c:	000d8e2d 	.word	0x000d8e2d
   dd110:	000da161 	.word	0x000da161
   dd114:	000da5d5 	.word	0x000da5d5
   dd118:	000da861 	.word	0x000da861
   dd11c:	000dabd5 	.word	0x000dabd5
   dd120:	000db059 	.word	0x000db059

000dd124 <link_constructors_end>:
	...
