
/Users/chipmc/Documents/Maker/Particle/Projects/Frisbee-Golf-Counter/target/2.1.0/boron/Frisbee-Golf-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009ab0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000ddad0  000ddad0  0000dad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000804  2003f400  000ddad8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000124  2003e1d8  000de2dc  0001e1d8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004f8  2003e300  2003e300  0002e300  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000de400  000de400  0001e400  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000de42c  000de42c  0001e42c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001eb4a2  00000000  00000000  0001e430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001f7fe  00000000  00000000  002098d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003ba86  00000000  00000000  002290d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000035a8  00000000  00000000  00264b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000a1c0  00000000  00000000  002680fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00040f51  00000000  00000000  002722be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0005073e  00000000  00000000  002b320f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001185e9  00000000  00000000  0030394d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009904  00000000  00000000  0041bf38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 fc87 	bl	dc944 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 fca9 	bl	dc994 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1d8 	.word	0x2003e1d8
   d404c:	000de2dc 	.word	0x000de2dc
   d4050:	2003e2fc 	.word	0x2003e2fc
   d4054:	2003e300 	.word	0x2003e300
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 fbff 	bl	db864 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000ddaa0 	.word	0x000ddaa0
   d4080:	000ddad0 	.word	0x000ddad0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 bab0 	b.w	d55e8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 ff17 	bl	d5ebc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 bba9 	b.w	db7e8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 ba37 	b.w	d8508 <malloc>

000d409a <_Znaj>:
   d409a:	f004 ba35 	b.w	d8508 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 ba3b 	b.w	d8518 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 f8a8 	bl	d8200 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7ed1 	.word	0x000d7ed1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z18outOfMemoryHandleryi+0x8>)
   d40d6:	601a      	str	r2, [r3, #0]
}
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003e210 	.word	0x2003e210

000d40e0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e0:	6803      	ldr	r3, [r0, #0]
   d40e2:	4718      	bx	r3

000d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40e4:	2a01      	cmp	r2, #1
   d40e6:	d003      	beq.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40e8:	2a02      	cmp	r2, #2
   d40ea:	d003      	beq.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40ec:	2000      	movs	r0, #0
   d40ee:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f0:	6001      	str	r1, [r0, #0]
	      break;
   d40f2:	e7fb      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40f4:	680b      	ldr	r3, [r1, #0]
   d40f6:	6003      	str	r3, [r0, #0]
	}
   d40f8:	e7f8      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40fa <_Z19countSignalTimerISRv>:
  }
  else frontTireFlag = true;
}

void countSignalTimerISR() {
  digitalWrite(blueLED,LOW);
   d40fa:	2100      	movs	r1, #0
   d40fc:	2007      	movs	r0, #7
   d40fe:	f007 bc4a 	b.w	db996 <digitalWrite>
	...

000d4104 <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d4104:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d4106:	4b05      	ldr	r3, [pc, #20]	; (d411c <_Z21batteryContextMessagev+0x18>)
   d4108:	7b1a      	ldrb	r2, [r3, #12]
   d410a:	4b05      	ldr	r3, [pc, #20]	; (d4120 <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d410c:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d410e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d4112:	f006 fdaa 	bl	dac6a <_ZN6StringC1EPKc>
}
   d4116:	4620      	mov	r0, r4
   d4118:	bd10      	pop	{r4, pc}
   d411a:	bf00      	nop
   d411c:	2003e4c0 	.word	0x2003e4c0
   d4120:	2003e1d8 	.word	0x2003e1d8

000d4124 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4124:	b538      	push	{r3, r4, r5, lr}
   d4126:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4128:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d412a:	b128      	cbz	r0, d4138 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d412c:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d412e:	210c      	movs	r1, #12
   d4130:	f007 fcf9 	bl	dbb26 <_ZdlPvj>
            wakeupSource = next;
   d4134:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4136:	e7f8      	b.n	d412a <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4138:	4620      	mov	r0, r4
   d413a:	bd38      	pop	{r3, r4, r5, pc}

000d413c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d413c:	6943      	ldr	r3, [r0, #20]
   d413e:	b113      	cbz	r3, d4146 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4140:	6983      	ldr	r3, [r0, #24]
   d4142:	300c      	adds	r0, #12
   d4144:	4718      	bx	r3
            callback();
        }
    }
   d4146:	4770      	bx	lr

000d4148 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4148:	b510      	push	{r4, lr}
   d414a:	4b03      	ldr	r3, [pc, #12]	; (d4158 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d414c:	6003      	str	r3, [r0, #0]
   d414e:	4604      	mov	r4, r0
   d4150:	f003 fa78 	bl	d7644 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4154:	4620      	mov	r0, r4
   d4156:	bd10      	pop	{r4, pc}
   d4158:	000dd240 	.word	0x000dd240

000d415c <_ZN17PublishQueueAsyncD0Ev>:
   d415c:	b510      	push	{r4, lr}
   d415e:	4604      	mov	r4, r0
   d4160:	f7ff fff2 	bl	d4148 <_ZN17PublishQueueAsyncD1Ev>
   d4164:	4620      	mov	r0, r4
   d4166:	2138      	movs	r1, #56	; 0x38
   d4168:	f007 fcdd 	bl	dbb26 <_ZdlPvj>
   d416c:	4620      	mov	r0, r4
   d416e:	bd10      	pop	{r4, pc}

000d4170 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4170:	b510      	push	{r4, lr}
   d4172:	4b03      	ldr	r3, [pc, #12]	; (d4180 <_ZN8MB85RC64D1Ev+0x10>)
   d4174:	6003      	str	r3, [r0, #0]
   d4176:	4604      	mov	r4, r0
   d4178:	f003 f880 	bl	d727c <_ZN6MB85RCD1Ev>
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}
   d4180:	000dd224 	.word	0x000dd224

000d4184 <_ZN8MB85RC64D0Ev>:
   d4184:	b510      	push	{r4, lr}
   d4186:	4604      	mov	r4, r0
   d4188:	f7ff fff2 	bl	d4170 <_ZN8MB85RC64D1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	2110      	movs	r1, #16
   d4190:	f007 fcc9 	bl	dbb26 <_ZdlPvj>
   d4194:	4620      	mov	r0, r4
   d4196:	bd10      	pop	{r4, pc}

000d4198 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4198:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d419a:	2100      	movs	r1, #0
   d419c:	4604      	mov	r4, r0
   d419e:	4608      	mov	r0, r1
   d41a0:	f003 fdfe 	bl	d7da0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d41a4:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d41a6:	4620      	mov	r0, r4
   d41a8:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d41aa:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d41ac:	f003 fe10 	bl	d7dd0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d41b0:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d41b2:	b10c      	cbz	r4, d41b8 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d41b4:	2301      	movs	r3, #1
   d41b6:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d41b8:	2100      	movs	r1, #0
   d41ba:	2001      	movs	r0, #1
   d41bc:	f003 fdf0 	bl	d7da0 <os_thread_scheduling>
            }
        }
        if (t) {
   d41c0:	b12c      	cbz	r4, d41ce <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d41c2:	6823      	ldr	r3, [r4, #0]
   d41c4:	4620      	mov	r0, r4
   d41c6:	689b      	ldr	r3, [r3, #8]
   d41c8:	4798      	blx	r3
            t->running = false;
   d41ca:	2300      	movs	r3, #0
   d41cc:	7123      	strb	r3, [r4, #4]
        }
    }
   d41ce:	b002      	add	sp, #8
   d41d0:	bd10      	pop	{r4, pc}
	...

000d41d4 <_Z11resetCounts6String>:
{
   d41d4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d41d6:	490a      	ldr	r1, [pc, #40]	; (d4200 <_Z11resetCounts6String+0x2c>)
   d41d8:	f006 fe01 	bl	dadde <_ZNK6String6equalsEPKc>
   d41dc:	2300      	movs	r3, #0
  if (command == "1")
   d41de:	b168      	cbz	r0, d41fc <_Z11resetCounts6String+0x28>
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41e0:	4a08      	ldr	r2, [pc, #32]	; (d4204 <_Z11resetCounts6String+0x30>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41e2:	4909      	ldr	r1, [pc, #36]	; (d4208 <_Z11resetCounts6String+0x34>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d41e4:	6013      	str	r3, [r2, #0]
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d41e6:	6093      	str	r3, [r2, #8]
    current.alertCount = 0;                                           // Reset count variables
   d41e8:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d41ea:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d41ec:	4a07      	ldr	r2, [pc, #28]	; (d420c <_Z11resetCounts6String+0x38>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d41ee:	610b      	str	r3, [r1, #16]
    dataInFlight = false;
   d41f0:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d41f2:	4b07      	ldr	r3, [pc, #28]	; (d4210 <_Z11resetCounts6String+0x3c>)
   d41f4:	2001      	movs	r0, #1
   d41f6:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d41f8:	4b06      	ldr	r3, [pc, #24]	; (d4214 <_Z11resetCounts6String+0x40>)
   d41fa:	7018      	strb	r0, [r3, #0]
}
   d41fc:	bd08      	pop	{r3, pc}
   d41fe:	bf00      	nop
   d4200:	000dcc5c 	.word	0x000dcc5c
   d4204:	2003e3d8 	.word	0x2003e3d8
   d4208:	2003e4c0 	.word	0x2003e4c0
   d420c:	2003e40c 	.word	0x2003e40c
   d4210:	2003e3fc 	.word	0x2003e3fc
   d4214:	2003e4ec 	.word	0x2003e4ec

000d4218 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
   d4218:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d421a:	f004 f8c5 	bl	d83a8 <spark_cloud_flag_connected>
        if (!connected()) {
   d421e:	b120      	cbz	r0, d422a <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
   d4220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
   d4224:	2000      	movs	r0, #0
   d4226:	f004 b8df 	b.w	d83e8 <spark_sync_time>
    }
   d422a:	bd08      	pop	{r3, pc}

000d422c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d422c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d422e:	2000      	movs	r0, #0
   d4230:	f004 f8e2 	bl	d83f8 <spark_sync_time_pending>
   d4234:	b128      	cbz	r0, d4242 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4236:	f004 f8b7 	bl	d83a8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d423a:	f080 0001 	eor.w	r0, r0, #1
   d423e:	b2c0      	uxtb	r0, r0
    }
   d4240:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d4242:	2001      	movs	r0, #1
   d4244:	e7fc      	b.n	d4240 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4246:	2300      	movs	r3, #0
   d4248:	2204      	movs	r2, #4
   d424a:	f004 b88d 	b.w	d8368 <spark_variable>
	...

000d4250 <_Z9sensorISRv>:
  if (frontTireFlag || sysStatus.sensorType == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
   d4250:	4b10      	ldr	r3, [pc, #64]	; (d4294 <_Z9sensorISRv+0x44>)
   d4252:	7819      	ldrb	r1, [r3, #0]
   d4254:	461a      	mov	r2, r3
   d4256:	b921      	cbnz	r1, d4262 <_Z9sensorISRv+0x12>
   d4258:	490f      	ldr	r1, [pc, #60]	; (d4298 <_Z9sensorISRv+0x48>)
   d425a:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
   d425e:	2901      	cmp	r1, #1
   d4260:	d115      	bne.n	d428e <_Z9sensorISRv+0x3e>
    sensorDetect = true;                                              // sets the sensor flag for the main loop
   d4262:	4b0e      	ldr	r3, [pc, #56]	; (d429c <_Z9sensorISRv+0x4c>)
   d4264:	2101      	movs	r1, #1
   d4266:	7019      	strb	r1, [r3, #0]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }
   d4268:	4b0d      	ldr	r3, [pc, #52]	; (d42a0 <_Z9sensorISRv+0x50>)
   d426a:	e853 1f00 	ldrex	r1, [r3]
   d426e:	3101      	adds	r1, #1
   d4270:	e843 1000 	strex	r0, r1, [r3]
   d4274:	2800      	cmp	r0, #0
   d4276:	d1f8      	bne.n	d426a <_Z9sensorISRv+0x1a>
   d4278:	4b0a      	ldr	r3, [pc, #40]	; (d42a4 <_Z9sensorISRv+0x54>)
   d427a:	e853 1f00 	ldrex	r1, [r3]
   d427e:	3101      	adds	r1, #1
   d4280:	e843 1000 	strex	r0, r1, [r3]
   d4284:	2800      	cmp	r0, #0
   d4286:	d1f8      	bne.n	d427a <_Z9sensorISRv+0x2a>
    frontTireFlag = false;
   d4288:	2300      	movs	r3, #0
   d428a:	7013      	strb	r3, [r2, #0]
}
   d428c:	4770      	bx	lr
  else frontTireFlag = true;
   d428e:	2201      	movs	r2, #1
   d4290:	701a      	strb	r2, [r3, #0]
}
   d4292:	4770      	bx	lr
   d4294:	2003e36b 	.word	0x2003e36b
   d4298:	2003e4c0 	.word	0x2003e4c0
   d429c:	2003e4a4 	.word	0x2003e4a4
   d42a0:	2003e428 	.word	0x2003e428
   d42a4:	2003e408 	.word	0x2003e408

000d42a8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d42a8:	b530      	push	{r4, r5, lr}
   d42aa:	b085      	sub	sp, #20
   d42ac:	4603      	mov	r3, r0
   d42ae:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d42b0:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d42b2:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d42b4:	4798      	blx	r3
        size = str.length();
   d42b6:	9802      	ldr	r0, [sp, #8]
   d42b8:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d42ba:	f004 f925 	bl	d8508 <malloc>
   d42be:	6028      	str	r0, [r5, #0]
        if (!data) {
   d42c0:	b150      	cbz	r0, d42d8 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d42c2:	6822      	ldr	r2, [r4, #0]
   d42c4:	9900      	ldr	r1, [sp, #0]
   d42c6:	f008 fb3d 	bl	dc944 <memcpy>
        return 0;
   d42ca:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d42cc:	4668      	mov	r0, sp
   d42ce:	f006 fc81 	bl	dabd4 <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d42d2:	4620      	mov	r0, r4
   d42d4:	b005      	add	sp, #20
   d42d6:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d42d8:	4c00      	ldr	r4, [pc, #0]	; (d42dc <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d42da:	e7f7      	b.n	d42cc <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d42dc:	fffffefc 	.word	0xfffffefc

000d42e0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d42e0:	4b0a      	ldr	r3, [pc, #40]	; (d430c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d42e2:	b510      	push	{r4, lr}
   d42e4:	4604      	mov	r4, r0
   d42e6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d42e8:	f005 fb90 	bl	d9a0c <_ZN5spark10LogManager8instanceEv>
   d42ec:	4621      	mov	r1, r4
   d42ee:	f005 fd92 	bl	d9e16 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d42f2:	f007 f9f1 	bl	db6d8 <_Z16_fetch_usbserialv>
   d42f6:	f007 f9e3 	bl	db6c0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d42fa:	4620      	mov	r0, r4
   d42fc:	4b04      	ldr	r3, [pc, #16]	; (d4310 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d42fe:	f840 3b04 	str.w	r3, [r0], #4
   d4302:	f005 fc75 	bl	d9bf0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4306:	4620      	mov	r0, r4
   d4308:	bd10      	pop	{r4, pc}
   d430a:	bf00      	nop
   d430c:	000dd20c 	.word	0x000dd20c
   d4310:	000dd1f4 	.word	0x000dd1f4

000d4314 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4314:	b510      	push	{r4, lr}
   d4316:	4604      	mov	r4, r0
    }
   d4318:	f7ff ffe2 	bl	d42e0 <_ZN5spark16SerialLogHandlerD1Ev>
   d431c:	4620      	mov	r0, r4
   d431e:	2124      	movs	r1, #36	; 0x24
   d4320:	f007 fc01 	bl	dbb26 <_ZdlPvj>
   d4324:	4620      	mov	r0, r4
   d4326:	bd10      	pop	{r4, pc}

000d4328 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4328:	b510      	push	{r4, lr}
   d432a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d432c:	6800      	ldr	r0, [r0, #0]
   d432e:	b108      	cbz	r0, d4334 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4330:	f004 f8f2 	bl	d8518 <free>
class SystemClass {
   d4334:	4620      	mov	r0, r4
   d4336:	bd10      	pop	{r4, pc}

000d4338 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4338:	b510      	push	{r4, lr}
      if (_M_manager)
   d433a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d433c:	4604      	mov	r4, r0
      if (_M_manager)
   d433e:	b113      	cbz	r3, d4346 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4340:	2203      	movs	r2, #3
   d4342:	4601      	mov	r1, r0
   d4344:	4798      	blx	r3
    }
   d4346:	4620      	mov	r0, r4
   d4348:	bd10      	pop	{r4, pc}
	...

000d434c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d434c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d434e:	4b13      	ldr	r3, [pc, #76]	; (d439c <_ZN5TimerD1Ev+0x50>)
   d4350:	6003      	str	r3, [r0, #0]
   d4352:	4604      	mov	r4, r0
        if (handle) {
   d4354:	6880      	ldr	r0, [r0, #8]
   d4356:	b1c8      	cbz	r0, d438c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4358:	2500      	movs	r5, #0
   d435a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d435e:	e9cd 3500 	strd	r3, r5, [sp]
   d4362:	2102      	movs	r1, #2
   d4364:	462b      	mov	r3, r5
   d4366:	462a      	mov	r2, r5
   d4368:	f003 fd3a 	bl	d7de0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d436c:	68a0      	ldr	r0, [r4, #8]
   d436e:	4629      	mov	r1, r5
   d4370:	f003 fd86 	bl	d7e80 <os_timer_set_id>
            while (running) {
   d4374:	7923      	ldrb	r3, [r4, #4]
   d4376:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d437a:	b113      	cbz	r3, d4382 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d437c:	f003 fd08 	bl	d7d90 <os_thread_yield>
            while (running) {
   d4380:	e7f8      	b.n	d4374 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d4382:	68a0      	ldr	r0, [r4, #8]
   d4384:	4629      	mov	r1, r5
   d4386:	f003 fd1b 	bl	d7dc0 <os_timer_destroy>
            handle = nullptr;
   d438a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d438c:	f104 000c 	add.w	r0, r4, #12
   d4390:	f7ff ffd2 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
    }
   d4394:	4620      	mov	r0, r4
   d4396:	b003      	add	sp, #12
   d4398:	bd30      	pop	{r4, r5, pc}
   d439a:	bf00      	nop
   d439c:	000dd1e0 	.word	0x000dd1e0

000d43a0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d43a0:	b510      	push	{r4, lr}
   d43a2:	4604      	mov	r4, r0
    }
   d43a4:	f7ff ffd2 	bl	d434c <_ZN5TimerD1Ev>
   d43a8:	4620      	mov	r0, r4
   d43aa:	211c      	movs	r1, #28
   d43ac:	f007 fbbb 	bl	dbb26 <_ZdlPvj>
   d43b0:	4620      	mov	r0, r4
   d43b2:	bd10      	pop	{r4, pc}

000d43b4 <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d43b4:	b538      	push	{r3, r4, r5, lr}
   d43b6:	4604      	mov	r4, r0
            : conf_{} {
   d43b8:	2520      	movs	r5, #32
   d43ba:	462a      	mov	r2, r5
   d43bc:	2100      	movs	r1, #0
   d43be:	f008 fae9 	bl	dc994 <memset>
        conf_.size = sizeof(conf_);
   d43c2:	7165      	strb	r5, [r4, #5]
    }
   d43c4:	4620      	mov	r0, r4
   d43c6:	bd38      	pop	{r3, r4, r5, pc}

000d43c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d43c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d43ca:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d43cc:	4605      	mov	r5, r0
   d43ce:	460f      	mov	r7, r1
   d43d0:	4616      	mov	r6, r2
        if (valid_) {
   d43d2:	b18b      	cbz	r3, d43f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d43d4:	6803      	ldr	r3, [r0, #0]
   d43d6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d43d8:	b183      	cbz	r3, d43fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d43da:	889a      	ldrh	r2, [r3, #4]
   d43dc:	2a01      	cmp	r2, #1
   d43de:	d006      	beq.n	d43ee <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d43e0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d43e2:	e7f9      	b.n	d43d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d43e4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d43e6:	b14b      	cbz	r3, d43fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d43e8:	889a      	ldrh	r2, [r3, #4]
   d43ea:	2a01      	cmp	r2, #1
   d43ec:	d1fa      	bne.n	d43e4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d43ee:	b12b      	cbz	r3, d43fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d43f0:	899a      	ldrh	r2, [r3, #12]
   d43f2:	42ba      	cmp	r2, r7
   d43f4:	d1f6      	bne.n	d43e4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d43f6:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d43f8:	4628      	mov	r0, r5
   d43fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d43fc:	490a      	ldr	r1, [pc, #40]	; (d4428 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d43fe:	2010      	movs	r0, #16
   d4400:	f007 fb93 	bl	dbb2a <_ZnwjRKSt9nothrow_t>
   d4404:	4604      	mov	r4, r0
   d4406:	b168      	cbz	r0, d4424 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4408:	2210      	movs	r2, #16
   d440a:	2100      	movs	r1, #0
   d440c:	f008 fac2 	bl	dc994 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4410:	4b06      	ldr	r3, [pc, #24]	; (d442c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4412:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4414:	2301      	movs	r3, #1
   d4416:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4418:	692b      	ldr	r3, [r5, #16]
   d441a:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d441c:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d441e:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4420:	612c      	str	r4, [r5, #16]
   d4422:	e7e9      	b.n	d43f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4424:	7528      	strb	r0, [r5, #20]
                return *this;
   d4426:	e7e7      	b.n	d43f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d4428:	000dd944 	.word	0x000dd944
   d442c:	00030010 	.word	0x00030010

000d4430 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4430:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4432:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4434:	4605      	mov	r5, r0
   d4436:	460e      	mov	r6, r1
        if (valid_) {
   d4438:	b1cb      	cbz	r3, d446e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d443a:	6803      	ldr	r3, [r0, #0]
   d443c:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d443e:	b123      	cbz	r3, d444a <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4440:	889a      	ldrh	r2, [r3, #4]
   d4442:	2a04      	cmp	r2, #4
   d4444:	d017      	beq.n	d4476 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d4446:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4448:	e7f9      	b.n	d443e <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d444a:	490c      	ldr	r1, [pc, #48]	; (d447c <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d444c:	2010      	movs	r0, #16
   d444e:	f007 fb6c 	bl	dbb2a <_ZnwjRKSt9nothrow_t>
   d4452:	4604      	mov	r4, r0
   d4454:	b168      	cbz	r0, d4472 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d4456:	2210      	movs	r2, #16
   d4458:	2100      	movs	r1, #0
   d445a:	f008 fa9b 	bl	dc994 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d445e:	4b08      	ldr	r3, [pc, #32]	; (d4480 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d4460:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4462:	2304      	movs	r3, #4
   d4464:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4466:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4468:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d446a:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d446e:	4628      	mov	r0, r5
   d4470:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d4472:	7528      	strb	r0, [r5, #20]
                return *this;
   d4474:	e7fb      	b.n	d446e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4476:	60de      	str	r6, [r3, #12]
                return *this;
   d4478:	e7f9      	b.n	d446e <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d447a:	bf00      	nop
   d447c:	000dd944 	.word	0x000dd944
   d4480:	00030010 	.word	0x00030010

000d4484 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4484:	2000      	movs	r0, #0
   d4486:	f003 bd3b 	b.w	d7f00 <hal_timer_millis>
	...

000d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d448c:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d448e:	4801      	ldr	r0, [pc, #4]	; (d4494 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4490:	f004 ba78 	b.w	d8984 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4494:	000d8959 	.word	0x000d8959

000d4498 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4498:	b40e      	push	{r1, r2, r3}
   d449a:	b510      	push	{r4, lr}
   d449c:	b08d      	sub	sp, #52	; 0x34
   d449e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d44a0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d44a2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d44a6:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d44a8:	2300      	movs	r3, #0
   d44aa:	2020      	movs	r0, #32
   d44ac:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d44b0:	e9cd 4200 	strd	r4, r2, [sp]
   d44b4:	201e      	movs	r0, #30
   d44b6:	aa04      	add	r2, sp, #16
   d44b8:	f003 feb2 	bl	d8220 <log_message_v>
}
   d44bc:	b00d      	add	sp, #52	; 0x34
   d44be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d44c2:	b003      	add	sp, #12
   d44c4:	4770      	bx	lr

000d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44c8:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d44ca:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d44ce:	f88d 3000 	strb.w	r3, [sp]
   d44d2:	f88d 5004 	strb.w	r5, [sp, #4]
   d44d6:	68e4      	ldr	r4, [r4, #12]
   d44d8:	233c      	movs	r3, #60	; 0x3c
   d44da:	47a0      	blx	r4
	}
   d44dc:	b003      	add	sp, #12
   d44de:	bd30      	pop	{r4, r5, pc}

000d44e0 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d44e0:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d44e2:	780b      	ldrb	r3, [r1, #0]
   d44e4:	4d1c      	ldr	r5, [pc, #112]	; (d4558 <_Z14UbidotsHandlerPKcS0_+0x78>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d44e6:	b093      	sub	sp, #76	; 0x4c
   d44e8:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d44ea:	b993      	cbnz	r3, d4512 <_Z14UbidotsHandlerPKcS0_+0x32>
    snprintf(responseString, sizeof(responseString),"No Data");
   d44ec:	491b      	ldr	r1, [pc, #108]	; (d455c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d44ee:	a802      	add	r0, sp, #8
   d44f0:	f008 fa9d 	bl	dca2e <strcpy>
  if (sysStatus.verboseMode) publishQueue.publish("Ubidots Hook", responseString, PRIVATE, WITH_ACK);
   d44f4:	792b      	ldrb	r3, [r5, #4]
   d44f6:	b153      	cbz	r3, d450e <_Z14UbidotsHandlerPKcS0_+0x2e>
inline particle::Flag<TagT, ValueT>::operator ValueT() const {
    return val_;
}

template<typename TagT, typename ValueT>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d44f8:	4b19      	ldr	r3, [pc, #100]	; (d4560 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d44fa:	491a      	ldr	r1, [pc, #104]	; (d4564 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d44fc:	781b      	ldrb	r3, [r3, #0]
   d44fe:	f88d 3000 	strb.w	r3, [sp]
   d4502:	4b19      	ldr	r3, [pc, #100]	; (d4568 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4504:	4819      	ldr	r0, [pc, #100]	; (d456c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4506:	781b      	ldrb	r3, [r3, #0]
   d4508:	aa02      	add	r2, sp, #8
   d450a:	f7ff ffdc 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d450e:	b013      	add	sp, #76	; 0x4c
   d4510:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4512:	4608      	mov	r0, r1
   d4514:	f008 f9f2 	bl	dc8fc <atoi>
   d4518:	28c8      	cmp	r0, #200	; 0xc8
   d451a:	d10d      	bne.n	d4538 <_Z14UbidotsHandlerPKcS0_+0x58>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d451c:	4914      	ldr	r1, [pc, #80]	; (d4570 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d451e:	a802      	add	r0, sp, #8
   d4520:	f008 fa85 	bl	dca2e <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4524:	f006 ff91 	bl	db44a <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d4528:	4b12      	ldr	r3, [pc, #72]	; (d4574 <_Z14UbidotsHandlerPKcS0_+0x94>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d452a:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d452c:	2201      	movs	r2, #1
   d452e:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d4530:	4b11      	ldr	r3, [pc, #68]	; (d4578 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d4532:	2200      	movs	r2, #0
   d4534:	701a      	strb	r2, [r3, #0]
   d4536:	e7dd      	b.n	d44f4 <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4538:	4620      	mov	r0, r4
   d453a:	f008 f9df 	bl	dc8fc <atoi>
   d453e:	28c9      	cmp	r0, #201	; 0xc9
   d4540:	d0ec      	beq.n	d451c <_Z14UbidotsHandlerPKcS0_+0x3c>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4542:	4620      	mov	r0, r4
   d4544:	f008 f9da 	bl	dc8fc <atoi>
   d4548:	4a0c      	ldr	r2, [pc, #48]	; (d457c <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d454a:	4603      	mov	r3, r0
   d454c:	2140      	movs	r1, #64	; 0x40
   d454e:	a802      	add	r0, sp, #8
   d4550:	f003 fffa 	bl	d8548 <snprintf>
   d4554:	e7ce      	b.n	d44f4 <_Z14UbidotsHandlerPKcS0_+0x14>
   d4556:	bf00      	nop
   d4558:	2003e4c0 	.word	0x2003e4c0
   d455c:	000dcc91 	.word	0x000dcc91
   d4560:	2003e369 	.word	0x2003e369
   d4564:	000dccc8 	.word	0x000dccc8
   d4568:	2003e368 	.word	0x2003e368
   d456c:	2003e468 	.word	0x2003e468
   d4570:	000dcc99 	.word	0x000dcc99
   d4574:	2003e4ec 	.word	0x2003e4ec
   d4578:	2003e40c 	.word	0x2003e40c
   d457c:	000dccab 	.word	0x000dccab

000d4580 <_Z12hardResetNow6String>:
{
   d4580:	b507      	push	{r0, r1, r2, lr}
   d4582:	490b      	ldr	r1, [pc, #44]	; (d45b0 <_Z12hardResetNow6String+0x30>)
   d4584:	f006 fc2b 	bl	dadde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4588:	b170      	cbz	r0, d45a8 <_Z12hardResetNow6String+0x28>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d458a:	2300      	movs	r3, #0
   d458c:	f88d 3000 	strb.w	r3, [sp]
   d4590:	4b08      	ldr	r3, [pc, #32]	; (d45b4 <_Z12hardResetNow6String+0x34>)
   d4592:	4a09      	ldr	r2, [pc, #36]	; (d45b8 <_Z12hardResetNow6String+0x38>)
   d4594:	781b      	ldrb	r3, [r3, #0]
   d4596:	4909      	ldr	r1, [pc, #36]	; (d45bc <_Z12hardResetNow6String+0x3c>)
   d4598:	4809      	ldr	r0, [pc, #36]	; (d45c0 <_Z12hardResetNow6String+0x40>)
   d459a:	f7ff ff94 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    ab1805.deepPowerDown(10);
   d459e:	4809      	ldr	r0, [pc, #36]	; (d45c4 <_Z12hardResetNow6String+0x44>)
   d45a0:	210a      	movs	r1, #10
   d45a2:	f002 fb75 	bl	d6c90 <_ZN6AB180513deepPowerDownEi>
   d45a6:	2001      	movs	r0, #1
}
   d45a8:	b003      	add	sp, #12
   d45aa:	f85d fb04 	ldr.w	pc, [sp], #4
   d45ae:	bf00      	nop
   d45b0:	000dcc5c 	.word	0x000dcc5c
   d45b4:	2003e368 	.word	0x2003e368
   d45b8:	000dccd5 	.word	0x000dccd5
   d45bc:	000dd166 	.word	0x000dd166
   d45c0:	2003e468 	.word	0x2003e468
   d45c4:	2003e36c 	.word	0x2003e36c

000d45c8 <_Z13setSensorType6String>:
{
   d45c8:	b513      	push	{r0, r1, r4, lr}
   d45ca:	4923      	ldr	r1, [pc, #140]	; (d4658 <_Z13setSensorType6String+0x90>)
   d45cc:	4604      	mov	r4, r0
   d45ce:	f006 fc06 	bl	dadde <_ZNK6String6equalsEPKc>
  if (command == "0")
   d45d2:	b318      	cbz	r0, d461c <_Z13setSensorType6String+0x54>
    sysStatus.sensorType = 0;
   d45d4:	4b21      	ldr	r3, [pc, #132]	; (d465c <_Z13setSensorType6String+0x94>)
   d45d6:	2200      	movs	r2, #0
   d45d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    strncpy(sensorTypeConfigStr,"Pressure Sensor", sizeof(sensorTypeConfigStr));
   d45dc:	4b20      	ldr	r3, [pc, #128]	; (d4660 <_Z13setSensorType6String+0x98>)
   d45de:	4a21      	ldr	r2, [pc, #132]	; (d4664 <_Z13setSensorType6String+0x9c>)
   d45e0:	f103 0110 	add.w	r1, r3, #16
   d45e4:	f853 0b04 	ldr.w	r0, [r3], #4
   d45e8:	f842 0b04 	str.w	r0, [r2], #4
   d45ec:	428b      	cmp	r3, r1
   d45ee:	d1f9      	bne.n	d45e4 <_Z13setSensorType6String+0x1c>
    systemStatusWriteNeeded=true;
   d45f0:	4b1d      	ldr	r3, [pc, #116]	; (d4668 <_Z13setSensorType6String+0xa0>)
   d45f2:	2401      	movs	r4, #1
   d45f4:	701c      	strb	r4, [r3, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d45f6:	f003 fed7 	bl	d83a8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Sensor Mode to Pressure", PRIVATE, WITH_ACK);
   d45fa:	b910      	cbnz	r0, d4602 <_Z13setSensorType6String+0x3a>
    return 1;
   d45fc:	2001      	movs	r0, #1
}
   d45fe:	b002      	add	sp, #8
   d4600:	bd10      	pop	{r4, pc}
   d4602:	4b1a      	ldr	r3, [pc, #104]	; (d466c <_Z13setSensorType6String+0xa4>)
    if (Particle.connected()) publishQueue.publish("Mode","Set Sensor Mode to Pressure", PRIVATE, WITH_ACK);
   d4604:	4a1a      	ldr	r2, [pc, #104]	; (d4670 <_Z13setSensorType6String+0xa8>)
   d4606:	781b      	ldrb	r3, [r3, #0]
   d4608:	f88d 3000 	strb.w	r3, [sp]
   d460c:	4b19      	ldr	r3, [pc, #100]	; (d4674 <_Z13setSensorType6String+0xac>)
   d460e:	781b      	ldrb	r3, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set Sensor Mode to PIR", PRIVATE, WITH_ACK);
   d4610:	4919      	ldr	r1, [pc, #100]	; (d4678 <_Z13setSensorType6String+0xb0>)
   d4612:	481a      	ldr	r0, [pc, #104]	; (d467c <_Z13setSensorType6String+0xb4>)
   d4614:	f7ff ff57 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4618:	4620      	mov	r0, r4
   d461a:	e7f0      	b.n	d45fe <_Z13setSensorType6String+0x36>
   d461c:	4918      	ldr	r1, [pc, #96]	; (d4680 <_Z13setSensorType6String+0xb8>)
   d461e:	4620      	mov	r0, r4
   d4620:	f006 fbdd 	bl	dadde <_ZNK6String6equalsEPKc>
  else if (command == "1")
   d4624:	2800      	cmp	r0, #0
   d4626:	d0ea      	beq.n	d45fe <_Z13setSensorType6String+0x36>
    sysStatus.sensorType = 1;
   d4628:	4b0c      	ldr	r3, [pc, #48]	; (d465c <_Z13setSensorType6String+0x94>)
    strncpy(sensorTypeConfigStr,"PIR Sensor", sizeof(sensorTypeConfigStr));
   d462a:	4916      	ldr	r1, [pc, #88]	; (d4684 <_Z13setSensorType6String+0xbc>)
   d462c:	480d      	ldr	r0, [pc, #52]	; (d4664 <_Z13setSensorType6String+0x9c>)
    sysStatus.sensorType = 1;
   d462e:	2401      	movs	r4, #1
    strncpy(sensorTypeConfigStr,"PIR Sensor", sizeof(sensorTypeConfigStr));
   d4630:	2210      	movs	r2, #16
    sysStatus.sensorType = 1;
   d4632:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a
    strncpy(sensorTypeConfigStr,"PIR Sensor", sizeof(sensorTypeConfigStr));
   d4636:	f008 fa3a 	bl	dcaae <strncpy>
    systemStatusWriteNeeded=true;
   d463a:	4b0b      	ldr	r3, [pc, #44]	; (d4668 <_Z13setSensorType6String+0xa0>)
   d463c:	701c      	strb	r4, [r3, #0]
   d463e:	f003 feb3 	bl	d83a8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Sensor Mode to PIR", PRIVATE, WITH_ACK);
   d4642:	2800      	cmp	r0, #0
   d4644:	d0da      	beq.n	d45fc <_Z13setSensorType6String+0x34>
   d4646:	4b09      	ldr	r3, [pc, #36]	; (d466c <_Z13setSensorType6String+0xa4>)
   d4648:	4a0f      	ldr	r2, [pc, #60]	; (d4688 <_Z13setSensorType6String+0xc0>)
   d464a:	781b      	ldrb	r3, [r3, #0]
   d464c:	f88d 3000 	strb.w	r3, [sp]
   d4650:	4b08      	ldr	r3, [pc, #32]	; (d4674 <_Z13setSensorType6String+0xac>)
   d4652:	781b      	ldrb	r3, [r3, #0]
   d4654:	e7dc      	b.n	d4610 <_Z13setSensorType6String+0x48>
   d4656:	bf00      	nop
   d4658:	000dcf16 	.word	0x000dcf16
   d465c:	2003e4c0 	.word	0x2003e4c0
   d4660:	000dcd2b 	.word	0x000dcd2b
   d4664:	2003e4a5 	.word	0x2003e4a5
   d4668:	2003e4ec 	.word	0x2003e4ec
   d466c:	2003e369 	.word	0x2003e369
   d4670:	000dcced 	.word	0x000dcced
   d4674:	2003e368 	.word	0x2003e368
   d4678:	000dcf0a 	.word	0x000dcf0a
   d467c:	2003e468 	.word	0x2003e468
   d4680:	000dcc5c 	.word	0x000dcc5c
   d4684:	000dcd09 	.word	0x000dcd09
   d4688:	000dcd14 	.word	0x000dcd14

000d468c <_Z11setOpenTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setOpenTime(String command)
   d468c:	b500      	push	{lr}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  makeUpParkHourStrings();                                                    // Create the strings for the console
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d468e:	4b0c      	ldr	r3, [pc, #48]	; (d46c0 <_Z11setOpenTime6String.part.0+0x34>)
   d4690:	4a0c      	ldr	r2, [pc, #48]	; (d46c4 <_Z11setOpenTime6String.part.0+0x38>)
   d4692:	7f1b      	ldrb	r3, [r3, #28]
int setOpenTime(String command)
   d4694:	b0c3      	sub	sp, #268	; 0x10c
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4696:	f44f 7180 	mov.w	r1, #256	; 0x100
   d469a:	a802      	add	r0, sp, #8
   d469c:	f003 ff54 	bl	d8548 <snprintf>
   d46a0:	4b09      	ldr	r3, [pc, #36]	; (d46c8 <_Z11setOpenTime6String.part.0+0x3c>)
    publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d46a2:	490a      	ldr	r1, [pc, #40]	; (d46cc <_Z11setOpenTime6String.part.0+0x40>)
   d46a4:	781b      	ldrb	r3, [r3, #0]
   d46a6:	f88d 3000 	strb.w	r3, [sp]
   d46aa:	4b09      	ldr	r3, [pc, #36]	; (d46d0 <_Z11setOpenTime6String.part.0+0x44>)
   d46ac:	4809      	ldr	r0, [pc, #36]	; (d46d4 <_Z11setOpenTime6String.part.0+0x48>)
   d46ae:	781b      	ldrb	r3, [r3, #0]
   d46b0:	aa02      	add	r2, sp, #8
   d46b2:	f7ff ff08 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d46b6:	2001      	movs	r0, #1
   d46b8:	b043      	add	sp, #268	; 0x10c
   d46ba:	f85d fb04 	ldr.w	pc, [sp], #4
   d46be:	bf00      	nop
   d46c0:	2003e4c0 	.word	0x2003e4c0
   d46c4:	000dcd3b 	.word	0x000dcd3b
   d46c8:	2003e369 	.word	0x2003e369
   d46cc:	000dd043 	.word	0x000dd043
   d46d0:	2003e368 	.word	0x2003e368
   d46d4:	2003e468 	.word	0x2003e468

000d46d8 <_Z13setDailyCount6String>:
 * Inputs outside of "0" - "1000" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setDailyCount(String command)
{
   d46d8:	b530      	push	{r4, r5, lr}
   d46da:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempCount = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d46dc:	6800      	ldr	r0, [r0, #0]
   d46de:	220a      	movs	r2, #10
   d46e0:	a903      	add	r1, sp, #12
   d46e2:	f008 fa85 	bl	dcbf0 <strtol>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d46e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d46ea:	d81e      	bhi.n	d472a <_Z13setDailyCount6String+0x52>
  current.dailyCount = tempCount;
   d46ec:	4d10      	ldr	r5, [pc, #64]	; (d4730 <_Z13setDailyCount6String+0x58>)
   d46ee:	60a8      	str	r0, [r5, #8]
  current.lastCountTime = Time.now();
   d46f0:	f006 feab 	bl	db44a <_ZN9TimeClass3nowEv>
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d46f4:	4b0f      	ldr	r3, [pc, #60]	; (d4734 <_Z13setDailyCount6String+0x5c>)
  snprintf(data, sizeof(data), "Daily count set to %i",current.dailyCount);
   d46f6:	4a10      	ldr	r2, [pc, #64]	; (d4738 <_Z13setDailyCount6String+0x60>)
  current.lastCountTime = Time.now();
   d46f8:	60e8      	str	r0, [r5, #12]
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d46fa:	2401      	movs	r4, #1
   d46fc:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Daily count set to %i",current.dailyCount);
   d46fe:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4702:	68ab      	ldr	r3, [r5, #8]
   d4704:	a804      	add	r0, sp, #16
   d4706:	f003 ff1f 	bl	d8548 <snprintf>
   d470a:	f003 fe4d 	bl	d83a8 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Daily",data, PRIVATE, WITH_ACK);
   d470e:	b150      	cbz	r0, d4726 <_Z13setDailyCount6String+0x4e>
   d4710:	4b0a      	ldr	r3, [pc, #40]	; (d473c <_Z13setDailyCount6String+0x64>)
   d4712:	490b      	ldr	r1, [pc, #44]	; (d4740 <_Z13setDailyCount6String+0x68>)
   d4714:	781b      	ldrb	r3, [r3, #0]
   d4716:	f88d 3000 	strb.w	r3, [sp]
   d471a:	4b0a      	ldr	r3, [pc, #40]	; (d4744 <_Z13setDailyCount6String+0x6c>)
   d471c:	480a      	ldr	r0, [pc, #40]	; (d4748 <_Z13setDailyCount6String+0x70>)
   d471e:	781b      	ldrb	r3, [r3, #0]
   d4720:	aa04      	add	r2, sp, #16
   d4722:	f7ff fed0 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d4726:	4620      	mov	r0, r4
   d4728:	e000      	b.n	d472c <_Z13setDailyCount6String+0x54>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d472a:	2000      	movs	r0, #0
}
   d472c:	b045      	add	sp, #276	; 0x114
   d472e:	bd30      	pop	{r4, r5, pc}
   d4730:	2003e3d8 	.word	0x2003e3d8
   d4734:	2003e3fc 	.word	0x2003e3fc
   d4738:	000dcd4f 	.word	0x000dcd4f
   d473c:	2003e369 	.word	0x2003e369
   d4740:	000dcd65 	.word	0x000dcd65
   d4744:	2003e368 	.word	0x2003e368
   d4748:	2003e468 	.word	0x2003e468

000d474c <_Z15printAccelGraphf6Stringif>:
	int numBars = abs(value / (rangeAbs / numBarsFull));
   d474c:	ee07 1a90 	vmov	s15, r1
   d4750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
   d4754:	b5f0      	push	{r4, r5, r6, r7, lr}
	int numBars = abs(value / (rangeAbs / numBarsFull));
   d4756:	ee80 7aa7 	vdiv.f32	s14, s1, s15
{
   d475a:	4607      	mov	r7, r0
   d475c:	460d      	mov	r5, r1
   d475e:	ed2d 8b02 	vpush	{d8}
	int numBars = abs(value / (rangeAbs / numBarsFull));
   d4762:	eec0 7a07 	vdiv.f32	s15, s0, s14
{
   d4766:	b089      	sub	sp, #36	; 0x24
   d4768:	eeb0 8a40 	vmov.f32	s16, s0
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
   d476c:	eef0 7ae7 	vabs.f32	s15, s15
	int numBars = abs(value / (rangeAbs / numBarsFull));
   d4770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4774:	ee17 4a90 	vmov	r4, s15
    Serial.print(name + ": "); // Print the axis name and a colon:
   d4778:	f006 ffae 	bl	db6d8 <_Z16_fetch_usbserialv>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d477c:	4639      	mov	r1, r7
   d477e:	4606      	mov	r6, r0
   d4780:	a804      	add	r0, sp, #16
   d4782:	f006 fabd 	bl	dad00 <_ZN6StringC1ERKS_>
   d4786:	492e      	ldr	r1, [pc, #184]	; (d4840 <_Z15printAccelGraphf6Stringif+0xf4>)
   d4788:	a804      	add	r0, sp, #16
   d478a:	f006 fb13 	bl	dadb4 <_ZplRK15StringSumHelperPKc>
   d478e:	6801      	ldr	r1, [r0, #0]
   d4790:	4630      	mov	r0, r6
   d4792:	f006 f936 	bl	daa02 <_ZN5Print5printEPKc>
class StringSumHelper : public String
   d4796:	a804      	add	r0, sp, #16
   d4798:	f006 fa1c 	bl	dabd4 <_ZN6StringD1Ev>
    for (int i=0; i<numBarsFull; i++)
   d479c:	2600      	movs	r6, #0
            if (i >= (numBarsFull - numBars))
   d479e:	1b2f      	subs	r7, r5, r4
    for (int i=0; i<numBarsFull; i++)
   d47a0:	42ae      	cmp	r6, r5
   d47a2:	da11      	bge.n	d47c8 <_Z15printAccelGraphf6Stringif+0x7c>
        if (value < 0) // If the value is negative
   d47a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d47a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47ac:	d508      	bpl.n	d47c0 <_Z15printAccelGraphf6Stringif+0x74>
            if (i >= (numBarsFull - numBars))
   d47ae:	42b7      	cmp	r7, r6
   d47b0:	dc06      	bgt.n	d47c0 <_Z15printAccelGraphf6Stringif+0x74>
                Serial.print('='); // Print an '='
   d47b2:	f006 ff91 	bl	db6d8 <_Z16_fetch_usbserialv>
   d47b6:	213d      	movs	r1, #61	; 0x3d
                Serial.print(' '); // print spaces otherwise
   d47b8:	f006 f927 	bl	daa0a <_ZN5Print5printEc>
    for (int i=0; i<numBarsFull; i++)
   d47bc:	3601      	adds	r6, #1
   d47be:	e7ef      	b.n	d47a0 <_Z15printAccelGraphf6Stringif+0x54>
                Serial.print(' '); // print spaces otherwise
   d47c0:	f006 ff8a 	bl	db6d8 <_Z16_fetch_usbserialv>
   d47c4:	2120      	movs	r1, #32
   d47c6:	e7f7      	b.n	d47b8 <_Z15printAccelGraphf6Stringif+0x6c>
    Serial.print('|'); // Print a pipe (|) to represent the 0-point
   d47c8:	f006 ff86 	bl	db6d8 <_Z16_fetch_usbserialv>
   d47cc:	217c      	movs	r1, #124	; 0x7c
   d47ce:	f006 f91c 	bl	daa0a <_ZN5Print5printEc>
    for (int i=0; i<numBarsFull; i++)
   d47d2:	2600      	movs	r6, #0
   d47d4:	42ae      	cmp	r6, r5
   d47d6:	da11      	bge.n	d47fc <_Z15printAccelGraphf6Stringif+0xb0>
        if (value > 0)
   d47d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   d47dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d47e0:	dd08      	ble.n	d47f4 <_Z15printAccelGraphf6Stringif+0xa8>
            if (i <= numBars)
   d47e2:	42a6      	cmp	r6, r4
   d47e4:	dc06      	bgt.n	d47f4 <_Z15printAccelGraphf6Stringif+0xa8>
                Serial.print('='); // Print an '='
   d47e6:	f006 ff77 	bl	db6d8 <_Z16_fetch_usbserialv>
   d47ea:	213d      	movs	r1, #61	; 0x3d
                Serial.print(' '); // otherwise print spaces
   d47ec:	f006 f90d 	bl	daa0a <_ZN5Print5printEc>
    for (int i=0; i<numBarsFull; i++)
   d47f0:	3601      	adds	r6, #1
   d47f2:	e7ef      	b.n	d47d4 <_Z15printAccelGraphf6Stringif+0x88>
                Serial.print(' '); // otherwise print spaces
   d47f4:	f006 ff70 	bl	db6d8 <_Z16_fetch_usbserialv>
   d47f8:	2120      	movs	r1, #32
   d47fa:	e7f7      	b.n	d47ec <_Z15printAccelGraphf6Stringif+0xa0>
    Serial.println(" (" + String(value, 2) + " g)");
   d47fc:	f006 ff6c 	bl	db6d8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4800:	4910      	ldr	r1, [pc, #64]	; (d4844 <_Z15printAccelGraphf6Stringif+0xf8>)
   d4802:	4604      	mov	r4, r0
   d4804:	a804      	add	r0, sp, #16
   d4806:	f006 fa30 	bl	dac6a <_ZN6StringC1EPKc>
   d480a:	eeb0 0a48 	vmov.f32	s0, s16
   d480e:	2102      	movs	r1, #2
   d4810:	4668      	mov	r0, sp
   d4812:	f006 fa92 	bl	dad3a <_ZN6StringC1Efi>
   d4816:	4669      	mov	r1, sp
   d4818:	a804      	add	r0, sp, #16
   d481a:	f006 fabf 	bl	dad9c <_ZplRK15StringSumHelperRK6String>
   d481e:	490a      	ldr	r1, [pc, #40]	; (d4848 <_Z15printAccelGraphf6Stringif+0xfc>)
   d4820:	f006 fac8 	bl	dadb4 <_ZplRK15StringSumHelperPKc>
   d4824:	6801      	ldr	r1, [r0, #0]
   d4826:	4620      	mov	r0, r4
   d4828:	f006 f8fe 	bl	daa28 <_ZN5Print7printlnEPKc>
   d482c:	4668      	mov	r0, sp
   d482e:	f006 f9d1 	bl	dabd4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4832:	a804      	add	r0, sp, #16
   d4834:	f006 f9ce 	bl	dabd4 <_ZN6StringD1Ev>
}
   d4838:	b009      	add	sp, #36	; 0x24
   d483a:	ecbd 8b02 	vpop	{d8}
   d483e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4840:	000dd7aa 	.word	0x000dd7aa
   d4844:	000dcd6b 	.word	0x000dcd6b
   d4848:	000dcd6e 	.word	0x000dcd6e

000d484c <_Z13sensorControlb>:
void sensorControl(bool enableSensor) {                               // What is the sensor type - 0-Pressure Sensor, 1-PIR Sensor
   d484c:	b510      	push	{r4, lr}
   d484e:	4c0c      	ldr	r4, [pc, #48]	; (d4880 <_Z13sensorControlb+0x34>)
  if (enableSensor) {
   d4850:	b160      	cbz	r0, d486c <_Z13sensorControlb+0x20>
    digitalWrite(disableModule,false);                                // Enable or disable the sensor
   d4852:	2100      	movs	r1, #0
   d4854:	200c      	movs	r0, #12
   d4856:	f007 f89e 	bl	db996 <digitalWrite>
    if (sysStatus.sensorType == 0) {                                  // This is the pressure sensor and we are enabling it
   d485a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   d485e:	b96b      	cbnz	r3, d487c <_Z13sensorControlb+0x30>
        digitalWrite(ledPower,HIGH);                                  // For the pressure sensor, this is how you activate it
   d4860:	2101      	movs	r1, #1
}
   d4862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(ledPower,LOW);                                   // Turns on the LED on the PIR sensor board
   d4866:	200b      	movs	r0, #11
   d4868:	f007 b895 	b.w	db996 <digitalWrite>
    digitalWrite(disableModule,true);
   d486c:	2101      	movs	r1, #1
   d486e:	200c      	movs	r0, #12
   d4870:	f007 f891 	bl	db996 <digitalWrite>
    if (sysStatus.sensorType == 0) {                                  // This is the pressure sensor and we are enabling it
   d4874:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   d4878:	2b00      	cmp	r3, #0
   d487a:	d1f1      	bne.n	d4860 <_Z13sensorControlb+0x14>
        digitalWrite(ledPower,LOW);                                   // Turns on the LED on the PIR sensor board
   d487c:	2100      	movs	r1, #0
   d487e:	e7f0      	b.n	d4862 <_Z13sensorControlb+0x16>
   d4880:	2003e4c0 	.word	0x2003e4c0

000d4884 <_Z14setVerboseMode6String>:
{
   d4884:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4886:	491b      	ldr	r1, [pc, #108]	; (d48f4 <_Z14setVerboseMode6String+0x70>)
   d4888:	4605      	mov	r5, r0
   d488a:	f006 faa8 	bl	dadde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d488e:	4604      	mov	r4, r0
   d4890:	b1c0      	cbz	r0, d48c4 <_Z14setVerboseMode6String+0x40>
    sysStatus.verboseMode = true;
   d4892:	4a19      	ldr	r2, [pc, #100]	; (d48f8 <_Z14setVerboseMode6String+0x74>)
   d4894:	2301      	movs	r3, #1
   d4896:	7113      	strb	r3, [r2, #4]
    systemStatusWriteNeeded = true;
   d4898:	4a18      	ldr	r2, [pc, #96]	; (d48fc <_Z14setVerboseMode6String+0x78>)
   d489a:	7013      	strb	r3, [r2, #0]
   d489c:	f003 fd84 	bl	d83a8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d48a0:	b150      	cbz	r0, d48b8 <_Z14setVerboseMode6String+0x34>
   d48a2:	4b17      	ldr	r3, [pc, #92]	; (d4900 <_Z14setVerboseMode6String+0x7c>)
   d48a4:	4a17      	ldr	r2, [pc, #92]	; (d4904 <_Z14setVerboseMode6String+0x80>)
   d48a6:	781b      	ldrb	r3, [r3, #0]
   d48a8:	f88d 3000 	strb.w	r3, [sp]
   d48ac:	4b16      	ldr	r3, [pc, #88]	; (d4908 <_Z14setVerboseMode6String+0x84>)
   d48ae:	781b      	ldrb	r3, [r3, #0]
   d48b0:	4916      	ldr	r1, [pc, #88]	; (d490c <_Z14setVerboseMode6String+0x88>)
   d48b2:	4817      	ldr	r0, [pc, #92]	; (d4910 <_Z14setVerboseMode6String+0x8c>)
   d48b4:	f7ff fe07 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sensorControl(true);                                    // Make sure the sensor is on and correctly configured
   d48b8:	2001      	movs	r0, #1
   d48ba:	f7ff ffc7 	bl	d484c <_Z13sensorControlb>
    return 1;
   d48be:	2001      	movs	r0, #1
}
   d48c0:	b003      	add	sp, #12
   d48c2:	bd30      	pop	{r4, r5, pc}
   d48c4:	4913      	ldr	r1, [pc, #76]	; (d4914 <_Z14setVerboseMode6String+0x90>)
   d48c6:	4628      	mov	r0, r5
   d48c8:	f006 fa89 	bl	dadde <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d48cc:	2800      	cmp	r0, #0
   d48ce:	d0f7      	beq.n	d48c0 <_Z14setVerboseMode6String+0x3c>
    sysStatus.verboseMode = false;
   d48d0:	4b09      	ldr	r3, [pc, #36]	; (d48f8 <_Z14setVerboseMode6String+0x74>)
   d48d2:	711c      	strb	r4, [r3, #4]
    systemStatusWriteNeeded = true;
   d48d4:	4b09      	ldr	r3, [pc, #36]	; (d48fc <_Z14setVerboseMode6String+0x78>)
   d48d6:	2201      	movs	r2, #1
   d48d8:	701a      	strb	r2, [r3, #0]
   d48da:	f003 fd65 	bl	d83a8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d48de:	2800      	cmp	r0, #0
   d48e0:	d0ea      	beq.n	d48b8 <_Z14setVerboseMode6String+0x34>
   d48e2:	4b07      	ldr	r3, [pc, #28]	; (d4900 <_Z14setVerboseMode6String+0x7c>)
   d48e4:	4a0c      	ldr	r2, [pc, #48]	; (d4918 <_Z14setVerboseMode6String+0x94>)
   d48e6:	781b      	ldrb	r3, [r3, #0]
   d48e8:	f88d 3000 	strb.w	r3, [sp]
   d48ec:	4b06      	ldr	r3, [pc, #24]	; (d4908 <_Z14setVerboseMode6String+0x84>)
   d48ee:	781b      	ldrb	r3, [r3, #0]
   d48f0:	e7de      	b.n	d48b0 <_Z14setVerboseMode6String+0x2c>
   d48f2:	bf00      	nop
   d48f4:	000dcc5c 	.word	0x000dcc5c
   d48f8:	2003e4c0 	.word	0x2003e4c0
   d48fc:	2003e4ec 	.word	0x2003e4ec
   d4900:	2003e369 	.word	0x2003e369
   d4904:	000dcd72 	.word	0x000dcd72
   d4908:	2003e368 	.word	0x2003e368
   d490c:	000dcf0a 	.word	0x000dcf0a
   d4910:	2003e468 	.word	0x2003e468
   d4914:	000dcf16 	.word	0x000dcf16
   d4918:	000dcd83 	.word	0x000dcd83

000d491c <_Z11recordCountv>:
{
   d491c:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d491e:	4d43      	ldr	r5, [pc, #268]	; (d4a2c <_Z11recordCountv+0x110>)
   d4920:	4e43      	ldr	r6, [pc, #268]	; (d4a30 <_Z11recordCountv+0x114>)
   d4922:	782b      	ldrb	r3, [r5, #0]
   d4924:	f3bf 8f5b 	dmb	ish
   d4928:	f013 0f01 	tst.w	r3, #1
   d492c:	b0c3      	sub	sp, #268	; 0x10c
   d492e:	d109      	bne.n	d4944 <_Z11recordCountv+0x28>
   d4930:	4628      	mov	r0, r5
   d4932:	f7ff fbc1 	bl	d40b8 <__cxa_guard_acquire>
   d4936:	b128      	cbz	r0, d4944 <_Z11recordCountv+0x28>
   d4938:	f003 fafa 	bl	d7f30 <HAL_Pin_Map>
   d493c:	6030      	str	r0, [r6, #0]
   d493e:	4628      	mov	r0, r5
   d4940:	f7ff fbbf 	bl	d40c2 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4944:	6833      	ldr	r3, [r6, #0]
   d4946:	f893 4070 	ldrb.w	r4, [r3, #112]	; 0x70
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d494a:	782b      	ldrb	r3, [r5, #0]
   d494c:	f3bf 8f5b 	dmb	ish
   d4950:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4952:	ea4f 1744 	mov.w	r7, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4956:	d409      	bmi.n	d496c <_Z11recordCountv+0x50>
   d4958:	4834      	ldr	r0, [pc, #208]	; (d4a2c <_Z11recordCountv+0x110>)
   d495a:	f7ff fbad 	bl	d40b8 <__cxa_guard_acquire>
   d495e:	b128      	cbz	r0, d496c <_Z11recordCountv+0x50>
   d4960:	f003 fae6 	bl	d7f30 <HAL_Pin_Map>
   d4964:	6030      	str	r0, [r6, #0]
   d4966:	4831      	ldr	r0, [pc, #196]	; (d4a2c <_Z11recordCountv+0x110>)
   d4968:	f7ff fbab 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d496c:	6833      	ldr	r3, [r6, #0]
   d496e:	f893 4071 	ldrb.w	r4, [r3, #113]	; 0x71
   d4972:	f004 041f 	and.w	r4, r4, #31
   d4976:	433c      	orrs	r4, r7
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4978:	2c2f      	cmp	r4, #47	; 0x2f
   d497a:	dd51      	ble.n	d4a20 <_Z11recordCountv+0x104>
   d497c:	4a2d      	ldr	r2, [pc, #180]	; (d4a34 <_Z11recordCountv+0x118>)
   d497e:	2100      	movs	r1, #0
   d4980:	200a      	movs	r0, #10
   d4982:	f003 fc3d 	bl	d8200 <panic_>
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
   d4986:	4b2c      	ldr	r3, [pc, #176]	; (d4a38 <_Z11recordCountv+0x11c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4988:	f004 041f 	and.w	r4, r4, #31

__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d498c:	2101      	movs	r1, #1
   d498e:	fa01 f404 	lsl.w	r4, r1, r4
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4992:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
   d4996:	4b29      	ldr	r3, [pc, #164]	; (d4a3c <_Z11recordCountv+0x120>)
   d4998:	6898      	ldr	r0, [r3, #8]
   d499a:	b138      	cbz	r0, d49ac <_Z11recordCountv+0x90>
   d499c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d49a0:	2300      	movs	r3, #0
   d49a2:	e9cd 2300 	strd	r2, r3, [sp]
   d49a6:	461a      	mov	r2, r3
   d49a8:	f003 fa1a 	bl	d7de0 <os_timer_change>
  if (currentMinutePeriod != Time.minute()) {                         // Done counting for the last minute
   d49ac:	4d24      	ldr	r5, [pc, #144]	; (d4a40 <_Z11recordCountv+0x124>)
   d49ae:	782c      	ldrb	r4, [r5, #0]
   d49b0:	f006 fd68 	bl	db484 <_ZN9TimeClass6minuteEv>
   d49b4:	4284      	cmp	r4, r0
   d49b6:	4c23      	ldr	r4, [pc, #140]	; (d4a44 <_Z11recordCountv+0x128>)
   d49b8:	d004      	beq.n	d49c4 <_Z11recordCountv+0xa8>
    currentMinutePeriod = Time.minute();                              // Reset period
   d49ba:	f006 fd63 	bl	db484 <_ZN9TimeClass6minuteEv>
    current.maxMinValue = 1;                                          // Reset for the new minute
   d49be:	2301      	movs	r3, #1
    currentMinutePeriod = Time.minute();                              // Reset period
   d49c0:	7028      	strb	r0, [r5, #0]
    current.maxMinValue = 1;                                          // Reset for the new minute
   d49c2:	61a3      	str	r3, [r4, #24]
  current.maxMinValue++;
   d49c4:	69a3      	ldr	r3, [r4, #24]
   d49c6:	3301      	adds	r3, #1
   d49c8:	61a3      	str	r3, [r4, #24]
  current.lastCountTime = Time.now();
   d49ca:	f006 fd3e 	bl	db44a <_ZN9TimeClass3nowEv>
  current.hourlyCount++;                                              // Increment the PersonCount
   d49ce:	6823      	ldr	r3, [r4, #0]
  current.lastCountTime = Time.now();
   d49d0:	60e0      	str	r0, [r4, #12]
  current.hourlyCount++;                                              // Increment the PersonCount
   d49d2:	3301      	adds	r3, #1
   d49d4:	6023      	str	r3, [r4, #0]
  current.dailyCount++;                                               // Increment the PersonCount
   d49d6:	68a3      	ldr	r3, [r4, #8]
   d49d8:	3301      	adds	r3, #1
   d49da:	60a3      	str	r3, [r4, #8]
  if (sysStatus.verboseMode && Particle.connected()) {
   d49dc:	4b1a      	ldr	r3, [pc, #104]	; (d4a48 <_Z11recordCountv+0x12c>)
   d49de:	791b      	ldrb	r3, [r3, #4]
   d49e0:	b1b3      	cbz	r3, d4a10 <_Z11recordCountv+0xf4>
   d49e2:	f003 fce1 	bl	d83a8 <spark_cloud_flag_connected>
   d49e6:	b198      	cbz	r0, d4a10 <_Z11recordCountv+0xf4>
    snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d49e8:	68a3      	ldr	r3, [r4, #8]
   d49ea:	9300      	str	r3, [sp, #0]
   d49ec:	6823      	ldr	r3, [r4, #0]
   d49ee:	4a17      	ldr	r2, [pc, #92]	; (d4a4c <_Z11recordCountv+0x130>)
   d49f0:	f44f 7180 	mov.w	r1, #256	; 0x100
   d49f4:	a802      	add	r0, sp, #8
   d49f6:	f003 fda7 	bl	d8548 <snprintf>
   d49fa:	4b15      	ldr	r3, [pc, #84]	; (d4a50 <_Z11recordCountv+0x134>)
    publishQueue.publish("Count",data, PRIVATE, WITH_ACK);                      // Helpful for monitoring and calibration
   d49fc:	4915      	ldr	r1, [pc, #84]	; (d4a54 <_Z11recordCountv+0x138>)
   d49fe:	781b      	ldrb	r3, [r3, #0]
   d4a00:	f88d 3000 	strb.w	r3, [sp]
   d4a04:	4b14      	ldr	r3, [pc, #80]	; (d4a58 <_Z11recordCountv+0x13c>)
   d4a06:	4815      	ldr	r0, [pc, #84]	; (d4a5c <_Z11recordCountv+0x140>)
   d4a08:	781b      	ldrb	r3, [r3, #0]
   d4a0a:	aa02      	add	r2, sp, #8
   d4a0c:	f7ff fd5b 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d4a10:	4b13      	ldr	r3, [pc, #76]	; (d4a60 <_Z11recordCountv+0x144>)
   d4a12:	2201      	movs	r2, #1
   d4a14:	701a      	strb	r2, [r3, #0]
  sensorDetect = false;                                               // Reset the flag
   d4a16:	4b13      	ldr	r3, [pc, #76]	; (d4a64 <_Z11recordCountv+0x148>)
   d4a18:	2200      	movs	r2, #0
   d4a1a:	701a      	strb	r2, [r3, #0]
}
   d4a1c:	b043      	add	sp, #268	; 0x10c
   d4a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*p_pin < P0_PIN_NUM)
   d4a20:	2c1f      	cmp	r4, #31
   d4a22:	dcb0      	bgt.n	d4986 <_Z11recordCountv+0x6a>
        return NRF_P0;
   d4a24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   d4a28:	e7b0      	b.n	d498c <_Z11recordCountv+0x70>
   d4a2a:	bf00      	nop
   d4a2c:	2003e304 	.word	0x2003e304
   d4a30:	2003e308 	.word	0x2003e308
   d4a34:	000d7ed1 	.word	0x000d7ed1
   d4a38:	50000300 	.word	0x50000300
   d4a3c:	2003e3bc 	.word	0x2003e3bc
   d4a40:	2003e36a 	.word	0x2003e36a
   d4a44:	2003e3d8 	.word	0x2003e3d8
   d4a48:	2003e4c0 	.word	0x2003e4c0
   d4a4c:	000dcd98 	.word	0x000dcd98
   d4a50:	2003e369 	.word	0x2003e369
   d4a54:	000dd00c 	.word	0x000dd00c
   d4a58:	2003e368 	.word	0x2003e368
   d4a5c:	2003e468 	.word	0x2003e468
   d4a60:	2003e3fc 	.word	0x2003e3fc
   d4a64:	2003e4a4 	.word	0x2003e4a4

000d4a68 <_Z9sendEventv>:
void sendEvent() {
   d4a68:	b510      	push	{r4, lr}
  if (current.hourlyCount) {
   d4a6a:	4c1b      	ldr	r4, [pc, #108]	; (d4ad8 <_Z9sendEventv+0x70>)
   d4a6c:	6823      	ldr	r3, [r4, #0]
void sendEvent() {
   d4a6e:	b0ca      	sub	sp, #296	; 0x128
  if (current.hourlyCount) {
   d4a70:	2b00      	cmp	r3, #0
   d4a72:	d02d      	beq.n	d4ad0 <_Z9sendEventv+0x68>
    timeStampValue = current.lastCountTime;                           // If there was an event in the past hour, send the most recent event's timestamp
   d4a74:	68e2      	ldr	r2, [r4, #12]
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,\"key1\":\"%s\",\"temp\":%i, \"resets\":%i, \"alerts\":%i,\"maxmin\":%i,\"connecttime\":%i,\"timestamp\":%lu000}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContext[sysStatus.batteryState], current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue, sysStatus.lastConnectionDuration, timeStampValue);
   d4a76:	9208      	str	r2, [sp, #32]
   d4a78:	4a18      	ldr	r2, [pc, #96]	; (d4adc <_Z9sendEventv+0x74>)
   d4a7a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   d4a7c:	9107      	str	r1, [sp, #28]
   d4a7e:	69a1      	ldr	r1, [r4, #24]
   d4a80:	9106      	str	r1, [sp, #24]
   d4a82:	6961      	ldr	r1, [r4, #20]
   d4a84:	9105      	str	r1, [sp, #20]
   d4a86:	6911      	ldr	r1, [r2, #16]
   d4a88:	9104      	str	r1, [sp, #16]
   d4a8a:	6921      	ldr	r1, [r4, #16]
   d4a8c:	9103      	str	r1, [sp, #12]
   d4a8e:	7b10      	ldrb	r0, [r2, #12]
   d4a90:	4913      	ldr	r1, [pc, #76]	; (d4ae0 <_Z9sendEventv+0x78>)
   d4a92:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d4a96:	9102      	str	r1, [sp, #8]
   d4a98:	6892      	ldr	r2, [r2, #8]
   d4a9a:	9201      	str	r2, [sp, #4]
   d4a9c:	68a2      	ldr	r2, [r4, #8]
   d4a9e:	9200      	str	r2, [sp, #0]
   d4aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4aa4:	4a0f      	ldr	r2, [pc, #60]	; (d4ae4 <_Z9sendEventv+0x7c>)
   d4aa6:	a80a      	add	r0, sp, #40	; 0x28
   d4aa8:	f003 fd4e 	bl	d8548 <snprintf>
   d4aac:	4b0e      	ldr	r3, [pc, #56]	; (d4ae8 <_Z9sendEventv+0x80>)
  publishQueue.publish("Ubidots-Counter-Hook-v1", data, PRIVATE, WITH_ACK);
   d4aae:	490f      	ldr	r1, [pc, #60]	; (d4aec <_Z9sendEventv+0x84>)
   d4ab0:	781b      	ldrb	r3, [r3, #0]
   d4ab2:	f88d 3000 	strb.w	r3, [sp]
   d4ab6:	4b0e      	ldr	r3, [pc, #56]	; (d4af0 <_Z9sendEventv+0x88>)
   d4ab8:	480e      	ldr	r0, [pc, #56]	; (d4af4 <_Z9sendEventv+0x8c>)
   d4aba:	781b      	ldrb	r3, [r3, #0]
   d4abc:	aa0a      	add	r2, sp, #40	; 0x28
   d4abe:	f7ff fd02 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4ac2:	4b0d      	ldr	r3, [pc, #52]	; (d4af8 <_Z9sendEventv+0x90>)
   d4ac4:	2201      	movs	r2, #1
   d4ac6:	701a      	strb	r2, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d4ac8:	6823      	ldr	r3, [r4, #0]
   d4aca:	6063      	str	r3, [r4, #4]
}
   d4acc:	b04a      	add	sp, #296	; 0x128
   d4ace:	bd10      	pop	{r4, pc}
    timeStampValue = lastReportedTime;                                // This should be the beginning of the previous hour
   d4ad0:	4a0a      	ldr	r2, [pc, #40]	; (d4afc <_Z9sendEventv+0x94>)
   d4ad2:	6812      	ldr	r2, [r2, #0]
   d4ad4:	e7cf      	b.n	d4a76 <_Z9sendEventv+0xe>
   d4ad6:	bf00      	nop
   d4ad8:	2003e3d8 	.word	0x2003e3d8
   d4adc:	2003e4c0 	.word	0x2003e4c0
   d4ae0:	2003e1d8 	.word	0x2003e1d8
   d4ae4:	000dcdb5 	.word	0x000dcdb5
   d4ae8:	2003e369 	.word	0x2003e369
   d4aec:	000dce3c 	.word	0x000dce3c
   d4af0:	2003e368 	.word	0x2003e368
   d4af4:	2003e468 	.word	0x2003e468
   d4af8:	2003e40c 	.word	0x2003e40c
   d4afc:	2003e42c 	.word	0x2003e42c

000d4b00 <_Z21publishToGoogleSheetsv>:
void publishToGoogleSheets() {
   d4b00:	b510      	push	{r4, lr}
  (sysStatus.solarPowerMode) ? strncpy(solarString,"Solar",sizeof(solarString)) : strncpy(solarString,"Utility",sizeof(solarString));
   d4b02:	4c21      	ldr	r4, [pc, #132]	; (d4b88 <_Z21publishToGoogleSheetsv+0x88>)
   d4b04:	7962      	ldrb	r2, [r4, #5]
void publishToGoogleSheets() {
   d4b06:	b0d0      	sub	sp, #320	; 0x140
  (sysStatus.solarPowerMode) ? strncpy(solarString,"Solar",sizeof(solarString)) : strncpy(solarString,"Utility",sizeof(solarString));
   d4b08:	2a00      	cmp	r2, #0
   d4b0a:	d036      	beq.n	d4b7a <_Z21publishToGoogleSheetsv+0x7a>
   d4b0c:	491f      	ldr	r1, [pc, #124]	; (d4b8c <_Z21publishToGoogleSheetsv+0x8c>)
   d4b0e:	2210      	movs	r2, #16
   d4b10:	a808      	add	r0, sp, #32
   d4b12:	f007 ffcc 	bl	dcaae <strncpy>
  (sysStatus.verboseMode) ? strncpy(verboseString, "Verbose",sizeof(verboseString)) : strncpy(verboseString, "Not Verbose",sizeof(verboseString));
   d4b16:	7922      	ldrb	r2, [r4, #4]
   d4b18:	ab0c      	add	r3, sp, #48	; 0x30
   d4b1a:	2a00      	cmp	r2, #0
   d4b1c:	d030      	beq.n	d4b80 <_Z21publishToGoogleSheetsv+0x80>
   d4b1e:	491c      	ldr	r1, [pc, #112]	; (d4b90 <_Z21publishToGoogleSheetsv+0x90>)
   d4b20:	2210      	movs	r2, #16
   d4b22:	4618      	mov	r0, r3
   d4b24:	f007 ffc3 	bl	dcaae <strncpy>
  snprintf(data, sizeof(data), "[\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%i sec\",\"%i%%\"]", solarString, lowPowerModeStr, currentOffsetStr, openTimeStr, closeTimeStr, sensorTypeConfigStr, verboseString, current.maxConnectTime, current.minBatteryLevel);
   d4b28:	4a1a      	ldr	r2, [pc, #104]	; (d4b94 <_Z21publishToGoogleSheetsv+0x94>)
   d4b2a:	4b1b      	ldr	r3, [pc, #108]	; (d4b98 <_Z21publishToGoogleSheetsv+0x98>)
   d4b2c:	6a11      	ldr	r1, [r2, #32]
   d4b2e:	9107      	str	r1, [sp, #28]
   d4b30:	8b92      	ldrh	r2, [r2, #28]
   d4b32:	9304      	str	r3, [sp, #16]
   d4b34:	4b19      	ldr	r3, [pc, #100]	; (d4b9c <_Z21publishToGoogleSheetsv+0x9c>)
   d4b36:	9303      	str	r3, [sp, #12]
   d4b38:	4b19      	ldr	r3, [pc, #100]	; (d4ba0 <_Z21publishToGoogleSheetsv+0xa0>)
   d4b3a:	9302      	str	r3, [sp, #8]
   d4b3c:	4b19      	ldr	r3, [pc, #100]	; (d4ba4 <_Z21publishToGoogleSheetsv+0xa4>)
   d4b3e:	9301      	str	r3, [sp, #4]
   d4b40:	4b19      	ldr	r3, [pc, #100]	; (d4ba8 <_Z21publishToGoogleSheetsv+0xa8>)
   d4b42:	9300      	str	r3, [sp, #0]
   d4b44:	e9cd 0205 	strd	r0, r2, [sp, #20]
   d4b48:	ab08      	add	r3, sp, #32
   d4b4a:	4a18      	ldr	r2, [pc, #96]	; (d4bac <_Z21publishToGoogleSheetsv+0xac>)
   d4b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b50:	a810      	add	r0, sp, #64	; 0x40
   d4b52:	f003 fcf9 	bl	d8548 <snprintf>
   d4b56:	4b16      	ldr	r3, [pc, #88]	; (d4bb0 <_Z21publishToGoogleSheetsv+0xb0>)
  publishQueue.publish("GoogleSheetsExport", data, PRIVATE, WITH_ACK);
   d4b58:	4916      	ldr	r1, [pc, #88]	; (d4bb4 <_Z21publishToGoogleSheetsv+0xb4>)
   d4b5a:	781b      	ldrb	r3, [r3, #0]
   d4b5c:	f88d 3000 	strb.w	r3, [sp]
   d4b60:	4b15      	ldr	r3, [pc, #84]	; (d4bb8 <_Z21publishToGoogleSheetsv+0xb8>)
   d4b62:	4816      	ldr	r0, [pc, #88]	; (d4bbc <_Z21publishToGoogleSheetsv+0xbc>)
   d4b64:	781b      	ldrb	r3, [r3, #0]
   d4b66:	aa10      	add	r2, sp, #64	; 0x40
   d4b68:	f7ff fcad 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Log.info("published: %s", data);
   d4b6c:	4914      	ldr	r1, [pc, #80]	; (d4bc0 <_Z21publishToGoogleSheetsv+0xc0>)
   d4b6e:	4815      	ldr	r0, [pc, #84]	; (d4bc4 <_Z21publishToGoogleSheetsv+0xc4>)
   d4b70:	aa10      	add	r2, sp, #64	; 0x40
   d4b72:	f7ff fc91 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
}
   d4b76:	b050      	add	sp, #320	; 0x140
   d4b78:	bd10      	pop	{r4, pc}
  (sysStatus.solarPowerMode) ? strncpy(solarString,"Solar",sizeof(solarString)) : strncpy(solarString,"Utility",sizeof(solarString));
   d4b7a:	4913      	ldr	r1, [pc, #76]	; (d4bc8 <_Z21publishToGoogleSheetsv+0xc8>)
   d4b7c:	2210      	movs	r2, #16
   d4b7e:	e7c7      	b.n	d4b10 <_Z21publishToGoogleSheetsv+0x10>
  (sysStatus.verboseMode) ? strncpy(verboseString, "Verbose",sizeof(verboseString)) : strncpy(verboseString, "Not Verbose",sizeof(verboseString));
   d4b80:	4912      	ldr	r1, [pc, #72]	; (d4bcc <_Z21publishToGoogleSheetsv+0xcc>)
   d4b82:	2210      	movs	r2, #16
   d4b84:	e7cd      	b.n	d4b22 <_Z21publishToGoogleSheetsv+0x22>
   d4b86:	bf00      	nop
   d4b88:	2003e4c0 	.word	0x2003e4c0
   d4b8c:	000dce54 	.word	0x000dce54
   d4b90:	000dce66 	.word	0x000dce66
   d4b94:	2003e3d8 	.word	0x2003e3d8
   d4b98:	2003e4a5 	.word	0x2003e4a5
   d4b9c:	2003e1f4 	.word	0x2003e1f4
   d4ba0:	2003e206 	.word	0x2003e206
   d4ba4:	2003e3fd 	.word	0x2003e3fd
   d4ba8:	2003e454 	.word	0x2003e454
   d4bac:	000dce6e 	.word	0x000dce6e
   d4bb0:	2003e369 	.word	0x2003e369
   d4bb4:	000dcea3 	.word	0x000dcea3
   d4bb8:	2003e368 	.word	0x2003e368
   d4bbc:	2003e468 	.word	0x2003e468
   d4bc0:	000dceb6 	.word	0x000dceb6
   d4bc4:	2003e5dc 	.word	0x2003e5dc
   d4bc8:	000dce5a 	.word	0x000dce5a
   d4bcc:	000dce62 	.word	0x000dce62

000d4bd0 <_Z7sendNow6String>:
{
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4905      	ldr	r1, [pc, #20]	; (d4be8 <_Z7sendNow6String+0x18>)
   d4bd4:	f006 f903 	bl	dadde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4bd8:	b128      	cbz	r0, d4be6 <_Z7sendNow6String+0x16>
    publishToGoogleSheets();                                         // Send data to Google Sheets on Product Status
   d4bda:	f7ff ff91 	bl	d4b00 <_Z21publishToGoogleSheetsv>
    state = REPORTING_STATE;
   d4bde:	4b03      	ldr	r3, [pc, #12]	; (d4bec <_Z7sendNow6String+0x1c>)
   d4be0:	2205      	movs	r2, #5
   d4be2:	701a      	strb	r2, [r3, #0]
    return 1;
   d4be4:	2001      	movs	r0, #1
}
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	000dcc5c 	.word	0x000dcc5c
   d4bec:	2003e4b5 	.word	0x2003e4b5

000d4bf0 <_Z16isItSafeToChargev>:
{         
   d4bf0:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);                                 
   d4bf2:	2101      	movs	r1, #1
   d4bf4:	a801      	add	r0, sp, #4
   d4bf6:	f005 fe34 	bl	da862 <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4bfa:	4b0b      	ldr	r3, [pc, #44]	; (d4c28 <_Z16isItSafeToChargev+0x38>)
   d4bfc:	691b      	ldr	r3, [r3, #16]
   d4bfe:	3b24      	subs	r3, #36	; 0x24
   d4c00:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4c02:	a801      	add	r0, sp, #4
   d4c04:	f04f 0401 	mov.w	r4, #1
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4c08:	d90a      	bls.n	d4c20 <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4c0a:	f005 febd 	bl	da988 <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d4c0e:	4b07      	ldr	r3, [pc, #28]	; (d4c2c <_Z16isItSafeToChargev+0x3c>)
   d4c10:	731c      	strb	r4, [r3, #12]
    return false;
   d4c12:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d4c14:	a801      	add	r0, sp, #4
   d4c16:	f005 fe33 	bl	da880 <_ZN4PMICD1Ev>
}
   d4c1a:	4620      	mov	r0, r4
   d4c1c:	b002      	add	sp, #8
   d4c1e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                                            // It is safe to charge the battery
   d4c20:	f005 fe9b 	bl	da95a <_ZN4PMIC14enableChargingEv>
    return true;
   d4c24:	e7f6      	b.n	d4c14 <_Z16isItSafeToChargev+0x24>
   d4c26:	bf00      	nop
   d4c28:	2003e3d8 	.word	0x2003e3d8
   d4c2c:	2003e4c0 	.word	0x2003e4c0

000d4c30 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d4c30:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4c32:	4d19      	ldr	r5, [pc, #100]	; (d4c98 <_Z17getSignalStrengthv+0x68>)
   d4c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4c36:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4c38:	ac04      	add	r4, sp, #16
   d4c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c40:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4c44:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4c48:	4914      	ldr	r1, [pc, #80]	; (d4c9c <_Z17getSignalStrengthv+0x6c>)
   d4c4a:	a80e      	add	r0, sp, #56	; 0x38
   d4c4c:	f003 fd4e 	bl	d86ec <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4c50:	a80e      	add	r0, sp, #56	; 0x38
   d4c52:	f003 fd9e 	bl	d8792 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4c56:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4c58:	a80e      	add	r0, sp, #56	; 0x38
   d4c5a:	f003 fda3 	bl	d87a4 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d4c5e:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4c60:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4c64:	f003 fdce 	bl	d8804 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4c68:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d4c6a:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4c6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4c72:	f007 f8c5 	bl	dbe00 <__aeabi_f2d>
   d4c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4c7a:	4628      	mov	r0, r5
   d4c7c:	f007 f8c0 	bl	dbe00 <__aeabi_f2d>
   d4c80:	e9cd 0100 	strd	r0, r1, [sp]
   d4c84:	4a06      	ldr	r2, [pc, #24]	; (d4ca0 <_Z17getSignalStrengthv+0x70>)
   d4c86:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4c8a:	4806      	ldr	r0, [pc, #24]	; (d4ca4 <_Z17getSignalStrengthv+0x74>)
   d4c8c:	2140      	movs	r1, #64	; 0x40
   d4c8e:	f003 fc5b 	bl	d8548 <snprintf>
}
   d4c92:	b019      	add	sp, #100	; 0x64
   d4c94:	bd30      	pop	{r4, r5, pc}
   d4c96:	bf00      	nop
   d4c98:	000dd260 	.word	0x000dd260
   d4c9c:	2003e508 	.word	0x2003e508
   d4ca0:	000dcec4 	.word	0x000dcec4
   d4ca4:	2003e318 	.word	0x2003e318

000d4ca8 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d4ca8:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d4caa:	200f      	movs	r0, #15
   d4cac:	f006 fe9f 	bl	db9ee <analogRead>
  if (reading < 400) {                                                // This ocrresponds to 0 degrees - less than this and we should take another reading to be sure
   d4cb0:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d4cb4:	da05      	bge.n	d4cc2 <_Z14getTemperaturev+0x1a>
    delay(50);
   d4cb6:	2032      	movs	r0, #50	; 0x32
   d4cb8:	f003 fc8e 	bl	d85d8 <delay>
    reading = analogRead(tmp36Pin);
   d4cbc:	200f      	movs	r0, #15
   d4cbe:	f006 fe96 	bl	db9ee <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4cc2:	f007 f88b 	bl	dbddc <__aeabi_i2d>
   d4cc6:	a320      	add	r3, pc, #128	; (adr r3, d4d48 <_Z14getTemperaturev+0xa0>)
   d4cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ccc:	f007 f8f0 	bl	dbeb0 <__aeabi_dmul>
   d4cd0:	f007 fbd0 	bl	dc474 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4cd4:	eddf 7a14 	vldr	s15, [pc, #80]	; d4d28 <_Z14getTemperaturev+0x80>
   d4cd8:	ee07 0a10 	vmov	s14, r0
   d4cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4ce0:	ee17 0a90 	vmov	r0, s15
   d4ce4:	f007 f88c 	bl	dbe00 <__aeabi_f2d>
   d4ce8:	4b10      	ldr	r3, [pc, #64]	; (d4d2c <_Z14getTemperaturev+0x84>)
   d4cea:	2200      	movs	r2, #0
   d4cec:	f006 ff28 	bl	dbb40 <__aeabi_dsub>
   d4cf0:	4b0f      	ldr	r3, [pc, #60]	; (d4d30 <_Z14getTemperaturev+0x88>)
   d4cf2:	2200      	movs	r2, #0
   d4cf4:	f007 f8dc 	bl	dbeb0 <__aeabi_dmul>
   d4cf8:	f007 fb74 	bl	dc3e4 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d4cfc:	f007 f86e 	bl	dbddc <__aeabi_i2d>
   d4d00:	4b0c      	ldr	r3, [pc, #48]	; (d4d34 <_Z14getTemperaturev+0x8c>)
   d4d02:	2200      	movs	r2, #0
   d4d04:	f007 f8d4 	bl	dbeb0 <__aeabi_dmul>
   d4d08:	4b0b      	ldr	r3, [pc, #44]	; (d4d38 <_Z14getTemperaturev+0x90>)
   d4d0a:	2200      	movs	r2, #0
   d4d0c:	f007 f9fa 	bl	dc104 <__aeabi_ddiv>
   d4d10:	4b0a      	ldr	r3, [pc, #40]	; (d4d3c <_Z14getTemperaturev+0x94>)
   d4d12:	2200      	movs	r2, #0
   d4d14:	f006 ff16 	bl	dbb44 <__adddf3>
   d4d18:	f007 fb64 	bl	dc3e4 <__aeabi_d2iz>
   d4d1c:	4b08      	ldr	r3, [pc, #32]	; (d4d40 <_Z14getTemperaturev+0x98>)
   d4d1e:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d4d20:	4b08      	ldr	r3, [pc, #32]	; (d4d44 <_Z14getTemperaturev+0x9c>)
   d4d22:	2201      	movs	r2, #1
   d4d24:	701a      	strb	r2, [r3, #0]
}
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	39800000 	.word	0x39800000
   d4d2c:	3fe00000 	.word	0x3fe00000
   d4d30:	40590000 	.word	0x40590000
   d4d34:	40220000 	.word	0x40220000
   d4d38:	40140000 	.word	0x40140000
   d4d3c:	40400000 	.word	0x40400000
   d4d40:	2003e3d8 	.word	0x2003e3d8
   d4d44:	2003e3fc 	.word	0x2003e3fc
   d4d48:	66666666 	.word	0x66666666
   d4d4c:	400a6666 	.word	0x400a6666

000d4d50 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d4d50:	b500      	push	{lr}
   d4d52:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d4d54:	4668      	mov	r0, sp
   d4d56:	f7ff fb2d 	bl	d43b4 <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d4d5a:	a808      	add	r0, sp, #32
   d4d5c:	f7ff fb2a 	bl	d43b4 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4d60:	2100      	movs	r1, #0
   d4d62:	a808      	add	r0, sp, #32
   d4d64:	f003 fae2 	bl	d832c <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d4d68:	4b13      	ldr	r3, [pc, #76]	; (d4db8 <_Z14setPowerConfigv+0x68>)
   d4d6a:	7959      	ldrb	r1, [r3, #5]
   d4d6c:	b1a1      	cbz	r1, d4d98 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4d6e:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4d72:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4d76:	4b11      	ldr	r3, [pc, #68]	; (d4dbc <_Z14setPowerConfigv+0x6c>)
   d4d78:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4d7a:	f241 0370 	movw	r3, #4208	; 0x1070
   d4d7e:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4d82:	9b00      	ldr	r3, [sp, #0]
   d4d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4d88:	9300      	str	r3, [sp, #0]
   d4d8a:	2100      	movs	r1, #0
   d4d8c:	4668      	mov	r0, sp
   d4d8e:	f003 facd 	bl	d832c <system_power_management_set_config>
}
   d4d92:	b011      	add	sp, #68	; 0x44
   d4d94:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d4d98:	f241 0370 	movw	r3, #4208	; 0x1070
   d4d9c:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4da0:	4b07      	ldr	r3, [pc, #28]	; (d4dc0 <_Z14setPowerConfigv+0x70>)
   d4da2:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4da4:	f241 0310 	movw	r3, #4112	; 0x1010
   d4da8:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d4dac:	9b00      	ldr	r3, [sp, #0]
   d4dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4db2:	9300      	str	r3, [sp, #0]
   d4db4:	e7ea      	b.n	d4d8c <_Z14setPowerConfigv+0x3c>
   d4db6:	bf00      	nop
   d4db8:	2003e4c0 	.word	0x2003e4c0
   d4dbc:	04000384 	.word	0x04000384
   d4dc0:	03840384 	.word	0x03840384

000d4dc4 <_Z12setSolarMode6String>:
{
   d4dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4dc6:	491c      	ldr	r1, [pc, #112]	; (d4e38 <_Z12setSolarMode6String+0x74>)
   d4dc8:	4605      	mov	r5, r0
   d4dca:	f006 f808 	bl	dadde <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4dce:	4604      	mov	r4, r0
   d4dd0:	b1c8      	cbz	r0, d4e06 <_Z12setSolarMode6String+0x42>
    sysStatus.solarPowerMode = true;
   d4dd2:	4b1a      	ldr	r3, [pc, #104]	; (d4e3c <_Z12setSolarMode6String+0x78>)
   d4dd4:	2401      	movs	r4, #1
   d4dd6:	715c      	strb	r4, [r3, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4dd8:	f7ff ffba 	bl	d4d50 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4ddc:	4b18      	ldr	r3, [pc, #96]	; (d4e40 <_Z12setSolarMode6String+0x7c>)
   d4dde:	701c      	strb	r4, [r3, #0]
   d4de0:	f003 fae2 	bl	d83a8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4de4:	b910      	cbnz	r0, d4dec <_Z12setSolarMode6String+0x28>
    return 1;
   d4de6:	2001      	movs	r0, #1
}
   d4de8:	b003      	add	sp, #12
   d4dea:	bd30      	pop	{r4, r5, pc}
   d4dec:	4b15      	ldr	r3, [pc, #84]	; (d4e44 <_Z12setSolarMode6String+0x80>)
    if (Particle.connected()) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4dee:	4a16      	ldr	r2, [pc, #88]	; (d4e48 <_Z12setSolarMode6String+0x84>)
   d4df0:	781b      	ldrb	r3, [r3, #0]
   d4df2:	f88d 3000 	strb.w	r3, [sp]
   d4df6:	4b15      	ldr	r3, [pc, #84]	; (d4e4c <_Z12setSolarMode6String+0x88>)
   d4df8:	781b      	ldrb	r3, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4dfa:	4915      	ldr	r1, [pc, #84]	; (d4e50 <_Z12setSolarMode6String+0x8c>)
   d4dfc:	4815      	ldr	r0, [pc, #84]	; (d4e54 <_Z12setSolarMode6String+0x90>)
   d4dfe:	f7ff fb62 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4e02:	4620      	mov	r0, r4
   d4e04:	e7f0      	b.n	d4de8 <_Z12setSolarMode6String+0x24>
   d4e06:	4914      	ldr	r1, [pc, #80]	; (d4e58 <_Z12setSolarMode6String+0x94>)
   d4e08:	4628      	mov	r0, r5
   d4e0a:	f005 ffe8 	bl	dadde <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4e0e:	2800      	cmp	r0, #0
   d4e10:	d0ea      	beq.n	d4de8 <_Z12setSolarMode6String+0x24>
    sysStatus.solarPowerMode = false;
   d4e12:	4b0a      	ldr	r3, [pc, #40]	; (d4e3c <_Z12setSolarMode6String+0x78>)
   d4e14:	715c      	strb	r4, [r3, #5]
    systemStatusWriteNeeded=true;
   d4e16:	4b0a      	ldr	r3, [pc, #40]	; (d4e40 <_Z12setSolarMode6String+0x7c>)
   d4e18:	2401      	movs	r4, #1
   d4e1a:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4e1c:	f7ff ff98 	bl	d4d50 <_Z14setPowerConfigv>
   d4e20:	f003 fac2 	bl	d83a8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4e24:	2800      	cmp	r0, #0
   d4e26:	d0de      	beq.n	d4de6 <_Z12setSolarMode6String+0x22>
   d4e28:	4b06      	ldr	r3, [pc, #24]	; (d4e44 <_Z12setSolarMode6String+0x80>)
   d4e2a:	4a0c      	ldr	r2, [pc, #48]	; (d4e5c <_Z12setSolarMode6String+0x98>)
   d4e2c:	781b      	ldrb	r3, [r3, #0]
   d4e2e:	f88d 3000 	strb.w	r3, [sp]
   d4e32:	4b06      	ldr	r3, [pc, #24]	; (d4e4c <_Z12setSolarMode6String+0x88>)
   d4e34:	781b      	ldrb	r3, [r3, #0]
   d4e36:	e7e0      	b.n	d4dfa <_Z12setSolarMode6String+0x36>
   d4e38:	000dcc5c 	.word	0x000dcc5c
   d4e3c:	2003e4c0 	.word	0x2003e4c0
   d4e40:	2003e4ec 	.word	0x2003e4ec
   d4e44:	2003e369 	.word	0x2003e369
   d4e48:	000dcedd 	.word	0x000dcedd
   d4e4c:	2003e368 	.word	0x2003e368
   d4e50:	000dcf0a 	.word	0x000dcf0a
   d4e54:	2003e468 	.word	0x2003e468
   d4e58:	000dcf16 	.word	0x000dcf16
   d4e5c:	000dcef4 	.word	0x000dcef4

000d4e60 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range 
   d4e60:	b510      	push	{r4, lr}
  if (sysStatus.sensorType > 1) {                                   // Values are 0 for Pressure and 1 for PIR
   d4e62:	4b2d      	ldr	r3, [pc, #180]	; (d4f18 <_Z17checkSystemValuesv+0xb8>)
   d4e64:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   d4e68:	2a01      	cmp	r2, #1
   d4e6a:	d90c      	bls.n	d4e86 <_Z17checkSystemValuesv+0x26>
    sysStatus.sensorType = 0;
   d4e6c:	2200      	movs	r2, #0
   d4e6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    strncpy(sensorTypeConfigStr,"Pressure Sensor",sizeof(sensorTypeConfigStr));
   d4e72:	4a2a      	ldr	r2, [pc, #168]	; (d4f1c <_Z17checkSystemValuesv+0xbc>)
   d4e74:	492a      	ldr	r1, [pc, #168]	; (d4f20 <_Z17checkSystemValuesv+0xc0>)
   d4e76:	f102 0010 	add.w	r0, r2, #16
   d4e7a:	f852 4b04 	ldr.w	r4, [r2], #4
   d4e7e:	f841 4b04 	str.w	r4, [r1], #4
   d4e82:	4282      	cmp	r2, r0
   d4e84:	d1f9      	bne.n	d4e7a <_Z17checkSystemValuesv+0x1a>
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e86:	691a      	ldr	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e88:	edd3 7a05 	vldr	s15, [r3, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e8c:	2aff      	cmp	r2, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e8e:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e92:	bf88      	it	hi
   d4e94:	2200      	movhi	r2, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e96:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e9a:	bf88      	it	hi
   d4e9c:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ea2:	d406      	bmi.n	d4eb2 <_Z17checkSystemValuesv+0x52>
   d4ea4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eb0:	dd01      	ble.n	d4eb6 <_Z17checkSystemValuesv+0x56>
   d4eb2:	4a1c      	ldr	r2, [pc, #112]	; (d4f24 <_Z17checkSystemValuesv+0xc4>)
   d4eb4:	615a      	str	r2, [r3, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4eb6:	edd3 7a06 	vldr	s15, [r3, #24]
   d4eba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ec2:	d406      	bmi.n	d4ed2 <_Z17checkSystemValuesv+0x72>
   d4ec4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ed0:	dd02      	ble.n	d4ed8 <_Z17checkSystemValuesv+0x78>
   d4ed2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d4ed6:	619a      	str	r2, [r3, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
   d4ed8:	7f1a      	ldrb	r2, [r3, #28]
   d4eda:	2a0c      	cmp	r2, #12
   d4edc:	bf84      	itt	hi
   d4ede:	2200      	movhi	r2, #0
   d4ee0:	771a      	strbhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4ee2:	7f5a      	ldrb	r2, [r3, #29]
   d4ee4:	3a0c      	subs	r2, #12
   d4ee6:	2a0c      	cmp	r2, #12
   d4ee8:	bf84      	itt	hi
   d4eea:	2218      	movhi	r2, #24
   d4eec:	775a      	strbhi	r2, [r3, #29]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4eee:	4a0e      	ldr	r2, [pc, #56]	; (d4f28 <_Z17checkSystemValuesv+0xc8>)
   d4ef0:	6811      	ldr	r1, [r2, #0]
   d4ef2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   d4ef4:	428a      	cmp	r2, r1
   d4ef6:	bf84      	itt	hi
   d4ef8:	2200      	movhi	r2, #0
   d4efa:	851a      	strhhi	r2, [r3, #40]	; 0x28
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4efc:	2201      	movs	r2, #1
   d4efe:	715a      	strb	r2, [r3, #5]
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4f00:	4b0a      	ldr	r3, [pc, #40]	; (d4f2c <_Z17checkSystemValuesv+0xcc>)
   d4f02:	8b98      	ldrh	r0, [r3, #28]
   d4f04:	4281      	cmp	r1, r0
    current.maxConnectTime = 0;
   d4f06:	bf3f      	itttt	cc
   d4f08:	2100      	movcc	r1, #0
   d4f0a:	8399      	strhcc	r1, [r3, #28]
    currentCountsWriteNeeded = true;
   d4f0c:	4b08      	ldrcc	r3, [pc, #32]	; (d4f30 <_Z17checkSystemValuesv+0xd0>)
   d4f0e:	701a      	strbcc	r2, [r3, #0]
  systemStatusWriteNeeded = true;
   d4f10:	4b08      	ldr	r3, [pc, #32]	; (d4f34 <_Z17checkSystemValuesv+0xd4>)
   d4f12:	2201      	movs	r2, #1
   d4f14:	701a      	strb	r2, [r3, #0]
}
   d4f16:	bd10      	pop	{r4, pc}
   d4f18:	2003e4c0 	.word	0x2003e4c0
   d4f1c:	000dcd2b 	.word	0x000dcd2b
   d4f20:	2003e4a5 	.word	0x2003e4a5
   d4f24:	c0a00000 	.word	0xc0a00000
   d4f28:	2003e1fc 	.word	0x2003e1fc
   d4f2c:	2003e3d8 	.word	0x2003e3d8
   d4f30:	2003e3fc 	.word	0x2003e3fc
   d4f34:	2003e4ec 	.word	0x2003e4ec

000d4f38 <_Z21makeUpParkHourStringsv>:
void makeUpParkHourStrings() {
   d4f38:	b510      	push	{r4, lr}
  if (sysStatus.openTime == 0 && sysStatus.closeTime == 24) {
   d4f3a:	4c0e      	ldr	r4, [pc, #56]	; (d4f74 <_Z21makeUpParkHourStringsv+0x3c>)
   d4f3c:	8ba3      	ldrh	r3, [r4, #28]
   d4f3e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4f42:	d109      	bne.n	d4f58 <_Z21makeUpParkHourStringsv+0x20>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   d4f44:	490c      	ldr	r1, [pc, #48]	; (d4f78 <_Z21makeUpParkHourStringsv+0x40>)
   d4f46:	480d      	ldr	r0, [pc, #52]	; (d4f7c <_Z21makeUpParkHourStringsv+0x44>)
   d4f48:	f007 fd71 	bl	dca2e <strcpy>
}
   d4f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   d4f50:	4909      	ldr	r1, [pc, #36]	; (d4f78 <_Z21makeUpParkHourStringsv+0x40>)
   d4f52:	480b      	ldr	r0, [pc, #44]	; (d4f80 <_Z21makeUpParkHourStringsv+0x48>)
   d4f54:	f007 bd6b 	b.w	dca2e <strcpy>
  snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.openTime);
   d4f58:	7f23      	ldrb	r3, [r4, #28]
   d4f5a:	4a0a      	ldr	r2, [pc, #40]	; (d4f84 <_Z21makeUpParkHourStringsv+0x4c>)
   d4f5c:	4807      	ldr	r0, [pc, #28]	; (d4f7c <_Z21makeUpParkHourStringsv+0x44>)
   d4f5e:	2108      	movs	r1, #8
   d4f60:	f003 faf2 	bl	d8548 <snprintf>
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4f64:	7f63      	ldrb	r3, [r4, #29]
   d4f66:	4a07      	ldr	r2, [pc, #28]	; (d4f84 <_Z21makeUpParkHourStringsv+0x4c>)
   d4f68:	4805      	ldr	r0, [pc, #20]	; (d4f80 <_Z21makeUpParkHourStringsv+0x48>)
}
   d4f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4f6e:	2108      	movs	r1, #8
   d4f70:	f003 baea 	b.w	d8548 <snprintf>
   d4f74:	2003e4c0 	.word	0x2003e4c0
   d4f78:	000dcf0f 	.word	0x000dcf0f
   d4f7c:	2003e206 	.word	0x2003e206
   d4f80:	2003e1f4 	.word	0x2003e1f4
   d4f84:	000dcf12 	.word	0x000dcf12

000d4f88 <_Z11setOpenTime6String>:
{
   d4f88:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4f8a:	220a      	movs	r2, #10
   d4f8c:	6800      	ldr	r0, [r0, #0]
   d4f8e:	a901      	add	r1, sp, #4
   d4f90:	f007 fe2e 	bl	dcbf0 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4f94:	2817      	cmp	r0, #23
   d4f96:	d80d      	bhi.n	d4fb4 <_Z11setOpenTime6String+0x2c>
  sysStatus.openTime = tempTime;
   d4f98:	4b08      	ldr	r3, [pc, #32]	; (d4fbc <_Z11setOpenTime6String+0x34>)
   d4f9a:	7718      	strb	r0, [r3, #28]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4f9c:	f7ff ffcc 	bl	d4f38 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4fa0:	4b07      	ldr	r3, [pc, #28]	; (d4fc0 <_Z11setOpenTime6String+0x38>)
   d4fa2:	2401      	movs	r4, #1
   d4fa4:	701c      	strb	r4, [r3, #0]
   d4fa6:	f003 f9ff 	bl	d83a8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4faa:	b128      	cbz	r0, d4fb8 <_Z11setOpenTime6String+0x30>
   d4fac:	f7ff fb6e 	bl	d468c <_Z11setOpenTime6String.part.0>
}
   d4fb0:	b002      	add	sp, #8
   d4fb2:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4fb4:	2000      	movs	r0, #0
   d4fb6:	e7fb      	b.n	d4fb0 <_Z11setOpenTime6String+0x28>
  return 1;
   d4fb8:	4620      	mov	r0, r4
   d4fba:	e7f9      	b.n	d4fb0 <_Z11setOpenTime6String+0x28>
   d4fbc:	2003e4c0 	.word	0x2003e4c0
   d4fc0:	2003e4ec 	.word	0x2003e4ec

000d4fc4 <_Z12setCloseTime6String>:
{
   d4fc4:	b530      	push	{r4, r5, lr}
   d4fc6:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4fc8:	6800      	ldr	r0, [r0, #0]
   d4fca:	220a      	movs	r2, #10
   d4fcc:	a903      	add	r1, sp, #12
   d4fce:	f007 fe0f 	bl	dcbf0 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4fd2:	2818      	cmp	r0, #24
   d4fd4:	d81d      	bhi.n	d5012 <_Z12setCloseTime6String+0x4e>
  sysStatus.closeTime = tempTime;
   d4fd6:	4d10      	ldr	r5, [pc, #64]	; (d5018 <_Z12setCloseTime6String+0x54>)
   d4fd8:	7768      	strb	r0, [r5, #29]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4fda:	f7ff ffad 	bl	d4f38 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4fde:	4b0f      	ldr	r3, [pc, #60]	; (d501c <_Z12setCloseTime6String+0x58>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4fe0:	4a0f      	ldr	r2, [pc, #60]	; (d5020 <_Z12setCloseTime6String+0x5c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4fe2:	2401      	movs	r4, #1
   d4fe4:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4fea:	7f6b      	ldrb	r3, [r5, #29]
   d4fec:	a804      	add	r0, sp, #16
   d4fee:	f003 faab 	bl	d8548 <snprintf>
   d4ff2:	f003 f9d9 	bl	d83a8 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4ff6:	b150      	cbz	r0, d500e <_Z12setCloseTime6String+0x4a>
   d4ff8:	4b0a      	ldr	r3, [pc, #40]	; (d5024 <_Z12setCloseTime6String+0x60>)
   d4ffa:	490b      	ldr	r1, [pc, #44]	; (d5028 <_Z12setCloseTime6String+0x64>)
   d4ffc:	781b      	ldrb	r3, [r3, #0]
   d4ffe:	f88d 3000 	strb.w	r3, [sp]
   d5002:	4b0a      	ldr	r3, [pc, #40]	; (d502c <_Z12setCloseTime6String+0x68>)
   d5004:	480a      	ldr	r0, [pc, #40]	; (d5030 <_Z12setCloseTime6String+0x6c>)
   d5006:	781b      	ldrb	r3, [r3, #0]
   d5008:	aa04      	add	r2, sp, #16
   d500a:	f7ff fa5c 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d500e:	4620      	mov	r0, r4
   d5010:	e000      	b.n	d5014 <_Z12setCloseTime6String+0x50>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d5012:	2000      	movs	r0, #0
}
   d5014:	b045      	add	sp, #276	; 0x114
   d5016:	bd30      	pop	{r4, r5, pc}
   d5018:	2003e4c0 	.word	0x2003e4c0
   d501c:	2003e4ec 	.word	0x2003e4ec
   d5020:	000dcf18 	.word	0x000dcf18
   d5024:	2003e369 	.word	0x2003e369
   d5028:	000dd043 	.word	0x000dd043
   d502c:	2003e368 	.word	0x2003e368
   d5030:	2003e468 	.word	0x2003e468

000d5034 <_Z25connectToParticleBlockingv>:
bool connectToParticleBlocking() {
   d5034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5038:	b08d      	sub	sp, #52	; 0x34
  unsigned long connectionStartTime = Time.now();                  // Start the clock
   d503a:	f006 fa06 	bl	db44a <_ZN9TimeClass3nowEv>
   d503e:	9003      	str	r0, [sp, #12]

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5040:	4842      	ldr	r0, [pc, #264]	; (d514c <_Z25connectToParticleBlockingv+0x118>)
  for (unsigned int retry = 0; retry < connectMaxTimeSec && !waitFor(Particle.connected,1000); retry++) {   // wait a second and repeat
   d5042:	f8df a130 	ldr.w	sl, [pc, #304]	; d5174 <_Z25connectToParticleBlockingv+0x140>
   d5046:	6840      	ldr	r0, [r0, #4]
   d5048:	2300      	movs	r3, #0
   d504a:	461a      	mov	r2, r3
   d504c:	4619      	mov	r1, r3
   d504e:	f003 fa1b 	bl	d8488 <network_on>
        spark_cloud_flag_connect();
   d5052:	f003 f9a1 	bl	d8398 <spark_cloud_flag_connect>
   d5056:	2400      	movs	r4, #0
        while (_while() && !_condition()) {
   d5058:	f240 38e7 	movw	r8, #999	; 0x3e7
   d505c:	f04f 0900 	mov.w	r9, #0
   d5060:	f8da 3000 	ldr.w	r3, [sl]
   d5064:	42a3      	cmp	r3, r4
   d5066:	d928      	bls.n	d50ba <_Z25connectToParticleBlockingv+0x86>
        const system_tick_t start = millis();
   d5068:	f7ff fa0c 	bl	d4484 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d506c:	f04f 0b00 	mov.w	fp, #0
        const system_tick_t start = millis();
   d5070:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5072:	f7ff fa07 	bl	d4484 <_ZN11SystemClass6millisEv>
   d5076:	1b46      	subs	r6, r0, r5
   d5078:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d507c:	45b9      	cmp	r9, r7
   d507e:	bf08      	it	eq
   d5080:	45b0      	cmpeq	r8, r6
   d5082:	d305      	bcc.n	d5090 <_Z25connectToParticleBlockingv+0x5c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5084:	f003 f990 	bl	d83a8 <spark_cloud_flag_connected>
   d5088:	b910      	cbnz	r0, d5090 <_Z25connectToParticleBlockingv+0x5c>
            spark_process();
   d508a:	f003 f97d 	bl	d8388 <spark_process>
        while (_while() && !_condition()) {
   d508e:	e7f0      	b.n	d5072 <_Z25connectToParticleBlockingv+0x3e>
   d5090:	f003 f98a 	bl	d83a8 <spark_cloud_flag_connected>
   d5094:	b988      	cbnz	r0, d50ba <_Z25connectToParticleBlockingv+0x86>
    if(sensorDetect) recordCount();                               // service the interrupt every second
   d5096:	4b2e      	ldr	r3, [pc, #184]	; (d5150 <_Z25connectToParticleBlockingv+0x11c>)
   d5098:	781b      	ldrb	r3, [r3, #0]
   d509a:	b10b      	cbz	r3, d50a0 <_Z25connectToParticleBlockingv+0x6c>
   d509c:	f7ff fc3e 	bl	d491c <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d50a0:	f002 ff1e 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d50a4:	4b2b      	ldr	r3, [pc, #172]	; (d5154 <_Z25connectToParticleBlockingv+0x120>)
   d50a6:	6018      	str	r0, [r3, #0]
    		spark_process();
   d50a8:	f003 f96e 	bl	d8388 <spark_process>
    ab1805.setWDT(-1);                                            // Pet the watchdog as we are out of the main loop for a long time.
   d50ac:	482a      	ldr	r0, [pc, #168]	; (d5158 <_Z25connectToParticleBlockingv+0x124>)
   d50ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d50b2:	f001 fc93 	bl	d69dc <_ZN6AB18056setWDTEi>
  for (unsigned int retry = 0; retry < connectMaxTimeSec && !waitFor(Particle.connected,1000); retry++) {   // wait a second and repeat
   d50b6:	3401      	adds	r4, #1
   d50b8:	e7d2      	b.n	d5060 <_Z25connectToParticleBlockingv+0x2c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50ba:	f003 f975 	bl	d83a8 <spark_cloud_flag_connected>
   d50be:	4c27      	ldr	r4, [pc, #156]	; (d515c <_Z25connectToParticleBlockingv+0x128>)
   d50c0:	4e27      	ldr	r6, [pc, #156]	; (d5160 <_Z25connectToParticleBlockingv+0x12c>)
  if (Particle.connected()) {                                     // We were able to connect within the alotted time. record the event and publish
   d50c2:	4605      	mov	r5, r0
   d50c4:	b968      	cbnz	r0, d50e2 <_Z25connectToParticleBlockingv+0xae>
    Log.info("cloud connection unsuccessful");
   d50c6:	4927      	ldr	r1, [pc, #156]	; (d5164 <_Z25connectToParticleBlockingv+0x130>)
    sysStatus.connectedStatus = false;
   d50c8:	70e0      	strb	r0, [r4, #3]
    Log.info("cloud connection unsuccessful");
   d50ca:	4827      	ldr	r0, [pc, #156]	; (d5168 <_Z25connectToParticleBlockingv+0x134>)
   d50cc:	f7ff f9e4 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d50d0:	f002 ff06 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d50d4:	4b25      	ldr	r3, [pc, #148]	; (d516c <_Z25connectToParticleBlockingv+0x138>)
    state = ERROR_STATE;
   d50d6:	4a26      	ldr	r2, [pc, #152]	; (d5170 <_Z25connectToParticleBlockingv+0x13c>)
    resetTimeStamp = millis();
   d50d8:	6018      	str	r0, [r3, #0]
    state = ERROR_STATE;
   d50da:	2301      	movs	r3, #1
   d50dc:	7013      	strb	r3, [r2, #0]
    systemStatusWriteNeeded = true;
   d50de:	7033      	strb	r3, [r6, #0]
    return 0;                                                     // Failed to connect will never get to this line
   d50e0:	e02f      	b.n	d5142 <_Z25connectToParticleBlockingv+0x10e>
    sysStatus.connectedStatus = true;
   d50e2:	2301      	movs	r3, #1
   d50e4:	70e3      	strb	r3, [r4, #3]
    sysStatus.lastConnection = Time.now();
   d50e6:	f006 f9b0 	bl	db44a <_ZN9TimeClass3nowEv>
   d50ea:	6260      	str	r0, [r4, #36]	; 0x24
    sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d50ec:	f006 f9ad 	bl	db44a <_ZN9TimeClass3nowEv>
   d50f0:	9b03      	ldr	r3, [sp, #12]
    if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;  // This is clearly an erroneous result
   d50f2:	4a20      	ldr	r2, [pc, #128]	; (d5174 <_Z25connectToParticleBlockingv+0x140>)
    sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d50f4:	1ac3      	subs	r3, r0, r3
    if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;  // This is clearly an erroneous result
   d50f6:	6812      	ldr	r2, [r2, #0]
    sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d50f8:	b29b      	uxth	r3, r3
    if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;  // This is clearly an erroneous result
   d50fa:	4293      	cmp	r3, r2
    sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d50fc:	8523      	strh	r3, [r4, #40]	; 0x28
    if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d50fe:	4a1e      	ldr	r2, [pc, #120]	; (d5178 <_Z25connectToParticleBlockingv+0x144>)
    if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;  // This is clearly an erroneous result
   d5100:	bf84      	itt	hi
   d5102:	2300      	movhi	r3, #0
   d5104:	8523      	strhhi	r3, [r4, #40]	; 0x28
    if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d5106:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   d5108:	8b91      	ldrh	r1, [r2, #28]
   d510a:	4299      	cmp	r1, r3
   d510c:	bf38      	it	cc
   d510e:	8393      	strhcc	r3, [r2, #28]
    snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);
   d5110:	2120      	movs	r1, #32
   d5112:	4a1a      	ldr	r2, [pc, #104]	; (d517c <_Z25connectToParticleBlockingv+0x148>)
   d5114:	a804      	add	r0, sp, #16
   d5116:	f003 fa17 	bl	d8548 <snprintf>
    Log.info(connectionStr);
   d511a:	4813      	ldr	r0, [pc, #76]	; (d5168 <_Z25connectToParticleBlockingv+0x134>)
   d511c:	a904      	add	r1, sp, #16
   d511e:	f7ff f9bb 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
    if (sysStatus.verboseMode) publishQueue.publish("Cellular",connectionStr,PRIVATE);
   d5122:	7923      	ldrb	r3, [r4, #4]
   d5124:	b14b      	cbz	r3, d513a <_Z25connectToParticleBlockingv+0x106>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d5126:	2300      	movs	r3, #0
   d5128:	f88d 3000 	strb.w	r3, [sp]
   d512c:	4b14      	ldr	r3, [pc, #80]	; (d5180 <_Z25connectToParticleBlockingv+0x14c>)
   d512e:	4915      	ldr	r1, [pc, #84]	; (d5184 <_Z25connectToParticleBlockingv+0x150>)
   d5130:	781b      	ldrb	r3, [r3, #0]
   d5132:	4815      	ldr	r0, [pc, #84]	; (d5188 <_Z25connectToParticleBlockingv+0x154>)
   d5134:	aa04      	add	r2, sp, #16
   d5136:	f7ff f9c6 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    currentCountsWriteNeeded = true;
   d513a:	4a14      	ldr	r2, [pc, #80]	; (d518c <_Z25connectToParticleBlockingv+0x158>)
    systemStatusWriteNeeded = true;
   d513c:	2301      	movs	r3, #1
   d513e:	7033      	strb	r3, [r6, #0]
    currentCountsWriteNeeded = true;
   d5140:	7013      	strb	r3, [r2, #0]
}
   d5142:	4628      	mov	r0, r5
   d5144:	b00d      	add	sp, #52	; 0x34
   d5146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d514a:	bf00      	nop
   d514c:	2003e508 	.word	0x2003e508
   d5150:	2003e4a4 	.word	0x2003e4a4
   d5154:	2003e7c4 	.word	0x2003e7c4
   d5158:	2003e36c 	.word	0x2003e36c
   d515c:	2003e4c0 	.word	0x2003e4c0
   d5160:	2003e4ec 	.word	0x2003e4ec
   d5164:	000dcf4d 	.word	0x000dcf4d
   d5168:	2003e5dc 	.word	0x2003e5dc
   d516c:	2003e4a0 	.word	0x2003e4a0
   d5170:	2003e4b5 	.word	0x2003e4b5
   d5174:	2003e1fc 	.word	0x2003e1fc
   d5178:	2003e3d8 	.word	0x2003e3d8
   d517c:	000dcf2f 	.word	0x000dcf2f
   d5180:	2003e368 	.word	0x2003e368
   d5184:	000dcf44 	.word	0x000dcf44
   d5188:	2003e468 	.word	0x2003e468
   d518c:	2003e3fc 	.word	0x2003e3fc

000d5190 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d5190:	b513      	push	{r0, r1, r4, lr}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5192:	4926      	ldr	r1, [pc, #152]	; (d522c <_Z15setLowPowerMode6String+0x9c>)
   d5194:	4604      	mov	r4, r0
   d5196:	f005 fe22 	bl	dadde <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d519a:	b320      	cbz	r0, d51e6 <_Z15setLowPowerMode6String+0x56>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d519c:	4923      	ldr	r1, [pc, #140]	; (d522c <_Z15setLowPowerMode6String+0x9c>)
   d519e:	4620      	mov	r0, r4
   d51a0:	f005 fe1d 	bl	dadde <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d51a4:	bb38      	cbnz	r0, d51f6 <_Z15setLowPowerMode6String+0x66>
   d51a6:	4922      	ldr	r1, [pc, #136]	; (d5230 <_Z15setLowPowerMode6String+0xa0>)
   d51a8:	4620      	mov	r0, r4
   d51aa:	f005 fe18 	bl	dadde <_ZNK6String6equalsEPKc>
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
    }
    sysStatus.lowPowerMode = true;
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d51ae:	2800      	cmp	r0, #0
   d51b0:	d037      	beq.n	d5222 <_Z15setLowPowerMode6String+0x92>
   d51b2:	f003 f8f9 	bl	d83a8 <spark_cloud_flag_connected>
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
   d51b6:	b908      	cbnz	r0, d51bc <_Z15setLowPowerMode6String+0x2c>
      connectToParticleBlocking();
   d51b8:	f7ff ff3c 	bl	d5034 <_Z25connectToParticleBlockingv>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d51bc:	4b1d      	ldr	r3, [pc, #116]	; (d5234 <_Z15setLowPowerMode6String+0xa4>)
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE, WITH_ACK);
   d51be:	4a1e      	ldr	r2, [pc, #120]	; (d5238 <_Z15setLowPowerMode6String+0xa8>)
   d51c0:	781b      	ldrb	r3, [r3, #0]
   d51c2:	f88d 3000 	strb.w	r3, [sp]
   d51c6:	4b1d      	ldr	r3, [pc, #116]	; (d523c <_Z15setLowPowerMode6String+0xac>)
   d51c8:	491d      	ldr	r1, [pc, #116]	; (d5240 <_Z15setLowPowerMode6String+0xb0>)
   d51ca:	781b      	ldrb	r3, [r3, #0]
   d51cc:	481d      	ldr	r0, [pc, #116]	; (d5244 <_Z15setLowPowerMode6String+0xb4>)
   d51ce:	f7ff f97a 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d51d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d51d6:	f003 f9ff 	bl	d85d8 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d51da:	4b1b      	ldr	r3, [pc, #108]	; (d5248 <_Z15setLowPowerMode6String+0xb8>)
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d51dc:	491b      	ldr	r1, [pc, #108]	; (d524c <_Z15setLowPowerMode6String+0xbc>)
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d51de:	2200      	movs	r2, #0
   d51e0:	719a      	strb	r2, [r3, #6]
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d51e2:	2210      	movs	r2, #16
   d51e4:	e01a      	b.n	d521c <_Z15setLowPowerMode6String+0x8c>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d51e6:	4912      	ldr	r1, [pc, #72]	; (d5230 <_Z15setLowPowerMode6String+0xa0>)
   d51e8:	4620      	mov	r0, r4
   d51ea:	f005 fdf8 	bl	dadde <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d51ee:	2800      	cmp	r0, #0
   d51f0:	d1d4      	bne.n	d519c <_Z15setLowPowerMode6String+0xc>
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d51f2:	b002      	add	sp, #8
   d51f4:	bd10      	pop	{r4, pc}
   d51f6:	f003 f8d7 	bl	d83a8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d51fa:	b150      	cbz	r0, d5212 <_Z15setLowPowerMode6String+0x82>
   d51fc:	4b0d      	ldr	r3, [pc, #52]	; (d5234 <_Z15setLowPowerMode6String+0xa4>)
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
   d51fe:	4a14      	ldr	r2, [pc, #80]	; (d5250 <_Z15setLowPowerMode6String+0xc0>)
   d5200:	781b      	ldrb	r3, [r3, #0]
   d5202:	f88d 3000 	strb.w	r3, [sp]
   d5206:	4b0d      	ldr	r3, [pc, #52]	; (d523c <_Z15setLowPowerMode6String+0xac>)
   d5208:	490d      	ldr	r1, [pc, #52]	; (d5240 <_Z15setLowPowerMode6String+0xb0>)
   d520a:	781b      	ldrb	r3, [r3, #0]
   d520c:	480d      	ldr	r0, [pc, #52]	; (d5244 <_Z15setLowPowerMode6String+0xb4>)
   d520e:	f7ff f95a 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lowPowerMode = true;
   d5212:	4b0d      	ldr	r3, [pc, #52]	; (d5248 <_Z15setLowPowerMode6String+0xb8>)
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d5214:	490f      	ldr	r1, [pc, #60]	; (d5254 <_Z15setLowPowerMode6String+0xc4>)
    sysStatus.lowPowerMode = true;
   d5216:	2201      	movs	r2, #1
   d5218:	719a      	strb	r2, [r3, #6]
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d521a:	2210      	movs	r2, #16
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d521c:	480e      	ldr	r0, [pc, #56]	; (d5258 <_Z15setLowPowerMode6String+0xc8>)
   d521e:	f007 fc46 	bl	dcaae <strncpy>
  systemStatusWriteNeeded = true;
   d5222:	4b0e      	ldr	r3, [pc, #56]	; (d525c <_Z15setLowPowerMode6String+0xcc>)
   d5224:	2001      	movs	r0, #1
   d5226:	7018      	strb	r0, [r3, #0]
  return 1;
   d5228:	e7e3      	b.n	d51f2 <_Z15setLowPowerMode6String+0x62>
   d522a:	bf00      	nop
   d522c:	000dcc5c 	.word	0x000dcc5c
   d5230:	000dcf16 	.word	0x000dcf16
   d5234:	2003e369 	.word	0x2003e369
   d5238:	000dcf7a 	.word	0x000dcf7a
   d523c:	2003e368 	.word	0x2003e368
   d5240:	000dcf0a 	.word	0x000dcf0a
   d5244:	2003e468 	.word	0x2003e468
   d5248:	2003e4c0 	.word	0x2003e4c0
   d524c:	000dcf8c 	.word	0x000dcf8c
   d5250:	000dcf6b 	.word	0x000dcf6b
   d5254:	000dcf90 	.word	0x000dcf90
   d5258:	2003e454 	.word	0x2003e454
   d525c:	2003e4ec 	.word	0x2003e4ec

000d5260 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d5260:	b570      	push	{r4, r5, r6, lr}
   d5262:	b086      	sub	sp, #24
  connectToParticleBlocking();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
   d5264:	f7ff fee6 	bl	d5034 <_Z25connectToParticleBlockingv>
   d5268:	f003 f89e 	bl	d83a8 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d526c:	b150      	cbz	r0, d5284 <_Z18loadSystemDefaultsv+0x24>
   d526e:	4b17      	ldr	r3, [pc, #92]	; (d52cc <_Z18loadSystemDefaultsv+0x6c>)
   d5270:	4a17      	ldr	r2, [pc, #92]	; (d52d0 <_Z18loadSystemDefaultsv+0x70>)
   d5272:	781b      	ldrb	r3, [r3, #0]
   d5274:	f88d 3000 	strb.w	r3, [sp]
   d5278:	4b16      	ldr	r3, [pc, #88]	; (d52d4 <_Z18loadSystemDefaultsv+0x74>)
   d527a:	4917      	ldr	r1, [pc, #92]	; (d52d8 <_Z18loadSystemDefaultsv+0x78>)
   d527c:	781b      	ldrb	r3, [r3, #0]
   d527e:	4817      	ldr	r0, [pc, #92]	; (d52dc <_Z18loadSystemDefaultsv+0x7c>)
   d5280:	f7ff f921 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.structuresVersion = 1;
   d5284:	4c16      	ldr	r4, [pc, #88]	; (d52e0 <_Z18loadSystemDefaultsv+0x80>)
  setLowPowerMode("1");
   d5286:	4917      	ldr	r1, [pc, #92]	; (d52e4 <_Z18loadSystemDefaultsv+0x84>)
  sysStatus.verboseMode = false;
   d5288:	2500      	movs	r5, #0
  sysStatus.structuresVersion = 1;
   d528a:	2601      	movs	r6, #1
  setLowPowerMode("1");
   d528c:	a802      	add	r0, sp, #8
  sysStatus.structuresVersion = 1;
   d528e:	7026      	strb	r6, [r4, #0]
  sysStatus.verboseMode = false;
   d5290:	7125      	strb	r5, [r4, #4]
  sysStatus.clockSet = false;
   d5292:	70a5      	strb	r5, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d5294:	71e5      	strb	r5, [r4, #7]
  setLowPowerMode("1");
   d5296:	f005 fce8 	bl	dac6a <_ZN6StringC1EPKc>
   d529a:	a802      	add	r0, sp, #8
   d529c:	f7ff ff78 	bl	d5190 <_Z15setLowPowerMode6String>
   d52a0:	a802      	add	r0, sp, #8
   d52a2:	f005 fc97 	bl	dabd4 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d52a6:	4b10      	ldr	r3, [pc, #64]	; (d52e8 <_Z18loadSystemDefaultsv+0x88>)
   d52a8:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d52aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d52ae:	61a3      	str	r3, [r4, #24]
  sysStatus.openTime = 6;
   d52b0:	f241 5306 	movw	r3, #5382	; 0x1506
   d52b4:	83a3      	strh	r3, [r4, #28]
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d52b6:	4622      	mov	r2, r4
   d52b8:	232c      	movs	r3, #44	; 0x2c
   d52ba:	4631      	mov	r1, r6
   d52bc:	480b      	ldr	r0, [pc, #44]	; (d52ec <_Z18loadSystemDefaultsv+0x8c>)
  sysStatus.solarPowerMode = true;  
   d52be:	7166      	strb	r6, [r4, #5]
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d52c0:	8525      	strh	r5, [r4, #40]	; 0x28
   d52c2:	f002 f87e 	bl	d73c2 <_ZN6MB85RC9writeDataEjPKhj>
}
   d52c6:	b006      	add	sp, #24
   d52c8:	bd70      	pop	{r4, r5, r6, pc}
   d52ca:	bf00      	nop
   d52cc:	2003e369 	.word	0x2003e369
   d52d0:	000dcf9a 	.word	0x000dcf9a
   d52d4:	2003e368 	.word	0x2003e368
   d52d8:	000dcf0a 	.word	0x000dcf0a
   d52dc:	2003e468 	.word	0x2003e468
   d52e0:	2003e4c0 	.word	0x2003e4c0
   d52e4:	000dcc5c 	.word	0x000dcc5c
   d52e8:	c0a00000 	.word	0xc0a00000
   d52ec:	2003e410 	.word	0x2003e410

000d52f0 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d52f0:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d52f2:	4c0a      	ldr	r4, [pc, #40]	; (d531c <_Z15resetEverythingv+0x2c>)
   d52f4:	2500      	movs	r5, #0
  current.hourlyCountInFlight = 0;
   d52f6:	e9c4 5500 	strd	r5, r5, [r4]
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d52fa:	60a5      	str	r5, [r4, #8]
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d52fc:	f006 f8a5 	bl	db44a <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5300:	4b07      	ldr	r3, [pc, #28]	; (d5320 <_Z15resetEverythingv+0x30>)
  currentCountsWriteNeeded = true;
   d5302:	4a08      	ldr	r2, [pc, #32]	; (d5324 <_Z15resetEverythingv+0x34>)
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5304:	611d      	str	r5, [r3, #16]
  current.minBatteryLevel = 100;
   d5306:	2364      	movs	r3, #100	; 0x64
   d5308:	6223      	str	r3, [r4, #32]
  currentCountsWriteNeeded = true;
   d530a:	2301      	movs	r3, #1
   d530c:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d530e:	4a06      	ldr	r2, [pc, #24]	; (d5328 <_Z15resetEverythingv+0x38>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d5310:	60e0      	str	r0, [r4, #12]
  systemStatusWriteNeeded=true;
   d5312:	7013      	strb	r3, [r2, #0]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5314:	6165      	str	r5, [r4, #20]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d5316:	83a5      	strh	r5, [r4, #28]
}
   d5318:	bd38      	pop	{r3, r4, r5, pc}
   d531a:	bf00      	nop
   d531c:	2003e3d8 	.word	0x2003e3d8
   d5320:	2003e4c0 	.word	0x2003e4c0
   d5324:	2003e3fc 	.word	0x2003e3fc
   d5328:	2003e4ec 	.word	0x2003e4ec

000d532c <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition to the Log Handler and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d532c:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d532e:	4d15      	ldr	r5, [pc, #84]	; (d5384 <_Z22publishStateTransitionv+0x58>)
   d5330:	4c15      	ldr	r4, [pc, #84]	; (d5388 <_Z22publishStateTransitionv+0x5c>)
   d5332:	4916      	ldr	r1, [pc, #88]	; (d538c <_Z22publishStateTransitionv+0x60>)
   d5334:	782a      	ldrb	r2, [r5, #0]
   d5336:	7820      	ldrb	r0, [r4, #0]
{
   d5338:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d533a:	230e      	movs	r3, #14
   d533c:	fb03 1202 	mla	r2, r3, r2, r1
   d5340:	9200      	str	r2, [sp, #0]
   d5342:	fb03 1300 	mla	r3, r3, r0, r1
   d5346:	4a12      	ldr	r2, [pc, #72]	; (d5390 <_Z22publishStateTransitionv+0x64>)
   d5348:	2128      	movs	r1, #40	; 0x28
   d534a:	a802      	add	r0, sp, #8
   d534c:	f003 f8fc 	bl	d8548 <snprintf>
  oldState = state;
   d5350:	782b      	ldrb	r3, [r5, #0]
   d5352:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) {
   d5354:	4b0f      	ldr	r3, [pc, #60]	; (d5394 <_Z22publishStateTransitionv+0x68>)
   d5356:	791b      	ldrb	r3, [r3, #4]
   d5358:	b18b      	cbz	r3, d537e <_Z22publishStateTransitionv+0x52>
   d535a:	f003 f825 	bl	d83a8 <spark_cloud_flag_connected>
    if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE, WITH_ACK);
   d535e:	b150      	cbz	r0, d5376 <_Z22publishStateTransitionv+0x4a>
   d5360:	4b0d      	ldr	r3, [pc, #52]	; (d5398 <_Z22publishStateTransitionv+0x6c>)
   d5362:	490e      	ldr	r1, [pc, #56]	; (d539c <_Z22publishStateTransitionv+0x70>)
   d5364:	781b      	ldrb	r3, [r3, #0]
   d5366:	f88d 3000 	strb.w	r3, [sp]
   d536a:	4b0d      	ldr	r3, [pc, #52]	; (d53a0 <_Z22publishStateTransitionv+0x74>)
   d536c:	480d      	ldr	r0, [pc, #52]	; (d53a4 <_Z22publishStateTransitionv+0x78>)
   d536e:	781b      	ldrb	r3, [r3, #0]
   d5370:	aa02      	add	r2, sp, #8
   d5372:	f7ff f8a8 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    Log.info(stateTransitionString);
   d5376:	480c      	ldr	r0, [pc, #48]	; (d53a8 <_Z22publishStateTransitionv+0x7c>)
   d5378:	a902      	add	r1, sp, #8
   d537a:	f7ff f88d 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
  }
}
   d537e:	b00d      	add	sp, #52	; 0x34
   d5380:	bd30      	pop	{r4, r5, pc}
   d5382:	bf00      	nop
   d5384:	2003e4b5 	.word	0x2003e4b5
   d5388:	2003e464 	.word	0x2003e464
   d538c:	2003e214 	.word	0x2003e214
   d5390:	000dcfb2 	.word	0x000dcfb2
   d5394:	2003e4c0 	.word	0x2003e4c0
   d5398:	2003e369 	.word	0x2003e369
   d539c:	000dcfc0 	.word	0x000dcfc0
   d53a0:	2003e368 	.word	0x2003e368
   d53a4:	2003e468 	.word	0x2003e468
   d53a8:	2003e5dc 	.word	0x2003e5dc

000d53ac <_Z14fullModemResetv>:
 * @brief Fully resets modem.
 * 
 * @details Disconnects from the cloud, resets modem and SIM, and deep sleeps for 10 seconds.
 * Adapted form Rikkas7's https://github.com/rickkas7/electronsample.
 */
void fullModemReset() {  // 
   d53ac:	b530      	push	{r4, r5, lr}
   d53ae:	b085      	sub	sp, #20
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   d53b0:	2300      	movs	r3, #0
	Particle.disconnect(); 	                                         // Disconnect from the cloud
   d53b2:	a801      	add	r0, sp, #4
   d53b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d53b8:	f8ad 300c 	strh.w	r3, [sp, #12]
   d53bc:	f003 faf3 	bl	d89a6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
   d53c0:	f002 fd8e 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
   d53c4:	f643 2597 	movw	r5, #14999	; 0x3a97
   d53c8:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d53ca:	f002 ffed 	bl	d83a8 <spark_cloud_flag_connected>
   d53ce:	b140      	cbz	r0, d53e2 <_Z14fullModemResetv+0x36>
   d53d0:	f002 fd86 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
   d53d4:	1b00      	subs	r0, r0, r4
   d53d6:	42a8      	cmp	r0, r5
   d53d8:	d803      	bhi.n	d53e2 <_Z14fullModemResetv+0x36>
		delay(100);
   d53da:	2064      	movs	r0, #100	; 0x64
   d53dc:	f003 f8fc 	bl	d85d8 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
   d53e0:	e7f3      	b.n	d53ca <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
   d53e2:	2100      	movs	r1, #0
   d53e4:	4b09      	ldr	r3, [pc, #36]	; (d540c <_Z14fullModemResetv+0x60>)
   d53e6:	f247 5230 	movw	r2, #30000	; 0x7530
   d53ea:	4608      	mov	r0, r1
   d53ec:	f002 fcc0 	bl	d7d70 <cellular_command>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=15\r\n");
	delay(1000);
   d53f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d53f4:	f003 f8f0 	bl	d85d8 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
   d53f8:	4b05      	ldr	r3, [pc, #20]	; (d5410 <_Z14fullModemResetv+0x64>)
   d53fa:	220a      	movs	r2, #10
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	2101      	movs	r1, #1
   d5400:	a801      	add	r0, sp, #4
   d5402:	f005 fe0d 	bl	db020 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
   d5406:	b005      	add	sp, #20
   d5408:	bd30      	pop	{r4, r5, pc}
   d540a:	bf00      	nop
   d540c:	000dcfd1 	.word	0x000dcfd1
   d5410:	2003e364 	.word	0x2003e364

000d5414 <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details Syncs time with remote service and sets low power mode. Called from Reporting State ONLY.
 * Clean house at the end of the day
 */
void dailyCleanup() {
   d5414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5418:	4b21      	ldr	r3, [pc, #132]	; (d54a0 <_Z12dailyCleanupv+0x8c>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
  sysStatus.verboseMode = false;
   d541a:	4c22      	ldr	r4, [pc, #136]	; (d54a4 <_Z12dailyCleanupv+0x90>)
   d541c:	781b      	ldrb	r3, [r3, #0]
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d541e:	4a22      	ldr	r2, [pc, #136]	; (d54a8 <_Z12dailyCleanupv+0x94>)
   d5420:	4922      	ldr	r1, [pc, #136]	; (d54ac <_Z12dailyCleanupv+0x98>)
   d5422:	4823      	ldr	r0, [pc, #140]	; (d54b0 <_Z12dailyCleanupv+0x9c>)
void dailyCleanup() {
   d5424:	b086      	sub	sp, #24
  sysStatus.verboseMode = false;
   d5426:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d5428:	f88d 3000 	strb.w	r3, [sp]
   d542c:	4b21      	ldr	r3, [pc, #132]	; (d54b4 <_Z12dailyCleanupv+0xa0>)
   d542e:	781b      	ldrb	r3, [r3, #0]
   d5430:	f7ff f849 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d5434:	7125      	strb	r5, [r4, #4]
  Particle.syncTime();                                                 // Set the clock each day
   d5436:	f7fe feef 	bl	d4218 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
   d543a:	f7ff f823 	bl	d4484 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d543e:	f247 582f 	movw	r8, #29999	; 0x752f
        const system_tick_t start = millis();
   d5442:	4682      	mov	sl, r0
        while (_while() && !_condition()) {
   d5444:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5448:	f7ff f81c 	bl	d4484 <_ZN11SystemClass6millisEv>
   d544c:	ebb0 060a 	subs.w	r6, r0, sl
   d5450:	eb61 0705 	sbc.w	r7, r1, r5
        while (_while() && !_condition()) {
   d5454:	45b9      	cmp	r9, r7
   d5456:	bf08      	it	eq
   d5458:	45b0      	cmpeq	r8, r6
   d545a:	d305      	bcc.n	d5468 <_Z12dailyCleanupv+0x54>
  waitFor(Particle.syncTimeDone,30000);                                // Wait for up to 30 seconds for the SyncTime to complete
   d545c:	f7fe fee6 	bl	d422c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5460:	b910      	cbnz	r0, d5468 <_Z12dailyCleanupv+0x54>
            spark_process();
   d5462:	f002 ff91 	bl	d8388 <spark_process>
        while (_while() && !_condition()) {
   d5466:	e7ef      	b.n	d5448 <_Z12dailyCleanupv+0x34>
   d5468:	f7fe fee0 	bl	d422c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {     // If Solar or if the battery is being discharged
   d546c:	7963      	ldrb	r3, [r4, #5]
   d546e:	b913      	cbnz	r3, d5476 <_Z12dailyCleanupv+0x62>
   d5470:	68a3      	ldr	r3, [r4, #8]
   d5472:	2b46      	cmp	r3, #70	; 0x46
   d5474:	dc09      	bgt.n	d548a <_Z12dailyCleanupv+0x76>
    setLowPowerMode("1");
   d5476:	4910      	ldr	r1, [pc, #64]	; (d54b8 <_Z12dailyCleanupv+0xa4>)
   d5478:	a802      	add	r0, sp, #8
   d547a:	f005 fbf6 	bl	dac6a <_ZN6StringC1EPKc>
   d547e:	a802      	add	r0, sp, #8
   d5480:	f7ff fe86 	bl	d5190 <_Z15setLowPowerMode6String>
   d5484:	a802      	add	r0, sp, #8
   d5486:	f005 fba5 	bl	dabd4 <_ZN6StringD1Ev>
  }

  publishToGoogleSheets();                                         // Send data to Google Sheets on Product Status
   d548a:	f7ff fb39 	bl	d4b00 <_Z21publishToGoogleSheetsv>
  resetEverything();                                               // If so, we need to Zero the counts for the new day
   d548e:	f7ff ff2f 	bl	d52f0 <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d5492:	4b0a      	ldr	r3, [pc, #40]	; (d54bc <_Z12dailyCleanupv+0xa8>)
   d5494:	2201      	movs	r2, #1
   d5496:	701a      	strb	r2, [r3, #0]
   d5498:	b006      	add	sp, #24
   d549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d549e:	bf00      	nop
   d54a0:	2003e369 	.word	0x2003e369
   d54a4:	2003e4c0 	.word	0x2003e4c0
   d54a8:	000dcfde 	.word	0x000dcfde
   d54ac:	000dcfe6 	.word	0x000dcfe6
   d54b0:	2003e468 	.word	0x2003e468
   d54b4:	2003e368 	.word	0x2003e368
   d54b8:	000dcc5c 	.word	0x000dcc5c
   d54bc:	2003e4ec 	.word	0x2003e4ec

000d54c0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d54c0:	b530      	push	{r4, r5, lr}
   d54c2:	b085      	sub	sp, #20
   d54c4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d54c6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d54c8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d54ca:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d54cc:	f002 fec0 	bl	d8250 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d54d0:	b9b0      	cbnz	r0, d5500 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d54d2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d54d4:	b10c      	cbz	r4, d54da <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d54d6:	6923      	ldr	r3, [r4, #16]
   d54d8:	b923      	cbnz	r3, d54e4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d54da:	4a0a      	ldr	r2, [pc, #40]	; (d5504 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d54dc:	2100      	movs	r1, #0
   d54de:	200a      	movs	r0, #10
   d54e0:	f002 fe8e 	bl	d8200 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d54e4:	2300      	movs	r3, #0
   d54e6:	f8ad 3006 	strh.w	r3, [sp, #6]
   d54ea:	230c      	movs	r3, #12
   d54ec:	f8ad 3004 	strh.w	r3, [sp, #4]
   d54f0:	2304      	movs	r3, #4
   d54f2:	9303      	str	r3, [sp, #12]
   d54f4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d54f6:	6923      	ldr	r3, [r4, #16]
   d54f8:	aa01      	add	r2, sp, #4
   d54fa:	2101      	movs	r1, #1
   d54fc:	4620      	mov	r0, r4
   d54fe:	4798      	blx	r3
}
   d5500:	b005      	add	sp, #20
   d5502:	bd30      	pop	{r4, r5, pc}
   d5504:	000d7ed1 	.word	0x000d7ed1

000d5508 <_Z16takeMeasurementsv>:
{
   d5508:	b530      	push	{r4, r5, lr}
        return network_ready(*this, 0,  NULL);
   d550a:	4b26      	ldr	r3, [pc, #152]	; (d55a4 <_Z16takeMeasurementsv+0x9c>)
   d550c:	2200      	movs	r2, #0
   d550e:	b089      	sub	sp, #36	; 0x24
   d5510:	6858      	ldr	r0, [r3, #4]
   d5512:	4611      	mov	r1, r2
   d5514:	f002 ffb0 	bl	d8478 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d5518:	b108      	cbz	r0, d551e <_Z16takeMeasurementsv+0x16>
   d551a:	f7ff fb89 	bl	d4c30 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d551e:	f7ff fbc3 	bl	d4ca8 <_Z14getTemperaturev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d5522:	4669      	mov	r1, sp
   d5524:	2007      	movs	r0, #7
   d5526:	f7ff ffcb 	bl	d54c0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
  sysStatus.batteryState = System.batteryState();                     // Call before isItSafeToCharge() as it may overwrite the context
   d552a:	4c1f      	ldr	r4, [pc, #124]	; (d55a8 <_Z16takeMeasurementsv+0xa0>)
   d552c:	4d1f      	ldr	r5, [pc, #124]	; (d55ac <_Z16takeMeasurementsv+0xa4>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d552e:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d5530:	bfa8      	it	ge
   d5532:	9800      	ldrge	r0, [sp, #0]
   d5534:	7320      	strb	r0, [r4, #12]
  if (!isItSafeToCharge()) current.alertCount++;                      // Increment the alert count
   d5536:	f7ff fb5b 	bl	d4bf0 <_Z16isItSafeToChargev>
   d553a:	b910      	cbnz	r0, d5542 <_Z16takeMeasurementsv+0x3a>
   d553c:	696b      	ldr	r3, [r5, #20]
   d553e:	3301      	adds	r3, #1
   d5540:	616b      	str	r3, [r5, #20]
   d5542:	4669      	mov	r1, sp
   d5544:	2003      	movs	r0, #3
   d5546:	f7ff ffbb 	bl	d54c0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d554a:	bb40      	cbnz	r0, d559e <_Z16takeMeasurementsv+0x96>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d554c:	f8bd 3000 	ldrh.w	r3, [sp]
   d5550:	ee07 3a90 	vmov	s15, r3
   d5554:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d5558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d555c:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5560:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d5562:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5566:	dc09      	bgt.n	d557c <_Z16takeMeasurementsv+0x74>
   d5568:	7b23      	ldrb	r3, [r4, #12]
   d556a:	2b01      	cmp	r3, #1
   d556c:	d106      	bne.n	d557c <_Z16takeMeasurementsv+0x74>
    System.setPowerConfiguration(SystemPowerConfiguration());         // Reset the PMIC
   d556e:	4668      	mov	r0, sp
   d5570:	f7fe ff20 	bl	d43b4 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d5574:	2100      	movs	r1, #0
   d5576:	4668      	mov	r0, sp
   d5578:	f002 fed8 	bl	d832c <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) current.minBatteryLevel = sysStatus.stateOfCharge; // Keep track of lowest value for the day
   d557c:	68a3      	ldr	r3, [r4, #8]
   d557e:	6a2a      	ldr	r2, [r5, #32]
   d5580:	4293      	cmp	r3, r2
   d5582:	bfb8      	it	lt
   d5584:	622b      	strlt	r3, [r5, #32]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d5586:	2b1d      	cmp	r3, #29
   d5588:	bfcc      	ite	gt
   d558a:	2300      	movgt	r3, #0
   d558c:	2301      	movle	r3, #1
  systemStatusWriteNeeded = true;
   d558e:	4a08      	ldr	r2, [pc, #32]	; (d55b0 <_Z16takeMeasurementsv+0xa8>)
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d5590:	71e3      	strb	r3, [r4, #7]
  systemStatusWriteNeeded = true;
   d5592:	2301      	movs	r3, #1
   d5594:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d5596:	4a07      	ldr	r2, [pc, #28]	; (d55b4 <_Z16takeMeasurementsv+0xac>)
   d5598:	7013      	strb	r3, [r2, #0]
}
   d559a:	b009      	add	sp, #36	; 0x24
   d559c:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d559e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d55a2:	e7d9      	b.n	d5558 <_Z16takeMeasurementsv+0x50>
   d55a4:	2003e508 	.word	0x2003e508
   d55a8:	2003e4c0 	.word	0x2003e4c0
   d55ac:	2003e3d8 	.word	0x2003e3d8
   d55b0:	2003e4ec 	.word	0x2003e4ec
   d55b4:	2003e3fc 	.word	0x2003e3fc

000d55b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d55b8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d55ba:	e9d0 5300 	ldrd	r5, r3, [r0]
   d55be:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d55c0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d55c2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d55c6:	42ae      	cmp	r6, r5
   d55c8:	d004      	beq.n	d55d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d55ca:	4628      	mov	r0, r5
   d55cc:	f005 fb02 	bl	dabd4 <_ZN6StringD1Ev>
   d55d0:	3514      	adds	r5, #20
   d55d2:	e7f8      	b.n	d55c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d55d4:	6820      	ldr	r0, [r4, #0]
   d55d6:	f002 ff9f 	bl	d8518 <free>
    AllocatorT::free(data_);
}
   d55da:	4620      	mov	r0, r4
   d55dc:	bd70      	pop	{r4, r5, r6, pc}

000d55de <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d55de:	2300      	movs	r3, #0
   d55e0:	2202      	movs	r2, #2
   d55e2:	f002 bec1 	b.w	d8368 <spark_variable>
	...

000d55e8 <setup>:
{
   d55e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d55ea:	2100      	movs	r1, #0
{
   d55ec:	b0ab      	sub	sp, #172	; 0xac
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d55ee:	2008      	movs	r0, #8
   d55f0:	f006 f9c0 	bl	db974 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d55f4:	2100      	movs	r1, #0
   d55f6:	2004      	movs	r0, #4
   d55f8:	f006 f9bc 	bl	db974 <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d55fc:	2101      	movs	r1, #1
   d55fe:	2007      	movs	r0, #7
   d5600:	f006 f9b8 	bl	db974 <pinMode>
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
   d5604:	2103      	movs	r1, #3
   d5606:	200d      	movs	r0, #13
   d5608:	f006 f9b4 	bl	db974 <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
   d560c:	2101      	movs	r1, #1
   d560e:	200c      	movs	r0, #12
   d5610:	f006 f9b0 	bl	db974 <pinMode>
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
   d5614:	2101      	movs	r1, #1
   d5616:	200b      	movs	r0, #11
   d5618:	f006 f9ac 	bl	db974 <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d561c:	2101      	movs	r1, #1
   d561e:	2007      	movs	r0, #7
   d5620:	f006 f9b9 	bl	db996 <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d5624:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5626:	2500      	movs	r5, #0
   d5628:	f002 fec6 	bl	d83b8 <spark_deviceID>
		{getBytes((unsigned char *)buf, bufsize, index);}
   d562c:	2300      	movs	r3, #0
   d562e:	227d      	movs	r2, #125	; 0x7d
   d5630:	a90a      	add	r1, sp, #40	; 0x28
   d5632:	a806      	add	r0, sp, #24
   d5634:	f005 fbe5 	bl	dae02 <_ZNK6String8getBytesEPhjj>
   d5638:	49bd      	ldr	r1, [pc, #756]	; (d5930 <setup+0x348>)
   d563a:	4fbe      	ldr	r7, [pc, #760]	; (d5934 <setup+0x34c>)
   d563c:	4cbe      	ldr	r4, [pc, #760]	; (d5938 <setup+0x350>)
   d563e:	462b      	mov	r3, r5
   d5640:	462a      	mov	r2, r5
   d5642:	e9cd 5500 	strd	r5, r5, [sp]
   d5646:	a80a      	add	r0, sp, #40	; 0x28
   d5648:	f002 fec6 	bl	d83d8 <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d564c:	462b      	mov	r3, r5
   d564e:	2202      	movs	r2, #2
   d5650:	49b8      	ldr	r1, [pc, #736]	; (d5934 <setup+0x34c>)
   d5652:	48ba      	ldr	r0, [pc, #744]	; (d593c <setup+0x354>)
   d5654:	f002 fe88 	bl	d8368 <spark_variable>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d5658:	49b9      	ldr	r1, [pc, #740]	; (d5940 <setup+0x358>)
   d565a:	48ba      	ldr	r0, [pc, #744]	; (d5944 <setup+0x35c>)
   d565c:	f7ff ffbf 	bl	d55de <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return _variable(varKey, var, STRING);
   d5660:	49b9      	ldr	r1, [pc, #740]	; (d5948 <setup+0x360>)
   d5662:	48ba      	ldr	r0, [pc, #744]	; (d594c <setup+0x364>)
   d5664:	f7fe fdef 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d5668:	49b9      	ldr	r1, [pc, #740]	; (d5950 <setup+0x368>)
   d566a:	48ba      	ldr	r0, [pc, #744]	; (d5954 <setup+0x36c>)
   d566c:	f7ff ffb7 	bl	d55de <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5670:	462b      	mov	r3, r5
   d5672:	2202      	movs	r2, #2
   d5674:	49b8      	ldr	r1, [pc, #736]	; (d5958 <setup+0x370>)
   d5676:	48b9      	ldr	r0, [pc, #740]	; (d595c <setup+0x374>)
   d5678:	f002 fe76 	bl	d8368 <spark_variable>
        return _variable(varKey, var, STRING);
   d567c:	49b8      	ldr	r1, [pc, #736]	; (d5960 <setup+0x378>)
   d567e:	48b9      	ldr	r0, [pc, #740]	; (d5964 <setup+0x37c>)
   d5680:	f7fe fde1 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d5684:	49b8      	ldr	r1, [pc, #736]	; (d5968 <setup+0x380>)
   d5686:	48b9      	ldr	r0, [pc, #740]	; (d596c <setup+0x384>)
   d5688:	f7ff ffa9 	bl	d55de <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
   d568c:	49b8      	ldr	r1, [pc, #736]	; (d5970 <setup+0x388>)
   d568e:	48b9      	ldr	r0, [pc, #740]	; (d5974 <setup+0x38c>)
   d5690:	f7fe fdd9 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5694:	49b8      	ldr	r1, [pc, #736]	; (d5978 <setup+0x390>)
   d5696:	48b9      	ldr	r0, [pc, #740]	; (d597c <setup+0x394>)
   d5698:	f7fe fdd5 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d569c:	49b8      	ldr	r1, [pc, #736]	; (d5980 <setup+0x398>)
   d569e:	48b9      	ldr	r0, [pc, #740]	; (d5984 <setup+0x39c>)
   d56a0:	f7fe fdd1 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d56a4:	462b      	mov	r3, r5
   d56a6:	2202      	movs	r2, #2
   d56a8:	49b7      	ldr	r1, [pc, #732]	; (d5988 <setup+0x3a0>)
   d56aa:	48b8      	ldr	r0, [pc, #736]	; (d598c <setup+0x3a4>)
   d56ac:	f002 fe5c 	bl	d8368 <spark_variable>
        return _variable(varKey, var, STRING);
   d56b0:	49b7      	ldr	r1, [pc, #732]	; (d5990 <setup+0x3a8>)
   d56b2:	48b8      	ldr	r0, [pc, #736]	; (d5994 <setup+0x3ac>)
   d56b4:	f7fe fdc7 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d56b8:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d56ba:	e9cd 5503 	strd	r5, r5, [sp, #12]
        extra.size = sizeof(extra);
   d56be:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d56c2:	4bb5      	ldr	r3, [pc, #724]	; (d5998 <setup+0x3b0>)
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d56c4:	49b5      	ldr	r1, [pc, #724]	; (d599c <setup+0x3b4>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d56c6:	9305      	str	r3, [sp, #20]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d56c8:	2204      	movs	r2, #4
   d56ca:	ab03      	add	r3, sp, #12
   d56cc:	48b4      	ldr	r0, [pc, #720]	; (d59a0 <setup+0x3b8>)
   d56ce:	f002 fe4b 	bl	d8368 <spark_variable>
        return _variable(varKey, var, STRING);
   d56d2:	49b4      	ldr	r1, [pc, #720]	; (d59a4 <setup+0x3bc>)
   d56d4:	48b4      	ldr	r0, [pc, #720]	; (d59a8 <setup+0x3c0>)
   d56d6:	f7fe fdb6 	bl	d4246 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d56da:	49b4      	ldr	r1, [pc, #720]	; (d59ac <setup+0x3c4>)
   d56dc:	48b4      	ldr	r0, [pc, #720]	; (d59b0 <setup+0x3c8>)
   d56de:	f7fe fed5 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d56e2:	49b4      	ldr	r1, [pc, #720]	; (d59b4 <setup+0x3cc>)
   d56e4:	48b4      	ldr	r0, [pc, #720]	; (d59b8 <setup+0x3d0>)
   d56e6:	f7fe fed1 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d56ea:	49b4      	ldr	r1, [pc, #720]	; (d59bc <setup+0x3d4>)
   d56ec:	48b4      	ldr	r0, [pc, #720]	; (d59c0 <setup+0x3d8>)
   d56ee:	f7fe fecd 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d56f2:	49b4      	ldr	r1, [pc, #720]	; (d59c4 <setup+0x3dc>)
   d56f4:	48b4      	ldr	r0, [pc, #720]	; (d59c8 <setup+0x3e0>)
   d56f6:	f7fe fec9 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d56fa:	49b4      	ldr	r1, [pc, #720]	; (d59cc <setup+0x3e4>)
   d56fc:	48b4      	ldr	r0, [pc, #720]	; (d59d0 <setup+0x3e8>)
   d56fe:	f7fe fec5 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5702:	49b4      	ldr	r1, [pc, #720]	; (d59d4 <setup+0x3ec>)
   d5704:	48b4      	ldr	r0, [pc, #720]	; (d59d8 <setup+0x3f0>)
   d5706:	f7fe fec1 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d570a:	49b4      	ldr	r1, [pc, #720]	; (d59dc <setup+0x3f4>)
   d570c:	48b4      	ldr	r0, [pc, #720]	; (d59e0 <setup+0x3f8>)
   d570e:	f7fe febd 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5712:	49b4      	ldr	r1, [pc, #720]	; (d59e4 <setup+0x3fc>)
   d5714:	48b4      	ldr	r0, [pc, #720]	; (d59e8 <setup+0x400>)
   d5716:	f7fe feb9 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d571a:	49b4      	ldr	r1, [pc, #720]	; (d59ec <setup+0x404>)
   d571c:	48b4      	ldr	r0, [pc, #720]	; (d59f0 <setup+0x408>)
   d571e:	f7fe feb5 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5722:	49b4      	ldr	r1, [pc, #720]	; (d59f4 <setup+0x40c>)
   d5724:	48b4      	ldr	r0, [pc, #720]	; (d59f8 <setup+0x410>)
   d5726:	f7fe feb1 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d572a:	49b4      	ldr	r1, [pc, #720]	; (d59fc <setup+0x414>)
   d572c:	48b4      	ldr	r0, [pc, #720]	; (d5a00 <setup+0x418>)
   d572e:	f7fe fead 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5732:	49b4      	ldr	r1, [pc, #720]	; (d5a04 <setup+0x41c>)
   d5734:	48b4      	ldr	r0, [pc, #720]	; (d5a08 <setup+0x420>)
   d5736:	f7fe fea9 	bl	d448c <_ZN10CloudClass9_functionEPKcPFi6StringE>
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d573a:	2601      	movs	r6, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d573c:	2203      	movs	r2, #3
   d573e:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d5742:	a803      	add	r0, sp, #12
   d5744:	e9cd 2303 	strd	r2, r3, [sp, #12]
    graceful_ = enabled;
   d5748:	f8ad 6014 	strh.w	r6, [sp, #20]
   d574c:	f003 f945 	bl	d89da <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  fram.begin();                                                       // Initialize the FRAM module
   d5750:	48ae      	ldr	r0, [pc, #696]	; (d5a0c <setup+0x424>)
   d5752:	f001 fda9 	bl	d72a8 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5756:	4633      	mov	r3, r6
   d5758:	48ac      	ldr	r0, [pc, #688]	; (d5a0c <setup+0x424>)
   d575a:	f10d 020b 	add.w	r2, sp, #11
   d575e:	4629      	mov	r1, r5
   d5760:	f001 fde4 	bl	d732c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d5764:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5768:	2b03      	cmp	r3, #3
   d576a:	f000 8179 	beq.w	d5a60 <setup+0x478>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d576e:	48a7      	ldr	r0, [pc, #668]	; (d5a0c <setup+0x424>)
   d5770:	f001 fda4 	bl	d72bc <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5774:	4aa6      	ldr	r2, [pc, #664]	; (d5a10 <setup+0x428>)
   d5776:	48a5      	ldr	r0, [pc, #660]	; (d5a0c <setup+0x424>)
   d5778:	2304      	movs	r3, #4
   d577a:	4629      	mov	r1, r5
   d577c:	f001 fe21 	bl	d73c2 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5780:	4633      	mov	r3, r6
   d5782:	48a2      	ldr	r0, [pc, #648]	; (d5a0c <setup+0x424>)
   d5784:	f10d 020b 	add.w	r2, sp, #11
   d5788:	4629      	mov	r1, r5
   d578a:	f001 fdcf 	bl	d732c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;        // Device will not work without FRAM
   d578e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5792:	2b03      	cmp	r3, #3
   d5794:	f000 8161 	beq.w	d5a5a <setup+0x472>
   d5798:	4b9e      	ldr	r3, [pc, #632]	; (d5a14 <setup+0x42c>)
   d579a:	701e      	strb	r6, [r3, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d579c:	4d9e      	ldr	r5, [pc, #632]	; (d5a18 <setup+0x430>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d579e:	f7ff fb5f 	bl	d4e60 <_Z17checkSystemValuesv>
  makeUpParkHourStrings();                                            // Create the strings for the console
   d57a2:	f7ff fbc9 	bl	d4f38 <_Z21makeUpParkHourStringsv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d57a6:	4a9d      	ldr	r2, [pc, #628]	; (d5a1c <setup+0x434>)
   d57a8:	2300      	movs	r3, #0
   d57aa:	2100      	movs	r1, #0
   d57ac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d57b0:	f002 fd78 	bl	d82a4 <system_subscribe_event>
   d57b4:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();
   d57b6:	2101      	movs	r1, #1
   d57b8:	4628      	mov	r0, r5
   d57ba:	816b      	strh	r3, [r5, #10]
   d57bc:	f001 fc26 	bl	d700c <_ZN6AB18055setupEb>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d57c0:	2301      	movs	r3, #1
   d57c2:	461a      	mov	r2, r3
   d57c4:	2110      	movs	r1, #16
   d57c6:	4628      	mov	r0, r5
   d57c8:	f001 f98b 	bl	d6ae2 <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d57cc:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet = ab1805.isRTCSet();
   d57ce:	70a0      	strb	r0, [r4, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);
   d57d0:	4628      	mov	r0, r5
   d57d2:	f001 f903 	bl	d69dc <_ZN6AB18056setWDTEi>
  accel.begin(SCALE_2G, ODR_1); // Set up accel with +/-2g range, and slowest (1Hz) ODR
   d57d6:	2207      	movs	r2, #7
   d57d8:	2102      	movs	r1, #2
   d57da:	4891      	ldr	r0, [pc, #580]	; (d5a20 <setup+0x438>)
   d57dc:	f002 fa24 	bl	d7c28 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>
  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
   d57e0:	ed94 0a06 	vldr	s0, [r4, #24]
   d57e4:	f005 fce8 	bl	db1b8 <_ZN9TimeClass12setDSTOffsetEf>
  if (!Time.isValid() && sysStatus.clockSet) {                         // We need to try to get the time so we can tell if we need DST
   d57e8:	f005 fe12 	bl	db410 <_ZN9TimeClass7isValidEv>
   d57ec:	2800      	cmp	r0, #0
   d57ee:	f040 8144 	bne.w	d5a7a <setup+0x492>
   d57f2:	78a3      	ldrb	r3, [r4, #2]
   d57f4:	2b00      	cmp	r3, #0
   d57f6:	f000 8140 	beq.w	d5a7a <setup+0x492>
    ab1805.getRtcAsTime(RTCTime);                                      // Get the time from the RTC if it is set
   d57fa:	4e8a      	ldr	r6, [pc, #552]	; (d5a24 <setup+0x43c>)
   d57fc:	4628      	mov	r0, r5
   d57fe:	4631      	mov	r1, r6
   d5800:	f001 fbf4 	bl	d6fec <_ZN6AB180512getRtcAsTimeERx>
    Time.setTime(RTCTime);
   d5804:	e9d6 0100 	ldrd	r0, r1, [r6]
   d5808:	f005 fd08 	bl	db21c <_ZN9TimeClass7setTimeEx>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d580c:	f000 ff08 	bl	d6620 <_Z8isDSTusav>
   d5810:	2800      	cmp	r0, #0
   d5812:	f000 8137 	beq.w	d5a84 <setup+0x49c>
   d5816:	f005 fced 	bl	db1f4 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
   d581a:	ed94 0a05 	vldr	s0, [r4, #20]
   d581e:	f005 fcab 	bl	db178 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5822:	f005 fe57 	bl	db4d4 <_ZN9TimeClass5localEv>
   d5826:	4605      	mov	r5, r0
   d5828:	f005 fe0f 	bl	db44a <_ZN9TimeClass3nowEv>
   d582c:	1a28      	subs	r0, r5, r0
   d582e:	f006 fad5 	bl	dbddc <__aeabi_i2d>
   d5832:	a33d      	add	r3, pc, #244	; (adr r3, d5928 <setup+0x340>)
   d5834:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5838:	f006 fc64 	bl	dc104 <__aeabi_ddiv>
   d583c:	4a7a      	ldr	r2, [pc, #488]	; (d5a28 <setup+0x440>)
   d583e:	e9cd 0100 	strd	r0, r1, [sp]
   d5842:	4853      	ldr	r0, [pc, #332]	; (d5990 <setup+0x3a8>)
   d5844:	210a      	movs	r1, #10
   d5846:	f002 fe7f 	bl	d8548 <snprintf>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d584a:	79a3      	ldrb	r3, [r4, #6]
   d584c:	2210      	movs	r2, #16
   d584e:	2b00      	cmp	r3, #0
   d5850:	f000 811b 	beq.w	d5a8a <setup+0x4a2>
   d5854:	4975      	ldr	r1, [pc, #468]	; (d5a2c <setup+0x444>)
   d5856:	4846      	ldr	r0, [pc, #280]	; (d5970 <setup+0x388>)
   d5858:	f007 f929 	bl	dcaae <strncpy>
  sensorControl(true);                                                // Turn on the sensors.
   d585c:	2001      	movs	r0, #1
   d585e:	f7fe fff5 	bl	d484c <_Z13sensorControlb>
  if (sysStatus.sensorType == 0) strncpy(sensorTypeConfigStr,"Pressure Sensor",sizeof(sensorTypeConfigStr));
   d5862:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   d5866:	2b00      	cmp	r3, #0
   d5868:	f040 8111 	bne.w	d5a8e <setup+0x4a6>
   d586c:	4b70      	ldr	r3, [pc, #448]	; (d5a30 <setup+0x448>)
   d586e:	4a4d      	ldr	r2, [pc, #308]	; (d59a4 <setup+0x3bc>)
   d5870:	f103 0110 	add.w	r1, r3, #16
   d5874:	f853 0b04 	ldr.w	r0, [r3], #4
   d5878:	f842 0b04 	str.w	r0, [r2], #4
   d587c:	428b      	cmp	r3, r1
   d587e:	d1f9      	bne.n	d5874 <setup+0x28c>
        int reason = RESET_REASON_NONE;
   d5880:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5882:	4611      	mov	r1, r2
   d5884:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5886:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5888:	f002 fb0a 	bl	d7ea0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d588c:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d588e:	2b14      	cmp	r3, #20
   d5890:	f04f 0200 	mov.w	r2, #0
   d5894:	f040 8104 	bne.w	d5aa0 <setup+0x4b8>
    sysStatus.resetCount++;
   d5898:	6923      	ldr	r3, [r4, #16]
   d589a:	3301      	adds	r3, #1
   d589c:	6123      	str	r3, [r4, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d589e:	4b65      	ldr	r3, [pc, #404]	; (d5a34 <setup+0x44c>)
   d58a0:	2201      	movs	r2, #1
   d58a2:	701a      	strb	r2, [r3, #0]
  if (current.hourlyCount) lastReportedTime = current.lastCountTime;
   d58a4:	683b      	ldr	r3, [r7, #0]
   d58a6:	4d64      	ldr	r5, [pc, #400]	; (d5a38 <setup+0x450>)
   d58a8:	2b00      	cmp	r3, #0
   d58aa:	f000 8103 	beq.w	d5ab4 <setup+0x4cc>
   d58ae:	68fb      	ldr	r3, [r7, #12]
   d58b0:	602b      	str	r3, [r5, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d58b2:	f7ff fa4d 	bl	d4d50 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d58b6:	2004      	movs	r0, #4
   d58b8:	f006 f886 	bl	db9c8 <digitalRead>
   d58bc:	b908      	cbnz	r0, d58c2 <setup+0x2da>
   d58be:	f7ff fccf 	bl	d5260 <_Z18loadSystemDefaultsv>
  if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   d58c2:	f005 fdeb 	bl	db49c <_ZN9TimeClass3dayEv>
   d58c6:	2100      	movs	r1, #0
   d58c8:	4605      	mov	r5, r0
   d58ca:	68f8      	ldr	r0, [r7, #12]
   d58cc:	f005 fc38 	bl	db140 <_ZN9TimeClass3dayEx>
   d58d0:	4285      	cmp	r5, r0
   d58d2:	d001      	beq.n	d58d8 <setup+0x2f0>
    resetEverything();                                                 // Zero the counts for the new day
   d58d4:	f7ff fd0c 	bl	d52f0 <_Z15resetEverythingv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d58d8:	f005 fdc8 	bl	db46c <_ZN9TimeClass4hourEv>
   d58dc:	7f23      	ldrb	r3, [r4, #28]
   d58de:	4298      	cmp	r0, r3
   d58e0:	db19      	blt.n	d5916 <setup+0x32e>
   d58e2:	f005 fdc3 	bl	db46c <_ZN9TimeClass4hourEv>
   d58e6:	7f63      	ldrb	r3, [r4, #29]
   d58e8:	4298      	cmp	r0, r3
   d58ea:	da14      	bge.n	d5916 <setup+0x32e>
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d58ec:	2300      	movs	r3, #0
   d58ee:	9300      	str	r3, [sp, #0]
   d58f0:	4952      	ldr	r1, [pc, #328]	; (d5a3c <setup+0x454>)
   d58f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d58f6:	2201      	movs	r2, #1
   d58f8:	200d      	movs	r0, #13
   d58fa:	f003 fca5 	bl	d9248 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) {         // If the system thinks we are connected, let's make sure that we are
   d58fe:	78e3      	ldrb	r3, [r4, #3]
   d5900:	b123      	cbz	r3, d590c <setup+0x324>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5902:	f002 fd51 	bl	d83a8 <spark_cloud_flag_connected>
   d5906:	b908      	cbnz	r0, d590c <setup+0x324>
      connectToParticleBlocking();                                    // This may happen if there was an unexpected reset during park open hours
   d5908:	f7ff fb94 	bl	d5034 <_Z25connectToParticleBlockingv>
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d590c:	f7ff fdfc 	bl	d5508 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Boron awake after reboot - helps with recovery
   d5910:	4b4b      	ldr	r3, [pc, #300]	; (d5a40 <setup+0x458>)
   d5912:	4a4c      	ldr	r2, [pc, #304]	; (d5a44 <setup+0x45c>)
   d5914:	601a      	str	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d5916:	4b3f      	ldr	r3, [pc, #252]	; (d5a14 <setup+0x42c>)
   d5918:	781a      	ldrb	r2, [r3, #0]
   d591a:	2a00      	cmp	r2, #0
   d591c:	f040 8094 	bne.w	d5a48 <setup+0x460>
   d5920:	2202      	movs	r2, #2
   d5922:	701a      	strb	r2, [r3, #0]
   d5924:	e090      	b.n	d5a48 <setup+0x460>
   d5926:	bf00      	nop
   d5928:	00000000 	.word	0x00000000
   d592c:	40ac2000 	.word	0x40ac2000
   d5930:	000d44e1 	.word	0x000d44e1
   d5934:	2003e3d8 	.word	0x2003e3d8
   d5938:	2003e4c0 	.word	0x2003e4c0
   d593c:	000dcff4 	.word	0x000dcff4
   d5940:	2003e3e0 	.word	0x2003e3e0
   d5944:	000dd079 	.word	0x000dd079
   d5948:	2003e318 	.word	0x2003e318
   d594c:	000dd000 	.word	0x000dd000
   d5950:	2003e4d0 	.word	0x2003e4d0
   d5954:	000dd007 	.word	0x000dd007
   d5958:	2003e3e8 	.word	0x2003e3e8
   d595c:	000dd012 	.word	0x000dd012
   d5960:	2003e200 	.word	0x2003e200
   d5964:	000dd01e 	.word	0x000dd01e
   d5968:	2003e4c8 	.word	0x2003e4c8
   d596c:	000dd026 	.word	0x000dd026
   d5970:	2003e454 	.word	0x2003e454
   d5974:	000dd031 	.word	0x000dd031
   d5978:	2003e206 	.word	0x2003e206
   d597c:	000dd0e6 	.word	0x000dd0e6
   d5980:	2003e1f4 	.word	0x2003e1f4
   d5984:	000dd03e 	.word	0x000dd03e
   d5988:	2003e3ec 	.word	0x2003e3ec
   d598c:	000dd048 	.word	0x000dd048
   d5990:	2003e3fd 	.word	0x2003e3fd
   d5994:	000dd04f 	.word	0x000dd04f
   d5998:	000d42a9 	.word	0x000d42a9
   d599c:	000d4105 	.word	0x000d4105
   d59a0:	000dd05a 	.word	0x000dd05a
   d59a4:	2003e4a5 	.word	0x2003e4a5
   d59a8:	000dd069 	.word	0x000dd069
   d59ac:	000d46d9 	.word	0x000d46d9
   d59b0:	000dd076 	.word	0x000dd076
   d59b4:	000d41d5 	.word	0x000d41d5
   d59b8:	000dd084 	.word	0x000dd084
   d59bc:	000d4581 	.word	0x000d4581
   d59c0:	000dd090 	.word	0x000dd090
   d59c4:	000d4bd1 	.word	0x000d4bd1
   d59c8:	000dd09a 	.word	0x000dd09a
   d59cc:	000d5191 	.word	0x000d5191
   d59d0:	000dd0a2 	.word	0x000dd0a2
   d59d4:	000d4dc5 	.word	0x000d4dc5
   d59d8:	000dd0af 	.word	0x000dd0af
   d59dc:	000d4885 	.word	0x000d4885
   d59e0:	000dd0ba 	.word	0x000dd0ba
   d59e4:	000d64f9 	.word	0x000d64f9
   d59e8:	000dd0c7 	.word	0x000dd0c7
   d59ec:	000d6661 	.word	0x000d6661
   d59f0:	000dd0d4 	.word	0x000dd0d4
   d59f4:	000d4f89 	.word	0x000d4f89
   d59f8:	000dd0e2 	.word	0x000dd0e2
   d59fc:	000d4fc5 	.word	0x000d4fc5
   d5a00:	000dd0ef 	.word	0x000dd0ef
   d5a04:	000d45c9 	.word	0x000d45c9
   d5a08:	000dd0f9 	.word	0x000dd0f9
   d5a0c:	2003e410 	.word	0x2003e410
   d5a10:	000dd288 	.word	0x000dd288
   d5a14:	2003e4b5 	.word	0x2003e4b5
   d5a18:	2003e36c 	.word	0x2003e36c
   d5a1c:	000d40d5 	.word	0x000d40d5
   d5a20:	2003e38c 	.word	0x2003e38c
   d5a24:	2003e310 	.word	0x2003e310
   d5a28:	000dd108 	.word	0x000dd108
   d5a2c:	000dcf90 	.word	0x000dcf90
   d5a30:	000dcd2b 	.word	0x000dcd2b
   d5a34:	2003e4ec 	.word	0x2003e4ec
   d5a38:	2003e42c 	.word	0x2003e42c
   d5a3c:	000d4251 	.word	0x000d4251
   d5a40:	2003e4b8 	.word	0x2003e4b8
   d5a44:	00015f90 	.word	0x00015f90
  digitalWrite(blueLED,LOW);                                          // Signal the end of startup
   d5a48:	2100      	movs	r1, #0
   d5a4a:	2007      	movs	r0, #7
   d5a4c:	f005 ffa3 	bl	db996 <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d5a50:	a806      	add	r0, sp, #24
   d5a52:	f005 f8bf 	bl	dabd4 <_ZN6StringD1Ev>
}
   d5a56:	b02b      	add	sp, #172	; 0xac
   d5a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d5a5a:	f7ff fc01 	bl	d5260 <_Z18loadSystemDefaultsv>
   d5a5e:	e69d      	b.n	d579c <setup+0x1b4>
   d5a60:	4622      	mov	r2, r4
   d5a62:	4631      	mov	r1, r6
   d5a64:	232c      	movs	r3, #44	; 0x2c
   d5a66:	4815      	ldr	r0, [pc, #84]	; (d5abc <setup+0x4d4>)
   d5a68:	f001 fc60 	bl	d732c <_ZN6MB85RC8readDataEjPhj>
   d5a6c:	2324      	movs	r3, #36	; 0x24
   d5a6e:	463a      	mov	r2, r7
   d5a70:	2150      	movs	r1, #80	; 0x50
   d5a72:	4812      	ldr	r0, [pc, #72]	; (d5abc <setup+0x4d4>)
   d5a74:	f001 fc5a 	bl	d732c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5a78:	e690      	b.n	d579c <setup+0x1b4>
    connectToParticleBlocking();
   d5a7a:	f7ff fadb 	bl	d5034 <_Z25connectToParticleBlockingv>
    Particle.syncTime();                                               // Set the system clock here
   d5a7e:	f7fe fbcb 	bl	d4218 <_ZN10CloudClass8syncTimeEv.isra.0>
   d5a82:	e6c3      	b.n	d580c <setup+0x224>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
   d5a84:	f005 fbc2 	bl	db20c <_ZN9TimeClass6endDSTEv>
   d5a88:	e6c7      	b.n	d581a <setup+0x232>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d5a8a:	490d      	ldr	r1, [pc, #52]	; (d5ac0 <setup+0x4d8>)
   d5a8c:	e6e3      	b.n	d5856 <setup+0x26e>
  else if (sysStatus.sensorType == 1) strncpy(sensorTypeConfigStr,"PIR Sensor",sizeof(sensorTypeConfigStr));
   d5a8e:	2b01      	cmp	r3, #1
   d5a90:	f47f aef6 	bne.w	d5880 <setup+0x298>
   d5a94:	490b      	ldr	r1, [pc, #44]	; (d5ac4 <setup+0x4dc>)
   d5a96:	480c      	ldr	r0, [pc, #48]	; (d5ac8 <setup+0x4e0>)
   d5a98:	2210      	movs	r2, #16
   d5a9a:	f007 f808 	bl	dcaae <strncpy>
   d5a9e:	e6ef      	b.n	d5880 <setup+0x298>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5aa0:	4611      	mov	r1, r2
   d5aa2:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5aa4:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5aa6:	f002 f9fb 	bl	d7ea0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5aaa:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d5aac:	2b8c      	cmp	r3, #140	; 0x8c
   d5aae:	f47f aef9 	bne.w	d58a4 <setup+0x2bc>
   d5ab2:	e6f1      	b.n	d5898 <setup+0x2b0>
  else lastReportedTime = Time.now();                                  // Initialize it to now so that reporting can begin as soon as the hour changes
   d5ab4:	f005 fcc9 	bl	db44a <_ZN9TimeClass3nowEv>
   d5ab8:	6028      	str	r0, [r5, #0]
   d5aba:	e6fa      	b.n	d58b2 <setup+0x2ca>
   d5abc:	2003e410 	.word	0x2003e410
   d5ac0:	000dcf8c 	.word	0x000dcf8c
   d5ac4:	000dcd09 	.word	0x000dcd09
   d5ac8:	2003e4a5 	.word	0x2003e4a5

000d5acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5acc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ad0:	4604      	mov	r4, r0
   d5ad2:	460d      	mov	r5, r1
   d5ad4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5ad6:	d916      	bls.n	d5b06 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5ad8:	4290      	cmp	r0, r2
   d5ada:	d215      	bcs.n	d5b08 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d5adc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d5ae0:	1a75      	subs	r5, r6, r1
   d5ae2:	f1a1 0714 	sub.w	r7, r1, #20
   d5ae6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5ae8:	42b7      	cmp	r7, r6
   d5aea:	d01c      	beq.n	d5b26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d5aec:	b12c      	cbz	r4, d5afa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d5aee:	4631      	mov	r1, r6
   d5af0:	4620      	mov	r0, r4
   d5af2:	f005 f8eb 	bl	daccc <_ZN6StringC1EOS_>
   d5af6:	7c33      	ldrb	r3, [r6, #16]
   d5af8:	7423      	strb	r3, [r4, #16]
   d5afa:	4630      	mov	r0, r6
   d5afc:	f005 f86a 	bl	dabd4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5b00:	3e14      	subs	r6, #20
   d5b02:	3c14      	subs	r4, #20
   d5b04:	e7f0      	b.n	d5ae8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5b06:	d00e      	beq.n	d5b26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5b08:	42b5      	cmp	r5, r6
   d5b0a:	d00c      	beq.n	d5b26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d5b0c:	b12c      	cbz	r4, d5b1a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d5b0e:	4629      	mov	r1, r5
   d5b10:	4620      	mov	r0, r4
   d5b12:	f005 f8db 	bl	daccc <_ZN6StringC1EOS_>
   d5b16:	7c2b      	ldrb	r3, [r5, #16]
   d5b18:	7423      	strb	r3, [r4, #16]
   d5b1a:	4628      	mov	r0, r5
   d5b1c:	f005 f85a 	bl	dabd4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5b20:	3514      	adds	r5, #20
   d5b22:	3414      	adds	r4, #20
   d5b24:	e7f0      	b.n	d5b08 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d5b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d5b2c:	2300      	movs	r3, #0
   d5b2e:	e9c0 3300 	strd	r3, r3, [r0]
   d5b32:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5b34:	684f      	ldr	r7, [r1, #4]
   d5b36:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5b38:	4604      	mov	r4, r0
   d5b3a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5b3c:	dd23      	ble.n	d5b86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d5b3e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d5b42:	fb08 f007 	mul.w	r0, r8, r7
   d5b46:	f002 fcdf 	bl	d8508 <malloc>
            if (!d) {
   d5b4a:	4605      	mov	r5, r0
   d5b4c:	b1d8      	cbz	r0, d5b86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d5b4e:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5b52:	fb08 1202 	mla	r2, r8, r2, r1
   d5b56:	f7ff ffb9 	bl	d5acc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5b5a:	6820      	ldr	r0, [r4, #0]
   d5b5c:	f002 fcdc 	bl	d8518 <free>
        data_ = d;
   d5b60:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5b62:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5b64:	e9d6 7300 	ldrd	r7, r3, [r6]
   d5b68:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d5b6c:	45b8      	cmp	r8, r7
   d5b6e:	d008      	beq.n	d5b82 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d5b70:	4639      	mov	r1, r7
   d5b72:	4628      	mov	r0, r5
   d5b74:	f005 f8c4 	bl	dad00 <_ZN6StringC1ERKS_>
   d5b78:	7c3b      	ldrb	r3, [r7, #16]
   d5b7a:	742b      	strb	r3, [r5, #16]
   d5b7c:	3714      	adds	r7, #20
   d5b7e:	3514      	adds	r5, #20
   d5b80:	e7f4      	b.n	d5b6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5b82:	6873      	ldr	r3, [r6, #4]
   d5b84:	6063      	str	r3, [r4, #4]
}
   d5b86:	4620      	mov	r0, r4
   d5b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b8c <_GLOBAL__sub_I___appProductID>:
        val_(val) {
   d5b8c:	4b7a      	ldr	r3, [pc, #488]	; (d5d78 <_GLOBAL__sub_I___appProductID+0x1ec>)
   d5b8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b92:	2400      	movs	r4, #0
   d5b94:	601c      	str	r4, [r3, #0]
   d5b96:	4b79      	ldr	r3, [pc, #484]	; (d5d7c <_GLOBAL__sub_I___appProductID+0x1f0>)
              error_(SYSTEM_ERROR_NONE) {
   d5b98:	4d79      	ldr	r5, [pc, #484]	; (d5d80 <_GLOBAL__sub_I___appProductID+0x1f4>)
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5b9a:	4e7a      	ldr	r6, [pc, #488]	; (d5d84 <_GLOBAL__sub_I___appProductID+0x1f8>)
   d5b9c:	f04f 0801 	mov.w	r8, #1
   d5ba0:	f883 8000 	strb.w	r8, [r3]
   d5ba4:	4b78      	ldr	r3, [pc, #480]	; (d5d88 <_GLOBAL__sub_I___appProductID+0x1fc>)
   d5ba6:	2208      	movs	r2, #8
   d5ba8:	b091      	sub	sp, #68	; 0x44
   d5baa:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5bac:	f005 fe8c 	bl	db8c8 <spark_protocol_instance>
   d5bb0:	4623      	mov	r3, r4
   d5bb2:	4622      	mov	r2, r4
   d5bb4:	210d      	movs	r1, #13
   d5bb6:	f005 fe8f 	bl	db8d8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5bba:	f005 fe85 	bl	db8c8 <spark_protocol_instance>
   d5bbe:	4641      	mov	r1, r8
   d5bc0:	4623      	mov	r3, r4
   d5bc2:	4622      	mov	r2, r4
   d5bc4:	f005 fe90 	bl	db8e8 <spark_protocol_set_product_firmware_version>
struct currentCounts_structure {                    // currently 10 bytes long
   d5bc8:	4b70      	ldr	r3, [pc, #448]	; (d5d8c <_GLOBAL__sub_I___appProductID+0x200>)
   d5bca:	602c      	str	r4, [r5, #0]
   d5bcc:	2264      	movs	r2, #100	; 0x64
   d5bce:	839c      	strh	r4, [r3, #28]
   d5bd0:	621a      	str	r2, [r3, #32]
    SleepResult() {}
   d5bd2:	4b6f      	ldr	r3, [pc, #444]	; (d5d90 <_GLOBAL__sub_I___appProductID+0x204>)
   d5bd4:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5bd6:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d5bd8:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d5bda:	2002      	movs	r0, #2
   d5bdc:	f002 fb4a 	bl	d8274 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
   d5be0:	4632      	mov	r2, r6
   d5be2:	496c      	ldr	r1, [pc, #432]	; (d5d94 <_GLOBAL__sub_I___appProductID+0x208>)
   d5be4:	4628      	mov	r0, r5
   d5be6:	f005 ff99 	bl	dbb1c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5bea:	4621      	mov	r1, r4
   d5bec:	4640      	mov	r0, r8
   d5bee:	f002 fb61 	bl	d82b4 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5bf2:	4641      	mov	r1, r8
   d5bf4:	2004      	movs	r0, #4
   d5bf6:	f002 f94b 	bl	d7e90 <HAL_Feature_Set>
        : config_(config) {
   d5bfa:	4867      	ldr	r0, [pc, #412]	; (d5d98 <_GLOBAL__sub_I___appProductID+0x20c>)
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
   d5bfc:	4967      	ldr	r1, [pc, #412]	; (d5d9c <_GLOBAL__sub_I___appProductID+0x210>)
              valid_(true) {
   d5bfe:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5c02:	4603      	mov	r3, r0
   d5c04:	1d02      	adds	r2, r0, #4
   d5c06:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5c0a:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d5c0c:	4b64      	ldr	r3, [pc, #400]	; (d5da0 <_GLOBAL__sub_I___appProductID+0x214>)
   d5c0e:	6043      	str	r3, [r0, #4]
   d5c10:	4632      	mov	r2, r6
        config_.wakeup_sources = nullptr;
   d5c12:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d5c16:	f880 8014 	strb.w	r8, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5c1a:	7204      	strb	r4, [r0, #8]
   d5c1c:	f005 ff7e 	bl	dbb1c <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d5c20:	f005 ff2c 	bl	dba7c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5c24:	4d5f      	ldr	r5, [pc, #380]	; (d5da4 <_GLOBAL__sub_I___appProductID+0x218>)
   d5c26:	4601      	mov	r1, r0
   d5c28:	4623      	mov	r3, r4
   d5c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5c2e:	4628      	mov	r0, r5
   d5c30:	f001 fb30 	bl	d7294 <_ZN6MB85RCC1ER7TwoWireji>
   d5c34:	4b5c      	ldr	r3, [pc, #368]	; (d5da8 <_GLOBAL__sub_I___appProductID+0x21c>)
   d5c36:	602b      	str	r3, [r5, #0]
   d5c38:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5c3a:	4d5c      	ldr	r5, [pc, #368]	; (d5dac <_GLOBAL__sub_I___appProductID+0x220>)
   d5c3c:	495c      	ldr	r1, [pc, #368]	; (d5db0 <_GLOBAL__sub_I___appProductID+0x224>)
   d5c3e:	4632      	mov	r2, r6
   d5c40:	f005 ff6c 	bl	dbb1c <__aeabi_atexit>
   d5c44:	495b      	ldr	r1, [pc, #364]	; (d5db4 <_GLOBAL__sub_I___appProductID+0x228>)
   d5c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5c4a:	4628      	mov	r0, r5
   d5c4c:	f001 fe22 	bl	d7894 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5c50:	4b59      	ldr	r3, [pc, #356]	; (d5db8 <_GLOBAL__sub_I___appProductID+0x22c>)
   d5c52:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5c54:	4632      	mov	r2, r6
   d5c56:	4959      	ldr	r1, [pc, #356]	; (d5dbc <_GLOBAL__sub_I___appProductID+0x230>)
   d5c58:	4628      	mov	r0, r5
   d5c5a:	f005 ff5f 	bl	dbb1c <__aeabi_atexit>
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d5c5e:	f005 ff0d 	bl	dba7c <_Z19__fetch_global_Wirev>
   d5c62:	4d57      	ldr	r5, [pc, #348]	; (d5dc0 <_GLOBAL__sub_I___appProductID+0x234>)
   d5c64:	4601      	mov	r1, r0
   d5c66:	2269      	movs	r2, #105	; 0x69
   d5c68:	4628      	mov	r0, r5
   d5c6a:	f000 fdb9 	bl	d67e0 <_ZN6AB1805C1ER7TwoWireh>
   d5c6e:	4628      	mov	r0, r5
FuelGauge fuel;                                     // Enable the fuel gauge API     
   d5c70:	4d54      	ldr	r5, [pc, #336]	; (d5dc4 <_GLOBAL__sub_I___appProductID+0x238>)
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d5c72:	4955      	ldr	r1, [pc, #340]	; (d5dc8 <_GLOBAL__sub_I___appProductID+0x23c>)
   d5c74:	4632      	mov	r2, r6
   d5c76:	f005 ff51 	bl	dbb1c <__aeabi_atexit>
FuelGauge fuel;                                     // Enable the fuel gauge API     
   d5c7a:	4621      	mov	r1, r4
   d5c7c:	4628      	mov	r0, r5
   d5c7e:	f003 f97b 	bl	d8f78 <_ZN9FuelGaugeC1Eb>
   d5c82:	4632      	mov	r2, r6
   d5c84:	4951      	ldr	r1, [pc, #324]	; (d5dcc <_GLOBAL__sub_I___appProductID+0x240>)
   d5c86:	4628      	mov	r0, r5
   d5c88:	f005 ff48 	bl	dbb1c <__aeabi_atexit>
MMA8452Q accel;                                     // Default constructor, SA0 pin is HIGH
   d5c8c:	211d      	movs	r1, #29
   d5c8e:	4850      	ldr	r0, [pc, #320]	; (d5dd0 <_GLOBAL__sub_I___appProductID+0x244>)
        filter_(level, filters) {
   d5c90:	4d50      	ldr	r5, [pc, #320]	; (d5dd4 <_GLOBAL__sub_I___appProductID+0x248>)
   d5c92:	f001 ff21 	bl	d7ad8 <_ZN8MMA8452QC1Eh>
        capacity_(0) {
   d5c96:	e9cd 4403 	strd	r4, r4, [sp, #12]
   d5c9a:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   d5c9c:	f005 fd1c 	bl	db6d8 <_Z16_fetch_usbserialv>
        stream_(&stream) {
   d5ca0:	f10d 0924 	add.w	r9, sp, #36	; 0x24
   d5ca4:	4682      	mov	sl, r0
   d5ca6:	a903      	add	r1, sp, #12
   d5ca8:	a806      	add	r0, sp, #24
   d5caa:	f7ff ff3d 	bl	d5b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5cae:	46ab      	mov	fp, r5
        stream_(&stream) {
   d5cb0:	a906      	add	r1, sp, #24
   d5cb2:	4648      	mov	r0, r9
   d5cb4:	f7ff ff38 	bl	d5b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5cb8:	4b47      	ldr	r3, [pc, #284]	; (d5dd8 <_GLOBAL__sub_I___appProductID+0x24c>)
   d5cba:	f84b 3b04 	str.w	r3, [fp], #4
   d5cbe:	af0c      	add	r7, sp, #48	; 0x30
   d5cc0:	4649      	mov	r1, r9
   d5cc2:	4638      	mov	r0, r7
   d5cc4:	f7ff ff30 	bl	d5b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5cc8:	463a      	mov	r2, r7
   d5cca:	4641      	mov	r1, r8
   d5ccc:	4658      	mov	r0, fp
   d5cce:	f004 f9f5 	bl	da0bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5cd2:	4638      	mov	r0, r7
   d5cd4:	f7ff fc70 	bl	d55b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5cd8:	4648      	mov	r0, r9
   d5cda:	f7ff fc6d 	bl	d55b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5cde:	4b3f      	ldr	r3, [pc, #252]	; (d5ddc <_GLOBAL__sub_I___appProductID+0x250>)
   d5ce0:	602b      	str	r3, [r5, #0]
   d5ce2:	f8c5 a020 	str.w	sl, [r5, #32]
   d5ce6:	a806      	add	r0, sp, #24
   d5ce8:	f7ff fc66 	bl	d55b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5cec:	4b3c      	ldr	r3, [pc, #240]	; (d5de0 <_GLOBAL__sub_I___appProductID+0x254>)
   d5cee:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d5cf0:	f005 fcf2 	bl	db6d8 <_Z16_fetch_usbserialv>
   d5cf4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5cf8:	f005 fcde 	bl	db6b8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5cfc:	f003 fe86 	bl	d9a0c <_ZN5spark10LogManager8instanceEv>
   d5d00:	4629      	mov	r1, r5
   d5d02:	f004 f96d 	bl	d9fe0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ALL);
   d5d06:	a803      	add	r0, sp, #12
   d5d08:	f7ff fc56 	bl	d55b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5d0c:	4632      	mov	r2, r6
   d5d0e:	4935      	ldr	r1, [pc, #212]	; (d5de4 <_GLOBAL__sub_I___appProductID+0x258>)
   d5d10:	4628      	mov	r0, r5
   d5d12:	f005 ff03 	bl	dbb1c <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5d16:	4b34      	ldr	r3, [pc, #208]	; (d5de8 <_GLOBAL__sub_I___appProductID+0x25c>)
   d5d18:	930c      	str	r3, [sp, #48]	; 0x30
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5d1a:	4d34      	ldr	r5, [pc, #208]	; (d5dec <_GLOBAL__sub_I___appProductID+0x260>)
   d5d1c:	4b34      	ldr	r3, [pc, #208]	; (d5df0 <_GLOBAL__sub_I___appProductID+0x264>)
   d5d1e:	602b      	str	r3, [r5, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d20:	e897 0003 	ldmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5d24:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d28:	e889 0003 	stmia.w	r9, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5d2c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5d30:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5d34:	e899 0003 	ldmia.w	r9, {r0, r1}
   d5d38:	e883 0003 	stmia.w	r3, {r0, r1}
   d5d3c:	4b2d      	ldr	r3, [pc, #180]	; (d5df4 <_GLOBAL__sub_I___appProductID+0x268>)
   d5d3e:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5d40:	69ab      	ldr	r3, [r5, #24]
   d5d42:	930f      	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5d44:	4b2c      	ldr	r3, [pc, #176]	; (d5df8 <_GLOBAL__sub_I___appProductID+0x26c>)
   d5d46:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5d48:	4a2c      	ldr	r2, [pc, #176]	; (d5dfc <_GLOBAL__sub_I___appProductID+0x270>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5d4a:	712c      	strb	r4, [r5, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5d4c:	462b      	mov	r3, r5
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5d4e:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5d50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5d54:	e9cd 8400 	strd	r8, r4, [sp]
   d5d58:	f105 0008 	add.w	r0, r5, #8
      __a = _GLIBCXX_MOVE(__b);
   d5d5c:	940e      	str	r4, [sp, #56]	; 0x38
   d5d5e:	f002 f827 	bl	d7db0 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5d62:	4638      	mov	r0, r7
   d5d64:	f7fe fae8 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
Timer countSignalTimer(1000, countSignalTimerISR, true);  // This is how we will ensure the BlueLED stays on long enough for folks to see it.
   d5d68:	4925      	ldr	r1, [pc, #148]	; (d5e00 <_GLOBAL__sub_I___appProductID+0x274>)
   d5d6a:	4632      	mov	r2, r6
   d5d6c:	4628      	mov	r0, r5
   d5d6e:	f005 fed5 	bl	dbb1c <__aeabi_atexit>
   d5d72:	b011      	add	sp, #68	; 0x44
   d5d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d78:	2003e364 	.word	0x2003e364
   d5d7c:	2003e368 	.word	0x2003e368
   d5d80:	2003e358 	.word	0x2003e358
   d5d84:	2003e300 	.word	0x2003e300
   d5d88:	2003e369 	.word	0x2003e369
   d5d8c:	2003e3d8 	.word	0x2003e3d8
   d5d90:	ffff0000 	.word	0xffff0000
   d5d94:	000d4329 	.word	0x000d4329
   d5d98:	2003e3a4 	.word	0x2003e3a4
   d5d9c:	000d4125 	.word	0x000d4125
   d5da0:	00030010 	.word	0x00030010
   d5da4:	2003e410 	.word	0x2003e410
   d5da8:	000dd224 	.word	0x000dd224
   d5dac:	2003e468 	.word	0x2003e468
   d5db0:	000d4171 	.word	0x000d4171
   d5db4:	2003f400 	.word	0x2003f400
   d5db8:	000dd240 	.word	0x000dd240
   d5dbc:	000d4149 	.word	0x000d4149
   d5dc0:	2003e36c 	.word	0x2003e36c
   d5dc4:	2003e420 	.word	0x2003e420
   d5dc8:	000d6775 	.word	0x000d6775
   d5dcc:	000d8f99 	.word	0x000d8f99
   d5dd0:	2003e38c 	.word	0x2003e38c
   d5dd4:	2003e430 	.word	0x2003e430
   d5dd8:	000dd1f4 	.word	0x000dd1f4
   d5ddc:	000dd7f8 	.word	0x000dd7f8
   d5de0:	000dd20c 	.word	0x000dd20c
   d5de4:	000d42e1 	.word	0x000d42e1
   d5de8:	000d40fb 	.word	0x000d40fb
   d5dec:	2003e3bc 	.word	0x2003e3bc
   d5df0:	000dd1e0 	.word	0x000dd1e0
   d5df4:	000d40e5 	.word	0x000d40e5
   d5df8:	000d40e1 	.word	0x000d40e1
   d5dfc:	000d4199 	.word	0x000d4199
   d5e00:	000d434d 	.word	0x000d434d

000d5e04 <_Z22disconnectFromParticlev>:
{
   d5e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e08:	b085      	sub	sp, #20
        clearSession_(clearSession) {
   d5e0a:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();
   d5e0e:	a801      	add	r0, sp, #4
   d5e10:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d5e14:	f8ad a00c 	strh.w	sl, [sp, #12]
   d5e18:	f002 fdc5 	bl	d89a6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d5e1c:	f7fe fb32 	bl	d4484 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d5e20:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d5e24:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d5e26:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5e2a:	f7fe fb2b 	bl	d4484 <_ZN11SystemClass6millisEv>
   d5e2e:	ebb0 060b 	subs.w	r6, r0, fp
   d5e32:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5e36:	45b9      	cmp	r9, r7
   d5e38:	bf08      	it	eq
   d5e3a:	45b0      	cmpeq	r8, r6
   d5e3c:	d305      	bcc.n	d5e4a <_Z22disconnectFromParticlev+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e3e:	f002 fab3 	bl	d83a8 <spark_cloud_flag_connected>
   d5e42:	b110      	cbz	r0, d5e4a <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d5e44:	f002 faa0 	bl	d8388 <spark_process>
        while (_while() && !_condition()) {
   d5e48:	e7ef      	b.n	d5e2a <_Z22disconnectFromParticlev+0x26>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e4a:	4e19      	ldr	r6, [pc, #100]	; (d5eb0 <_Z22disconnectFromParticlev+0xac>)
   d5e4c:	f002 faac 	bl	d83a8 <spark_cloud_flag_connected>
   d5e50:	6870      	ldr	r0, [r6, #4]
   d5e52:	2200      	movs	r2, #0
   d5e54:	2102      	movs	r1, #2
   d5e56:	f002 fb07 	bl	d8468 <network_disconnect>
        network_off(*this, 0, 0, NULL);
   d5e5a:	2300      	movs	r3, #0
   d5e5c:	6870      	ldr	r0, [r6, #4]
   d5e5e:	461a      	mov	r2, r3
   d5e60:	4619      	mov	r1, r3
   d5e62:	f002 fb19 	bl	d8498 <network_off>
        const system_tick_t start = millis();
   d5e66:	f7fe fb0d 	bl	d4484 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5e6a:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d5e6e:	4607      	mov	r7, r0
        while (_while() && !_condition()) {
   d5e70:	f247 582f 	movw	r8, #29999	; 0x752f
   d5e74:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5e78:	f7fe fb04 	bl	d4484 <_ZN11SystemClass6millisEv>
   d5e7c:	1bc4      	subs	r4, r0, r7
   d5e7e:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d5e82:	45a9      	cmp	r9, r5
   d5e84:	bf08      	it	eq
   d5e86:	45a0      	cmpeq	r8, r4
   d5e88:	d306      	bcc.n	d5e98 <_Z22disconnectFromParticlev+0x94>
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5e8a:	4630      	mov	r0, r6
   d5e8c:	f004 fc56 	bl	da73c <_ZN5spark12NetworkClass5isOffEv>
   d5e90:	b910      	cbnz	r0, d5e98 <_Z22disconnectFromParticlev+0x94>
            spark_process();
   d5e92:	f002 fa79 	bl	d8388 <spark_process>
        while (_while() && !_condition()) {
   d5e96:	e7ef      	b.n	d5e78 <_Z22disconnectFromParticlev+0x74>
   d5e98:	4805      	ldr	r0, [pc, #20]	; (d5eb0 <_Z22disconnectFromParticlev+0xac>)
   d5e9a:	f004 fc4f 	bl	da73c <_ZN5spark12NetworkClass5isOffEv>
  sysStatus.connectedStatus = false;
   d5e9e:	4b05      	ldr	r3, [pc, #20]	; (d5eb4 <_Z22disconnectFromParticlev+0xb0>)
   d5ea0:	2200      	movs	r2, #0
   d5ea2:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d5ea4:	4b04      	ldr	r3, [pc, #16]	; (d5eb8 <_Z22disconnectFromParticlev+0xb4>)
   d5ea6:	2001      	movs	r0, #1
   d5ea8:	7018      	strb	r0, [r3, #0]
}
   d5eaa:	b005      	add	sp, #20
   d5eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5eb0:	2003e508 	.word	0x2003e508
   d5eb4:	2003e4c0 	.word	0x2003e4c0
   d5eb8:	2003e4ec 	.word	0x2003e4ec

000d5ebc <loop>:
{
   d5ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d5ec0:	4ca2      	ldr	r4, [pc, #648]	; (d614c <loop+0x290>)
   d5ec2:	f8df 82f0 	ldr.w	r8, [pc, #752]	; d61b4 <loop+0x2f8>
   d5ec6:	7823      	ldrb	r3, [r4, #0]
   d5ec8:	4fa1      	ldr	r7, [pc, #644]	; (d6150 <loop+0x294>)
   d5eca:	4ea2      	ldr	r6, [pc, #648]	; (d6154 <loop+0x298>)
   d5ecc:	3b01      	subs	r3, #1
{
   d5ece:	b099      	sub	sp, #100	; 0x64
   d5ed0:	2b05      	cmp	r3, #5
   d5ed2:	d834      	bhi.n	d5f3e <loop+0x82>
   d5ed4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5ed8:	0006024f 	.word	0x0006024f
   d5edc:	017000b8 	.word	0x017000b8
   d5ee0:	021501e2 	.word	0x021501e2
    if (state != oldState) publishStateTransition();
   d5ee4:	4b9c      	ldr	r3, [pc, #624]	; (d6158 <loop+0x29c>)
   d5ee6:	781b      	ldrb	r3, [r3, #0]
   d5ee8:	2b02      	cmp	r3, #2
   d5eea:	d001      	beq.n	d5ef0 <loop+0x34>
   d5eec:	f7ff fa1e 	bl	d532c <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d5ef0:	4d9a      	ldr	r5, [pc, #616]	; (d615c <loop+0x2a0>)
   d5ef2:	79ab      	ldrb	r3, [r5, #6]
   d5ef4:	b153      	cbz	r3, d5f0c <loop+0x50>
   d5ef6:	f001 fff3 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
   d5efa:	4b99      	ldr	r3, [pc, #612]	; (d6160 <loop+0x2a4>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	1ac0      	subs	r0, r0, r3
   d5f00:	4b98      	ldr	r3, [pc, #608]	; (d6164 <loop+0x2a8>)
   d5f02:	681b      	ldr	r3, [r3, #0]
   d5f04:	4298      	cmp	r0, r3
   d5f06:	bf84      	itt	hi
   d5f08:	2304      	movhi	r3, #4
   d5f0a:	7023      	strbhi	r3, [r4, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = REPORTING_STATE;                                  // We want to report on the hour but not after bedtime
   d5f0c:	f005 faae 	bl	db46c <_ZN9TimeClass4hourEv>
   d5f10:	4b95      	ldr	r3, [pc, #596]	; (d6168 <loop+0x2ac>)
   d5f12:	4681      	mov	r9, r0
   d5f14:	2100      	movs	r1, #0
   d5f16:	6818      	ldr	r0, [r3, #0]
   d5f18:	f005 f90a 	bl	db130 <_ZN9TimeClass4hourEx>
   d5f1c:	4581      	cmp	r9, r0
   d5f1e:	bf1c      	itt	ne
   d5f20:	2305      	movne	r3, #5
   d5f22:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5f24:	f005 faa2 	bl	db46c <_ZN9TimeClass4hourEv>
   d5f28:	7f6b      	ldrb	r3, [r5, #29]
   d5f2a:	4298      	cmp	r0, r3
   d5f2c:	db02      	blt.n	d5f34 <loop+0x78>
   d5f2e:	2303      	movs	r3, #3
      state = ERROR_STATE;                                            // Response timed out
   d5f30:	7023      	strb	r3, [r4, #0]
   d5f32:	e004      	b.n	d5f3e <loop+0x82>
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5f34:	f005 fa9a 	bl	db46c <_ZN9TimeClass4hourEv>
   d5f38:	7f2b      	ldrb	r3, [r5, #28]
   d5f3a:	4298      	cmp	r0, r3
   d5f3c:	dbf7      	blt.n	d5f2e <loop+0x72>
    if (accel.available())
   d5f3e:	4c8b      	ldr	r4, [pc, #556]	; (d616c <loop+0x2b0>)
   d5f40:	4620      	mov	r0, r4
   d5f42:	f001 fe1a 	bl	d7b7a <_ZN8MMA8452Q9availableEv>
   d5f46:	2800      	cmp	r0, #0
   d5f48:	d03f      	beq.n	d5fca <loop+0x10e>
        accel.read();
   d5f4a:	4620      	mov	r0, r4
   d5f4c:	f001 febc 	bl	d7cc8 <_ZN8MMA8452Q4readEv>
        printAccelGraph(accel.cx, "X", 20, 2.0);
   d5f50:	ed94 0a02 	vldr	s0, [r4, #8]
   d5f54:	4986      	ldr	r1, [pc, #536]	; (d6170 <loop+0x2b4>)
   d5f56:	ed8d 0a03 	vstr	s0, [sp, #12]
   d5f5a:	a808      	add	r0, sp, #32
   d5f5c:	f004 fe85 	bl	dac6a <_ZN6StringC1EPKc>
   d5f60:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
   d5f64:	ed9d 0a03 	vldr	s0, [sp, #12]
   d5f68:	2114      	movs	r1, #20
   d5f6a:	a808      	add	r0, sp, #32
   d5f6c:	f7fe fbee 	bl	d474c <_Z15printAccelGraphf6Stringif>
   d5f70:	a808      	add	r0, sp, #32
   d5f72:	f004 fe2f 	bl	dabd4 <_ZN6StringD1Ev>
        printAccelGraph(accel.cy, "Y", 20, 2.0);
   d5f76:	ed94 0a03 	vldr	s0, [r4, #12]
   d5f7a:	497e      	ldr	r1, [pc, #504]	; (d6174 <loop+0x2b8>)
   d5f7c:	ed8d 0a03 	vstr	s0, [sp, #12]
   d5f80:	a808      	add	r0, sp, #32
   d5f82:	f004 fe72 	bl	dac6a <_ZN6StringC1EPKc>
   d5f86:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
   d5f8a:	ed9d 0a03 	vldr	s0, [sp, #12]
   d5f8e:	2114      	movs	r1, #20
   d5f90:	a808      	add	r0, sp, #32
   d5f92:	f7fe fbdb 	bl	d474c <_Z15printAccelGraphf6Stringif>
   d5f96:	a808      	add	r0, sp, #32
   d5f98:	f004 fe1c 	bl	dabd4 <_ZN6StringD1Ev>
        printAccelGraph(accel.cz, "Z", 20, 2.0);
   d5f9c:	ed94 0a04 	vldr	s0, [r4, #16]
   d5fa0:	4975      	ldr	r1, [pc, #468]	; (d6178 <loop+0x2bc>)
   d5fa2:	ed8d 0a03 	vstr	s0, [sp, #12]
   d5fa6:	a808      	add	r0, sp, #32
   d5fa8:	f004 fe5f 	bl	dac6a <_ZN6StringC1EPKc>
   d5fac:	ed9d 0a03 	vldr	s0, [sp, #12]
   d5fb0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
   d5fb4:	2114      	movs	r1, #20
   d5fb6:	a808      	add	r0, sp, #32
   d5fb8:	f7fe fbc8 	bl	d474c <_Z15printAccelGraphf6Stringif>
   d5fbc:	a808      	add	r0, sp, #32
   d5fbe:	f004 fe09 	bl	dabd4 <_ZN6StringD1Ev>
        Serial.println();
   d5fc2:	f005 fb89 	bl	db6d8 <_Z16_fetch_usbserialv>
   d5fc6:	f004 fd23 	bl	daa10 <_ZN5Print7printlnEv>
  if (sensorDetect) recordCount();                                    // The ISR had raised the sensor flag - this will service interrupts regardless of state
   d5fca:	f898 3000 	ldrb.w	r3, [r8]
   d5fce:	b10b      	cbz	r3, d5fd4 <loop+0x118>
   d5fd0:	f7fe fca4 	bl	d491c <_Z11recordCountv>
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d5fd4:	4869      	ldr	r0, [pc, #420]	; (d617c <loop+0x2c0>)
   d5fd6:	f001 f8f9 	bl	d71cc <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d5fda:	7833      	ldrb	r3, [r6, #0]
   d5fdc:	b13b      	cbz	r3, d5fee <loop+0x132>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5fde:	232c      	movs	r3, #44	; 0x2c
   d5fe0:	4a5e      	ldr	r2, [pc, #376]	; (d615c <loop+0x2a0>)
   d5fe2:	4867      	ldr	r0, [pc, #412]	; (d6180 <loop+0x2c4>)
   d5fe4:	2101      	movs	r1, #1
   d5fe6:	f001 f9ec 	bl	d73c2 <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
   d5fea:	2300      	movs	r3, #0
   d5fec:	7033      	strb	r3, [r6, #0]
  if (currentCountsWriteNeeded) {
   d5fee:	783b      	ldrb	r3, [r7, #0]
   d5ff0:	b13b      	cbz	r3, d6002 <loop+0x146>
   d5ff2:	2324      	movs	r3, #36	; 0x24
   d5ff4:	4a63      	ldr	r2, [pc, #396]	; (d6184 <loop+0x2c8>)
   d5ff6:	4862      	ldr	r0, [pc, #392]	; (d6180 <loop+0x2c4>)
   d5ff8:	2150      	movs	r1, #80	; 0x50
   d5ffa:	f001 f9e2 	bl	d73c2 <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d5ffe:	2300      	movs	r3, #0
   d6000:	703b      	strb	r3, [r7, #0]
  if (outOfMemory >= 0) {                                             // In this function we are going to reset the system if there is an out of memory error
   d6002:	4b61      	ldr	r3, [pc, #388]	; (d6188 <loop+0x2cc>)
   d6004:	681b      	ldr	r3, [r3, #0]
   d6006:	2b00      	cmp	r3, #0
   d6008:	db1b      	blt.n	d6042 <loop+0x186>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d600a:	4a60      	ldr	r2, [pc, #384]	; (d618c <loop+0x2d0>)
   d600c:	2140      	movs	r1, #64	; 0x40
   d600e:	a808      	add	r0, sp, #32
   d6010:	f002 fa9a 	bl	d8548 <snprintf>
    Log.info(message);
   d6014:	a908      	add	r1, sp, #32
   d6016:	485e      	ldr	r0, [pc, #376]	; (d6190 <loop+0x2d4>)
   d6018:	f7fe fa3e 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d601c:	2064      	movs	r0, #100	; 0x64
   d601e:	f002 fadb 	bl	d85d8 <delay>
        val_(0) {
   d6022:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);                   // Publish to the console - this is important so we will not filter on verboseMod
   d6024:	f88d 3000 	strb.w	r3, [sp]
   d6028:	4b5a      	ldr	r3, [pc, #360]	; (d6194 <loop+0x2d8>)
   d602a:	495b      	ldr	r1, [pc, #364]	; (d6198 <loop+0x2dc>)
   d602c:	781b      	ldrb	r3, [r3, #0]
   d602e:	485b      	ldr	r0, [pc, #364]	; (d619c <loop+0x2e0>)
   d6030:	aa08      	add	r2, sp, #32
   d6032:	f7fe fa48 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d6036:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d603a:	f002 facd 	bl	d85d8 <delay>
    System.reset();                                                   // An out of memory condition occurred - reset device.
   d603e:	f004 ff87 	bl	daf50 <_ZN11SystemClass5resetEv>
}
   d6042:	b019      	add	sp, #100	; 0x64
   d6044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (state != oldState) publishStateTransition();
   d6048:	4b43      	ldr	r3, [pc, #268]	; (d6158 <loop+0x29c>)
   d604a:	781b      	ldrb	r3, [r3, #0]
   d604c:	2b03      	cmp	r3, #3
   d604e:	d001      	beq.n	d6054 <loop+0x198>
   d6050:	f7ff f96c 	bl	d532c <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d6054:	200d      	movs	r0, #13
   d6056:	f003 f921 	bl	d929c <_Z15detachInterruptt>
    sensorControl(false);                                             // Turn off the sensor module for the hour
   d605a:	2000      	movs	r0, #0
   d605c:	f7fe fbf6 	bl	d484c <_Z13sensorControlb>
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
   d6060:	4b48      	ldr	r3, [pc, #288]	; (d6184 <loop+0x2c8>)
   d6062:	681b      	ldr	r3, [r3, #0]
   d6064:	b10b      	cbz	r3, d606a <loop+0x1ae>
      state = REPORTING_STATE;
   d6066:	2305      	movs	r3, #5
   d6068:	e762      	b.n	d5f30 <loop+0x74>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d606a:	4b3c      	ldr	r3, [pc, #240]	; (d615c <loop+0x2a0>)
   d606c:	78da      	ldrb	r2, [r3, #3]
   d606e:	4699      	mov	r9, r3
   d6070:	b10a      	cbz	r2, d6076 <loop+0x1ba>
   d6072:	f7ff fec7 	bl	d5e04 <_Z22disconnectFromParticlev>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d6076:	2100      	movs	r1, #0
   d6078:	4840      	ldr	r0, [pc, #256]	; (d617c <loop+0x2c0>)
   d607a:	f000 fcaf 	bl	d69dc <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d607e:	f005 f9e4 	bl	db44a <_ZN9TimeClass3nowEv>
   d6082:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d6086:	fb90 f3f5 	sdiv	r3, r0, r5
   d608a:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d608e:	4b44      	ldr	r3, [pc, #272]	; (d61a0 <loop+0x2e4>)
   d6090:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d6094:	7d1a      	ldrb	r2, [r3, #20]
   d6096:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d609a:	bfa8      	it	ge
   d609c:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d60a0:	b10a      	cbz	r2, d60a6 <loop+0x1ea>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d60a2:	2202      	movs	r2, #2
   d60a4:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d60a6:	2200      	movs	r2, #0
   d60a8:	2104      	movs	r1, #4
   d60aa:	483d      	ldr	r0, [pc, #244]	; (d61a0 <loop+0x2e4>)
   d60ac:	f7fe f98c 	bl	d43c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d60b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d60b4:	4369      	muls	r1, r5
   d60b6:	f7fe f9bb 	bl	d4430 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d60ba:	4939      	ldr	r1, [pc, #228]	; (d61a0 <loop+0x2e4>)
   d60bc:	a805      	add	r0, sp, #20
   d60be:	f004 ff4b 	bl	daf58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d60c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d60c6:	482d      	ldr	r0, [pc, #180]	; (d617c <loop+0x2c0>)
   d60c8:	f000 fc88 	bl	d69dc <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d60cc:	4835      	ldr	r0, [pc, #212]	; (d61a4 <loop+0x2e8>)
   d60ce:	f002 ffed 	bl	d90ac <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d60d2:	4834      	ldr	r0, [pc, #208]	; (d61a4 <loop+0x2e8>)
   d60d4:	f002 ffe1 	bl	d909a <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d60d8:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   d60da:	b19b      	cbz	r3, d6104 <loop+0x248>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d60dc:	889a      	ldrh	r2, [r3, #4]
   d60de:	2a01      	cmp	r2, #1
   d60e0:	d110      	bne.n	d6104 <loop+0x248>
    if (result.wakeupPin() == userSwitch) {                            // If the user woke the device we need to get up
   d60e2:	899b      	ldrh	r3, [r3, #12]
   d60e4:	2b04      	cmp	r3, #4
   d60e6:	d10d      	bne.n	d6104 <loop+0x248>
      setLowPowerMode("0");
   d60e8:	492f      	ldr	r1, [pc, #188]	; (d61a8 <loop+0x2ec>)
   d60ea:	a808      	add	r0, sp, #32
   d60ec:	f004 fdbd 	bl	dac6a <_ZN6StringC1EPKc>
   d60f0:	a808      	add	r0, sp, #32
   d60f2:	f7ff f84d 	bl	d5190 <_Z15setLowPowerMode6String>
   d60f6:	a808      	add	r0, sp, #32
   d60f8:	f004 fd6c 	bl	dabd4 <_ZN6StringD1Ev>
      sysStatus.openTime = 0;
   d60fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d6100:	f8a9 301c 	strh.w	r3, [r9, #28]
    if (Time.hour() < sysStatus.closeTime && Time.hour() >= sysStatus.openTime) { // We might wake up and find it is opening time.  Park is open let's get ready for the day
   d6104:	f005 f9b2 	bl	db46c <_ZN9TimeClass4hourEv>
   d6108:	f899 301d 	ldrb.w	r3, [r9, #29]
   d610c:	4298      	cmp	r0, r3
   d610e:	da14      	bge.n	d613a <loop+0x27e>
   d6110:	f005 f9ac 	bl	db46c <_ZN9TimeClass4hourEv>
   d6114:	f899 301c 	ldrb.w	r3, [r9, #28]
   d6118:	4298      	cmp	r0, r3
   d611a:	db0e      	blt.n	d613a <loop+0x27e>
      sensorControl(true);                                             // Turn off the sensor module for the hour
   d611c:	2001      	movs	r0, #1
   d611e:	f7fe fb95 	bl	d484c <_Z13sensorControlb>
      attachInterrupt(intPin, sensorISR, RISING);                      // Pressure Sensor interrupt from low to high
   d6122:	2300      	movs	r3, #0
   d6124:	9300      	str	r3, [sp, #0]
   d6126:	2201      	movs	r2, #1
   d6128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d612c:	491f      	ldr	r1, [pc, #124]	; (d61ac <loop+0x2f0>)
   d612e:	200d      	movs	r0, #13
   d6130:	f003 f88a 	bl	d9248 <_Z15attachInterrupttPFvvE13InterruptModeah>
      stayAwake = stayAwakeLong;                                       // Keeps Boron awake after deep sleep - may not be needed
   d6134:	4b0b      	ldr	r3, [pc, #44]	; (d6164 <loop+0x2a8>)
   d6136:	4a1e      	ldr	r2, [pc, #120]	; (d61b0 <loop+0x2f4>)
   d6138:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d613a:	2302      	movs	r3, #2
   d613c:	7023      	strb	r3, [r4, #0]
        if (wakeupSource_) {
   d613e:	9805      	ldr	r0, [sp, #20]
   d6140:	2800      	cmp	r0, #0
   d6142:	f43f aefc 	beq.w	d5f3e <loop+0x82>
            free(wakeupSource_);
   d6146:	f002 f9e7 	bl	d8518 <free>
            wakeupSource_ = nullptr;
   d614a:	e6f8      	b.n	d5f3e <loop+0x82>
   d614c:	2003e4b5 	.word	0x2003e4b5
   d6150:	2003e3fc 	.word	0x2003e3fc
   d6154:	2003e4ec 	.word	0x2003e4ec
   d6158:	2003e464 	.word	0x2003e464
   d615c:	2003e4c0 	.word	0x2003e4c0
   d6160:	2003e4bc 	.word	0x2003e4bc
   d6164:	2003e4b8 	.word	0x2003e4b8
   d6168:	2003e42c 	.word	0x2003e42c
   d616c:	2003e38c 	.word	0x2003e38c
   d6170:	000dd1ab 	.word	0x000dd1ab
   d6174:	000dd1ad 	.word	0x000dd1ad
   d6178:	000dd1af 	.word	0x000dd1af
   d617c:	2003e36c 	.word	0x2003e36c
   d6180:	2003e410 	.word	0x2003e410
   d6184:	2003e3d8 	.word	0x2003e3d8
   d6188:	2003e210 	.word	0x2003e210
   d618c:	000dd1b1 	.word	0x000dd1b1
   d6190:	2003e5dc 	.word	0x2003e5dc
   d6194:	2003e368 	.word	0x2003e368
   d6198:	000dd1d0 	.word	0x000dd1d0
   d619c:	2003e468 	.word	0x2003e468
   d61a0:	2003e3a4 	.word	0x2003e3a4
   d61a4:	2003e420 	.word	0x2003e420
   d61a8:	000dcf16 	.word	0x000dcf16
   d61ac:	000d4251 	.word	0x000d4251
   d61b0:	00015f90 	.word	0x00015f90
   d61b4:	2003e4a4 	.word	0x2003e4a4
    if (state != oldState) publishStateTransition();
   d61b8:	4bad      	ldr	r3, [pc, #692]	; (d6470 <loop+0x5b4>)
   d61ba:	781b      	ldrb	r3, [r3, #0]
   d61bc:	2b04      	cmp	r3, #4
   d61be:	d001      	beq.n	d61c4 <loop+0x308>
   d61c0:	f7ff f8b4 	bl	d532c <_Z22publishStateTransitionv>
    if (sensorDetect || countSignalTimer.isActive()) break;           // Don't nap until we are done with event
   d61c4:	f898 3000 	ldrb.w	r3, [r8]
   d61c8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   d61cc:	2b00      	cmp	r3, #0
   d61ce:	f47f aeb6 	bne.w	d5f3e <loop+0x82>
    bool isValid() const { return handle!=nullptr; }
   d61d2:	4ba8      	ldr	r3, [pc, #672]	; (d6474 <loop+0x5b8>)
   d61d4:	6898      	ldr	r0, [r3, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d61d6:	2800      	cmp	r0, #0
   d61d8:	d14d      	bne.n	d6276 <loop+0x3ba>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d61da:	4ba7      	ldr	r3, [pc, #668]	; (d6478 <loop+0x5bc>)
   d61dc:	78db      	ldrb	r3, [r3, #3]
   d61de:	b10b      	cbz	r3, d61e4 <loop+0x328>
   d61e0:	f7ff fe10 	bl	d5e04 <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                 // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d61e4:	4ba5      	ldr	r3, [pc, #660]	; (d647c <loop+0x5c0>)
    bool stopWDT() { return setWDT(0); };
   d61e6:	48a6      	ldr	r0, [pc, #664]	; (d6480 <loop+0x5c4>)
   d61e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d61ec:	2100      	movs	r1, #0
   d61ee:	601a      	str	r2, [r3, #0]
   d61f0:	f000 fbf4 	bl	d69dc <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d61f4:	f005 f929 	bl	db44a <_ZN9TimeClass3nowEv>
   d61f8:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d61fc:	fb90 f3f5 	sdiv	r3, r0, r5
   d6200:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d6204:	4b9f      	ldr	r3, [pc, #636]	; (d6484 <loop+0x5c8>)
   d6206:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d620a:	7d1a      	ldrb	r2, [r3, #20]
   d620c:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d6210:	bfa8      	it	ge
   d6212:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d6216:	b10a      	cbz	r2, d621c <loop+0x360>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d6218:	2202      	movs	r2, #2
   d621a:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d621c:	2200      	movs	r2, #0
   d621e:	2104      	movs	r1, #4
   d6220:	4898      	ldr	r0, [pc, #608]	; (d6484 <loop+0x5c8>)
   d6222:	f7fe f8d1 	bl	d43c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .gpio(intPin,RISING)
   d6226:	2201      	movs	r2, #1
   d6228:	210d      	movs	r1, #13
   d622a:	f7fe f8cd 	bl	d43c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d622e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6232:	4369      	muls	r1, r5
   d6234:	f7fe f8fc 	bl	d4430 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d6238:	4992      	ldr	r1, [pc, #584]	; (d6484 <loop+0x5c8>)
   d623a:	a805      	add	r0, sp, #20
   d623c:	f004 fe8c 	bl	daf58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d6240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d6244:	488e      	ldr	r0, [pc, #568]	; (d6480 <loop+0x5c4>)
   d6246:	f000 fbc9 	bl	d69dc <_ZN6AB18056setWDTEi>
    fuel.wakeup();                                                     // Make sure that the fuel gauge wakes quickly 
   d624a:	488f      	ldr	r0, [pc, #572]	; (d6488 <loop+0x5cc>)
   d624c:	f002 ff2e 	bl	d90ac <_ZN9FuelGauge6wakeupEv>
    fuel.quickStart();
   d6250:	488d      	ldr	r0, [pc, #564]	; (d6488 <loop+0x5cc>)
   d6252:	f002 ff22 	bl	d909a <_ZN9FuelGauge10quickStartEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d6256:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   d6258:	2b00      	cmp	r3, #0
   d625a:	f43f af6e 	beq.w	d613a <loop+0x27e>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d625e:	889a      	ldrh	r2, [r3, #4]
   d6260:	2a01      	cmp	r2, #1
   d6262:	f47f af6a 	bne.w	d613a <loop+0x27e>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d6266:	899b      	ldrh	r3, [r3, #12]
    if (result.wakeupPin() == intPin) {                                // Executions starts here after sleep - time or sensor interrupt?
   d6268:	2b0d      	cmp	r3, #13
   d626a:	d109      	bne.n	d6280 <loop+0x3c4>
   d626c:	f001 fe38 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d6270:	4b86      	ldr	r3, [pc, #536]	; (d648c <loop+0x5d0>)
   d6272:	6018      	str	r0, [r3, #0]
   d6274:	e761      	b.n	d613a <loop+0x27e>
   d6276:	f001 fdf3 	bl	d7e60 <os_timer_is_active>
   d627a:	2800      	cmp	r0, #0
   d627c:	d0ad      	beq.n	d61da <loop+0x31e>
   d627e:	e65e      	b.n	d5f3e <loop+0x82>
    else if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d6280:	2b04      	cmp	r3, #4
   d6282:	f47f af5a 	bne.w	d613a <loop+0x27e>
   d6286:	4982      	ldr	r1, [pc, #520]	; (d6490 <loop+0x5d4>)
   d6288:	a808      	add	r0, sp, #32
   d628a:	f004 fcee 	bl	dac6a <_ZN6StringC1EPKc>
   d628e:	a808      	add	r0, sp, #32
   d6290:	f7fe ff7e 	bl	d5190 <_Z15setLowPowerMode6String>
   d6294:	a808      	add	r0, sp, #32
   d6296:	f004 fc9d 	bl	dabd4 <_ZN6StringD1Ev>
   d629a:	e74e      	b.n	d613a <loop+0x27e>
    if (state != oldState) publishStateTransition();
   d629c:	4b74      	ldr	r3, [pc, #464]	; (d6470 <loop+0x5b4>)
   d629e:	781b      	ldrb	r3, [r3, #0]
   d62a0:	2b05      	cmp	r3, #5
   d62a2:	d001      	beq.n	d62a8 <loop+0x3ec>
   d62a4:	f7ff f842 	bl	d532c <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) {
   d62a8:	4d73      	ldr	r5, [pc, #460]	; (d6478 <loop+0x5bc>)
   d62aa:	78eb      	ldrb	r3, [r5, #3]
   d62ac:	b913      	cbnz	r3, d62b4 <loop+0x3f8>
      connectToParticleBlocking();                                    // Go to connect state to connect and will return from there
   d62ae:	f7fe fec1 	bl	d5034 <_Z25connectToParticleBlockingv>
      break;
   d62b2:	e644      	b.n	d5f3e <loop+0x82>
   d62b4:	f002 f878 	bl	d83a8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d62b8:	b1e8      	cbz	r0, d62f6 <loop+0x43a>
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
   d62ba:	f7ff f925 	bl	d5508 <_Z16takeMeasurementsv>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house and publish to Google Sheets
   d62be:	f005 f8d5 	bl	db46c <_ZN9TimeClass4hourEv>
   d62c2:	7f2b      	ldrb	r3, [r5, #28]
   d62c4:	4298      	cmp	r0, r3
   d62c6:	d113      	bne.n	d62f0 <loop+0x434>
   d62c8:	f7ff f8a4 	bl	d5414 <_Z12dailyCleanupv>
      if (Time.hour() == sysStatus.openTime && sysStatus.openTime==0) sendEvent();    // Need this so we can get 24 hour reporting for non-sleeping devices
   d62cc:	f005 f8ce 	bl	db46c <_ZN9TimeClass4hourEv>
   d62d0:	7f2b      	ldrb	r3, [r5, #28]
   d62d2:	4298      	cmp	r0, r3
   d62d4:	d102      	bne.n	d62dc <loop+0x420>
   d62d6:	b908      	cbnz	r0, d62dc <loop+0x420>
   d62d8:	f7fe fbc6 	bl	d4a68 <_Z9sendEventv>
   d62dc:	f001 fe00 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();
   d62e0:	4b6c      	ldr	r3, [pc, #432]	; (d6494 <loop+0x5d8>)
   d62e2:	6018      	str	r0, [r3, #0]
      lastReportedTime = Time.now();
   d62e4:	f005 f8b1 	bl	db44a <_ZN9TimeClass3nowEv>
   d62e8:	4b6b      	ldr	r3, [pc, #428]	; (d6498 <loop+0x5dc>)
   d62ea:	6018      	str	r0, [r3, #0]
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d62ec:	2306      	movs	r3, #6
   d62ee:	e61f      	b.n	d5f30 <loop+0x74>
      else sendEvent();                                               // Send data to Ubidots but not at opening time as there is nothing to publish
   d62f0:	f7fe fbba 	bl	d4a68 <_Z9sendEventv>
   d62f4:	e7ea      	b.n	d62cc <loop+0x410>
   d62f6:	f001 fdf3 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d62fa:	4b68      	ldr	r3, [pc, #416]	; (d649c <loop+0x5e0>)
   d62fc:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d62fe:	2301      	movs	r3, #1
   d6300:	e616      	b.n	d5f30 <loop+0x74>
    if (state != oldState) publishStateTransition();
   d6302:	4b5b      	ldr	r3, [pc, #364]	; (d6470 <loop+0x5b4>)
   d6304:	781b      	ldrb	r3, [r3, #0]
   d6306:	2b06      	cmp	r3, #6
   d6308:	d001      	beq.n	d630e <loop+0x452>
   d630a:	f7ff f80f 	bl	d532c <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   d630e:	4b64      	ldr	r3, [pc, #400]	; (d64a0 <loop+0x5e4>)
   d6310:	781d      	ldrb	r5, [r3, #0]
   d6312:	b9b5      	cbnz	r5, d6342 <loop+0x486>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d6314:	4b59      	ldr	r3, [pc, #356]	; (d647c <loop+0x5c0>)
   d6316:	4a63      	ldr	r2, [pc, #396]	; (d64a4 <loop+0x5e8>)
   d6318:	601a      	str	r2, [r3, #0]
   d631a:	f001 fde1 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d631e:	4b5b      	ldr	r3, [pc, #364]	; (d648c <loop+0x5d0>)
   d6320:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d6322:	2302      	movs	r3, #2
   d6324:	7023      	strb	r3, [r4, #0]
      if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d6326:	4b60      	ldr	r3, [pc, #384]	; (d64a8 <loop+0x5ec>)
   d6328:	6859      	ldr	r1, [r3, #4]
   d632a:	2900      	cmp	r1, #0
   d632c:	f43f ae07 	beq.w	d5f3e <loop+0x82>
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d6330:	681a      	ldr	r2, [r3, #0]
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d6332:	605d      	str	r5, [r3, #4]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d6334:	1a52      	subs	r2, r2, r1
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d6336:	e9c3 5505 	strd	r5, r5, [r3, #20]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d633a:	601a      	str	r2, [r3, #0]
        currentCountsWriteNeeded=true;
   d633c:	2301      	movs	r3, #1
   d633e:	703b      	strb	r3, [r7, #0]
   d6340:	e5fd      	b.n	d5f3e <loop+0x82>
   d6342:	f001 fdcd 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d6346:	4b53      	ldr	r3, [pc, #332]	; (d6494 <loop+0x5d8>)
   d6348:	681b      	ldr	r3, [r3, #0]
   d634a:	1ac0      	subs	r0, r0, r3
   d634c:	f247 5330 	movw	r3, #30000	; 0x7530
   d6350:	4298      	cmp	r0, r3
   d6352:	f67f adf4 	bls.w	d5f3e <loop+0x82>
   d6356:	f001 fdc3 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d635a:	4b50      	ldr	r3, [pc, #320]	; (d649c <loop+0x5e0>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE, WITH_ACK);  // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d635c:	4a53      	ldr	r2, [pc, #332]	; (d64ac <loop+0x5f0>)
      resetTimeStamp = millis();
   d635e:	6018      	str	r0, [r3, #0]
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d6360:	4b53      	ldr	r3, [pc, #332]	; (d64b0 <loop+0x5f4>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE, WITH_ACK);  // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d6362:	4954      	ldr	r1, [pc, #336]	; (d64b4 <loop+0x5f8>)
   d6364:	781b      	ldrb	r3, [r3, #0]
   d6366:	f88d 3000 	strb.w	r3, [sp]
   d636a:	4b53      	ldr	r3, [pc, #332]	; (d64b8 <loop+0x5fc>)
   d636c:	4853      	ldr	r0, [pc, #332]	; (d64bc <loop+0x600>)
   d636e:	781b      	ldrb	r3, [r3, #0]
   d6370:	f7fe f8a9 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6374:	e7c3      	b.n	d62fe <loop+0x442>
    if (state != oldState) publishStateTransition();
   d6376:	4b3e      	ldr	r3, [pc, #248]	; (d6470 <loop+0x5b4>)
   d6378:	781b      	ldrb	r3, [r3, #0]
   d637a:	2b01      	cmp	r3, #1
   d637c:	d001      	beq.n	d6382 <loop+0x4c6>
   d637e:	f7fe ffd5 	bl	d532c <_Z22publishStateTransitionv>
   d6382:	f001 fdad 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d6386:	4b45      	ldr	r3, [pc, #276]	; (d649c <loop+0x5e0>)
   d6388:	681b      	ldr	r3, [r3, #0]
   d638a:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d638e:	3330      	adds	r3, #48	; 0x30
   d6390:	4283      	cmp	r3, r0
   d6392:	f4bf add4 	bcs.w	d5f3e <loop+0x82>
      if ((Time.now() - sysStatus.lastConnection) > 7200) {         // It is been over two hours since we last connected to the cloud - time for a reset
   d6396:	4c38      	ldr	r4, [pc, #224]	; (d6478 <loop+0x5bc>)
   d6398:	f005 f857 	bl	db44a <_ZN9TimeClass3nowEv>
   d639c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d639e:	1ac0      	subs	r0, r0, r3
   d63a0:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d63a4:	d910      	bls.n	d63c8 <loop+0x50c>
   d63a6:	232c      	movs	r3, #44	; 0x2c
   d63a8:	4622      	mov	r2, r4
   d63aa:	2101      	movs	r1, #1
   d63ac:	4844      	ldr	r0, [pc, #272]	; (d64c0 <loop+0x604>)
   d63ae:	f001 f808 	bl	d73c2 <_ZN6MB85RC9writeDataEjPKhj>
        Log.info("failed to connect to cloud, doing deep reset");
   d63b2:	4944      	ldr	r1, [pc, #272]	; (d64c4 <loop+0x608>)
   d63b4:	4844      	ldr	r0, [pc, #272]	; (d64c8 <loop+0x60c>)
   d63b6:	f7fe f86f 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
        delay(100);
   d63ba:	2064      	movs	r0, #100	; 0x64
   d63bc:	f002 f90c 	bl	d85d8 <delay>
        ab1805.deepPowerDown();                                       // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d63c0:	482f      	ldr	r0, [pc, #188]	; (d6480 <loop+0x5c4>)
   d63c2:	211e      	movs	r1, #30
   d63c4:	f000 fc64 	bl	d6c90 <_ZN6AB180513deepPowerDownEi>
      if (sysStatus.resetCount <= 3) {                                // First try simple reset
   d63c8:	6923      	ldr	r3, [r4, #16]
   d63ca:	2b03      	cmp	r3, #3
   d63cc:	dc14      	bgt.n	d63f8 <loop+0x53c>
   d63ce:	f001 ffeb 	bl	d83a8 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d63d2:	b150      	cbz	r0, d63ea <loop+0x52e>
   d63d4:	4b36      	ldr	r3, [pc, #216]	; (d64b0 <loop+0x5f4>)
   d63d6:	4a3d      	ldr	r2, [pc, #244]	; (d64cc <loop+0x610>)
   d63d8:	781b      	ldrb	r3, [r3, #0]
   d63da:	f88d 3000 	strb.w	r3, [sp]
   d63de:	4b36      	ldr	r3, [pc, #216]	; (d64b8 <loop+0x5fc>)
   d63e0:	493b      	ldr	r1, [pc, #236]	; (d64d0 <loop+0x614>)
   d63e2:	781b      	ldrb	r3, [r3, #0]
   d63e4:	4835      	ldr	r0, [pc, #212]	; (d64bc <loop+0x600>)
   d63e6:	f7fe f86e 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d63ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d63ee:	f002 f8f3 	bl	d85d8 <delay>
        System.reset();
   d63f2:	f004 fdad 	bl	daf50 <_ZN11SystemClass5resetEv>
   d63f6:	e5a2      	b.n	d5f3e <loop+0x82>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
   d63f8:	f005 f827 	bl	db44a <_ZN9TimeClass3nowEv>
   d63fc:	6a23      	ldr	r3, [r4, #32]
   d63fe:	1ac0      	subs	r0, r0, r3
   d6400:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d6404:	d91a      	bls.n	d643c <loop+0x580>
   d6406:	f001 ffcf 	bl	d83a8 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE, WITH_ACK);  // Broadcast Reset Action
   d640a:	b150      	cbz	r0, d6422 <loop+0x566>
   d640c:	4b28      	ldr	r3, [pc, #160]	; (d64b0 <loop+0x5f4>)
   d640e:	4a31      	ldr	r2, [pc, #196]	; (d64d4 <loop+0x618>)
   d6410:	781b      	ldrb	r3, [r3, #0]
   d6412:	f88d 3000 	strb.w	r3, [sp]
   d6416:	4b28      	ldr	r3, [pc, #160]	; (d64b8 <loop+0x5fc>)
   d6418:	492d      	ldr	r1, [pc, #180]	; (d64d0 <loop+0x614>)
   d641a:	781b      	ldrb	r3, [r3, #0]
   d641c:	4827      	ldr	r0, [pc, #156]	; (d64bc <loop+0x600>)
   d641e:	f7fe f852 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d6422:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6426:	f002 f8d7 	bl	d85d8 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d642a:	2300      	movs	r3, #0
   d642c:	6123      	str	r3, [r4, #16]
        ab1805.deepPowerDown(10);
   d642e:	210a      	movs	r1, #10
        systemStatusWriteNeeded=true;
   d6430:	2301      	movs	r3, #1
        ab1805.deepPowerDown(10);
   d6432:	4813      	ldr	r0, [pc, #76]	; (d6480 <loop+0x5c4>)
        systemStatusWriteNeeded=true;
   d6434:	7033      	strb	r3, [r6, #0]
        ab1805.deepPowerDown(10);
   d6436:	f000 fc2b 	bl	d6c90 <_ZN6AB180513deepPowerDownEi>
   d643a:	e580      	b.n	d5f3e <loop+0x82>
   d643c:	f001 ffb4 	bl	d83a8 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcase Reset Action
   d6440:	b150      	cbz	r0, d6458 <loop+0x59c>
   d6442:	4b1b      	ldr	r3, [pc, #108]	; (d64b0 <loop+0x5f4>)
   d6444:	4a24      	ldr	r2, [pc, #144]	; (d64d8 <loop+0x61c>)
   d6446:	781b      	ldrb	r3, [r3, #0]
   d6448:	f88d 3000 	strb.w	r3, [sp]
   d644c:	4b1a      	ldr	r3, [pc, #104]	; (d64b8 <loop+0x5fc>)
   d644e:	4920      	ldr	r1, [pc, #128]	; (d64d0 <loop+0x614>)
   d6450:	781b      	ldrb	r3, [r3, #0]
   d6452:	481a      	ldr	r0, [pc, #104]	; (d64bc <loop+0x600>)
   d6454:	f7fe f837 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d6458:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d645c:	f002 f8bc 	bl	d85d8 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d6460:	2300      	movs	r3, #0
   d6462:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
   d6464:	2301      	movs	r3, #1
   d6466:	7033      	strb	r3, [r6, #0]
        fullModemReset();                                             // Full Modem reset and reboots
   d6468:	f7fe ffa0 	bl	d53ac <_Z14fullModemResetv>
   d646c:	e567      	b.n	d5f3e <loop+0x82>
   d646e:	bf00      	nop
   d6470:	2003e464 	.word	0x2003e464
   d6474:	2003e3bc 	.word	0x2003e3bc
   d6478:	2003e4c0 	.word	0x2003e4c0
   d647c:	2003e4b8 	.word	0x2003e4b8
   d6480:	2003e36c 	.word	0x2003e36c
   d6484:	2003e3a4 	.word	0x2003e3a4
   d6488:	2003e420 	.word	0x2003e420
   d648c:	2003e4bc 	.word	0x2003e4bc
   d6490:	000dcf16 	.word	0x000dcf16
   d6494:	2003e4f0 	.word	0x2003e4f0
   d6498:	2003e42c 	.word	0x2003e42c
   d649c:	2003e4a0 	.word	0x2003e4a0
   d64a0:	2003e40c 	.word	0x2003e40c
   d64a4:	00015f90 	.word	0x00015f90
   d64a8:	2003e3d8 	.word	0x2003e3d8
   d64ac:	000dcfdd 	.word	0x000dcfdd
   d64b0:	2003e369 	.word	0x2003e369
   d64b4:	000dd112 	.word	0x000dd112
   d64b8:	2003e368 	.word	0x2003e368
   d64bc:	2003e468 	.word	0x2003e468
   d64c0:	2003e410 	.word	0x2003e410
   d64c4:	000dd12b 	.word	0x000dd12b
   d64c8:	2003e5dc 	.word	0x2003e5dc
   d64cc:	000dd158 	.word	0x000dd158
   d64d0:	000dd16c 	.word	0x000dd16c
   d64d4:	000dd172 	.word	0x000dd172
   d64d8:	000dd18c 	.word	0x000dd18c

000d64dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d64dc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d64de:	2000      	movs	r0, #0
   d64e0:	f001 ff8a 	bl	d83f8 <spark_sync_time_pending>
   d64e4:	b128      	cbz	r0, d64f2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d64e6:	f001 ff5f 	bl	d83a8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d64ea:	f080 0001 	eor.w	r0, r0, #1
   d64ee:	b2c0      	uxtb	r0, r0
    }
   d64f0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d64f2:	2001      	movs	r0, #1
   d64f4:	e7fc      	b.n	d64f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d64f8 <_Z11setTimeZone6String>:
 * Values outside this range will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if successful, 0 if invalid command
 */
int setTimeZone(String command)
{
   d64f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d64fc:	b0c8      	sub	sp, #288	; 0x120
   d64fe:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6500:	f001 ff52 	bl	d83a8 <spark_cloud_flag_connected>
        if (!connected()) {
   d6504:	b110      	cbz	r0, d650c <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d6506:	2000      	movs	r0, #0
   d6508:	f001 ff6e 	bl	d83e8 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d650c:	2000      	movs	r0, #0
   d650e:	f001 fcf7 	bl	d7f00 <hal_timer_millis>
   d6512:	f04f 0a00 	mov.w	sl, #0
   d6516:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d6518:	f247 562f 	movw	r6, #29999	; 0x752f
   d651c:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d651e:	2000      	movs	r0, #0
   d6520:	f001 fcee 	bl	d7f00 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d6524:	ebb0 0409 	subs.w	r4, r0, r9
   d6528:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d652c:	42af      	cmp	r7, r5
   d652e:	bf08      	it	eq
   d6530:	42a6      	cmpeq	r6, r4
   d6532:	d305      	bcc.n	d6540 <_Z11setTimeZone6String+0x48>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d6534:	f7ff ffd2 	bl	d64dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d6538:	b910      	cbnz	r0, d6540 <_Z11setTimeZone6String+0x48>
            spark_process();
   d653a:	f001 ff25 	bl	d8388 <spark_process>
        while (_while() && !_condition()) {
   d653e:	e7ee      	b.n	d651e <_Z11setTimeZone6String+0x26>
   d6540:	f7ff ffcc 	bl	d64dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d6544:	f8d8 0000 	ldr.w	r0, [r8]
   d6548:	220a      	movs	r2, #10
   d654a:	a903      	add	r1, sp, #12
   d654c:	f006 fb50 	bl	dcbf0 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d6550:	f100 030c 	add.w	r3, r0, #12
   d6554:	b2db      	uxtb	r3, r3
   d6556:	2b18      	cmp	r3, #24
   d6558:	d848      	bhi.n	d65ec <_Z11setTimeZone6String+0xf4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d655a:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d655c:	ee07 5a90 	vmov	s15, r5
   d6560:	4b27      	ldr	r3, [pc, #156]	; (d6600 <_Z11setTimeZone6String+0x108>)
   d6562:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d6566:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d6568:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d656c:	f004 fe04 	bl	db178 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d6570:	4b24      	ldr	r3, [pc, #144]	; (d6604 <_Z11setTimeZone6String+0x10c>)
   d6572:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d6574:	f004 ffae 	bl	db4d4 <_ZN9TimeClass5localEv>
   d6578:	4606      	mov	r6, r0
   d657a:	f004 ff66 	bl	db44a <_ZN9TimeClass3nowEv>
   d657e:	1a30      	subs	r0, r6, r0
   d6580:	f005 fc2c 	bl	dbddc <__aeabi_i2d>
   d6584:	a31c      	add	r3, pc, #112	; (adr r3, d65f8 <_Z11setTimeZone6String+0x100>)
   d6586:	e9d3 2300 	ldrd	r2, r3, [r3]
   d658a:	f005 fdbb 	bl	dc104 <__aeabi_ddiv>
   d658e:	4a1e      	ldr	r2, [pc, #120]	; (d6608 <_Z11setTimeZone6String+0x110>)
   d6590:	e9cd 0100 	strd	r0, r1, [sp]
   d6594:	210a      	movs	r1, #10
   d6596:	481d      	ldr	r0, [pc, #116]	; (d660c <_Z11setTimeZone6String+0x114>)
   d6598:	f001 ffd6 	bl	d8548 <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d659c:	f001 ff04 	bl	d83a8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d65a0:	b310      	cbz	r0, d65e8 <_Z11setTimeZone6String+0xf0>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d65a2:	462b      	mov	r3, r5
   d65a4:	4a1a      	ldr	r2, [pc, #104]	; (d6610 <_Z11setTimeZone6String+0x118>)
   d65a6:	4d1b      	ldr	r5, [pc, #108]	; (d6614 <_Z11setTimeZone6String+0x11c>)
   d65a8:	f44f 7180 	mov.w	r1, #256	; 0x100
        val_(0) {
   d65ac:	2600      	movs	r6, #0
   d65ae:	a808      	add	r0, sp, #32
   d65b0:	f001 ffca 	bl	d8548 <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d65b4:	f88d 6000 	strb.w	r6, [sp]
   d65b8:	4917      	ldr	r1, [pc, #92]	; (d6618 <_Z11setTimeZone6String+0x120>)
   d65ba:	782b      	ldrb	r3, [r5, #0]
   d65bc:	4817      	ldr	r0, [pc, #92]	; (d661c <_Z11setTimeZone6String+0x124>)
   d65be:	aa08      	add	r2, sp, #32
   d65c0:	f7fd ff81 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d65c4:	f004 ff41 	bl	db44a <_ZN9TimeClass3nowEv>
   d65c8:	4602      	mov	r2, r0
   d65ca:	17c3      	asrs	r3, r0, #31
   d65cc:	a804      	add	r0, sp, #16
   d65ce:	f004 fe39 	bl	db244 <_ZN9TimeClass7timeStrEx>
   d65d2:	f88d 6000 	strb.w	r6, [sp]
   d65d6:	782b      	ldrb	r3, [r5, #0]
   d65d8:	9a04      	ldr	r2, [sp, #16]
   d65da:	490f      	ldr	r1, [pc, #60]	; (d6618 <_Z11setTimeZone6String+0x120>)
   d65dc:	480f      	ldr	r0, [pc, #60]	; (d661c <_Z11setTimeZone6String+0x124>)
   d65de:	f7fd ff72 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d65e2:	a804      	add	r0, sp, #16
   d65e4:	f004 faf6 	bl	dabd4 <_ZN6StringD1Ev>
  }

  return 1;
   d65e8:	4620      	mov	r0, r4
   d65ea:	e000      	b.n	d65ee <_Z11setTimeZone6String+0xf6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d65ec:	2000      	movs	r0, #0
}
   d65ee:	b048      	add	sp, #288	; 0x120
   d65f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d65f4:	f3af 8000 	nop.w
   d65f8:	00000000 	.word	0x00000000
   d65fc:	40ac2000 	.word	0x40ac2000
   d6600:	2003e4c0 	.word	0x2003e4c0
   d6604:	2003e4ec 	.word	0x2003e4ec
   d6608:	000dd108 	.word	0x000dd108
   d660c:	2003e3fd 	.word	0x2003e3fd
   d6610:	000dd28c 	.word	0x000dd28c
   d6614:	2003e4f4 	.word	0x2003e4f4
   d6618:	000dd043 	.word	0x000dd043
   d661c:	2003e468 	.word	0x2003e468

000d6620 <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d6620:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d6622:	f004 ff3b 	bl	db49c <_ZN9TimeClass3dayEv>
   d6626:	4605      	mov	r5, r0
  int month = Time.month();
   d6628:	f004 ff4c 	bl	db4c4 <_ZN9TimeClass5monthEv>
   d662c:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d662e:	f004 ff41 	bl	db4b4 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d6632:	1f23      	subs	r3, r4, #4
   d6634:	2b06      	cmp	r3, #6
   d6636:	d90e      	bls.n	d6656 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d6638:	1ee3      	subs	r3, r4, #3
   d663a:	2b08      	cmp	r3, #8
   d663c:	d80d      	bhi.n	d665a <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d663e:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d6640:	1a2d      	subs	r5, r5, r0
   d6642:	d504      	bpl.n	d664e <_Z8isDSTusav+0x2e>
   d6644:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6646:	bf14      	ite	ne
   d6648:	2000      	movne	r0, #0
   d664a:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d664c:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d664e:	2d07      	cmp	r5, #7
   d6650:	dd03      	ble.n	d665a <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d6652:	2c03      	cmp	r4, #3
   d6654:	e7f7      	b.n	d6646 <_Z8isDSTusav+0x26>
    return true;
   d6656:	2001      	movs	r0, #1
   d6658:	e7f8      	b.n	d664c <_Z8isDSTusav+0x2c>
    return false;
   d665a:	2000      	movs	r0, #0
   d665c:	e7f6      	b.n	d664c <_Z8isDSTusav+0x2c>
	...

000d6660 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d6660:	b570      	push	{r4, r5, r6, lr}
   d6662:	ed2d 8b02 	vpush	{d8}
   d6666:	b0c8      	sub	sp, #288	; 0x120
   d6668:	4605      	mov	r5, r0
  time_t t = Time.now();
   d666a:	f004 feee 	bl	db44a <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d666e:	220a      	movs	r2, #10
  time_t t = Time.now();
   d6670:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d6672:	a903      	add	r1, sp, #12
   d6674:	6828      	ldr	r0, [r5, #0]
   d6676:	f006 fabb 	bl	dcbf0 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d667a:	b2c3      	uxtb	r3, r0
   d667c:	2b02      	cmp	r3, #2
   d667e:	d859      	bhi.n	d6734 <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d6680:	b243      	sxtb	r3, r0
   d6682:	ee08 3a10 	vmov	s16, r3
   d6686:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d668a:	eeb0 0a48 	vmov.f32	s0, s16
   d668e:	f004 fd93 	bl	db1b8 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d6692:	4b2d      	ldr	r3, [pc, #180]	; (d6748 <_Z12setDSTOffset6String+0xe8>)
   d6694:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d6698:	4b2c      	ldr	r3, [pc, #176]	; (d674c <_Z12setDSTOffset6String+0xec>)
   d669a:	2201      	movs	r2, #1
   d669c:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d669e:	ee18 0a10 	vmov	r0, s16
   d66a2:	f005 fbad 	bl	dbe00 <__aeabi_f2d>
   d66a6:	4a2a      	ldr	r2, [pc, #168]	; (d6750 <_Z12setDSTOffset6String+0xf0>)
   d66a8:	e9cd 0100 	strd	r0, r1, [sp]
   d66ac:	f44f 7180 	mov.w	r1, #256	; 0x100
   d66b0:	a808      	add	r0, sp, #32
   d66b2:	f001 ff49 	bl	d8548 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d66b6:	f004 feab 	bl	db410 <_ZN9TimeClass7isValidEv>
   d66ba:	b128      	cbz	r0, d66c8 <_Z12setDSTOffset6String+0x68>
   d66bc:	f7ff ffb0 	bl	d6620 <_Z8isDSTusav>
   d66c0:	2800      	cmp	r0, #0
   d66c2:	d034      	beq.n	d672e <_Z12setDSTOffset6String+0xce>
   d66c4:	f004 fd96 	bl	db1f4 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d66c8:	f004 ff04 	bl	db4d4 <_ZN9TimeClass5localEv>
   d66cc:	4605      	mov	r5, r0
   d66ce:	f004 febc 	bl	db44a <_ZN9TimeClass3nowEv>
   d66d2:	1a28      	subs	r0, r5, r0
   d66d4:	f005 fb82 	bl	dbddc <__aeabi_i2d>
   d66d8:	a319      	add	r3, pc, #100	; (adr r3, d6740 <_Z12setDSTOffset6String+0xe0>)
   d66da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d66de:	f005 fd11 	bl	dc104 <__aeabi_ddiv>
   d66e2:	4a1c      	ldr	r2, [pc, #112]	; (d6754 <_Z12setDSTOffset6String+0xf4>)
   d66e4:	e9cd 0100 	strd	r0, r1, [sp]
   d66e8:	210a      	movs	r1, #10
   d66ea:	481b      	ldr	r0, [pc, #108]	; (d6758 <_Z12setDSTOffset6String+0xf8>)
   d66ec:	f001 ff2c 	bl	d8548 <snprintf>
   d66f0:	f001 fe5a 	bl	d83a8 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d66f4:	b1c8      	cbz	r0, d672a <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d66f6:	4d19      	ldr	r5, [pc, #100]	; (d675c <_Z12setDSTOffset6String+0xfc>)
   d66f8:	4919      	ldr	r1, [pc, #100]	; (d6760 <_Z12setDSTOffset6String+0x100>)
   d66fa:	481a      	ldr	r0, [pc, #104]	; (d6764 <_Z12setDSTOffset6String+0x104>)
   d66fc:	2600      	movs	r6, #0
   d66fe:	f88d 6000 	strb.w	r6, [sp]
   d6702:	782b      	ldrb	r3, [r5, #0]
   d6704:	aa08      	add	r2, sp, #32
   d6706:	f7fd fede 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d670a:	4622      	mov	r2, r4
   d670c:	17e3      	asrs	r3, r4, #31
   d670e:	a804      	add	r0, sp, #16
   d6710:	f004 fd98 	bl	db244 <_ZN9TimeClass7timeStrEx>
   d6714:	f88d 6000 	strb.w	r6, [sp]
   d6718:	782b      	ldrb	r3, [r5, #0]
   d671a:	9a04      	ldr	r2, [sp, #16]
   d671c:	4910      	ldr	r1, [pc, #64]	; (d6760 <_Z12setDSTOffset6String+0x100>)
   d671e:	4811      	ldr	r0, [pc, #68]	; (d6764 <_Z12setDSTOffset6String+0x104>)
   d6720:	f7fd fed1 	bl	d44c6 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d6724:	a804      	add	r0, sp, #16
   d6726:	f004 fa55 	bl	dabd4 <_ZN6StringD1Ev>
  return 1;
   d672a:	2001      	movs	r0, #1
   d672c:	e003      	b.n	d6736 <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d672e:	f004 fd6d 	bl	db20c <_ZN9TimeClass6endDSTEv>
   d6732:	e7c9      	b.n	d66c8 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d6734:	2000      	movs	r0, #0
}
   d6736:	b048      	add	sp, #288	; 0x120
   d6738:	ecbd 8b02 	vpop	{d8}
   d673c:	bd70      	pop	{r4, r5, r6, pc}
   d673e:	bf00      	nop
   d6740:	00000000 	.word	0x00000000
   d6744:	40ac2000 	.word	0x40ac2000
   d6748:	2003e4c0 	.word	0x2003e4c0
   d674c:	2003e4ec 	.word	0x2003e4ec
   d6750:	000dd2a0 	.word	0x000dd2a0
   d6754:	000dd108 	.word	0x000dd108
   d6758:	2003e3fd 	.word	0x2003e3fd
   d675c:	2003e4f4 	.word	0x2003e4f4
   d6760:	000dd043 	.word	0x000dd043
   d6764:	2003e468 	.word	0x2003e468

000d6768 <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d6768:	4b01      	ldr	r3, [pc, #4]	; (d6770 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d676a:	2201      	movs	r2, #1
   d676c:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d676e:	4770      	bx	lr
   d6770:	2003e4f4 	.word	0x2003e4f4

000d6774 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d6774:	4770      	bx	lr

000d6776 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d6776:	b510      	push	{r4, lr}
}
   d6778:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d677a:	4604      	mov	r4, r0
}
   d677c:	f005 f9d3 	bl	dbb26 <_ZdlPvj>
   d6780:	4620      	mov	r0, r4
   d6782:	bd10      	pop	{r4, pc}

000d6784 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d6784:	b40e      	push	{r1, r2, r3}
   d6786:	b510      	push	{r4, lr}
   d6788:	b08d      	sub	sp, #52	; 0x34
   d678a:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d678c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d678e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d6792:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d6794:	2300      	movs	r3, #0
   d6796:	2020      	movs	r0, #32
   d6798:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d679c:	e9cd 4200 	strd	r4, r2, [sp]
   d67a0:	2001      	movs	r0, #1
   d67a2:	aa04      	add	r2, sp, #16
   d67a4:	f001 fd3c 	bl	d8220 <log_message_v>
}
   d67a8:	b00d      	add	sp, #52	; 0x34
   d67aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d67ae:	b003      	add	sp, #12
   d67b0:	4770      	bx	lr

000d67b2 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d67b2:	b40e      	push	{r1, r2, r3}
   d67b4:	b510      	push	{r4, lr}
   d67b6:	b08d      	sub	sp, #52	; 0x34
   d67b8:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d67ba:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d67bc:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d67c0:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d67c2:	2300      	movs	r3, #0
   d67c4:	2020      	movs	r0, #32
   d67c6:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d67ca:	e9cd 4200 	strd	r4, r2, [sp]
   d67ce:	2032      	movs	r0, #50	; 0x32
   d67d0:	aa04      	add	r2, sp, #16
   d67d2:	f001 fd25 	bl	d8220 <log_message_v>
}
   d67d6:	b00d      	add	sp, #52	; 0x34
   d67d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d67dc:	b003      	add	sp, #12
   d67de:	4770      	bx	lr

000d67e0 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d67e0:	b510      	push	{r4, lr}
   d67e2:	7202      	strb	r2, [r0, #8]
   d67e4:	22ff      	movs	r2, #255	; 0xff
   d67e6:	8142      	strh	r2, [r0, #10]
   d67e8:	2200      	movs	r2, #0
   d67ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d67ee:	6142      	str	r2, [r0, #20]
   d67f0:	7602      	strb	r2, [r0, #24]
   d67f2:	61c2      	str	r2, [r0, #28]
    instance = this;
   d67f4:	4a02      	ldr	r2, [pc, #8]	; (d6800 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d67f6:	4c03      	ldr	r4, [pc, #12]	; (d6804 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d67f8:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d67fa:	e9c0 4100 	strd	r4, r1, [r0]
}
   d67fe:	bd10      	pop	{r4, pc}
   d6800:	2003e4fc 	.word	0x2003e4fc
   d6804:	000dd500 	.word	0x000dd500

000d6808 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d6808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d680c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d6810:	4604      	mov	r4, r0
   d6812:	4689      	mov	r9, r1
   d6814:	4616      	mov	r6, r2
   d6816:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d6818:	f1b8 0f00 	cmp.w	r8, #0
   d681c:	d002      	beq.n	d6824 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d681e:	6840      	ldr	r0, [r0, #4]
   d6820:	f002 fcfe 	bl	d9220 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6824:	7a21      	ldrb	r1, [r4, #8]
   d6826:	6860      	ldr	r0, [r4, #4]
   d6828:	f002 fcd4 	bl	d91d4 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d682c:	6860      	ldr	r0, [r4, #4]
   d682e:	6803      	ldr	r3, [r0, #0]
   d6830:	4649      	mov	r1, r9
   d6832:	689b      	ldr	r3, [r3, #8]
   d6834:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d6836:	6860      	ldr	r0, [r4, #4]
   d6838:	2100      	movs	r1, #0
   d683a:	f002 fcea 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d683e:	4605      	mov	r5, r0
   d6840:	bb00      	cbnz	r0, d6884 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6842:	2301      	movs	r3, #1
   d6844:	7a21      	ldrb	r1, [r4, #8]
   d6846:	6860      	ldr	r0, [r4, #4]
   d6848:	463a      	mov	r2, r7
   d684a:	f002 fcae 	bl	d91aa <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d684e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d6850:	4603      	mov	r3, r0
        if (count == num) {
   d6852:	d109      	bne.n	d6868 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d6854:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d6856:	42be      	cmp	r6, r7
   d6858:	d01c      	beq.n	d6894 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d685a:	6860      	ldr	r0, [r4, #4]
   d685c:	6803      	ldr	r3, [r0, #0]
   d685e:	695b      	ldr	r3, [r3, #20]
   d6860:	4798      	blx	r3
   d6862:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d6866:	e7f6      	b.n	d6856 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d6868:	490b      	ldr	r1, [pc, #44]	; (d6898 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d686a:	480c      	ldr	r0, [pc, #48]	; (d689c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d686c:	464a      	mov	r2, r9
   d686e:	f7ff ffa0 	bl	d67b2 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d6872:	f1b8 0f00 	cmp.w	r8, #0
   d6876:	d002      	beq.n	d687e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d6878:	6860      	ldr	r0, [r4, #4]
   d687a:	f002 fcda 	bl	d9232 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d687e:	4628      	mov	r0, r5
   d6880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d6884:	4603      	mov	r3, r0
   d6886:	4906      	ldr	r1, [pc, #24]	; (d68a0 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d6888:	4804      	ldr	r0, [pc, #16]	; (d689c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d688a:	464a      	mov	r2, r9
   d688c:	f7ff ff91 	bl	d67b2 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d6890:	2500      	movs	r5, #0
   d6892:	e7ee      	b.n	d6872 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d6894:	2501      	movs	r5, #1
   d6896:	e7ec      	b.n	d6872 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d6898:	000dd2b1 	.word	0x000dd2b1
   d689c:	2003e4f8 	.word	0x2003e4f8
   d68a0:	000dd2d6 	.word	0x000dd2d6

000d68a4 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d68a4:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d68a6:	9300      	str	r3, [sp, #0]
   d68a8:	2301      	movs	r3, #1
   d68aa:	f7ff ffad 	bl	d6808 <_ZN6AB180513readRegistersEhPhjb>
}
   d68ae:	b003      	add	sp, #12
   d68b0:	f85d fb04 	ldr.w	pc, [sp], #4

000d68b4 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d68b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d68b6:	8943      	ldrh	r3, [r0, #10]
   d68b8:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d68ba:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d68bc:	d010      	beq.n	d68e0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d68be:	4e19      	ldr	r6, [pc, #100]	; (d6924 <_ZN6AB180510detectChipEv+0x70>)
   d68c0:	4d19      	ldr	r5, [pc, #100]	; (d6928 <_ZN6AB180510detectChipEv+0x74>)
   d68c2:	f001 fb0d 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d68c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d68ca:	d209      	bcs.n	d68e0 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d68cc:	8960      	ldrh	r0, [r4, #10]
   d68ce:	f005 f87b 	bl	db9c8 <digitalRead>
   d68d2:	2801      	cmp	r0, #1
   d68d4:	d004      	beq.n	d68e0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d68d6:	4631      	mov	r1, r6
   d68d8:	4628      	mov	r0, r5
   d68da:	f7fd fddd 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
   d68de:	e7f0      	b.n	d68c2 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d68e0:	2301      	movs	r3, #1
   d68e2:	f10d 0207 	add.w	r2, sp, #7
   d68e6:	2128      	movs	r1, #40	; 0x28
   d68e8:	4620      	mov	r0, r4
   d68ea:	f7ff ffdb 	bl	d68a4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d68ee:	b930      	cbnz	r0, d68fe <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d68f0:	480d      	ldr	r0, [pc, #52]	; (d6928 <_ZN6AB180510detectChipEv+0x74>)
   d68f2:	490e      	ldr	r1, [pc, #56]	; (d692c <_ZN6AB180510detectChipEv+0x78>)
   d68f4:	f7fd fdd0 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
   d68f8:	2000      	movs	r0, #0
}
   d68fa:	b002      	add	sp, #8
   d68fc:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d68fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6902:	2b18      	cmp	r3, #24
   d6904:	d1f4      	bne.n	d68f0 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d6906:	2301      	movs	r3, #1
   d6908:	f10d 0207 	add.w	r2, sp, #7
   d690c:	2129      	movs	r1, #41	; 0x29
   d690e:	4620      	mov	r0, r4
   d6910:	f7ff ffc8 	bl	d68a4 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d6914:	2800      	cmp	r0, #0
   d6916:	d0eb      	beq.n	d68f0 <_ZN6AB180510detectChipEv+0x3c>
   d6918:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d691c:	2b05      	cmp	r3, #5
   d691e:	d1e7      	bne.n	d68f0 <_ZN6AB180510detectChipEv+0x3c>
   d6920:	e7eb      	b.n	d68fa <_ZN6AB180510detectChipEv+0x46>
   d6922:	bf00      	nop
   d6924:	000dd2fa 	.word	0x000dd2fa
   d6928:	2003e4f8 	.word	0x2003e4f8
   d692c:	000dd30f 	.word	0x000dd30f

000d6930 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d6930:	b507      	push	{r0, r1, r2, lr}
   d6932:	4613      	mov	r3, r2
    uint8_t value = 0;
   d6934:	2200      	movs	r2, #0
   d6936:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d693a:	f10d 0207 	add.w	r2, sp, #7
   d693e:	f7ff ffb1 	bl	d68a4 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d6942:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6946:	b003      	add	sp, #12
   d6948:	f85d fb04 	ldr.w	pc, [sp], #4

000d694c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d694c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6950:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d6954:	4604      	mov	r4, r0
   d6956:	460f      	mov	r7, r1
   d6958:	4615      	mov	r5, r2
   d695a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d695c:	f1b8 0f00 	cmp.w	r8, #0
   d6960:	d002      	beq.n	d6968 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d6962:	6840      	ldr	r0, [r0, #4]
   d6964:	f002 fc5c 	bl	d9220 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6968:	7a21      	ldrb	r1, [r4, #8]
   d696a:	6860      	ldr	r0, [r4, #4]
   d696c:	f002 fc32 	bl	d91d4 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d6970:	6860      	ldr	r0, [r4, #4]
   d6972:	6803      	ldr	r3, [r0, #0]
   d6974:	4639      	mov	r1, r7
   d6976:	689b      	ldr	r3, [r3, #8]
   d6978:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d697a:	442e      	add	r6, r5
   d697c:	42b5      	cmp	r5, r6
   d697e:	6860      	ldr	r0, [r4, #4]
   d6980:	d005      	beq.n	d698e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d6982:	6803      	ldr	r3, [r0, #0]
   d6984:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6988:	689b      	ldr	r3, [r3, #8]
   d698a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d698c:	e7f6      	b.n	d697c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d698e:	2101      	movs	r1, #1
   d6990:	f002 fc3f 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6994:	4603      	mov	r3, r0
   d6996:	b170      	cbz	r0, d69b6 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d6998:	4908      	ldr	r1, [pc, #32]	; (d69bc <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d699a:	4809      	ldr	r0, [pc, #36]	; (d69c0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d699c:	463a      	mov	r2, r7
   d699e:	f7ff ff08 	bl	d67b2 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d69a2:	2500      	movs	r5, #0
    }

    if (lock) {
   d69a4:	f1b8 0f00 	cmp.w	r8, #0
   d69a8:	d002      	beq.n	d69b0 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d69aa:	6860      	ldr	r0, [r4, #4]
   d69ac:	f002 fc41 	bl	d9232 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d69b0:	4628      	mov	r0, r5
   d69b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d69b6:	2501      	movs	r5, #1
   d69b8:	e7f4      	b.n	d69a4 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d69ba:	bf00      	nop
   d69bc:	000dd31c 	.word	0x000dd31c
   d69c0:	2003e4f8 	.word	0x2003e4f8

000d69c4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d69c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d69c6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d69ca:	9300      	str	r3, [sp, #0]
   d69cc:	f10d 020f 	add.w	r2, sp, #15
   d69d0:	2301      	movs	r3, #1
   d69d2:	f7ff ffbb 	bl	d694c <_ZN6AB180514writeRegistersEhPKhjb>
}
   d69d6:	b005      	add	sp, #20
   d69d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d69dc <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d69dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d69de:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d69e0:	460c      	mov	r4, r1
   d69e2:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d69e4:	491a      	ldr	r1, [pc, #104]	; (d6a50 <_ZN6AB18056setWDTEi+0x74>)
   d69e6:	481b      	ldr	r0, [pc, #108]	; (d6a54 <_ZN6AB18056setWDTEi+0x78>)
   d69e8:	f7fd fd56 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d69ec:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d69ee:	bfb8      	it	lt
   d69f0:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d69f2:	b97c      	cbnz	r4, d6a14 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d69f4:	2301      	movs	r3, #1
   d69f6:	4622      	mov	r2, r4
   d69f8:	211b      	movs	r1, #27
   d69fa:	4628      	mov	r0, r5
   d69fc:	f7ff ffe2 	bl	d69c4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6a00:	4915      	ldr	r1, [pc, #84]	; (d6a58 <_ZN6AB18056setWDTEi+0x7c>)
   d6a02:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d6a04:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d6a06:	4813      	ldr	r0, [pc, #76]	; (d6a54 <_ZN6AB18056setWDTEi+0x78>)
   d6a08:	f7ff febc 	bl	d6784 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d6a0c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d6a0e:	616c      	str	r4, [r5, #20]
}
   d6a10:	4630      	mov	r0, r6
   d6a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d6a14:	2c03      	cmp	r4, #3
   d6a16:	dd19      	ble.n	d6a4c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d6a18:	10a7      	asrs	r7, r4, #2
   d6a1a:	2f1f      	cmp	r7, #31
   d6a1c:	bfa8      	it	ge
   d6a1e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6a20:	00ba      	lsls	r2, r7, #2
   d6a22:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d6a26:	2301      	movs	r3, #1
   d6a28:	b2d2      	uxtb	r2, r2
   d6a2a:	211b      	movs	r1, #27
   d6a2c:	4628      	mov	r0, r5
   d6a2e:	f7ff ffc9 	bl	d69c4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d6a32:	463a      	mov	r2, r7
   d6a34:	4603      	mov	r3, r0
   d6a36:	4909      	ldr	r1, [pc, #36]	; (d6a5c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6a38:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d6a3a:	4806      	ldr	r0, [pc, #24]	; (d6a54 <_ZN6AB18056setWDTEi+0x78>)
   d6a3c:	f7ff fea2 	bl	d6784 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6a40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d6a44:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d6a46:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6a48:	616f      	str	r7, [r5, #20]
   d6a4a:	e7e1      	b.n	d6a10 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d6a4c:	2701      	movs	r7, #1
   d6a4e:	e7e7      	b.n	d6a20 <_ZN6AB18056setWDTEi+0x44>
   d6a50:	000dd341 	.word	0x000dd341
   d6a54:	2003e4f8 	.word	0x2003e4f8
   d6a58:	000dd34b 	.word	0x000dd34b
   d6a5c:	000dd367 	.word	0x000dd367

000d6a60 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6a60:	460b      	mov	r3, r1
    if (instance) {
   d6a62:	4907      	ldr	r1, [pc, #28]	; (d6a80 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6a64:	4602      	mov	r2, r0
    if (instance) {
   d6a66:	6808      	ldr	r0, [r1, #0]
   d6a68:	b148      	cbz	r0, d6a7e <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d6a6a:	2b00      	cmp	r3, #0
   d6a6c:	bf08      	it	eq
   d6a6e:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d6a72:	d104      	bne.n	d6a7e <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d6a74:	68c3      	ldr	r3, [r0, #12]
   d6a76:	b113      	cbz	r3, d6a7e <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d6a78:	2100      	movs	r1, #0
   d6a7a:	f7ff bfaf 	b.w	d69dc <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d6a7e:	4770      	bx	lr
   d6a80:	2003e4fc 	.word	0x2003e4fc

000d6a84 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d6a84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6a88:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d6a8c:	4605      	mov	r5, r0
   d6a8e:	4616      	mov	r6, r2
   d6a90:	461f      	mov	r7, r3
    if (lock) {
   d6a92:	f1b8 0f00 	cmp.w	r8, #0
   d6a96:	d004      	beq.n	d6aa2 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d6a98:	6840      	ldr	r0, [r0, #4]
   d6a9a:	9101      	str	r1, [sp, #4]
   d6a9c:	f002 fbc0 	bl	d9220 <_ZN7TwoWire4lockEv>
   d6aa0:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d6aa2:	9101      	str	r1, [sp, #4]
   d6aa4:	2300      	movs	r3, #0
   d6aa6:	f10d 020f 	add.w	r2, sp, #15
   d6aaa:	4628      	mov	r0, r5
   d6aac:	f7ff fefa 	bl	d68a4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d6ab0:	4604      	mov	r4, r0
   d6ab2:	b160      	cbz	r0, d6ace <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d6ab4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6ab8:	ea03 0206 	and.w	r2, r3, r6
   d6abc:	433a      	orrs	r2, r7
        if (newValue != value) {
   d6abe:	4293      	cmp	r3, r2
   d6ac0:	d005      	beq.n	d6ace <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d6ac2:	9901      	ldr	r1, [sp, #4]
   d6ac4:	2300      	movs	r3, #0
   d6ac6:	4628      	mov	r0, r5
   d6ac8:	f7ff ff7c 	bl	d69c4 <_ZN6AB180513writeRegisterEhhb>
   d6acc:	4604      	mov	r4, r0
    if (lock) {
   d6ace:	f1b8 0f00 	cmp.w	r8, #0
   d6ad2:	d002      	beq.n	d6ada <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d6ad4:	6868      	ldr	r0, [r5, #4]
   d6ad6:	f002 fbac 	bl	d9232 <_ZN7TwoWire6unlockEv>
}
   d6ada:	4620      	mov	r0, r4
   d6adc:	b004      	add	sp, #16
   d6ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ae2 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6ae2:	b513      	push	{r0, r1, r4, lr}
   d6ae4:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6ae6:	f10d 0207 	add.w	r2, sp, #7
   d6aea:	f7ff fedb 	bl	d68a4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d6aee:	b128      	cbz	r0, d6afc <_ZN6AB180510isBitClearEhhb+0x1a>
   d6af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6af4:	421c      	tst	r4, r3
   d6af6:	bf0c      	ite	eq
   d6af8:	2001      	moveq	r0, #1
   d6afa:	2000      	movne	r0, #0
}
   d6afc:	b002      	add	sp, #8
   d6afe:	bd10      	pop	{r4, pc}

000d6b00 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6b00:	b513      	push	{r0, r1, r4, lr}
   d6b02:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d6b04:	f10d 0207 	add.w	r2, sp, #7
   d6b08:	f7ff fecc 	bl	d68a4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d6b0c:	b128      	cbz	r0, d6b1a <_ZN6AB18058isBitSetEhhb+0x1a>
   d6b0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6b12:	421c      	tst	r4, r3
   d6b14:	bf14      	ite	ne
   d6b16:	2001      	movne	r0, #1
   d6b18:	2000      	moveq	r0, #0
}
   d6b1a:	b002      	add	sp, #8
   d6b1c:	bd10      	pop	{r4, pc}

000d6b1e <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6b1e:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d6b20:	43d2      	mvns	r2, r2
   d6b22:	9300      	str	r3, [sp, #0]
   d6b24:	b2d2      	uxtb	r2, r2
   d6b26:	2300      	movs	r3, #0
   d6b28:	f7ff ffac 	bl	d6a84 <_ZN6AB180512maskRegisterEhhhb>
}
   d6b2c:	b003      	add	sp, #12
   d6b2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b34 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d6b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d6b36:	2301      	movs	r3, #1
   d6b38:	f10d 0207 	add.w	r2, sp, #7
   d6b3c:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d6b3e:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d6b40:	f7ff feb0 	bl	d68a4 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d6b44:	4605      	mov	r5, r0
   d6b46:	b938      	cbnz	r0, d6b58 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d6b48:	491e      	ldr	r1, [pc, #120]	; (d6bc4 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d6b4a:	481f      	ldr	r0, [pc, #124]	; (d6bc8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6b4c:	22ad      	movs	r2, #173	; 0xad
   d6b4e:	f7ff fe30 	bl	d67b2 <_ZNK5spark6Logger5errorEPKcz>
}
   d6b52:	4628      	mov	r0, r5
   d6b54:	b003      	add	sp, #12
   d6b56:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d6b58:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6b5c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d6b60:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d6b64:	d00b      	beq.n	d6b7e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6b66:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d6b68:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6b6a:	210f      	movs	r1, #15
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	f7ff ffd6 	bl	d6b1e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d6b72:	4a16      	ldr	r2, [pc, #88]	; (d6bcc <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d6b74:	4916      	ldr	r1, [pc, #88]	; (d6bd0 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d6b76:	4814      	ldr	r0, [pc, #80]	; (d6bc8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6b78:	f7fd fc8e 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
   d6b7c:	e7e9      	b.n	d6b52 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d6b7e:	2208      	movs	r2, #8
   d6b80:	2117      	movs	r1, #23
   d6b82:	4620      	mov	r0, r4
   d6b84:	f7ff ffbc 	bl	d6b00 <_ZN6AB18058isBitSetEhhb>
   d6b88:	b118      	cbz	r0, d6b92 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6b8a:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d6b8c:	4a11      	ldr	r2, [pc, #68]	; (d6bd4 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6b8e:	61e3      	str	r3, [r4, #28]
   d6b90:	e7f0      	b.n	d6b74 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d6b92:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6b96:	071a      	lsls	r2, r3, #28
   d6b98:	d509      	bpl.n	d6bae <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d6b9a:	2303      	movs	r3, #3
   d6b9c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d6b9e:	2208      	movs	r2, #8
   d6ba0:	2301      	movs	r3, #1
   d6ba2:	210f      	movs	r1, #15
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	f7ff ffba 	bl	d6b1e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d6baa:	4a0b      	ldr	r2, [pc, #44]	; (d6bd8 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d6bac:	e7e2      	b.n	d6b74 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d6bae:	075b      	lsls	r3, r3, #29
   d6bb0:	d5cf      	bpl.n	d6b52 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d6bb2:	2204      	movs	r2, #4
   d6bb4:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d6bb6:	2301      	movs	r3, #1
   d6bb8:	210f      	movs	r1, #15
   d6bba:	4620      	mov	r0, r4
   d6bbc:	f7ff ffaf 	bl	d6b1e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d6bc0:	4a06      	ldr	r2, [pc, #24]	; (d6bdc <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d6bc2:	e7d7      	b.n	d6b74 <_ZN6AB180516updateWakeReasonEv+0x40>
   d6bc4:	000dd3ba 	.word	0x000dd3ba
   d6bc8:	2003e4f8 	.word	0x2003e4f8
   d6bcc:	000dd38b 	.word	0x000dd38b
   d6bd0:	000dd3d9 	.word	0x000dd3d9
   d6bd4:	000dd394 	.word	0x000dd394
   d6bd8:	000dd3a4 	.word	0x000dd3a4
   d6bdc:	000dd3b4 	.word	0x000dd3b4

000d6be0 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6be0:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d6be2:	9300      	str	r3, [sp, #0]
   d6be4:	4613      	mov	r3, r2
   d6be6:	22ff      	movs	r2, #255	; 0xff
   d6be8:	f7ff ff4c 	bl	d6a84 <_ZN6AB180512maskRegisterEhhhb>
}
   d6bec:	b003      	add	sp, #12
   d6bee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6bf4 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bf6:	460f      	mov	r7, r1
   d6bf8:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6bfa:	2301      	movs	r3, #1
   d6bfc:	2200      	movs	r2, #0
   d6bfe:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6c00:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6c02:	f7ff fedf 	bl	d69c4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6c06:	4604      	mov	r4, r0
   d6c08:	b938      	cbnz	r0, d6c1a <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d6c0a:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d6c0e:	491e      	ldr	r1, [pc, #120]	; (d6c88 <_ZN6AB180517setCountdownTimerEib+0x94>)
   d6c10:	481e      	ldr	r0, [pc, #120]	; (d6c8c <_ZN6AB180517setCountdownTimerEib+0x98>)
   d6c12:	f7ff fdce 	bl	d67b2 <_ZNK5spark6Logger5errorEPKcz>
}
   d6c16:	4620      	mov	r0, r4
   d6c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d6c1a:	2301      	movs	r3, #1
   d6c1c:	2223      	movs	r2, #35	; 0x23
   d6c1e:	2118      	movs	r1, #24
   d6c20:	4628      	mov	r0, r5
   d6c22:	f7ff fecf 	bl	d69c4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6c26:	4604      	mov	r4, r0
   d6c28:	b910      	cbnz	r0, d6c30 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d6c2a:	f240 229b 	movw	r2, #667	; 0x29b
   d6c2e:	e7ee      	b.n	d6c0e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d6c30:	2fff      	cmp	r7, #255	; 0xff
   d6c32:	bfa8      	it	ge
   d6c34:	27ff      	movge	r7, #255	; 0xff
   d6c36:	2f01      	cmp	r7, #1
   d6c38:	bfb8      	it	lt
   d6c3a:	2701      	movlt	r7, #1
   d6c3c:	2301      	movs	r3, #1
   d6c3e:	b2fa      	uxtb	r2, r7
   d6c40:	2119      	movs	r1, #25
   d6c42:	4628      	mov	r0, r5
   d6c44:	f7ff febe 	bl	d69c4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6c48:	4604      	mov	r4, r0
   d6c4a:	b910      	cbnz	r0, d6c52 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d6c4c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d6c50:	e7dd      	b.n	d6c0e <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d6c52:	2301      	movs	r3, #1
   d6c54:	2208      	movs	r2, #8
   d6c56:	2112      	movs	r1, #18
   d6c58:	4628      	mov	r0, r5
   d6c5a:	f7ff ffc1 	bl	d6be0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6c5e:	4604      	mov	r4, r0
   d6c60:	b910      	cbnz	r0, d6c68 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d6c62:	f240 22af 	movw	r2, #687	; 0x2af
   d6c66:	e7d2      	b.n	d6c0e <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d6c68:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d6c6a:	f04f 0301 	mov.w	r3, #1
   d6c6e:	bf14      	ite	ne
   d6c70:	2283      	movne	r2, #131	; 0x83
   d6c72:	2282      	moveq	r2, #130	; 0x82
   d6c74:	2118      	movs	r1, #24
   d6c76:	4628      	mov	r0, r5
   d6c78:	f7ff fea4 	bl	d69c4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6c7c:	4604      	mov	r4, r0
   d6c7e:	2800      	cmp	r0, #0
   d6c80:	d1c9      	bne.n	d6c16 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d6c82:	f240 22b9 	movw	r2, #697	; 0x2b9
   d6c86:	e7c2      	b.n	d6c0e <_ZN6AB180517setCountdownTimerEib+0x1a>
   d6c88:	000dd3ea 	.word	0x000dd3ea
   d6c8c:	2003e4f8 	.word	0x2003e4f8

000d6c90 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d6c90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d6c94:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d6c96:	4605      	mov	r5, r0
   d6c98:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d6c9a:	484f      	ldr	r0, [pc, #316]	; (d6dd8 <_ZN6AB180513deepPowerDownEi+0x148>)
   d6c9c:	494f      	ldr	r1, [pc, #316]	; (d6ddc <_ZN6AB180513deepPowerDownEi+0x14c>)
   d6c9e:	f7fd fbfb 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d6ca2:	2100      	movs	r1, #0
   d6ca4:	4628      	mov	r0, r5
   d6ca6:	f7ff fe99 	bl	d69dc <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d6caa:	4604      	mov	r4, r0
   d6cac:	b948      	cbnz	r0, d6cc2 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d6cae:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d6cb2:	494b      	ldr	r1, [pc, #300]	; (d6de0 <_ZN6AB180513deepPowerDownEi+0x150>)
   d6cb4:	4848      	ldr	r0, [pc, #288]	; (d6dd8 <_ZN6AB180513deepPowerDownEi+0x148>)
   d6cb6:	f7ff fd7c 	bl	d67b2 <_ZNK5spark6Logger5errorEPKcz>
}
   d6cba:	4620      	mov	r0, r4
   d6cbc:	b003      	add	sp, #12
   d6cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d6cc2:	2301      	movs	r3, #1
   d6cc4:	461a      	mov	r2, r3
   d6cc6:	2130      	movs	r1, #48	; 0x30
   d6cc8:	4628      	mov	r0, r5
   d6cca:	f7ff ff89 	bl	d6be0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6cce:	4604      	mov	r4, r0
   d6cd0:	b910      	cbnz	r0, d6cd8 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d6cd2:	f240 2205 	movw	r2, #517	; 0x205
   d6cd6:	e7ec      	b.n	d6cb2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d6cd8:	2210      	movs	r2, #16
   d6cda:	2301      	movs	r3, #1
   d6cdc:	4611      	mov	r1, r2
   d6cde:	4628      	mov	r0, r5
   d6ce0:	f7ff ff1d 	bl	d6b1e <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d6ce4:	4604      	mov	r4, r0
   d6ce6:	b910      	cbnz	r0, d6cee <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d6ce8:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d6cec:	e7e1      	b.n	d6cb2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d6cee:	2301      	movs	r3, #1
   d6cf0:	2226      	movs	r2, #38	; 0x26
   d6cf2:	2113      	movs	r1, #19
   d6cf4:	4628      	mov	r0, r5
   d6cf6:	f7ff fe65 	bl	d69c4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6cfa:	4604      	mov	r4, r0
   d6cfc:	b910      	cbnz	r0, d6d04 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d6cfe:	f240 2213 	movw	r2, #531	; 0x213
   d6d02:	e7d6      	b.n	d6cb2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d6d04:	2601      	movs	r6, #1
   d6d06:	9600      	str	r6, [sp, #0]
   d6d08:	4633      	mov	r3, r6
   d6d0a:	22fc      	movs	r2, #252	; 0xfc
   d6d0c:	2111      	movs	r1, #17
   d6d0e:	4628      	mov	r0, r5
   d6d10:	f7ff feb8 	bl	d6a84 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6d14:	4604      	mov	r4, r0
   d6d16:	b910      	cbnz	r0, d6d1e <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d6d18:	f240 221b 	movw	r2, #539	; 0x21b
   d6d1c:	e7c9      	b.n	d6cb2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d6d1e:	2200      	movs	r2, #0
   d6d20:	4639      	mov	r1, r7
   d6d22:	4628      	mov	r0, r5
   d6d24:	f7ff ff66 	bl	d6bf4 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d6d28:	4604      	mov	r4, r0
   d6d2a:	b910      	cbnz	r0, d6d32 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d6d2c:	f240 2222 	movw	r2, #546	; 0x222
   d6d30:	e7bf      	b.n	d6cb2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d6d32:	9600      	str	r6, [sp, #0]
   d6d34:	2302      	movs	r3, #2
   d6d36:	2277      	movs	r2, #119	; 0x77
   d6d38:	2110      	movs	r1, #16
   d6d3a:	4628      	mov	r0, r5
   d6d3c:	f7ff fea2 	bl	d6a84 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6d40:	4604      	mov	r4, r0
   d6d42:	b910      	cbnz	r0, d6d4a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d6d44:	f240 222b 	movw	r2, #555	; 0x22b
   d6d48:	e7b3      	b.n	d6cb2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d6d4a:	4633      	mov	r3, r6
   d6d4c:	2204      	movs	r2, #4
   d6d4e:	211c      	movs	r1, #28
   d6d50:	4628      	mov	r0, r5
   d6d52:	f7ff ff45 	bl	d6be0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6d56:	4604      	mov	r4, r0
   d6d58:	b910      	cbnz	r0, d6d60 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d6d5a:	f240 2232 	movw	r2, #562	; 0x232
   d6d5e:	e7a8      	b.n	d6cb2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d6d60:	9600      	str	r6, [sp, #0]
   d6d62:	2318      	movs	r3, #24
   d6d64:	22e3      	movs	r2, #227	; 0xe3
   d6d66:	2111      	movs	r1, #17
   d6d68:	4628      	mov	r0, r5
   d6d6a:	f7ff fe8b 	bl	d6a84 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6d6e:	4604      	mov	r4, r0
   d6d70:	b910      	cbnz	r0, d6d78 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d6d72:	f240 2239 	movw	r2, #569	; 0x239
   d6d76:	e79c      	b.n	d6cb2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d6d78:	4633      	mov	r3, r6
   d6d7a:	22c0      	movs	r2, #192	; 0xc0
   d6d7c:	2117      	movs	r1, #23
   d6d7e:	4628      	mov	r0, r5
   d6d80:	f7ff fe20 	bl	d69c4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6d84:	4604      	mov	r4, r0
   d6d86:	b910      	cbnz	r0, d6d8e <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d6d88:	f44f 7210 	mov.w	r2, #576	; 0x240
   d6d8c:	e791      	b.n	d6cb2 <_ZN6AB180513deepPowerDownEi+0x22>
   d6d8e:	f001 f8a7 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6d92:	f8df 9054 	ldr.w	r9, [pc, #84]	; d6de8 <_ZN6AB180513deepPowerDownEi+0x158>
   d6d96:	f8df 8040 	ldr.w	r8, [pc, #64]	; d6dd8 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6d9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6d9e:	4606      	mov	r6, r0
   d6da0:	434f      	muls	r7, r1
   d6da2:	f001 f89d 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
   d6da6:	1b80      	subs	r0, r0, r6
   d6da8:	42b8      	cmp	r0, r7
   d6daa:	d20e      	bcs.n	d6dca <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6dac:	2201      	movs	r2, #1
   d6dae:	2117      	movs	r1, #23
   d6db0:	4628      	mov	r0, r5
   d6db2:	f7ff fdbd 	bl	d6930 <_ZN6AB180512readRegisterEhb>
   d6db6:	4649      	mov	r1, r9
   d6db8:	4602      	mov	r2, r0
   d6dba:	4640      	mov	r0, r8
   d6dbc:	f7fd fb6c 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d6dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6dc4:	f001 fc08 	bl	d85d8 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6dc8:	e7eb      	b.n	d6da2 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d6dca:	4906      	ldr	r1, [pc, #24]	; (d6de4 <_ZN6AB180513deepPowerDownEi+0x154>)
   d6dcc:	4802      	ldr	r0, [pc, #8]	; (d6dd8 <_ZN6AB180513deepPowerDownEi+0x148>)
   d6dce:	f7ff fcf0 	bl	d67b2 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d6dd2:	f004 f8bd 	bl	daf50 <_ZN11SystemClass5resetEv>
    return true;
   d6dd6:	e770      	b.n	d6cba <_ZN6AB180513deepPowerDownEi+0x2a>
   d6dd8:	2003e4f8 	.word	0x2003e4f8
   d6ddc:	000dd415 	.word	0x000dd415
   d6de0:	000dd40a 	.word	0x000dd40a
   d6de4:	000dd43b 	.word	0x000dd43b
   d6de8:	000dd426 	.word	0x000dd426

000d6dec <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d6dec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6df0:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6df4:	4605      	mov	r5, r0
   d6df6:	460c      	mov	r4, r1
   d6df8:	4691      	mov	r9, r2
   d6dfa:	461f      	mov	r7, r3
    if (lock) {
   d6dfc:	f1ba 0f00 	cmp.w	sl, #0
   d6e00:	d002      	beq.n	d6e08 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6e02:	6840      	ldr	r0, [r0, #4]
   d6e04:	f002 fa0c 	bl	d9220 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6e08:	b307      	cbz	r7, d6e4c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d6e0a:	2f20      	cmp	r7, #32
   d6e0c:	463e      	mov	r6, r7
   d6e0e:	bf28      	it	cs
   d6e10:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6e12:	2c7f      	cmp	r4, #127	; 0x7f
   d6e14:	d826      	bhi.n	d6e64 <_ZN6AB18057readRamEjPhjb+0x78>
   d6e16:	1933      	adds	r3, r6, r4
   d6e18:	2b80      	cmp	r3, #128	; 0x80
   d6e1a:	d901      	bls.n	d6e20 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d6e1c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6e20:	2301      	movs	r3, #1
   d6e22:	2204      	movs	r2, #4
   d6e24:	213f      	movs	r1, #63	; 0x3f
   d6e26:	4628      	mov	r0, r5
   d6e28:	f7ff fe79 	bl	d6b1e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6e2c:	2300      	movs	r3, #0
   d6e2e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6e32:	9300      	str	r3, [sp, #0]
   d6e34:	464a      	mov	r2, r9
   d6e36:	4633      	mov	r3, r6
   d6e38:	b2c9      	uxtb	r1, r1
   d6e3a:	4628      	mov	r0, r5
   d6e3c:	f7ff fce4 	bl	d6808 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6e40:	4680      	mov	r8, r0
   d6e42:	b128      	cbz	r0, d6e50 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6e44:	4434      	add	r4, r6
        dataLen -= count;
   d6e46:	1bbf      	subs	r7, r7, r6
        data += count;
   d6e48:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6e4a:	e7dd      	b.n	d6e08 <_ZN6AB18057readRamEjPhjb+0x1c>
   d6e4c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6e50:	f1ba 0f00 	cmp.w	sl, #0
   d6e54:	d002      	beq.n	d6e5c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6e56:	6868      	ldr	r0, [r5, #4]
   d6e58:	f002 f9eb 	bl	d9232 <_ZN7TwoWire6unlockEv>
}
   d6e5c:	4640      	mov	r0, r8
   d6e5e:	b002      	add	sp, #8
   d6e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6e64:	2301      	movs	r3, #1
   d6e66:	2204      	movs	r2, #4
   d6e68:	213f      	movs	r1, #63	; 0x3f
   d6e6a:	4628      	mov	r0, r5
   d6e6c:	f7ff feb8 	bl	d6be0 <_ZN6AB180514setRegisterBitEhhb>
   d6e70:	e7dc      	b.n	d6e2c <_ZN6AB18057readRamEjPhjb+0x40>

000d6e72 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6e72:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6e76:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6e7a:	4605      	mov	r5, r0
   d6e7c:	460c      	mov	r4, r1
   d6e7e:	4691      	mov	r9, r2
   d6e80:	461f      	mov	r7, r3
    if (lock) {
   d6e82:	f1ba 0f00 	cmp.w	sl, #0
   d6e86:	d002      	beq.n	d6e8e <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d6e88:	6840      	ldr	r0, [r0, #4]
   d6e8a:	f002 f9c9 	bl	d9220 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6e8e:	b307      	cbz	r7, d6ed2 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6e90:	2f1f      	cmp	r7, #31
   d6e92:	463e      	mov	r6, r7
   d6e94:	bf28      	it	cs
   d6e96:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6e98:	2c7f      	cmp	r4, #127	; 0x7f
   d6e9a:	d826      	bhi.n	d6eea <_ZN6AB18058writeRamEjPKhjb+0x78>
   d6e9c:	1933      	adds	r3, r6, r4
   d6e9e:	2b80      	cmp	r3, #128	; 0x80
   d6ea0:	d901      	bls.n	d6ea6 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6ea2:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6ea6:	2301      	movs	r3, #1
   d6ea8:	2204      	movs	r2, #4
   d6eaa:	213f      	movs	r1, #63	; 0x3f
   d6eac:	4628      	mov	r0, r5
   d6eae:	f7ff fe36 	bl	d6b1e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6eb2:	2300      	movs	r3, #0
   d6eb4:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6eb8:	9300      	str	r3, [sp, #0]
   d6eba:	464a      	mov	r2, r9
   d6ebc:	4633      	mov	r3, r6
   d6ebe:	b2c9      	uxtb	r1, r1
   d6ec0:	4628      	mov	r0, r5
   d6ec2:	f7ff fd43 	bl	d694c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d6ec6:	4680      	mov	r8, r0
   d6ec8:	b128      	cbz	r0, d6ed6 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d6eca:	4434      	add	r4, r6
        dataLen -= count;
   d6ecc:	1bbf      	subs	r7, r7, r6
        data += count;
   d6ece:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6ed0:	e7dd      	b.n	d6e8e <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d6ed2:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6ed6:	f1ba 0f00 	cmp.w	sl, #0
   d6eda:	d002      	beq.n	d6ee2 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d6edc:	6868      	ldr	r0, [r5, #4]
   d6ede:	f002 f9a8 	bl	d9232 <_ZN7TwoWire6unlockEv>
}
   d6ee2:	4640      	mov	r0, r8
   d6ee4:	b002      	add	sp, #8
   d6ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6eea:	2301      	movs	r3, #1
   d6eec:	2204      	movs	r2, #4
   d6eee:	213f      	movs	r1, #63	; 0x3f
   d6ef0:	4628      	mov	r0, r5
   d6ef2:	f7ff fe75 	bl	d6be0 <_ZN6AB180514setRegisterBitEhhb>
   d6ef6:	e7dc      	b.n	d6eb2 <_ZN6AB18058writeRamEjPKhjb+0x40>

000d6ef8 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d6ef8:	b530      	push	{r4, r5, lr}
   d6efa:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6efc:	680d      	ldr	r5, [r1, #0]
   d6efe:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6f02:	9503      	str	r5, [sp, #12]
   d6f04:	684d      	ldr	r5, [r1, #4]
   d6f06:	9502      	str	r5, [sp, #8]
   d6f08:	688d      	ldr	r5, [r1, #8]
   d6f0a:	9501      	str	r5, [sp, #4]
   d6f0c:	68c9      	ldr	r1, [r1, #12]
   d6f0e:	9100      	str	r1, [sp, #0]
   d6f10:	3301      	adds	r3, #1
   d6f12:	4904      	ldr	r1, [pc, #16]	; (d6f24 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6f14:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d6f18:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6f1a:	f003 ff8b 	bl	dae34 <_ZN6String6formatEPKcz>
}
   d6f1e:	4620      	mov	r0, r4
   d6f20:	b005      	add	sp, #20
   d6f22:	bd30      	pop	{r4, r5, pc}
   d6f24:	000dd44d 	.word	0x000dd44d

000d6f28 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6f28:	1103      	asrs	r3, r0, #4
}
   d6f2a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6f2c:	f000 000f 	and.w	r0, r0, #15
}
   d6f30:	fb02 0003 	mla	r0, r2, r3, r0
   d6f34:	4770      	bx	lr

000d6f36 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6f36:	b538      	push	{r3, r4, r5, lr}
   d6f38:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d6f3a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6f3c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d6f3e:	f7ff fff3 	bl	d6f28 <_ZN6AB180510bcdToValueEh>
   d6f42:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6f44:	7860      	ldrb	r0, [r4, #1]
   d6f46:	f7ff ffef 	bl	d6f28 <_ZN6AB180510bcdToValueEh>
   d6f4a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6f4c:	78a0      	ldrb	r0, [r4, #2]
   d6f4e:	f7ff ffeb 	bl	d6f28 <_ZN6AB180510bcdToValueEh>
   d6f52:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6f54:	78e0      	ldrb	r0, [r4, #3]
   d6f56:	f7ff ffe7 	bl	d6f28 <_ZN6AB180510bcdToValueEh>
   d6f5a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6f5c:	7920      	ldrb	r0, [r4, #4]
   d6f5e:	f7ff ffe3 	bl	d6f28 <_ZN6AB180510bcdToValueEh>
   d6f62:	3801      	subs	r0, #1
   d6f64:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6f66:	b92d      	cbnz	r5, d6f74 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6f68:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d6f6a:	7828      	ldrb	r0, [r5, #0]
   d6f6c:	f7ff ffdc 	bl	d6f28 <_ZN6AB180510bcdToValueEh>
   d6f70:	6188      	str	r0, [r1, #24]
}
   d6f72:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6f74:	7960      	ldrb	r0, [r4, #5]
   d6f76:	f7ff ffd7 	bl	d6f28 <_ZN6AB180510bcdToValueEh>
   d6f7a:	3064      	adds	r0, #100	; 0x64
   d6f7c:	1da5      	adds	r5, r4, #6
   d6f7e:	6148      	str	r0, [r1, #20]
   d6f80:	e7f3      	b.n	d6f6a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6f84 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6f84:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6f86:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6f88:	b088      	sub	sp, #32
   d6f8a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6f8c:	461a      	mov	r2, r3
   d6f8e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6f90:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6f92:	f7ff fda6 	bl	d6ae2 <_ZN6AB180510isBitClearEhhb>
   d6f96:	b1f0      	cbz	r0, d6fd6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6f98:	2308      	movs	r3, #8
   d6f9a:	2601      	movs	r6, #1
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	9600      	str	r6, [sp, #0]
   d6fa0:	eb0d 0203 	add.w	r2, sp, r3
   d6fa4:	2100      	movs	r1, #0
   d6fa6:	f7ff fc2f 	bl	d6808 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d6faa:	4604      	mov	r4, r0
   d6fac:	b198      	cbz	r0, d6fd6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d6fae:	4632      	mov	r2, r6
   d6fb0:	4629      	mov	r1, r5
   d6fb2:	f10d 0009 	add.w	r0, sp, #9
   d6fb6:	f7ff ffbe 	bl	d6f36 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d6fba:	a804      	add	r0, sp, #16
   d6fbc:	f7ff ff9c 	bl	d6ef8 <_ZN6AB180510tmToStringEPK2tm>
   d6fc0:	4808      	ldr	r0, [pc, #32]	; (d6fe4 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d6fc2:	9a04      	ldr	r2, [sp, #16]
   d6fc4:	4908      	ldr	r1, [pc, #32]	; (d6fe8 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d6fc6:	f7fd fa67 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
   d6fca:	a804      	add	r0, sp, #16
   d6fcc:	f003 fe02 	bl	dabd4 <_ZN6StringD1Ev>
}
   d6fd0:	4620      	mov	r0, r4
   d6fd2:	b008      	add	sp, #32
   d6fd4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d6fd6:	2224      	movs	r2, #36	; 0x24
   d6fd8:	2100      	movs	r1, #0
   d6fda:	4628      	mov	r0, r5
   d6fdc:	f005 fcda 	bl	dc994 <memset>
   d6fe0:	2400      	movs	r4, #0
   d6fe2:	e7f5      	b.n	d6fd0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d6fe4:	2003e4f8 	.word	0x2003e4f8
   d6fe8:	000dd46b 	.word	0x000dd46b

000d6fec <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d6fec:	b530      	push	{r4, r5, lr}
   d6fee:	b08b      	sub	sp, #44	; 0x2c
   d6ff0:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6ff2:	a901      	add	r1, sp, #4
   d6ff4:	f7ff ffc6 	bl	d6f84 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d6ff8:	4604      	mov	r4, r0
   d6ffa:	b120      	cbz	r0, d7006 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d6ffc:	a801      	add	r0, sp, #4
   d6ffe:	f001 fae3 	bl	d85c8 <mktime>
   d7002:	e9c5 0100 	strd	r0, r1, [r5]
}
   d7006:	4620      	mov	r0, r4
   d7008:	b00b      	add	sp, #44	; 0x2c
   d700a:	bd30      	pop	{r4, r5, pc}

000d700c <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d700c:	b510      	push	{r4, lr}
   d700e:	4604      	mov	r4, r0
   d7010:	b088      	sub	sp, #32
    if (callBegin) {
   d7012:	b111      	cbz	r1, d701a <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d7014:	6840      	ldr	r0, [r0, #4]
   d7016:	f002 f8ab 	bl	d9170 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d701a:	4620      	mov	r0, r4
   d701c:	f7ff fc4a 	bl	d68b4 <_ZN6AB180510detectChipEv>
   d7020:	b370      	cbz	r0, d7080 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d7022:	4620      	mov	r0, r4
   d7024:	f7ff fd86 	bl	d6b34 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d7028:	2301      	movs	r3, #1
   d702a:	461a      	mov	r2, r3
   d702c:	2110      	movs	r1, #16
   d702e:	4620      	mov	r0, r4
   d7030:	f7ff fd57 	bl	d6ae2 <_ZN6AB180510isBitClearEhhb>
   d7034:	b1d8      	cbz	r0, d706e <_ZN6AB18055setupEb+0x62>
   d7036:	f004 f9eb 	bl	db410 <_ZN9TimeClass7isValidEv>
   d703a:	b9c0      	cbnz	r0, d706e <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d703c:	a902      	add	r1, sp, #8
   d703e:	4620      	mov	r0, r4
   d7040:	f7ff ffd4 	bl	d6fec <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d7044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7048:	f004 f8e8 	bl	db21c <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d704c:	4b0f      	ldr	r3, [pc, #60]	; (d708c <_ZN6AB18055setupEb+0x80>)
   d704e:	4910      	ldr	r1, [pc, #64]	; (d7090 <_ZN6AB18055setupEb+0x84>)
   d7050:	681b      	ldr	r3, [r3, #0]
   d7052:	9300      	str	r3, [sp, #0]
   d7054:	a804      	add	r0, sp, #16
   d7056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d705a:	f004 f997 	bl	db38c <_ZN9TimeClass6formatExPKc>
   d705e:	480d      	ldr	r0, [pc, #52]	; (d7094 <_ZN6AB18055setupEb+0x88>)
   d7060:	9a04      	ldr	r2, [sp, #16]
   d7062:	490d      	ldr	r1, [pc, #52]	; (d7098 <_ZN6AB18055setupEb+0x8c>)
   d7064:	f7fd fa18 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
   d7068:	a804      	add	r0, sp, #16
   d706a:	f003 fdb3 	bl	dabd4 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d706e:	4a0b      	ldr	r2, [pc, #44]	; (d709c <_ZN6AB18055setupEb+0x90>)
   d7070:	2300      	movs	r3, #0
   d7072:	2100      	movs	r1, #0
   d7074:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d7078:	f001 f914 	bl	d82a4 <system_subscribe_event>
}
   d707c:	b008      	add	sp, #32
   d707e:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d7080:	4907      	ldr	r1, [pc, #28]	; (d70a0 <_ZN6AB18055setupEb+0x94>)
   d7082:	4804      	ldr	r0, [pc, #16]	; (d7094 <_ZN6AB18055setupEb+0x88>)
   d7084:	f7ff fb95 	bl	d67b2 <_ZNK5spark6Logger5errorEPKcz>
   d7088:	e7f1      	b.n	d706e <_ZN6AB18055setupEb+0x62>
   d708a:	bf00      	nop
   d708c:	2003e28c 	.word	0x2003e28c
   d7090:	2003e630 	.word	0x2003e630
   d7094:	2003e4f8 	.word	0x2003e4f8
   d7098:	000dd479 	.word	0x000dd479
   d709c:	000d6a61 	.word	0x000d6a61
   d70a0:	000dd496 	.word	0x000dd496

000d70a4 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d70a4:	220a      	movs	r2, #10
   d70a6:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d70aa:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d70ae:	fb93 f1f2 	sdiv	r1, r3, r2
   d70b2:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d70b6:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d70ba:	b2c0      	uxtb	r0, r0
   d70bc:	4770      	bx	lr

000d70be <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d70be:	b570      	push	{r4, r5, r6, lr}
   d70c0:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d70c2:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d70c4:	460c      	mov	r4, r1
   d70c6:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d70c8:	f7ff ffec 	bl	d70a4 <_ZN6AB180510valueToBcdEi>
   d70cc:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d70ce:	6868      	ldr	r0, [r5, #4]
   d70d0:	f7ff ffe8 	bl	d70a4 <_ZN6AB180510valueToBcdEi>
   d70d4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d70d6:	68a8      	ldr	r0, [r5, #8]
   d70d8:	f7ff ffe4 	bl	d70a4 <_ZN6AB180510valueToBcdEi>
   d70dc:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d70de:	68e8      	ldr	r0, [r5, #12]
   d70e0:	f7ff ffe0 	bl	d70a4 <_ZN6AB180510valueToBcdEi>
   d70e4:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d70e6:	6928      	ldr	r0, [r5, #16]
   d70e8:	3001      	adds	r0, #1
   d70ea:	f7ff ffdb 	bl	d70a4 <_ZN6AB180510valueToBcdEi>
   d70ee:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d70f0:	b92e      	cbnz	r6, d70fe <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d70f2:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d70f4:	69a8      	ldr	r0, [r5, #24]
   d70f6:	f7ff ffd5 	bl	d70a4 <_ZN6AB180510valueToBcdEi>
   d70fa:	7030      	strb	r0, [r6, #0]
}
   d70fc:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d70fe:	696a      	ldr	r2, [r5, #20]
   d7100:	2364      	movs	r3, #100	; 0x64
   d7102:	fb92 f0f3 	sdiv	r0, r2, r3
   d7106:	fb03 2010 	mls	r0, r3, r0, r2
   d710a:	f7ff ffcb 	bl	d70a4 <_ZN6AB180510valueToBcdEi>
   d710e:	1da6      	adds	r6, r4, #6
   d7110:	7160      	strb	r0, [r4, #5]
   d7112:	e7ef      	b.n	d70f4 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d7114 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d7114:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7116:	b087      	sub	sp, #28
   d7118:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d711a:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d711c:	4616      	mov	r6, r2
   d711e:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d7120:	f7ff feea 	bl	d6ef8 <_ZN6AB180510tmToStringEPK2tm>
   d7124:	481e      	ldr	r0, [pc, #120]	; (d71a0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d7126:	9a02      	ldr	r2, [sp, #8]
   d7128:	491e      	ldr	r1, [pc, #120]	; (d71a4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d712a:	f7fd f9b5 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
   d712e:	a802      	add	r0, sp, #8
   d7130:	f003 fd50 	bl	dabd4 <_ZN6StringD1Ev>
    if (lock) {
   d7134:	b116      	cbz	r6, d713c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d7136:	6868      	ldr	r0, [r5, #4]
   d7138:	f002 f872 	bl	d9220 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d713c:	4620      	mov	r0, r4
   d713e:	2201      	movs	r2, #1
   d7140:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d7144:	2700      	movs	r7, #0
   d7146:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d714a:	f7ff ffb8 	bl	d70be <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d714e:	2301      	movs	r3, #1
   d7150:	461a      	mov	r2, r3
   d7152:	2110      	movs	r1, #16
   d7154:	4628      	mov	r0, r5
   d7156:	f7ff fd43 	bl	d6be0 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d715a:	4604      	mov	r4, r0
   d715c:	b1e8      	cbz	r0, d719a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d715e:	2308      	movs	r3, #8
   d7160:	9700      	str	r7, [sp, #0]
   d7162:	eb0d 0203 	add.w	r2, sp, r3
   d7166:	4639      	mov	r1, r7
   d7168:	4628      	mov	r0, r5
   d716a:	f7ff fbef 	bl	d694c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d716e:	4604      	mov	r4, r0
   d7170:	b160      	cbz	r0, d718c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d7172:	2301      	movs	r3, #1
   d7174:	461a      	mov	r2, r3
   d7176:	2110      	movs	r1, #16
   d7178:	4628      	mov	r0, r5
   d717a:	f7ff fcd0 	bl	d6b1e <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d717e:	b116      	cbz	r6, d7186 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d7180:	6868      	ldr	r0, [r5, #4]
   d7182:	f002 f856 	bl	d9232 <_ZN7TwoWire6unlockEv>
}
   d7186:	4620      	mov	r0, r4
   d7188:	b007      	add	sp, #28
   d718a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d718c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d7190:	4905      	ldr	r1, [pc, #20]	; (d71a8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d7192:	4803      	ldr	r0, [pc, #12]	; (d71a0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d7194:	f7ff fb0d 	bl	d67b2 <_ZNK5spark6Logger5errorEPKcz>
   d7198:	e7f1      	b.n	d717e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d719a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d719e:	e7f7      	b.n	d7190 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d71a0:	2003e4f8 	.word	0x2003e4f8
   d71a4:	000dd4ae 	.word	0x000dd4ae
   d71a8:	000dd4bc 	.word	0x000dd4bc

000d71ac <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d71ac:	b513      	push	{r0, r1, r4, lr}
   d71ae:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d71b0:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d71b2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d71b6:	f005 fbb3 	bl	dc920 <gmtime>
    return setRtcFromTm(tm, lock);
   d71ba:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d71be:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d71c0:	4620      	mov	r0, r4
   d71c2:	f7ff ffa7 	bl	d7114 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d71c6:	b002      	add	sp, #8
   d71c8:	bd10      	pop	{r4, pc}
	...

000d71cc <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d71cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d71ce:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d71d0:	b089      	sub	sp, #36	; 0x24
   d71d2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d71d4:	bb75      	cbnz	r5, d7234 <_ZN6AB18054loopEv+0x68>
   d71d6:	f004 f91b 	bl	db410 <_ZN9TimeClass7isValidEv>
   d71da:	b358      	cbz	r0, d7234 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d71dc:	2600      	movs	r6, #0
   d71de:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d71e0:	a904      	add	r1, sp, #16
   d71e2:	4628      	mov	r0, r5
        tm = 0;
   d71e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d71e8:	f001 f90e 	bl	d8408 <spark_sync_time_last>
   d71ec:	b310      	cbz	r0, d7234 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d71ee:	2501      	movs	r5, #1
   d71f0:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d71f2:	f004 f92a 	bl	db44a <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d71f6:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d71f8:	4602      	mov	r2, r0
   d71fa:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d71fc:	4620      	mov	r0, r4
        time_t time = Time.now();
   d71fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d7202:	f7ff ffd3 	bl	d71ac <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d7206:	a902      	add	r1, sp, #8
   d7208:	4620      	mov	r0, r4
        time = 0;
   d720a:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d720e:	f7ff feed 	bl	d6fec <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d7212:	4b12      	ldr	r3, [pc, #72]	; (d725c <_ZN6AB18054loopEv+0x90>)
   d7214:	4912      	ldr	r1, [pc, #72]	; (d7260 <_ZN6AB18054loopEv+0x94>)
   d7216:	681b      	ldr	r3, [r3, #0]
   d7218:	9300      	str	r3, [sp, #0]
   d721a:	a804      	add	r0, sp, #16
   d721c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7220:	f004 f8b4 	bl	db38c <_ZN9TimeClass6formatExPKc>
   d7224:	480f      	ldr	r0, [pc, #60]	; (d7264 <_ZN6AB18054loopEv+0x98>)
   d7226:	9a04      	ldr	r2, [sp, #16]
   d7228:	490f      	ldr	r1, [pc, #60]	; (d7268 <_ZN6AB18054loopEv+0x9c>)
   d722a:	f7fd f935 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
   d722e:	a804      	add	r0, sp, #16
   d7230:	f003 fcd0 	bl	dabd4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d7234:	6963      	ldr	r3, [r4, #20]
   d7236:	b173      	cbz	r3, d7256 <_ZN6AB18054loopEv+0x8a>
   d7238:	f000 fe52 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d723c:	6923      	ldr	r3, [r4, #16]
   d723e:	1ac0      	subs	r0, r0, r3
   d7240:	6963      	ldr	r3, [r4, #20]
   d7242:	4298      	cmp	r0, r3
   d7244:	d307      	bcc.n	d7256 <_ZN6AB18054loopEv+0x8a>
   d7246:	f000 fe4b 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d724a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d724e:	6120      	str	r0, [r4, #16]
            setWDT();
   d7250:	4620      	mov	r0, r4
   d7252:	f7ff fbc3 	bl	d69dc <_ZN6AB18056setWDTEi>
}
   d7256:	b009      	add	sp, #36	; 0x24
   d7258:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d725a:	bf00      	nop
   d725c:	2003e28c 	.word	0x2003e28c
   d7260:	2003e630 	.word	0x2003e630
   d7264:	2003e4f8 	.word	0x2003e4f8
   d7268:	000dd4d7 	.word	0x000dd4d7

000d726c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d726c:	4b01      	ldr	r3, [pc, #4]	; (d7274 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d726e:	4a02      	ldr	r2, [pc, #8]	; (d7278 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d7270:	601a      	str	r2, [r3, #0]
}
   d7272:	4770      	bx	lr
   d7274:	2003e4f8 	.word	0x2003e4f8
   d7278:	000dd4ed 	.word	0x000dd4ed

000d727c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d727c:	4770      	bx	lr

000d727e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d727e:	b510      	push	{r4, lr}
}
   d7280:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d7282:	4604      	mov	r4, r0
}
   d7284:	f004 fc4f 	bl	dbb26 <_ZdlPvj>
   d7288:	4620      	mov	r0, r4
   d728a:	bd10      	pop	{r4, pc}

000d728c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d728c:	6803      	ldr	r3, [r0, #0]
   d728e:	b2c9      	uxtb	r1, r1
   d7290:	689b      	ldr	r3, [r3, #8]
   d7292:	4718      	bx	r3

000d7294 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d7294:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d7296:	4d03      	ldr	r5, [pc, #12]	; (d72a4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d7298:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d729c:	e9c0 5100 	strd	r5, r1, [r0]
}
   d72a0:	bd30      	pop	{r4, r5, pc}
   d72a2:	bf00      	nop
   d72a4:	000dd544 	.word	0x000dd544

000d72a8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d72a8:	6840      	ldr	r0, [r0, #4]
   d72aa:	f001 bf61 	b.w	d9170 <_ZN7TwoWire5beginEv>

000d72ae <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d72ae:	b510      	push	{r4, lr}
   d72b0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d72b2:	6800      	ldr	r0, [r0, #0]
   d72b4:	f001 ffbd 	bl	d9232 <_ZN7TwoWire6unlockEv>
   d72b8:	4620      	mov	r0, r4
   d72ba:	bd10      	pop	{r4, pc}

000d72bc <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d72bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d72c0:	b08a      	sub	sp, #40	; 0x28
   d72c2:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d72c4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72c6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d72c8:	f001 ffaa 	bl	d9220 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d72cc:	221e      	movs	r2, #30
   d72ce:	2100      	movs	r1, #0
   d72d0:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d72d2:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d72d4:	f005 fb5e 	bl	dc994 <memset>
		size_t framAddr = 0;
   d72d8:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d72da:	b1ef      	cbz	r7, d7318 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d72dc:	6823      	ldr	r3, [r4, #0]
   d72de:	2f1e      	cmp	r7, #30
   d72e0:	46b8      	mov	r8, r7
   d72e2:	bf28      	it	cs
   d72e4:	f04f 081e 	movcs.w	r8, #30
   d72e8:	68dd      	ldr	r5, [r3, #12]
   d72ea:	aa02      	add	r2, sp, #8
   d72ec:	4643      	mov	r3, r8
   d72ee:	4631      	mov	r1, r6
   d72f0:	4620      	mov	r0, r4
   d72f2:	47a8      	blx	r5
			if (!result) {
   d72f4:	4605      	mov	r5, r0
   d72f6:	b958      	cbnz	r0, d7310 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d72f8:	480a      	ldr	r0, [pc, #40]	; (d7324 <_ZN6MB85RC5eraseEv+0x68>)
   d72fa:	490b      	ldr	r1, [pc, #44]	; (d7328 <_ZN6MB85RC5eraseEv+0x6c>)
   d72fc:	4632      	mov	r2, r6
   d72fe:	f7fd f8cb 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d7302:	a801      	add	r0, sp, #4
   d7304:	f7ff ffd3 	bl	d72ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d7308:	4628      	mov	r0, r5
   d730a:	b00a      	add	sp, #40	; 0x28
   d730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d7310:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d7314:	4446      	add	r6, r8
		while(totalLen > 0) {
   d7316:	e7e0      	b.n	d72da <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d7318:	a801      	add	r0, sp, #4
   d731a:	f7ff ffc8 	bl	d72ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d731e:	2501      	movs	r5, #1
   d7320:	e7f2      	b.n	d7308 <_ZN6MB85RC5eraseEv+0x4c>
   d7322:	bf00      	nop
   d7324:	2003e5dc 	.word	0x2003e5dc
   d7328:	000dd510 	.word	0x000dd510

000d732c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d732c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d7330:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7332:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7334:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7336:	460d      	mov	r5, r1
   d7338:	4616      	mov	r6, r2
   d733a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d733c:	f001 ff70 	bl	d9220 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d7340:	b1a7      	cbz	r7, d736c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d7342:	68e1      	ldr	r1, [r4, #12]
   d7344:	6860      	ldr	r0, [r4, #4]
   d7346:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d734a:	f001 ff47 	bl	d91dc <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d734e:	0a29      	lsrs	r1, r5, #8
   d7350:	6860      	ldr	r0, [r4, #4]
   d7352:	f7ff ff9b 	bl	d728c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7356:	4629      	mov	r1, r5
   d7358:	6860      	ldr	r0, [r4, #4]
   d735a:	f7ff ff97 	bl	d728c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d735e:	6860      	ldr	r0, [r4, #4]
   d7360:	2100      	movs	r1, #0
   d7362:	f001 ff56 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7366:	b148      	cbz	r0, d737c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d7368:	2400      	movs	r4, #0
   d736a:	e000      	b.n	d736e <_ZN6MB85RC8readDataEjPhj+0x42>
   d736c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d736e:	a801      	add	r0, sp, #4
   d7370:	f7ff ff9d 	bl	d72ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d7374:	4620      	mov	r0, r4
   d7376:	b003      	add	sp, #12
   d7378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d737c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d737e:	7b21      	ldrb	r1, [r4, #12]
   d7380:	6860      	ldr	r0, [r4, #4]
   d7382:	46b8      	mov	r8, r7
   d7384:	bf28      	it	cs
   d7386:	f04f 0820 	movcs.w	r8, #32
   d738a:	2301      	movs	r3, #1
   d738c:	4642      	mov	r2, r8
   d738e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7392:	f001 ff0a 	bl	d91aa <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d7396:	f004 fb71 	bl	dba7c <_Z19__fetch_global_Wirev>
   d739a:	6803      	ldr	r3, [r0, #0]
   d739c:	691b      	ldr	r3, [r3, #16]
   d739e:	4798      	blx	r3
   d73a0:	4540      	cmp	r0, r8
   d73a2:	dbe1      	blt.n	d7368 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d73a4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d73a8:	f004 fb68 	bl	dba7c <_Z19__fetch_global_Wirev>
   d73ac:	6803      	ldr	r3, [r0, #0]
   d73ae:	695b      	ldr	r3, [r3, #20]
   d73b0:	4798      	blx	r3
   d73b2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d73b6:	454e      	cmp	r6, r9
   d73b8:	d1f6      	bne.n	d73a8 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d73ba:	4445      	add	r5, r8
   d73bc:	eba7 0708 	sub.w	r7, r7, r8
   d73c0:	e7be      	b.n	d7340 <_ZN6MB85RC8readDataEjPhj+0x14>

000d73c2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d73c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d73c6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d73c8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d73ca:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d73cc:	460e      	mov	r6, r1
   d73ce:	4690      	mov	r8, r2
   d73d0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d73d2:	f001 ff25 	bl	d9220 <_ZN7TwoWire4lockEv>
   d73d6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d73da:	f1b9 0f00 	cmp.w	r9, #0
   d73de:	d02a      	beq.n	d7436 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d73e0:	b34d      	cbz	r5, d7436 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d73e2:	68e1      	ldr	r1, [r4, #12]
   d73e4:	6860      	ldr	r0, [r4, #4]
   d73e6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d73ea:	f001 fef7 	bl	d91dc <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d73ee:	0a31      	lsrs	r1, r6, #8
   d73f0:	6860      	ldr	r0, [r4, #4]
   d73f2:	f7ff ff4b 	bl	d728c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d73f6:	6860      	ldr	r0, [r4, #4]
   d73f8:	4631      	mov	r1, r6
   d73fa:	f7ff ff47 	bl	d728c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d73fe:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d7402:	4647      	mov	r7, r8
   d7404:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d7408:	6860      	ldr	r0, [r4, #4]
   d740a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d740e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d7410:	3d01      	subs	r5, #1
				wire.write(*data);
   d7412:	689b      	ldr	r3, [r3, #8]
   d7414:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7416:	4555      	cmp	r5, sl
   d7418:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d741c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d741e:	d001      	beq.n	d7424 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d7420:	2d00      	cmp	r5, #0
   d7422:	d1f1      	bne.n	d7408 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d7424:	6860      	ldr	r0, [r4, #4]
   d7426:	2101      	movs	r1, #1
   d7428:	f001 fef3 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d742c:	2800      	cmp	r0, #0
   d742e:	d0d7      	beq.n	d73e0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d7430:	f04f 0900 	mov.w	r9, #0
   d7434:	e7d1      	b.n	d73da <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d7436:	a801      	add	r0, sp, #4
   d7438:	f7ff ff39 	bl	d72ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d743c:	4648      	mov	r0, r9
   d743e:	b003      	add	sp, #12
   d7440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7444 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7448:	b08b      	sub	sp, #44	; 0x2c
   d744a:	460e      	mov	r6, r1
   d744c:	4615      	mov	r5, r2
   d744e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d7450:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7452:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7454:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d7456:	f001 fee3 	bl	d9220 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d745a:	42ae      	cmp	r6, r5
   d745c:	d229      	bcs.n	d74b2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d745e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d7460:	4425      	add	r5, r4
			while(numBytes > 0) {
   d7462:	b18c      	cbz	r4, d7488 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d7464:	2c1e      	cmp	r4, #30
   d7466:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d7468:	f8d8 3000 	ldr.w	r3, [r8]
   d746c:	bf28      	it	cs
   d746e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7470:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d7472:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7476:	aa02      	add	r2, sp, #8
   d7478:	463b      	mov	r3, r7
   d747a:	4631      	mov	r1, r6
   d747c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d747e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d7480:	47c8      	blx	r9
				if (!result) {
   d7482:	b948      	cbnz	r0, d7498 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7484:	2400      	movs	r4, #0
   d7486:	e000      	b.n	d748a <_ZN6MB85RC8moveDataEjjj+0x46>
   d7488:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d748a:	a801      	add	r0, sp, #4
   d748c:	f7ff ff0f 	bl	d72ae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d7490:	4620      	mov	r0, r4
   d7492:	b00b      	add	sp, #44	; 0x2c
   d7494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d7498:	f8d8 3000 	ldr.w	r3, [r8]
   d749c:	aa02      	add	r2, sp, #8
   d749e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d74a2:	4629      	mov	r1, r5
   d74a4:	463b      	mov	r3, r7
   d74a6:	4640      	mov	r0, r8
   d74a8:	47c8      	blx	r9
				if (!result) {
   d74aa:	2800      	cmp	r0, #0
   d74ac:	d0ea      	beq.n	d7484 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d74ae:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d74b0:	e7d7      	b.n	d7462 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d74b2:	d9e9      	bls.n	d7488 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d74b4:	2c00      	cmp	r4, #0
   d74b6:	d0e7      	beq.n	d7488 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d74b8:	f8d8 3000 	ldr.w	r3, [r8]
   d74bc:	2c1e      	cmp	r4, #30
   d74be:	4627      	mov	r7, r4
   d74c0:	bf28      	it	cs
   d74c2:	271e      	movcs	r7, #30
   d74c4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d74c8:	aa02      	add	r2, sp, #8
   d74ca:	463b      	mov	r3, r7
   d74cc:	4631      	mov	r1, r6
   d74ce:	4640      	mov	r0, r8
   d74d0:	47c8      	blx	r9
				if (!result) {
   d74d2:	2800      	cmp	r0, #0
   d74d4:	d0d6      	beq.n	d7484 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d74d6:	f8d8 3000 	ldr.w	r3, [r8]
   d74da:	aa02      	add	r2, sp, #8
   d74dc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d74e0:	4629      	mov	r1, r5
   d74e2:	463b      	mov	r3, r7
   d74e4:	4640      	mov	r0, r8
   d74e6:	47c8      	blx	r9
				if (!result) {
   d74e8:	2800      	cmp	r0, #0
   d74ea:	d0cb      	beq.n	d7484 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d74ec:	443e      	add	r6, r7
				framAddrTo += count;
   d74ee:	443d      	add	r5, r7
				numBytes -= count;
   d74f0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d74f2:	e7df      	b.n	d74b4 <_ZN6MB85RC8moveDataEjjj+0x70>

000d74f4 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d74f4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d74f6:	4603      	mov	r3, r0
	switch (__op)
   d74f8:	d102      	bne.n	d7500 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d74fa:	6001      	str	r1, [r0, #0]
      }
   d74fc:	2000      	movs	r0, #0
   d74fe:	4770      	bx	lr
	  switch (__op)
   d7500:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d7502:	bf04      	itt	eq
   d7504:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7508:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d750c:	e7f6      	b.n	d74fc <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d750e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d750e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d7510:	2301      	movs	r3, #1
   d7512:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d7514:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d7516:	4604      	mov	r4, r0
        if (th->func) {
   d7518:	b143      	cbz	r3, d752c <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d751a:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d751c:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d751e:	2301      	movs	r3, #1
   d7520:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d7522:	2000      	movs	r0, #0
    }
   d7524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d7528:	f000 bca2 	b.w	d7e70 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d752c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d752e:	2800      	cmp	r0, #0
   d7530:	d0f5      	beq.n	d751e <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d7532:	6883      	ldr	r3, [r0, #8]
   d7534:	b90b      	cbnz	r3, d753a <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d7536:	f004 fafc 	bl	dbb32 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d753a:	68c3      	ldr	r3, [r0, #12]
   d753c:	e7ee      	b.n	d751c <_ZN6Thread3runEPv+0xe>

000d753e <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d753e:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d7540:	6842      	ldr	r2, [r0, #4]
   d7542:	4603      	mov	r3, r0
   d7544:	1054      	asrs	r4, r2, #1
   d7546:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d754a:	07d2      	lsls	r2, r2, #31
   d754c:	bf48      	it	mi
   d754e:	590a      	ldrmi	r2, [r1, r4]
   d7550:	681b      	ldr	r3, [r3, #0]
      }
   d7552:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7556:	bf48      	it	mi
   d7558:	58d3      	ldrmi	r3, [r2, r3]
   d755a:	4718      	bx	r3

000d755c <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d755c:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d755e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d7560:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d7564:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d7566:	3008      	adds	r0, #8
   d7568:	f000 fc42 	bl	d7df0 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d756c:	2004      	movs	r0, #4
   d756e:	f7fc fd92 	bl	d4096 <_Znwj>
   d7572:	4605      	mov	r5, r0
   d7574:	b398      	cbz	r0, d75de <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d7576:	491b      	ldr	r1, [pc, #108]	; (d75e4 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d7578:	2014      	movs	r0, #20
   d757a:	f004 fad6 	bl	dbb2a <_ZnwjRKSt9nothrow_t>
   d757e:	b130      	cbz	r0, d758e <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7580:	2300      	movs	r3, #0
            exited(false) {
   d7582:	e9c0 3300 	strd	r3, r3, [r0]
   d7586:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d758a:	7403      	strb	r3, [r0, #16]
   d758c:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d758e:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d7590:	b1a0      	cbz	r0, d75bc <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d7592:	4b15      	ldr	r3, [pc, #84]	; (d75e8 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7594:	4915      	ldr	r1, [pc, #84]	; (d75ec <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d7596:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d759a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d759e:	e9cd 0300 	strd	r0, r3, [sp]
   d75a2:	2202      	movs	r2, #2
   d75a4:	4b12      	ldr	r3, [pc, #72]	; (d75f0 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d75a6:	3004      	adds	r0, #4
   d75a8:	f000 fbea 	bl	d7d80 <os_thread_create>
   d75ac:	b930      	cbnz	r0, d75bc <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d75ae:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d75b0:	7c1b      	ldrb	r3, [r3, #16]
   d75b2:	b9a3      	cbnz	r3, d75de <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d75b4:	2001      	movs	r0, #1
   d75b6:	f000 fc83 	bl	d7ec0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d75ba:	e7f8      	b.n	d75ae <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75bc:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d75be:	2300      	movs	r3, #0
   d75c0:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d75c2:	b164      	cbz	r4, d75de <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d75c4:	6827      	ldr	r7, [r4, #0]
   d75c6:	b137      	cbz	r7, d75d6 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d75c8:	4638      	mov	r0, r7
   d75ca:	f7fc feb5 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d75ce:	2110      	movs	r1, #16
   d75d0:	4638      	mov	r0, r7
   d75d2:	f004 faa8 	bl	dbb26 <_ZdlPvj>
   d75d6:	2114      	movs	r1, #20
   d75d8:	4620      	mov	r0, r4
   d75da:	f004 faa4 	bl	dbb26 <_ZdlPvj>
   d75de:	6075      	str	r5, [r6, #4]
}
   d75e0:	b003      	add	sp, #12
   d75e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d75e4:	000dd944 	.word	0x000dd944
   d75e8:	000d77fb 	.word	0x000d77fb
   d75ec:	000dd558 	.word	0x000dd558
   d75f0:	000d750f 	.word	0x000d750f

000d75f4 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d75f4:	f247 5130 	movw	r1, #30000	; 0x7530
   d75f8:	4a08      	ldr	r2, [pc, #32]	; (d761c <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d75fa:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d75fc:	4908      	ldr	r1, [pc, #32]	; (d7620 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d75fe:	6002      	str	r2, [r0, #0]
   d7600:	2200      	movs	r2, #0
   d7602:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7606:	4907      	ldr	r1, [pc, #28]	; (d7624 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7608:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d760a:	4907      	ldr	r1, [pc, #28]	; (d7628 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d760c:	6042      	str	r2, [r0, #4]
   d760e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d7612:	6181      	str	r1, [r0, #24]
   d7614:	8502      	strh	r2, [r0, #40]	; 0x28
   d7616:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d761a:	4770      	bx	lr
   d761c:	000dd61c 	.word	0x000dd61c
   d7620:	000d7965 	.word	0x000d7965
   d7624:	000d753f 	.word	0x000d753f
   d7628:	000d74f5 	.word	0x000d74f5

000d762c <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d762c:	b510      	push	{r4, lr}
   d762e:	4b04      	ldr	r3, [pc, #16]	; (d7640 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d7630:	4604      	mov	r4, r0
   d7632:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7636:	f7fc fe7f 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
}
   d763a:	4620      	mov	r0, r4
   d763c:	bd10      	pop	{r4, pc}
   d763e:	bf00      	nop
   d7640:	000dd61c 	.word	0x000dd61c

000d7644 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7644:	b510      	push	{r4, lr}
   d7646:	4b03      	ldr	r3, [pc, #12]	; (d7654 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7648:	6003      	str	r3, [r0, #0]
   d764a:	4604      	mov	r4, r0
   d764c:	f7ff ffee 	bl	d762c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d7650:	4620      	mov	r0, r4
   d7652:	bd10      	pop	{r4, pc}
   d7654:	000dd644 	.word	0x000dd644

000d7658 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7658:	b510      	push	{r4, lr}
   d765a:	4604      	mov	r4, r0
}
   d765c:	f7ff fff2 	bl	d7644 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d7660:	4620      	mov	r0, r4
   d7662:	2138      	movs	r1, #56	; 0x38
   d7664:	f004 fa5f 	bl	dbb26 <_ZdlPvj>
   d7668:	4620      	mov	r0, r4
   d766a:	bd10      	pop	{r4, pc}

000d766c <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d766c:	6880      	ldr	r0, [r0, #8]
   d766e:	f000 bbc7 	b.w	d7e00 <os_mutex_lock>

000d7672 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d7672:	6880      	ldr	r0, [r0, #8]
   d7674:	f000 bbcc 	b.w	d7e10 <os_mutex_unlock>

000d7678 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d7678:	b510      	push	{r4, lr}
   d767a:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d767c:	6800      	ldr	r0, [r0, #0]
   d767e:	f7ff fff8 	bl	d7672 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d7682:	4620      	mov	r0, r4
   d7684:	bd10      	pop	{r4, pc}

000d7686 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d7686:	b513      	push	{r0, r1, r4, lr}
   d7688:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d768a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d768c:	f7ff ffee 	bl	d766c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7690:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d7692:	88dc      	ldrh	r4, [r3, #6]
   d7694:	b2a4      	uxth	r4, r4
   d7696:	b10c      	cbz	r4, d769c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d7698:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d769c:	a801      	add	r0, sp, #4
   d769e:	f7ff ffeb 	bl	d7678 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d76a2:	4620      	mov	r0, r4
   d76a4:	b002      	add	sp, #8
   d76a6:	bd10      	pop	{r4, pc}

000d76a8 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d76a8:	b513      	push	{r0, r1, r4, lr}
   d76aa:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d76ac:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d76ae:	f7ff ffdd 	bl	d766c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d76b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d76b6:	b943      	cbnz	r3, d76ca <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d76b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d76ba:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d76bc:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d76be:	a801      	add	r0, sp, #4
   d76c0:	f7ff ffda 	bl	d7678 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d76c4:	4620      	mov	r0, r4
   d76c6:	b002      	add	sp, #8
   d76c8:	bd10      	pop	{r4, pc}
	bool result = false;
   d76ca:	2400      	movs	r4, #0
   d76cc:	e7f7      	b.n	d76be <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d76ce <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d76ce:	b513      	push	{r0, r1, r4, lr}
   d76d0:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d76d2:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d76d4:	f7ff ffca 	bl	d766c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d76d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d76da:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d76dc:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d76de:	f7ff ffcb 	bl	d7678 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d76e2:	4620      	mov	r0, r4
   d76e4:	b002      	add	sp, #8
   d76e6:	bd10      	pop	{r4, pc}

000d76e8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d76e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d76ec:	4699      	mov	r9, r3
   d76ee:	b086      	sub	sp, #24
	if (!haveSetup) {
   d76f0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d76f4:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d76f8:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d76fc:	4604      	mov	r4, r0
   d76fe:	460f      	mov	r7, r1
   d7700:	4616      	mov	r6, r2
	if (!haveSetup) {
   d7702:	b913      	cbnz	r3, d770a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7704:	6803      	ldr	r3, [r0, #0]
   d7706:	689b      	ldr	r3, [r3, #8]
   d7708:	4798      	blx	r3
		data = "";
   d770a:	4b31      	ldr	r3, [pc, #196]	; (d77d0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d770c:	4638      	mov	r0, r7
		data = "";
   d770e:	2e00      	cmp	r6, #0
   d7710:	bf08      	it	eq
   d7712:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7714:	f005 f9b1 	bl	dca7a <strlen>
   d7718:	4605      	mov	r5, r0
   d771a:	4630      	mov	r0, r6
   d771c:	f005 f9ad 	bl	dca7a <strlen>
   d7720:	4428      	add	r0, r5
   d7722:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d7726:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d7728:	bf1c      	itt	ne
   d772a:	f025 0503 	bicne.w	r5, r5, #3
   d772e:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d7730:	4633      	mov	r3, r6
   d7732:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d7736:	e9cd 9a00 	strd	r9, sl, [sp]
   d773a:	4926      	ldr	r1, [pc, #152]	; (d77d4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d773c:	4826      	ldr	r0, [pc, #152]	; (d77d8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d773e:	463a      	mov	r2, r7
   d7740:	f7fc feaa 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7744:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7746:	3b08      	subs	r3, #8
   d7748:	42ab      	cmp	r3, r5
   d774a:	d212      	bcs.n	d7772 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d774c:	2400      	movs	r4, #0
}
   d774e:	4620      	mov	r0, r4
   d7750:	b006      	add	sp, #24
   d7752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d7756:	88cb      	ldrh	r3, [r1, #6]
   d7758:	2b01      	cmp	r3, #1
   d775a:	d036      	beq.n	d77ca <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d775c:	a805      	add	r0, sp, #20
   d775e:	f7ff ff8b 	bl	d7678 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d7762:	6823      	ldr	r3, [r4, #0]
   d7764:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d7768:	699b      	ldr	r3, [r3, #24]
   d776a:	4620      	mov	r0, r4
   d776c:	4798      	blx	r3
   d776e:	2800      	cmp	r0, #0
   d7770:	d0ec      	beq.n	d774c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d7772:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7774:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d7776:	f7ff ff79 	bl	d766c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d777a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d777c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d777e:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7780:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d7782:	1ad2      	subs	r2, r2, r3
   d7784:	42aa      	cmp	r2, r5
   d7786:	d3e6      	bcc.n	d7756 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d7788:	ea48 080a 	orr.w	r8, r8, sl
   d778c:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d7790:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d7794:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d7796:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d779a:	4639      	mov	r1, r7
   d779c:	4640      	mov	r0, r8
   d779e:	f005 f946 	bl	dca2e <strcpy>
				cp += strlen(cp) + 1;
   d77a2:	4640      	mov	r0, r8
   d77a4:	f005 f969 	bl	dca7a <strlen>
   d77a8:	3001      	adds	r0, #1
				strcpy(cp, data);
   d77aa:	4631      	mov	r1, r6
   d77ac:	4440      	add	r0, r8
   d77ae:	f005 f93e 	bl	dca2e <strcpy>
				nextFree += size;
   d77b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d77b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d77b6:	441d      	add	r5, r3
   d77b8:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d77ba:	88d3      	ldrh	r3, [r2, #6]
   d77bc:	3301      	adds	r3, #1
   d77be:	80d3      	strh	r3, [r2, #6]
				return true;
   d77c0:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d77c2:	a805      	add	r0, sp, #20
   d77c4:	f7ff ff58 	bl	d7678 <_ZN11StMutexLockD1Ev>
   d77c8:	e7c1      	b.n	d774e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d77ca:	2400      	movs	r4, #0
   d77cc:	e7f9      	b.n	d77c2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d77ce:	bf00      	nop
   d77d0:	000dcfdd 	.word	0x000dcfdd
   d77d4:	000dd56a 	.word	0x000dd56a
   d77d8:	2003e500 	.word	0x2003e500

000d77dc <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d77dc:	b508      	push	{r3, lr}
   d77de:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d77e0:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d77e4:	69a3      	ldr	r3, [r4, #24]
   d77e6:	b90b      	cbnz	r3, d77ec <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d77e8:	f004 f9a3 	bl	dbb32 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d77ec:	69e3      	ldr	r3, [r4, #28]
   d77ee:	4621      	mov	r1, r4
   d77f0:	4628      	mov	r0, r5
   d77f2:	4798      	blx	r3
		os_thread_yield();
   d77f4:	f000 facc 	bl	d7d90 <os_thread_yield>
	while(true) {
   d77f8:	e7f4      	b.n	d77e4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d77fa <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d77fa:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d77fc:	f7ff ffee 	bl	d77dc <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d7800 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7800:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d7802:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7806:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7808:	4628      	mov	r0, r5
   d780a:	f005 f936 	bl	dca7a <strlen>
   d780e:	3001      	adds	r0, #1
   d7810:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7812:	4628      	mov	r0, r5
   d7814:	f005 f931 	bl	dca7a <strlen>
	size_t offset = start - retainedBuffer;
   d7818:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d781a:	3001      	adds	r0, #1
   d781c:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d781e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d7820:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7824:	bf1c      	itt	ne
   d7826:	f1c3 0304 	rsbne	r3, r3, #4
   d782a:	18c0      	addne	r0, r0, r3
}
   d782c:	bd68      	pop	{r3, r5, r6, pc}

000d782e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d782e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7830:	4604      	mov	r4, r0
   d7832:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7834:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7836:	f7ff ff19 	bl	d766c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d783a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d783c:	88fb      	ldrh	r3, [r7, #6]
   d783e:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d7842:	b1e6      	cbz	r6, d787e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d7844:	2b01      	cmp	r3, #1
   d7846:	d922      	bls.n	d788e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d7848:	4629      	mov	r1, r5
   d784a:	4620      	mov	r0, r4
   d784c:	f7ff ffd8 	bl	d7800 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d7850:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d7852:	4629      	mov	r1, r5
   d7854:	4620      	mov	r0, r4
   d7856:	f7ff ffd3 	bl	d7800 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d785a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d785c:	443a      	add	r2, r7
	if (after > 0) {
   d785e:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d7860:	4601      	mov	r1, r0
	size_t len = next - start;
   d7862:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d7866:	d002      	beq.n	d786e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d7868:	4628      	mov	r0, r5
   d786a:	f005 f879 	bl	dc960 <memmove>
	nextFree -= len;
   d786e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d7870:	1b9b      	subs	r3, r3, r6
   d7872:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d7874:	88fb      	ldrh	r3, [r7, #6]
   d7876:	3b01      	subs	r3, #1
   d7878:	80fb      	strh	r3, [r7, #6]
	return true;
   d787a:	2601      	movs	r6, #1
   d787c:	e001      	b.n	d7882 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d787e:	2b00      	cmp	r3, #0
   d7880:	d1e7      	bne.n	d7852 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d7882:	a801      	add	r0, sp, #4
   d7884:	f7ff fef8 	bl	d7678 <_ZN11StMutexLockD1Ev>
}
   d7888:	4630      	mov	r0, r6
   d788a:	b003      	add	sp, #12
   d788c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d788e:	2600      	movs	r6, #0
   d7890:	e7f7      	b.n	d7882 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d7894 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d7894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7898:	460d      	mov	r5, r1
   d789a:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d789c:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d789e:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d78a0:	f7ff fea8 	bl	d75f4 <_ZN21PublishQueueAsyncBaseC1Ev>
   d78a4:	4b15      	ldr	r3, [pc, #84]	; (d78fc <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d78a6:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d78aa:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d78ac:	4b14      	ldr	r3, [pc, #80]	; (d7900 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d78ae:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d78b0:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d78b2:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d78b4:	4698      	mov	r8, r3
   d78b6:	d117      	bne.n	d78e8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d78b8:	88ab      	ldrh	r3, [r5, #4]
   d78ba:	b29b      	uxth	r3, r3
   d78bc:	42b3      	cmp	r3, r6
   d78be:	d113      	bne.n	d78e8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d78c0:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d78c4:	6367      	str	r7, [r4, #52]	; 0x34
   d78c6:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d78ca:	88eb      	ldrh	r3, [r5, #6]
   d78cc:	fa1f f289 	uxth.w	r2, r9
   d78d0:	b29b      	uxth	r3, r3
   d78d2:	429a      	cmp	r2, r3
   d78d4:	d20e      	bcs.n	d78f4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d78d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d78d8:	4620      	mov	r0, r4
   d78da:	f7ff ff91 	bl	d7800 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d78de:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d78e0:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d78e2:	f109 0901 	add.w	r9, r9, #1
   d78e6:	d9f0      	bls.n	d78ca <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d78e8:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d78ea:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d78ee:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d78f0:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d78f2:	80eb      	strh	r3, [r5, #6]
}
   d78f4:	4620      	mov	r0, r4
   d78f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d78fa:	bf00      	nop
   d78fc:	000dd644 	.word	0x000dd644
   d7900:	d19cab61 	.word	0xd19cab61

000d7904 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7904:	b510      	push	{r4, lr}
   d7906:	e9d1 2300 	ldrd	r2, r3, [r1]
   d790a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d790c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d790e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7910:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7912:	b90a      	cbnz	r2, d7918 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7914:	07d9      	lsls	r1, r3, #31
   d7916:	d505      	bpl.n	d7924 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7918:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d791c:	4b0f      	ldr	r3, [pc, #60]	; (d795c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d791e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7920:	4b0f      	ldr	r3, [pc, #60]	; (d7960 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7922:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7924:	ab02      	add	r3, sp, #8
   d7926:	e893 0003 	ldmia.w	r3, {r0, r1}
   d792a:	466a      	mov	r2, sp
   d792c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7930:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7934:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7938:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d793c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d793e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7942:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7944:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7946:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7948:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d794a:	4618      	mov	r0, r3
   d794c:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d794e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7950:	9105      	str	r1, [sp, #20]
   d7952:	f7fc fcf1 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
	}
   d7956:	4620      	mov	r0, r4
   d7958:	b006      	add	sp, #24
   d795a:	bd10      	pop	{r4, pc}
   d795c:	000d753f 	.word	0x000d753f
   d7960:	000d74f5 	.word	0x000d74f5

000d7964 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7964:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7966:	4b05      	ldr	r3, [pc, #20]	; (d797c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7968:	9300      	str	r3, [sp, #0]
   d796a:	4669      	mov	r1, sp
   d796c:	2300      	movs	r3, #0
   d796e:	3010      	adds	r0, #16
   d7970:	9301      	str	r3, [sp, #4]
   d7972:	f7ff ffc7 	bl	d7904 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7976:	b003      	add	sp, #12
   d7978:	f85d fb04 	ldr.w	pc, [sp], #4
   d797c:	000d79ad 	.word	0x000d79ad

000d7980 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7980:	b513      	push	{r0, r1, r4, lr}
   d7982:	4604      	mov	r4, r0
   d7984:	f000 faac 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7988:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d798a:	1ac0      	subs	r0, r0, r3
   d798c:	68e3      	ldr	r3, [r4, #12]
   d798e:	4298      	cmp	r0, r3
   d7990:	d308      	bcc.n	d79a4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7992:	4b05      	ldr	r3, [pc, #20]	; (d79a8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7994:	9300      	str	r3, [sp, #0]
   d7996:	4669      	mov	r1, sp
   d7998:	2300      	movs	r3, #0
   d799a:	f104 0010 	add.w	r0, r4, #16
   d799e:	9301      	str	r3, [sp, #4]
   d79a0:	f7ff ffb0 	bl	d7904 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d79a4:	b002      	add	sp, #8
   d79a6:	bd10      	pop	{r4, pc}
   d79a8:	000d79ad 	.word	0x000d79ad

000d79ac <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d79ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d79b0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d79b4:	b086      	sub	sp, #24
   d79b6:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d79b8:	2b00      	cmp	r3, #0
   d79ba:	d164      	bne.n	d7a86 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d79bc:	f000 fcf4 	bl	d83a8 <spark_cloud_flag_connected>
   d79c0:	2800      	cmp	r0, #0
   d79c2:	d060      	beq.n	d7a86 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d79c4:	f000 fa8c 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
   d79c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d79ca:	1ac0      	subs	r0, r0, r3
   d79cc:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d79d0:	4298      	cmp	r0, r3
   d79d2:	d958      	bls.n	d7a86 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d79d4:	6823      	ldr	r3, [r4, #0]
   d79d6:	4620      	mov	r0, r4
   d79d8:	695b      	ldr	r3, [r3, #20]
   d79da:	4798      	blx	r3
		if (data) {
   d79dc:	4605      	mov	r5, r0
   d79de:	2800      	cmp	r0, #0
   d79e0:	d051      	beq.n	d7a86 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d79e2:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d79e6:	2301      	movs	r3, #1
   d79e8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d79ec:	4638      	mov	r0, r7
   d79ee:	f005 f844 	bl	dca7a <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d79f2:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d79f6:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d79fa:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d79fc:	682b      	ldr	r3, [r5, #0]
   d79fe:	492b      	ldr	r1, [pc, #172]	; (d7aac <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7a00:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7a02:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7a04:	4633      	mov	r3, r6
   d7a06:	482a      	ldr	r0, [pc, #168]	; (d7ab0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7a08:	463a      	mov	r2, r7
   d7a0a:	f7fc fd45 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7a0e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7a10:	f88d 8000 	strb.w	r8, [sp]
   d7a14:	4632      	mov	r2, r6
   d7a16:	4639      	mov	r1, r7
   d7a18:	a802      	add	r0, sp, #8
   d7a1a:	f001 f8ed 	bl	d8bf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	return __atomic_load_n(&_M_i, int(__m));
   d7a1e:	9d02      	ldr	r5, [sp, #8]
   d7a20:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7a22:	b91b      	cbnz	r3, d7a2c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7a24:	2001      	movs	r0, #1
   d7a26:	f000 fdd7 	bl	d85d8 <delay>
			while(!request.isDone()) {
   d7a2a:	e7f8      	b.n	d7a1e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7a2c:	2000      	movs	r0, #0
   d7a2e:	f000 fc49 	bl	d82c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7a32:	b120      	cbz	r0, d7a3e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7a34:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7a36:	b913      	cbnz	r3, d7a3e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d7a38:	f000 fca6 	bl	d8388 <spark_process>
    }
   d7a3c:	e7fa      	b.n	d7a34 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7a3e:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7a40:	2b01      	cmp	r3, #1
   d7a42:	d123      	bne.n	d7a8c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d7a44:	491b      	ldr	r1, [pc, #108]	; (d7ab4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7a46:	481a      	ldr	r0, [pc, #104]	; (d7ab0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7a48:	f7fc fd26 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d7a4c:	6823      	ldr	r3, [r4, #0]
   d7a4e:	2100      	movs	r1, #0
   d7a50:	699b      	ldr	r3, [r3, #24]
   d7a52:	4620      	mov	r0, r4
   d7a54:	4798      	blx	r3
			isSending = false;
   d7a56:	2300      	movs	r3, #0
   d7a58:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d7a5c:	f000 fa40 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7a60:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7a62:	9c03      	ldr	r4, [sp, #12]
   d7a64:	b17c      	cbz	r4, d7a86 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d7a66:	6863      	ldr	r3, [r4, #4]
   d7a68:	3b01      	subs	r3, #1
   d7a6a:	6063      	str	r3, [r4, #4]
   d7a6c:	b95b      	cbnz	r3, d7a86 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d7a6e:	6823      	ldr	r3, [r4, #0]
   d7a70:	4620      	mov	r0, r4
   d7a72:	689b      	ldr	r3, [r3, #8]
   d7a74:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7a76:	68a3      	ldr	r3, [r4, #8]
   d7a78:	3b01      	subs	r3, #1
   d7a7a:	60a3      	str	r3, [r4, #8]
   d7a7c:	b91b      	cbnz	r3, d7a86 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d7a7e:	6823      	ldr	r3, [r4, #0]
   d7a80:	4620      	mov	r0, r4
   d7a82:	68db      	ldr	r3, [r3, #12]
   d7a84:	4798      	blx	r3
}
   d7a86:	b006      	add	sp, #24
   d7a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d7a8c:	68e2      	ldr	r2, [r4, #12]
   d7a8e:	490a      	ldr	r1, [pc, #40]	; (d7ab8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7a90:	4807      	ldr	r0, [pc, #28]	; (d7ab0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7a92:	f7fc fd01 	bl	d4498 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7a96:	4b09      	ldr	r3, [pc, #36]	; (d7abc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7a98:	9304      	str	r3, [sp, #16]
   d7a9a:	a904      	add	r1, sp, #16
   d7a9c:	2300      	movs	r3, #0
   d7a9e:	f104 0010 	add.w	r0, r4, #16
   d7aa2:	9305      	str	r3, [sp, #20]
   d7aa4:	f7ff ff2e 	bl	d7904 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7aa8:	e7d5      	b.n	d7a56 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d7aaa:	bf00      	nop
   d7aac:	000dd5ab 	.word	0x000dd5ab
   d7ab0:	2003e500 	.word	0x2003e500
   d7ab4:	000dd5cc 	.word	0x000dd5cc
   d7ab8:	000dd5e3 	.word	0x000dd5e3
   d7abc:	000d7981 	.word	0x000d7981

000d7ac0 <_GLOBAL__sub_I_pubqLogger>:
   d7ac0:	4b01      	ldr	r3, [pc, #4]	; (d7ac8 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7ac2:	4a02      	ldr	r2, [pc, #8]	; (d7acc <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7ac4:	601a      	str	r2, [r3, #0]
}
   d7ac6:	4770      	bx	lr
   d7ac8:	2003e500 	.word	0x2003e500
   d7acc:	000dd60a 	.word	0x000dd60a

000d7ad0 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d7ad0:	6803      	ldr	r3, [r0, #0]
   d7ad2:	b2c9      	uxtb	r1, r1
   d7ad4:	689b      	ldr	r3, [r3, #8]
   d7ad6:	4718      	bx	r3

000d7ad8 <_ZN8MMA8452QC1Eh>:
//   supplied address into a private variable for future use.
//   The variable addr should be either 0x1C or 0x1D, depending on which voltage
//   the SA0 pin is tied to (GND or 3.3V respectively).
MMA8452Q::MMA8452Q(byte addr)
{
	address = addr; // Store address into private variable
   d7ad8:	7501      	strb	r1, [r0, #20]
}
   d7ada:	4770      	bx	lr

000d7adc <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>:

// WRITE MULTIPLE REGISTERS
//	Write an array of "len" bytes ("buffer"), starting at register "reg", and
//	auto-incrmenting to the next.
void MMA8452Q::writeRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
   d7adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ade:	4607      	mov	r7, r0
   d7ae0:	460c      	mov	r4, r1
   d7ae2:	4615      	mov	r5, r2
   d7ae4:	461e      	mov	r6, r3
	Wire.beginTransmission(address);
   d7ae6:	f003 ffc9 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7aea:	7d39      	ldrb	r1, [r7, #20]
   d7aec:	f001 fb72 	bl	d91d4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d7af0:	f003 ffc4 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7af4:	4621      	mov	r1, r4
   d7af6:	f7ff ffeb 	bl	d7ad0 <_ZN7TwoWire5writeEi>
	for (int x = 0; x < len; x++)
   d7afa:	2400      	movs	r4, #0
   d7afc:	42a6      	cmp	r6, r4
   d7afe:	dd07      	ble.n	d7b10 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x34>
		Wire.write(buffer[x]);
   d7b00:	f003 ffbc 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7b04:	6803      	ldr	r3, [r0, #0]
   d7b06:	5d29      	ldrb	r1, [r5, r4]
   d7b08:	689b      	ldr	r3, [r3, #8]
   d7b0a:	4798      	blx	r3
	for (int x = 0; x < len; x++)
   d7b0c:	3401      	adds	r4, #1
   d7b0e:	e7f5      	b.n	d7afc <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x20>
	Wire.endTransmission(); //Stop transmitting
   d7b10:	f003 ffb4 	bl	dba7c <_Z19__fetch_global_Wirev>
}
   d7b14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Wire.endTransmission(); //Stop transmitting
   d7b18:	f001 bb7f 	b.w	d921a <_ZN7TwoWire15endTransmissionEv>

000d7b1c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>:
{
   d7b1c:	b507      	push	{r0, r1, r2, lr}
	writeRegisters(reg, &data, 1);
   d7b1e:	2301      	movs	r3, #1
{
   d7b20:	f88d 2007 	strb.w	r2, [sp, #7]
	writeRegisters(reg, &data, 1);
   d7b24:	f10d 0207 	add.w	r2, sp, #7
   d7b28:	f7ff ffd8 	bl	d7adc <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>
}
   d7b2c:	b003      	add	sp, #12
   d7b2e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b32 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:

// READ A SINGLE REGISTER
//	Read a byte from the MMA8452Q register "reg".
byte MMA8452Q::readRegister(MMA8452Q_Register reg)
{
   d7b32:	b538      	push	{r3, r4, r5, lr}
   d7b34:	4604      	mov	r4, r0
   d7b36:	460d      	mov	r5, r1
	Wire.beginTransmission(address);
   d7b38:	f003 ffa0 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7b3c:	7d21      	ldrb	r1, [r4, #20]
   d7b3e:	f001 fb49 	bl	d91d4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d7b42:	f003 ff9b 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7b46:	4629      	mov	r1, r5
   d7b48:	f7ff ffc2 	bl	d7ad0 <_ZN7TwoWire5writeEi>
	//endTransmission but keep the connection active
	if (Wire.endTransmission(false) == 0)
   d7b4c:	f003 ff96 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7b50:	2100      	movs	r1, #0
   d7b52:	f001 fb5e 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
   d7b56:	b108      	cbz	r0, d7b5c <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x2a>
        //Ask for 1 byte, once done, bus is released by default
    	if (Wire.requestFrom(address, 1) == 1)
    	    return Wire.read();
	}
	
    return 0;
   d7b58:	2000      	movs	r0, #0
}
   d7b5a:	bd38      	pop	{r3, r4, r5, pc}
    	if (Wire.requestFrom(address, 1) == 1)
   d7b5c:	f003 ff8e 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7b60:	7d21      	ldrb	r1, [r4, #20]
   d7b62:	2201      	movs	r2, #1
   d7b64:	f001 fb33 	bl	d91ce <_ZN7TwoWire11requestFromEhj>
   d7b68:	2801      	cmp	r0, #1
   d7b6a:	d1f5      	bne.n	d7b58 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x26>
    	    return Wire.read();
   d7b6c:	f003 ff86 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7b70:	6803      	ldr	r3, [r0, #0]
   d7b72:	695b      	ldr	r3, [r3, #20]
   d7b74:	4798      	blx	r3
   d7b76:	b2c0      	uxtb	r0, r0
   d7b78:	e7ef      	b.n	d7b5a <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x28>

000d7b7a <_ZN8MMA8452Q9availableEv>:
{
   d7b7a:	b508      	push	{r3, lr}
	return (readRegister(STATUS) & 0x08) >> 3;
   d7b7c:	2100      	movs	r1, #0
   d7b7e:	f7ff ffd8 	bl	d7b32 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
}
   d7b82:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d7b86:	bd08      	pop	{r3, pc}

000d7b88 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:
{
   d7b88:	b538      	push	{r3, r4, r5, lr}
   d7b8a:	460d      	mov	r5, r1
	byte cfg = readRegister(XYZ_DATA_CFG);
   d7b8c:	210e      	movs	r1, #14
{
   d7b8e:	4604      	mov	r4, r0
	byte cfg = readRegister(XYZ_DATA_CFG);
   d7b90:	f7ff ffcf 	bl	d7b32 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	cfg &= 0xFC; // Mask out scale bits
   d7b94:	f020 0203 	bic.w	r2, r0, #3
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
   d7b98:	ea42 0295 	orr.w	r2, r2, r5, lsr #2
	writeRegister(XYZ_DATA_CFG, cfg);
   d7b9c:	4620      	mov	r0, r4
   d7b9e:	b2d2      	uxtb	r2, r2
}
   d7ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(XYZ_DATA_CFG, cfg);
   d7ba4:	210e      	movs	r1, #14
   d7ba6:	f7ff bfb9 	b.w	d7b1c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7baa <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
{
   d7baa:	b538      	push	{r3, r4, r5, lr}
   d7bac:	460d      	mov	r5, r1
	byte ctrl = readRegister(CTRL_REG1);
   d7bae:	212a      	movs	r1, #42	; 0x2a
{
   d7bb0:	4604      	mov	r4, r0
	byte ctrl = readRegister(CTRL_REG1);
   d7bb2:	f7ff ffbe 	bl	d7b32 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	ctrl &= 0xCF; // Mask out data rate bits
   d7bb6:	f020 0230 	bic.w	r2, r0, #48	; 0x30
	ctrl |= (odr << 3);
   d7bba:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
	writeRegister(CTRL_REG1, ctrl);
   d7bbe:	4620      	mov	r0, r4
   d7bc0:	b2d2      	uxtb	r2, r2
}
   d7bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(CTRL_REG1, ctrl);
   d7bc6:	212a      	movs	r1, #42	; 0x2a
   d7bc8:	f7ff bfa8 	b.w	d7b1c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7bcc <_ZN8MMA8452Q7setupPLEv>:
{
   d7bcc:	b510      	push	{r4, lr}
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d7bce:	2111      	movs	r1, #17
{
   d7bd0:	4604      	mov	r4, r0
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d7bd2:	f7ff ffae 	bl	d7b32 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
   d7bd6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   d7bda:	b2c2      	uxtb	r2, r0
   d7bdc:	2111      	movs	r1, #17
   d7bde:	4620      	mov	r0, r4
   d7be0:	f7ff ff9c 	bl	d7b1c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d7be4:	4620      	mov	r0, r4
   d7be6:	2250      	movs	r2, #80	; 0x50
}
   d7be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d7bec:	2112      	movs	r1, #18
   d7bee:	f7ff bf95 	b.w	d7b1c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7bf2 <_ZN8MMA8452Q7standbyEv>:
{
   d7bf2:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d7bf4:	212a      	movs	r1, #42	; 0x2a
{
   d7bf6:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d7bf8:	f7ff ff9b 	bl	d7b32 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d7bfc:	212a      	movs	r1, #42	; 0x2a
   d7bfe:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
   d7c02:	4620      	mov	r0, r4
}
   d7c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d7c08:	f7ff bf88 	b.w	d7b1c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7c0c <_ZN8MMA8452Q6activeEv>:
{
   d7c0c:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d7c0e:	212a      	movs	r1, #42	; 0x2a
{
   d7c10:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d7c12:	f7ff ff8e 	bl	d7b32 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d7c16:	f040 0001 	orr.w	r0, r0, #1
   d7c1a:	b2c2      	uxtb	r2, r0
   d7c1c:	212a      	movs	r1, #42	; 0x2a
   d7c1e:	4620      	mov	r0, r4
}
   d7c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d7c24:	f7ff bf7a 	b.w	d7b1c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d7c28 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>:
{
   d7c28:	b538      	push	{r3, r4, r5, lr}
	scale = fsr; // Haul fsr into our class variable, scale
   d7c2a:	7541      	strb	r1, [r0, #21]
{
   d7c2c:	4615      	mov	r5, r2
   d7c2e:	4604      	mov	r4, r0
	Wire.begin(); // Initialize I2C
   d7c30:	f003 ff24 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7c34:	f001 fa9c 	bl	d9170 <_ZN7TwoWire5beginEv>
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
   d7c38:	210d      	movs	r1, #13
   d7c3a:	4620      	mov	r0, r4
   d7c3c:	f7ff ff79 	bl	d7b32 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
   d7c40:	282a      	cmp	r0, #42	; 0x2a
   d7c42:	d112      	bne.n	d7c6a <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x42>
	standby();  // Must be in standby to change registers
   d7c44:	4620      	mov	r0, r4
   d7c46:	f7ff ffd4 	bl	d7bf2 <_ZN8MMA8452Q7standbyEv>
	setScale(scale);  // Set up accelerometer scale
   d7c4a:	7d61      	ldrb	r1, [r4, #21]
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	f7ff ff9b 	bl	d7b88 <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>
	setODR(odr);  // Set up output data rate
   d7c52:	4629      	mov	r1, r5
   d7c54:	4620      	mov	r0, r4
   d7c56:	f7ff ffa8 	bl	d7baa <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>
	setupPL();  // Set up portrait/landscape detection
   d7c5a:	4620      	mov	r0, r4
   d7c5c:	f7ff ffb6 	bl	d7bcc <_ZN8MMA8452Q7setupPLEv>
	active();  // Set to active to start reading
   d7c60:	4620      	mov	r0, r4
   d7c62:	f7ff ffd3 	bl	d7c0c <_ZN8MMA8452Q6activeEv>
   d7c66:	2001      	movs	r0, #1
}
   d7c68:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   d7c6a:	2000      	movs	r0, #0
   d7c6c:	e7fc      	b.n	d7c68 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x40>

000d7c6e <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh>:

// READ MULTIPLE REGISTERS
//	Read "len" bytes from the MMA8452Q, starting at register "reg". Bytes are stored
//	in "buffer" on exit.
byte MMA8452Q::readRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
   d7c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c70:	4606      	mov	r6, r0
   d7c72:	4617      	mov	r7, r2
   d7c74:	461d      	mov	r5, r3
   d7c76:	460c      	mov	r4, r1
	Wire.beginTransmission(address);
   d7c78:	f003 ff00 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7c7c:	7d31      	ldrb	r1, [r6, #20]
   d7c7e:	f001 faa9 	bl	d91d4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d7c82:	f003 fefb 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7c86:	4621      	mov	r1, r4
   d7c88:	f7ff ff22 	bl	d7ad0 <_ZN7TwoWire5writeEi>
	//endTransmission but keep the connection active
	if ( Wire.endTransmission(false) == 0)
   d7c8c:	f003 fef6 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7c90:	2100      	movs	r1, #0
   d7c92:	f001 fabe 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
   d7c96:	4604      	mov	r4, r0
   d7c98:	b988      	cbnz	r0, d7cbe <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x50>
	{
	     //Ask for bytes, once done, bus is released by default
    	if (Wire.requestFrom(address, len) == len)
   d7c9a:	f003 feef 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7c9e:	7d31      	ldrb	r1, [r6, #20]
   d7ca0:	462a      	mov	r2, r5
   d7ca2:	f001 fa94 	bl	d91ce <_ZN7TwoWire11requestFromEhj>
   d7ca6:	4285      	cmp	r5, r0
   d7ca8:	d109      	bne.n	d7cbe <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x50>
    	{
        	for(int x = 0 ; x < len ; x++)
   d7caa:	42a5      	cmp	r5, r4
   d7cac:	dd09      	ble.n	d7cc2 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x54>
        		buffer[x] = Wire.read();
   d7cae:	f003 fee5 	bl	dba7c <_Z19__fetch_global_Wirev>
   d7cb2:	6803      	ldr	r3, [r0, #0]
   d7cb4:	695b      	ldr	r3, [r3, #20]
   d7cb6:	4798      	blx	r3
   d7cb8:	5538      	strb	r0, [r7, r4]
        	for(int x = 0 ; x < len ; x++)
   d7cba:	3401      	adds	r4, #1
   d7cbc:	e7f5      	b.n	d7caa <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x3c>
        	return 1;
    	}
	}
	return 0;
   d7cbe:	2000      	movs	r0, #0
   d7cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7cc2:	2001      	movs	r0, #1
   d7cc4:	e7fc      	b.n	d7cc0 <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh+0x52>
	...

000d7cc8 <_ZN8MMA8452Q4readEv>:
{
   d7cc8:	b513      	push	{r0, r1, r4, lr}
	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
   d7cca:	2306      	movs	r3, #6
   d7ccc:	466a      	mov	r2, sp
   d7cce:	2101      	movs	r1, #1
{
   d7cd0:	4604      	mov	r4, r0
	readRegisters(OUT_X_MSB, rawData, 6);  // Read the six raw data registers into data array
   d7cd2:	f7ff ffcc 	bl	d7c6e <_ZN8MMA8452Q13readRegistersE17MMA8452Q_RegisterPhh>
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
   d7cd6:	f89d 3000 	ldrb.w	r3, [sp]
   d7cda:	f89d 1001 	ldrb.w	r1, [sp, #1]
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
   d7cde:	f89d 2003 	ldrb.w	r2, [sp, #3]
	z = ((short)(rawData[4]<<8 | rawData[5])) >> 4;
   d7ce2:	f89d 0004 	ldrb.w	r0, [sp, #4]
	cx = (float) x / (float)(1<<11) * (float)(scale);
   d7ce6:	ed9f 6a1d 	vldr	s12, [pc, #116]	; d7d5c <_ZN8MMA8452Q4readEv+0x94>
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
   d7cea:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
   d7cee:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d7cf2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	z = ((short)(rawData[4]<<8 | rawData[5])) >> 4;
   d7cf6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d7cfa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	cx = (float) x / (float)(1<<11) * (float)(scale);
   d7cfe:	7d60      	ldrb	r0, [r4, #21]
   d7d00:	ee07 0a90 	vmov	s15, r0
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
   d7d04:	f341 110b 	sbfx	r1, r1, #4, #12
	cx = (float) x / (float)(1<<11) * (float)(scale);
   d7d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
   d7d0c:	ee07 1a90 	vmov	s15, r1
   d7d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
   d7d14:	f342 120b 	sbfx	r2, r2, #4, #12
	cx = (float) x / (float)(1<<11) * (float)(scale);
   d7d18:	ee27 7a06 	vmul.f32	s14, s14, s12
	cy = (float) y / (float)(1<<11) * (float)(scale);
   d7d1c:	ee07 2a90 	vmov	s15, r2
	cx = (float) x / (float)(1<<11) * (float)(scale);
   d7d20:	ee27 7a26 	vmul.f32	s14, s14, s13
	z = ((short)(rawData[4]<<8 | rawData[5])) >> 4;
   d7d24:	f343 130b 	sbfx	r3, r3, #4, #12
	cx = (float) x / (float)(1<<11) * (float)(scale);
   d7d28:	ed84 7a02 	vstr	s14, [r4, #8]
	cy = (float) y / (float)(1<<11) * (float)(scale);
   d7d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	cz = (float) z / (float)(1<<11) * (float)(scale);
   d7d30:	ee07 3a90 	vmov	s15, r3
   d7d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	cy = (float) y / (float)(1<<11) * (float)(scale);
   d7d38:	ee27 7a06 	vmul.f32	s14, s14, s12
	cz = (float) z / (float)(1<<11) * (float)(scale);
   d7d3c:	ee67 7a86 	vmul.f32	s15, s15, s12
	cy = (float) y / (float)(1<<11) * (float)(scale);
   d7d40:	ee27 7a26 	vmul.f32	s14, s14, s13
	cz = (float) z / (float)(1<<11) * (float)(scale);
   d7d44:	ee67 7aa6 	vmul.f32	s15, s15, s13
	x = ((short)(rawData[0]<<8 | rawData[1])) >> 4;
   d7d48:	8021      	strh	r1, [r4, #0]
	y = ((short)(rawData[2]<<8 | rawData[3])) >> 4;
   d7d4a:	8062      	strh	r2, [r4, #2]
	z = ((short)(rawData[4]<<8 | rawData[5])) >> 4;
   d7d4c:	80a3      	strh	r3, [r4, #4]
	cy = (float) y / (float)(1<<11) * (float)(scale);
   d7d4e:	ed84 7a03 	vstr	s14, [r4, #12]
	cz = (float) z / (float)(1<<11) * (float)(scale);
   d7d52:	edc4 7a04 	vstr	s15, [r4, #16]
}
   d7d56:	b002      	add	sp, #8
   d7d58:	bd10      	pop	{r4, pc}
   d7d5a:	bf00      	nop
   d7d5c:	3a000000 	.word	0x3a000000

000d7d60 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7d60:	b508      	push	{r3, lr}
   d7d62:	4b02      	ldr	r3, [pc, #8]	; (d7d6c <cellular_signal+0xc>)
   d7d64:	681b      	ldr	r3, [r3, #0]
   d7d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7d68:	9301      	str	r3, [sp, #4]
   d7d6a:	bd08      	pop	{r3, pc}
   d7d6c:	00030274 	.word	0x00030274

000d7d70 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   d7d70:	b508      	push	{r3, lr}
   d7d72:	4b02      	ldr	r3, [pc, #8]	; (d7d7c <cellular_command+0xc>)
   d7d74:	681b      	ldr	r3, [r3, #0]
   d7d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7d78:	9301      	str	r3, [sp, #4]
   d7d7a:	bd08      	pop	{r3, pc}
   d7d7c:	00030274 	.word	0x00030274

000d7d80 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7d80:	b508      	push	{r3, lr}
   d7d82:	4b02      	ldr	r3, [pc, #8]	; (d7d8c <os_thread_create+0xc>)
   d7d84:	681b      	ldr	r3, [r3, #0]
   d7d86:	685b      	ldr	r3, [r3, #4]
   d7d88:	9301      	str	r3, [sp, #4]
   d7d8a:	bd08      	pop	{r3, pc}
   d7d8c:	00030248 	.word	0x00030248

000d7d90 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7d90:	b508      	push	{r3, lr}
   d7d92:	4b02      	ldr	r3, [pc, #8]	; (d7d9c <os_thread_yield+0xc>)
   d7d94:	681b      	ldr	r3, [r3, #0]
   d7d96:	68db      	ldr	r3, [r3, #12]
   d7d98:	9301      	str	r3, [sp, #4]
   d7d9a:	bd08      	pop	{r3, pc}
   d7d9c:	00030248 	.word	0x00030248

000d7da0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7da0:	b508      	push	{r3, lr}
   d7da2:	4b02      	ldr	r3, [pc, #8]	; (d7dac <os_thread_scheduling+0xc>)
   d7da4:	681b      	ldr	r3, [r3, #0]
   d7da6:	69db      	ldr	r3, [r3, #28]
   d7da8:	9301      	str	r3, [sp, #4]
   d7daa:	bd08      	pop	{r3, pc}
   d7dac:	00030248 	.word	0x00030248

000d7db0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7db0:	b508      	push	{r3, lr}
   d7db2:	4b02      	ldr	r3, [pc, #8]	; (d7dbc <os_timer_create+0xc>)
   d7db4:	681b      	ldr	r3, [r3, #0]
   d7db6:	6a1b      	ldr	r3, [r3, #32]
   d7db8:	9301      	str	r3, [sp, #4]
   d7dba:	bd08      	pop	{r3, pc}
   d7dbc:	00030248 	.word	0x00030248

000d7dc0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7dc0:	b508      	push	{r3, lr}
   d7dc2:	4b02      	ldr	r3, [pc, #8]	; (d7dcc <os_timer_destroy+0xc>)
   d7dc4:	681b      	ldr	r3, [r3, #0]
   d7dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7dc8:	9301      	str	r3, [sp, #4]
   d7dca:	bd08      	pop	{r3, pc}
   d7dcc:	00030248 	.word	0x00030248

000d7dd0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7dd0:	b508      	push	{r3, lr}
   d7dd2:	4b02      	ldr	r3, [pc, #8]	; (d7ddc <os_timer_get_id+0xc>)
   d7dd4:	681b      	ldr	r3, [r3, #0]
   d7dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7dd8:	9301      	str	r3, [sp, #4]
   d7dda:	bd08      	pop	{r3, pc}
   d7ddc:	00030248 	.word	0x00030248

000d7de0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7de0:	b508      	push	{r3, lr}
   d7de2:	4b02      	ldr	r3, [pc, #8]	; (d7dec <os_timer_change+0xc>)
   d7de4:	681b      	ldr	r3, [r3, #0]
   d7de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7de8:	9301      	str	r3, [sp, #4]
   d7dea:	bd08      	pop	{r3, pc}
   d7dec:	00030248 	.word	0x00030248

000d7df0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7df0:	b508      	push	{r3, lr}
   d7df2:	4b02      	ldr	r3, [pc, #8]	; (d7dfc <os_mutex_create+0xc>)
   d7df4:	681b      	ldr	r3, [r3, #0]
   d7df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7df8:	9301      	str	r3, [sp, #4]
   d7dfa:	bd08      	pop	{r3, pc}
   d7dfc:	00030248 	.word	0x00030248

000d7e00 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7e00:	b508      	push	{r3, lr}
   d7e02:	4b02      	ldr	r3, [pc, #8]	; (d7e0c <os_mutex_lock+0xc>)
   d7e04:	681b      	ldr	r3, [r3, #0]
   d7e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7e08:	9301      	str	r3, [sp, #4]
   d7e0a:	bd08      	pop	{r3, pc}
   d7e0c:	00030248 	.word	0x00030248

000d7e10 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7e10:	b508      	push	{r3, lr}
   d7e12:	4b02      	ldr	r3, [pc, #8]	; (d7e1c <os_mutex_unlock+0xc>)
   d7e14:	681b      	ldr	r3, [r3, #0]
   d7e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7e18:	9301      	str	r3, [sp, #4]
   d7e1a:	bd08      	pop	{r3, pc}
   d7e1c:	00030248 	.word	0x00030248

000d7e20 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7e20:	b508      	push	{r3, lr}
   d7e22:	4b02      	ldr	r3, [pc, #8]	; (d7e2c <os_mutex_recursive_create+0xc>)
   d7e24:	681b      	ldr	r3, [r3, #0]
   d7e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7e28:	9301      	str	r3, [sp, #4]
   d7e2a:	bd08      	pop	{r3, pc}
   d7e2c:	00030248 	.word	0x00030248

000d7e30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7e30:	b508      	push	{r3, lr}
   d7e32:	4b02      	ldr	r3, [pc, #8]	; (d7e3c <os_mutex_recursive_destroy+0xc>)
   d7e34:	681b      	ldr	r3, [r3, #0]
   d7e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7e38:	9301      	str	r3, [sp, #4]
   d7e3a:	bd08      	pop	{r3, pc}
   d7e3c:	00030248 	.word	0x00030248

000d7e40 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7e40:	b508      	push	{r3, lr}
   d7e42:	4b02      	ldr	r3, [pc, #8]	; (d7e4c <os_mutex_recursive_lock+0xc>)
   d7e44:	681b      	ldr	r3, [r3, #0]
   d7e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7e48:	9301      	str	r3, [sp, #4]
   d7e4a:	bd08      	pop	{r3, pc}
   d7e4c:	00030248 	.word	0x00030248

000d7e50 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7e50:	b508      	push	{r3, lr}
   d7e52:	4b02      	ldr	r3, [pc, #8]	; (d7e5c <os_mutex_recursive_unlock+0xc>)
   d7e54:	681b      	ldr	r3, [r3, #0]
   d7e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7e58:	9301      	str	r3, [sp, #4]
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	00030248 	.word	0x00030248

000d7e60 <os_timer_is_active>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d7e60:	b508      	push	{r3, lr}
   d7e62:	4b02      	ldr	r3, [pc, #8]	; (d7e6c <os_timer_is_active+0xc>)
   d7e64:	681b      	ldr	r3, [r3, #0]
   d7e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7e68:	9301      	str	r3, [sp, #4]
   d7e6a:	bd08      	pop	{r3, pc}
   d7e6c:	00030248 	.word	0x00030248

000d7e70 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7e70:	b508      	push	{r3, lr}
   d7e72:	4b02      	ldr	r3, [pc, #8]	; (d7e7c <os_thread_exit+0xc>)
   d7e74:	681b      	ldr	r3, [r3, #0]
   d7e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7e78:	9301      	str	r3, [sp, #4]
   d7e7a:	bd08      	pop	{r3, pc}
   d7e7c:	00030248 	.word	0x00030248

000d7e80 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7e80:	b508      	push	{r3, lr}
   d7e82:	4b02      	ldr	r3, [pc, #8]	; (d7e8c <os_timer_set_id+0xc>)
   d7e84:	681b      	ldr	r3, [r3, #0]
   d7e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7e88:	9301      	str	r3, [sp, #4]
   d7e8a:	bd08      	pop	{r3, pc}
   d7e8c:	00030248 	.word	0x00030248

000d7e90 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7e90:	b508      	push	{r3, lr}
   d7e92:	4b02      	ldr	r3, [pc, #8]	; (d7e9c <HAL_Feature_Set+0xc>)
   d7e94:	681b      	ldr	r3, [r3, #0]
   d7e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7e98:	9301      	str	r3, [sp, #4]
   d7e9a:	bd08      	pop	{r3, pc}
   d7e9c:	00030234 	.word	0x00030234

000d7ea0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7ea0:	b508      	push	{r3, lr}
   d7ea2:	4b02      	ldr	r3, [pc, #8]	; (d7eac <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7ea4:	681b      	ldr	r3, [r3, #0]
   d7ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7ea8:	9301      	str	r3, [sp, #4]
   d7eaa:	bd08      	pop	{r3, pc}
   d7eac:	00030234 	.word	0x00030234

000d7eb0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7eb0:	b508      	push	{r3, lr}
   d7eb2:	4b02      	ldr	r3, [pc, #8]	; (d7ebc <HAL_RNG_GetRandomNumber+0xc>)
   d7eb4:	681b      	ldr	r3, [r3, #0]
   d7eb6:	685b      	ldr	r3, [r3, #4]
   d7eb8:	9301      	str	r3, [sp, #4]
   d7eba:	bd08      	pop	{r3, pc}
   d7ebc:	00030218 	.word	0x00030218

000d7ec0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7ec0:	b508      	push	{r3, lr}
   d7ec2:	4b02      	ldr	r3, [pc, #8]	; (d7ecc <HAL_Delay_Milliseconds+0xc>)
   d7ec4:	681b      	ldr	r3, [r3, #0]
   d7ec6:	689b      	ldr	r3, [r3, #8]
   d7ec8:	9301      	str	r3, [sp, #4]
   d7eca:	bd08      	pop	{r3, pc}
   d7ecc:	00030218 	.word	0x00030218

000d7ed0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7ed0:	b508      	push	{r3, lr}
   d7ed2:	4b02      	ldr	r3, [pc, #8]	; (d7edc <HAL_Delay_Microseconds+0xc>)
   d7ed4:	681b      	ldr	r3, [r3, #0]
   d7ed6:	68db      	ldr	r3, [r3, #12]
   d7ed8:	9301      	str	r3, [sp, #4]
   d7eda:	bd08      	pop	{r3, pc}
   d7edc:	00030218 	.word	0x00030218

000d7ee0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7ee0:	b508      	push	{r3, lr}
   d7ee2:	4b02      	ldr	r3, [pc, #8]	; (d7eec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7ee4:	681b      	ldr	r3, [r3, #0]
   d7ee6:	695b      	ldr	r3, [r3, #20]
   d7ee8:	9301      	str	r3, [sp, #4]
   d7eea:	bd08      	pop	{r3, pc}
   d7eec:	00030218 	.word	0x00030218

000d7ef0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7ef0:	b508      	push	{r3, lr}
   d7ef2:	4b02      	ldr	r3, [pc, #8]	; (d7efc <hal_rtc_time_is_valid+0xc>)
   d7ef4:	681b      	ldr	r3, [r3, #0]
   d7ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7ef8:	9301      	str	r3, [sp, #4]
   d7efa:	bd08      	pop	{r3, pc}
   d7efc:	00030218 	.word	0x00030218

000d7f00 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7f00:	b508      	push	{r3, lr}
   d7f02:	4b02      	ldr	r3, [pc, #8]	; (d7f0c <hal_timer_millis+0xc>)
   d7f04:	681b      	ldr	r3, [r3, #0]
   d7f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7f08:	9301      	str	r3, [sp, #4]
   d7f0a:	bd08      	pop	{r3, pc}
   d7f0c:	00030218 	.word	0x00030218

000d7f10 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7f10:	b508      	push	{r3, lr}
   d7f12:	4b02      	ldr	r3, [pc, #8]	; (d7f1c <hal_rtc_get_time+0xc>)
   d7f14:	681b      	ldr	r3, [r3, #0]
   d7f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7f18:	9301      	str	r3, [sp, #4]
   d7f1a:	bd08      	pop	{r3, pc}
   d7f1c:	00030218 	.word	0x00030218

000d7f20 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7f20:	b508      	push	{r3, lr}
   d7f22:	4b02      	ldr	r3, [pc, #8]	; (d7f2c <hal_rtc_set_time+0xc>)
   d7f24:	681b      	ldr	r3, [r3, #0]
   d7f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7f28:	9301      	str	r3, [sp, #4]
   d7f2a:	bd08      	pop	{r3, pc}
   d7f2c:	00030218 	.word	0x00030218

000d7f30 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7f30:	b508      	push	{r3, lr}
   d7f32:	4b02      	ldr	r3, [pc, #8]	; (d7f3c <HAL_Pin_Map+0xc>)
   d7f34:	681b      	ldr	r3, [r3, #0]
   d7f36:	681b      	ldr	r3, [r3, #0]
   d7f38:	9301      	str	r3, [sp, #4]
   d7f3a:	bd08      	pop	{r3, pc}
   d7f3c:	0003022c 	.word	0x0003022c

000d7f40 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7f40:	b508      	push	{r3, lr}
   d7f42:	4b02      	ldr	r3, [pc, #8]	; (d7f4c <HAL_Validate_Pin_Function+0xc>)
   d7f44:	681b      	ldr	r3, [r3, #0]
   d7f46:	685b      	ldr	r3, [r3, #4]
   d7f48:	9301      	str	r3, [sp, #4]
   d7f4a:	bd08      	pop	{r3, pc}
   d7f4c:	0003022c 	.word	0x0003022c

000d7f50 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7f50:	b508      	push	{r3, lr}
   d7f52:	4b02      	ldr	r3, [pc, #8]	; (d7f5c <HAL_Pin_Mode+0xc>)
   d7f54:	681b      	ldr	r3, [r3, #0]
   d7f56:	689b      	ldr	r3, [r3, #8]
   d7f58:	9301      	str	r3, [sp, #4]
   d7f5a:	bd08      	pop	{r3, pc}
   d7f5c:	0003022c 	.word	0x0003022c

000d7f60 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7f60:	b508      	push	{r3, lr}
   d7f62:	4b02      	ldr	r3, [pc, #8]	; (d7f6c <HAL_Get_Pin_Mode+0xc>)
   d7f64:	681b      	ldr	r3, [r3, #0]
   d7f66:	68db      	ldr	r3, [r3, #12]
   d7f68:	9301      	str	r3, [sp, #4]
   d7f6a:	bd08      	pop	{r3, pc}
   d7f6c:	0003022c 	.word	0x0003022c

000d7f70 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7f70:	b508      	push	{r3, lr}
   d7f72:	4b02      	ldr	r3, [pc, #8]	; (d7f7c <HAL_GPIO_Write+0xc>)
   d7f74:	681b      	ldr	r3, [r3, #0]
   d7f76:	691b      	ldr	r3, [r3, #16]
   d7f78:	9301      	str	r3, [sp, #4]
   d7f7a:	bd08      	pop	{r3, pc}
   d7f7c:	0003022c 	.word	0x0003022c

000d7f80 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7f80:	b508      	push	{r3, lr}
   d7f82:	4b02      	ldr	r3, [pc, #8]	; (d7f8c <HAL_GPIO_Read+0xc>)
   d7f84:	681b      	ldr	r3, [r3, #0]
   d7f86:	695b      	ldr	r3, [r3, #20]
   d7f88:	9301      	str	r3, [sp, #4]
   d7f8a:	bd08      	pop	{r3, pc}
   d7f8c:	0003022c 	.word	0x0003022c

000d7f90 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7f90:	b508      	push	{r3, lr}
   d7f92:	4b02      	ldr	r3, [pc, #8]	; (d7f9c <HAL_Interrupts_Attach+0xc>)
   d7f94:	681b      	ldr	r3, [r3, #0]
   d7f96:	699b      	ldr	r3, [r3, #24]
   d7f98:	9301      	str	r3, [sp, #4]
   d7f9a:	bd08      	pop	{r3, pc}
   d7f9c:	0003022c 	.word	0x0003022c

000d7fa0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7fa0:	b508      	push	{r3, lr}
   d7fa2:	4b02      	ldr	r3, [pc, #8]	; (d7fac <HAL_Interrupts_Detach+0xc>)
   d7fa4:	681b      	ldr	r3, [r3, #0]
   d7fa6:	69db      	ldr	r3, [r3, #28]
   d7fa8:	9301      	str	r3, [sp, #4]
   d7faa:	bd08      	pop	{r3, pc}
   d7fac:	0003022c 	.word	0x0003022c

000d7fb0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7fb0:	b508      	push	{r3, lr}
   d7fb2:	4b02      	ldr	r3, [pc, #8]	; (d7fbc <hal_adc_read+0xc>)
   d7fb4:	681b      	ldr	r3, [r3, #0]
   d7fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7fb8:	9301      	str	r3, [sp, #4]
   d7fba:	bd08      	pop	{r3, pc}
   d7fbc:	0003022c 	.word	0x0003022c

000d7fc0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7fc0:	b508      	push	{r3, lr}
   d7fc2:	4b02      	ldr	r3, [pc, #8]	; (d7fcc <hal_i2c_begin+0xc>)
   d7fc4:	681b      	ldr	r3, [r3, #0]
   d7fc6:	68db      	ldr	r3, [r3, #12]
   d7fc8:	9301      	str	r3, [sp, #4]
   d7fca:	bd08      	pop	{r3, pc}
   d7fcc:	00030228 	.word	0x00030228

000d7fd0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7fd0:	b508      	push	{r3, lr}
   d7fd2:	4b02      	ldr	r3, [pc, #8]	; (d7fdc <hal_i2c_begin_transmission+0xc>)
   d7fd4:	681b      	ldr	r3, [r3, #0]
   d7fd6:	699b      	ldr	r3, [r3, #24]
   d7fd8:	9301      	str	r3, [sp, #4]
   d7fda:	bd08      	pop	{r3, pc}
   d7fdc:	00030228 	.word	0x00030228

000d7fe0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7fe0:	b508      	push	{r3, lr}
   d7fe2:	4b02      	ldr	r3, [pc, #8]	; (d7fec <hal_i2c_end_transmission+0xc>)
   d7fe4:	681b      	ldr	r3, [r3, #0]
   d7fe6:	69db      	ldr	r3, [r3, #28]
   d7fe8:	9301      	str	r3, [sp, #4]
   d7fea:	bd08      	pop	{r3, pc}
   d7fec:	00030228 	.word	0x00030228

000d7ff0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7ff0:	b508      	push	{r3, lr}
   d7ff2:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <hal_i2c_write+0xc>)
   d7ff4:	681b      	ldr	r3, [r3, #0]
   d7ff6:	6a1b      	ldr	r3, [r3, #32]
   d7ff8:	9301      	str	r3, [sp, #4]
   d7ffa:	bd08      	pop	{r3, pc}
   d7ffc:	00030228 	.word	0x00030228

000d8000 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d8000:	b508      	push	{r3, lr}
   d8002:	4b02      	ldr	r3, [pc, #8]	; (d800c <hal_i2c_available+0xc>)
   d8004:	681b      	ldr	r3, [r3, #0]
   d8006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8008:	9301      	str	r3, [sp, #4]
   d800a:	bd08      	pop	{r3, pc}
   d800c:	00030228 	.word	0x00030228

000d8010 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d8010:	b508      	push	{r3, lr}
   d8012:	4b02      	ldr	r3, [pc, #8]	; (d801c <hal_i2c_read+0xc>)
   d8014:	681b      	ldr	r3, [r3, #0]
   d8016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8018:	9301      	str	r3, [sp, #4]
   d801a:	bd08      	pop	{r3, pc}
   d801c:	00030228 	.word	0x00030228

000d8020 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d8020:	b508      	push	{r3, lr}
   d8022:	4b02      	ldr	r3, [pc, #8]	; (d802c <hal_i2c_peek+0xc>)
   d8024:	681b      	ldr	r3, [r3, #0]
   d8026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8028:	9301      	str	r3, [sp, #4]
   d802a:	bd08      	pop	{r3, pc}
   d802c:	00030228 	.word	0x00030228

000d8030 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8030:	b508      	push	{r3, lr}
   d8032:	4b02      	ldr	r3, [pc, #8]	; (d803c <hal_i2c_flush+0xc>)
   d8034:	681b      	ldr	r3, [r3, #0]
   d8036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8038:	9301      	str	r3, [sp, #4]
   d803a:	bd08      	pop	{r3, pc}
   d803c:	00030228 	.word	0x00030228

000d8040 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8040:	b508      	push	{r3, lr}
   d8042:	4b02      	ldr	r3, [pc, #8]	; (d804c <hal_i2c_is_enabled+0xc>)
   d8044:	681b      	ldr	r3, [r3, #0]
   d8046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8048:	9301      	str	r3, [sp, #4]
   d804a:	bd08      	pop	{r3, pc}
   d804c:	00030228 	.word	0x00030228

000d8050 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8050:	b508      	push	{r3, lr}
   d8052:	4b02      	ldr	r3, [pc, #8]	; (d805c <hal_i2c_init+0xc>)
   d8054:	681b      	ldr	r3, [r3, #0]
   d8056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8058:	9301      	str	r3, [sp, #4]
   d805a:	bd08      	pop	{r3, pc}
   d805c:	00030228 	.word	0x00030228

000d8060 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d8060:	b508      	push	{r3, lr}
   d8062:	4b02      	ldr	r3, [pc, #8]	; (d806c <hal_i2c_lock+0xc>)
   d8064:	681b      	ldr	r3, [r3, #0]
   d8066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8068:	9301      	str	r3, [sp, #4]
   d806a:	bd08      	pop	{r3, pc}
   d806c:	00030228 	.word	0x00030228

000d8070 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d8070:	b508      	push	{r3, lr}
   d8072:	4b02      	ldr	r3, [pc, #8]	; (d807c <hal_i2c_unlock+0xc>)
   d8074:	681b      	ldr	r3, [r3, #0]
   d8076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8078:	9301      	str	r3, [sp, #4]
   d807a:	bd08      	pop	{r3, pc}
   d807c:	00030228 	.word	0x00030228

000d8080 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8080:	b508      	push	{r3, lr}
   d8082:	4b02      	ldr	r3, [pc, #8]	; (d808c <hal_i2c_request_ex+0xc>)
   d8084:	681b      	ldr	r3, [r3, #0]
   d8086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8088:	9301      	str	r3, [sp, #4]
   d808a:	bd08      	pop	{r3, pc}
   d808c:	00030228 	.word	0x00030228

000d8090 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8090:	b508      	push	{r3, lr}
   d8092:	4b02      	ldr	r3, [pc, #8]	; (d809c <inet_inet_ntop+0xc>)
   d8094:	681b      	ldr	r3, [r3, #0]
   d8096:	695b      	ldr	r3, [r3, #20]
   d8098:	9301      	str	r3, [sp, #4]
   d809a:	bd08      	pop	{r3, pc}
   d809c:	00030264 	.word	0x00030264

000d80a0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d80a0:	b508      	push	{r3, lr}
   d80a2:	4b02      	ldr	r3, [pc, #8]	; (d80ac <netdb_freeaddrinfo+0xc>)
   d80a4:	681b      	ldr	r3, [r3, #0]
   d80a6:	689b      	ldr	r3, [r3, #8]
   d80a8:	9301      	str	r3, [sp, #4]
   d80aa:	bd08      	pop	{r3, pc}
   d80ac:	00030268 	.word	0x00030268

000d80b0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d80b0:	b508      	push	{r3, lr}
   d80b2:	4b02      	ldr	r3, [pc, #8]	; (d80bc <netdb_getaddrinfo+0xc>)
   d80b4:	681b      	ldr	r3, [r3, #0]
   d80b6:	68db      	ldr	r3, [r3, #12]
   d80b8:	9301      	str	r3, [sp, #4]
   d80ba:	bd08      	pop	{r3, pc}
   d80bc:	00030268 	.word	0x00030268

000d80c0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d80c0:	b508      	push	{r3, lr}
   d80c2:	4b02      	ldr	r3, [pc, #8]	; (d80cc <hal_spi_init+0xc>)
   d80c4:	681b      	ldr	r3, [r3, #0]
   d80c6:	69db      	ldr	r3, [r3, #28]
   d80c8:	9301      	str	r3, [sp, #4]
   d80ca:	bd08      	pop	{r3, pc}
   d80cc:	00030230 	.word	0x00030230

000d80d0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d80d0:	b508      	push	{r3, lr}
   d80d2:	4b02      	ldr	r3, [pc, #8]	; (d80dc <hal_spi_is_enabled+0xc>)
   d80d4:	681b      	ldr	r3, [r3, #0]
   d80d6:	6a1b      	ldr	r3, [r3, #32]
   d80d8:	9301      	str	r3, [sp, #4]
   d80da:	bd08      	pop	{r3, pc}
   d80dc:	00030230 	.word	0x00030230

000d80e0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d80e0:	b508      	push	{r3, lr}
   d80e2:	4b02      	ldr	r3, [pc, #8]	; (d80ec <hal_usart_init+0xc>)
   d80e4:	681b      	ldr	r3, [r3, #0]
   d80e6:	681b      	ldr	r3, [r3, #0]
   d80e8:	9301      	str	r3, [sp, #4]
   d80ea:	bd08      	pop	{r3, pc}
   d80ec:	0003023c 	.word	0x0003023c

000d80f0 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d80f0:	b508      	push	{r3, lr}
   d80f2:	4b02      	ldr	r3, [pc, #8]	; (d80fc <hal_usart_end+0xc>)
   d80f4:	681b      	ldr	r3, [r3, #0]
   d80f6:	689b      	ldr	r3, [r3, #8]
   d80f8:	9301      	str	r3, [sp, #4]
   d80fa:	bd08      	pop	{r3, pc}
   d80fc:	0003023c 	.word	0x0003023c

000d8100 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8100:	b508      	push	{r3, lr}
   d8102:	4b02      	ldr	r3, [pc, #8]	; (d810c <hal_usart_write+0xc>)
   d8104:	681b      	ldr	r3, [r3, #0]
   d8106:	68db      	ldr	r3, [r3, #12]
   d8108:	9301      	str	r3, [sp, #4]
   d810a:	bd08      	pop	{r3, pc}
   d810c:	0003023c 	.word	0x0003023c

000d8110 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8110:	b508      	push	{r3, lr}
   d8112:	4b02      	ldr	r3, [pc, #8]	; (d811c <hal_usart_available+0xc>)
   d8114:	681b      	ldr	r3, [r3, #0]
   d8116:	691b      	ldr	r3, [r3, #16]
   d8118:	9301      	str	r3, [sp, #4]
   d811a:	bd08      	pop	{r3, pc}
   d811c:	0003023c 	.word	0x0003023c

000d8120 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d8120:	b508      	push	{r3, lr}
   d8122:	4b02      	ldr	r3, [pc, #8]	; (d812c <hal_usart_read+0xc>)
   d8124:	681b      	ldr	r3, [r3, #0]
   d8126:	695b      	ldr	r3, [r3, #20]
   d8128:	9301      	str	r3, [sp, #4]
   d812a:	bd08      	pop	{r3, pc}
   d812c:	0003023c 	.word	0x0003023c

000d8130 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d8130:	b508      	push	{r3, lr}
   d8132:	4b02      	ldr	r3, [pc, #8]	; (d813c <hal_usart_peek+0xc>)
   d8134:	681b      	ldr	r3, [r3, #0]
   d8136:	699b      	ldr	r3, [r3, #24]
   d8138:	9301      	str	r3, [sp, #4]
   d813a:	bd08      	pop	{r3, pc}
   d813c:	0003023c 	.word	0x0003023c

000d8140 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8140:	b508      	push	{r3, lr}
   d8142:	4b02      	ldr	r3, [pc, #8]	; (d814c <hal_usart_flush+0xc>)
   d8144:	681b      	ldr	r3, [r3, #0]
   d8146:	69db      	ldr	r3, [r3, #28]
   d8148:	9301      	str	r3, [sp, #4]
   d814a:	bd08      	pop	{r3, pc}
   d814c:	0003023c 	.word	0x0003023c

000d8150 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8150:	b508      	push	{r3, lr}
   d8152:	4b02      	ldr	r3, [pc, #8]	; (d815c <hal_usart_is_enabled+0xc>)
   d8154:	681b      	ldr	r3, [r3, #0]
   d8156:	6a1b      	ldr	r3, [r3, #32]
   d8158:	9301      	str	r3, [sp, #4]
   d815a:	bd08      	pop	{r3, pc}
   d815c:	0003023c 	.word	0x0003023c

000d8160 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8160:	b508      	push	{r3, lr}
   d8162:	4b02      	ldr	r3, [pc, #8]	; (d816c <hal_usart_available_data_for_write+0xc>)
   d8164:	681b      	ldr	r3, [r3, #0]
   d8166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8168:	9301      	str	r3, [sp, #4]
   d816a:	bd08      	pop	{r3, pc}
   d816c:	0003023c 	.word	0x0003023c

000d8170 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d8170:	b508      	push	{r3, lr}
   d8172:	4b02      	ldr	r3, [pc, #8]	; (d817c <hal_usart_begin_config+0xc>)
   d8174:	681b      	ldr	r3, [r3, #0]
   d8176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8178:	9301      	str	r3, [sp, #4]
   d817a:	bd08      	pop	{r3, pc}
   d817c:	0003023c 	.word	0x0003023c

000d8180 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8180:	b508      	push	{r3, lr}
   d8182:	4b02      	ldr	r3, [pc, #8]	; (d818c <HAL_USB_USART_Init+0xc>)
   d8184:	681b      	ldr	r3, [r3, #0]
   d8186:	681b      	ldr	r3, [r3, #0]
   d8188:	9301      	str	r3, [sp, #4]
   d818a:	bd08      	pop	{r3, pc}
   d818c:	0003024c 	.word	0x0003024c

000d8190 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8190:	b508      	push	{r3, lr}
   d8192:	4b02      	ldr	r3, [pc, #8]	; (d819c <HAL_USB_USART_Begin+0xc>)
   d8194:	681b      	ldr	r3, [r3, #0]
   d8196:	685b      	ldr	r3, [r3, #4]
   d8198:	9301      	str	r3, [sp, #4]
   d819a:	bd08      	pop	{r3, pc}
   d819c:	0003024c 	.word	0x0003024c

000d81a0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d81a0:	b508      	push	{r3, lr}
   d81a2:	4b02      	ldr	r3, [pc, #8]	; (d81ac <HAL_USB_USART_End+0xc>)
   d81a4:	681b      	ldr	r3, [r3, #0]
   d81a6:	689b      	ldr	r3, [r3, #8]
   d81a8:	9301      	str	r3, [sp, #4]
   d81aa:	bd08      	pop	{r3, pc}
   d81ac:	0003024c 	.word	0x0003024c

000d81b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d81b0:	b508      	push	{r3, lr}
   d81b2:	4b02      	ldr	r3, [pc, #8]	; (d81bc <HAL_USB_USART_Available_Data+0xc>)
   d81b4:	681b      	ldr	r3, [r3, #0]
   d81b6:	691b      	ldr	r3, [r3, #16]
   d81b8:	9301      	str	r3, [sp, #4]
   d81ba:	bd08      	pop	{r3, pc}
   d81bc:	0003024c 	.word	0x0003024c

000d81c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d81c0:	b508      	push	{r3, lr}
   d81c2:	4b02      	ldr	r3, [pc, #8]	; (d81cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d81c4:	681b      	ldr	r3, [r3, #0]
   d81c6:	695b      	ldr	r3, [r3, #20]
   d81c8:	9301      	str	r3, [sp, #4]
   d81ca:	bd08      	pop	{r3, pc}
   d81cc:	0003024c 	.word	0x0003024c

000d81d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d81d0:	b508      	push	{r3, lr}
   d81d2:	4b02      	ldr	r3, [pc, #8]	; (d81dc <HAL_USB_USART_Receive_Data+0xc>)
   d81d4:	681b      	ldr	r3, [r3, #0]
   d81d6:	699b      	ldr	r3, [r3, #24]
   d81d8:	9301      	str	r3, [sp, #4]
   d81da:	bd08      	pop	{r3, pc}
   d81dc:	0003024c 	.word	0x0003024c

000d81e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d81e0:	b508      	push	{r3, lr}
   d81e2:	4b02      	ldr	r3, [pc, #8]	; (d81ec <HAL_USB_USART_Send_Data+0xc>)
   d81e4:	681b      	ldr	r3, [r3, #0]
   d81e6:	69db      	ldr	r3, [r3, #28]
   d81e8:	9301      	str	r3, [sp, #4]
   d81ea:	bd08      	pop	{r3, pc}
   d81ec:	0003024c 	.word	0x0003024c

000d81f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d81f0:	b508      	push	{r3, lr}
   d81f2:	4b02      	ldr	r3, [pc, #8]	; (d81fc <HAL_USB_USART_Flush_Data+0xc>)
   d81f4:	681b      	ldr	r3, [r3, #0]
   d81f6:	6a1b      	ldr	r3, [r3, #32]
   d81f8:	9301      	str	r3, [sp, #4]
   d81fa:	bd08      	pop	{r3, pc}
   d81fc:	0003024c 	.word	0x0003024c

000d8200 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8200:	b508      	push	{r3, lr}
   d8202:	4b02      	ldr	r3, [pc, #8]	; (d820c <panic_+0xc>)
   d8204:	681b      	ldr	r3, [r3, #0]
   d8206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8208:	9301      	str	r3, [sp, #4]
   d820a:	bd08      	pop	{r3, pc}
   d820c:	00030260 	.word	0x00030260

000d8210 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8210:	b508      	push	{r3, lr}
   d8212:	4b02      	ldr	r3, [pc, #8]	; (d821c <log_message+0xc>)
   d8214:	681b      	ldr	r3, [r3, #0]
   d8216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8218:	9301      	str	r3, [sp, #4]
   d821a:	bd08      	pop	{r3, pc}
   d821c:	00030260 	.word	0x00030260

000d8220 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8220:	b508      	push	{r3, lr}
   d8222:	4b02      	ldr	r3, [pc, #8]	; (d822c <log_message_v+0xc>)
   d8224:	681b      	ldr	r3, [r3, #0]
   d8226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8228:	9301      	str	r3, [sp, #4]
   d822a:	bd08      	pop	{r3, pc}
   d822c:	00030260 	.word	0x00030260

000d8230 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d8230:	b508      	push	{r3, lr}
   d8232:	4b02      	ldr	r3, [pc, #8]	; (d823c <log_level_name+0xc>)
   d8234:	681b      	ldr	r3, [r3, #0]
   d8236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8238:	9301      	str	r3, [sp, #4]
   d823a:	bd08      	pop	{r3, pc}
   d823c:	00030260 	.word	0x00030260

000d8240 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d8240:	b508      	push	{r3, lr}
   d8242:	4b02      	ldr	r3, [pc, #8]	; (d824c <log_set_callbacks+0xc>)
   d8244:	681b      	ldr	r3, [r3, #0]
   d8246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d8248:	9301      	str	r3, [sp, #4]
   d824a:	bd08      	pop	{r3, pc}
   d824c:	00030260 	.word	0x00030260

000d8250 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8250:	b508      	push	{r3, lr}
   d8252:	4b03      	ldr	r3, [pc, #12]	; (d8260 <diag_get_source+0x10>)
   d8254:	681b      	ldr	r3, [r3, #0]
   d8256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d825a:	9301      	str	r3, [sp, #4]
   d825c:	bd08      	pop	{r3, pc}
   d825e:	0000      	.short	0x0000
   d8260:	00030260 	.word	0x00030260

000d8264 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8264:	b508      	push	{r3, lr}
   d8266:	4b02      	ldr	r3, [pc, #8]	; (d8270 <system_mode+0xc>)
   d8268:	681b      	ldr	r3, [r3, #0]
   d826a:	681b      	ldr	r3, [r3, #0]
   d826c:	9301      	str	r3, [sp, #4]
   d826e:	bd08      	pop	{r3, pc}
   d8270:	00030220 	.word	0x00030220

000d8274 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8274:	b508      	push	{r3, lr}
   d8276:	4b02      	ldr	r3, [pc, #8]	; (d8280 <set_system_mode+0xc>)
   d8278:	681b      	ldr	r3, [r3, #0]
   d827a:	685b      	ldr	r3, [r3, #4]
   d827c:	9301      	str	r3, [sp, #4]
   d827e:	bd08      	pop	{r3, pc}
   d8280:	00030220 	.word	0x00030220

000d8284 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8284:	b508      	push	{r3, lr}
   d8286:	4b02      	ldr	r3, [pc, #8]	; (d8290 <system_delay_ms+0xc>)
   d8288:	681b      	ldr	r3, [r3, #0]
   d828a:	695b      	ldr	r3, [r3, #20]
   d828c:	9301      	str	r3, [sp, #4]
   d828e:	bd08      	pop	{r3, pc}
   d8290:	00030220 	.word	0x00030220

000d8294 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d8294:	b508      	push	{r3, lr}
   d8296:	4b02      	ldr	r3, [pc, #8]	; (d82a0 <system_sleep+0xc>)
   d8298:	681b      	ldr	r3, [r3, #0]
   d829a:	699b      	ldr	r3, [r3, #24]
   d829c:	9301      	str	r3, [sp, #4]
   d829e:	bd08      	pop	{r3, pc}
   d82a0:	00030220 	.word	0x00030220

000d82a4 <system_subscribe_event>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d82a4:	b508      	push	{r3, lr}
   d82a6:	4b02      	ldr	r3, [pc, #8]	; (d82b0 <system_subscribe_event+0xc>)
   d82a8:	681b      	ldr	r3, [r3, #0]
   d82aa:	6a1b      	ldr	r3, [r3, #32]
   d82ac:	9301      	str	r3, [sp, #4]
   d82ae:	bd08      	pop	{r3, pc}
   d82b0:	00030220 	.word	0x00030220

000d82b4 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d82b4:	b508      	push	{r3, lr}
   d82b6:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <system_thread_set_state+0xc>)
   d82b8:	681b      	ldr	r3, [r3, #0]
   d82ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d82bc:	9301      	str	r3, [sp, #4]
   d82be:	bd08      	pop	{r3, pc}
   d82c0:	00030220 	.word	0x00030220

000d82c4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d82c4:	b508      	push	{r3, lr}
   d82c6:	4b02      	ldr	r3, [pc, #8]	; (d82d0 <application_thread_current+0xc>)
   d82c8:	681b      	ldr	r3, [r3, #0]
   d82ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d82cc:	9301      	str	r3, [sp, #4]
   d82ce:	bd08      	pop	{r3, pc}
   d82d0:	00030220 	.word	0x00030220

000d82d4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d82d4:	b508      	push	{r3, lr}
   d82d6:	4b02      	ldr	r3, [pc, #8]	; (d82e0 <application_thread_invoke+0xc>)
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	bd08      	pop	{r3, pc}
   d82e0:	00030220 	.word	0x00030220

000d82e4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d82e4:	b508      	push	{r3, lr}
   d82e6:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <system_thread_get_state+0xc>)
   d82e8:	681b      	ldr	r3, [r3, #0]
   d82ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d82ec:	9301      	str	r3, [sp, #4]
   d82ee:	bd08      	pop	{r3, pc}
   d82f0:	00030220 	.word	0x00030220

000d82f4 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d82f4:	b508      	push	{r3, lr}
   d82f6:	4b02      	ldr	r3, [pc, #8]	; (d8300 <system_notify_time_changed+0xc>)
   d82f8:	681b      	ldr	r3, [r3, #0]
   d82fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d82fc:	9301      	str	r3, [sp, #4]
   d82fe:	bd08      	pop	{r3, pc}
   d8300:	00030220 	.word	0x00030220

000d8304 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b03      	ldr	r3, [pc, #12]	; (d8314 <system_ctrl_set_app_request_handler+0x10>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d830e:	9301      	str	r3, [sp, #4]
   d8310:	bd08      	pop	{r3, pc}
   d8312:	0000      	.short	0x0000
   d8314:	00030220 	.word	0x00030220

000d8318 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8318:	b508      	push	{r3, lr}
   d831a:	4b03      	ldr	r3, [pc, #12]	; (d8328 <system_ctrl_set_result+0x10>)
   d831c:	681b      	ldr	r3, [r3, #0]
   d831e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8322:	9301      	str	r3, [sp, #4]
   d8324:	bd08      	pop	{r3, pc}
   d8326:	0000      	.short	0x0000
   d8328:	00030220 	.word	0x00030220

000d832c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d832c:	b508      	push	{r3, lr}
   d832e:	4b03      	ldr	r3, [pc, #12]	; (d833c <system_power_management_set_config+0x10>)
   d8330:	681b      	ldr	r3, [r3, #0]
   d8332:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d8336:	9301      	str	r3, [sp, #4]
   d8338:	bd08      	pop	{r3, pc}
   d833a:	0000      	.short	0x0000
   d833c:	00030220 	.word	0x00030220

000d8340 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d8340:	b508      	push	{r3, lr}
   d8342:	4b03      	ldr	r3, [pc, #12]	; (d8350 <system_sleep_ext+0x10>)
   d8344:	681b      	ldr	r3, [r3, #0]
   d8346:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d834a:	9301      	str	r3, [sp, #4]
   d834c:	bd08      	pop	{r3, pc}
   d834e:	0000      	.short	0x0000
   d8350:	00030220 	.word	0x00030220

000d8354 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d8354:	b508      	push	{r3, lr}
   d8356:	4b03      	ldr	r3, [pc, #12]	; (d8364 <system_reset+0x10>)
   d8358:	681b      	ldr	r3, [r3, #0]
   d835a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d835e:	9301      	str	r3, [sp, #4]
   d8360:	bd08      	pop	{r3, pc}
   d8362:	0000      	.short	0x0000
   d8364:	00030220 	.word	0x00030220

000d8368 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d8368:	b508      	push	{r3, lr}
   d836a:	4b02      	ldr	r3, [pc, #8]	; (d8374 <spark_variable+0xc>)
   d836c:	681b      	ldr	r3, [r3, #0]
   d836e:	681b      	ldr	r3, [r3, #0]
   d8370:	9301      	str	r3, [sp, #4]
   d8372:	bd08      	pop	{r3, pc}
   d8374:	00030244 	.word	0x00030244

000d8378 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d8378:	b508      	push	{r3, lr}
   d837a:	4b02      	ldr	r3, [pc, #8]	; (d8384 <spark_function+0xc>)
   d837c:	681b      	ldr	r3, [r3, #0]
   d837e:	685b      	ldr	r3, [r3, #4]
   d8380:	9301      	str	r3, [sp, #4]
   d8382:	bd08      	pop	{r3, pc}
   d8384:	00030244 	.word	0x00030244

000d8388 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8388:	b508      	push	{r3, lr}
   d838a:	4b02      	ldr	r3, [pc, #8]	; (d8394 <spark_process+0xc>)
   d838c:	681b      	ldr	r3, [r3, #0]
   d838e:	689b      	ldr	r3, [r3, #8]
   d8390:	9301      	str	r3, [sp, #4]
   d8392:	bd08      	pop	{r3, pc}
   d8394:	00030244 	.word	0x00030244

000d8398 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8398:	b508      	push	{r3, lr}
   d839a:	4b02      	ldr	r3, [pc, #8]	; (d83a4 <spark_cloud_flag_connect+0xc>)
   d839c:	681b      	ldr	r3, [r3, #0]
   d839e:	68db      	ldr	r3, [r3, #12]
   d83a0:	9301      	str	r3, [sp, #4]
   d83a2:	bd08      	pop	{r3, pc}
   d83a4:	00030244 	.word	0x00030244

000d83a8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d83a8:	b508      	push	{r3, lr}
   d83aa:	4b02      	ldr	r3, [pc, #8]	; (d83b4 <spark_cloud_flag_connected+0xc>)
   d83ac:	681b      	ldr	r3, [r3, #0]
   d83ae:	695b      	ldr	r3, [r3, #20]
   d83b0:	9301      	str	r3, [sp, #4]
   d83b2:	bd08      	pop	{r3, pc}
   d83b4:	00030244 	.word	0x00030244

000d83b8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d83b8:	b508      	push	{r3, lr}
   d83ba:	4b02      	ldr	r3, [pc, #8]	; (d83c4 <spark_deviceID+0xc>)
   d83bc:	681b      	ldr	r3, [r3, #0]
   d83be:	69db      	ldr	r3, [r3, #28]
   d83c0:	9301      	str	r3, [sp, #4]
   d83c2:	bd08      	pop	{r3, pc}
   d83c4:	00030244 	.word	0x00030244

000d83c8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d83c8:	b508      	push	{r3, lr}
   d83ca:	4b02      	ldr	r3, [pc, #8]	; (d83d4 <spark_send_event+0xc>)
   d83cc:	681b      	ldr	r3, [r3, #0]
   d83ce:	6a1b      	ldr	r3, [r3, #32]
   d83d0:	9301      	str	r3, [sp, #4]
   d83d2:	bd08      	pop	{r3, pc}
   d83d4:	00030244 	.word	0x00030244

000d83d8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d83d8:	b508      	push	{r3, lr}
   d83da:	4b02      	ldr	r3, [pc, #8]	; (d83e4 <spark_subscribe+0xc>)
   d83dc:	681b      	ldr	r3, [r3, #0]
   d83de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83e0:	9301      	str	r3, [sp, #4]
   d83e2:	bd08      	pop	{r3, pc}
   d83e4:	00030244 	.word	0x00030244

000d83e8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d83e8:	b508      	push	{r3, lr}
   d83ea:	4b02      	ldr	r3, [pc, #8]	; (d83f4 <spark_sync_time+0xc>)
   d83ec:	681b      	ldr	r3, [r3, #0]
   d83ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83f0:	9301      	str	r3, [sp, #4]
   d83f2:	bd08      	pop	{r3, pc}
   d83f4:	00030244 	.word	0x00030244

000d83f8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d83f8:	b508      	push	{r3, lr}
   d83fa:	4b02      	ldr	r3, [pc, #8]	; (d8404 <spark_sync_time_pending+0xc>)
   d83fc:	681b      	ldr	r3, [r3, #0]
   d83fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8400:	9301      	str	r3, [sp, #4]
   d8402:	bd08      	pop	{r3, pc}
   d8404:	00030244 	.word	0x00030244

000d8408 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d8408:	b508      	push	{r3, lr}
   d840a:	4b02      	ldr	r3, [pc, #8]	; (d8414 <spark_sync_time_last+0xc>)
   d840c:	681b      	ldr	r3, [r3, #0]
   d840e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8410:	9301      	str	r3, [sp, #4]
   d8412:	bd08      	pop	{r3, pc}
   d8414:	00030244 	.word	0x00030244

000d8418 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d8418:	b508      	push	{r3, lr}
   d841a:	4b02      	ldr	r3, [pc, #8]	; (d8424 <spark_set_connection_property+0xc>)
   d841c:	681b      	ldr	r3, [r3, #0]
   d841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d8420:	9301      	str	r3, [sp, #4]
   d8422:	bd08      	pop	{r3, pc}
   d8424:	00030244 	.word	0x00030244

000d8428 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8428:	b508      	push	{r3, lr}
   d842a:	4b02      	ldr	r3, [pc, #8]	; (d8434 <spark_set_random_seed_from_cloud_handler+0xc>)
   d842c:	681b      	ldr	r3, [r3, #0]
   d842e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8430:	9301      	str	r3, [sp, #4]
   d8432:	bd08      	pop	{r3, pc}
   d8434:	00030244 	.word	0x00030244

000d8438 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d8438:	b508      	push	{r3, lr}
   d843a:	4b02      	ldr	r3, [pc, #8]	; (d8444 <spark_cloud_disconnect+0xc>)
   d843c:	681b      	ldr	r3, [r3, #0]
   d843e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8440:	9301      	str	r3, [sp, #4]
   d8442:	bd08      	pop	{r3, pc}
   d8444:	00030244 	.word	0x00030244

000d8448 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8448:	b508      	push	{r3, lr}
   d844a:	4b02      	ldr	r3, [pc, #8]	; (d8454 <network_connect+0xc>)
   d844c:	681b      	ldr	r3, [r3, #0]
   d844e:	685b      	ldr	r3, [r3, #4]
   d8450:	9301      	str	r3, [sp, #4]
   d8452:	bd08      	pop	{r3, pc}
   d8454:	00030240 	.word	0x00030240

000d8458 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8458:	b508      	push	{r3, lr}
   d845a:	4b02      	ldr	r3, [pc, #8]	; (d8464 <network_connecting+0xc>)
   d845c:	681b      	ldr	r3, [r3, #0]
   d845e:	689b      	ldr	r3, [r3, #8]
   d8460:	9301      	str	r3, [sp, #4]
   d8462:	bd08      	pop	{r3, pc}
   d8464:	00030240 	.word	0x00030240

000d8468 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8468:	b508      	push	{r3, lr}
   d846a:	4b02      	ldr	r3, [pc, #8]	; (d8474 <network_disconnect+0xc>)
   d846c:	681b      	ldr	r3, [r3, #0]
   d846e:	68db      	ldr	r3, [r3, #12]
   d8470:	9301      	str	r3, [sp, #4]
   d8472:	bd08      	pop	{r3, pc}
   d8474:	00030240 	.word	0x00030240

000d8478 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8478:	b508      	push	{r3, lr}
   d847a:	4b02      	ldr	r3, [pc, #8]	; (d8484 <network_ready+0xc>)
   d847c:	681b      	ldr	r3, [r3, #0]
   d847e:	691b      	ldr	r3, [r3, #16]
   d8480:	9301      	str	r3, [sp, #4]
   d8482:	bd08      	pop	{r3, pc}
   d8484:	00030240 	.word	0x00030240

000d8488 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8488:	b508      	push	{r3, lr}
   d848a:	4b02      	ldr	r3, [pc, #8]	; (d8494 <network_on+0xc>)
   d848c:	681b      	ldr	r3, [r3, #0]
   d848e:	695b      	ldr	r3, [r3, #20]
   d8490:	9301      	str	r3, [sp, #4]
   d8492:	bd08      	pop	{r3, pc}
   d8494:	00030240 	.word	0x00030240

000d8498 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8498:	b508      	push	{r3, lr}
   d849a:	4b02      	ldr	r3, [pc, #8]	; (d84a4 <network_off+0xc>)
   d849c:	681b      	ldr	r3, [r3, #0]
   d849e:	699b      	ldr	r3, [r3, #24]
   d84a0:	9301      	str	r3, [sp, #4]
   d84a2:	bd08      	pop	{r3, pc}
   d84a4:	00030240 	.word	0x00030240

000d84a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d84a8:	b508      	push	{r3, lr}
   d84aa:	4b02      	ldr	r3, [pc, #8]	; (d84b4 <network_listen+0xc>)
   d84ac:	681b      	ldr	r3, [r3, #0]
   d84ae:	69db      	ldr	r3, [r3, #28]
   d84b0:	9301      	str	r3, [sp, #4]
   d84b2:	bd08      	pop	{r3, pc}
   d84b4:	00030240 	.word	0x00030240

000d84b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d84b8:	b508      	push	{r3, lr}
   d84ba:	4b02      	ldr	r3, [pc, #8]	; (d84c4 <network_listening+0xc>)
   d84bc:	681b      	ldr	r3, [r3, #0]
   d84be:	6a1b      	ldr	r3, [r3, #32]
   d84c0:	9301      	str	r3, [sp, #4]
   d84c2:	bd08      	pop	{r3, pc}
   d84c4:	00030240 	.word	0x00030240

000d84c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d84c8:	b508      	push	{r3, lr}
   d84ca:	4b02      	ldr	r3, [pc, #8]	; (d84d4 <network_set_listen_timeout+0xc>)
   d84cc:	681b      	ldr	r3, [r3, #0]
   d84ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d84d0:	9301      	str	r3, [sp, #4]
   d84d2:	bd08      	pop	{r3, pc}
   d84d4:	00030240 	.word	0x00030240

000d84d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d84d8:	b508      	push	{r3, lr}
   d84da:	4b02      	ldr	r3, [pc, #8]	; (d84e4 <network_get_listen_timeout+0xc>)
   d84dc:	681b      	ldr	r3, [r3, #0]
   d84de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d84e0:	9301      	str	r3, [sp, #4]
   d84e2:	bd08      	pop	{r3, pc}
   d84e4:	00030240 	.word	0x00030240

000d84e8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d84e8:	b508      	push	{r3, lr}
   d84ea:	4b02      	ldr	r3, [pc, #8]	; (d84f4 <network_is_on+0xc>)
   d84ec:	681b      	ldr	r3, [r3, #0]
   d84ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d84f0:	9301      	str	r3, [sp, #4]
   d84f2:	bd08      	pop	{r3, pc}
   d84f4:	00030240 	.word	0x00030240

000d84f8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d84f8:	b508      	push	{r3, lr}
   d84fa:	4b02      	ldr	r3, [pc, #8]	; (d8504 <network_is_off+0xc>)
   d84fc:	681b      	ldr	r3, [r3, #0]
   d84fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8500:	9301      	str	r3, [sp, #4]
   d8502:	bd08      	pop	{r3, pc}
   d8504:	00030240 	.word	0x00030240

000d8508 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8508:	b508      	push	{r3, lr}
   d850a:	4b02      	ldr	r3, [pc, #8]	; (d8514 <malloc+0xc>)
   d850c:	681b      	ldr	r3, [r3, #0]
   d850e:	681b      	ldr	r3, [r3, #0]
   d8510:	9301      	str	r3, [sp, #4]
   d8512:	bd08      	pop	{r3, pc}
   d8514:	0003021c 	.word	0x0003021c

000d8518 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8518:	b508      	push	{r3, lr}
   d851a:	4b02      	ldr	r3, [pc, #8]	; (d8524 <free+0xc>)
   d851c:	681b      	ldr	r3, [r3, #0]
   d851e:	685b      	ldr	r3, [r3, #4]
   d8520:	9301      	str	r3, [sp, #4]
   d8522:	bd08      	pop	{r3, pc}
   d8524:	0003021c 	.word	0x0003021c

000d8528 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8528:	b508      	push	{r3, lr}
   d852a:	4b02      	ldr	r3, [pc, #8]	; (d8534 <realloc+0xc>)
   d852c:	681b      	ldr	r3, [r3, #0]
   d852e:	689b      	ldr	r3, [r3, #8]
   d8530:	9301      	str	r3, [sp, #4]
   d8532:	bd08      	pop	{r3, pc}
   d8534:	0003021c 	.word	0x0003021c

000d8538 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8538:	b508      	push	{r3, lr}
   d853a:	4b02      	ldr	r3, [pc, #8]	; (d8544 <siprintf+0xc>)
   d853c:	681b      	ldr	r3, [r3, #0]
   d853e:	691b      	ldr	r3, [r3, #16]
   d8540:	9301      	str	r3, [sp, #4]
   d8542:	bd08      	pop	{r3, pc}
   d8544:	0003021c 	.word	0x0003021c

000d8548 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8548:	b508      	push	{r3, lr}
   d854a:	4b02      	ldr	r3, [pc, #8]	; (d8554 <snprintf+0xc>)
   d854c:	681b      	ldr	r3, [r3, #0]
   d854e:	69db      	ldr	r3, [r3, #28]
   d8550:	9301      	str	r3, [sp, #4]
   d8552:	bd08      	pop	{r3, pc}
   d8554:	0003021c 	.word	0x0003021c

000d8558 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8558:	b508      	push	{r3, lr}
   d855a:	4b02      	ldr	r3, [pc, #8]	; (d8564 <vsnprintf+0xc>)
   d855c:	681b      	ldr	r3, [r3, #0]
   d855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8560:	9301      	str	r3, [sp, #4]
   d8562:	bd08      	pop	{r3, pc}
   d8564:	0003021c 	.word	0x0003021c

000d8568 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8568:	b508      	push	{r3, lr}
   d856a:	4b02      	ldr	r3, [pc, #8]	; (d8574 <abort+0xc>)
   d856c:	681b      	ldr	r3, [r3, #0]
   d856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8570:	9301      	str	r3, [sp, #4]
   d8572:	bd08      	pop	{r3, pc}
   d8574:	0003021c 	.word	0x0003021c

000d8578 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8578:	b508      	push	{r3, lr}
   d857a:	4b02      	ldr	r3, [pc, #8]	; (d8584 <_malloc_r+0xc>)
   d857c:	681b      	ldr	r3, [r3, #0]
   d857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8580:	9301      	str	r3, [sp, #4]
   d8582:	bd08      	pop	{r3, pc}
   d8584:	0003021c 	.word	0x0003021c

000d8588 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8588:	b508      	push	{r3, lr}
   d858a:	4b02      	ldr	r3, [pc, #8]	; (d8594 <newlib_impure_ptr_callback+0xc>)
   d858c:	681b      	ldr	r3, [r3, #0]
   d858e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8590:	9301      	str	r3, [sp, #4]
   d8592:	bd08      	pop	{r3, pc}
   d8594:	0003021c 	.word	0x0003021c

000d8598 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8598:	b508      	push	{r3, lr}
   d859a:	4b02      	ldr	r3, [pc, #8]	; (d85a4 <strftime+0xc>)
   d859c:	681b      	ldr	r3, [r3, #0]
   d859e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d85a0:	9301      	str	r3, [sp, #4]
   d85a2:	bd08      	pop	{r3, pc}
   d85a4:	0003021c 	.word	0x0003021c

000d85a8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d85a8:	b508      	push	{r3, lr}
   d85aa:	4b02      	ldr	r3, [pc, #8]	; (d85b4 <localtime_r+0xc>)
   d85ac:	681b      	ldr	r3, [r3, #0]
   d85ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d85b0:	9301      	str	r3, [sp, #4]
   d85b2:	bd08      	pop	{r3, pc}
   d85b4:	0003021c 	.word	0x0003021c

000d85b8 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d85b8:	b508      	push	{r3, lr}
   d85ba:	4b02      	ldr	r3, [pc, #8]	; (d85c4 <gmtime_r+0xc>)
   d85bc:	681b      	ldr	r3, [r3, #0]
   d85be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d85c0:	9301      	str	r3, [sp, #4]
   d85c2:	bd08      	pop	{r3, pc}
   d85c4:	0003021c 	.word	0x0003021c

000d85c8 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d85c8:	b508      	push	{r3, lr}
   d85ca:	4b02      	ldr	r3, [pc, #8]	; (d85d4 <mktime+0xc>)
   d85cc:	681b      	ldr	r3, [r3, #0]
   d85ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d85d0:	9301      	str	r3, [sp, #4]
   d85d2:	bd08      	pop	{r3, pc}
   d85d4:	0003021c 	.word	0x0003021c

000d85d8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d85d8:	2100      	movs	r1, #0
   d85da:	f7ff be53 	b.w	d8284 <system_delay_ms>

000d85de <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d85de:	b510      	push	{r4, lr}
      if (_M_empty())
   d85e0:	6883      	ldr	r3, [r0, #8]
   d85e2:	4604      	mov	r4, r0
   d85e4:	b90b      	cbnz	r3, d85ea <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d85e6:	f003 faa4 	bl	dbb32 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d85ea:	68c3      	ldr	r3, [r0, #12]
   d85ec:	4798      	blx	r3
      if (_M_manager)
   d85ee:	68a3      	ldr	r3, [r4, #8]
   d85f0:	b11b      	cbz	r3, d85fa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d85f2:	2203      	movs	r2, #3
   d85f4:	4621      	mov	r1, r4
   d85f6:	4620      	mov	r0, r4
   d85f8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d85fa:	4620      	mov	r0, r4
   d85fc:	2110      	movs	r1, #16
}
   d85fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d8602:	f003 ba90 	b.w	dbb26 <_ZdlPvj>

000d8606 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8606:	b510      	push	{r4, lr}
          _M_dispose();
   d8608:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d860a:	4604      	mov	r4, r0
          _M_dispose();
   d860c:	689b      	ldr	r3, [r3, #8]
   d860e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8610:	68a3      	ldr	r3, [r4, #8]
   d8612:	3b01      	subs	r3, #1
   d8614:	60a3      	str	r3, [r4, #8]
   d8616:	b92b      	cbnz	r3, d8624 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d8618:	6823      	ldr	r3, [r4, #0]
   d861a:	4620      	mov	r0, r4
   d861c:	68db      	ldr	r3, [r3, #12]
    }
   d861e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d8622:	4718      	bx	r3
    }
   d8624:	bd10      	pop	{r4, pc}

000d8626 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d8626:	b510      	push	{r4, lr}
   d8628:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d862a:	6800      	ldr	r0, [r0, #0]
   d862c:	b108      	cbz	r0, d8632 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d862e:	f7ff fbff 	bl	d7e30 <os_mutex_recursive_destroy>
    }
   d8632:	4620      	mov	r0, r4
   d8634:	bd10      	pop	{r4, pc}

000d8636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d8636:	680b      	ldr	r3, [r1, #0]
   d8638:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d863a:	b113      	cbz	r3, d8642 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d863c:	685a      	ldr	r2, [r3, #4]
   d863e:	3201      	adds	r2, #1
   d8640:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d8642:	4770      	bx	lr

000d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d8644:	b510      	push	{r4, lr}
   d8646:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d8648:	6800      	ldr	r0, [r0, #0]
   d864a:	b128      	cbz	r0, d8658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d864c:	6843      	ldr	r3, [r0, #4]
   d864e:	3b01      	subs	r3, #1
   d8650:	6043      	str	r3, [r0, #4]
   d8652:	b90b      	cbnz	r3, d8658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d8654:	f7ff ffd7 	bl	d8606 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d8658:	4620      	mov	r0, r4
   d865a:	bd10      	pop	{r4, pc}

000d865c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d865c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d865e:	4c06      	ldr	r4, [pc, #24]	; (d8678 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8660:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d8662:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d8664:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d8666:	f7ff fbdb 	bl	d7e20 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d866a:	4620      	mov	r0, r4
   d866c:	4a03      	ldr	r2, [pc, #12]	; (d867c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d866e:	4904      	ldr	r1, [pc, #16]	; (d8680 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d8670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d8674:	f003 ba52 	b.w	dbb1c <__aeabi_atexit>
   d8678:	2003e504 	.word	0x2003e504
   d867c:	2003e300 	.word	0x2003e300
   d8680:	000d8627 	.word	0x000d8627

000d8684 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8684:	2200      	movs	r2, #0
   d8686:	6840      	ldr	r0, [r0, #4]
   d8688:	4611      	mov	r1, r2
   d868a:	f7ff bef5 	b.w	d8478 <network_ready>

000d868e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d868e:	2200      	movs	r2, #0
   d8690:	6840      	ldr	r0, [r0, #4]
   d8692:	4611      	mov	r1, r2
   d8694:	f7ff bf10 	b.w	d84b8 <network_listening>

000d8698 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8698:	2200      	movs	r2, #0
   d869a:	6840      	ldr	r0, [r0, #4]
   d869c:	4611      	mov	r1, r2
   d869e:	f7ff bf1b 	b.w	d84d8 <network_get_listen_timeout>

000d86a2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d86a2:	6840      	ldr	r0, [r0, #4]
   d86a4:	2200      	movs	r2, #0
   d86a6:	f7ff bf0f 	b.w	d84c8 <network_set_listen_timeout>

000d86aa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d86aa:	6840      	ldr	r0, [r0, #4]
   d86ac:	2200      	movs	r2, #0
   d86ae:	f081 0101 	eor.w	r1, r1, #1
   d86b2:	f7ff bef9 	b.w	d84a8 <network_listen>

000d86b6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d86b6:	2300      	movs	r3, #0
   d86b8:	6840      	ldr	r0, [r0, #4]
   d86ba:	461a      	mov	r2, r3
   d86bc:	4619      	mov	r1, r3
   d86be:	f7ff beeb 	b.w	d8498 <network_off>

000d86c2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d86c2:	2300      	movs	r3, #0
   d86c4:	6840      	ldr	r0, [r0, #4]
   d86c6:	461a      	mov	r2, r3
   d86c8:	4619      	mov	r1, r3
   d86ca:	f7ff bedd 	b.w	d8488 <network_on>

000d86ce <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d86ce:	2200      	movs	r2, #0
   d86d0:	6840      	ldr	r0, [r0, #4]
   d86d2:	4611      	mov	r1, r2
   d86d4:	f7ff bec0 	b.w	d8458 <network_connecting>

000d86d8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d86d8:	6840      	ldr	r0, [r0, #4]
   d86da:	2200      	movs	r2, #0
   d86dc:	2102      	movs	r1, #2
   d86de:	f7ff bec3 	b.w	d8468 <network_disconnect>

000d86e2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d86e2:	2300      	movs	r3, #0
   d86e4:	6840      	ldr	r0, [r0, #4]
   d86e6:	461a      	mov	r2, r3
   d86e8:	f7ff beae 	b.w	d8448 <network_connect>

000d86ec <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d86ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d86ee:	4b1b      	ldr	r3, [pc, #108]	; (d875c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d86f0:	6003      	str	r3, [r0, #0]
   d86f2:	2500      	movs	r5, #0
   d86f4:	460f      	mov	r7, r1
   d86f6:	3328      	adds	r3, #40	; 0x28
   d86f8:	2618      	movs	r6, #24
   d86fa:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d86fe:	b089      	sub	sp, #36	; 0x24
   d8700:	6043      	str	r3, [r0, #4]
   d8702:	4632      	mov	r2, r6
   d8704:	4629      	mov	r1, r5
   d8706:	4604      	mov	r4, r0
   d8708:	3010      	adds	r0, #16
   d870a:	f004 f943 	bl	dc994 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d870e:	6878      	ldr	r0, [r7, #4]
   d8710:	462a      	mov	r2, r5
   d8712:	4629      	mov	r1, r5
   d8714:	f7ff feb0 	bl	d8478 <network_ready>
   d8718:	b918      	cbnz	r0, d8722 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d871a:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d871c:	4620      	mov	r0, r4
   d871e:	b009      	add	sp, #36	; 0x24
   d8720:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d8722:	4629      	mov	r1, r5
   d8724:	4632      	mov	r2, r6
   d8726:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d8728:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d872c:	f004 f932 	bl	dc994 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8730:	a902      	add	r1, sp, #8
   d8732:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d8734:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8738:	f7ff fb12 	bl	d7d60 <cellular_signal>
   d873c:	b110      	cbz	r0, d8744 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d873e:	2301      	movs	r3, #1
   d8740:	60a3      	str	r3, [r4, #8]
            return sig;
   d8742:	e7eb      	b.n	d871c <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8744:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d8746:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d8748:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d874a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d874c:	b90b      	cbnz	r3, d8752 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d874e:	2302      	movs	r3, #2
   d8750:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d8752:	a902      	add	r1, sp, #8
   d8754:	4620      	mov	r0, r4
   d8756:	f000 f8ae 	bl	d88b6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d875a:	e7df      	b.n	d871c <_ZN5spark13CellularClass4RSSIEv+0x30>
   d875c:	000dd6a8 	.word	0x000dd6a8

000d8760 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8760:	4b08      	ldr	r3, [pc, #32]	; (d8784 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8762:	b510      	push	{r4, lr}
   d8764:	2428      	movs	r4, #40	; 0x28
   d8766:	4622      	mov	r2, r4
   d8768:	4618      	mov	r0, r3
   d876a:	2100      	movs	r1, #0
   d876c:	f004 f912 	bl	dc994 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8770:	4b05      	ldr	r3, [pc, #20]	; (d8788 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d8772:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d8774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8778:	6042      	str	r2, [r0, #4]
   d877a:	2204      	movs	r2, #4
   d877c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d877e:	4a03      	ldr	r2, [pc, #12]	; (d878c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8780:	601a      	str	r2, [r3, #0]
   d8782:	bd10      	pop	{r4, pc}
   d8784:	2003e510 	.word	0x2003e510
   d8788:	2003e508 	.word	0x2003e508
   d878c:	000dd66c 	.word	0x000dd66c

000d8790 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d8790:	4770      	bx	lr

000d8792 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d8792:	7d00      	ldrb	r0, [r0, #20]
   d8794:	4770      	bx	lr

000d8796 <_ZN14CellularSignalD0Ev>:
   d8796:	b510      	push	{r4, lr}
   d8798:	2128      	movs	r1, #40	; 0x28
   d879a:	4604      	mov	r4, r0
   d879c:	f003 f9c3 	bl	dbb26 <_ZdlPvj>
   d87a0:	4620      	mov	r0, r4
   d87a2:	bd10      	pop	{r4, pc}

000d87a4 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d87a4:	7d03      	ldrb	r3, [r0, #20]
   d87a6:	b17b      	cbz	r3, d87c8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d87a8:	69c3      	ldr	r3, [r0, #28]
   d87aa:	2b00      	cmp	r3, #0
   d87ac:	db0c      	blt.n	d87c8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d87ae:	ee07 3a90 	vmov	s15, r3
   d87b2:	ed9f 7a07 	vldr	s14, [pc, #28]	; d87d0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d87b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d87ba:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d87be:	eddf 7a05 	vldr	s15, [pc, #20]	; d87d4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d87c2:	ee20 0a27 	vmul.f32	s0, s0, s15
   d87c6:	4770      	bx	lr
    }

    return -1.0f;
   d87c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d87cc:	4770      	bx	lr
   d87ce:	bf00      	nop
   d87d0:	477fff00 	.word	0x477fff00
   d87d4:	42c80000 	.word	0x42c80000

000d87d8 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d87d8:	7d03      	ldrb	r3, [r0, #20]
   d87da:	b163      	cbz	r3, d87f6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d87dc:	6983      	ldr	r3, [r0, #24]
   d87de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d87e2:	d008      	beq.n	d87f6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d87e4:	ee07 3a90 	vmov	s15, r3
   d87e8:	ed9f 7a04 	vldr	s14, [pc, #16]	; d87fc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d87ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d87f0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d87f4:	4770      	bx	lr
    }

    return 0.0f;
   d87f6:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8800 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d87fa:	4770      	bx	lr
   d87fc:	42c80000 	.word	0x42c80000
   d8800:	00000000 	.word	0x00000000

000d8804 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8804:	7d03      	ldrb	r3, [r0, #20]
   d8806:	b17b      	cbz	r3, d8828 <_ZNK14CellularSignal10getQualityEv+0x24>
   d8808:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d880a:	2b00      	cmp	r3, #0
   d880c:	db0c      	blt.n	d8828 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d880e:	ee07 3a90 	vmov	s15, r3
   d8812:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8830 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d8816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d881a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d881e:	eddf 7a05 	vldr	s15, [pc, #20]	; d8834 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8822:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8826:	4770      	bx	lr
    }

    return -1.0f;
   d8828:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d882c:	4770      	bx	lr
   d882e:	bf00      	nop
   d8830:	477fff00 	.word	0x477fff00
   d8834:	42c80000 	.word	0x42c80000

000d8838 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d8838:	7d03      	ldrb	r3, [r0, #20]
   d883a:	b163      	cbz	r3, d8856 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d883c:	6a03      	ldr	r3, [r0, #32]
   d883e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8842:	d008      	beq.n	d8856 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d8844:	ee07 3a90 	vmov	s15, r3
   d8848:	ed9f 7a04 	vldr	s14, [pc, #16]	; d885c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d884c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8850:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8854:	4770      	bx	lr
    }

    return 0.0f;
   d8856:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8860 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d885a:	4770      	bx	lr
   d885c:	42c80000 	.word	0x42c80000
   d8860:	00000000 	.word	0x00000000

000d8864 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d8864:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d8866:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d8868:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d886a:	da0a      	bge.n	d8882 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d886c:	212d      	movs	r1, #45	; 0x2d
   d886e:	f002 f8cc 	bl	daa0a <_ZN5Print5printEc>
            val = -n;
   d8872:	4261      	negs	r1, r4
            t = print('-');
   d8874:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8876:	220a      	movs	r2, #10
   d8878:	4630      	mov	r0, r6
   d887a:	f002 f8df 	bl	daa3c <_ZN5Print11printNumberEmh>
    }
}
   d887e:	4428      	add	r0, r5
   d8880:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d8882:	4621      	mov	r1, r4
        size_t t = 0;
   d8884:	2500      	movs	r5, #0
   d8886:	e7f6      	b.n	d8876 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d8888 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
   d8888:	b570      	push	{r4, r5, r6, lr}
   d888a:	460c      	mov	r4, r1
   d888c:	4605      	mov	r5, r0
   d888e:	6881      	ldr	r1, [r0, #8]
   d8890:	4620      	mov	r0, r4
   d8892:	f7ff ffe7 	bl	d8864 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d8896:	212c      	movs	r1, #44	; 0x2c
   d8898:	4606      	mov	r6, r0
   d889a:	4620      	mov	r0, r4
   d889c:	f002 f8b5 	bl	daa0a <_ZN5Print5printEc>
   d88a0:	68e9      	ldr	r1, [r5, #12]
   d88a2:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d88a4:	4620      	mov	r0, r4
   d88a6:	f7ff ffdd 	bl	d8864 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
   d88aa:	4430      	add	r0, r6
   d88ac:	bd70      	pop	{r4, r5, r6, pc}

000d88ae <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d88ae:	f1a0 0004 	sub.w	r0, r0, #4
   d88b2:	f7ff bfe9 	b.w	d8888 <_ZNK14CellularSignal7printToER5Print>

000d88b6 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d88b6:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d88b8:	460d      	mov	r5, r1
   d88ba:	f100 0410 	add.w	r4, r0, #16
   d88be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d88c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d88c2:	e895 0003 	ldmia.w	r5, {r0, r1}
   d88c6:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d88ca:	2001      	movs	r0, #1
   d88cc:	bd30      	pop	{r4, r5, pc}

000d88ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d88ce:	4770      	bx	lr

000d88d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d88d0:	2000      	movs	r0, #0
   d88d2:	4770      	bx	lr

000d88d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d88d4:	b510      	push	{r4, lr}
   d88d6:	2110      	movs	r1, #16
   d88d8:	4604      	mov	r4, r0
   d88da:	f003 f924 	bl	dbb26 <_ZdlPvj>
   d88de:	4620      	mov	r0, r4
   d88e0:	bd10      	pop	{r4, pc}

000d88e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d88e2:	b508      	push	{r3, lr}
      { delete this; }
   d88e4:	f7ff fff6 	bl	d88d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d88e8:	bd08      	pop	{r3, pc}

000d88ea <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d88ea:	b530      	push	{r4, r5, lr}
        type_(type) {
   d88ec:	2200      	movs	r2, #0
   d88ee:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d88f2:	6002      	str	r2, [r0, #0]
   d88f4:	8084      	strh	r4, [r0, #4]
   d88f6:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d88f8:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d88fa:	680c      	ldr	r4, [r1, #0]
   d88fc:	8085      	strh	r5, [r0, #4]
   d88fe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8900:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8902:	bd30      	pop	{r4, r5, pc}

000d8904 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8904:	b510      	push	{r4, lr}
   d8906:	4604      	mov	r4, r0
    free((void*)msg_);
   d8908:	6800      	ldr	r0, [r0, #0]
   d890a:	f7ff fe05 	bl	d8518 <free>
}
   d890e:	4620      	mov	r0, r4
   d8910:	bd10      	pop	{r4, pc}

000d8912 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8912:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8914:	68c4      	ldr	r4, [r0, #12]
   d8916:	b1f4      	cbz	r4, d8956 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d8918:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d891a:	2b02      	cmp	r3, #2
   d891c:	d103      	bne.n	d8926 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d891e:	f104 000c 	add.w	r0, r4, #12
   d8922:	f7ff ffef 	bl	d8904 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d8926:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d8928:	b135      	cbz	r5, d8938 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d892a:	4628      	mov	r0, r5
   d892c:	f7fb fd04 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
   d8930:	2110      	movs	r1, #16
   d8932:	4628      	mov	r0, r5
   d8934:	f003 f8f7 	bl	dbb26 <_ZdlPvj>
   d8938:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d893a:	b135      	cbz	r5, d894a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d893c:	4628      	mov	r0, r5
   d893e:	f7fb fcfb 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
   d8942:	2110      	movs	r1, #16
   d8944:	4628      	mov	r0, r5
   d8946:	f003 f8ee 	bl	dbb26 <_ZdlPvj>
   d894a:	4620      	mov	r0, r4
   d894c:	2114      	movs	r1, #20
   d894e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8952:	f003 b8e8 	b.w	dbb26 <_ZdlPvj>
   d8956:	bd38      	pop	{r3, r4, r5, pc}

000d8958 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8958:	b510      	push	{r4, lr}
   d895a:	b088      	sub	sp, #32
   d895c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d895e:	4668      	mov	r0, sp
   d8960:	f002 f983 	bl	dac6a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d8964:	4669      	mov	r1, sp
   d8966:	a804      	add	r0, sp, #16
   d8968:	f002 f9ca 	bl	dad00 <_ZN6StringC1ERKS_>
   d896c:	a804      	add	r0, sp, #16
   d896e:	47a0      	blx	r4
   d8970:	4604      	mov	r4, r0
   d8972:	a804      	add	r0, sp, #16
   d8974:	f002 f92e 	bl	dabd4 <_ZN6StringD1Ev>
    String p(param);
   d8978:	4668      	mov	r0, sp
   d897a:	f002 f92b 	bl	dabd4 <_ZN6StringD1Ev>
}
   d897e:	4620      	mov	r0, r4
   d8980:	b008      	add	sp, #32
   d8982:	bd10      	pop	{r4, pc}

000d8984 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8986:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d8988:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d898c:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d898e:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8990:	461a      	mov	r2, r3
   d8992:	4669      	mov	r1, sp
   d8994:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d8996:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d899a:	f8ad 4000 	strh.w	r4, [sp]
   d899e:	f7ff fceb 	bl	d8378 <spark_function>
}
   d89a2:	b004      	add	sp, #16
   d89a4:	bd10      	pop	{r4, pc}

000d89a6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d89a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d89a8:	230c      	movs	r3, #12
   d89aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d89ae:	6803      	ldr	r3, [r0, #0]
   d89b0:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d89b4:	7a03      	ldrb	r3, [r0, #8]
   d89b6:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d89ba:	6843      	ldr	r3, [r0, #4]
   d89bc:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d89be:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d89c0:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d89c2:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d89c6:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d89c8:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d89cc:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d89d0:	f7ff fd32 	bl	d8438 <spark_cloud_disconnect>
}
   d89d4:	b005      	add	sp, #20
   d89d6:	f85d fb04 	ldr.w	pc, [sp], #4

000d89da <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d89da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d89dc:	220c      	movs	r2, #12
   d89de:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   d89e2:	6802      	ldr	r2, [r0, #0]
   d89e4:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   d89e8:	7a02      	ldrb	r2, [r0, #8]
   d89ea:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   d89ee:	6842      	ldr	r2, [r0, #4]
   d89f0:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d89f2:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   d89f4:	7a42      	ldrb	r2, [r0, #9]
   d89f6:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d89fa:	4619      	mov	r1, r3
   d89fc:	aa01      	add	r2, sp, #4
   d89fe:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   d8a00:	f8ad 300d 	strh.w	r3, [sp, #13]
   d8a04:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d8a08:	f7ff fd06 	bl	d8418 <spark_set_connection_property>
}
   d8a0c:	b005      	add	sp, #20
   d8a0e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8a12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8a14:	460e      	mov	r6, r1
   d8a16:	4604      	mov	r4, r0
   d8a18:	f856 3b04 	ldr.w	r3, [r6], #4
   d8a1c:	9300      	str	r3, [sp, #0]
   d8a1e:	460d      	mov	r5, r1
   d8a20:	a801      	add	r0, sp, #4
   d8a22:	4631      	mov	r1, r6
   d8a24:	f7ff fe07 	bl	d8636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8a28:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8a2a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d8a2c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8a2e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d8a30:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d8a32:	2300      	movs	r3, #0
   d8a34:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8a36:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d8a38:	f7ff fe04 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8a3c:	4630      	mov	r0, r6
   d8a3e:	f7ff fe01 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d8a42:	4628      	mov	r0, r5
   d8a44:	2108      	movs	r1, #8
   d8a46:	f003 f86e 	bl	dbb26 <_ZdlPvj>
        return p;
    }
   d8a4a:	4620      	mov	r0, r4
   d8a4c:	b002      	add	sp, #8
   d8a4e:	bd70      	pop	{r4, r5, r6, pc}

000d8a50 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d8a50:	b513      	push	{r0, r1, r4, lr}
   d8a52:	460b      	mov	r3, r1
   d8a54:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a56:	e9d0 0100 	ldrd	r0, r1, [r0]
   d8a5a:	466c      	mov	r4, sp
   d8a5c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8a60:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8a64:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d8a68:	e894 0003 	ldmia.w	r4, {r0, r1}
   d8a6c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8a70:	b002      	add	sp, #8
   d8a72:	bd10      	pop	{r4, pc}

000d8a74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d8a74:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8a76:	b510      	push	{r4, lr}
      if (_M_empty())
   d8a78:	b90a      	cbnz	r2, d8a7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d8a7a:	f003 f85a 	bl	dbb32 <_ZSt25__throw_bad_function_callv>
    }
   d8a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8a82:	68c3      	ldr	r3, [r0, #12]
   d8a84:	4718      	bx	r3

000d8a86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8a86:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8a88:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d8a8a:	f100 0110 	add.w	r1, r0, #16
   d8a8e:	f7ff fff1 	bl	d8a74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8a92:	bd08      	pop	{r3, pc}

000d8a94 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8a94:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d8a96:	b510      	push	{r4, lr}
      if (_M_empty())
   d8a98:	b90a      	cbnz	r2, d8a9e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d8a9a:	f003 f84a 	bl	dbb32 <_ZSt25__throw_bad_function_callv>
    }
   d8a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8aa2:	68c3      	ldr	r3, [r0, #12]
   d8aa4:	4718      	bx	r3

000d8aa6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d8aa6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d8aa8:	6800      	ldr	r0, [r0, #0]
   d8aaa:	f100 0110 	add.w	r1, r0, #16
   d8aae:	f7ff fff1 	bl	d8a94 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8ab2:	bd08      	pop	{r3, pc}

000d8ab4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8ab4:	b538      	push	{r3, r4, r5, lr}
   d8ab6:	2300      	movs	r3, #0
   d8ab8:	4604      	mov	r4, r0
   d8aba:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8abc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8abe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8ac0:	f7fb fae9 	bl	d4096 <_Znwj>
   d8ac4:	b128      	cbz	r0, d8ad2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d8ac6:	2301      	movs	r3, #1
   d8ac8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8acc:	4b02      	ldr	r3, [pc, #8]	; (d8ad8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8ace:	6003      	str	r3, [r0, #0]
   d8ad0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8ad2:	6020      	str	r0, [r4, #0]
	}
   d8ad4:	4620      	mov	r0, r4
   d8ad6:	bd38      	pop	{r3, r4, r5, pc}
   d8ad8:	000dd6dc 	.word	0x000dd6dc

000d8adc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8adc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8ade:	2300      	movs	r3, #0
   d8ae0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8ae2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8ae4:	4604      	mov	r4, r0
   d8ae6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8ae8:	b12b      	cbz	r3, d8af6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8aea:	2202      	movs	r2, #2
   d8aec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8aee:	68eb      	ldr	r3, [r5, #12]
   d8af0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8af2:	68ab      	ldr	r3, [r5, #8]
   d8af4:	60a3      	str	r3, [r4, #8]
    }
   d8af6:	4620      	mov	r0, r4
   d8af8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8afc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8afe:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8b00:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8b02:	4668      	mov	r0, sp
   d8b04:	f7ff fef1 	bl	d88ea <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8b08:	f04f 0302 	mov.w	r3, #2
   d8b0c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8b10:	2a00      	cmp	r2, #0
   d8b12:	d103      	bne.n	d8b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8b14:	e8c4 3f41 	strexb	r1, r3, [r4]
   d8b18:	2900      	cmp	r1, #0
   d8b1a:	d1f7      	bne.n	d8b0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8b1c:	d125      	bne.n	d8b6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8b1e:	f104 050c 	add.w	r5, r4, #12
   d8b22:	4669      	mov	r1, sp
   d8b24:	4628      	mov	r0, r5
   d8b26:	f7ff fee0 	bl	d88ea <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d8b2a:	f3bf 8f5b 	dmb	ish
   d8b2e:	2301      	movs	r3, #1
   d8b30:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8b32:	2000      	movs	r0, #0
   d8b34:	f104 0308 	add.w	r3, r4, #8
   d8b38:	f3bf 8f5b 	dmb	ish
   d8b3c:	e853 6f00 	ldrex	r6, [r3]
   d8b40:	e843 0200 	strex	r2, r0, [r3]
   d8b44:	2a00      	cmp	r2, #0
   d8b46:	d1f9      	bne.n	d8b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d8b48:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8b4c:	b16e      	cbz	r6, d8b6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d8b4e:	f7ff fbb9 	bl	d82c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8b52:	b178      	cbz	r0, d8b74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8b54:	4629      	mov	r1, r5
   d8b56:	4630      	mov	r0, r6
   d8b58:	f7ff ff8c 	bl	d8a74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d8b5c:	4630      	mov	r0, r6
   d8b5e:	f7fb fbeb 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8b62:	2110      	movs	r1, #16
   d8b64:	4630      	mov	r0, r6
   d8b66:	f002 ffde 	bl	dbb26 <_ZdlPvj>
        p_->setError(std::move(error));
   d8b6a:	4668      	mov	r0, sp
   d8b6c:	f7ff feca 	bl	d8904 <_ZN8particle5ErrorD1Ev>
    }
   d8b70:	b009      	add	sp, #36	; 0x24
   d8b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8b74:	4631      	mov	r1, r6
   d8b76:	a802      	add	r0, sp, #8
   d8b78:	f7ff ffb0 	bl	d8adc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8b7c:	68e0      	ldr	r0, [r4, #12]
   d8b7e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8b82:	b108      	cbz	r0, d8b88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d8b84:	f003 ff5c 	bl	dca40 <strdup>
        type_(type) {
   d8b88:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8b8a:	2010      	movs	r0, #16
   d8b8c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8b90:	f7fb fa81 	bl	d4096 <_Znwj>
   d8b94:	4605      	mov	r5, r0
   d8b96:	b1e8      	cbz	r0, d8bd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8b98:	2700      	movs	r7, #0
   d8b9a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8b9c:	2018      	movs	r0, #24
   d8b9e:	f7fb fa7a 	bl	d4096 <_Znwj>
   d8ba2:	4604      	mov	r4, r0
   d8ba4:	b188      	cbz	r0, d8bca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8ba6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8ba8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8baa:	a802      	add	r0, sp, #8
   d8bac:	f7ff ff50 	bl	d8a50 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8bb0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8bb2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8bb4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8bb6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8bb8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8bba:	a906      	add	r1, sp, #24
   d8bbc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8bbe:	60e3      	str	r3, [r4, #12]
   d8bc0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8bc4:	9205      	str	r2, [sp, #20]
   d8bc6:	f7ff fe90 	bl	d88ea <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8bca:	4b08      	ldr	r3, [pc, #32]	; (d8bec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8bcc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8bce:	4b08      	ldr	r3, [pc, #32]	; (d8bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8bd0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8bd2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8bd4:	a806      	add	r0, sp, #24
   d8bd6:	f7ff fe95 	bl	d8904 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8bda:	a802      	add	r0, sp, #8
   d8bdc:	f7fb fbac 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8be0:	2200      	movs	r2, #0
   d8be2:	4629      	mov	r1, r5
   d8be4:	4803      	ldr	r0, [pc, #12]	; (d8bf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8be6:	f7ff fb75 	bl	d82d4 <application_thread_invoke>
   d8bea:	e7b7      	b.n	d8b5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8bec:	000d8a87 	.word	0x000d8a87
   d8bf0:	000d8d1d 	.word	0x000d8d1d
   d8bf4:	000d85df 	.word	0x000d85df

000d8bf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8bfc:	b08a      	sub	sp, #40	; 0x28
   d8bfe:	4605      	mov	r5, r0
   d8c00:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8c04:	460c      	mov	r4, r1
   d8c06:	4617      	mov	r7, r2
   d8c08:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8c0a:	f7ff fbcd 	bl	d83a8 <spark_cloud_flag_connected>
   d8c0e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8c10:	4682      	mov	sl, r0
   d8c12:	bb38      	cbnz	r0, d8c64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8c14:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8c18:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8c1a:	a905      	add	r1, sp, #20
   d8c1c:	4630      	mov	r0, r6
   d8c1e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8c22:	f7ff fe62 	bl	d88ea <_ZN8particle5ErrorC1EOS0_>
   d8c26:	2014      	movs	r0, #20
   d8c28:	f7fb fa35 	bl	d4096 <_Znwj>
   d8c2c:	4604      	mov	r4, r0
   d8c2e:	b148      	cbz	r0, d8c44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8c30:	2302      	movs	r3, #2
   d8c32:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8c34:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8c36:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8c3a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8c3c:	4631      	mov	r1, r6
   d8c3e:	300c      	adds	r0, #12
   d8c40:	f7ff fe53 	bl	d88ea <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8c44:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8c46:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8c48:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8c4c:	f7ff ff32 	bl	d8ab4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8c50:	4630      	mov	r0, r6
   d8c52:	f7ff fe57 	bl	d8904 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8c56:	a805      	add	r0, sp, #20
   d8c58:	f7ff fe54 	bl	d8904 <_ZN8particle5ErrorD1Ev>
}
   d8c5c:	4628      	mov	r0, r5
   d8c5e:	b00a      	add	sp, #40	; 0x28
   d8c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8c64:	230c      	movs	r3, #12
   d8c66:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8c6a:	2014      	movs	r0, #20
   d8c6c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8c70:	9307      	str	r3, [sp, #28]
   d8c72:	f7fb fa10 	bl	d4096 <_Znwj>
   d8c76:	4601      	mov	r1, r0
   d8c78:	b128      	cbz	r0, d8c86 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8c7a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8c7e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8c82:	f880 a001 	strb.w	sl, [r0, #1]
   d8c86:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8c88:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8c8a:	f7ff ff13 	bl	d8ab4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8c8e:	4b22      	ldr	r3, [pc, #136]	; (d8d18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8c90:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8c92:	2008      	movs	r0, #8
   d8c94:	f7fb f9ff 	bl	d4096 <_Znwj>
   d8c98:	4682      	mov	sl, r0
   d8c9a:	b128      	cbz	r0, d8ca8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8c9c:	9b03      	ldr	r3, [sp, #12]
   d8c9e:	f840 3b04 	str.w	r3, [r0], #4
   d8ca2:	a904      	add	r1, sp, #16
   d8ca4:	f7ff fcc7 	bl	d8636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8ca8:	9600      	str	r6, [sp, #0]
   d8caa:	fa5f f389 	uxtb.w	r3, r9
   d8cae:	4642      	mov	r2, r8
   d8cb0:	4639      	mov	r1, r7
   d8cb2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8cb4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8cb8:	f7ff fb86 	bl	d83c8 <spark_send_event>
   d8cbc:	b9b8      	cbnz	r0, d8cee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8cbe:	9b03      	ldr	r3, [sp, #12]
   d8cc0:	785b      	ldrb	r3, [r3, #1]
   d8cc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8cc6:	b993      	cbnz	r3, d8cee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8cc8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8ccc:	a905      	add	r1, sp, #20
   d8cce:	a803      	add	r0, sp, #12
   d8cd0:	9205      	str	r2, [sp, #20]
   d8cd2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8cd6:	f7ff ff11 	bl	d8afc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8cda:	a805      	add	r0, sp, #20
   d8cdc:	f7ff fe12 	bl	d8904 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8ce0:	a805      	add	r0, sp, #20
   d8ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8ce4:	f7ff fe95 	bl	d8a12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8ce8:	a806      	add	r0, sp, #24
   d8cea:	f7ff fcab 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8cee:	9b03      	ldr	r3, [sp, #12]
   d8cf0:	9305      	str	r3, [sp, #20]
   d8cf2:	a904      	add	r1, sp, #16
   d8cf4:	a806      	add	r0, sp, #24
   d8cf6:	f7ff fc9e 	bl	d8636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8cfa:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8cfc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8cfe:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8d00:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8d02:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8d04:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8d06:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8d08:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8d0a:	f7ff fc9b 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8d0e:	a804      	add	r0, sp, #16
   d8d10:	f7ff fc98 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8d14:	e7a2      	b.n	d8c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8d16:	bf00      	nop
   d8d18:	000d8de1 	.word	0x000d8de1

000d8d1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8d1c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8d20:	4605      	mov	r5, r0
	  switch (__op)
   d8d22:	d007      	beq.n	d8d34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8d24:	2a03      	cmp	r2, #3
   d8d26:	d018      	beq.n	d8d5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8d28:	2a01      	cmp	r2, #1
   d8d2a:	d101      	bne.n	d8d30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8d2c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8d2e:	6003      	str	r3, [r0, #0]
	}
   d8d30:	2000      	movs	r0, #0
   d8d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8d34:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8d36:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8d38:	f7fb f9ad 	bl	d4096 <_Znwj>
   d8d3c:	4604      	mov	r4, r0
   d8d3e:	b150      	cbz	r0, d8d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8d40:	4631      	mov	r1, r6
   d8d42:	f7ff fecb 	bl	d8adc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8d46:	6930      	ldr	r0, [r6, #16]
   d8d48:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8d4c:	b108      	cbz	r0, d8d52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8d4e:	f003 fe77 	bl	dca40 <strdup>
        type_(type) {
   d8d52:	6120      	str	r0, [r4, #16]
   d8d54:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8d56:	602c      	str	r4, [r5, #0]
	}
   d8d58:	e7ea      	b.n	d8d30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8d5a:	6804      	ldr	r4, [r0, #0]
   d8d5c:	2c00      	cmp	r4, #0
   d8d5e:	d0e7      	beq.n	d8d30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8d60:	f104 0010 	add.w	r0, r4, #16
   d8d64:	f7ff fdce 	bl	d8904 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8d68:	4620      	mov	r0, r4
   d8d6a:	f7fb fae5 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8d6e:	2118      	movs	r1, #24
   d8d70:	4620      	mov	r0, r4
   d8d72:	f002 fed8 	bl	dbb26 <_ZdlPvj>
   d8d76:	e7db      	b.n	d8d30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8d78 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8d78:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8d7a:	2300      	movs	r3, #0
   d8d7c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8d7e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8d80:	4604      	mov	r4, r0
   d8d82:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8d84:	b12b      	cbz	r3, d8d92 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8d86:	2202      	movs	r2, #2
   d8d88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8d8a:	68eb      	ldr	r3, [r5, #12]
   d8d8c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8d8e:	68ab      	ldr	r3, [r5, #8]
   d8d90:	60a3      	str	r3, [r4, #8]
    }
   d8d92:	4620      	mov	r0, r4
   d8d94:	bd38      	pop	{r3, r4, r5, pc}

000d8d96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8d96:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8d98:	b570      	push	{r4, r5, r6, lr}
   d8d9a:	4604      	mov	r4, r0
	  switch (__op)
   d8d9c:	d007      	beq.n	d8dae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8d9e:	2a03      	cmp	r2, #3
   d8da0:	d012      	beq.n	d8dc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8da2:	2a01      	cmp	r2, #1
   d8da4:	d101      	bne.n	d8daa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8da6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8da8:	6003      	str	r3, [r0, #0]
	}
   d8daa:	2000      	movs	r0, #0
   d8dac:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8dae:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8db0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8db2:	f7fb f970 	bl	d4096 <_Znwj>
   d8db6:	4605      	mov	r5, r0
   d8db8:	b120      	cbz	r0, d8dc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8dba:	4631      	mov	r1, r6
   d8dbc:	f7ff ffdc 	bl	d8d78 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8dc0:	7c33      	ldrb	r3, [r6, #16]
   d8dc2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8dc4:	6025      	str	r5, [r4, #0]
	}
   d8dc6:	e7f0      	b.n	d8daa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8dc8:	6804      	ldr	r4, [r0, #0]
   d8dca:	2c00      	cmp	r4, #0
   d8dcc:	d0ed      	beq.n	d8daa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8dce:	4620      	mov	r0, r4
   d8dd0:	f7fb fab2 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8dd4:	2114      	movs	r1, #20
   d8dd6:	4620      	mov	r0, r4
   d8dd8:	f002 fea5 	bl	dbb26 <_ZdlPvj>
   d8ddc:	e7e5      	b.n	d8daa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8de0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8de2:	b089      	sub	sp, #36	; 0x24
   d8de4:	4604      	mov	r4, r0
   d8de6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8de8:	a801      	add	r0, sp, #4
   d8dea:	4611      	mov	r1, r2
   d8dec:	f7ff fe11 	bl	d8a12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8df0:	b1a4      	cbz	r4, d8e1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8df2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8df4:	b11d      	cbz	r5, d8dfe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8df6:	4628      	mov	r0, r5
   d8df8:	f003 fe22 	bl	dca40 <strdup>
   d8dfc:	4605      	mov	r5, r0
   d8dfe:	a801      	add	r0, sp, #4
   d8e00:	a903      	add	r1, sp, #12
        type_(type) {
   d8e02:	9503      	str	r5, [sp, #12]
   d8e04:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8e08:	f7ff fe78 	bl	d8afc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8e0c:	a803      	add	r0, sp, #12
   d8e0e:	f7ff fd79 	bl	d8904 <_ZN8particle5ErrorD1Ev>
   d8e12:	a802      	add	r0, sp, #8
   d8e14:	f7ff fc16 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8e18:	b009      	add	sp, #36	; 0x24
   d8e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8e1c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8e1e:	2301      	movs	r3, #1
   d8e20:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8e24:	2a00      	cmp	r2, #0
   d8e26:	d103      	bne.n	d8e30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8e28:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8e2c:	2900      	cmp	r1, #0
   d8e2e:	d1f7      	bne.n	d8e20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8e30:	d1ef      	bne.n	d8e12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8e32:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8e34:	f3bf 8f5b 	dmb	ish
   d8e38:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8e3a:	1d2b      	adds	r3, r5, #4
   d8e3c:	f3bf 8f5b 	dmb	ish
   d8e40:	e853 6f00 	ldrex	r6, [r3]
   d8e44:	e843 4200 	strex	r2, r4, [r3]
   d8e48:	2a00      	cmp	r2, #0
   d8e4a:	d1f9      	bne.n	d8e40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8e4c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8e50:	2e00      	cmp	r6, #0
   d8e52:	d0de      	beq.n	d8e12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8e54:	4620      	mov	r0, r4
   d8e56:	f7ff fa35 	bl	d82c4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8e5a:	4607      	mov	r7, r0
   d8e5c:	b160      	cbz	r0, d8e78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8e5e:	f105 010c 	add.w	r1, r5, #12
   d8e62:	4630      	mov	r0, r6
   d8e64:	f7ff fe16 	bl	d8a94 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8e68:	4630      	mov	r0, r6
   d8e6a:	f7fb fa65 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8e6e:	2110      	movs	r1, #16
   d8e70:	4630      	mov	r0, r6
   d8e72:	f002 fe58 	bl	dbb26 <_ZdlPvj>
   d8e76:	e7cc      	b.n	d8e12 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8e78:	4631      	mov	r1, r6
   d8e7a:	a803      	add	r0, sp, #12
   d8e7c:	f7ff ff7c 	bl	d8d78 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8e80:	7b2b      	ldrb	r3, [r5, #12]
   d8e82:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8e86:	2010      	movs	r0, #16
   d8e88:	f7fb f905 	bl	d4096 <_Znwj>
   d8e8c:	4605      	mov	r5, r0
   d8e8e:	b1d0      	cbz	r0, d8ec6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8e90:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8e92:	2014      	movs	r0, #20
   d8e94:	f7fb f8ff 	bl	d4096 <_Znwj>
   d8e98:	4604      	mov	r4, r0
   d8e9a:	b178      	cbz	r0, d8ebc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8e9c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8e9e:	4601      	mov	r1, r0
   d8ea0:	a803      	add	r0, sp, #12
   d8ea2:	f7ff fdd5 	bl	d8a50 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8ea6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8ea8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8eaa:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8eac:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8eae:	9205      	str	r2, [sp, #20]
   d8eb0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8eb2:	60e3      	str	r3, [r4, #12]
   d8eb4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8eb8:	9206      	str	r2, [sp, #24]
   d8eba:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8ebc:	4b06      	ldr	r3, [pc, #24]	; (d8ed8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8ebe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8ec0:	4b06      	ldr	r3, [pc, #24]	; (d8edc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8ec2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8ec4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8ec6:	a803      	add	r0, sp, #12
   d8ec8:	f7fb fa36 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8ecc:	2200      	movs	r2, #0
   d8ece:	4629      	mov	r1, r5
   d8ed0:	4803      	ldr	r0, [pc, #12]	; (d8ee0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8ed2:	f7ff f9ff 	bl	d82d4 <application_thread_invoke>
   d8ed6:	e7c7      	b.n	d8e68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8ed8:	000d8aa7 	.word	0x000d8aa7
   d8edc:	000d8d97 	.word	0x000d8d97
   d8ee0:	000d85df 	.word	0x000d85df

000d8ee4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8ee4:	2200      	movs	r2, #0
   d8ee6:	6840      	ldr	r0, [r0, #4]
   d8ee8:	4611      	mov	r1, r2
   d8eea:	f7ff bae5 	b.w	d84b8 <network_listening>

000d8eee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8eee:	2200      	movs	r2, #0
   d8ef0:	6840      	ldr	r0, [r0, #4]
   d8ef2:	4611      	mov	r1, r2
   d8ef4:	f7ff baf0 	b.w	d84d8 <network_get_listen_timeout>

000d8ef8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8ef8:	6840      	ldr	r0, [r0, #4]
   d8efa:	2200      	movs	r2, #0
   d8efc:	f7ff bae4 	b.w	d84c8 <network_set_listen_timeout>

000d8f00 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8f00:	6840      	ldr	r0, [r0, #4]
   d8f02:	2200      	movs	r2, #0
   d8f04:	f081 0101 	eor.w	r1, r1, #1
   d8f08:	f7ff bace 	b.w	d84a8 <network_listen>

000d8f0c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8f0c:	2300      	movs	r3, #0
   d8f0e:	6840      	ldr	r0, [r0, #4]
   d8f10:	461a      	mov	r2, r3
   d8f12:	4619      	mov	r1, r3
   d8f14:	f7ff bac0 	b.w	d8498 <network_off>

000d8f18 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8f18:	2300      	movs	r3, #0
   d8f1a:	6840      	ldr	r0, [r0, #4]
   d8f1c:	461a      	mov	r2, r3
   d8f1e:	4619      	mov	r1, r3
   d8f20:	f7ff bab2 	b.w	d8488 <network_on>

000d8f24 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8f24:	2200      	movs	r2, #0
   d8f26:	6840      	ldr	r0, [r0, #4]
   d8f28:	4611      	mov	r1, r2
   d8f2a:	f7ff baa5 	b.w	d8478 <network_ready>

000d8f2e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8f2e:	2200      	movs	r2, #0
   d8f30:	6840      	ldr	r0, [r0, #4]
   d8f32:	4611      	mov	r1, r2
   d8f34:	f7ff ba90 	b.w	d8458 <network_connecting>

000d8f38 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8f38:	6840      	ldr	r0, [r0, #4]
   d8f3a:	2200      	movs	r2, #0
   d8f3c:	2102      	movs	r1, #2
   d8f3e:	f7ff ba93 	b.w	d8468 <network_disconnect>

000d8f42 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8f42:	2300      	movs	r3, #0
   d8f44:	6840      	ldr	r0, [r0, #4]
   d8f46:	461a      	mov	r2, r3
   d8f48:	f7ff ba7e 	b.w	d8448 <network_connect>

000d8f4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8f4c:	4b02      	ldr	r3, [pc, #8]	; (d8f58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8f4e:	2203      	movs	r2, #3
   d8f50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8f52:	4a02      	ldr	r2, [pc, #8]	; (d8f5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8f54:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8f56:	4770      	bx	lr
   d8f58:	2003e538 	.word	0x2003e538
   d8f5c:	000dd6f8 	.word	0x000dd6f8

000d8f60 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8f60:	6800      	ldr	r0, [r0, #0]
   d8f62:	f000 b95d 	b.w	d9220 <_ZN7TwoWire4lockEv>

000d8f66 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8f66:	b510      	push	{r4, lr}
   d8f68:	4604      	mov	r4, r0
      lock_(_lock) {
   d8f6a:	6001      	str	r1, [r0, #0]
   d8f6c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d8f6e:	b10a      	cbz	r2, d8f74 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8f70:	f7ff fff6 	bl	d8f60 <_ZN9FuelGauge4lockEv>
}
   d8f74:	4620      	mov	r0, r4
   d8f76:	bd10      	pop	{r4, pc}

000d8f78 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d8f78:	b513      	push	{r0, r1, r4, lr}
   d8f7a:	4604      	mov	r4, r0
   d8f7c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d8f7e:	f002 fda5 	bl	dbacc <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d8f82:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d8f84:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d8f86:	4620      	mov	r0, r4
   d8f88:	f7ff ffed 	bl	d8f66 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d8f8c:	4620      	mov	r0, r4
   d8f8e:	b002      	add	sp, #8
   d8f90:	bd10      	pop	{r4, pc}

000d8f92 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d8f92:	6800      	ldr	r0, [r0, #0]
   d8f94:	f000 b94d 	b.w	d9232 <_ZN7TwoWire6unlockEv>

000d8f98 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d8f98:	b510      	push	{r4, lr}
    if (lock_) {
   d8f9a:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d8f9c:	4604      	mov	r4, r0
    if (lock_) {
   d8f9e:	b10b      	cbz	r3, d8fa4 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d8fa0:	f7ff fff7 	bl	d8f92 <_ZN9FuelGauge6unlockEv>
}
   d8fa4:	4620      	mov	r0, r4
   d8fa6:	bd10      	pop	{r4, pc}

000d8fa8 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d8fa8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8fac:	4604      	mov	r4, r0
   d8fae:	460d      	mov	r5, r1
   d8fb0:	4617      	mov	r7, r2
   d8fb2:	461e      	mov	r6, r3
   d8fb4:	f7ff ffd4 	bl	d8f60 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8fb8:	2336      	movs	r3, #54	; 0x36
   d8fba:	f88d 3000 	strb.w	r3, [sp]
   d8fbe:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8fc0:	6820      	ldr	r0, [r4, #0]
   d8fc2:	9301      	str	r3, [sp, #4]
   d8fc4:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d8fc8:	230a      	movs	r3, #10
   d8fca:	4669      	mov	r1, sp
   d8fcc:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8fce:	f88d 8008 	strb.w	r8, [sp, #8]
   d8fd2:	f000 f906 	bl	d91e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d8fd6:	6820      	ldr	r0, [r4, #0]
   d8fd8:	6803      	ldr	r3, [r0, #0]
   d8fda:	4629      	mov	r1, r5
   d8fdc:	689b      	ldr	r3, [r3, #8]
   d8fde:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8fe0:	6820      	ldr	r0, [r4, #0]
   d8fe2:	4641      	mov	r1, r8
   d8fe4:	f000 f915 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
   d8fe8:	4605      	mov	r5, r0
   d8fea:	b140      	cbz	r0, d8ffe <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d8fec:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d8ff0:	4620      	mov	r0, r4
   d8ff2:	f7ff ffce 	bl	d8f92 <_ZN9FuelGauge6unlockEv>
}
   d8ff6:	4628      	mov	r0, r5
   d8ff8:	b004      	add	sp, #16
   d8ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d8ffe:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d9000:	6820      	ldr	r0, [r4, #0]
   d9002:	9301      	str	r3, [sp, #4]
   d9004:	4669      	mov	r1, sp
   d9006:	f000 f8b9 	bl	d917c <_ZN7TwoWire11requestFromERK16WireTransmission>
   d900a:	2802      	cmp	r0, #2
   d900c:	d1ee      	bne.n	d8fec <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d900e:	6820      	ldr	r0, [r4, #0]
   d9010:	6803      	ldr	r3, [r0, #0]
   d9012:	695b      	ldr	r3, [r3, #20]
   d9014:	4798      	blx	r3
   d9016:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d9018:	6820      	ldr	r0, [r4, #0]
   d901a:	6803      	ldr	r3, [r0, #0]
   d901c:	695b      	ldr	r3, [r3, #20]
   d901e:	4798      	blx	r3
   d9020:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d9022:	e7e5      	b.n	d8ff0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d9024 <_ZN9FuelGauge18readConfigRegisterERhS0_>:
int FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
   d9024:	4613      	mov	r3, r2
    return readRegister(CONFIG_REGISTER, MSB, LSB);
   d9026:	460a      	mov	r2, r1
   d9028:	210c      	movs	r1, #12
   d902a:	f7ff bfbd 	b.w	d8fa8 <_ZN9FuelGauge12readRegisterEhRhS0_>

000d902e <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d902e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d9032:	4616      	mov	r6, r2
   d9034:	4604      	mov	r4, r0
   d9036:	461d      	mov	r5, r3
   d9038:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d903a:	f7ff ff91 	bl	d8f60 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d903e:	2336      	movs	r3, #54	; 0x36
   d9040:	f88d 3000 	strb.w	r3, [sp]
   d9044:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d9046:	6820      	ldr	r0, [r4, #0]
   d9048:	9301      	str	r3, [sp, #4]
   d904a:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d904e:	230a      	movs	r3, #10
   d9050:	4669      	mov	r1, sp
   d9052:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9054:	f88d 8008 	strb.w	r8, [sp, #8]
   d9058:	f000 f8c3 	bl	d91e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d905c:	6820      	ldr	r0, [r4, #0]
   d905e:	6803      	ldr	r3, [r0, #0]
   d9060:	4639      	mov	r1, r7
   d9062:	689b      	ldr	r3, [r3, #8]
   d9064:	4798      	blx	r3
    i2c_.write(MSB);
   d9066:	6820      	ldr	r0, [r4, #0]
   d9068:	6803      	ldr	r3, [r0, #0]
   d906a:	4631      	mov	r1, r6
   d906c:	689b      	ldr	r3, [r3, #8]
   d906e:	4798      	blx	r3
    i2c_.write(LSB);
   d9070:	6820      	ldr	r0, [r4, #0]
   d9072:	6803      	ldr	r3, [r0, #0]
   d9074:	4629      	mov	r1, r5
   d9076:	689b      	ldr	r3, [r3, #8]
   d9078:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d907a:	4641      	mov	r1, r8
   d907c:	6820      	ldr	r0, [r4, #0]
   d907e:	f000 f8c8 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
   d9082:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d9084:	4620      	mov	r0, r4
   d9086:	bf0c      	ite	eq
   d9088:	2500      	moveq	r5, #0
   d908a:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d908e:	f7ff ff80 	bl	d8f92 <_ZN9FuelGauge6unlockEv>
}
   d9092:	4628      	mov	r0, r5
   d9094:	b004      	add	sp, #16
   d9096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d909a <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d909a:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d909c:	2240      	movs	r2, #64	; 0x40
   d909e:	2300      	movs	r3, #0
   d90a0:	2106      	movs	r1, #6
   d90a2:	f7ff ffc4 	bl	d902e <_ZN9FuelGauge13writeRegisterEhhh>
}
   d90a6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d90aa:	bd08      	pop	{r3, pc}

000d90ac <_ZN9FuelGauge6wakeupEv>:
int FuelGauge::wakeup() {
   d90ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d90ae:	4605      	mov	r5, r0
      { _M_device.lock(); }
   d90b0:	f7ff ff56 	bl	d8f60 <_ZN9FuelGauge4lockEv>
    byte MSB = 0;
   d90b4:	2300      	movs	r3, #0
    CHECK(readConfigRegister(MSB, LSB));
   d90b6:	f10d 0207 	add.w	r2, sp, #7
   d90ba:	f10d 0106 	add.w	r1, sp, #6
   d90be:	4628      	mov	r0, r5
    byte MSB = 0;
   d90c0:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d90c4:	f88d 3007 	strb.w	r3, [sp, #7]
    CHECK(readConfigRegister(MSB, LSB));
   d90c8:	f7ff ffac 	bl	d9024 <_ZN9FuelGauge18readConfigRegisterERhS0_>
   d90cc:	1e04      	subs	r4, r0, #0
   d90ce:	db0b      	blt.n	d90e8 <_ZN9FuelGauge6wakeupEv+0x3c>
    CHECK(writeRegister(CONFIG_REGISTER, MSB, (LSB & 0b01111111)));
   d90d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d90d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d90d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d90dc:	210c      	movs	r1, #12
   d90de:	4628      	mov	r0, r5
   d90e0:	f7ff ffa5 	bl	d902e <_ZN9FuelGauge13writeRegisterEhhh>
   d90e4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
      { _M_device.unlock(); }
   d90e8:	4628      	mov	r0, r5
   d90ea:	f7ff ff52 	bl	d8f92 <_ZN9FuelGauge6unlockEv>
}
   d90ee:	4620      	mov	r0, r4
   d90f0:	b003      	add	sp, #12
   d90f2:	bd30      	pop	{r4, r5, pc}

000d90f4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d90f4:	4770      	bx	lr

000d90f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d90f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d90f8:	4606      	mov	r6, r0
   d90fa:	4615      	mov	r5, r2
   d90fc:	460c      	mov	r4, r1
   d90fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9100:	42bc      	cmp	r4, r7
   d9102:	d006      	beq.n	d9112 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9104:	6833      	ldr	r3, [r6, #0]
   d9106:	f814 1b01 	ldrb.w	r1, [r4], #1
   d910a:	689b      	ldr	r3, [r3, #8]
   d910c:	4630      	mov	r0, r6
   d910e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d9110:	e7f6      	b.n	d9100 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d9112:	4628      	mov	r0, r5
   d9114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9116 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d9116:	7c00      	ldrb	r0, [r0, #16]
   d9118:	2200      	movs	r2, #0
   d911a:	f7fe bf69 	b.w	d7ff0 <hal_i2c_write>

000d911e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d911e:	7c00      	ldrb	r0, [r0, #16]
   d9120:	2100      	movs	r1, #0
   d9122:	f7fe bf6d 	b.w	d8000 <hal_i2c_available>

000d9126 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d9126:	7c00      	ldrb	r0, [r0, #16]
   d9128:	2100      	movs	r1, #0
   d912a:	f7fe bf71 	b.w	d8010 <hal_i2c_read>

000d912e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d912e:	7c00      	ldrb	r0, [r0, #16]
   d9130:	2100      	movs	r1, #0
   d9132:	f7fe bf75 	b.w	d8020 <hal_i2c_peek>

000d9136 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d9136:	7c00      	ldrb	r0, [r0, #16]
   d9138:	2100      	movs	r1, #0
   d913a:	f7fe bf79 	b.w	d8030 <hal_i2c_flush>

000d913e <_ZN7TwoWireD0Ev>:
   d913e:	b510      	push	{r4, lr}
   d9140:	2114      	movs	r1, #20
   d9142:	4604      	mov	r4, r0
   d9144:	f002 fcef 	bl	dbb26 <_ZdlPvj>
   d9148:	4620      	mov	r0, r4
   d914a:	bd10      	pop	{r4, pc}

000d914c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d914c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d914e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9152:	4604      	mov	r4, r0
   d9154:	4608      	mov	r0, r1
   d9156:	2100      	movs	r1, #0
   d9158:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d915c:	4b03      	ldr	r3, [pc, #12]	; (d916c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d915e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9160:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9162:	4611      	mov	r1, r2
   d9164:	f7fe ff74 	bl	d8050 <hal_i2c_init>
}
   d9168:	4620      	mov	r0, r4
   d916a:	bd10      	pop	{r4, pc}
   d916c:	000dd734 	.word	0x000dd734

000d9170 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9170:	2300      	movs	r3, #0
   d9172:	7c00      	ldrb	r0, [r0, #16]
   d9174:	461a      	mov	r2, r3
   d9176:	4619      	mov	r1, r3
   d9178:	f7fe bf22 	b.w	d7fc0 <hal_i2c_begin>

000d917c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d917c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d917e:	2200      	movs	r2, #0
   d9180:	2314      	movs	r3, #20
   d9182:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d9186:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d918a:	780b      	ldrb	r3, [r1, #0]
   d918c:	f88d 3008 	strb.w	r3, [sp, #8]
   d9190:	684b      	ldr	r3, [r1, #4]
   d9192:	9303      	str	r3, [sp, #12]
   d9194:	68cb      	ldr	r3, [r1, #12]
   d9196:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9198:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d919a:	7a0b      	ldrb	r3, [r1, #8]
   d919c:	9305      	str	r3, [sp, #20]
   d919e:	a901      	add	r1, sp, #4
   d91a0:	f7fe ff6e 	bl	d8080 <hal_i2c_request_ex>
}
   d91a4:	b007      	add	sp, #28
   d91a6:	f85d fb04 	ldr.w	pc, [sp], #4

000d91aa <_ZN7TwoWire11requestFromEhjh>:
{
   d91aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d91ac:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d91ae:	f88d 1000 	strb.w	r1, [sp]
   d91b2:	f04f 0164 	mov.w	r1, #100	; 0x64
   d91b6:	9103      	str	r1, [sp, #12]
   d91b8:	bf18      	it	ne
   d91ba:	2301      	movne	r3, #1
   d91bc:	4669      	mov	r1, sp
    size_ = size;
   d91be:	9201      	str	r2, [sp, #4]
   d91c0:	f88d 3008 	strb.w	r3, [sp, #8]
   d91c4:	f7ff ffda 	bl	d917c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d91c8:	b005      	add	sp, #20
   d91ca:	f85d fb04 	ldr.w	pc, [sp], #4

000d91ce <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d91ce:	2301      	movs	r3, #1
   d91d0:	f7ff bfeb 	b.w	d91aa <_ZN7TwoWire11requestFromEhjh>

000d91d4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d91d4:	7c00      	ldrb	r0, [r0, #16]
   d91d6:	2200      	movs	r2, #0
   d91d8:	f7fe befa 	b.w	d7fd0 <hal_i2c_begin_transmission>

000d91dc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d91dc:	b2c9      	uxtb	r1, r1
   d91de:	f7ff bff9 	b.w	d91d4 <_ZN7TwoWire17beginTransmissionEh>

000d91e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d91e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d91e4:	2300      	movs	r3, #0
   d91e6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d91ea:	684a      	ldr	r2, [r1, #4]
   d91ec:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d91ee:	2314      	movs	r3, #20
    };
   d91f0:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d91f2:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d91f6:	780b      	ldrb	r3, [r1, #0]
    };
   d91f8:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d91fa:	7a0a      	ldrb	r2, [r1, #8]
   d91fc:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d91fe:	7c00      	ldrb	r0, [r0, #16]
    };
   d9200:	f88d 3008 	strb.w	r3, [sp, #8]
   d9204:	aa01      	add	r2, sp, #4
   d9206:	4619      	mov	r1, r3
   d9208:	f7fe fee2 	bl	d7fd0 <hal_i2c_begin_transmission>
}
   d920c:	b007      	add	sp, #28
   d920e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9212 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9212:	7c00      	ldrb	r0, [r0, #16]
   d9214:	2200      	movs	r2, #0
   d9216:	f7fe bee3 	b.w	d7fe0 <hal_i2c_end_transmission>

000d921a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d921a:	2101      	movs	r1, #1
   d921c:	f7ff bff9 	b.w	d9212 <_ZN7TwoWire15endTransmissionEh>

000d9220 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d9220:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d9222:	2100      	movs	r1, #0
   d9224:	7c00      	ldrb	r0, [r0, #16]
   d9226:	f7fe ff1b 	bl	d8060 <hal_i2c_lock>
}
   d922a:	fab0 f080 	clz	r0, r0
   d922e:	0940      	lsrs	r0, r0, #5
   d9230:	bd08      	pop	{r3, pc}

000d9232 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d9232:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d9234:	2100      	movs	r1, #0
   d9236:	7c00      	ldrb	r0, [r0, #16]
   d9238:	f7fe ff1a 	bl	d8070 <hal_i2c_unlock>
}
   d923c:	fab0 f080 	clz	r0, r0
   d9240:	0940      	lsrs	r0, r0, #5
   d9242:	bd08      	pop	{r3, pc}

000d9244 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9244:	4700      	bx	r0
	...

000d9248 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9248:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d924c:	2400      	movs	r4, #0
{
   d924e:	461d      	mov	r5, r3
   d9250:	460f      	mov	r7, r1
   d9252:	4690      	mov	r8, r2
   d9254:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d9256:	f7fe fea3 	bl	d7fa0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d925a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d925c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d9260:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9264:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d9268:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d926c:	bfa2      	ittt	ge
   d926e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9272:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d9276:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9278:	4907      	ldr	r1, [pc, #28]	; (d9298 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d927a:	9400      	str	r4, [sp, #0]
   d927c:	4643      	mov	r3, r8
   d927e:	463a      	mov	r2, r7
   d9280:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9282:	bfa8      	it	ge
   d9284:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9288:	f7fe fe82 	bl	d7f90 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d928c:	fab0 f080 	clz	r0, r0
   d9290:	0940      	lsrs	r0, r0, #5
   d9292:	b004      	add	sp, #16
   d9294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9298:	000d9245 	.word	0x000d9245

000d929c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d929e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d92a0:	f7fe fe7e 	bl	d7fa0 <HAL_Interrupts_Detach>
   d92a4:	4605      	mov	r5, r0
   d92a6:	b970      	cbnz	r0, d92c6 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   d92a8:	4f08      	ldr	r7, [pc, #32]	; (d92cc <_Z15detachInterruptt+0x30>)
   d92aa:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   d92ae:	b146      	cbz	r6, d92c2 <_Z15detachInterruptt+0x26>
   d92b0:	4630      	mov	r0, r6
   d92b2:	f7fb f841 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d92b6:	2110      	movs	r1, #16
   d92b8:	4630      	mov	r0, r6
   d92ba:	f002 fc34 	bl	dbb26 <_ZdlPvj>
        handlers[pin] = nullptr;
   d92be:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   d92c2:	2001      	movs	r0, #1
   d92c4:	e000      	b.n	d92c8 <_Z15detachInterruptt+0x2c>
        return false;
   d92c6:	2000      	movs	r0, #0
    }
    return true;
}
   d92c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d92ca:	bf00      	nop
   d92cc:	2003e540 	.word	0x2003e540

000d92d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d92d0:	4770      	bx	lr

000d92d2 <_ZN9IPAddressD0Ev>:
   d92d2:	b510      	push	{r4, lr}
   d92d4:	2118      	movs	r1, #24
   d92d6:	4604      	mov	r4, r0
   d92d8:	f002 fc25 	bl	dbb26 <_ZdlPvj>
   d92dc:	4620      	mov	r0, r4
   d92de:	bd10      	pop	{r4, pc}

000d92e0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d92e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d92e2:	7d03      	ldrb	r3, [r0, #20]
   d92e4:	2b06      	cmp	r3, #6
{
   d92e6:	b08d      	sub	sp, #52	; 0x34
   d92e8:	460e      	mov	r6, r1
   d92ea:	f100 0704 	add.w	r7, r0, #4
   d92ee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d92f2:	d012      	beq.n	d931a <_ZNK9IPAddress7printToER5Print+0x3a>
   d92f4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d92f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d92fc:	220a      	movs	r2, #10
   d92fe:	4630      	mov	r0, r6
   d9300:	f001 fb9c 	bl	daa3c <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9304:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9306:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d9308:	d019      	beq.n	d933e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d930a:	2c00      	cmp	r4, #0
   d930c:	d0f4      	beq.n	d92f8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d930e:	212e      	movs	r1, #46	; 0x2e
   d9310:	4630      	mov	r0, r6
   d9312:	f001 fb7a 	bl	daa0a <_ZN5Print5printEc>
   d9316:	4404      	add	r4, r0
   d9318:	e7ee      	b.n	d92f8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d931a:	232f      	movs	r3, #47	; 0x2f
   d931c:	466a      	mov	r2, sp
   d931e:	4639      	mov	r1, r7
   d9320:	200a      	movs	r0, #10
		buf[0] = 0;
   d9322:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9326:	f7fe feb3 	bl	d8090 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d932a:	4668      	mov	r0, sp
   d932c:	f003 fba5 	bl	dca7a <strlen>
   d9330:	6833      	ldr	r3, [r6, #0]
   d9332:	4602      	mov	r2, r0
   d9334:	68db      	ldr	r3, [r3, #12]
   d9336:	4669      	mov	r1, sp
   d9338:	4630      	mov	r0, r6
   d933a:	4798      	blx	r3
   d933c:	4604      	mov	r4, r0
    }
    return n;
}
   d933e:	4620      	mov	r0, r4
   d9340:	b00d      	add	sp, #52	; 0x34
   d9342:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9344 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9344:	b510      	push	{r4, lr}
   d9346:	4b05      	ldr	r3, [pc, #20]	; (d935c <_ZN9IPAddressC1Ev+0x18>)
   d9348:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d934a:	2211      	movs	r2, #17
   d934c:	f840 3b04 	str.w	r3, [r0], #4
   d9350:	2100      	movs	r1, #0
   d9352:	f003 fb1f 	bl	dc994 <memset>
}
   d9356:	4620      	mov	r0, r4
   d9358:	bd10      	pop	{r4, pc}
   d935a:	bf00      	nop
   d935c:	000dd75c 	.word	0x000dd75c

000d9360 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9360:	4603      	mov	r3, r0
   d9362:	4a07      	ldr	r2, [pc, #28]	; (d9380 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9364:	b510      	push	{r4, lr}
   d9366:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d936a:	f101 0210 	add.w	r2, r1, #16
   d936e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9372:	f843 4b04 	str.w	r4, [r3], #4
   d9376:	4291      	cmp	r1, r2
   d9378:	d1f9      	bne.n	d936e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d937a:	780a      	ldrb	r2, [r1, #0]
   d937c:	701a      	strb	r2, [r3, #0]
}
   d937e:	bd10      	pop	{r4, pc}
   d9380:	000dd75c 	.word	0x000dd75c

000d9384 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9384:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9386:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d938a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d938e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9392:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d9396:	2304      	movs	r3, #4
   d9398:	6041      	str	r1, [r0, #4]
   d939a:	7503      	strb	r3, [r0, #20]
}
   d939c:	bd10      	pop	{r4, pc}

000d939e <_ZN9IPAddressaSEPKh>:
{
   d939e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d93a0:	78cb      	ldrb	r3, [r1, #3]
   d93a2:	9300      	str	r3, [sp, #0]
   d93a4:	788b      	ldrb	r3, [r1, #2]
   d93a6:	784a      	ldrb	r2, [r1, #1]
   d93a8:	7809      	ldrb	r1, [r1, #0]
   d93aa:	f7ff ffeb 	bl	d9384 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d93ae:	b002      	add	sp, #8
   d93b0:	bd10      	pop	{r4, pc}

000d93b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d93b2:	f100 0310 	add.w	r3, r0, #16
   d93b6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d93b8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d93bc:	2901      	cmp	r1, #1
   d93be:	4618      	mov	r0, r3
   d93c0:	d108      	bne.n	d93d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d93c2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d93c6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d93ca:	3a01      	subs	r2, #1
   d93cc:	f103 0310 	add.w	r3, r3, #16
   d93d0:	d1f2      	bne.n	d93b8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d93d2:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d93d4:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d93d6:	bf04      	itt	eq
   d93d8:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d93dc:	1852      	addeq	r2, r2, r1
   d93de:	e7f4      	b.n	d93ca <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d93e0 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d93e0:	b40e      	push	{r1, r2, r3}
   d93e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d93e4:	b088      	sub	sp, #32
   d93e6:	af00      	add	r7, sp, #0
   d93e8:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d93ec:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d93ee:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d93f2:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d93f4:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d93f6:	462b      	mov	r3, r5
   d93f8:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d93fa:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d93fc:	f7ff f8ac 	bl	d8558 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9400:	280f      	cmp	r0, #15
   d9402:	687a      	ldr	r2, [r7, #4]
   d9404:	d91a      	bls.n	d943c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d9406:	f100 0308 	add.w	r3, r0, #8
   d940a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d940e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d9410:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9414:	1c41      	adds	r1, r0, #1
   d9416:	462b      	mov	r3, r5
   d9418:	4668      	mov	r0, sp
        va_start(args, fmt);
   d941a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d941c:	f7ff f89c 	bl	d8558 <vsnprintf>
        if (n > 0) {
   d9420:	1e02      	subs	r2, r0, #0
   d9422:	dd04      	ble.n	d942e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d9424:	6823      	ldr	r3, [r4, #0]
   d9426:	4669      	mov	r1, sp
   d9428:	689b      	ldr	r3, [r3, #8]
   d942a:	4620      	mov	r0, r4
   d942c:	4798      	blx	r3
   d942e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d9430:	3720      	adds	r7, #32
   d9432:	46bd      	mov	sp, r7
   d9434:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9438:	b003      	add	sp, #12
   d943a:	4770      	bx	lr
    } else if (n > 0) {
   d943c:	2800      	cmp	r0, #0
   d943e:	d0f7      	beq.n	d9430 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d9440:	6823      	ldr	r3, [r4, #0]
   d9442:	4602      	mov	r2, r0
   d9444:	689b      	ldr	r3, [r3, #8]
   d9446:	f107 0110 	add.w	r1, r7, #16
   d944a:	4620      	mov	r0, r4
   d944c:	4798      	blx	r3
}
   d944e:	e7ef      	b.n	d9430 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d9450 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9450:	b510      	push	{r4, lr}
          _M_dispose();
   d9452:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9454:	4604      	mov	r4, r0
          _M_dispose();
   d9456:	689b      	ldr	r3, [r3, #8]
   d9458:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d945a:	68a3      	ldr	r3, [r4, #8]
   d945c:	3b01      	subs	r3, #1
   d945e:	60a3      	str	r3, [r4, #8]
   d9460:	b92b      	cbnz	r3, d946e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d9462:	6823      	ldr	r3, [r4, #0]
   d9464:	4620      	mov	r0, r4
   d9466:	68db      	ldr	r3, [r3, #12]
    }
   d9468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d946c:	4718      	bx	r3
    }
   d946e:	bd10      	pop	{r4, pc}

000d9470 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9470:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d9472:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d9474:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d9478:	689b      	ldr	r3, [r3, #8]
   d947a:	2201      	movs	r2, #1
   d947c:	f10d 0107 	add.w	r1, sp, #7
   d9480:	4798      	blx	r3
}
   d9482:	b003      	add	sp, #12
   d9484:	f85d fb04 	ldr.w	pc, [sp], #4

000d9488 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d9488:	b538      	push	{r3, r4, r5, lr}
   d948a:	680b      	ldr	r3, [r1, #0]
   d948c:	6003      	str	r3, [r0, #0]
   d948e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d9490:	6843      	ldr	r3, [r0, #4]
   d9492:	429d      	cmp	r5, r3
    class __shared_ptr
   d9494:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d9496:	d00c      	beq.n	d94b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d9498:	b115      	cbz	r5, d94a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d949a:	686b      	ldr	r3, [r5, #4]
   d949c:	3301      	adds	r3, #1
   d949e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d94a0:	6860      	ldr	r0, [r4, #4]
   d94a2:	b128      	cbz	r0, d94b0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d94a4:	6843      	ldr	r3, [r0, #4]
   d94a6:	3b01      	subs	r3, #1
   d94a8:	6043      	str	r3, [r0, #4]
   d94aa:	b90b      	cbnz	r3, d94b0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d94ac:	f7ff ffd0 	bl	d9450 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d94b0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d94b2:	4620      	mov	r0, r4
   d94b4:	bd38      	pop	{r3, r4, r5, pc}

000d94b6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d94b6:	460b      	mov	r3, r1
   d94b8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d94ba:	2200      	movs	r2, #0
   d94bc:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d94be:	e9c0 2200 	strd	r2, r2, [r0]
   d94c2:	4604      	mov	r4, r0
        t_ = t;
   d94c4:	6083      	str	r3, [r0, #8]
    if (t) {
   d94c6:	b90b      	cbnz	r3, d94cc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d94c8:	4620      	mov	r0, r4
   d94ca:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d94cc:	f7ff ffdc 	bl	d9488 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d94d0:	e7fa      	b.n	d94c8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d94d2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d94d2:	6883      	ldr	r3, [r0, #8]
   d94d4:	b1eb      	cbz	r3, d9512 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d94d6:	781a      	ldrb	r2, [r3, #0]
   d94d8:	2a03      	cmp	r2, #3
   d94da:	d81a      	bhi.n	d9512 <_ZNK5spark9JSONValue4typeEv+0x40>
   d94dc:	e8df f002 	tbb	[pc, r2]
   d94e0:	1b021704 	.word	0x1b021704
   d94e4:	2005      	movs	r0, #5
   d94e6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d94e8:	6802      	ldr	r2, [r0, #0]
   d94ea:	685b      	ldr	r3, [r3, #4]
   d94ec:	6852      	ldr	r2, [r2, #4]
   d94ee:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d94f0:	282d      	cmp	r0, #45	; 0x2d
   d94f2:	d012      	beq.n	d951a <_ZNK5spark9JSONValue4typeEv+0x48>
   d94f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d94f8:	2b09      	cmp	r3, #9
   d94fa:	d90e      	bls.n	d951a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d94fc:	2874      	cmp	r0, #116	; 0x74
   d94fe:	d00e      	beq.n	d951e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9500:	2866      	cmp	r0, #102	; 0x66
   d9502:	d00c      	beq.n	d951e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d9504:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d9508:	4258      	negs	r0, r3
   d950a:	4158      	adcs	r0, r3
   d950c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d950e:	2006      	movs	r0, #6
   d9510:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d9512:	2000      	movs	r0, #0
   d9514:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d9516:	2004      	movs	r0, #4
   d9518:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d951a:	2003      	movs	r0, #3
   d951c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d951e:	2002      	movs	r0, #2
}
   d9520:	4770      	bx	lr

000d9522 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d9522:	b510      	push	{r4, lr}
   d9524:	4604      	mov	r4, r0
    switch (type()) {
   d9526:	f7ff ffd4 	bl	d94d2 <_ZNK5spark9JSONValue4typeEv>
   d952a:	2802      	cmp	r0, #2
   d952c:	d00e      	beq.n	d954c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d952e:	1ec3      	subs	r3, r0, #3
   d9530:	b2db      	uxtb	r3, r3
   d9532:	2b01      	cmp	r3, #1
   d9534:	d814      	bhi.n	d9560 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d9536:	6822      	ldr	r2, [r4, #0]
   d9538:	68a3      	ldr	r3, [r4, #8]
   d953a:	6850      	ldr	r0, [r2, #4]
   d953c:	685b      	ldr	r3, [r3, #4]
}
   d953e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d9542:	220a      	movs	r2, #10
   d9544:	2100      	movs	r1, #0
   d9546:	4418      	add	r0, r3
   d9548:	f003 bb52 	b.w	dcbf0 <strtol>
        const char* const s = d_->json + t_->start;
   d954c:	6822      	ldr	r2, [r4, #0]
   d954e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d9550:	6852      	ldr	r2, [r2, #4]
   d9552:	685b      	ldr	r3, [r3, #4]
   d9554:	5cd0      	ldrb	r0, [r2, r3]
   d9556:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d955a:	4258      	negs	r0, r3
   d955c:	4158      	adcs	r0, r3
}
   d955e:	bd10      	pop	{r4, pc}
    switch (type()) {
   d9560:	2000      	movs	r0, #0
   d9562:	e7fc      	b.n	d955e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d9564 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9564:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9566:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d9568:	e9c0 3300 	strd	r3, r3, [r0]
   d956c:	4604      	mov	r4, r0
        n_(0) {
   d956e:	480e      	ldr	r0, [pc, #56]	; (d95a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9570:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9574:	b1a9      	cbz	r1, d95a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d9576:	780b      	ldrb	r3, [r1, #0]
   d9578:	2b03      	cmp	r3, #3
   d957a:	d006      	beq.n	d958a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d957c:	b98b      	cbnz	r3, d95a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d957e:	6813      	ldr	r3, [r2, #0]
   d9580:	6858      	ldr	r0, [r3, #4]
   d9582:	684b      	ldr	r3, [r1, #4]
   d9584:	5cc3      	ldrb	r3, [r0, r3]
   d9586:	2b6e      	cmp	r3, #110	; 0x6e
   d9588:	d007      	beq.n	d959a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d958a:	6813      	ldr	r3, [r2, #0]
   d958c:	684d      	ldr	r5, [r1, #4]
   d958e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9590:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d9592:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d9594:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d9596:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d9598:	60e3      	str	r3, [r4, #12]
   d959a:	4611      	mov	r1, r2
   d959c:	4620      	mov	r0, r4
   d959e:	f7ff ff73 	bl	d9488 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d95a2:	4620      	mov	r0, r4
   d95a4:	bd38      	pop	{r3, r4, r5, pc}
   d95a6:	bf00      	nop
   d95a8:	000dcfdd 	.word	0x000dcfdd

000d95ac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d95ac:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d95ae:	2500      	movs	r5, #0
   d95b0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d95b2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d95b6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d95ba:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d95be:	4604      	mov	r4, r0
   d95c0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d95c2:	b14b      	cbz	r3, d95d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d95c4:	781a      	ldrb	r2, [r3, #0]
   d95c6:	2a01      	cmp	r2, #1
   d95c8:	d106      	bne.n	d95d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d95ca:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d95ce:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d95d0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d95d2:	6143      	str	r3, [r0, #20]
   d95d4:	f7ff ff58 	bl	d9488 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d95d8:	4620      	mov	r0, r4
   d95da:	bd38      	pop	{r3, r4, r5, pc}

000d95dc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d95dc:	b510      	push	{r4, lr}
    if (!n_) {
   d95de:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d95e0:	4604      	mov	r4, r0
    if (!n_) {
   d95e2:	b163      	cbz	r3, d95fe <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d95e4:	6880      	ldr	r0, [r0, #8]
   d95e6:	60e0      	str	r0, [r4, #12]
    --n_;
   d95e8:	3b01      	subs	r3, #1
    ++t_;
   d95ea:	3010      	adds	r0, #16
   d95ec:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d95ee:	6120      	str	r0, [r4, #16]
    --n_;
   d95f0:	6163      	str	r3, [r4, #20]
    if (n_) {
   d95f2:	b113      	cbz	r3, d95fa <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d95f4:	f7ff fedd 	bl	d93b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d95f8:	60a0      	str	r0, [r4, #8]
    return true;
   d95fa:	2001      	movs	r0, #1
   d95fc:	e000      	b.n	d9600 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d95fe:	4618      	mov	r0, r3
}
   d9600:	bd10      	pop	{r4, pc}

000d9602 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9602:	b510      	push	{r4, lr}
    write('}');
   d9604:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9606:	4604      	mov	r4, r0
    write('}');
   d9608:	f7ff ff32 	bl	d9470 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d960c:	2301      	movs	r3, #1
   d960e:	7123      	strb	r3, [r4, #4]
}
   d9610:	4620      	mov	r0, r4
   d9612:	bd10      	pop	{r4, pc}

000d9614 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d9614:	b508      	push	{r3, lr}
    switch (state_) {
   d9616:	7903      	ldrb	r3, [r0, #4]
   d9618:	2b01      	cmp	r3, #1
   d961a:	d002      	beq.n	d9622 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d961c:	2b02      	cmp	r3, #2
   d961e:	d004      	beq.n	d962a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d9620:	bd08      	pop	{r3, pc}
        write(',');
   d9622:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d9624:	f7ff ff24 	bl	d9470 <_ZN5spark10JSONWriter5writeEc>
}
   d9628:	e7fa      	b.n	d9620 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d962a:	213a      	movs	r1, #58	; 0x3a
   d962c:	e7fa      	b.n	d9624 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d962e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d962e:	b510      	push	{r4, lr}
   d9630:	4604      	mov	r4, r0
    writeSeparator();
   d9632:	f7ff ffef 	bl	d9614 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d9636:	4620      	mov	r0, r4
   d9638:	217b      	movs	r1, #123	; 0x7b
   d963a:	f7ff ff19 	bl	d9470 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d963e:	2300      	movs	r3, #0
   d9640:	7123      	strb	r3, [r4, #4]
}
   d9642:	4620      	mov	r0, r4
   d9644:	bd10      	pop	{r4, pc}
	...

000d9648 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d9648:	b513      	push	{r0, r1, r4, lr}
   d964a:	4604      	mov	r4, r0
   d964c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d964e:	f7ff ffe1 	bl	d9614 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9652:	6823      	ldr	r3, [r4, #0]
   d9654:	9a01      	ldr	r2, [sp, #4]
   d9656:	68db      	ldr	r3, [r3, #12]
   d9658:	4903      	ldr	r1, [pc, #12]	; (d9668 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d965a:	4620      	mov	r0, r4
   d965c:	4798      	blx	r3
    state_ = NEXT;
   d965e:	2301      	movs	r3, #1
}
   d9660:	4620      	mov	r0, r4
    state_ = NEXT;
   d9662:	7123      	strb	r3, [r4, #4]
}
   d9664:	b002      	add	sp, #8
   d9666:	bd10      	pop	{r4, pc}
   d9668:	000dd348 	.word	0x000dd348

000d966c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d966c:	b513      	push	{r0, r1, r4, lr}
   d966e:	4604      	mov	r4, r0
   d9670:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9672:	f7ff ffcf 	bl	d9614 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d9676:	6823      	ldr	r3, [r4, #0]
   d9678:	9a01      	ldr	r2, [sp, #4]
   d967a:	68db      	ldr	r3, [r3, #12]
   d967c:	4903      	ldr	r1, [pc, #12]	; (d968c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d967e:	4620      	mov	r0, r4
   d9680:	4798      	blx	r3
    state_ = NEXT;
   d9682:	2301      	movs	r3, #1
}
   d9684:	4620      	mov	r0, r4
    state_ = NEXT;
   d9686:	7123      	strb	r3, [r4, #4]
}
   d9688:	b002      	add	sp, #8
   d968a:	bd10      	pop	{r4, pc}
   d968c:	000dd537 	.word	0x000dd537

000d9690 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9694:	460d      	mov	r5, r1
   d9696:	4617      	mov	r7, r2
    write('"');
   d9698:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d969a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d973c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d969e:	4604      	mov	r4, r0
    const char* const end = str + size;
   d96a0:	442f      	add	r7, r5
    write('"');
   d96a2:	f7ff fee5 	bl	d9470 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d96a6:	4629      	mov	r1, r5
    while (s != end) {
   d96a8:	42bd      	cmp	r5, r7
   d96aa:	462a      	mov	r2, r5
   d96ac:	d038      	beq.n	d9720 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d96ae:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d96b2:	2e22      	cmp	r6, #34	; 0x22
   d96b4:	d003      	beq.n	d96be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d96b6:	2e5c      	cmp	r6, #92	; 0x5c
   d96b8:	d001      	beq.n	d96be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d96ba:	2e1f      	cmp	r6, #31
   d96bc:	d8f4      	bhi.n	d96a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d96be:	6823      	ldr	r3, [r4, #0]
   d96c0:	1a52      	subs	r2, r2, r1
   d96c2:	689b      	ldr	r3, [r3, #8]
   d96c4:	4620      	mov	r0, r4
   d96c6:	4798      	blx	r3
            write('\\');
   d96c8:	215c      	movs	r1, #92	; 0x5c
   d96ca:	4620      	mov	r0, r4
   d96cc:	f7ff fed0 	bl	d9470 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d96d0:	2e0d      	cmp	r6, #13
   d96d2:	d80a      	bhi.n	d96ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d96d4:	2e07      	cmp	r6, #7
   d96d6:	d91c      	bls.n	d9712 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d96d8:	f1a6 0308 	sub.w	r3, r6, #8
   d96dc:	2b05      	cmp	r3, #5
   d96de:	d818      	bhi.n	d9712 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d96e0:	e8df f003 	tbb	[pc, r3]
   d96e4:	17110f0d 	.word	0x17110f0d
   d96e8:	1513      	.short	0x1513
   d96ea:	2e22      	cmp	r6, #34	; 0x22
   d96ec:	d001      	beq.n	d96f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d96ee:	2e5c      	cmp	r6, #92	; 0x5c
   d96f0:	d10f      	bne.n	d9712 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d96f2:	4631      	mov	r1, r6
                write('b');
   d96f4:	4620      	mov	r0, r4
   d96f6:	f7ff febb 	bl	d9470 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d96fa:	4629      	mov	r1, r5
    while (s != end) {
   d96fc:	e7d4      	b.n	d96a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d96fe:	2162      	movs	r1, #98	; 0x62
   d9700:	e7f8      	b.n	d96f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d9702:	2174      	movs	r1, #116	; 0x74
   d9704:	e7f6      	b.n	d96f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d9706:	216e      	movs	r1, #110	; 0x6e
   d9708:	e7f4      	b.n	d96f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d970a:	2166      	movs	r1, #102	; 0x66
   d970c:	e7f2      	b.n	d96f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d970e:	2172      	movs	r1, #114	; 0x72
   d9710:	e7f0      	b.n	d96f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d9712:	6823      	ldr	r3, [r4, #0]
   d9714:	4632      	mov	r2, r6
   d9716:	68db      	ldr	r3, [r3, #12]
   d9718:	4641      	mov	r1, r8
   d971a:	4620      	mov	r0, r4
   d971c:	4798      	blx	r3
                break;
   d971e:	e7ec      	b.n	d96fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d9720:	428d      	cmp	r5, r1
   d9722:	d004      	beq.n	d972e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d9724:	6823      	ldr	r3, [r4, #0]
   d9726:	1a6a      	subs	r2, r5, r1
   d9728:	689b      	ldr	r3, [r3, #8]
   d972a:	4620      	mov	r0, r4
   d972c:	4798      	blx	r3
    }
    write('"');
   d972e:	2122      	movs	r1, #34	; 0x22
   d9730:	4620      	mov	r0, r4
   d9732:	f7ff fe9d 	bl	d9470 <_ZN5spark10JSONWriter5writeEc>
}
   d9736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d973a:	bf00      	nop
   d973c:	000dd768 	.word	0x000dd768

000d9740 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d9740:	b513      	push	{r0, r1, r4, lr}
   d9742:	4604      	mov	r4, r0
   d9744:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9748:	f7ff ff64 	bl	d9614 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d974c:	4620      	mov	r0, r4
   d974e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9752:	f7ff ff9d 	bl	d9690 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d9756:	2302      	movs	r3, #2
}
   d9758:	4620      	mov	r0, r4
    state_ = VALUE;
   d975a:	7123      	strb	r3, [r4, #4]
}
   d975c:	b002      	add	sp, #8
   d975e:	bd10      	pop	{r4, pc}

000d9760 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9760:	b513      	push	{r0, r1, r4, lr}
   d9762:	4604      	mov	r4, r0
   d9764:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9768:	f7ff ff54 	bl	d9614 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d976c:	4620      	mov	r0, r4
   d976e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9772:	f7ff ff8d 	bl	d9690 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d9776:	2301      	movs	r3, #1
}
   d9778:	4620      	mov	r0, r4
    state_ = NEXT;
   d977a:	7123      	strb	r3, [r4, #4]
}
   d977c:	b002      	add	sp, #8
   d977e:	bd10      	pop	{r4, pc}

000d9780 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d9780:	6880      	ldr	r0, [r0, #8]
   d9782:	6803      	ldr	r3, [r0, #0]
   d9784:	68db      	ldr	r3, [r3, #12]
   d9786:	4718      	bx	r3

000d9788 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d9788:	4770      	bx	lr

000d978a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d978a:	4608      	mov	r0, r1
   d978c:	b111      	cbz	r1, d9794 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d978e:	680b      	ldr	r3, [r1, #0]
   d9790:	685b      	ldr	r3, [r3, #4]
   d9792:	4718      	bx	r3
}
   d9794:	4770      	bx	lr

000d9796 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d9796:	4770      	bx	lr

000d9798 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d9798:	4770      	bx	lr

000d979a <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d979a:	4770      	bx	lr

000d979c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d979c:	b538      	push	{r3, r4, r5, lr}
   d979e:	4604      	mov	r4, r0
   d97a0:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d97a2:	6800      	ldr	r0, [r0, #0]
   d97a4:	212e      	movs	r1, #46	; 0x2e
   d97a6:	f003 f92e 	bl	dca06 <strchrnul>
    size = s - category;
   d97aa:	6823      	ldr	r3, [r4, #0]
   d97ac:	1ac3      	subs	r3, r0, r3
   d97ae:	602b      	str	r3, [r5, #0]
    if (size) {
   d97b0:	b123      	cbz	r3, d97bc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d97b2:	7803      	ldrb	r3, [r0, #0]
   d97b4:	b103      	cbz	r3, d97b8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d97b6:	3001      	adds	r0, #1
   d97b8:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d97ba:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d97bc:	4618      	mov	r0, r3
   d97be:	bd38      	pop	{r3, r4, r5, pc}

000d97c0 <_ZN5spark16JSONStreamWriterD0Ev>:
   d97c0:	b510      	push	{r4, lr}
   d97c2:	210c      	movs	r1, #12
   d97c4:	4604      	mov	r4, r0
   d97c6:	f002 f9ae 	bl	dbb26 <_ZdlPvj>
   d97ca:	4620      	mov	r0, r4
   d97cc:	bd10      	pop	{r4, pc}

000d97ce <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d97ce:	b510      	push	{r4, lr}
   d97d0:	2104      	movs	r1, #4
   d97d2:	4604      	mov	r4, r0
   d97d4:	f002 f9a7 	bl	dbb26 <_ZdlPvj>
   d97d8:	4620      	mov	r0, r4
   d97da:	bd10      	pop	{r4, pc}

000d97dc <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d97dc:	b510      	push	{r4, lr}
   d97de:	2104      	movs	r1, #4
   d97e0:	4604      	mov	r4, r0
   d97e2:	f002 f9a0 	bl	dbb26 <_ZdlPvj>
   d97e6:	4620      	mov	r0, r4
   d97e8:	bd10      	pop	{r4, pc}

000d97ea <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d97ea:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d97ec:	f003 f915 	bl	dca1a <strcmp>
}
   d97f0:	fab0 f080 	clz	r0, r0
   d97f4:	0940      	lsrs	r0, r0, #5
   d97f6:	bd08      	pop	{r3, pc}

000d97f8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d97f8:	b510      	push	{r4, lr}
   d97fa:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d97fc:	f001 ff6c 	bl	db6d8 <_Z16_fetch_usbserialv>
   d9800:	4284      	cmp	r4, r0
   d9802:	d010      	beq.n	d9826 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d9804:	f001 fedc 	bl	db5c0 <_Z22__fetch_global_Serial1v>
   d9808:	4284      	cmp	r4, r0
   d980a:	d105      	bne.n	d9818 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d980c:	f001 fed8 	bl	db5c0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d9810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d9814:	f001 bed1 	b.w	db5ba <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d9818:	b12c      	cbz	r4, d9826 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d981a:	6823      	ldr	r3, [r4, #0]
   d981c:	4620      	mov	r0, r4
   d981e:	685b      	ldr	r3, [r3, #4]
}
   d9820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9824:	4718      	bx	r3
   d9826:	bd10      	pop	{r4, pc}

000d9828 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d9828:	b513      	push	{r0, r1, r4, lr}
   d982a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d982c:	4608      	mov	r0, r1
   d982e:	9101      	str	r1, [sp, #4]
   d9830:	f003 f923 	bl	dca7a <strlen>
   d9834:	9901      	ldr	r1, [sp, #4]
   d9836:	4602      	mov	r2, r0
   d9838:	4620      	mov	r0, r4
}
   d983a:	b002      	add	sp, #8
   d983c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d9840:	f7ff bf8e 	b.w	d9760 <_ZN5spark10JSONWriter5valueEPKcj>

000d9844 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d9844:	b513      	push	{r0, r1, r4, lr}
   d9846:	4604      	mov	r4, r0
    write(str, strlen(str));
   d9848:	4608      	mov	r0, r1
   d984a:	9101      	str	r1, [sp, #4]
   d984c:	f003 f915 	bl	dca7a <strlen>
   d9850:	6823      	ldr	r3, [r4, #0]
   d9852:	9901      	ldr	r1, [sp, #4]
   d9854:	68db      	ldr	r3, [r3, #12]
   d9856:	4602      	mov	r2, r0
   d9858:	4620      	mov	r0, r4
}
   d985a:	b002      	add	sp, #8
   d985c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d9860:	4718      	bx	r3

000d9862 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d9862:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d9864:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d9866:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d986a:	68db      	ldr	r3, [r3, #12]
   d986c:	2201      	movs	r2, #1
   d986e:	f10d 0107 	add.w	r1, sp, #7
   d9872:	4798      	blx	r3
}
   d9874:	b003      	add	sp, #12
   d9876:	f85d fb04 	ldr.w	pc, [sp], #4

000d987a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d987a:	b40e      	push	{r1, r2, r3}
   d987c:	b503      	push	{r0, r1, lr}
   d987e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d9880:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d9882:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d9886:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d9888:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d988a:	f001 f8f5 	bl	daa78 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d988e:	b002      	add	sp, #8
   d9890:	f85d eb04 	ldr.w	lr, [sp], #4
   d9894:	b003      	add	sp, #12
   d9896:	4770      	bx	lr

000d9898 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d9898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d989c:	e9d0 9500 	ldrd	r9, r5, [r0]
   d98a0:	f04f 0814 	mov.w	r8, #20
   d98a4:	fb08 f505 	mul.w	r5, r8, r5
   d98a8:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d98aa:	10ab      	asrs	r3, r5, #2
   d98ac:	4d18      	ldr	r5, [pc, #96]	; (d9910 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d98ae:	4617      	mov	r7, r2
   d98b0:	435d      	muls	r5, r3
   d98b2:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d98b4:	2d00      	cmp	r5, #0
   d98b6:	dd23      	ble.n	d9900 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d98b8:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d98ba:	fb08 f006 	mul.w	r0, r8, r6
   d98be:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d98c2:	463a      	mov	r2, r7
   d98c4:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d98c8:	5820      	ldr	r0, [r4, r0]
   d98ca:	9101      	str	r1, [sp, #4]
   d98cc:	455f      	cmp	r7, fp
   d98ce:	bf28      	it	cs
   d98d0:	465a      	movcs	r2, fp
   d98d2:	f003 f8da 	bl	dca8a <strncmp>
                if (cmp == 0) {
   d98d6:	9901      	ldr	r1, [sp, #4]
   d98d8:	2301      	movs	r3, #1
   d98da:	b978      	cbnz	r0, d98fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d98dc:	455f      	cmp	r7, fp
   d98de:	d103      	bne.n	d98e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d98e0:	9a00      	ldr	r2, [sp, #0]
   d98e2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d98e4:	4635      	mov	r5, r6
   d98e6:	e7e5      	b.n	d98b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d98e8:	bf8c      	ite	hi
   d98ea:	2001      	movhi	r0, #1
   d98ec:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d98ee:	2800      	cmp	r0, #0
   d98f0:	d0f8      	beq.n	d98e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d98f2:	1bae      	subs	r6, r5, r6
	      ++__first;
   d98f4:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d98f8:	3e01      	subs	r6, #1
   d98fa:	e7f3      	b.n	d98e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d98fc:	0fc0      	lsrs	r0, r0, #31
   d98fe:	e7f6      	b.n	d98ee <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d9900:	eba4 0409 	sub.w	r4, r4, r9
}
   d9904:	4802      	ldr	r0, [pc, #8]	; (d9910 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d9906:	10a4      	asrs	r4, r4, #2
   d9908:	4360      	muls	r0, r4
   d990a:	b003      	add	sp, #12
   d990c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9910:	cccccccd 	.word	0xcccccccd

000d9914 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d9914:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d9916:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d9918:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d991a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d991c:	b30b      	cbz	r3, d9962 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d991e:	b301      	cbz	r1, d9962 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d9920:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d9922:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d9926:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d9928:	a903      	add	r1, sp, #12
   d992a:	a801      	add	r0, sp, #4
   d992c:	f7ff ff36 	bl	d979c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9930:	4601      	mov	r1, r0
   d9932:	b1b0      	cbz	r0, d9962 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9934:	f10d 030b 	add.w	r3, sp, #11
   d9938:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d993a:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d993e:	4620      	mov	r0, r4
   d9940:	f7ff ffaa 	bl	d9898 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d9944:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d9948:	b15b      	cbz	r3, d9962 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d994a:	6824      	ldr	r4, [r4, #0]
   d994c:	2314      	movs	r3, #20
   d994e:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d9952:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d9956:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d995a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d995c:	bfa8      	it	ge
   d995e:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d9960:	e7e2      	b.n	d9928 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d9962:	4630      	mov	r0, r6
   d9964:	b004      	add	sp, #16
   d9966:	bd70      	pop	{r4, r5, r6, pc}

000d9968 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d9968:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d996a:	4c0a      	ldr	r4, [pc, #40]	; (d9994 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d996c:	7823      	ldrb	r3, [r4, #0]
   d996e:	f3bf 8f5b 	dmb	ish
   d9972:	07db      	lsls	r3, r3, #31
   d9974:	d40b      	bmi.n	d998e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d9976:	4620      	mov	r0, r4
   d9978:	f7fa fb9e 	bl	d40b8 <__cxa_guard_acquire>
   d997c:	b138      	cbz	r0, d998e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d997e:	4620      	mov	r0, r4
   d9980:	f7fa fb9f 	bl	d40c2 <__cxa_guard_release>
   d9984:	4a04      	ldr	r2, [pc, #16]	; (d9998 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d9986:	4905      	ldr	r1, [pc, #20]	; (d999c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d9988:	4805      	ldr	r0, [pc, #20]	; (d99a0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d998a:	f002 f8c7 	bl	dbb1c <__aeabi_atexit>
}
   d998e:	4804      	ldr	r0, [pc, #16]	; (d99a0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d9990:	bd10      	pop	{r4, pc}
   d9992:	bf00      	nop
   d9994:	2003e5d4 	.word	0x2003e5d4
   d9998:	2003e300 	.word	0x2003e300
   d999c:	000d9799 	.word	0x000d9799
   d99a0:	2003e284 	.word	0x2003e284

000d99a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d99a4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d99a6:	4c0a      	ldr	r4, [pc, #40]	; (d99d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d99a8:	7823      	ldrb	r3, [r4, #0]
   d99aa:	f3bf 8f5b 	dmb	ish
   d99ae:	07db      	lsls	r3, r3, #31
   d99b0:	d40b      	bmi.n	d99ca <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d99b2:	4620      	mov	r0, r4
   d99b4:	f7fa fb80 	bl	d40b8 <__cxa_guard_acquire>
   d99b8:	b138      	cbz	r0, d99ca <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d99ba:	4620      	mov	r0, r4
   d99bc:	f7fa fb81 	bl	d40c2 <__cxa_guard_release>
   d99c0:	4a04      	ldr	r2, [pc, #16]	; (d99d4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d99c2:	4905      	ldr	r1, [pc, #20]	; (d99d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d99c4:	4805      	ldr	r0, [pc, #20]	; (d99dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d99c6:	f002 f8a9 	bl	dbb1c <__aeabi_atexit>
    return &factory;
}
   d99ca:	4804      	ldr	r0, [pc, #16]	; (d99dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d99cc:	bd10      	pop	{r4, pc}
   d99ce:	bf00      	nop
   d99d0:	2003e5d8 	.word	0x2003e5d8
   d99d4:	2003e300 	.word	0x2003e300
   d99d8:	000d9797 	.word	0x000d9797
   d99dc:	2003e288 	.word	0x2003e288

000d99e0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d99e0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d99e2:	2500      	movs	r5, #0
   d99e4:	4604      	mov	r4, r0
   d99e6:	e9c0 5500 	strd	r5, r5, [r0]
   d99ea:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d99ee:	6085      	str	r5, [r0, #8]
   d99f0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d99f2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d99f6:	f7fe fa13 	bl	d7e20 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d99fa:	f7ff ffb5 	bl	d9968 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d99fe:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9a00:	f7ff ffd0 	bl	d99a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d9a04:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9a06:	6220      	str	r0, [r4, #32]
}
   d9a08:	4620      	mov	r0, r4
   d9a0a:	bd38      	pop	{r3, r4, r5, pc}

000d9a0c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d9a0c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d9a0e:	4c0b      	ldr	r4, [pc, #44]	; (d9a3c <_ZN5spark10LogManager8instanceEv+0x30>)
   d9a10:	7823      	ldrb	r3, [r4, #0]
   d9a12:	f3bf 8f5b 	dmb	ish
   d9a16:	07db      	lsls	r3, r3, #31
   d9a18:	d40e      	bmi.n	d9a38 <_ZN5spark10LogManager8instanceEv+0x2c>
   d9a1a:	4620      	mov	r0, r4
   d9a1c:	f7fa fb4c 	bl	d40b8 <__cxa_guard_acquire>
   d9a20:	b150      	cbz	r0, d9a38 <_ZN5spark10LogManager8instanceEv+0x2c>
   d9a22:	4807      	ldr	r0, [pc, #28]	; (d9a40 <_ZN5spark10LogManager8instanceEv+0x34>)
   d9a24:	f7ff ffdc 	bl	d99e0 <_ZN5spark10LogManagerC1Ev>
   d9a28:	4620      	mov	r0, r4
   d9a2a:	f7fa fb4a 	bl	d40c2 <__cxa_guard_release>
   d9a2e:	4a05      	ldr	r2, [pc, #20]	; (d9a44 <_ZN5spark10LogManager8instanceEv+0x38>)
   d9a30:	4905      	ldr	r1, [pc, #20]	; (d9a48 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d9a32:	4803      	ldr	r0, [pc, #12]	; (d9a40 <_ZN5spark10LogManager8instanceEv+0x34>)
   d9a34:	f002 f872 	bl	dbb1c <__aeabi_atexit>
    return &mgr;
}
   d9a38:	4801      	ldr	r0, [pc, #4]	; (d9a40 <_ZN5spark10LogManager8instanceEv+0x34>)
   d9a3a:	bd10      	pop	{r4, pc}
   d9a3c:	2003e5d0 	.word	0x2003e5d0
   d9a40:	2003e5e0 	.word	0x2003e5e0
   d9a44:	2003e300 	.word	0x2003e300
   d9a48:	000d9ea1 	.word	0x000d9ea1

000d9a4c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d9a4c:	4a02      	ldr	r2, [pc, #8]	; (d9a58 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d9a4e:	4903      	ldr	r1, [pc, #12]	; (d9a5c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d9a50:	4803      	ldr	r0, [pc, #12]	; (d9a60 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d9a52:	2300      	movs	r3, #0
   d9a54:	f7fe bbf4 	b.w	d8240 <log_set_callbacks>
   d9a58:	000d9d7d 	.word	0x000d9d7d
   d9a5c:	000d9d09 	.word	0x000d9d09
   d9a60:	000d9c89 	.word	0x000d9c89

000d9a64 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d9a64:	2300      	movs	r3, #0
   d9a66:	461a      	mov	r2, r3
   d9a68:	4619      	mov	r1, r3
   d9a6a:	4618      	mov	r0, r3
   d9a6c:	f7fe bbe8 	b.w	d8240 <log_set_callbacks>

000d9a70 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d9a72:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9a74:	f851 3b04 	ldr.w	r3, [r1], #4
   d9a78:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9a7a:	4604      	mov	r4, r0
   d9a7c:	a801      	add	r0, sp, #4
   d9a7e:	f7fe fdda 	bl	d8636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d9a82:	466a      	mov	r2, sp
   d9a84:	4629      	mov	r1, r5
   d9a86:	4620      	mov	r0, r4
   d9a88:	f7ff fd15 	bl	d94b6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9a8c:	a801      	add	r0, sp, #4
   d9a8e:	f7fe fdd9 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9a92:	4620      	mov	r0, r4
   d9a94:	b003      	add	sp, #12
   d9a96:	bd30      	pop	{r4, r5, pc}

000d9a98 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d9a9a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9a9c:	f851 3b04 	ldr.w	r3, [r1], #4
   d9aa0:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9aa2:	4604      	mov	r4, r0
   d9aa4:	a801      	add	r0, sp, #4
   d9aa6:	f7fe fdc6 	bl	d8636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d9aaa:	466a      	mov	r2, sp
   d9aac:	4629      	mov	r1, r5
   d9aae:	4620      	mov	r0, r4
   d9ab0:	f7ff fd7c 	bl	d95ac <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9ab4:	a801      	add	r0, sp, #4
   d9ab6:	f7fe fdc5 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9aba:	4620      	mov	r0, r4
   d9abc:	b003      	add	sp, #12
   d9abe:	bd30      	pop	{r4, r5, pc}

000d9ac0 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d9ac2:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9ac4:	f851 3b04 	ldr.w	r3, [r1], #4
   d9ac8:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d9aca:	4604      	mov	r4, r0
   d9acc:	a801      	add	r0, sp, #4
   d9ace:	f7fe fdb2 	bl	d8636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d9ad2:	466a      	mov	r2, sp
   d9ad4:	4629      	mov	r1, r5
   d9ad6:	4620      	mov	r0, r4
   d9ad8:	f7ff fd44 	bl	d9564 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d9adc:	a801      	add	r0, sp, #4
   d9ade:	f7fe fdb1 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9ae2:	4620      	mov	r0, r4
   d9ae4:	b003      	add	sp, #12
   d9ae6:	bd30      	pop	{r4, r5, pc}

000d9ae8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d9ae8:	b570      	push	{r4, r5, r6, lr}
   d9aea:	b08a      	sub	sp, #40	; 0x28
   d9aec:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d9aee:	4601      	mov	r1, r0
   d9af0:	a804      	add	r0, sp, #16
   d9af2:	f7ff ffd1 	bl	d9a98 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d9af6:	4e14      	ldr	r6, [pc, #80]	; (d9b48 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d9af8:	a804      	add	r0, sp, #16
   d9afa:	f7ff fd6f 	bl	d95dc <_ZN5spark18JSONObjectIterator4nextEv>
   d9afe:	b1e8      	cbz	r0, d9b3c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d9b00:	a904      	add	r1, sp, #16
   d9b02:	4668      	mov	r0, sp
   d9b04:	f7ff ffdc 	bl	d9ac0 <_ZNK5spark18JSONObjectIterator4nameEv>
   d9b08:	9802      	ldr	r0, [sp, #8]
   d9b0a:	4631      	mov	r1, r6
   d9b0c:	f7ff fe6d 	bl	d97ea <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d9b10:	4604      	mov	r4, r0
   d9b12:	b110      	cbz	r0, d9b1a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d9b14:	1e2c      	subs	r4, r5, #0
   d9b16:	bf18      	it	ne
   d9b18:	2401      	movne	r4, #1
   d9b1a:	a801      	add	r0, sp, #4
   d9b1c:	f7fe fd92 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9b20:	2c00      	cmp	r4, #0
   d9b22:	d0e9      	beq.n	d9af8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d9b24:	a904      	add	r1, sp, #16
   d9b26:	4668      	mov	r0, sp
   d9b28:	f7ff ffa2 	bl	d9a70 <_ZNK5spark18JSONObjectIterator5valueEv>
   d9b2c:	4668      	mov	r0, sp
   d9b2e:	f7ff fcf8 	bl	d9522 <_ZNK5spark9JSONValue5toIntEv>
   d9b32:	6028      	str	r0, [r5, #0]
   d9b34:	a801      	add	r0, sp, #4
   d9b36:	f7fe fd85 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9b3a:	e7dd      	b.n	d9af8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d9b3c:	a805      	add	r0, sp, #20
   d9b3e:	f7fe fd81 	bl	d8644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9b42:	b00a      	add	sp, #40	; 0x28
   d9b44:	bd70      	pop	{r4, r5, r6, pc}
   d9b46:	bf00      	nop
   d9b48:	000dd76e 	.word	0x000dd76e

000d9b4c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9b4e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d9b50:	4620      	mov	r0, r4
   d9b52:	4912      	ldr	r1, [pc, #72]	; (d9b9c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9b54:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d9b56:	f002 ff60 	bl	dca1a <strcmp>
   d9b5a:	b948      	cbnz	r0, d9b70 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d9b5c:	f001 fdbc 	bl	db6d8 <_Z16_fetch_usbserialv>
   d9b60:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d9b64:	f001 fda8 	bl	db6b8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d9b68:	f001 fdb6 	bl	db6d8 <_Z16_fetch_usbserialv>
}
   d9b6c:	b003      	add	sp, #12
   d9b6e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d9b70:	490b      	ldr	r1, [pc, #44]	; (d9ba0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d9b72:	4620      	mov	r0, r4
   d9b74:	f002 ff51 	bl	dca1a <strcmp>
   d9b78:	b970      	cbnz	r0, d9b98 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d9b7a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d9b7e:	a901      	add	r1, sp, #4
   d9b80:	4628      	mov	r0, r5
        int baud = 9600;
   d9b82:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d9b84:	f7ff ffb0 	bl	d9ae8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d9b88:	f001 fd1a 	bl	db5c0 <_Z22__fetch_global_Serial1v>
   d9b8c:	9901      	ldr	r1, [sp, #4]
   d9b8e:	f001 fd11 	bl	db5b4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d9b92:	f001 fd15 	bl	db5c0 <_Z22__fetch_global_Serial1v>
   d9b96:	e7e9      	b.n	d9b6c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d9b98:	2000      	movs	r0, #0
   d9b9a:	e7e7      	b.n	d9b6c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d9b9c:	000dd773 	.word	0x000dd773
   d9ba0:	000dd77a 	.word	0x000dd77a

000d9ba4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9ba4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9ba6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d9baa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9bac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9bae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9bb2:	42ae      	cmp	r6, r5
   d9bb4:	d005      	beq.n	d9bc2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d9bb6:	f105 0008 	add.w	r0, r5, #8
   d9bba:	f7ff fff3 	bl	d9ba4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9bbe:	3514      	adds	r5, #20
   d9bc0:	e7f7      	b.n	d9bb2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d9bc2:	6820      	ldr	r0, [r4, #0]
   d9bc4:	f7fe fca8 	bl	d8518 <free>
}
   d9bc8:	4620      	mov	r0, r4
   d9bca:	bd70      	pop	{r4, r5, r6, pc}

000d9bcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9bcc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d9bce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d9bd2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d9bd4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d9bd8:	42ae      	cmp	r6, r5
   d9bda:	d004      	beq.n	d9be6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d9bdc:	4628      	mov	r0, r5
   d9bde:	f000 fff9 	bl	dabd4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d9be2:	3510      	adds	r5, #16
   d9be4:	e7f8      	b.n	d9bd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d9be6:	6820      	ldr	r0, [r4, #0]
   d9be8:	f7fe fc96 	bl	d8518 <free>
}
   d9bec:	4620      	mov	r0, r4
   d9bee:	bd70      	pop	{r4, r5, r6, pc}

000d9bf0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d9bf0:	b510      	push	{r4, lr}
   d9bf2:	4604      	mov	r4, r0
   d9bf4:	300c      	adds	r0, #12
   d9bf6:	f7ff ffd5 	bl	d9ba4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9bfa:	4620      	mov	r0, r4
   d9bfc:	f7ff ffe6 	bl	d9bcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9c00:	4620      	mov	r0, r4
   d9c02:	bd10      	pop	{r4, pc}

000d9c04 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d9c04:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d9c06:	4b04      	ldr	r3, [pc, #16]	; (d9c18 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d9c08:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d9c0a:	f840 3b04 	str.w	r3, [r0], #4
   d9c0e:	f7ff ffef 	bl	d9bf0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d9c12:	4620      	mov	r0, r4
   d9c14:	bd10      	pop	{r4, pc}
   d9c16:	bf00      	nop
   d9c18:	000dd1f4 	.word	0x000dd1f4

000d9c1c <_ZN5spark16StreamLogHandlerD0Ev>:
   d9c1c:	b510      	push	{r4, lr}
   d9c1e:	4604      	mov	r4, r0
   d9c20:	f7ff fff0 	bl	d9c04 <_ZN5spark16StreamLogHandlerD1Ev>
   d9c24:	4620      	mov	r0, r4
   d9c26:	2124      	movs	r1, #36	; 0x24
   d9c28:	f001 ff7d 	bl	dbb26 <_ZdlPvj>
   d9c2c:	4620      	mov	r0, r4
   d9c2e:	bd10      	pop	{r4, pc}

000d9c30 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d9c30:	b510      	push	{r4, lr}
   d9c32:	4b03      	ldr	r3, [pc, #12]	; (d9c40 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d9c34:	6003      	str	r3, [r0, #0]
   d9c36:	4604      	mov	r4, r0
   d9c38:	f7ff ffe4 	bl	d9c04 <_ZN5spark16StreamLogHandlerD1Ev>
   d9c3c:	4620      	mov	r0, r4
   d9c3e:	bd10      	pop	{r4, pc}
   d9c40:	000dd810 	.word	0x000dd810

000d9c44 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d9c44:	b510      	push	{r4, lr}
   d9c46:	4604      	mov	r4, r0
   d9c48:	f7ff fff2 	bl	d9c30 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d9c4c:	4620      	mov	r0, r4
   d9c4e:	2124      	movs	r1, #36	; 0x24
   d9c50:	f001 ff69 	bl	dbb26 <_ZdlPvj>
   d9c54:	4620      	mov	r0, r4
   d9c56:	bd10      	pop	{r4, pc}

000d9c58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d9c58:	2200      	movs	r2, #0
   d9c5a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d9c5e:	b510      	push	{r4, lr}
        capacity_(0) {
   d9c60:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9c62:	680c      	ldr	r4, [r1, #0]
   d9c64:	6004      	str	r4, [r0, #0]
   d9c66:	684c      	ldr	r4, [r1, #4]
   d9c68:	6044      	str	r4, [r0, #4]
   d9c6a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c6c:	600a      	str	r2, [r1, #0]
   d9c6e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9c70:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c72:	608a      	str	r2, [r1, #8]
}
   d9c74:	bd10      	pop	{r4, pc}

000d9c76 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d9c76:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d9c78:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d9c7a:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d9c7c:	6818      	ldr	r0, [r3, #0]
   d9c7e:	f7fe f8e7 	bl	d7e50 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d9c82:	4620      	mov	r0, r4
   d9c84:	bd10      	pop	{r4, pc}
	...

000d9c88 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9c8c:	b087      	sub	sp, #28
   d9c8e:	4680      	mov	r8, r0
   d9c90:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d9c92:	4b1c      	ldr	r3, [pc, #112]	; (d9d04 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d9c94:	685b      	ldr	r3, [r3, #4]
   d9c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9c9a:	4689      	mov	r9, r1
   d9c9c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9c9e:	b96b      	cbnz	r3, d9cbc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d9ca0:	f7ff feb4 	bl	d9a0c <_ZN5spark10LogManager8instanceEv>
   d9ca4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9ca6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d9caa:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9cac:	9305      	str	r3, [sp, #20]
   d9cae:	f7fe f8c7 	bl	d7e40 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d9cb2:	7b23      	ldrb	r3, [r4, #12]
   d9cb4:	b12b      	cbz	r3, d9cc2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d9cb6:	a805      	add	r0, sp, #20
   d9cb8:	f7ff ffdd 	bl	d9c76 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9cbc:	b007      	add	sp, #28
   d9cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d9cc2:	2301      	movs	r3, #1
   d9cc4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d9cc6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d9cca:	fa5f f989 	uxtb.w	r9, r9
   d9cce:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9cd2:	45aa      	cmp	sl, r5
   d9cd4:	d012      	beq.n	d9cfc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d9cd6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d9cda:	4631      	mov	r1, r6
   d9cdc:	1d38      	adds	r0, r7, #4
   d9cde:	f7ff fe19 	bl	d9914 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9ce2:	4581      	cmp	r9, r0
   d9ce4:	d3f5      	bcc.n	d9cd2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d9ce6:	683b      	ldr	r3, [r7, #0]
   d9ce8:	9a03      	ldr	r2, [sp, #12]
   d9cea:	9200      	str	r2, [sp, #0]
   d9cec:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d9cf0:	464a      	mov	r2, r9
   d9cf2:	4633      	mov	r3, r6
   d9cf4:	4641      	mov	r1, r8
   d9cf6:	4638      	mov	r0, r7
   d9cf8:	47d8      	blx	fp
   d9cfa:	e7ea      	b.n	d9cd2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d9cfc:	2300      	movs	r3, #0
   d9cfe:	7323      	strb	r3, [r4, #12]
   d9d00:	e7d9      	b.n	d9cb6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d9d02:	bf00      	nop
   d9d04:	e000ed00 	.word	0xe000ed00

000d9d08 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d0c:	469b      	mov	fp, r3
   d9d0e:	4b1a      	ldr	r3, [pc, #104]	; (d9d78 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d9d10:	685b      	ldr	r3, [r3, #4]
   d9d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9d16:	4680      	mov	r8, r0
   d9d18:	4689      	mov	r9, r1
   d9d1a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d9d1c:	b96b      	cbnz	r3, d9d3a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d9d1e:	f7ff fe75 	bl	d9a0c <_ZN5spark10LogManager8instanceEv>
   d9d22:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9d24:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d9d28:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9d2a:	9301      	str	r3, [sp, #4]
   d9d2c:	f7fe f888 	bl	d7e40 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d9d30:	7b23      	ldrb	r3, [r4, #12]
   d9d32:	b12b      	cbz	r3, d9d40 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d9d34:	a801      	add	r0, sp, #4
   d9d36:	f7ff ff9e 	bl	d9c76 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9d3a:	b003      	add	sp, #12
   d9d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d9d40:	2301      	movs	r3, #1
   d9d42:	7323      	strb	r3, [r4, #12]
   d9d44:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d9d48:	b2f6      	uxtb	r6, r6
   d9d4a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9d4e:	4555      	cmp	r5, sl
   d9d50:	d00e      	beq.n	d9d70 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d9d52:	f855 7b04 	ldr.w	r7, [r5], #4
   d9d56:	4659      	mov	r1, fp
   d9d58:	1d38      	adds	r0, r7, #4
   d9d5a:	f7ff fddb 	bl	d9914 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9d5e:	4286      	cmp	r6, r0
   d9d60:	d3f5      	bcc.n	d9d4e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d9d62:	683b      	ldr	r3, [r7, #0]
   d9d64:	464a      	mov	r2, r9
   d9d66:	68db      	ldr	r3, [r3, #12]
   d9d68:	4641      	mov	r1, r8
   d9d6a:	4638      	mov	r0, r7
   d9d6c:	4798      	blx	r3
   d9d6e:	e7ee      	b.n	d9d4e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d9d70:	2300      	movs	r3, #0
   d9d72:	7323      	strb	r3, [r4, #12]
   d9d74:	e7de      	b.n	d9d34 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d9d76:	bf00      	nop
   d9d78:	e000ed00 	.word	0xe000ed00

000d9d7c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d9d7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9d80:	4b16      	ldr	r3, [pc, #88]	; (d9ddc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d9d82:	685b      	ldr	r3, [r3, #4]
   d9d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9d88:	4605      	mov	r5, r0
   d9d8a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d9d8c:	bb1b      	cbnz	r3, d9dd6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d9d8e:	f7ff fe3d 	bl	d9a0c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d9d92:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d9d96:	4604      	mov	r4, r0
   d9d98:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9d9a:	9301      	str	r3, [sp, #4]
   d9d9c:	f7fe f850 	bl	d7e40 <os_mutex_recursive_lock>
   d9da0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d9da4:	2446      	movs	r4, #70	; 0x46
   d9da6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9daa:	45b0      	cmp	r8, r6
   d9dac:	d109      	bne.n	d9dc2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d9dae:	a801      	add	r0, sp, #4
   d9db0:	f7ff ff61 	bl	d9c76 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d9db4:	42a5      	cmp	r5, r4
   d9db6:	bfb4      	ite	lt
   d9db8:	2000      	movlt	r0, #0
   d9dba:	2001      	movge	r0, #1
}
   d9dbc:	b002      	add	sp, #8
   d9dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d9dc2:	f856 0b04 	ldr.w	r0, [r6], #4
   d9dc6:	4639      	mov	r1, r7
   d9dc8:	3004      	adds	r0, #4
   d9dca:	f7ff fda3 	bl	d9914 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d9dce:	4284      	cmp	r4, r0
   d9dd0:	bfa8      	it	ge
   d9dd2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d9dd4:	e7e9      	b.n	d9daa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d9dd6:	2000      	movs	r0, #0
   d9dd8:	e7f0      	b.n	d9dbc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9dda:	bf00      	nop
   d9ddc:	e000ed00 	.word	0xe000ed00

000d9de0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9de0:	b570      	push	{r4, r5, r6, lr}
   d9de2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9de4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9de8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9dea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d9dee:	4282      	cmp	r2, r0
   d9df0:	d007      	beq.n	d9e02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d9df2:	4601      	mov	r1, r0
            if (*p == value) {
   d9df4:	681d      	ldr	r5, [r3, #0]
   d9df6:	f851 6b04 	ldr.w	r6, [r1], #4
   d9dfa:	42ae      	cmp	r6, r5
   d9dfc:	d003      	beq.n	d9e06 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d9dfe:	4608      	mov	r0, r1
   d9e00:	e7f5      	b.n	d9dee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d9e02:	2000      	movs	r0, #0
}
   d9e04:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9e06:	1a52      	subs	r2, r2, r1
   d9e08:	f002 fdaa 	bl	dc960 <memmove>
    --size_;
   d9e0c:	6863      	ldr	r3, [r4, #4]
   d9e0e:	3b01      	subs	r3, #1
   d9e10:	6063      	str	r3, [r4, #4]
    return true;
   d9e12:	2001      	movs	r0, #1
   d9e14:	e7f6      	b.n	d9e04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d9e16 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9e16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9e18:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9e1c:	4604      	mov	r4, r0
   d9e1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9e20:	9101      	str	r1, [sp, #4]
   d9e22:	9303      	str	r3, [sp, #12]
   d9e24:	f7fe f80c 	bl	d7e40 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9e28:	a901      	add	r1, sp, #4
   d9e2a:	4620      	mov	r0, r4
   d9e2c:	f7ff ffd8 	bl	d9de0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d9e30:	b118      	cbz	r0, d9e3a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d9e32:	6863      	ldr	r3, [r4, #4]
   d9e34:	b90b      	cbnz	r3, d9e3a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d9e36:	f7ff fe15 	bl	d9a64 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9e3a:	a803      	add	r0, sp, #12
   d9e3c:	f7ff ff1b 	bl	d9c76 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9e40:	b004      	add	sp, #16
   d9e42:	bd10      	pop	{r4, pc}

000d9e44 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d9e44:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d9e46:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d9e4a:	2318      	movs	r3, #24
   d9e4c:	4604      	mov	r4, r0
   d9e4e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9e52:	42ae      	cmp	r6, r5
   d9e54:	d015      	beq.n	d9e82 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9e56:	f105 0110 	add.w	r1, r5, #16
   d9e5a:	4620      	mov	r0, r4
   d9e5c:	f7ff ffc0 	bl	d9de0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9e60:	6863      	ldr	r3, [r4, #4]
   d9e62:	b90b      	cbnz	r3, d9e68 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9e64:	f7ff fdfe 	bl	d9a64 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d9e68:	69e0      	ldr	r0, [r4, #28]
   d9e6a:	6929      	ldr	r1, [r5, #16]
   d9e6c:	6803      	ldr	r3, [r0, #0]
   d9e6e:	68db      	ldr	r3, [r3, #12]
   d9e70:	4798      	blx	r3
        if (h.stream) {
   d9e72:	6969      	ldr	r1, [r5, #20]
   d9e74:	b119      	cbz	r1, d9e7e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d9e76:	6a20      	ldr	r0, [r4, #32]
   d9e78:	6803      	ldr	r3, [r0, #0]
   d9e7a:	68db      	ldr	r3, [r3, #12]
   d9e7c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d9e7e:	3518      	adds	r5, #24
   d9e80:	e7e7      	b.n	d9e52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d9e82:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9e86:	2618      	movs	r6, #24
   d9e88:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9e8c:	42ae      	cmp	r6, r5
   d9e8e:	d004      	beq.n	d9e9a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9e90:	4628      	mov	r0, r5
   d9e92:	f000 fe9f 	bl	dabd4 <_ZN6StringD1Ev>
   d9e96:	3518      	adds	r5, #24
   d9e98:	e7f8      	b.n	d9e8c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d9e9a:	2300      	movs	r3, #0
   d9e9c:	6163      	str	r3, [r4, #20]
}
   d9e9e:	bd70      	pop	{r4, r5, r6, pc}

000d9ea0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9ea0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9ea2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d9ea4:	f7ff fdde 	bl	d9a64 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9ea8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9eac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9eae:	9301      	str	r3, [sp, #4]
   d9eb0:	f7fd ffc6 	bl	d7e40 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d9eb4:	4620      	mov	r0, r4
   d9eb6:	f7ff ffc5 	bl	d9e44 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d9eba:	a801      	add	r0, sp, #4
   d9ebc:	f7ff fedb 	bl	d9c76 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9ec0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9ec2:	b108      	cbz	r0, d9ec8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9ec4:	f7fd ffb4 	bl	d7e30 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9ec8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9ecc:	2618      	movs	r6, #24
   d9ece:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9ed2:	42ae      	cmp	r6, r5
   d9ed4:	d004      	beq.n	d9ee0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d9ed6:	4628      	mov	r0, r5
   d9ed8:	f000 fe7c 	bl	dabd4 <_ZN6StringD1Ev>
   d9edc:	3518      	adds	r5, #24
   d9ede:	e7f8      	b.n	d9ed2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9ee0:	6920      	ldr	r0, [r4, #16]
   d9ee2:	f7fe fb19 	bl	d8518 <free>
   d9ee6:	6820      	ldr	r0, [r4, #0]
   d9ee8:	f7fe fb16 	bl	d8518 <free>
}
   d9eec:	4620      	mov	r0, r4
   d9eee:	b002      	add	sp, #8
   d9ef0:	bd70      	pop	{r4, r5, r6, pc}

000d9ef2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9ef2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9ef6:	4606      	mov	r6, r0
   d9ef8:	460c      	mov	r4, r1
   d9efa:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9efc:	d927      	bls.n	d9f4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9efe:	4290      	cmp	r0, r2
   d9f00:	d226      	bcs.n	d9f50 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9f02:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9f06:	1a6c      	subs	r4, r5, r1
   d9f08:	f1a1 0714 	sub.w	r7, r1, #20
   d9f0c:	4404      	add	r4, r0
        capacity_(0) {
   d9f0e:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d9f10:	42af      	cmp	r7, r5
   d9f12:	d03d      	beq.n	d9f90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d9f14:	b1a4      	cbz	r4, d9f40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9f16:	682b      	ldr	r3, [r5, #0]
   d9f18:	6023      	str	r3, [r4, #0]
   d9f1a:	88ab      	ldrh	r3, [r5, #4]
   d9f1c:	80a3      	strh	r3, [r4, #4]
   d9f1e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d9f22:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d9f24:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9f28:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9f2a:	68ab      	ldr	r3, [r5, #8]
   d9f2c:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9f2e:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f30:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9f32:	68ea      	ldr	r2, [r5, #12]
   d9f34:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9f36:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f38:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9f3a:	692a      	ldr	r2, [r5, #16]
   d9f3c:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9f3e:	612b      	str	r3, [r5, #16]
   d9f40:	f105 0008 	add.w	r0, r5, #8
   d9f44:	f7ff fe2e 	bl	d9ba4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d9f48:	3d14      	subs	r5, #20
   d9f4a:	3c14      	subs	r4, #20
   d9f4c:	e7e0      	b.n	d9f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d9f4e:	d01f      	beq.n	d9f90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d9f50:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d9f52:	42ac      	cmp	r4, r5
   d9f54:	d01c      	beq.n	d9f90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d9f56:	b1a6      	cbz	r6, d9f82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d9f58:	6823      	ldr	r3, [r4, #0]
   d9f5a:	6033      	str	r3, [r6, #0]
   d9f5c:	88a3      	ldrh	r3, [r4, #4]
   d9f5e:	80b3      	strh	r3, [r6, #4]
   d9f60:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d9f64:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d9f66:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d9f6a:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9f6c:	68a3      	ldr	r3, [r4, #8]
   d9f6e:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9f70:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f72:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9f74:	68e2      	ldr	r2, [r4, #12]
   d9f76:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9f78:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9f7a:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9f7c:	6922      	ldr	r2, [r4, #16]
   d9f7e:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9f80:	6123      	str	r3, [r4, #16]
   d9f82:	f104 0008 	add.w	r0, r4, #8
   d9f86:	f7ff fe0d 	bl	d9ba4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d9f8a:	3414      	adds	r4, #20
   d9f8c:	3614      	adds	r6, #20
   d9f8e:	e7e0      	b.n	d9f52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d9f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9f92 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9f94:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d9f98:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9f9a:	4604      	mov	r4, r0
   d9f9c:	460e      	mov	r6, r1
   d9f9e:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9fa0:	db0d      	blt.n	d9fbe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9fa2:	3501      	adds	r5, #1
        if (n > 0) {
   d9fa4:	2d00      	cmp	r5, #0
   d9fa6:	6800      	ldr	r0, [r0, #0]
   d9fa8:	dd04      	ble.n	d9fb4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9faa:	00a9      	lsls	r1, r5, #2
   d9fac:	f7fe fabc 	bl	d8528 <realloc>
            if (!d) {
   d9fb0:	b918      	cbnz	r0, d9fba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d9fb4:	f7fe fab0 	bl	d8518 <free>
        T* d = nullptr;
   d9fb8:	2000      	movs	r0, #0
        data_ = d;
   d9fba:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9fbc:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9fbe:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9fc0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9fc2:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d9fc6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9fc8:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9fcc:	1d08      	adds	r0, r1, #4
   d9fce:	f002 fcc7 	bl	dc960 <memmove>
    new(p) T(std::move(value));
   d9fd2:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9fd6:	6863      	ldr	r3, [r4, #4]
   d9fd8:	3301      	adds	r3, #1
   d9fda:	6063      	str	r3, [r4, #4]
    return true;
   d9fdc:	2001      	movs	r0, #1
   d9fde:	e7e8      	b.n	d9fb2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d9fe0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9fe2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9fe6:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9fe8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9fea:	9301      	str	r3, [sp, #4]
   d9fec:	460d      	mov	r5, r1
   d9fee:	f7fd ff27 	bl	d7e40 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9ff2:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9ff6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9ffa:	4283      	cmp	r3, r0
   d9ffc:	461a      	mov	r2, r3
   d9ffe:	d00b      	beq.n	da018 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   da000:	6812      	ldr	r2, [r2, #0]
   da002:	42aa      	cmp	r2, r5
   da004:	f103 0304 	add.w	r3, r3, #4
   da008:	d1f7      	bne.n	d9ffa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   da00a:	a801      	add	r0, sp, #4
   da00c:	f7ff fe33 	bl	d9c76 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   da010:	2500      	movs	r5, #0
}
   da012:	4628      	mov	r0, r5
   da014:	b003      	add	sp, #12
   da016:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   da018:	462a      	mov	r2, r5
   da01a:	4620      	mov	r0, r4
   da01c:	f7ff ffb9 	bl	d9f92 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   da020:	4605      	mov	r5, r0
   da022:	2800      	cmp	r0, #0
   da024:	d0f1      	beq.n	da00a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   da026:	6863      	ldr	r3, [r4, #4]
   da028:	2b01      	cmp	r3, #1
   da02a:	d101      	bne.n	da030 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   da02c:	f7ff fd0e 	bl	d9a4c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   da030:	a801      	add	r0, sp, #4
   da032:	f7ff fe20 	bl	d9c76 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   da036:	e7ec      	b.n	da012 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000da038 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   da038:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da03c:	4604      	mov	r4, r0
   da03e:	460d      	mov	r5, r1
   da040:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da042:	d914      	bls.n	da06e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   da044:	4290      	cmp	r0, r2
   da046:	d213      	bcs.n	da070 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   da048:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   da04c:	1a75      	subs	r5, r6, r1
   da04e:	f1a1 0710 	sub.w	r7, r1, #16
   da052:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   da054:	42b7      	cmp	r7, r6
   da056:	d018      	beq.n	da08a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   da058:	b11c      	cbz	r4, da062 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   da05a:	4631      	mov	r1, r6
   da05c:	4620      	mov	r0, r4
   da05e:	f000 fe35 	bl	daccc <_ZN6StringC1EOS_>
                end->~T();
   da062:	4630      	mov	r0, r6
   da064:	f000 fdb6 	bl	dabd4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   da068:	3e10      	subs	r6, #16
   da06a:	3c10      	subs	r4, #16
   da06c:	e7f2      	b.n	da054 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   da06e:	d00c      	beq.n	da08a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   da070:	42b5      	cmp	r5, r6
   da072:	d00a      	beq.n	da08a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   da074:	b11c      	cbz	r4, da07e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   da076:	4629      	mov	r1, r5
   da078:	4620      	mov	r0, r4
   da07a:	f000 fe27 	bl	daccc <_ZN6StringC1EOS_>
                p->~T();
   da07e:	4628      	mov	r0, r5
   da080:	f000 fda8 	bl	dabd4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   da084:	3510      	adds	r5, #16
   da086:	3410      	adds	r4, #16
   da088:	e7f2      	b.n	da070 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   da08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da08c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   da08c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   da08e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   da090:	4605      	mov	r5, r0
        if (n > 0) {
   da092:	dd11      	ble.n	da0b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   da094:	0130      	lsls	r0, r6, #4
   da096:	f7fe fa37 	bl	d8508 <malloc>
            if (!d) {
   da09a:	4604      	mov	r4, r0
   da09c:	b158      	cbz	r0, da0b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   da09e:	e9d5 1200 	ldrd	r1, r2, [r5]
   da0a2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   da0a6:	f7ff ffc7 	bl	da038 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   da0aa:	6828      	ldr	r0, [r5, #0]
   da0ac:	f7fe fa34 	bl	d8518 <free>
        data_ = d;
   da0b0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   da0b2:	60ae      	str	r6, [r5, #8]
        return true;
   da0b4:	2001      	movs	r0, #1
    }
   da0b6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   da0b8:	2400      	movs	r4, #0
   da0ba:	e7f6      	b.n	da0aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000da0bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da0c0:	4691      	mov	r9, r2
   da0c2:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   da0c4:	2300      	movs	r3, #0
   da0c6:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   da0c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   da0cc:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   da0ce:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   da0d0:	4299      	cmp	r1, r3
        capacity_(0) {
   da0d2:	e9c0 3300 	strd	r3, r3, [r0]
   da0d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   da0da:	e9c0 3304 	strd	r3, r3, [r0, #16]
   da0de:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da0e2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   da0e4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   da0e6:	dc23      	bgt.n	da130 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   da0e8:	e9d9 5700 	ldrd	r5, r7, [r9]
   da0ec:	2314      	movs	r3, #20
   da0ee:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   da0f2:	42af      	cmp	r7, r5
   da0f4:	d03b      	beq.n	da16e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   da0f6:	4629      	mov	r1, r5
   da0f8:	a80d      	add	r0, sp, #52	; 0x34
   da0fa:	f000 fde7 	bl	daccc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   da0fe:	a90d      	add	r1, sp, #52	; 0x34
   da100:	a811      	add	r0, sp, #68	; 0x44
   da102:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   da104:	f000 fde2 	bl	daccc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da108:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   da10c:	4299      	cmp	r1, r3
   da10e:	da1b      	bge.n	da148 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   da110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   da112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   da114:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   da118:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   da11c:	4631      	mov	r1, r6
   da11e:	f106 0010 	add.w	r0, r6, #16
   da122:	f7ff ff89 	bl	da038 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   da126:	b9ee      	cbnz	r6, da164 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   da128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da12a:	3301      	adds	r3, #1
   da12c:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   da12e:	e011      	b.n	da154 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   da130:	a80a      	add	r0, sp, #40	; 0x28
   da132:	f7ff ffab 	bl	da08c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   da136:	2800      	cmp	r0, #0
   da138:	d1d6      	bne.n	da0e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   da13a:	a80a      	add	r0, sp, #40	; 0x28
   da13c:	f7ff fd46 	bl	d9bcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   da140:	4620      	mov	r0, r4
   da142:	b017      	add	sp, #92	; 0x5c
   da144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da148:	3101      	adds	r1, #1
   da14a:	a80a      	add	r0, sp, #40	; 0x28
   da14c:	f7ff ff9e 	bl	da08c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   da150:	2800      	cmp	r0, #0
   da152:	d1dd      	bne.n	da110 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   da154:	a811      	add	r0, sp, #68	; 0x44
   da156:	f000 fd3d 	bl	dabd4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   da15a:	a80d      	add	r0, sp, #52	; 0x34
   da15c:	f000 fd3a 	bl	dabd4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   da160:	3514      	adds	r5, #20
   da162:	e7c6      	b.n	da0f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   da164:	a911      	add	r1, sp, #68	; 0x44
   da166:	4630      	mov	r0, r6
   da168:	f000 fdb0 	bl	daccc <_ZN6StringC1EOS_>
   da16c:	e7dc      	b.n	da128 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   da16e:	2600      	movs	r6, #0
   da170:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   da174:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   da176:	4637      	mov	r7, r6
   da178:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   da17c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da180:	429e      	cmp	r6, r3
   da182:	f280 8097 	bge.w	da2b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   da186:	0133      	lsls	r3, r6, #4
   da188:	58d3      	ldr	r3, [r2, r3]
   da18a:	9308      	str	r3, [sp, #32]
        if (!category) {
   da18c:	b90b      	cbnz	r3, da192 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   da18e:	3601      	adds	r6, #1
   da190:	e7f4      	b.n	da17c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   da192:	fb0a f306 	mul.w	r3, sl, r6
   da196:	9709      	str	r7, [sp, #36]	; 0x24
   da198:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   da19a:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   da19c:	a909      	add	r1, sp, #36	; 0x24
   da19e:	a808      	add	r0, sp, #32
   da1a0:	f7ff fafc 	bl	d979c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   da1a4:	4683      	mov	fp, r0
   da1a6:	2800      	cmp	r0, #0
   da1a8:	d0f1      	beq.n	da18e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   da1aa:	4601      	mov	r1, r0
   da1ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   da1ae:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   da1b2:	f10d 031f 	add.w	r3, sp, #31
   da1b6:	4628      	mov	r0, r5
   da1b8:	f7ff fb6e 	bl	d9898 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da1bc:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   da1c0:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da1c2:	f1b8 0f00 	cmp.w	r8, #0
   da1c6:	d166      	bne.n	da296 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   da1c8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   da1cc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   da1d0:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   da1d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da1d8:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   da1dc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   da1e0:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da1e4:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   da1e8:	4293      	cmp	r3, r2
   da1ea:	db1a      	blt.n	da222 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   da1ec:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   da1f0:	f1bb 0f00 	cmp.w	fp, #0
   da1f4:	dd4a      	ble.n	da28c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   da1f6:	fb0a f00b 	mul.w	r0, sl, fp
   da1fa:	f7fe f985 	bl	d8508 <malloc>
            if (!d) {
   da1fe:	9004      	str	r0, [sp, #16]
   da200:	2800      	cmp	r0, #0
   da202:	d045      	beq.n	da290 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   da204:	e9d5 1200 	ldrd	r1, r2, [r5]
   da208:	fb0a 1202 	mla	r2, sl, r2, r1
   da20c:	f7ff fe71 	bl	d9ef2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   da210:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   da212:	6828      	ldr	r0, [r5, #0]
   da214:	9304      	str	r3, [sp, #16]
   da216:	f7fe f97f 	bl	d8518 <free>
        data_ = d;
   da21a:	9b04      	ldr	r3, [sp, #16]
   da21c:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   da21e:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   da222:	9b01      	ldr	r3, [sp, #4]
   da224:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   da228:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   da22a:	fb0a f303 	mul.w	r3, sl, r3
   da22e:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   da232:	f101 0014 	add.w	r0, r1, #20
   da236:	fb0a b202 	mla	r2, sl, r2, fp
   da23a:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   da23c:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   da23e:	f7ff fe58 	bl	d9ef2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   da242:	9904      	ldr	r1, [sp, #16]
   da244:	b1a9      	cbz	r1, da272 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   da246:	9b05      	ldr	r3, [sp, #20]
   da248:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da24a:	f84b 2003 	str.w	r2, [fp, r3]
   da24e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   da252:	808b      	strh	r3, [r1, #4]
   da254:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   da258:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   da25a:	e9c1 7702 	strd	r7, r7, [r1, #8]
   da25e:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   da260:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da262:	608b      	str	r3, [r1, #8]
   da264:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   da266:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   da268:	60cb      	str	r3, [r1, #12]
   da26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   da26c:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   da26e:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   da270:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   da272:	686b      	ldr	r3, [r5, #4]
   da274:	3301      	adds	r3, #1
   da276:	606b      	str	r3, [r5, #4]
   da278:	a813      	add	r0, sp, #76	; 0x4c
   da27a:	f7ff fc93 	bl	d9ba4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da27e:	f1b8 0f00 	cmp.w	r8, #0
   da282:	d008      	beq.n	da296 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   da284:	a80d      	add	r0, sp, #52	; 0x34
   da286:	f7ff fc8d 	bl	d9ba4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da28a:	e756      	b.n	da13a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   da28c:	4643      	mov	r3, r8
   da28e:	e7c0      	b.n	da212 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da290:	f04f 0801 	mov.w	r8, #1
   da294:	e7f0      	b.n	da278 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   da296:	9b01      	ldr	r3, [sp, #4]
   da298:	682d      	ldr	r5, [r5, #0]
   da29a:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   da29e:	9b08      	ldr	r3, [sp, #32]
   da2a0:	781b      	ldrb	r3, [r3, #0]
   da2a2:	b92b      	cbnz	r3, da2b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   da2a4:	f8d9 3000 	ldr.w	r3, [r9]
   da2a8:	9a02      	ldr	r2, [sp, #8]
   da2aa:	4413      	add	r3, r2
   da2ac:	7c1b      	ldrb	r3, [r3, #16]
   da2ae:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   da2b0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   da2b2:	e773      	b.n	da19c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da2b4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da2b6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da2b8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   da2ba:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da2bc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da2be:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   da2c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   da2c2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da2c4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da2c6:	60a2      	str	r2, [r4, #8]
   da2c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   da2ca:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da2cc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   da2ce:	60e2      	str	r2, [r4, #12]
   da2d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   da2d2:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da2d4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   da2d6:	6122      	str	r2, [r4, #16]
   da2d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   da2da:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   da2dc:	9b03      	ldr	r3, [sp, #12]
   da2de:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   da2e0:	6162      	str	r2, [r4, #20]
   da2e2:	7623      	strb	r3, [r4, #24]
   da2e4:	e7ce      	b.n	da284 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000da2e8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da2e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   da2ea:	4605      	mov	r5, r0
   da2ec:	4b09      	ldr	r3, [pc, #36]	; (da314 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   da2ee:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   da2f2:	4604      	mov	r4, r0
   da2f4:	460e      	mov	r6, r1
        filter_(level, filters) {
   da2f6:	a801      	add	r0, sp, #4
   da2f8:	4611      	mov	r1, r2
   da2fa:	f7fb fc15 	bl	d5b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da2fe:	aa01      	add	r2, sp, #4
   da300:	4631      	mov	r1, r6
   da302:	4628      	mov	r0, r5
   da304:	f7ff feda 	bl	da0bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da308:	a801      	add	r0, sp, #4
   da30a:	f7fb f955 	bl	d55b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   da30e:	4620      	mov	r0, r4
   da310:	b004      	add	sp, #16
   da312:	bd70      	pop	{r4, r5, r6, pc}
   da314:	000dd1f4 	.word	0x000dd1f4

000da318 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   da318:	b5f0      	push	{r4, r5, r6, r7, lr}
   da31a:	460f      	mov	r7, r1
   da31c:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da31e:	4926      	ldr	r1, [pc, #152]	; (da3b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   da320:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da322:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   da324:	4616      	mov	r6, r2
   da326:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da328:	f002 fb77 	bl	dca1a <strcmp>
   da32c:	bb00      	cbnz	r0, da370 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   da32e:	b1e4      	cbz	r4, da36a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   da330:	4629      	mov	r1, r5
   da332:	4668      	mov	r0, sp
   da334:	f7ff fc90 	bl	d9c58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da338:	4920      	ldr	r1, [pc, #128]	; (da3bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da33a:	2024      	movs	r0, #36	; 0x24
   da33c:	f001 fbf5 	bl	dbb2a <_ZnwjRKSt9nothrow_t>
   da340:	4605      	mov	r5, r0
   da342:	b170      	cbz	r0, da362 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da344:	4669      	mov	r1, sp
   da346:	a803      	add	r0, sp, #12
   da348:	f7fb fbee 	bl	d5b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da34c:	aa03      	add	r2, sp, #12
   da34e:	4631      	mov	r1, r6
   da350:	4628      	mov	r0, r5
   da352:	f7ff ffc9 	bl	da2e8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da356:	a803      	add	r0, sp, #12
   da358:	f7fb f92e 	bl	d55b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   da35c:	4b18      	ldr	r3, [pc, #96]	; (da3c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   da35e:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   da360:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da362:	4668      	mov	r0, sp
   da364:	f7fb f928 	bl	d55b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da368:	462c      	mov	r4, r5
}
   da36a:	4620      	mov	r0, r4
   da36c:	b007      	add	sp, #28
   da36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   da370:	4914      	ldr	r1, [pc, #80]	; (da3c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   da372:	4638      	mov	r0, r7
   da374:	f002 fb51 	bl	dca1a <strcmp>
   da378:	b9e0      	cbnz	r0, da3b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   da37a:	2c00      	cmp	r4, #0
   da37c:	d0f5      	beq.n	da36a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da37e:	4629      	mov	r1, r5
   da380:	4668      	mov	r0, sp
   da382:	f7ff fc69 	bl	d9c58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da386:	490d      	ldr	r1, [pc, #52]	; (da3bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da388:	2024      	movs	r0, #36	; 0x24
   da38a:	f001 fbce 	bl	dbb2a <_ZnwjRKSt9nothrow_t>
   da38e:	4605      	mov	r5, r0
   da390:	2800      	cmp	r0, #0
   da392:	d0e6      	beq.n	da362 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da394:	4669      	mov	r1, sp
   da396:	a803      	add	r0, sp, #12
   da398:	f7fb fbc6 	bl	d5b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da39c:	aa03      	add	r2, sp, #12
   da39e:	4631      	mov	r1, r6
   da3a0:	4628      	mov	r0, r5
   da3a2:	f7ff ffa1 	bl	da2e8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da3a6:	a803      	add	r0, sp, #12
   da3a8:	f7fb f906 	bl	d55b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da3ac:	4b06      	ldr	r3, [pc, #24]	; (da3c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   da3ae:	602b      	str	r3, [r5, #0]
   da3b0:	622c      	str	r4, [r5, #32]
}
   da3b2:	e7d6      	b.n	da362 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   da3b4:	2400      	movs	r4, #0
   da3b6:	e7d8      	b.n	da36a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   da3b8:	000dd782 	.word	0x000dd782
   da3bc:	000dd944 	.word	0x000dd944
   da3c0:	000dd810 	.word	0x000dd810
   da3c4:	000dd786 	.word	0x000dd786
   da3c8:	000dd7f8 	.word	0x000dd7f8

000da3cc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   da3cc:	4b01      	ldr	r3, [pc, #4]	; (da3d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da3ce:	4a02      	ldr	r2, [pc, #8]	; (da3d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da3d0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   da3d2:	4770      	bx	lr
   da3d4:	2003e5dc 	.word	0x2003e5dc
   da3d8:	000dd797 	.word	0x000dd797

000da3dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da3e0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   da3e2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da3e6:	4604      	mov	r4, r0
   da3e8:	460e      	mov	r6, r1
   da3ea:	4617      	mov	r7, r2
   da3ec:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   da3ee:	f001 f973 	bl	db6d8 <_Z16_fetch_usbserialv>
   da3f2:	4581      	cmp	r9, r0
   da3f4:	d04c      	beq.n	da490 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   da3f6:	792b      	ldrb	r3, [r5, #4]
   da3f8:	0719      	lsls	r1, r3, #28
   da3fa:	d504      	bpl.n	da406 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   da3fc:	696a      	ldr	r2, [r5, #20]
   da3fe:	4954      	ldr	r1, [pc, #336]	; (da550 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   da400:	4620      	mov	r0, r4
   da402:	f7ff fa3a 	bl	d987a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   da406:	f1b8 0f00 	cmp.w	r8, #0
   da40a:	d00d      	beq.n	da428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   da40c:	215b      	movs	r1, #91	; 0x5b
   da40e:	4620      	mov	r0, r4
   da410:	f7ff fa27 	bl	d9862 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   da414:	4641      	mov	r1, r8
   da416:	4620      	mov	r0, r4
   da418:	f7ff fa14 	bl	d9844 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   da41c:	6823      	ldr	r3, [r4, #0]
   da41e:	494d      	ldr	r1, [pc, #308]	; (da554 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   da420:	68db      	ldr	r3, [r3, #12]
   da422:	2202      	movs	r2, #2
   da424:	4620      	mov	r0, r4
   da426:	4798      	blx	r3
    if (attr.has_file) {
   da428:	792b      	ldrb	r3, [r5, #4]
   da42a:	07da      	lsls	r2, r3, #31
   da42c:	d523      	bpl.n	da476 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   da42e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   da432:	212f      	movs	r1, #47	; 0x2f
   da434:	4640      	mov	r0, r8
   da436:	f002 fb4d 	bl	dcad4 <strrchr>
    if (s1) {
   da43a:	b108      	cbz	r0, da440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   da43c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   da440:	4641      	mov	r1, r8
   da442:	4620      	mov	r0, r4
   da444:	f7ff f9fe 	bl	d9844 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   da448:	792b      	ldrb	r3, [r5, #4]
   da44a:	079b      	lsls	r3, r3, #30
   da44c:	d508      	bpl.n	da460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   da44e:	213a      	movs	r1, #58	; 0x3a
   da450:	4620      	mov	r0, r4
   da452:	f7ff fa06 	bl	d9862 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   da456:	68ea      	ldr	r2, [r5, #12]
   da458:	493f      	ldr	r1, [pc, #252]	; (da558 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   da45a:	4620      	mov	r0, r4
   da45c:	f7ff fa0d 	bl	d987a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   da460:	792a      	ldrb	r2, [r5, #4]
   da462:	6823      	ldr	r3, [r4, #0]
   da464:	f012 0f04 	tst.w	r2, #4
   da468:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   da46a:	bf14      	ite	ne
   da46c:	493b      	ldrne	r1, [pc, #236]	; (da55c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   da46e:	493c      	ldreq	r1, [pc, #240]	; (da560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   da470:	2202      	movs	r2, #2
            write(": ", 2);
   da472:	4620      	mov	r0, r4
   da474:	4798      	blx	r3
    if (attr.has_function) {
   da476:	792b      	ldrb	r3, [r5, #4]
   da478:	0758      	lsls	r0, r3, #29
   da47a:	d51d      	bpl.n	da4b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da47c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da47e:	460b      	mov	r3, r1
   da480:	461a      	mov	r2, r3
    for (; *s; ++s) {
   da482:	f813 0b01 	ldrb.w	r0, [r3], #1
   da486:	b160      	cbz	r0, da4a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   da488:	2820      	cmp	r0, #32
   da48a:	d108      	bne.n	da49e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   da48c:	4619      	mov	r1, r3
   da48e:	e7f7      	b.n	da480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   da490:	4834      	ldr	r0, [pc, #208]	; (da564 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   da492:	f000 f966 	bl	da762 <_ZN5spark12NetworkClass9listeningEv>
   da496:	2800      	cmp	r0, #0
   da498:	d0ad      	beq.n	da3f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   da49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   da49e:	2828      	cmp	r0, #40	; 0x28
   da4a0:	d1ee      	bne.n	da480 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   da4a2:	6823      	ldr	r3, [r4, #0]
   da4a4:	1a52      	subs	r2, r2, r1
   da4a6:	68db      	ldr	r3, [r3, #12]
   da4a8:	4620      	mov	r0, r4
   da4aa:	4798      	blx	r3
        write("(): ", 4);
   da4ac:	6823      	ldr	r3, [r4, #0]
   da4ae:	492e      	ldr	r1, [pc, #184]	; (da568 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   da4b0:	68db      	ldr	r3, [r3, #12]
   da4b2:	2204      	movs	r2, #4
   da4b4:	4620      	mov	r0, r4
   da4b6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   da4b8:	2100      	movs	r1, #0
   da4ba:	4638      	mov	r0, r7
   da4bc:	f7fd feb8 	bl	d8230 <log_level_name>
   da4c0:	4601      	mov	r1, r0
    write(s);
   da4c2:	4620      	mov	r0, r4
   da4c4:	f7ff f9be 	bl	d9844 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   da4c8:	6823      	ldr	r3, [r4, #0]
   da4ca:	4925      	ldr	r1, [pc, #148]	; (da560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   da4cc:	68db      	ldr	r3, [r3, #12]
   da4ce:	2202      	movs	r2, #2
   da4d0:	4620      	mov	r0, r4
   da4d2:	4798      	blx	r3
    if (msg) {
   da4d4:	b11e      	cbz	r6, da4de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   da4d6:	4631      	mov	r1, r6
   da4d8:	4620      	mov	r0, r4
   da4da:	f7ff f9b3 	bl	d9844 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   da4de:	792b      	ldrb	r3, [r5, #4]
   da4e0:	f013 0f30 	tst.w	r3, #48	; 0x30
   da4e4:	d02c      	beq.n	da540 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   da4e6:	6823      	ldr	r3, [r4, #0]
   da4e8:	4920      	ldr	r1, [pc, #128]	; (da56c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   da4ea:	68db      	ldr	r3, [r3, #12]
   da4ec:	2202      	movs	r2, #2
   da4ee:	4620      	mov	r0, r4
   da4f0:	4798      	blx	r3
        if (attr.has_code) {
   da4f2:	792b      	ldrb	r3, [r5, #4]
   da4f4:	06d9      	lsls	r1, r3, #27
   da4f6:	d50a      	bpl.n	da50e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   da4f8:	6823      	ldr	r3, [r4, #0]
   da4fa:	491d      	ldr	r1, [pc, #116]	; (da570 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da4fc:	68db      	ldr	r3, [r3, #12]
   da4fe:	2207      	movs	r2, #7
   da500:	4620      	mov	r0, r4
   da502:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   da504:	69aa      	ldr	r2, [r5, #24]
   da506:	491b      	ldr	r1, [pc, #108]	; (da574 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   da508:	4620      	mov	r0, r4
   da50a:	f7ff f9b6 	bl	d987a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   da50e:	792b      	ldrb	r3, [r5, #4]
   da510:	069a      	lsls	r2, r3, #26
   da512:	d511      	bpl.n	da538 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   da514:	06db      	lsls	r3, r3, #27
   da516:	d505      	bpl.n	da524 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   da518:	6823      	ldr	r3, [r4, #0]
   da51a:	4910      	ldr	r1, [pc, #64]	; (da55c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   da51c:	68db      	ldr	r3, [r3, #12]
   da51e:	2202      	movs	r2, #2
   da520:	4620      	mov	r0, r4
   da522:	4798      	blx	r3
            write("details = ", 10);
   da524:	6823      	ldr	r3, [r4, #0]
   da526:	4914      	ldr	r1, [pc, #80]	; (da578 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   da528:	68db      	ldr	r3, [r3, #12]
   da52a:	4620      	mov	r0, r4
   da52c:	220a      	movs	r2, #10
   da52e:	4798      	blx	r3
            write(attr.details);
   da530:	69e9      	ldr	r1, [r5, #28]
   da532:	4620      	mov	r0, r4
   da534:	f7ff f986 	bl	d9844 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   da538:	215d      	movs	r1, #93	; 0x5d
   da53a:	4620      	mov	r0, r4
   da53c:	f7ff f991 	bl	d9862 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   da540:	6823      	ldr	r3, [r4, #0]
   da542:	490e      	ldr	r1, [pc, #56]	; (da57c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   da544:	68db      	ldr	r3, [r3, #12]
   da546:	4620      	mov	r0, r4
   da548:	2202      	movs	r2, #2
}
   da54a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   da54e:	4718      	bx	r3
   da550:	000dd79b 	.word	0x000dd79b
   da554:	000dd7a2 	.word	0x000dd7a2
   da558:	000dd348 	.word	0x000dd348
   da55c:	000dd7a5 	.word	0x000dd7a5
   da560:	000dd7aa 	.word	0x000dd7aa
   da564:	2003e608 	.word	0x2003e608
   da568:	000dd7a8 	.word	0x000dd7a8
   da56c:	000dd7ad 	.word	0x000dd7ad
   da570:	000dd7b0 	.word	0x000dd7b0
   da574:	000dcdb2 	.word	0x000dcdb2
   da578:	000dd7b8 	.word	0x000dd7b8
   da57c:	000dcfdb 	.word	0x000dcfdb

000da580 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da584:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   da586:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da58a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   da58c:	4605      	mov	r5, r0
   da58e:	460f      	mov	r7, r1
   da590:	4690      	mov	r8, r2
   da592:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   da594:	f001 f8a0 	bl	db6d8 <_Z16_fetch_usbserialv>
   da598:	4581      	cmp	r9, r0
   da59a:	d105      	bne.n	da5a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   da59c:	4849      	ldr	r0, [pc, #292]	; (da6c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   da59e:	f000 f8e0 	bl	da762 <_ZN5spark12NetworkClass9listeningEv>
   da5a2:	2800      	cmp	r0, #0
   da5a4:	f040 808a 	bne.w	da6bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   da5a8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   da5aa:	4a47      	ldr	r2, [pc, #284]	; (da6c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   da5ac:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   da5ae:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   da5b2:	a801      	add	r0, sp, #4
        strm_(stream) {
   da5b4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   da5b6:	f88d 9008 	strb.w	r9, [sp, #8]
   da5ba:	f7ff f838 	bl	d962e <_ZN5spark10JSONWriter11beginObjectEv>
   da5be:	4649      	mov	r1, r9
   da5c0:	4640      	mov	r0, r8
   da5c2:	f7fd fe35 	bl	d8230 <log_level_name>
    json.name("l", 1).value(s);
   da5c6:	4941      	ldr	r1, [pc, #260]	; (da6cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   da5c8:	4680      	mov	r8, r0
   da5ca:	2201      	movs	r2, #1
   da5cc:	a801      	add	r0, sp, #4
   da5ce:	f7ff f8b7 	bl	d9740 <_ZN5spark10JSONWriter4nameEPKcj>
   da5d2:	4641      	mov	r1, r8
   da5d4:	f7ff f928 	bl	d9828 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   da5d8:	b13f      	cbz	r7, da5ea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   da5da:	493d      	ldr	r1, [pc, #244]	; (da6d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   da5dc:	2201      	movs	r2, #1
   da5de:	a801      	add	r0, sp, #4
   da5e0:	f7ff f8ae 	bl	d9740 <_ZN5spark10JSONWriter4nameEPKcj>
   da5e4:	4639      	mov	r1, r7
   da5e6:	f7ff f91f 	bl	d9828 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   da5ea:	b13e      	cbz	r6, da5fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   da5ec:	4939      	ldr	r1, [pc, #228]	; (da6d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   da5ee:	2201      	movs	r2, #1
   da5f0:	a801      	add	r0, sp, #4
   da5f2:	f7ff f8a5 	bl	d9740 <_ZN5spark10JSONWriter4nameEPKcj>
   da5f6:	4631      	mov	r1, r6
   da5f8:	f7ff f916 	bl	d9828 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   da5fc:	7923      	ldrb	r3, [r4, #4]
   da5fe:	07df      	lsls	r7, r3, #31
   da600:	d50e      	bpl.n	da620 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   da602:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   da604:	212f      	movs	r1, #47	; 0x2f
   da606:	4630      	mov	r0, r6
   da608:	f002 fa64 	bl	dcad4 <strrchr>
    if (s1) {
   da60c:	b100      	cbz	r0, da610 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   da60e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   da610:	4931      	ldr	r1, [pc, #196]	; (da6d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   da612:	2201      	movs	r2, #1
   da614:	a801      	add	r0, sp, #4
   da616:	f7ff f893 	bl	d9740 <_ZN5spark10JSONWriter4nameEPKcj>
   da61a:	4631      	mov	r1, r6
   da61c:	f7ff f904 	bl	d9828 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   da620:	7923      	ldrb	r3, [r4, #4]
   da622:	079e      	lsls	r6, r3, #30
   da624:	d507      	bpl.n	da636 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   da626:	492d      	ldr	r1, [pc, #180]	; (da6dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   da628:	2202      	movs	r2, #2
   da62a:	a801      	add	r0, sp, #4
   da62c:	f7ff f888 	bl	d9740 <_ZN5spark10JSONWriter4nameEPKcj>
   da630:	68e1      	ldr	r1, [r4, #12]
   da632:	f7ff f809 	bl	d9648 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   da636:	7923      	ldrb	r3, [r4, #4]
   da638:	0758      	lsls	r0, r3, #29
   da63a:	d514      	bpl.n	da666 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da63c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da63e:	4633      	mov	r3, r6
   da640:	461f      	mov	r7, r3
    for (; *s; ++s) {
   da642:	f813 2b01 	ldrb.w	r2, [r3], #1
   da646:	b12a      	cbz	r2, da654 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   da648:	2a20      	cmp	r2, #32
   da64a:	d101      	bne.n	da650 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   da64c:	461e      	mov	r6, r3
   da64e:	e7f7      	b.n	da640 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   da650:	2a28      	cmp	r2, #40	; 0x28
   da652:	d1f5      	bne.n	da640 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   da654:	4922      	ldr	r1, [pc, #136]	; (da6e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   da656:	2202      	movs	r2, #2
   da658:	a801      	add	r0, sp, #4
   da65a:	f7ff f871 	bl	d9740 <_ZN5spark10JSONWriter4nameEPKcj>
   da65e:	1bba      	subs	r2, r7, r6
   da660:	4631      	mov	r1, r6
   da662:	f7ff f87d 	bl	d9760 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   da666:	7923      	ldrb	r3, [r4, #4]
   da668:	0719      	lsls	r1, r3, #28
   da66a:	d507      	bpl.n	da67c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   da66c:	491d      	ldr	r1, [pc, #116]	; (da6e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   da66e:	2201      	movs	r2, #1
   da670:	a801      	add	r0, sp, #4
   da672:	f7ff f865 	bl	d9740 <_ZN5spark10JSONWriter4nameEPKcj>
   da676:	6961      	ldr	r1, [r4, #20]
   da678:	f7fe fff8 	bl	d966c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   da67c:	7923      	ldrb	r3, [r4, #4]
   da67e:	06da      	lsls	r2, r3, #27
   da680:	d508      	bpl.n	da694 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   da682:	2204      	movs	r2, #4
   da684:	4918      	ldr	r1, [pc, #96]	; (da6e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   da686:	eb0d 0002 	add.w	r0, sp, r2
   da68a:	f7ff f859 	bl	d9740 <_ZN5spark10JSONWriter4nameEPKcj>
   da68e:	69a1      	ldr	r1, [r4, #24]
   da690:	f7fe ffda 	bl	d9648 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   da694:	7923      	ldrb	r3, [r4, #4]
   da696:	069b      	lsls	r3, r3, #26
   da698:	d507      	bpl.n	da6aa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   da69a:	4914      	ldr	r1, [pc, #80]	; (da6ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   da69c:	2206      	movs	r2, #6
   da69e:	a801      	add	r0, sp, #4
   da6a0:	f7ff f84e 	bl	d9740 <_ZN5spark10JSONWriter4nameEPKcj>
   da6a4:	69e1      	ldr	r1, [r4, #28]
   da6a6:	f7ff f8bf 	bl	d9828 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   da6aa:	a801      	add	r0, sp, #4
   da6ac:	f7fe ffa9 	bl	d9602 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   da6b0:	6a28      	ldr	r0, [r5, #32]
   da6b2:	490f      	ldr	r1, [pc, #60]	; (da6f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   da6b4:	6803      	ldr	r3, [r0, #0]
   da6b6:	2202      	movs	r2, #2
   da6b8:	68db      	ldr	r3, [r3, #12]
   da6ba:	4798      	blx	r3
}
   da6bc:	b005      	add	sp, #20
   da6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da6c2:	bf00      	nop
   da6c4:	2003e608 	.word	0x2003e608
   da6c8:	000dd7e0 	.word	0x000dd7e0
   da6cc:	000dd778 	.word	0x000dd778
   da6d0:	000dd7c3 	.word	0x000dd7c3
   da6d4:	000dd568 	.word	0x000dd568
   da6d8:	000dd2af 	.word	0x000dd2af
   da6dc:	000dd7c5 	.word	0x000dd7c5
   da6e0:	000dd7c8 	.word	0x000dd7c8
   da6e4:	000dd16a 	.word	0x000dd16a
   da6e8:	000dd7cb 	.word	0x000dd7cb
   da6ec:	000dd7d0 	.word	0x000dd7d0
   da6f0:	000dcfdb 	.word	0x000dcfdb

000da6f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da6f4:	2300      	movs	r3, #0
   da6f6:	6840      	ldr	r0, [r0, #4]
   da6f8:	461a      	mov	r2, r3
   da6fa:	f7fd bea5 	b.w	d8448 <network_connect>

000da6fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da6fe:	6840      	ldr	r0, [r0, #4]
   da700:	2200      	movs	r2, #0
   da702:	2102      	movs	r1, #2
   da704:	f7fd beb0 	b.w	d8468 <network_disconnect>

000da708 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da708:	2200      	movs	r2, #0
   da70a:	6840      	ldr	r0, [r0, #4]
   da70c:	4611      	mov	r1, r2
   da70e:	f7fd bea3 	b.w	d8458 <network_connecting>

000da712 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da712:	2200      	movs	r2, #0
   da714:	6840      	ldr	r0, [r0, #4]
   da716:	4611      	mov	r1, r2
   da718:	f7fd beae 	b.w	d8478 <network_ready>

000da71c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da71c:	2300      	movs	r3, #0
   da71e:	6840      	ldr	r0, [r0, #4]
   da720:	461a      	mov	r2, r3
   da722:	4619      	mov	r1, r3
   da724:	f7fd beb0 	b.w	d8488 <network_on>

000da728 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da728:	2300      	movs	r3, #0
   da72a:	6840      	ldr	r0, [r0, #4]
   da72c:	461a      	mov	r2, r3
   da72e:	4619      	mov	r1, r3
   da730:	f7fd beb2 	b.w	d8498 <network_off>

000da734 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   da734:	6840      	ldr	r0, [r0, #4]
   da736:	2100      	movs	r1, #0
   da738:	f7fd bed6 	b.w	d84e8 <network_is_on>

000da73c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   da73c:	6840      	ldr	r0, [r0, #4]
   da73e:	2100      	movs	r1, #0
   da740:	f7fd beda 	b.w	d84f8 <network_is_off>

000da744 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da744:	6840      	ldr	r0, [r0, #4]
   da746:	2200      	movs	r2, #0
   da748:	f081 0101 	eor.w	r1, r1, #1
   da74c:	f7fd beac 	b.w	d84a8 <network_listen>

000da750 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da750:	6840      	ldr	r0, [r0, #4]
   da752:	2200      	movs	r2, #0
   da754:	f7fd beb8 	b.w	d84c8 <network_set_listen_timeout>

000da758 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da758:	2200      	movs	r2, #0
   da75a:	6840      	ldr	r0, [r0, #4]
   da75c:	4611      	mov	r1, r2
   da75e:	f7fd bebb 	b.w	d84d8 <network_get_listen_timeout>

000da762 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da762:	2200      	movs	r2, #0
   da764:	6840      	ldr	r0, [r0, #4]
   da766:	4611      	mov	r1, r2
   da768:	f7fd bea6 	b.w	d84b8 <network_listening>

000da76c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da770:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   da772:	b095      	sub	sp, #84	; 0x54
   da774:	4616      	mov	r6, r2
   da776:	460d      	mov	r5, r1
   da778:	4607      	mov	r7, r0
    IPAddress addr;
   da77a:	f7fe fde3 	bl	d9344 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   da77e:	4621      	mov	r1, r4
   da780:	2218      	movs	r2, #24
   da782:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   da784:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da786:	f002 f905 	bl	dc994 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da78a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   da78c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da790:	4621      	mov	r1, r4
   da792:	466b      	mov	r3, sp
   da794:	aa0c      	add	r2, sp, #48	; 0x30
   da796:	4630      	mov	r0, r6
   da798:	f7fd fc8a 	bl	d80b0 <netdb_getaddrinfo>
    if (!r) {
   da79c:	4604      	mov	r4, r0
   da79e:	2800      	cmp	r0, #0
   da7a0:	d146      	bne.n	da830 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da7a2:	4602      	mov	r2, r0
   da7a4:	2101      	movs	r1, #1
   da7a6:	6868      	ldr	r0, [r5, #4]
   da7a8:	f7fd fe66 	bl	d8478 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da7ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da7ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da7b0:	4622      	mov	r2, r4
   da7b2:	6868      	ldr	r0, [r5, #4]
   da7b4:	f7fd fe60 	bl	d8478 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da7b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da7ba:	4681      	mov	r9, r0
        bool ok = false;
   da7bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da7be:	2e00      	cmp	r6, #0
   da7c0:	d036      	beq.n	da830 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   da7c2:	2900      	cmp	r1, #0
   da7c4:	d134      	bne.n	da830 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da7c6:	6873      	ldr	r3, [r6, #4]
   da7c8:	2b02      	cmp	r3, #2
   da7ca:	d003      	beq.n	da7d4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   da7cc:	2b0a      	cmp	r3, #10
   da7ce:	d00b      	beq.n	da7e8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da7d0:	69f6      	ldr	r6, [r6, #28]
   da7d2:	e7f4      	b.n	da7be <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   da7d4:	f1b8 0f00 	cmp.w	r8, #0
   da7d8:	d004      	beq.n	da7e4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da7da:	6971      	ldr	r1, [r6, #20]
   da7dc:	4638      	mov	r0, r7
   da7de:	3104      	adds	r1, #4
   da7e0:	f7fe fddd 	bl	d939e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   da7e4:	4641      	mov	r1, r8
   da7e6:	e7f3      	b.n	da7d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   da7e8:	f1b9 0f00 	cmp.w	r9, #0
   da7ec:	d101      	bne.n	da7f2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   da7ee:	4649      	mov	r1, r9
   da7f0:	e7ee      	b.n	da7d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da7f2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da7f4:	2210      	movs	r2, #16
   da7f6:	a801      	add	r0, sp, #4
   da7f8:	f002 f8cc 	bl	dc994 <memset>
                    a.v = 6;
   da7fc:	2306      	movs	r3, #6
   da7fe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da802:	ad01      	add	r5, sp, #4
   da804:	f104 0308 	add.w	r3, r4, #8
   da808:	3418      	adds	r4, #24
   da80a:	6818      	ldr	r0, [r3, #0]
   da80c:	6859      	ldr	r1, [r3, #4]
   da80e:	462a      	mov	r2, r5
   da810:	c203      	stmia	r2!, {r0, r1}
   da812:	3308      	adds	r3, #8
   da814:	42a3      	cmp	r3, r4
   da816:	4615      	mov	r5, r2
   da818:	d1f7      	bne.n	da80a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   da81a:	a901      	add	r1, sp, #4
   da81c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   da81e:	ad07      	add	r5, sp, #28
   da820:	f7fe fd9e 	bl	d9360 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da826:	1d3c      	adds	r4, r7, #4
   da828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da82a:	682b      	ldr	r3, [r5, #0]
   da82c:	7023      	strb	r3, [r4, #0]
   da82e:	e7de      	b.n	da7ee <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da830:	9800      	ldr	r0, [sp, #0]
   da832:	f7fd fc35 	bl	d80a0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da836:	4638      	mov	r0, r7
   da838:	b015      	add	sp, #84	; 0x54
   da83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da840 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da840:	4b02      	ldr	r3, [pc, #8]	; (da84c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da842:	4a03      	ldr	r2, [pc, #12]	; (da850 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da844:	601a      	str	r2, [r3, #0]
   da846:	2200      	movs	r2, #0
   da848:	605a      	str	r2, [r3, #4]

} // spark
   da84a:	4770      	bx	lr
   da84c:	2003e608 	.word	0x2003e608
   da850:	000dd858 	.word	0x000dd858

000da854 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   da854:	b508      	push	{r3, lr}
            return &Wire1;
   da856:	f001 f939 	bl	dbacc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   da85a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   da85e:	f7fe bcdf 	b.w	d9220 <_ZN7TwoWire4lockEv>

000da862 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   da862:	b510      	push	{r4, lr}
   da864:	4604      	mov	r4, r0
    lock_(_lock)
   da866:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   da868:	b109      	cbz	r1, da86e <_ZN4PMICC1Eb+0xc>
        lock();
   da86a:	f7ff fff3 	bl	da854 <_ZN4PMIC4lockEv.constprop.0>
}
   da86e:	4620      	mov	r0, r4
   da870:	bd10      	pop	{r4, pc}

000da872 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   da872:	b508      	push	{r3, lr}
            return &Wire1;
   da874:	f001 f92a 	bl	dbacc <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   da878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   da87c:	f7fe bcd9 	b.w	d9232 <_ZN7TwoWire6unlockEv>

000da880 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   da880:	b510      	push	{r4, lr}
    if (lock_) {
   da882:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   da884:	4604      	mov	r4, r0
    if (lock_) {
   da886:	b10b      	cbz	r3, da88c <_ZN4PMICD1Ev+0xc>
        unlock();
   da888:	f7ff fff3 	bl	da872 <_ZN4PMIC6unlockEv>
}
   da88c:	4620      	mov	r0, r4
   da88e:	bd10      	pop	{r4, pc}

000da890 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   da890:	b510      	push	{r4, lr}
   da892:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   da894:	6800      	ldr	r0, [r0, #0]
   da896:	f7ff ffec 	bl	da872 <_ZN4PMIC6unlockEv>
   da89a:	4620      	mov	r0, r4
   da89c:	bd10      	pop	{r4, pc}

000da89e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   da89e:	b530      	push	{r4, r5, lr}
   da8a0:	b087      	sub	sp, #28
   da8a2:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da8a4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da8a6:	f7ff ffd5 	bl	da854 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da8aa:	236b      	movs	r3, #107	; 0x6b
   da8ac:	f88d 3008 	strb.w	r3, [sp, #8]
   da8b0:	2300      	movs	r3, #0
   da8b2:	2401      	movs	r4, #1
   da8b4:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   da8b6:	230a      	movs	r3, #10
   da8b8:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da8ba:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   da8be:	f001 f905 	bl	dbacc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da8c2:	a902      	add	r1, sp, #8
   da8c4:	f7fe fc8d 	bl	d91e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da8c8:	f001 f900 	bl	dbacc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   da8cc:	6803      	ldr	r3, [r0, #0]
   da8ce:	4629      	mov	r1, r5
   da8d0:	689b      	ldr	r3, [r3, #8]
   da8d2:	4798      	blx	r3
            return &Wire1;
   da8d4:	f001 f8fa 	bl	dbacc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da8d8:	4621      	mov	r1, r4
   da8da:	f7fe fc9a 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   da8de:	9403      	str	r4, [sp, #12]
            return &Wire1;
   da8e0:	f001 f8f4 	bl	dbacc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   da8e4:	a902      	add	r1, sp, #8
   da8e6:	f7fe fc49 	bl	d917c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   da8ea:	f001 f8ef 	bl	dbacc <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   da8ee:	6803      	ldr	r3, [r0, #0]
   da8f0:	695b      	ldr	r3, [r3, #20]
   da8f2:	4798      	blx	r3
   da8f4:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   da8f6:	a801      	add	r0, sp, #4
   da8f8:	f7ff ffca 	bl	da890 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da8fc:	b2e0      	uxtb	r0, r4
   da8fe:	b007      	add	sp, #28
   da900:	bd30      	pop	{r4, r5, pc}

000da902 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   da902:	b570      	push	{r4, r5, r6, lr}
   da904:	b086      	sub	sp, #24
   da906:	4614      	mov	r4, r2
   da908:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da90a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da90c:	f7ff ffa2 	bl	da854 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da910:	236b      	movs	r3, #107	; 0x6b
   da912:	f88d 3008 	strb.w	r3, [sp, #8]
   da916:	2300      	movs	r3, #0
   da918:	9303      	str	r3, [sp, #12]
   da91a:	2601      	movs	r6, #1
    timeout_ = ms;
   da91c:	230a      	movs	r3, #10
   da91e:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da920:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   da924:	f001 f8d2 	bl	dbacc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da928:	a902      	add	r1, sp, #8
   da92a:	f7fe fc5a 	bl	d91e2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da92e:	f001 f8cd 	bl	dbacc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   da932:	6803      	ldr	r3, [r0, #0]
   da934:	4629      	mov	r1, r5
   da936:	689b      	ldr	r3, [r3, #8]
   da938:	4798      	blx	r3
            return &Wire1;
   da93a:	f001 f8c7 	bl	dbacc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   da93e:	6803      	ldr	r3, [r0, #0]
   da940:	4621      	mov	r1, r4
   da942:	689b      	ldr	r3, [r3, #8]
   da944:	4798      	blx	r3
            return &Wire1;
   da946:	f001 f8c1 	bl	dbacc <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da94a:	4631      	mov	r1, r6
   da94c:	f7fe fc61 	bl	d9212 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   da950:	a801      	add	r0, sp, #4
   da952:	f7ff ff9d 	bl	da890 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da956:	b006      	add	sp, #24
   da958:	bd70      	pop	{r4, r5, r6, pc}

000da95a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   da95a:	b513      	push	{r0, r1, r4, lr}
   da95c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da95e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da960:	f7ff ff78 	bl	da854 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da964:	2101      	movs	r1, #1
   da966:	4620      	mov	r0, r4
   da968:	f7ff ff99 	bl	da89e <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   da96c:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   da970:	f040 0210 	orr.w	r2, r0, #16
   da974:	2101      	movs	r1, #1
   da976:	4620      	mov	r0, r4
   da978:	f7ff ffc3 	bl	da902 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da97c:	a801      	add	r0, sp, #4
   da97e:	f7ff ff87 	bl	da890 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da982:	2001      	movs	r0, #1
   da984:	b002      	add	sp, #8
   da986:	bd10      	pop	{r4, pc}

000da988 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   da988:	b513      	push	{r0, r1, r4, lr}
   da98a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da98c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da98e:	f7ff ff61 	bl	da854 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da992:	2101      	movs	r1, #1
   da994:	4620      	mov	r0, r4
   da996:	f7ff ff82 	bl	da89e <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   da99a:	2101      	movs	r1, #1
   da99c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   da9a0:	4620      	mov	r0, r4
   da9a2:	f7ff ffae 	bl	da902 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da9a6:	a801      	add	r0, sp, #4
   da9a8:	f7ff ff72 	bl	da890 <_ZNSt10lock_guardI4PMICED1Ev>
}
   da9ac:	2001      	movs	r0, #1
   da9ae:	b002      	add	sp, #8
   da9b0:	bd10      	pop	{r4, pc}

000da9b2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da9b4:	4606      	mov	r6, r0
   da9b6:	460d      	mov	r5, r1
  size_t n = 0;
   da9b8:	188f      	adds	r7, r1, r2
   da9ba:	2400      	movs	r4, #0
  while (size--) {
   da9bc:	42bd      	cmp	r5, r7
   da9be:	d00c      	beq.n	da9da <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da9c0:	6833      	ldr	r3, [r6, #0]
   da9c2:	f815 1b01 	ldrb.w	r1, [r5], #1
   da9c6:	689b      	ldr	r3, [r3, #8]
   da9c8:	4630      	mov	r0, r6
   da9ca:	4798      	blx	r3
     if (chunk>=0)
   da9cc:	1e03      	subs	r3, r0, #0
   da9ce:	db01      	blt.n	da9d4 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da9d0:	441c      	add	r4, r3
  while (size--) {
   da9d2:	e7f3      	b.n	da9bc <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da9d4:	2c00      	cmp	r4, #0
   da9d6:	bf08      	it	eq
   da9d8:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   da9da:	4620      	mov	r0, r4
   da9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da9de <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   da9de:	b513      	push	{r0, r1, r4, lr}
   da9e0:	4604      	mov	r4, r0
    }
   da9e2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   da9e4:	b159      	cbz	r1, da9fe <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   da9e6:	9101      	str	r1, [sp, #4]
   da9e8:	f002 f847 	bl	dca7a <strlen>
   da9ec:	6823      	ldr	r3, [r4, #0]
   da9ee:	9901      	ldr	r1, [sp, #4]
   da9f0:	68db      	ldr	r3, [r3, #12]
   da9f2:	4602      	mov	r2, r0
   da9f4:	4620      	mov	r0, r4
    }
   da9f6:	b002      	add	sp, #8
   da9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   da9fc:	4718      	bx	r3
    }
   da9fe:	b002      	add	sp, #8
   daa00:	bd10      	pop	{r4, pc}

000daa02 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   daa02:	b508      	push	{r3, lr}
  return write(str);
   daa04:	f7ff ffeb 	bl	da9de <_ZN5Print5writeEPKc>
}
   daa08:	bd08      	pop	{r3, pc}

000daa0a <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   daa0a:	6803      	ldr	r3, [r0, #0]
   daa0c:	689b      	ldr	r3, [r3, #8]
   daa0e:	4718      	bx	r3

000daa10 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   daa10:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   daa12:	210d      	movs	r1, #13
{
   daa14:	4605      	mov	r5, r0
  size_t n = print('\r');
   daa16:	f7ff fff8 	bl	daa0a <_ZN5Print5printEc>
  n += print('\n');
   daa1a:	210a      	movs	r1, #10
  size_t n = print('\r');
   daa1c:	4604      	mov	r4, r0
  n += print('\n');
   daa1e:	4628      	mov	r0, r5
   daa20:	f7ff fff3 	bl	daa0a <_ZN5Print5printEc>
  return n;
}
   daa24:	4420      	add	r0, r4
   daa26:	bd38      	pop	{r3, r4, r5, pc}

000daa28 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   daa28:	b538      	push	{r3, r4, r5, lr}
   daa2a:	4605      	mov	r5, r0
  return write(str);
   daa2c:	f7ff ffd7 	bl	da9de <_ZN5Print5writeEPKc>
   daa30:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   daa32:	4628      	mov	r0, r5
   daa34:	f7ff ffec 	bl	daa10 <_ZN5Print7printlnEv>
  return n;
}
   daa38:	4420      	add	r0, r4
   daa3a:	bd38      	pop	{r3, r4, r5, pc}

000daa3c <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   daa3c:	b530      	push	{r4, r5, lr}
   daa3e:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   daa40:	2300      	movs	r3, #0
   daa42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   daa46:	2a01      	cmp	r2, #1
   daa48:	bf98      	it	ls
   daa4a:	220a      	movls	r2, #10
   daa4c:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   daa4e:	460d      	mov	r5, r1
   daa50:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   daa54:	fb01 5312 	mls	r3, r1, r2, r5
   daa58:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   daa5c:	2b09      	cmp	r3, #9
   daa5e:	bf94      	ite	ls
   daa60:	3330      	addls	r3, #48	; 0x30
   daa62:	3337      	addhi	r3, #55	; 0x37
   daa64:	b2db      	uxtb	r3, r3
  } while(n);
   daa66:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   daa68:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   daa6c:	d9ef      	bls.n	daa4e <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   daa6e:	4621      	mov	r1, r4
   daa70:	f7ff ffb5 	bl	da9de <_ZN5Print5writeEPKc>
}
   daa74:	b00b      	add	sp, #44	; 0x2c
   daa76:	bd30      	pop	{r4, r5, pc}

000daa78 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   daa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daa7c:	b086      	sub	sp, #24
   daa7e:	af00      	add	r7, sp, #0
   daa80:	4605      	mov	r5, r0
   daa82:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   daa84:	1d38      	adds	r0, r7, #4
   daa86:	2114      	movs	r1, #20
{
   daa88:	4614      	mov	r4, r2
    va_copy(args2, args);
   daa8a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   daa8c:	f7fd fd64 	bl	d8558 <vsnprintf>

    if (n<bufsize)
   daa90:	2813      	cmp	r0, #19
   daa92:	d80e      	bhi.n	daab2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   daa94:	1d39      	adds	r1, r7, #4
   daa96:	4628      	mov	r0, r5
   daa98:	f7ff ffa1 	bl	da9de <_ZN5Print5writeEPKc>
   daa9c:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   daa9e:	b11e      	cbz	r6, daaa8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   daaa0:	4628      	mov	r0, r5
   daaa2:	f7ff ffb5 	bl	daa10 <_ZN5Print7printlnEv>
   daaa6:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   daaa8:	4620      	mov	r0, r4
   daaaa:	3718      	adds	r7, #24
   daaac:	46bd      	mov	sp, r7
   daaae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   daab2:	f100 0308 	add.w	r3, r0, #8
   daab6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   daaba:	46e8      	mov	r8, sp
        char bigger[n+1];
   daabc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   daac0:	4622      	mov	r2, r4
   daac2:	1c41      	adds	r1, r0, #1
   daac4:	683b      	ldr	r3, [r7, #0]
   daac6:	4668      	mov	r0, sp
   daac8:	f7fd fd46 	bl	d8558 <vsnprintf>
  return write(str);
   daacc:	4669      	mov	r1, sp
   daace:	4628      	mov	r0, r5
   daad0:	f7ff ff85 	bl	da9de <_ZN5Print5writeEPKc>
   daad4:	4604      	mov	r4, r0
   daad6:	46c5      	mov	sp, r8
   daad8:	e7e1      	b.n	daa9e <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000daada <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   daada:	b510      	push	{r4, lr}
   daadc:	4604      	mov	r4, r0
   daade:	f7f9 fc2b 	bl	d4338 <_ZNSt14_Function_baseD1Ev>
   daae2:	4620      	mov	r0, r4
   daae4:	bd10      	pop	{r4, pc}
	...

000daae8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   daae8:	4803      	ldr	r0, [pc, #12]	; (daaf8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   daaea:	4a04      	ldr	r2, [pc, #16]	; (daafc <_GLOBAL__sub_I_RGB+0x14>)
   daaec:	4904      	ldr	r1, [pc, #16]	; (dab00 <_GLOBAL__sub_I_RGB+0x18>)
   daaee:	2300      	movs	r3, #0
   daaf0:	6083      	str	r3, [r0, #8]
   daaf2:	f001 b813 	b.w	dbb1c <__aeabi_atexit>
   daaf6:	bf00      	nop
   daaf8:	2003e610 	.word	0x2003e610
   daafc:	2003e300 	.word	0x2003e300
   dab00:	000daadb 	.word	0x000daadb

000dab04 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   dab04:	b510      	push	{r4, lr}
   dab06:	4604      	mov	r4, r0
   dab08:	4608      	mov	r0, r1
{
    _spi = spi;
   dab0a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   dab0c:	f7fd fad8 	bl	d80c0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   dab10:	2300      	movs	r3, #0
   dab12:	6063      	str	r3, [r4, #4]
}
   dab14:	4620      	mov	r0, r4
   dab16:	bd10      	pop	{r4, pc}

000dab18 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   dab18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dab1c:	ec57 6b10 	vmov	r6, r7, d0
   dab20:	4680      	mov	r8, r0
   dab22:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   dab24:	ee10 0a10 	vmov	r0, s0
   dab28:	2200      	movs	r2, #0
   dab2a:	2300      	movs	r3, #0
   dab2c:	4639      	mov	r1, r7
   dab2e:	f001 fc31 	bl	dc394 <__aeabi_dcmplt>
   dab32:	b128      	cbz	r0, dab40 <_Z4dtoadhPc+0x28>
        val = -val;
   dab34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   dab38:	461f      	mov	r7, r3
        *sout++ = '-';
   dab3a:	232d      	movs	r3, #45	; 0x2d
   dab3c:	f804 3b01 	strb.w	r3, [r4], #1
   dab40:	2300      	movs	r3, #0
    }
    long scale = 1;
   dab42:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   dab46:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   dab48:	b2d9      	uxtb	r1, r3
   dab4a:	4588      	cmp	r8, r1
   dab4c:	d903      	bls.n	dab56 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   dab4e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   dab52:	3301      	adds	r3, #1
   dab54:	e7f8      	b.n	dab48 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   dab56:	4648      	mov	r0, r9
   dab58:	f001 f940 	bl	dbddc <__aeabi_i2d>
   dab5c:	4632      	mov	r2, r6
   dab5e:	463b      	mov	r3, r7
   dab60:	f001 f9a6 	bl	dbeb0 <__aeabi_dmul>
   dab64:	4606      	mov	r6, r0
   dab66:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   dab68:	f001 fd20 	bl	dc5ac <__aeabi_d2ulz>
   dab6c:	4605      	mov	r5, r0
   dab6e:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   dab70:	f001 f968 	bl	dbe44 <__aeabi_ul2d>
   dab74:	4602      	mov	r2, r0
   dab76:	460b      	mov	r3, r1
   dab78:	4630      	mov	r0, r6
   dab7a:	4639      	mov	r1, r7
   dab7c:	f000 ffe0 	bl	dbb40 <__aeabi_dsub>
   dab80:	4b13      	ldr	r3, [pc, #76]	; (dabd0 <_Z4dtoadhPc+0xb8>)
   dab82:	2200      	movs	r2, #0
   dab84:	f001 fc1a 	bl	dc3bc <__aeabi_dcmpge>
   dab88:	b110      	cbz	r0, dab90 <_Z4dtoadhPc+0x78>
        fixed++;
   dab8a:	3501      	adds	r5, #1
   dab8c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   dab90:	464a      	mov	r2, r9
   dab92:	4628      	mov	r0, r5
   dab94:	17d3      	asrs	r3, r2, #31
   dab96:	4651      	mov	r1, sl
   dab98:	f001 fcbc 	bl	dc514 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   dab9c:	2301      	movs	r3, #1
   dab9e:	4615      	mov	r5, r2
   daba0:	4621      	mov	r1, r4
   daba2:	220a      	movs	r2, #10
   daba4:	f000 fdd3 	bl	db74e <ultoa>
    if (prec) {
   daba8:	f1b8 0f00 	cmp.w	r8, #0
   dabac:	d00d      	beq.n	dabca <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   dabae:	4620      	mov	r0, r4
   dabb0:	f001 ff63 	bl	dca7a <strlen>
        *sout++ = '.';
   dabb4:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   dabb6:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   dabb8:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   dabba:	220a      	movs	r2, #10
   dabbc:	4643      	mov	r3, r8
   dabbe:	4628      	mov	r0, r5
   dabc0:	3101      	adds	r1, #1
    }
}
   dabc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   dabc6:	f000 bdc2 	b.w	db74e <ultoa>
}
   dabca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dabce:	bf00      	nop
   dabd0:	3fe00000 	.word	0x3fe00000

000dabd4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   dabd4:	b510      	push	{r4, lr}
   dabd6:	4604      	mov	r4, r0
{
	free(buffer);
   dabd8:	6800      	ldr	r0, [r0, #0]
   dabda:	f7fd fc9d 	bl	d8518 <free>
}
   dabde:	4620      	mov	r0, r4
   dabe0:	bd10      	pop	{r4, pc}

000dabe2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dabe2:	b510      	push	{r4, lr}
   dabe4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dabe6:	6800      	ldr	r0, [r0, #0]
   dabe8:	b108      	cbz	r0, dabee <_ZN6String10invalidateEv+0xc>
   dabea:	f7fd fc95 	bl	d8518 <free>
	buffer = NULL;
   dabee:	2300      	movs	r3, #0
	capacity = len = 0;
   dabf0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   dabf4:	6023      	str	r3, [r4, #0]
}
   dabf6:	bd10      	pop	{r4, pc}

000dabf8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dabf8:	b538      	push	{r3, r4, r5, lr}
   dabfa:	4604      	mov	r4, r0
   dabfc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dabfe:	6800      	ldr	r0, [r0, #0]
   dac00:	3101      	adds	r1, #1
   dac02:	f7fd fc91 	bl	d8528 <realloc>
	if (newbuffer) {
   dac06:	b110      	cbz	r0, dac0e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dac08:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   dac0c:	2001      	movs	r0, #1
	}
	return 0;
}
   dac0e:	bd38      	pop	{r3, r4, r5, pc}

000dac10 <_ZN6String7reserveEj>:
{
   dac10:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dac12:	6803      	ldr	r3, [r0, #0]
{
   dac14:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dac16:	b123      	cbz	r3, dac22 <_ZN6String7reserveEj+0x12>
   dac18:	6843      	ldr	r3, [r0, #4]
   dac1a:	428b      	cmp	r3, r1
   dac1c:	d301      	bcc.n	dac22 <_ZN6String7reserveEj+0x12>
   dac1e:	2001      	movs	r0, #1
}
   dac20:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   dac22:	4620      	mov	r0, r4
   dac24:	f7ff ffe8 	bl	dabf8 <_ZN6String12changeBufferEj>
   dac28:	2800      	cmp	r0, #0
   dac2a:	d0f9      	beq.n	dac20 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   dac2c:	68a3      	ldr	r3, [r4, #8]
   dac2e:	2b00      	cmp	r3, #0
   dac30:	d1f5      	bne.n	dac1e <_ZN6String7reserveEj+0xe>
   dac32:	6822      	ldr	r2, [r4, #0]
   dac34:	7013      	strb	r3, [r2, #0]
   dac36:	e7f2      	b.n	dac1e <_ZN6String7reserveEj+0xe>

000dac38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dac38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dac3a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   dac3c:	4611      	mov	r1, r2
   dac3e:	9201      	str	r2, [sp, #4]
{
   dac40:	4604      	mov	r4, r0
	if (!reserve(length)) {
   dac42:	f7ff ffe5 	bl	dac10 <_ZN6String7reserveEj>
   dac46:	9a01      	ldr	r2, [sp, #4]
   dac48:	b928      	cbnz	r0, dac56 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   dac4a:	4620      	mov	r0, r4
   dac4c:	f7ff ffc9 	bl	dabe2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   dac50:	4620      	mov	r0, r4
   dac52:	b003      	add	sp, #12
   dac54:	bd30      	pop	{r4, r5, pc}
	len = length;
   dac56:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   dac58:	4629      	mov	r1, r5
   dac5a:	6820      	ldr	r0, [r4, #0]
   dac5c:	f001 fe72 	bl	dc944 <memcpy>
	buffer[len] = 0;
   dac60:	6822      	ldr	r2, [r4, #0]
   dac62:	68a3      	ldr	r3, [r4, #8]
   dac64:	2100      	movs	r1, #0
   dac66:	54d1      	strb	r1, [r2, r3]
	return *this;
   dac68:	e7f2      	b.n	dac50 <_ZN6String4copyEPKcj+0x18>

000dac6a <_ZN6StringC1EPKc>:
	buffer = NULL;
   dac6a:	2300      	movs	r3, #0
String::String(const char *cstr)
   dac6c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   dac6e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   dac72:	4604      	mov	r4, r0
	len = 0;
   dac74:	6083      	str	r3, [r0, #8]
	flags = 0;
   dac76:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   dac78:	b141      	cbz	r1, dac8c <_ZN6StringC1EPKc+0x22>
   dac7a:	4608      	mov	r0, r1
   dac7c:	9101      	str	r1, [sp, #4]
   dac7e:	f001 fefc 	bl	dca7a <strlen>
   dac82:	9901      	ldr	r1, [sp, #4]
   dac84:	4602      	mov	r2, r0
   dac86:	4620      	mov	r0, r4
   dac88:	f7ff ffd6 	bl	dac38 <_ZN6String4copyEPKcj>
}
   dac8c:	4620      	mov	r0, r4
   dac8e:	b002      	add	sp, #8
   dac90:	bd10      	pop	{r4, pc}

000dac92 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   dac92:	b538      	push	{r3, r4, r5, lr}
   dac94:	4605      	mov	r5, r0
	if (buffer) {
   dac96:	6800      	ldr	r0, [r0, #0]
{
   dac98:	460c      	mov	r4, r1
	if (buffer) {
   dac9a:	b168      	cbz	r0, dacb8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   dac9c:	686a      	ldr	r2, [r5, #4]
   dac9e:	688b      	ldr	r3, [r1, #8]
   daca0:	429a      	cmp	r2, r3
   daca2:	d307      	bcc.n	dacb4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   daca4:	6809      	ldr	r1, [r1, #0]
   daca6:	f001 fec2 	bl	dca2e <strcpy>
			len = rhs.len;
   dacaa:	68a3      	ldr	r3, [r4, #8]
   dacac:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   dacae:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   dacb0:	60a3      	str	r3, [r4, #8]
}
   dacb2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   dacb4:	f7fd fc30 	bl	d8518 <free>
	buffer = rhs.buffer;
   dacb8:	6823      	ldr	r3, [r4, #0]
   dacba:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   dacbc:	6863      	ldr	r3, [r4, #4]
   dacbe:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   dacc0:	68a3      	ldr	r3, [r4, #8]
   dacc2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   dacc4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   dacc6:	e9c4 3300 	strd	r3, r3, [r4]
   dacca:	e7f1      	b.n	dacb0 <_ZN6String4moveERS_+0x1e>

000daccc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   daccc:	b510      	push	{r4, lr}
	buffer = NULL;
   dacce:	2300      	movs	r3, #0
	capacity = 0;
   dacd0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   dacd4:	4604      	mov	r4, r0
	len = 0;
   dacd6:	6083      	str	r3, [r0, #8]
	flags = 0;
   dacd8:	7303      	strb	r3, [r0, #12]
	move(rval);
   dacda:	f7ff ffda 	bl	dac92 <_ZN6String4moveERS_>
}
   dacde:	4620      	mov	r0, r4
   dace0:	bd10      	pop	{r4, pc}

000dace2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   dace2:	4288      	cmp	r0, r1
{
   dace4:	b510      	push	{r4, lr}
   dace6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   dace8:	d005      	beq.n	dacf6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   dacea:	680b      	ldr	r3, [r1, #0]
   dacec:	b12b      	cbz	r3, dacfa <_ZN6StringaSERKS_+0x18>
   dacee:	688a      	ldr	r2, [r1, #8]
   dacf0:	4619      	mov	r1, r3
   dacf2:	f7ff ffa1 	bl	dac38 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dacf6:	4620      	mov	r0, r4
   dacf8:	bd10      	pop	{r4, pc}
	else invalidate();
   dacfa:	f7ff ff72 	bl	dabe2 <_ZN6String10invalidateEv>
   dacfe:	e7fa      	b.n	dacf6 <_ZN6StringaSERKS_+0x14>

000dad00 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   dad00:	b510      	push	{r4, lr}
	buffer = NULL;
   dad02:	2300      	movs	r3, #0
String::String(const String &value)
   dad04:	4604      	mov	r4, r0
	capacity = 0;
   dad06:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   dad0a:	6083      	str	r3, [r0, #8]
	flags = 0;
   dad0c:	7303      	strb	r3, [r0, #12]
	*this = value;
   dad0e:	f7ff ffe8 	bl	dace2 <_ZN6StringaSERKS_>
}
   dad12:	4620      	mov	r0, r4
   dad14:	bd10      	pop	{r4, pc}

000dad16 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   dad16:	b513      	push	{r0, r1, r4, lr}
   dad18:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   dad1a:	b159      	cbz	r1, dad34 <_ZN6StringaSEPKc+0x1e>
   dad1c:	4608      	mov	r0, r1
   dad1e:	9101      	str	r1, [sp, #4]
   dad20:	f001 feab 	bl	dca7a <strlen>
   dad24:	9901      	ldr	r1, [sp, #4]
   dad26:	4602      	mov	r2, r0
   dad28:	4620      	mov	r0, r4
   dad2a:	f7ff ff85 	bl	dac38 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   dad2e:	4620      	mov	r0, r4
   dad30:	b002      	add	sp, #8
   dad32:	bd10      	pop	{r4, pc}
	else invalidate();
   dad34:	f7ff ff55 	bl	dabe2 <_ZN6String10invalidateEv>
   dad38:	e7f9      	b.n	dad2e <_ZN6StringaSEPKc+0x18>

000dad3a <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   dad3a:	b530      	push	{r4, r5, lr}
   dad3c:	4604      	mov	r4, r0
	buffer = NULL;
   dad3e:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   dad40:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   dad42:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   dad46:	60a3      	str	r3, [r4, #8]
	flags = 0;
   dad48:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   dad4a:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   dad4e:	b2cd      	uxtb	r5, r1
   dad50:	f001 f856 	bl	dbe00 <__aeabi_f2d>
   dad54:	ec41 0b10 	vmov	d0, r0, r1
   dad58:	a901      	add	r1, sp, #4
   dad5a:	4628      	mov	r0, r5
   dad5c:	f7ff fedc 	bl	dab18 <_Z4dtoadhPc>
        *this = buf;
   dad60:	a901      	add	r1, sp, #4
   dad62:	4620      	mov	r0, r4
   dad64:	f7ff ffd7 	bl	dad16 <_ZN6StringaSEPKc>
}
   dad68:	4620      	mov	r0, r4
   dad6a:	b00b      	add	sp, #44	; 0x2c
   dad6c:	bd30      	pop	{r4, r5, pc}

000dad6e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   dad6e:	b570      	push	{r4, r5, r6, lr}
   dad70:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   dad72:	460e      	mov	r6, r1
   dad74:	b909      	cbnz	r1, dad7a <_ZN6String6concatEPKcj+0xc>
   dad76:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   dad78:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   dad7a:	b16a      	cbz	r2, dad98 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   dad7c:	6884      	ldr	r4, [r0, #8]
   dad7e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   dad80:	4621      	mov	r1, r4
   dad82:	f7ff ff45 	bl	dac10 <_ZN6String7reserveEj>
   dad86:	2800      	cmp	r0, #0
   dad88:	d0f5      	beq.n	dad76 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   dad8a:	6828      	ldr	r0, [r5, #0]
   dad8c:	68ab      	ldr	r3, [r5, #8]
   dad8e:	4631      	mov	r1, r6
   dad90:	4418      	add	r0, r3
   dad92:	f001 fe4c 	bl	dca2e <strcpy>
	len = newlen;
   dad96:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   dad98:	2001      	movs	r0, #1
   dad9a:	e7ed      	b.n	dad78 <_ZN6String6concatEPKcj+0xa>

000dad9c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   dad9c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dad9e:	688a      	ldr	r2, [r1, #8]
   dada0:	6809      	ldr	r1, [r1, #0]
{
   dada2:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   dada4:	f7ff ffe3 	bl	dad6e <_ZN6String6concatEPKcj>
   dada8:	b910      	cbnz	r0, dadb0 <_ZplRK15StringSumHelperRK6String+0x14>
   dadaa:	4620      	mov	r0, r4
   dadac:	f7ff ff19 	bl	dabe2 <_ZN6String10invalidateEv>
	return a;
}
   dadb0:	4620      	mov	r0, r4
   dadb2:	bd10      	pop	{r4, pc}

000dadb4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   dadb4:	b513      	push	{r0, r1, r4, lr}
   dadb6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dadb8:	b929      	cbnz	r1, dadc6 <_ZplRK15StringSumHelperPKc+0x12>
   dadba:	4620      	mov	r0, r4
   dadbc:	f7ff ff11 	bl	dabe2 <_ZN6String10invalidateEv>
	return a;
}
   dadc0:	4620      	mov	r0, r4
   dadc2:	b002      	add	sp, #8
   dadc4:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   dadc6:	4608      	mov	r0, r1
   dadc8:	9101      	str	r1, [sp, #4]
   dadca:	f001 fe56 	bl	dca7a <strlen>
   dadce:	9901      	ldr	r1, [sp, #4]
   dadd0:	4602      	mov	r2, r0
   dadd2:	4620      	mov	r0, r4
   dadd4:	f7ff ffcb 	bl	dad6e <_ZN6String6concatEPKcj>
   dadd8:	2800      	cmp	r0, #0
   dadda:	d0ee      	beq.n	dadba <_ZplRK15StringSumHelperPKc+0x6>
   daddc:	e7f0      	b.n	dadc0 <_ZplRK15StringSumHelperPKc+0xc>

000dadde <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   dadde:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dade0:	6882      	ldr	r2, [r0, #8]
   dade2:	b93a      	cbnz	r2, dadf4 <_ZNK6String6equalsEPKc+0x16>
   dade4:	b121      	cbz	r1, dadf0 <_ZNK6String6equalsEPKc+0x12>
   dade6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   dade8:	fab0 f080 	clz	r0, r0
   dadec:	0940      	lsrs	r0, r0, #5
   dadee:	e000      	b.n	dadf2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   dadf0:	2001      	movs	r0, #1
}
   dadf2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   dadf4:	6800      	ldr	r0, [r0, #0]
   dadf6:	b909      	cbnz	r1, dadfc <_ZNK6String6equalsEPKc+0x1e>
   dadf8:	7800      	ldrb	r0, [r0, #0]
   dadfa:	e7f5      	b.n	dade8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   dadfc:	f001 fe0d 	bl	dca1a <strcmp>
   dae00:	e7f2      	b.n	dade8 <_ZNK6String6equalsEPKc+0xa>

000dae02 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   dae02:	b558      	push	{r3, r4, r6, lr}
   dae04:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   dae06:	b12a      	cbz	r2, dae14 <_ZNK6String8getBytesEPhjj+0x12>
   dae08:	b121      	cbz	r1, dae14 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   dae0a:	6884      	ldr	r4, [r0, #8]
   dae0c:	42a3      	cmp	r3, r4
   dae0e:	d302      	bcc.n	dae16 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   dae10:	2300      	movs	r3, #0
   dae12:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   dae14:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   dae16:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   dae18:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   dae1a:	6801      	ldr	r1, [r0, #0]
   dae1c:	4294      	cmp	r4, r2
   dae1e:	bf28      	it	cs
   dae20:	4614      	movcs	r4, r2
   dae22:	4419      	add	r1, r3
   dae24:	4622      	mov	r2, r4
   dae26:	4630      	mov	r0, r6
   dae28:	f001 fe41 	bl	dcaae <strncpy>
	buf[n] = 0;
   dae2c:	2300      	movs	r3, #0
   dae2e:	5533      	strb	r3, [r6, r4]
   dae30:	e7f0      	b.n	dae14 <_ZNK6String8getBytesEPhjj+0x12>
	...

000dae34 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   dae34:	b40e      	push	{r1, r2, r3}
   dae36:	b570      	push	{r4, r5, r6, lr}
   dae38:	b087      	sub	sp, #28
   dae3a:	ad0b      	add	r5, sp, #44	; 0x2c
   dae3c:	4604      	mov	r4, r0
   dae3e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dae42:	9201      	str	r2, [sp, #4]
   dae44:	462b      	mov	r3, r5
   dae46:	2105      	movs	r1, #5
   dae48:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   dae4a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dae4c:	f7fd fb84 	bl	d8558 <vsnprintf>
    va_end(marker);

    String result;
   dae50:	490b      	ldr	r1, [pc, #44]	; (dae80 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   dae52:	4606      	mov	r6, r0
    String result;
   dae54:	4620      	mov	r0, r4
   dae56:	f7ff ff08 	bl	dac6a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   dae5a:	4631      	mov	r1, r6
   dae5c:	4620      	mov	r0, r4
   dae5e:	f7ff fed7 	bl	dac10 <_ZN6String7reserveEj>
    if (result.buffer) {
   dae62:	6820      	ldr	r0, [r4, #0]
   dae64:	b130      	cbz	r0, dae74 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dae66:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   dae68:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   dae6a:	462b      	mov	r3, r5
   dae6c:	1c71      	adds	r1, r6, #1
   dae6e:	f7fd fb73 	bl	d8558 <vsnprintf>
        va_end(marker);
        result.len = n;
   dae72:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   dae74:	4620      	mov	r0, r4
   dae76:	b007      	add	sp, #28
   dae78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dae7c:	b003      	add	sp, #12
   dae7e:	4770      	bx	lr
   dae80:	000dcfdd 	.word	0x000dcfdd

000dae84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   dae84:	b510      	push	{r4, lr}
   dae86:	4604      	mov	r4, r0
        if (wakeupSource_) {
   dae88:	6800      	ldr	r0, [r0, #0]
   dae8a:	b118      	cbz	r0, dae94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   dae8c:	f7fd fb44 	bl	d8518 <free>
            wakeupSource_ = nullptr;
   dae90:	2300      	movs	r3, #0
   dae92:	6023      	str	r3, [r4, #0]
        }
    }
   dae94:	bd10      	pop	{r4, pc}

000dae96 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   dae96:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   dae98:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   dae9c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   dae9e:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   daea0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   daea2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   daea6:	f8c0 2006 	str.w	r2, [r0, #6]
   daeaa:	889b      	ldrh	r3, [r3, #4]
   daeac:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   daeae:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   daeb0:	f7ff ffe8 	bl	dae84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   daeb4:	682b      	ldr	r3, [r5, #0]
   daeb6:	b113      	cbz	r3, daebe <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   daeb8:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   daeba:	2300      	movs	r3, #0
   daebc:	602b      	str	r3, [r5, #0]
    }
   daebe:	4620      	mov	r0, r4
   daec0:	bd38      	pop	{r3, r4, r5, pc}

000daec2 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
   daec2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   daec6:	680a      	ldr	r2, [r1, #0]
    SleepResult toSleepResult() {
   daec8:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
   daeca:	b933      	cbnz	r3, daeda <_ZN17SystemSleepResult13toSleepResultEv+0x18>
   daecc:	b932      	cbnz	r2, daedc <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
   daece:	f851 3f06 	ldr.w	r3, [r1, #6]!
   daed2:	6003      	str	r3, [r0, #0]
   daed4:	888b      	ldrh	r3, [r1, #4]
   daed6:	8083      	strh	r3, [r0, #4]
    }
   daed8:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
   daeda:	b122      	cbz	r2, daee6 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
   daedc:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
   daede:	2c01      	cmp	r4, #1
   daee0:	d003      	beq.n	daeea <_ZN17SystemSleepResult13toSleepResultEv+0x28>
   daee2:	2c04      	cmp	r4, #4
   daee4:	d006      	beq.n	daef4 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   daee6:	2204      	movs	r2, #4
   daee8:	e005      	b.n	daef6 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   daeea:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
   daeec:	814a      	strh	r2, [r1, #10]
   daeee:	718c      	strb	r4, [r1, #6]
   daef0:	810b      	strh	r3, [r1, #8]
                    break;
   daef2:	e7ec      	b.n	daece <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
   daef4:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
   daef6:	810b      	strh	r3, [r1, #8]
   daef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   daefc:	718a      	strb	r2, [r1, #6]
   daefe:	814b      	strh	r3, [r1, #10]
                    break;
   daf00:	e7e5      	b.n	daece <_ZN17SystemSleepResult13toSleepResultEv+0xc>
	...

000daf04 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   daf04:	b538      	push	{r3, r4, r5, lr}
   daf06:	460c      	mov	r4, r1
   daf08:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   daf0a:	f7ff ffbb 	bl	dae84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   daf0e:	b144      	cbz	r4, daf22 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   daf10:	8820      	ldrh	r0, [r4, #0]
   daf12:	f7fd faf9 	bl	d8508 <malloc>
   daf16:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   daf18:	b128      	cbz	r0, daf26 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   daf1a:	8822      	ldrh	r2, [r4, #0]
   daf1c:	4621      	mov	r1, r4
   daf1e:	f001 fd11 	bl	dc944 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   daf22:	2000      	movs	r0, #0
    }
   daf24:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   daf26:	4801      	ldr	r0, [pc, #4]	; (daf2c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   daf28:	e7fc      	b.n	daf24 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   daf2a:	bf00      	nop
   daf2c:	fffffefc 	.word	0xfffffefc

000daf30 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   daf30:	b507      	push	{r0, r1, r2, lr}
   daf32:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   daf34:	2100      	movs	r1, #0
{
   daf36:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   daf38:	9100      	str	r1, [sp, #0]
   daf3a:	2001      	movs	r0, #1
   daf3c:	218c      	movs	r1, #140	; 0x8c
   daf3e:	f7fd fa09 	bl	d8354 <system_reset>
}
   daf42:	b003      	add	sp, #12
   daf44:	f85d fb04 	ldr.w	pc, [sp], #4

000daf48 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   daf48:	4601      	mov	r1, r0
    reset(0, flags);
   daf4a:	2000      	movs	r0, #0
   daf4c:	f7ff bff0 	b.w	daf30 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000daf50 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   daf50:	2000      	movs	r0, #0
   daf52:	f7ff bff9 	b.w	daf48 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000daf58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   daf58:	b5f0      	push	{r4, r5, r6, r7, lr}
   daf5a:	4d2d      	ldr	r5, [pc, #180]	; (db010 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   daf5c:	7d0b      	ldrb	r3, [r1, #20]
   daf5e:	4604      	mov	r4, r0
   daf60:	b08b      	sub	sp, #44	; 0x2c
   daf62:	4608      	mov	r0, r1
   daf64:	1daf      	adds	r7, r5, #6
   daf66:	2b00      	cmp	r3, #0
   daf68:	d038      	beq.n	dafdc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   daf6a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   daf6c:	791b      	ldrb	r3, [r3, #4]
   daf6e:	2b00      	cmp	r3, #0
   daf70:	d034      	beq.n	dafdc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   daf72:	2200      	movs	r2, #0
    SleepResult() {}
   daf74:	4b27      	ldr	r3, [pc, #156]	; (db014 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   daf76:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   daf78:	a902      	add	r1, sp, #8
   daf7a:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   daf7c:	9202      	str	r2, [sp, #8]
   daf7e:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   daf82:	f88d 200e 	strb.w	r2, [sp, #14]
   daf86:	f7fd f9db 	bl	d8340 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   daf8a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   daf8e:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   daf92:	b200      	sxth	r0, r0
   daf94:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   daf98:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   daf9c:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   daf9e:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   dafa0:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dafa2:	4628      	mov	r0, r5
   dafa4:	f7ff ffae 	bl	daf04 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   dafa8:	a802      	add	r0, sp, #8
   dafaa:	f7ff ff6b 	bl	dae84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   dafae:	2300      	movs	r3, #0
   dafb0:	6023      	str	r3, [r4, #0]
   dafb2:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   dafb4:	71a3      	strb	r3, [r4, #6]
   dafb6:	8123      	strh	r3, [r4, #8]
   dafb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   dafbc:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   dafbe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   dafc2:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   dafc4:	683b      	ldr	r3, [r7, #0]
   dafc6:	f8c4 3006 	str.w	r3, [r4, #6]
   dafca:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   dafcc:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   dafce:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   dafd0:	4620      	mov	r0, r4
   dafd2:	f7ff ff97 	bl	daf04 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   dafd6:	4620      	mov	r0, r4
   dafd8:	b00b      	add	sp, #44	; 0x2c
   dafda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   dafdc:	2600      	movs	r6, #0
   dafde:	2320      	movs	r3, #32
   dafe0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   dafe4:	4b0c      	ldr	r3, [pc, #48]	; (db018 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   dafe6:	9300      	str	r3, [sp, #0]
   dafe8:	490c      	ldr	r1, [pc, #48]	; (db01c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   dafea:	4633      	mov	r3, r6
   dafec:	aa02      	add	r2, sp, #8
   dafee:	2032      	movs	r0, #50	; 0x32
   daff0:	f7fd f90e 	bl	d8210 <log_message>
    SleepResult() {}
   daff4:	4b07      	ldr	r3, [pc, #28]	; (db014 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   daff6:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   daff8:	a902      	add	r1, sp, #8
        error_ = error;
   daffa:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   daffe:	4804      	ldr	r0, [pc, #16]	; (db010 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   db000:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   db002:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   db006:	f8ad 300c 	strh.w	r3, [sp, #12]
   db00a:	f7ff ff44 	bl	dae96 <_ZN17SystemSleepResultaSEOS_>
   db00e:	e7cb      	b.n	dafa8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   db010:	2003e620 	.word	0x2003e620
   db014:	ffff0000 	.word	0xffff0000
   db018:	000dd893 	.word	0x000dd893
   db01c:	000dd88c 	.word	0x000dd88c

000db020 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   db020:	b530      	push	{r4, r5, lr}
   db022:	4604      	mov	r4, r0
   db024:	b085      	sub	sp, #20
   db026:	4608      	mov	r0, r1
   db028:	4611      	mov	r1, r2
   db02a:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   db02c:	2300      	movs	r3, #0
   db02e:	f7fd f931 	bl	d8294 <system_sleep>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
   db032:	4d0d      	ldr	r5, [pc, #52]	; (db068 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   db034:	f8ad 000c 	strh.w	r0, [sp, #12]
              compatResult_(r) {
   db038:	2300      	movs	r3, #0
   db03a:	a901      	add	r1, sp, #4
   db03c:	9301      	str	r3, [sp, #4]
   db03e:	f8ad 3008 	strh.w	r3, [sp, #8]
   db042:	f88d 300a 	strb.w	r3, [sp, #10]
   db046:	4628      	mov	r0, r5
   db048:	f64f 73ff 	movw	r3, #65535	; 0xffff
   db04c:	f8ad 300e 	strh.w	r3, [sp, #14]
   db050:	f7ff ff21 	bl	dae96 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
   db054:	a801      	add	r0, sp, #4
   db056:	f7ff ff15 	bl	dae84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
   db05a:	4620      	mov	r0, r4
   db05c:	4629      	mov	r1, r5
   db05e:	f7ff ff30 	bl	daec2 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
   db062:	4620      	mov	r0, r4
   db064:	b005      	add	sp, #20
   db066:	bd30      	pop	{r4, r5, pc}
   db068:	2003e620 	.word	0x2003e620

000db06c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   db06c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   db06e:	4b09      	ldr	r3, [pc, #36]	; (db094 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   db070:	4c09      	ldr	r4, [pc, #36]	; (db098 <_GLOBAL__sub_I_System+0x2c>)
   db072:	2202      	movs	r2, #2
   db074:	2000      	movs	r0, #0
   db076:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   db078:	4b08      	ldr	r3, [pc, #32]	; (db09c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   db07a:	6020      	str	r0, [r4, #0]
   db07c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   db07e:	71a0      	strb	r0, [r4, #6]
   db080:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   db082:	f7fd f8f7 	bl	d8274 <set_system_mode>
SystemClass System;
   db086:	4620      	mov	r0, r4
   db088:	4a05      	ldr	r2, [pc, #20]	; (db0a0 <_GLOBAL__sub_I_System+0x34>)
   db08a:	4906      	ldr	r1, [pc, #24]	; (db0a4 <_GLOBAL__sub_I_System+0x38>)
   db08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   db090:	f000 bd44 	b.w	dbb1c <__aeabi_atexit>
   db094:	2003e62c 	.word	0x2003e62c
   db098:	2003e620 	.word	0x2003e620
   db09c:	ffff0000 	.word	0xffff0000
   db0a0:	2003e300 	.word	0x2003e300
   db0a4:	000d4329 	.word	0x000d4329

000db0a8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   db0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   db0ac:	4a15      	ldr	r2, [pc, #84]	; (db104 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   db0ae:	f8df 8060 	ldr.w	r8, [pc, #96]	; db110 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   db0b2:	e9d2 3200 	ldrd	r3, r2, [r2]
   db0b6:	18c0      	adds	r0, r0, r3
   db0b8:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   db0bc:	4a12      	ldr	r2, [pc, #72]	; (db108 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   db0be:	e9d2 3200 	ldrd	r3, r2, [r2]
   db0c2:	18c6      	adds	r6, r0, r3
   db0c4:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   db0c8:	e9d8 2300 	ldrd	r2, r3, [r8]
   db0cc:	42bb      	cmp	r3, r7
   db0ce:	bf08      	it	eq
   db0d0:	42b2      	cmpeq	r2, r6
{
   db0d2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   db0d4:	d013      	beq.n	db0fe <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   db0d6:	a903      	add	r1, sp, #12
   db0d8:	4668      	mov	r0, sp
   db0da:	e9cd 6700 	strd	r6, r7, [sp]
   db0de:	f7fd fa63 	bl	d85a8 <localtime_r>
	calendar_time.tm_year += 1900;
   db0e2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db0e4:	4d09      	ldr	r5, [pc, #36]	; (db10c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   db0e6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db0ea:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   db0ec:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db0ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db0f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   db0f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db0f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   db0f6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   db0fa:	6823      	ldr	r3, [r4, #0]
   db0fc:	602b      	str	r3, [r5, #0]
    }
}
   db0fe:	b00c      	add	sp, #48	; 0x30
   db100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db104:	2003e668 	.word	0x2003e668
   db108:	2003e660 	.word	0x2003e660
   db10c:	2003e638 	.word	0x2003e638
   db110:	2003e670 	.word	0x2003e670

000db114 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   db114:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   db116:	2000      	movs	r0, #0
   db118:	f7fd f96e 	bl	d83f8 <spark_sync_time_pending>
   db11c:	b128      	cbz	r0, db12a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   db11e:	f7fd f943 	bl	d83a8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   db122:	f080 0001 	eor.w	r0, r0, #1
   db126:	b2c0      	uxtb	r0, r0
    }
   db128:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   db12a:	2001      	movs	r0, #1
   db12c:	e7fc      	b.n	db128 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000db130 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   db130:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db132:	f7ff ffb9 	bl	db0a8 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   db136:	4b01      	ldr	r3, [pc, #4]	; (db13c <_ZN9TimeClass4hourEx+0xc>)
   db138:	6898      	ldr	r0, [r3, #8]
   db13a:	bd08      	pop	{r3, pc}
   db13c:	2003e638 	.word	0x2003e638

000db140 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   db140:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db142:	f7ff ffb1 	bl	db0a8 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   db146:	4b01      	ldr	r3, [pc, #4]	; (db14c <_ZN9TimeClass3dayEx+0xc>)
   db148:	68d8      	ldr	r0, [r3, #12]
   db14a:	bd08      	pop	{r3, pc}
   db14c:	2003e638 	.word	0x2003e638

000db150 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   db150:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db152:	f7ff ffa9 	bl	db0a8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   db156:	4b02      	ldr	r3, [pc, #8]	; (db160 <_ZN9TimeClass7weekdayEx+0x10>)
   db158:	6998      	ldr	r0, [r3, #24]
}
   db15a:	3001      	adds	r0, #1
   db15c:	bd08      	pop	{r3, pc}
   db15e:	bf00      	nop
   db160:	2003e638 	.word	0x2003e638

000db164 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   db164:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   db166:	f7ff ff9f 	bl	db0a8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   db16a:	4b02      	ldr	r3, [pc, #8]	; (db174 <_ZN9TimeClass5monthEx+0x10>)
   db16c:	6918      	ldr	r0, [r3, #16]
}
   db16e:	3001      	adds	r0, #1
   db170:	bd08      	pop	{r3, pc}
   db172:	bf00      	nop
   db174:	2003e638 	.word	0x2003e638

000db178 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   db178:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   db17c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   db180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   db184:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   db186:	d411      	bmi.n	db1ac <_ZN9TimeClass4zoneEf+0x34>
   db188:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   db18c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   db190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db194:	dc0a      	bgt.n	db1ac <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   db196:	eddf 7a06 	vldr	s15, [pc, #24]	; db1b0 <_ZN9TimeClass4zoneEf+0x38>
   db19a:	ee60 7a27 	vmul.f32	s15, s0, s15
   db19e:	ee17 0a90 	vmov	r0, s15
   db1a2:	f001 f9cf 	bl	dc544 <__aeabi_f2lz>
   db1a6:	4b03      	ldr	r3, [pc, #12]	; (db1b4 <_ZN9TimeClass4zoneEf+0x3c>)
   db1a8:	e9c3 0100 	strd	r0, r1, [r3]
}
   db1ac:	bd08      	pop	{r3, pc}
   db1ae:	bf00      	nop
   db1b0:	45610000 	.word	0x45610000
   db1b4:	2003e668 	.word	0x2003e668

000db1b8 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   db1b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   db1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   db1c0:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   db1c2:	d411      	bmi.n	db1e8 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   db1c4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   db1c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   db1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   db1d0:	dc0a      	bgt.n	db1e8 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   db1d2:	eddf 7a06 	vldr	s15, [pc, #24]	; db1ec <_ZN9TimeClass12setDSTOffsetEf+0x34>
   db1d6:	ee60 7a27 	vmul.f32	s15, s0, s15
   db1da:	ee17 0a90 	vmov	r0, s15
   db1de:	f001 f9b1 	bl	dc544 <__aeabi_f2lz>
   db1e2:	4b03      	ldr	r3, [pc, #12]	; (db1f0 <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   db1e4:	e9c3 0100 	strd	r0, r1, [r3]
}
   db1e8:	bd08      	pop	{r3, pc}
   db1ea:	bf00      	nop
   db1ec:	45610000 	.word	0x45610000
   db1f0:	2003e290 	.word	0x2003e290

000db1f4 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   db1f4:	4b03      	ldr	r3, [pc, #12]	; (db204 <_ZN9TimeClass8beginDSTEv+0x10>)
   db1f6:	e9d3 0100 	ldrd	r0, r1, [r3]
   db1fa:	4b03      	ldr	r3, [pc, #12]	; (db208 <_ZN9TimeClass8beginDSTEv+0x14>)
   db1fc:	e9c3 0100 	strd	r0, r1, [r3]
}
   db200:	4770      	bx	lr
   db202:	bf00      	nop
   db204:	2003e290 	.word	0x2003e290
   db208:	2003e660 	.word	0x2003e660

000db20c <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   db20c:	4b02      	ldr	r3, [pc, #8]	; (db218 <_ZN9TimeClass6endDSTEv+0xc>)
   db20e:	2000      	movs	r0, #0
   db210:	2100      	movs	r1, #0
   db212:	e9c3 0100 	strd	r0, r1, [r3]
}
   db216:	4770      	bx	lr
   db218:	2003e660 	.word	0x2003e660

000db21c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   db21c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   db21e:	4602      	mov	r2, r0
   db220:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   db222:	4668      	mov	r0, sp
    struct timeval tv = {
   db224:	2100      	movs	r1, #0
    };
   db226:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   db22a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   db22e:	f7fc fe77 	bl	d7f20 <hal_rtc_set_time>
   db232:	4602      	mov	r2, r0
   db234:	b910      	cbnz	r0, db23c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   db236:	4601      	mov	r1, r0
   db238:	f7fd f85c 	bl	d82f4 <system_notify_time_changed>
    }
}
   db23c:	b005      	add	sp, #20
   db23e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db244 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   db244:	b530      	push	{r4, r5, lr}
   db246:	4604      	mov	r4, r0
    t += time_zone_cache;
   db248:	4818      	ldr	r0, [pc, #96]	; (db2ac <_ZN9TimeClass7timeStrEx+0x68>)
   db24a:	e9d0 1000 	ldrd	r1, r0, [r0]
   db24e:	1852      	adds	r2, r2, r1
   db250:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   db254:	4816      	ldr	r0, [pc, #88]	; (db2b0 <_ZN9TimeClass7timeStrEx+0x6c>)
   db256:	e9d0 1000 	ldrd	r1, r0, [r0]
   db25a:	1852      	adds	r2, r2, r1
{
   db25c:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   db25e:	eb40 0303 	adc.w	r3, r0, r3
   db262:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   db266:	2224      	movs	r2, #36	; 0x24
   db268:	eb0d 0002 	add.w	r0, sp, r2
   db26c:	2100      	movs	r1, #0
   db26e:	f001 fb91 	bl	dc994 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   db272:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   db274:	a909      	add	r1, sp, #36	; 0x24
   db276:	4668      	mov	r0, sp
   db278:	f7fd f996 	bl	d85a8 <localtime_r>
    char ascstr[26] = {};
   db27c:	2216      	movs	r2, #22
   db27e:	4629      	mov	r1, r5
   db280:	a803      	add	r0, sp, #12
   db282:	9502      	str	r5, [sp, #8]
   db284:	f001 fb86 	bl	dc994 <memset>
    asctime_r(&calendar_time, ascstr);
   db288:	a902      	add	r1, sp, #8
   db28a:	a809      	add	r0, sp, #36	; 0x24
   db28c:	f001 fb10 	bl	dc8b0 <asctime_r>
    int len = strlen(ascstr);
   db290:	a802      	add	r0, sp, #8
   db292:	f001 fbf2 	bl	dca7a <strlen>
    ascstr[len-1] = 0; // remove final newline
   db296:	ab12      	add	r3, sp, #72	; 0x48
   db298:	4418      	add	r0, r3
    return String(ascstr);
   db29a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   db29c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   db2a0:	4620      	mov	r0, r4
   db2a2:	f7ff fce2 	bl	dac6a <_ZN6StringC1EPKc>
}
   db2a6:	4620      	mov	r0, r4
   db2a8:	b013      	add	sp, #76	; 0x4c
   db2aa:	bd30      	pop	{r4, r5, pc}
   db2ac:	2003e668 	.word	0x2003e668
   db2b0:	2003e660 	.word	0x2003e660

000db2b4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db2b8:	b0a5      	sub	sp, #148	; 0x94
   db2ba:	4607      	mov	r7, r0
   db2bc:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db2be:	a814      	add	r0, sp, #80	; 0x50
{
   db2c0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db2c2:	223f      	movs	r2, #63	; 0x3f
{
   db2c4:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db2c6:	f001 fbf2 	bl	dcaae <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   db2ca:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   db2cc:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   db2ce:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   db2d2:	f001 fbd2 	bl	dca7a <strlen>
   db2d6:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   db2d8:	bb5d      	cbnz	r5, db332 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   db2da:	492a      	ldr	r1, [pc, #168]	; (db384 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   db2dc:	a803      	add	r0, sp, #12
   db2de:	f001 fba6 	bl	dca2e <strcpy>
   db2e2:	ae14      	add	r6, sp, #80	; 0x50
{
   db2e4:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   db2e6:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   db2ea:	45ab      	cmp	fp, r5
   db2ec:	d936      	bls.n	db35c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   db2ee:	46b1      	mov	r9, r6
   db2f0:	f105 0a01 	add.w	sl, r5, #1
   db2f4:	f819 3b01 	ldrb.w	r3, [r9], #1
   db2f8:	2b25      	cmp	r3, #37	; 0x25
   db2fa:	d117      	bne.n	db32c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   db2fc:	7873      	ldrb	r3, [r6, #1]
   db2fe:	2b7a      	cmp	r3, #122	; 0x7a
   db300:	d114      	bne.n	db32c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   db302:	a803      	add	r0, sp, #12
   db304:	f001 fbb9 	bl	dca7a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   db308:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   db30a:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   db30c:	1828      	adds	r0, r5, r0
   db30e:	4418      	add	r0, r3
   db310:	ebab 0205 	sub.w	r2, fp, r5
   db314:	1cb1      	adds	r1, r6, #2
   db316:	f001 fb15 	bl	dc944 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   db31a:	4622      	mov	r2, r4
   db31c:	a903      	add	r1, sp, #12
   db31e:	4630      	mov	r0, r6
   db320:	f001 fb10 	bl	dc944 <memcpy>
            len = strlen(format_str);
   db324:	a814      	add	r0, sp, #80	; 0x50
   db326:	f001 fba8 	bl	dca7a <strlen>
   db32a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   db32c:	464e      	mov	r6, r9
   db32e:	4655      	mov	r5, sl
   db330:	e7d9      	b.n	db2e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   db332:	213c      	movs	r1, #60	; 0x3c
   db334:	fb95 f3f1 	sdiv	r3, r5, r1
   db338:	2b00      	cmp	r3, #0
   db33a:	bfb8      	it	lt
   db33c:	425b      	neglt	r3, r3
   db33e:	fbb3 f2f1 	udiv	r2, r3, r1
   db342:	fb01 3312 	mls	r3, r1, r2, r3
   db346:	9300      	str	r3, [sp, #0]
   db348:	4a0f      	ldr	r2, [pc, #60]	; (db388 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   db34a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db34e:	2110      	movs	r1, #16
   db350:	a803      	add	r0, sp, #12
   db352:	fb95 f3f3 	sdiv	r3, r5, r3
   db356:	f7fd f8f7 	bl	d8548 <snprintf>
   db35a:	e7c2      	b.n	db2e2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   db35c:	2100      	movs	r1, #0
   db35e:	222e      	movs	r2, #46	; 0x2e
   db360:	a808      	add	r0, sp, #32
   db362:	9107      	str	r1, [sp, #28]
   db364:	f001 fb16 	bl	dc994 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   db368:	4643      	mov	r3, r8
   db36a:	aa14      	add	r2, sp, #80	; 0x50
   db36c:	2132      	movs	r1, #50	; 0x32
   db36e:	a807      	add	r0, sp, #28
   db370:	f7fd f912 	bl	d8598 <strftime>
    return String(buf);
   db374:	a907      	add	r1, sp, #28
   db376:	4638      	mov	r0, r7
   db378:	f7ff fc77 	bl	dac6a <_ZN6StringC1EPKc>
}
   db37c:	4638      	mov	r0, r7
   db37e:	b025      	add	sp, #148	; 0x94
   db380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db384:	000dd1af 	.word	0x000dd1af
   db388:	000dd8ba 	.word	0x000dd8ba

000db38c <_ZN9TimeClass6formatExPKc>:
{
   db38c:	b5f0      	push	{r4, r5, r6, r7, lr}
   db38e:	b08d      	sub	sp, #52	; 0x34
   db390:	e9cd 2300 	strd	r2, r3, [sp]
   db394:	9d12      	ldr	r5, [sp, #72]	; 0x48
   db396:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   db398:	b915      	cbnz	r5, db3a0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   db39a:	4b19      	ldr	r3, [pc, #100]	; (db400 <_ZN9TimeClass6formatExPKc+0x74>)
   db39c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   db39e:	b12d      	cbz	r5, db3ac <_ZN9TimeClass6formatExPKc+0x20>
   db3a0:	4b18      	ldr	r3, [pc, #96]	; (db404 <_ZN9TimeClass6formatExPKc+0x78>)
   db3a2:	4628      	mov	r0, r5
   db3a4:	6819      	ldr	r1, [r3, #0]
   db3a6:	f001 fb38 	bl	dca1a <strcmp>
   db3aa:	b938      	cbnz	r0, db3bc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   db3ac:	e9dd 2300 	ldrd	r2, r3, [sp]
   db3b0:	4620      	mov	r0, r4
   db3b2:	f7ff ff47 	bl	db244 <_ZN9TimeClass7timeStrEx>
}
   db3b6:	4620      	mov	r0, r4
   db3b8:	b00d      	add	sp, #52	; 0x34
   db3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   db3bc:	4e12      	ldr	r6, [pc, #72]	; (db408 <_ZN9TimeClass6formatExPKc+0x7c>)
   db3be:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   db3c0:	4f12      	ldr	r7, [pc, #72]	; (db40c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   db3c2:	e9d6 3200 	ldrd	r3, r2, [r6]
   db3c6:	185b      	adds	r3, r3, r1
   db3c8:	9901      	ldr	r1, [sp, #4]
   db3ca:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   db3ce:	e9d7 0100 	ldrd	r0, r1, [r7]
   db3d2:	181b      	adds	r3, r3, r0
   db3d4:	eb41 0202 	adc.w	r2, r1, r2
   db3d8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   db3dc:	2100      	movs	r1, #0
   db3de:	2224      	movs	r2, #36	; 0x24
   db3e0:	a803      	add	r0, sp, #12
   db3e2:	f001 fad7 	bl	dc994 <memset>
    localtime_r(&t, &calendar_time);
   db3e6:	a903      	add	r1, sp, #12
   db3e8:	4668      	mov	r0, sp
   db3ea:	f7fd f8dd 	bl	d85a8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   db3ee:	6832      	ldr	r2, [r6, #0]
   db3f0:	683b      	ldr	r3, [r7, #0]
   db3f2:	a903      	add	r1, sp, #12
   db3f4:	4413      	add	r3, r2
   db3f6:	4620      	mov	r0, r4
   db3f8:	462a      	mov	r2, r5
   db3fa:	f7ff ff5b 	bl	db2b4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   db3fe:	e7da      	b.n	db3b6 <_ZN9TimeClass6formatExPKc+0x2a>
   db400:	2003e634 	.word	0x2003e634
   db404:	2003e28c 	.word	0x2003e28c
   db408:	2003e668 	.word	0x2003e668
   db40c:	2003e660 	.word	0x2003e660

000db410 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   db410:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   db412:	2000      	movs	r0, #0
   db414:	f7fc fd6c 	bl	d7ef0 <hal_rtc_time_is_valid>
    if (rtcstate)
   db418:	4604      	mov	r4, r0
   db41a:	b9a0      	cbnz	r0, db446 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   db41c:	f7fc ff22 	bl	d8264 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   db420:	2801      	cmp	r0, #1
   db422:	d110      	bne.n	db446 <_ZN9TimeClass7isValidEv+0x36>
   db424:	4620      	mov	r0, r4
   db426:	f7fc ff5d 	bl	d82e4 <system_thread_get_state>
   db42a:	b960      	cbnz	r0, db446 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   db42c:	f7ff fe72 	bl	db114 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   db430:	b910      	cbnz	r0, db438 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   db432:	f7fc ffa9 	bl	d8388 <spark_process>
        while (_while() && !_condition()) {
   db436:	e7f9      	b.n	db42c <_ZN9TimeClass7isValidEv+0x1c>
   db438:	f7ff fe6c 	bl	db114 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   db43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   db440:	2000      	movs	r0, #0
   db442:	f7fc bd55 	b.w	d7ef0 <hal_rtc_time_is_valid>
}
   db446:	4620      	mov	r0, r4
   db448:	bd10      	pop	{r4, pc}

000db44a <_ZN9TimeClass3nowEv>:
{
   db44a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   db44c:	f7ff ffe0 	bl	db410 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   db450:	2210      	movs	r2, #16
   db452:	2100      	movs	r1, #0
   db454:	4668      	mov	r0, sp
   db456:	f001 fa9d 	bl	dc994 <memset>
    hal_rtc_get_time(&tv, nullptr);
   db45a:	2100      	movs	r1, #0
   db45c:	4668      	mov	r0, sp
   db45e:	f7fc fd57 	bl	d7f10 <hal_rtc_get_time>
}
   db462:	9800      	ldr	r0, [sp, #0]
   db464:	b005      	add	sp, #20
   db466:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db46c <_ZN9TimeClass4hourEv>:
{
   db46c:	b508      	push	{r3, lr}
	return hour(now());
   db46e:	f7ff ffec 	bl	db44a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db472:	17c1      	asrs	r1, r0, #31
   db474:	f7ff fe18 	bl	db0a8 <_ZL22Refresh_UnixTime_Cachex>
}
   db478:	4b01      	ldr	r3, [pc, #4]	; (db480 <_ZN9TimeClass4hourEv+0x14>)
   db47a:	6898      	ldr	r0, [r3, #8]
   db47c:	bd08      	pop	{r3, pc}
   db47e:	bf00      	nop
   db480:	2003e638 	.word	0x2003e638

000db484 <_ZN9TimeClass6minuteEv>:
{
   db484:	b508      	push	{r3, lr}
	return minute(now());
   db486:	f7ff ffe0 	bl	db44a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db48a:	17c1      	asrs	r1, r0, #31
   db48c:	f7ff fe0c 	bl	db0a8 <_ZL22Refresh_UnixTime_Cachex>
}
   db490:	4b01      	ldr	r3, [pc, #4]	; (db498 <_ZN9TimeClass6minuteEv+0x14>)
   db492:	6858      	ldr	r0, [r3, #4]
   db494:	bd08      	pop	{r3, pc}
   db496:	bf00      	nop
   db498:	2003e638 	.word	0x2003e638

000db49c <_ZN9TimeClass3dayEv>:
{
   db49c:	b508      	push	{r3, lr}
	return day(now());
   db49e:	f7ff ffd4 	bl	db44a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   db4a2:	17c1      	asrs	r1, r0, #31
   db4a4:	f7ff fe00 	bl	db0a8 <_ZL22Refresh_UnixTime_Cachex>
}
   db4a8:	4b01      	ldr	r3, [pc, #4]	; (db4b0 <_ZN9TimeClass3dayEv+0x14>)
   db4aa:	68d8      	ldr	r0, [r3, #12]
   db4ac:	bd08      	pop	{r3, pc}
   db4ae:	bf00      	nop
   db4b0:	2003e638 	.word	0x2003e638

000db4b4 <_ZN9TimeClass7weekdayEv>:
{
   db4b4:	b508      	push	{r3, lr}
	return weekday(now());
   db4b6:	f7ff ffc8 	bl	db44a <_ZN9TimeClass3nowEv>
}
   db4ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   db4be:	17c1      	asrs	r1, r0, #31
   db4c0:	f7ff be46 	b.w	db150 <_ZN9TimeClass7weekdayEx>

000db4c4 <_ZN9TimeClass5monthEv>:
{
   db4c4:	b508      	push	{r3, lr}
	return month(now());
   db4c6:	f7ff ffc0 	bl	db44a <_ZN9TimeClass3nowEv>
}
   db4ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   db4ce:	17c1      	asrs	r1, r0, #31
   db4d0:	f7ff be48 	b.w	db164 <_ZN9TimeClass5monthEx>

000db4d4 <_ZN9TimeClass5localEv>:
{
   db4d4:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   db4d6:	f7ff ffb8 	bl	db44a <_ZN9TimeClass3nowEv>
   db4da:	4b03      	ldr	r3, [pc, #12]	; (db4e8 <_ZN9TimeClass5localEv+0x14>)
   db4dc:	4a03      	ldr	r2, [pc, #12]	; (db4ec <_ZN9TimeClass5localEv+0x18>)
   db4de:	681b      	ldr	r3, [r3, #0]
   db4e0:	6812      	ldr	r2, [r2, #0]
   db4e2:	4413      	add	r3, r2
}
   db4e4:	4418      	add	r0, r3
   db4e6:	bd08      	pop	{r3, pc}
   db4e8:	2003e668 	.word	0x2003e668
   db4ec:	2003e660 	.word	0x2003e660

000db4f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   db4f0:	4b02      	ldr	r3, [pc, #8]	; (db4fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   db4f2:	681a      	ldr	r2, [r3, #0]
   db4f4:	4b02      	ldr	r3, [pc, #8]	; (db500 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   db4f6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   db4f8:	4770      	bx	lr
   db4fa:	bf00      	nop
   db4fc:	2003e28c 	.word	0x2003e28c
   db500:	2003e634 	.word	0x2003e634

000db504 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   db504:	4770      	bx	lr

000db506 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db506:	7441      	strb	r1, [r0, #17]
}
   db508:	4770      	bx	lr

000db50a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   db50a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   db50c:	7c00      	ldrb	r0, [r0, #16]
   db50e:	f7fc fe27 	bl	d8160 <hal_usart_available_data_for_write>
}
   db512:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db516:	bd08      	pop	{r3, pc}

000db518 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   db518:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   db51a:	7c00      	ldrb	r0, [r0, #16]
   db51c:	f7fc fdf8 	bl	d8110 <hal_usart_available>
}
   db520:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db524:	bd08      	pop	{r3, pc}

000db526 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   db526:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   db528:	7c00      	ldrb	r0, [r0, #16]
   db52a:	f7fc fe01 	bl	d8130 <hal_usart_peek>
}
   db52e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db532:	bd08      	pop	{r3, pc}

000db534 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   db534:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   db536:	7c00      	ldrb	r0, [r0, #16]
   db538:	f7fc fdf2 	bl	d8120 <hal_usart_read>
}
   db53c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db540:	bd08      	pop	{r3, pc}

000db542 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   db542:	7c00      	ldrb	r0, [r0, #16]
   db544:	f7fc bdfc 	b.w	d8140 <hal_usart_flush>

000db548 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db548:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db54a:	7c45      	ldrb	r5, [r0, #17]
{
   db54c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db54e:	b12d      	cbz	r5, db55c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   db550:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db552:	b003      	add	sp, #12
   db554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   db558:	f7fc bdd2 	b.w	d8100 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db55c:	7c00      	ldrb	r0, [r0, #16]
   db55e:	9101      	str	r1, [sp, #4]
   db560:	f7fc fdfe 	bl	d8160 <hal_usart_available_data_for_write>
   db564:	2800      	cmp	r0, #0
   db566:	9901      	ldr	r1, [sp, #4]
   db568:	dcf2      	bgt.n	db550 <_ZN11USARTSerial5writeEh+0x8>
}
   db56a:	4628      	mov	r0, r5
   db56c:	b003      	add	sp, #12
   db56e:	bd30      	pop	{r4, r5, pc}

000db570 <_ZN11USARTSerialD0Ev>:
   db570:	b510      	push	{r4, lr}
   db572:	2114      	movs	r1, #20
   db574:	4604      	mov	r4, r0
   db576:	f000 fad6 	bl	dbb26 <_ZdlPvj>
   db57a:	4620      	mov	r0, r4
   db57c:	bd10      	pop	{r4, pc}
	...

000db580 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db580:	b510      	push	{r4, lr}
   db582:	f04f 0c00 	mov.w	ip, #0
   db586:	4604      	mov	r4, r0
   db588:	4608      	mov	r0, r1
   db58a:	4611      	mov	r1, r2
   db58c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db590:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db594:	4a04      	ldr	r2, [pc, #16]	; (db5a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db596:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db598:	2201      	movs	r2, #1
  _serial = serial;
   db59a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db59c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db59e:	461a      	mov	r2, r3
   db5a0:	f7fc fd9e 	bl	d80e0 <hal_usart_init>
}
   db5a4:	4620      	mov	r0, r4
   db5a6:	bd10      	pop	{r4, pc}
   db5a8:	000dd8ec 	.word	0x000dd8ec

000db5ac <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   db5ac:	7c00      	ldrb	r0, [r0, #16]
   db5ae:	2300      	movs	r3, #0
   db5b0:	f7fc bdde 	b.w	d8170 <hal_usart_begin_config>

000db5b4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   db5b4:	2200      	movs	r2, #0
   db5b6:	f7ff bff9 	b.w	db5ac <_ZN11USARTSerial5beginEmm>

000db5ba <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   db5ba:	7c00      	ldrb	r0, [r0, #16]
   db5bc:	f7fc bd98 	b.w	d80f0 <hal_usart_end>

000db5c0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db5c0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db5c2:	4c0e      	ldr	r4, [pc, #56]	; (db5fc <_Z22__fetch_global_Serial1v+0x3c>)
   db5c4:	7821      	ldrb	r1, [r4, #0]
   db5c6:	f3bf 8f5b 	dmb	ish
   db5ca:	f011 0101 	ands.w	r1, r1, #1
   db5ce:	d112      	bne.n	db5f6 <_Z22__fetch_global_Serial1v+0x36>
   db5d0:	4620      	mov	r0, r4
   db5d2:	9101      	str	r1, [sp, #4]
   db5d4:	f7f8 fd70 	bl	d40b8 <__cxa_guard_acquire>
   db5d8:	9901      	ldr	r1, [sp, #4]
   db5da:	b160      	cbz	r0, db5f6 <_Z22__fetch_global_Serial1v+0x36>
   db5dc:	4a08      	ldr	r2, [pc, #32]	; (db600 <_Z22__fetch_global_Serial1v+0x40>)
   db5de:	4b09      	ldr	r3, [pc, #36]	; (db604 <_Z22__fetch_global_Serial1v+0x44>)
   db5e0:	4809      	ldr	r0, [pc, #36]	; (db608 <_Z22__fetch_global_Serial1v+0x48>)
   db5e2:	f7ff ffcd 	bl	db580 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db5e6:	4620      	mov	r0, r4
   db5e8:	f7f8 fd6b 	bl	d40c2 <__cxa_guard_release>
   db5ec:	4a07      	ldr	r2, [pc, #28]	; (db60c <_Z22__fetch_global_Serial1v+0x4c>)
   db5ee:	4908      	ldr	r1, [pc, #32]	; (db610 <_Z22__fetch_global_Serial1v+0x50>)
   db5f0:	4805      	ldr	r0, [pc, #20]	; (db608 <_Z22__fetch_global_Serial1v+0x48>)
   db5f2:	f000 fa93 	bl	dbb1c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db5f6:	4804      	ldr	r0, [pc, #16]	; (db608 <_Z22__fetch_global_Serial1v+0x48>)
   db5f8:	b002      	add	sp, #8
   db5fa:	bd10      	pop	{r4, pc}
   db5fc:	2003e678 	.word	0x2003e678
   db600:	2003e67c 	.word	0x2003e67c
   db604:	2003e700 	.word	0x2003e700
   db608:	2003e784 	.word	0x2003e784
   db60c:	2003e300 	.word	0x2003e300
   db610:	000db505 	.word	0x000db505

000db614 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db614:	7441      	strb	r1, [r0, #17]
}
   db616:	4770      	bx	lr

000db618 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db618:	4770      	bx	lr

000db61a <_ZN9USBSerial4readEv>:
{
   db61a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db61c:	2100      	movs	r1, #0
   db61e:	7c00      	ldrb	r0, [r0, #16]
   db620:	f7fc fdd6 	bl	d81d0 <HAL_USB_USART_Receive_Data>
}
   db624:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db628:	bd08      	pop	{r3, pc}

000db62a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   db62a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db62c:	2101      	movs	r1, #1
   db62e:	7c00      	ldrb	r0, [r0, #16]
   db630:	f7fc fdce 	bl	d81d0 <HAL_USB_USART_Receive_Data>
}
   db634:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db638:	bd08      	pop	{r3, pc}

000db63a <_ZN9USBSerial17availableForWriteEv>:
{
   db63a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db63c:	7c00      	ldrb	r0, [r0, #16]
   db63e:	f7fc fdbf 	bl	d81c0 <HAL_USB_USART_Available_Data_For_Write>
}
   db642:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db646:	bd08      	pop	{r3, pc}

000db648 <_ZN9USBSerial9availableEv>:
{
   db648:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db64a:	7c00      	ldrb	r0, [r0, #16]
   db64c:	f7fc fdb0 	bl	d81b0 <HAL_USB_USART_Available_Data>
}
   db650:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db654:	bd08      	pop	{r3, pc}

000db656 <_ZN9USBSerial5writeEh>:
{
   db656:	b513      	push	{r0, r1, r4, lr}
   db658:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db65a:	7c00      	ldrb	r0, [r0, #16]
{
   db65c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db65e:	f7fc fdaf 	bl	d81c0 <HAL_USB_USART_Available_Data_For_Write>
   db662:	2800      	cmp	r0, #0
   db664:	9901      	ldr	r1, [sp, #4]
   db666:	dc01      	bgt.n	db66c <_ZN9USBSerial5writeEh+0x16>
   db668:	7c60      	ldrb	r0, [r4, #17]
   db66a:	b120      	cbz	r0, db676 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db66c:	7c20      	ldrb	r0, [r4, #16]
   db66e:	f7fc fdb7 	bl	d81e0 <HAL_USB_USART_Send_Data>
   db672:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db676:	b002      	add	sp, #8
   db678:	bd10      	pop	{r4, pc}

000db67a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db67a:	7c00      	ldrb	r0, [r0, #16]
   db67c:	f7fc bdb8 	b.w	d81f0 <HAL_USB_USART_Flush_Data>

000db680 <_ZN9USBSerialD0Ev>:
   db680:	b510      	push	{r4, lr}
   db682:	2114      	movs	r1, #20
   db684:	4604      	mov	r4, r0
   db686:	f000 fa4e 	bl	dbb26 <_ZdlPvj>
   db68a:	4620      	mov	r0, r4
   db68c:	bd10      	pop	{r4, pc}
	...

000db690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db690:	b510      	push	{r4, lr}
   db692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db696:	4604      	mov	r4, r0
   db698:	4608      	mov	r0, r1
   db69a:	2100      	movs	r1, #0
   db69c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db6a0:	4b04      	ldr	r3, [pc, #16]	; (db6b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db6a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db6a4:	2301      	movs	r3, #1
  _serial = serial;
   db6a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db6a8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db6aa:	4611      	mov	r1, r2
   db6ac:	f7fc fd68 	bl	d8180 <HAL_USB_USART_Init>
}
   db6b0:	4620      	mov	r0, r4
   db6b2:	bd10      	pop	{r4, pc}
   db6b4:	000dd91c 	.word	0x000dd91c

000db6b8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db6b8:	7c00      	ldrb	r0, [r0, #16]
   db6ba:	2200      	movs	r2, #0
   db6bc:	f7fc bd68 	b.w	d8190 <HAL_USB_USART_Begin>

000db6c0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   db6c0:	7c00      	ldrb	r0, [r0, #16]
   db6c2:	f7fc bd6d 	b.w	d81a0 <HAL_USB_USART_End>

000db6c6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db6c6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db6c8:	2214      	movs	r2, #20
{
   db6ca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db6cc:	2100      	movs	r1, #0
   db6ce:	f001 f961 	bl	dc994 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db6d2:	4620      	mov	r0, r4
   db6d4:	bd10      	pop	{r4, pc}
	...

000db6d8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db6d8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db6da:	4c10      	ldr	r4, [pc, #64]	; (db71c <_Z16_fetch_usbserialv+0x44>)
{
   db6dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db6de:	a803      	add	r0, sp, #12
   db6e0:	f7ff fff1 	bl	db6c6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db6e4:	7821      	ldrb	r1, [r4, #0]
   db6e6:	f3bf 8f5b 	dmb	ish
   db6ea:	f011 0101 	ands.w	r1, r1, #1
   db6ee:	d111      	bne.n	db714 <_Z16_fetch_usbserialv+0x3c>
   db6f0:	4620      	mov	r0, r4
   db6f2:	9101      	str	r1, [sp, #4]
   db6f4:	f7f8 fce0 	bl	d40b8 <__cxa_guard_acquire>
   db6f8:	9901      	ldr	r1, [sp, #4]
   db6fa:	b158      	cbz	r0, db714 <_Z16_fetch_usbserialv+0x3c>
   db6fc:	aa03      	add	r2, sp, #12
   db6fe:	4808      	ldr	r0, [pc, #32]	; (db720 <_Z16_fetch_usbserialv+0x48>)
   db700:	f7ff ffc6 	bl	db690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db704:	4620      	mov	r0, r4
   db706:	f7f8 fcdc 	bl	d40c2 <__cxa_guard_release>
   db70a:	4a06      	ldr	r2, [pc, #24]	; (db724 <_Z16_fetch_usbserialv+0x4c>)
   db70c:	4906      	ldr	r1, [pc, #24]	; (db728 <_Z16_fetch_usbserialv+0x50>)
   db70e:	4804      	ldr	r0, [pc, #16]	; (db720 <_Z16_fetch_usbserialv+0x48>)
   db710:	f000 fa04 	bl	dbb1c <__aeabi_atexit>
	return _usbserial;
}
   db714:	4802      	ldr	r0, [pc, #8]	; (db720 <_Z16_fetch_usbserialv+0x48>)
   db716:	b008      	add	sp, #32
   db718:	bd10      	pop	{r4, pc}
   db71a:	bf00      	nop
   db71c:	2003e798 	.word	0x2003e798
   db720:	2003e79c 	.word	0x2003e79c
   db724:	2003e300 	.word	0x2003e300
   db728:	000db619 	.word	0x000db619

000db72c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   db72c:	b510      	push	{r4, lr}
   db72e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   db730:	f001 f9a3 	bl	dca7a <strlen>
   db734:	3801      	subs	r0, #1
   db736:	1823      	adds	r3, r4, r0
   db738:	4620      	mov	r0, r4
	while(i<j){
   db73a:	4283      	cmp	r3, r0
   db73c:	d906      	bls.n	db74c <_Z11str_reversePc+0x20>
		c = *i;
   db73e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   db740:	7819      	ldrb	r1, [r3, #0]
   db742:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   db746:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   db74a:	e7f6      	b.n	db73a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   db74c:	bd10      	pop	{r4, pc}

000db74e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   db74e:	b570      	push	{r4, r5, r6, lr}
   db750:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   db752:	1e91      	subs	r1, r2, #2
   db754:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   db756:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   db758:	d822      	bhi.n	db7a0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   db75a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   db75c:	b16d      	cbz	r5, db77a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   db75e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   db762:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   db766:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   db768:	2d09      	cmp	r5, #9
                *ptr += '0';
   db76a:	bf94      	ite	ls
   db76c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   db76e:	3157      	addhi	r1, #87	; 0x57
   db770:	b2c9      	uxtb	r1, r1
   db772:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   db776:	4635      	mov	r5, r6
	while(a){
   db778:	e7f0      	b.n	db75c <ultoa+0xe>
   db77a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   db77c:	4423      	add	r3, r4
            *ptr++ = '0';
   db77e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   db780:	4293      	cmp	r3, r2
   db782:	d902      	bls.n	db78a <ultoa+0x3c>
            *ptr++ = '0';
   db784:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   db788:	e7fa      	b.n	db780 <ultoa+0x32>
   db78a:	1a1a      	subs	r2, r3, r0
   db78c:	4283      	cmp	r3, r0
   db78e:	bf38      	it	cc
   db790:	2200      	movcc	r2, #0

	*ptr = '\0';
   db792:	2300      	movs	r3, #0
   db794:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   db796:	4620      	mov	r0, r4
   db798:	f7ff ffc8 	bl	db72c <_Z11str_reversePc>
	return buffer;
   db79c:	4620      	mov	r0, r4
}
   db79e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   db7a0:	2000      	movs	r0, #0
   db7a2:	e7fc      	b.n	db79e <ultoa+0x50>

000db7a4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db7a4:	4b01      	ldr	r3, [pc, #4]	; (db7ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db7a6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db7a8:	4770      	bx	lr
   db7aa:	bf00      	nop
   db7ac:	2003e298 	.word	0x2003e298

000db7b0 <serialEventRun>:
{
   db7b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db7b2:	4b0b      	ldr	r3, [pc, #44]	; (db7e0 <serialEventRun+0x30>)
   db7b4:	b143      	cbz	r3, db7c8 <serialEventRun+0x18>
   db7b6:	f7ff ff8f 	bl	db6d8 <_Z16_fetch_usbserialv>
   db7ba:	6803      	ldr	r3, [r0, #0]
   db7bc:	691b      	ldr	r3, [r3, #16]
   db7be:	4798      	blx	r3
   db7c0:	2800      	cmp	r0, #0
   db7c2:	dd01      	ble.n	db7c8 <serialEventRun+0x18>
        serialEvent();
   db7c4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db7c8:	4b06      	ldr	r3, [pc, #24]	; (db7e4 <serialEventRun+0x34>)
   db7ca:	b143      	cbz	r3, db7de <serialEventRun+0x2e>
   db7cc:	f7ff fef8 	bl	db5c0 <_Z22__fetch_global_Serial1v>
   db7d0:	6803      	ldr	r3, [r0, #0]
   db7d2:	691b      	ldr	r3, [r3, #16]
   db7d4:	4798      	blx	r3
   db7d6:	2800      	cmp	r0, #0
   db7d8:	dd01      	ble.n	db7de <serialEventRun+0x2e>
        serialEvent1();
   db7da:	f3af 8000 	nop.w
}
   db7de:	bd08      	pop	{r3, pc}
	...

000db7e8 <_post_loop>:
{
   db7e8:	b508      	push	{r3, lr}
	serialEventRun();
   db7ea:	f7ff ffe1 	bl	db7b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db7ee:	f7fc fb77 	bl	d7ee0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db7f2:	4b01      	ldr	r3, [pc, #4]	; (db7f8 <_post_loop+0x10>)
   db7f4:	6018      	str	r0, [r3, #0]
}
   db7f6:	bd08      	pop	{r3, pc}
   db7f8:	2003e7c4 	.word	0x2003e7c4

000db7fc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db7fc:	4802      	ldr	r0, [pc, #8]	; (db808 <_Z33system_initialize_user_backup_ramv+0xc>)
   db7fe:	4a03      	ldr	r2, [pc, #12]	; (db80c <_Z33system_initialize_user_backup_ramv+0x10>)
   db800:	4903      	ldr	r1, [pc, #12]	; (db810 <_Z33system_initialize_user_backup_ramv+0x14>)
   db802:	1a12      	subs	r2, r2, r0
   db804:	f001 b89e 	b.w	dc944 <memcpy>
   db808:	2003f400 	.word	0x2003f400
   db80c:	2003fc04 	.word	0x2003fc04
   db810:	000ddad8 	.word	0x000ddad8

000db814 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db814:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db816:	2300      	movs	r3, #0
   db818:	9300      	str	r3, [sp, #0]
   db81a:	461a      	mov	r2, r3
   db81c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db820:	f7fc fd7a 	bl	d8318 <system_ctrl_set_result>
}
   db824:	b003      	add	sp, #12
   db826:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db82c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db82c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db82e:	8843      	ldrh	r3, [r0, #2]
   db830:	2b0a      	cmp	r3, #10
   db832:	d008      	beq.n	db846 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db834:	2b50      	cmp	r3, #80	; 0x50
   db836:	d10b      	bne.n	db850 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db838:	4b09      	ldr	r3, [pc, #36]	; (db860 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db83a:	681b      	ldr	r3, [r3, #0]
   db83c:	b14b      	cbz	r3, db852 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db83e:	b003      	add	sp, #12
   db840:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db844:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db846:	f7ff ffe5 	bl	db814 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db84a:	b003      	add	sp, #12
   db84c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db850:	2300      	movs	r3, #0
   db852:	9300      	str	r3, [sp, #0]
   db854:	461a      	mov	r2, r3
   db856:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db85a:	f7fc fd5d 	bl	d8318 <system_ctrl_set_result>
}
   db85e:	e7f4      	b.n	db84a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db860:	2003e7b4 	.word	0x2003e7b4

000db864 <module_user_init_hook>:
{
   db864:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db866:	4c12      	ldr	r4, [pc, #72]	; (db8b0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db868:	4812      	ldr	r0, [pc, #72]	; (db8b4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db86a:	4d13      	ldr	r5, [pc, #76]	; (db8b8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db86c:	2100      	movs	r1, #0
   db86e:	f7fc fe8b 	bl	d8588 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   db872:	6823      	ldr	r3, [r4, #0]
   db874:	42ab      	cmp	r3, r5
   db876:	4b11      	ldr	r3, [pc, #68]	; (db8bc <module_user_init_hook+0x58>)
   db878:	bf0c      	ite	eq
   db87a:	2201      	moveq	r2, #1
   db87c:	2200      	movne	r2, #0
   db87e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db880:	d002      	beq.n	db888 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   db882:	f7ff ffbb 	bl	db7fc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   db886:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db888:	f7fc fb12 	bl	d7eb0 <HAL_RNG_GetRandomNumber>
   db88c:	4604      	mov	r4, r0
    srand(seed);
   db88e:	f001 f889 	bl	dc9a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db892:	4b0b      	ldr	r3, [pc, #44]	; (db8c0 <module_user_init_hook+0x5c>)
   db894:	b113      	cbz	r3, db89c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   db896:	4620      	mov	r0, r4
   db898:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db89c:	2100      	movs	r1, #0
   db89e:	4808      	ldr	r0, [pc, #32]	; (db8c0 <module_user_init_hook+0x5c>)
   db8a0:	f7fc fdc2 	bl	d8428 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db8a8:	4806      	ldr	r0, [pc, #24]	; (db8c4 <module_user_init_hook+0x60>)
   db8aa:	2100      	movs	r1, #0
   db8ac:	f7fc bd2a 	b.w	d8304 <system_ctrl_set_app_request_handler>
   db8b0:	2003fc00 	.word	0x2003fc00
   db8b4:	000db7a5 	.word	0x000db7a5
   db8b8:	9a271c1e 	.word	0x9a271c1e
   db8bc:	2003e7b0 	.word	0x2003e7b0
   db8c0:	00000000 	.word	0x00000000
   db8c4:	000db82d 	.word	0x000db82d

000db8c8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   db8c8:	b508      	push	{r3, lr}
   db8ca:	4b02      	ldr	r3, [pc, #8]	; (db8d4 <spark_protocol_instance+0xc>)
   db8cc:	681b      	ldr	r3, [r3, #0]
   db8ce:	681b      	ldr	r3, [r3, #0]
   db8d0:	9301      	str	r3, [sp, #4]
   db8d2:	bd08      	pop	{r3, pc}
   db8d4:	0003025c 	.word	0x0003025c

000db8d8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   db8d8:	b508      	push	{r3, lr}
   db8da:	4b02      	ldr	r3, [pc, #8]	; (db8e4 <spark_protocol_set_product_id+0xc>)
   db8dc:	681b      	ldr	r3, [r3, #0]
   db8de:	685b      	ldr	r3, [r3, #4]
   db8e0:	9301      	str	r3, [sp, #4]
   db8e2:	bd08      	pop	{r3, pc}
   db8e4:	0003025c 	.word	0x0003025c

000db8e8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   db8e8:	b508      	push	{r3, lr}
   db8ea:	4b02      	ldr	r3, [pc, #8]	; (db8f4 <spark_protocol_set_product_firmware_version+0xc>)
   db8ec:	681b      	ldr	r3, [r3, #0]
   db8ee:	689b      	ldr	r3, [r3, #8]
   db8f0:	9301      	str	r3, [sp, #4]
   db8f2:	bd08      	pop	{r3, pc}
   db8f4:	0003025c 	.word	0x0003025c

000db8f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db8f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db8fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db8fc:	d902      	bls.n	db904 <pinAvailable+0xc>
    return false;
   db8fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db900:	b002      	add	sp, #8
   db902:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db904:	f1a0 030b 	sub.w	r3, r0, #11
   db908:	2b02      	cmp	r3, #2
   db90a:	d81a      	bhi.n	db942 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db90c:	4c17      	ldr	r4, [pc, #92]	; (db96c <pinAvailable+0x74>)
   db90e:	7821      	ldrb	r1, [r4, #0]
   db910:	f3bf 8f5b 	dmb	ish
   db914:	f011 0101 	ands.w	r1, r1, #1
   db918:	d10b      	bne.n	db932 <pinAvailable+0x3a>
   db91a:	4620      	mov	r0, r4
   db91c:	9101      	str	r1, [sp, #4]
   db91e:	f7f8 fbcb 	bl	d40b8 <__cxa_guard_acquire>
   db922:	9901      	ldr	r1, [sp, #4]
   db924:	b128      	cbz	r0, db932 <pinAvailable+0x3a>
   db926:	4812      	ldr	r0, [pc, #72]	; (db970 <pinAvailable+0x78>)
   db928:	f7ff f8ec 	bl	dab04 <_ZN8SPIClassC1E19hal_spi_interface_t>
   db92c:	4620      	mov	r0, r4
   db92e:	f7f8 fbc8 	bl	d40c2 <__cxa_guard_release>
   db932:	4b0f      	ldr	r3, [pc, #60]	; (db970 <pinAvailable+0x78>)
   db934:	7818      	ldrb	r0, [r3, #0]
   db936:	f7fc fbcb 	bl	d80d0 <hal_spi_is_enabled>
   db93a:	2800      	cmp	r0, #0
   db93c:	d1df      	bne.n	db8fe <pinAvailable+0x6>
  return true; // 'pin' is available
   db93e:	2001      	movs	r0, #1
   db940:	e7de      	b.n	db900 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db942:	2801      	cmp	r0, #1
   db944:	d809      	bhi.n	db95a <pinAvailable+0x62>
   db946:	f000 f899 	bl	dba7c <_Z19__fetch_global_Wirev>
   db94a:	2100      	movs	r1, #0
   db94c:	7c00      	ldrb	r0, [r0, #16]
   db94e:	f7fc fb77 	bl	d8040 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db952:	f080 0001 	eor.w	r0, r0, #1
   db956:	b2c0      	uxtb	r0, r0
   db958:	e7d2      	b.n	db900 <pinAvailable+0x8>
   db95a:	3809      	subs	r0, #9
   db95c:	2801      	cmp	r0, #1
   db95e:	d8ee      	bhi.n	db93e <pinAvailable+0x46>
   db960:	f7ff fe2e 	bl	db5c0 <_Z22__fetch_global_Serial1v>
   db964:	7c00      	ldrb	r0, [r0, #16]
   db966:	f7fc fbf3 	bl	d8150 <hal_usart_is_enabled>
   db96a:	e7f2      	b.n	db952 <pinAvailable+0x5a>
   db96c:	2003e7b8 	.word	0x2003e7b8
   db970:	2003e7bc 	.word	0x2003e7bc

000db974 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db974:	2823      	cmp	r0, #35	; 0x23
{
   db976:	b538      	push	{r3, r4, r5, lr}
   db978:	4604      	mov	r4, r0
   db97a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db97c:	d80a      	bhi.n	db994 <pinMode+0x20>
   db97e:	29ff      	cmp	r1, #255	; 0xff
   db980:	d008      	beq.n	db994 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db982:	f7ff ffb9 	bl	db8f8 <pinAvailable>
   db986:	b128      	cbz	r0, db994 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db988:	4629      	mov	r1, r5
   db98a:	4620      	mov	r0, r4
}
   db98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db990:	f7fc bade 	b.w	d7f50 <HAL_Pin_Mode>
}
   db994:	bd38      	pop	{r3, r4, r5, pc}

000db996 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db996:	b538      	push	{r3, r4, r5, lr}
   db998:	4604      	mov	r4, r0
   db99a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db99c:	f7fc fae0 	bl	d7f60 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db9a0:	28ff      	cmp	r0, #255	; 0xff
   db9a2:	d010      	beq.n	db9c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db9a4:	2806      	cmp	r0, #6
   db9a6:	d804      	bhi.n	db9b2 <digitalWrite+0x1c>
   db9a8:	234d      	movs	r3, #77	; 0x4d
   db9aa:	fa23 f000 	lsr.w	r0, r3, r0
   db9ae:	07c3      	lsls	r3, r0, #31
   db9b0:	d409      	bmi.n	db9c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db9b2:	4620      	mov	r0, r4
   db9b4:	f7ff ffa0 	bl	db8f8 <pinAvailable>
   db9b8:	b128      	cbz	r0, db9c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db9ba:	4629      	mov	r1, r5
   db9bc:	4620      	mov	r0, r4
}
   db9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db9c2:	f7fc bad5 	b.w	d7f70 <HAL_GPIO_Write>
}
   db9c6:	bd38      	pop	{r3, r4, r5, pc}

000db9c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   db9c8:	b510      	push	{r4, lr}
   db9ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db9cc:	f7fc fac8 	bl	d7f60 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   db9d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   db9d2:	b2db      	uxtb	r3, r3
   db9d4:	2b01      	cmp	r3, #1
   db9d6:	d908      	bls.n	db9ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   db9d8:	4620      	mov	r0, r4
   db9da:	f7ff ff8d 	bl	db8f8 <pinAvailable>
   db9de:	b120      	cbz	r0, db9ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   db9e0:	4620      	mov	r0, r4
}
   db9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   db9e6:	f7fc bacb 	b.w	d7f80 <HAL_GPIO_Read>
}
   db9ea:	2000      	movs	r0, #0
   db9ec:	bd10      	pop	{r4, pc}

000db9ee <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db9ee:	280d      	cmp	r0, #13
{
   db9f0:	b510      	push	{r4, lr}
   db9f2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   db9f4:	bf9c      	itt	ls
   db9f6:	340e      	addls	r4, #14
   db9f8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db9fa:	4620      	mov	r0, r4
   db9fc:	f7ff ff7c 	bl	db8f8 <pinAvailable>
   dba00:	b150      	cbz	r0, dba18 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dba02:	2103      	movs	r1, #3
   dba04:	4620      	mov	r0, r4
   dba06:	f7fc fa9b 	bl	d7f40 <HAL_Validate_Pin_Function>
   dba0a:	2803      	cmp	r0, #3
   dba0c:	d104      	bne.n	dba18 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   dba0e:	4620      	mov	r0, r4
}
   dba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   dba14:	f7fc bacc 	b.w	d7fb0 <hal_adc_read>
}
   dba18:	2000      	movs	r0, #0
   dba1a:	bd10      	pop	{r4, pc}

000dba1c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   dba1c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   dba1e:	2300      	movs	r3, #0
   dba20:	2520      	movs	r5, #32
   dba22:	8043      	strh	r3, [r0, #2]
   dba24:	2314      	movs	r3, #20
{
   dba26:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   dba28:	8003      	strh	r3, [r0, #0]
   dba2a:	6085      	str	r5, [r0, #8]
   dba2c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dba2e:	4906      	ldr	r1, [pc, #24]	; (dba48 <_Z17acquireWireBufferv+0x2c>)
   dba30:	4628      	mov	r0, r5
   dba32:	f000 f87c 	bl	dbb2e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dba36:	4904      	ldr	r1, [pc, #16]	; (dba48 <_Z17acquireWireBufferv+0x2c>)
	};
   dba38:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dba3a:	4628      	mov	r0, r5
   dba3c:	f000 f877 	bl	dbb2e <_ZnajRKSt9nothrow_t>
	};
   dba40:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   dba42:	4620      	mov	r0, r4
   dba44:	bd38      	pop	{r3, r4, r5, pc}
   dba46:	bf00      	nop
   dba48:	000dd944 	.word	0x000dd944

000dba4c <_Z18acquireWire1Bufferv>:
   dba4c:	b538      	push	{r3, r4, r5, lr}
   dba4e:	2300      	movs	r3, #0
   dba50:	2520      	movs	r5, #32
   dba52:	8043      	strh	r3, [r0, #2]
   dba54:	2314      	movs	r3, #20
   dba56:	4604      	mov	r4, r0
   dba58:	8003      	strh	r3, [r0, #0]
   dba5a:	6085      	str	r5, [r0, #8]
   dba5c:	6105      	str	r5, [r0, #16]
   dba5e:	4906      	ldr	r1, [pc, #24]	; (dba78 <_Z18acquireWire1Bufferv+0x2c>)
   dba60:	4628      	mov	r0, r5
   dba62:	f000 f864 	bl	dbb2e <_ZnajRKSt9nothrow_t>
   dba66:	4904      	ldr	r1, [pc, #16]	; (dba78 <_Z18acquireWire1Bufferv+0x2c>)
   dba68:	6060      	str	r0, [r4, #4]
   dba6a:	4628      	mov	r0, r5
   dba6c:	f000 f85f 	bl	dbb2e <_ZnajRKSt9nothrow_t>
   dba70:	60e0      	str	r0, [r4, #12]
   dba72:	4620      	mov	r0, r4
   dba74:	bd38      	pop	{r3, r4, r5, pc}
   dba76:	bf00      	nop
   dba78:	000dd944 	.word	0x000dd944

000dba7c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   dba7c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dba7e:	4d0f      	ldr	r5, [pc, #60]	; (dbabc <_Z19__fetch_global_Wirev+0x40>)
   dba80:	7829      	ldrb	r1, [r5, #0]
   dba82:	f3bf 8f5b 	dmb	ish
   dba86:	f011 0401 	ands.w	r4, r1, #1
{
   dba8a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dba8c:	d113      	bne.n	dbab6 <_Z19__fetch_global_Wirev+0x3a>
   dba8e:	4628      	mov	r0, r5
   dba90:	f7f8 fb12 	bl	d40b8 <__cxa_guard_acquire>
   dba94:	b178      	cbz	r0, dbab6 <_Z19__fetch_global_Wirev+0x3a>
   dba96:	a801      	add	r0, sp, #4
   dba98:	f7ff ffc0 	bl	dba1c <_Z17acquireWireBufferv>
   dba9c:	aa01      	add	r2, sp, #4
   dba9e:	4621      	mov	r1, r4
   dbaa0:	4807      	ldr	r0, [pc, #28]	; (dbac0 <_Z19__fetch_global_Wirev+0x44>)
   dbaa2:	f7fd fb53 	bl	d914c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dbaa6:	4628      	mov	r0, r5
   dbaa8:	f7f8 fb0b 	bl	d40c2 <__cxa_guard_release>
   dbaac:	4a05      	ldr	r2, [pc, #20]	; (dbac4 <_Z19__fetch_global_Wirev+0x48>)
   dbaae:	4906      	ldr	r1, [pc, #24]	; (dbac8 <_Z19__fetch_global_Wirev+0x4c>)
   dbab0:	4803      	ldr	r0, [pc, #12]	; (dbac0 <_Z19__fetch_global_Wirev+0x44>)
   dbab2:	f000 f833 	bl	dbb1c <__aeabi_atexit>
	return wire;
}
   dbab6:	4802      	ldr	r0, [pc, #8]	; (dbac0 <_Z19__fetch_global_Wirev+0x44>)
   dbab8:	b007      	add	sp, #28
   dbaba:	bd30      	pop	{r4, r5, pc}
   dbabc:	2003e7c8 	.word	0x2003e7c8
   dbac0:	2003e7d0 	.word	0x2003e7d0
   dbac4:	2003e300 	.word	0x2003e300
   dbac8:	000d90f5 	.word	0x000d90f5

000dbacc <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dbacc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dbace:	4c0f      	ldr	r4, [pc, #60]	; (dbb0c <_Z20__fetch_global_Wire1v+0x40>)
   dbad0:	7823      	ldrb	r3, [r4, #0]
   dbad2:	f3bf 8f5b 	dmb	ish
   dbad6:	07db      	lsls	r3, r3, #31
{
   dbad8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dbada:	d413      	bmi.n	dbb04 <_Z20__fetch_global_Wire1v+0x38>
   dbadc:	4620      	mov	r0, r4
   dbade:	f7f8 faeb 	bl	d40b8 <__cxa_guard_acquire>
   dbae2:	b178      	cbz	r0, dbb04 <_Z20__fetch_global_Wire1v+0x38>
   dbae4:	a801      	add	r0, sp, #4
   dbae6:	f7ff ffb1 	bl	dba4c <_Z18acquireWire1Bufferv>
   dbaea:	aa01      	add	r2, sp, #4
   dbaec:	2101      	movs	r1, #1
   dbaee:	4808      	ldr	r0, [pc, #32]	; (dbb10 <_Z20__fetch_global_Wire1v+0x44>)
   dbaf0:	f7fd fb2c 	bl	d914c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dbaf4:	4620      	mov	r0, r4
   dbaf6:	f7f8 fae4 	bl	d40c2 <__cxa_guard_release>
   dbafa:	4a06      	ldr	r2, [pc, #24]	; (dbb14 <_Z20__fetch_global_Wire1v+0x48>)
   dbafc:	4906      	ldr	r1, [pc, #24]	; (dbb18 <_Z20__fetch_global_Wire1v+0x4c>)
   dbafe:	4804      	ldr	r0, [pc, #16]	; (dbb10 <_Z20__fetch_global_Wire1v+0x44>)
   dbb00:	f000 f80c 	bl	dbb1c <__aeabi_atexit>
	return wire;
}
   dbb04:	4802      	ldr	r0, [pc, #8]	; (dbb10 <_Z20__fetch_global_Wire1v+0x44>)
   dbb06:	b006      	add	sp, #24
   dbb08:	bd10      	pop	{r4, pc}
   dbb0a:	bf00      	nop
   dbb0c:	2003e7cc 	.word	0x2003e7cc
   dbb10:	2003e7e4 	.word	0x2003e7e4
   dbb14:	2003e300 	.word	0x2003e300
   dbb18:	000d90f5 	.word	0x000d90f5

000dbb1c <__aeabi_atexit>:
   dbb1c:	460b      	mov	r3, r1
   dbb1e:	4601      	mov	r1, r0
   dbb20:	4618      	mov	r0, r3
   dbb22:	f000 beef 	b.w	dc904 <__cxa_atexit>

000dbb26 <_ZdlPvj>:
   dbb26:	f7f8 baba 	b.w	d409e <_ZdlPv>

000dbb2a <_ZnwjRKSt9nothrow_t>:
   dbb2a:	f7f8 bab4 	b.w	d4096 <_Znwj>

000dbb2e <_ZnajRKSt9nothrow_t>:
   dbb2e:	f7f8 bab4 	b.w	d409a <_Znaj>

000dbb32 <_ZSt25__throw_bad_function_callv>:
   dbb32:	b508      	push	{r3, lr}
   dbb34:	f7fc fd18 	bl	d8568 <abort>

000dbb38 <__aeabi_drsub>:
   dbb38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dbb3c:	e002      	b.n	dbb44 <__adddf3>
   dbb3e:	bf00      	nop

000dbb40 <__aeabi_dsub>:
   dbb40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dbb44 <__adddf3>:
   dbb44:	b530      	push	{r4, r5, lr}
   dbb46:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dbb4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dbb4e:	ea94 0f05 	teq	r4, r5
   dbb52:	bf08      	it	eq
   dbb54:	ea90 0f02 	teqeq	r0, r2
   dbb58:	bf1f      	itttt	ne
   dbb5a:	ea54 0c00 	orrsne.w	ip, r4, r0
   dbb5e:	ea55 0c02 	orrsne.w	ip, r5, r2
   dbb62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dbb66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbb6a:	f000 80e2 	beq.w	dbd32 <__adddf3+0x1ee>
   dbb6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dbb72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dbb76:	bfb8      	it	lt
   dbb78:	426d      	neglt	r5, r5
   dbb7a:	dd0c      	ble.n	dbb96 <__adddf3+0x52>
   dbb7c:	442c      	add	r4, r5
   dbb7e:	ea80 0202 	eor.w	r2, r0, r2
   dbb82:	ea81 0303 	eor.w	r3, r1, r3
   dbb86:	ea82 0000 	eor.w	r0, r2, r0
   dbb8a:	ea83 0101 	eor.w	r1, r3, r1
   dbb8e:	ea80 0202 	eor.w	r2, r0, r2
   dbb92:	ea81 0303 	eor.w	r3, r1, r3
   dbb96:	2d36      	cmp	r5, #54	; 0x36
   dbb98:	bf88      	it	hi
   dbb9a:	bd30      	pophi	{r4, r5, pc}
   dbb9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbba4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dbba8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dbbac:	d002      	beq.n	dbbb4 <__adddf3+0x70>
   dbbae:	4240      	negs	r0, r0
   dbbb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbbb4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dbbb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbbbc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dbbc0:	d002      	beq.n	dbbc8 <__adddf3+0x84>
   dbbc2:	4252      	negs	r2, r2
   dbbc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dbbc8:	ea94 0f05 	teq	r4, r5
   dbbcc:	f000 80a7 	beq.w	dbd1e <__adddf3+0x1da>
   dbbd0:	f1a4 0401 	sub.w	r4, r4, #1
   dbbd4:	f1d5 0e20 	rsbs	lr, r5, #32
   dbbd8:	db0d      	blt.n	dbbf6 <__adddf3+0xb2>
   dbbda:	fa02 fc0e 	lsl.w	ip, r2, lr
   dbbde:	fa22 f205 	lsr.w	r2, r2, r5
   dbbe2:	1880      	adds	r0, r0, r2
   dbbe4:	f141 0100 	adc.w	r1, r1, #0
   dbbe8:	fa03 f20e 	lsl.w	r2, r3, lr
   dbbec:	1880      	adds	r0, r0, r2
   dbbee:	fa43 f305 	asr.w	r3, r3, r5
   dbbf2:	4159      	adcs	r1, r3
   dbbf4:	e00e      	b.n	dbc14 <__adddf3+0xd0>
   dbbf6:	f1a5 0520 	sub.w	r5, r5, #32
   dbbfa:	f10e 0e20 	add.w	lr, lr, #32
   dbbfe:	2a01      	cmp	r2, #1
   dbc00:	fa03 fc0e 	lsl.w	ip, r3, lr
   dbc04:	bf28      	it	cs
   dbc06:	f04c 0c02 	orrcs.w	ip, ip, #2
   dbc0a:	fa43 f305 	asr.w	r3, r3, r5
   dbc0e:	18c0      	adds	r0, r0, r3
   dbc10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dbc14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbc18:	d507      	bpl.n	dbc2a <__adddf3+0xe6>
   dbc1a:	f04f 0e00 	mov.w	lr, #0
   dbc1e:	f1dc 0c00 	rsbs	ip, ip, #0
   dbc22:	eb7e 0000 	sbcs.w	r0, lr, r0
   dbc26:	eb6e 0101 	sbc.w	r1, lr, r1
   dbc2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dbc2e:	d31b      	bcc.n	dbc68 <__adddf3+0x124>
   dbc30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dbc34:	d30c      	bcc.n	dbc50 <__adddf3+0x10c>
   dbc36:	0849      	lsrs	r1, r1, #1
   dbc38:	ea5f 0030 	movs.w	r0, r0, rrx
   dbc3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dbc40:	f104 0401 	add.w	r4, r4, #1
   dbc44:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dbc48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dbc4c:	f080 809a 	bcs.w	dbd84 <__adddf3+0x240>
   dbc50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dbc54:	bf08      	it	eq
   dbc56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbc5a:	f150 0000 	adcs.w	r0, r0, #0
   dbc5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbc62:	ea41 0105 	orr.w	r1, r1, r5
   dbc66:	bd30      	pop	{r4, r5, pc}
   dbc68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dbc6c:	4140      	adcs	r0, r0
   dbc6e:	eb41 0101 	adc.w	r1, r1, r1
   dbc72:	3c01      	subs	r4, #1
   dbc74:	bf28      	it	cs
   dbc76:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dbc7a:	d2e9      	bcs.n	dbc50 <__adddf3+0x10c>
   dbc7c:	f091 0f00 	teq	r1, #0
   dbc80:	bf04      	itt	eq
   dbc82:	4601      	moveq	r1, r0
   dbc84:	2000      	moveq	r0, #0
   dbc86:	fab1 f381 	clz	r3, r1
   dbc8a:	bf08      	it	eq
   dbc8c:	3320      	addeq	r3, #32
   dbc8e:	f1a3 030b 	sub.w	r3, r3, #11
   dbc92:	f1b3 0220 	subs.w	r2, r3, #32
   dbc96:	da0c      	bge.n	dbcb2 <__adddf3+0x16e>
   dbc98:	320c      	adds	r2, #12
   dbc9a:	dd08      	ble.n	dbcae <__adddf3+0x16a>
   dbc9c:	f102 0c14 	add.w	ip, r2, #20
   dbca0:	f1c2 020c 	rsb	r2, r2, #12
   dbca4:	fa01 f00c 	lsl.w	r0, r1, ip
   dbca8:	fa21 f102 	lsr.w	r1, r1, r2
   dbcac:	e00c      	b.n	dbcc8 <__adddf3+0x184>
   dbcae:	f102 0214 	add.w	r2, r2, #20
   dbcb2:	bfd8      	it	le
   dbcb4:	f1c2 0c20 	rsble	ip, r2, #32
   dbcb8:	fa01 f102 	lsl.w	r1, r1, r2
   dbcbc:	fa20 fc0c 	lsr.w	ip, r0, ip
   dbcc0:	bfdc      	itt	le
   dbcc2:	ea41 010c 	orrle.w	r1, r1, ip
   dbcc6:	4090      	lslle	r0, r2
   dbcc8:	1ae4      	subs	r4, r4, r3
   dbcca:	bfa2      	ittt	ge
   dbccc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dbcd0:	4329      	orrge	r1, r5
   dbcd2:	bd30      	popge	{r4, r5, pc}
   dbcd4:	ea6f 0404 	mvn.w	r4, r4
   dbcd8:	3c1f      	subs	r4, #31
   dbcda:	da1c      	bge.n	dbd16 <__adddf3+0x1d2>
   dbcdc:	340c      	adds	r4, #12
   dbcde:	dc0e      	bgt.n	dbcfe <__adddf3+0x1ba>
   dbce0:	f104 0414 	add.w	r4, r4, #20
   dbce4:	f1c4 0220 	rsb	r2, r4, #32
   dbce8:	fa20 f004 	lsr.w	r0, r0, r4
   dbcec:	fa01 f302 	lsl.w	r3, r1, r2
   dbcf0:	ea40 0003 	orr.w	r0, r0, r3
   dbcf4:	fa21 f304 	lsr.w	r3, r1, r4
   dbcf8:	ea45 0103 	orr.w	r1, r5, r3
   dbcfc:	bd30      	pop	{r4, r5, pc}
   dbcfe:	f1c4 040c 	rsb	r4, r4, #12
   dbd02:	f1c4 0220 	rsb	r2, r4, #32
   dbd06:	fa20 f002 	lsr.w	r0, r0, r2
   dbd0a:	fa01 f304 	lsl.w	r3, r1, r4
   dbd0e:	ea40 0003 	orr.w	r0, r0, r3
   dbd12:	4629      	mov	r1, r5
   dbd14:	bd30      	pop	{r4, r5, pc}
   dbd16:	fa21 f004 	lsr.w	r0, r1, r4
   dbd1a:	4629      	mov	r1, r5
   dbd1c:	bd30      	pop	{r4, r5, pc}
   dbd1e:	f094 0f00 	teq	r4, #0
   dbd22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dbd26:	bf06      	itte	eq
   dbd28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dbd2c:	3401      	addeq	r4, #1
   dbd2e:	3d01      	subne	r5, #1
   dbd30:	e74e      	b.n	dbbd0 <__adddf3+0x8c>
   dbd32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbd36:	bf18      	it	ne
   dbd38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbd3c:	d029      	beq.n	dbd92 <__adddf3+0x24e>
   dbd3e:	ea94 0f05 	teq	r4, r5
   dbd42:	bf08      	it	eq
   dbd44:	ea90 0f02 	teqeq	r0, r2
   dbd48:	d005      	beq.n	dbd56 <__adddf3+0x212>
   dbd4a:	ea54 0c00 	orrs.w	ip, r4, r0
   dbd4e:	bf04      	itt	eq
   dbd50:	4619      	moveq	r1, r3
   dbd52:	4610      	moveq	r0, r2
   dbd54:	bd30      	pop	{r4, r5, pc}
   dbd56:	ea91 0f03 	teq	r1, r3
   dbd5a:	bf1e      	ittt	ne
   dbd5c:	2100      	movne	r1, #0
   dbd5e:	2000      	movne	r0, #0
   dbd60:	bd30      	popne	{r4, r5, pc}
   dbd62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dbd66:	d105      	bne.n	dbd74 <__adddf3+0x230>
   dbd68:	0040      	lsls	r0, r0, #1
   dbd6a:	4149      	adcs	r1, r1
   dbd6c:	bf28      	it	cs
   dbd6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dbd72:	bd30      	pop	{r4, r5, pc}
   dbd74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dbd78:	bf3c      	itt	cc
   dbd7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dbd7e:	bd30      	popcc	{r4, r5, pc}
   dbd80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbd84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dbd88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbd8c:	f04f 0000 	mov.w	r0, #0
   dbd90:	bd30      	pop	{r4, r5, pc}
   dbd92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbd96:	bf1a      	itte	ne
   dbd98:	4619      	movne	r1, r3
   dbd9a:	4610      	movne	r0, r2
   dbd9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dbda0:	bf1c      	itt	ne
   dbda2:	460b      	movne	r3, r1
   dbda4:	4602      	movne	r2, r0
   dbda6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbdaa:	bf06      	itte	eq
   dbdac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dbdb0:	ea91 0f03 	teqeq	r1, r3
   dbdb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dbdb8:	bd30      	pop	{r4, r5, pc}
   dbdba:	bf00      	nop

000dbdbc <__aeabi_ui2d>:
   dbdbc:	f090 0f00 	teq	r0, #0
   dbdc0:	bf04      	itt	eq
   dbdc2:	2100      	moveq	r1, #0
   dbdc4:	4770      	bxeq	lr
   dbdc6:	b530      	push	{r4, r5, lr}
   dbdc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbdcc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbdd0:	f04f 0500 	mov.w	r5, #0
   dbdd4:	f04f 0100 	mov.w	r1, #0
   dbdd8:	e750      	b.n	dbc7c <__adddf3+0x138>
   dbdda:	bf00      	nop

000dbddc <__aeabi_i2d>:
   dbddc:	f090 0f00 	teq	r0, #0
   dbde0:	bf04      	itt	eq
   dbde2:	2100      	moveq	r1, #0
   dbde4:	4770      	bxeq	lr
   dbde6:	b530      	push	{r4, r5, lr}
   dbde8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbdec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbdf0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dbdf4:	bf48      	it	mi
   dbdf6:	4240      	negmi	r0, r0
   dbdf8:	f04f 0100 	mov.w	r1, #0
   dbdfc:	e73e      	b.n	dbc7c <__adddf3+0x138>
   dbdfe:	bf00      	nop

000dbe00 <__aeabi_f2d>:
   dbe00:	0042      	lsls	r2, r0, #1
   dbe02:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dbe06:	ea4f 0131 	mov.w	r1, r1, rrx
   dbe0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dbe0e:	bf1f      	itttt	ne
   dbe10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dbe14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbe18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dbe1c:	4770      	bxne	lr
   dbe1e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dbe22:	bf08      	it	eq
   dbe24:	4770      	bxeq	lr
   dbe26:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dbe2a:	bf04      	itt	eq
   dbe2c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dbe30:	4770      	bxeq	lr
   dbe32:	b530      	push	{r4, r5, lr}
   dbe34:	f44f 7460 	mov.w	r4, #896	; 0x380
   dbe38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbe3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbe40:	e71c      	b.n	dbc7c <__adddf3+0x138>
   dbe42:	bf00      	nop

000dbe44 <__aeabi_ul2d>:
   dbe44:	ea50 0201 	orrs.w	r2, r0, r1
   dbe48:	bf08      	it	eq
   dbe4a:	4770      	bxeq	lr
   dbe4c:	b530      	push	{r4, r5, lr}
   dbe4e:	f04f 0500 	mov.w	r5, #0
   dbe52:	e00a      	b.n	dbe6a <__aeabi_l2d+0x16>

000dbe54 <__aeabi_l2d>:
   dbe54:	ea50 0201 	orrs.w	r2, r0, r1
   dbe58:	bf08      	it	eq
   dbe5a:	4770      	bxeq	lr
   dbe5c:	b530      	push	{r4, r5, lr}
   dbe5e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dbe62:	d502      	bpl.n	dbe6a <__aeabi_l2d+0x16>
   dbe64:	4240      	negs	r0, r0
   dbe66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbe6a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbe6e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbe72:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dbe76:	f43f aed8 	beq.w	dbc2a <__adddf3+0xe6>
   dbe7a:	f04f 0203 	mov.w	r2, #3
   dbe7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbe82:	bf18      	it	ne
   dbe84:	3203      	addne	r2, #3
   dbe86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbe8a:	bf18      	it	ne
   dbe8c:	3203      	addne	r2, #3
   dbe8e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dbe92:	f1c2 0320 	rsb	r3, r2, #32
   dbe96:	fa00 fc03 	lsl.w	ip, r0, r3
   dbe9a:	fa20 f002 	lsr.w	r0, r0, r2
   dbe9e:	fa01 fe03 	lsl.w	lr, r1, r3
   dbea2:	ea40 000e 	orr.w	r0, r0, lr
   dbea6:	fa21 f102 	lsr.w	r1, r1, r2
   dbeaa:	4414      	add	r4, r2
   dbeac:	e6bd      	b.n	dbc2a <__adddf3+0xe6>
   dbeae:	bf00      	nop

000dbeb0 <__aeabi_dmul>:
   dbeb0:	b570      	push	{r4, r5, r6, lr}
   dbeb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbeb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbeba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbebe:	bf1d      	ittte	ne
   dbec0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbec4:	ea94 0f0c 	teqne	r4, ip
   dbec8:	ea95 0f0c 	teqne	r5, ip
   dbecc:	f000 f8de 	bleq	dc08c <__aeabi_dmul+0x1dc>
   dbed0:	442c      	add	r4, r5
   dbed2:	ea81 0603 	eor.w	r6, r1, r3
   dbed6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dbeda:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dbede:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dbee2:	bf18      	it	ne
   dbee4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dbee8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbeec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dbef0:	d038      	beq.n	dbf64 <__aeabi_dmul+0xb4>
   dbef2:	fba0 ce02 	umull	ip, lr, r0, r2
   dbef6:	f04f 0500 	mov.w	r5, #0
   dbefa:	fbe1 e502 	umlal	lr, r5, r1, r2
   dbefe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dbf02:	fbe0 e503 	umlal	lr, r5, r0, r3
   dbf06:	f04f 0600 	mov.w	r6, #0
   dbf0a:	fbe1 5603 	umlal	r5, r6, r1, r3
   dbf0e:	f09c 0f00 	teq	ip, #0
   dbf12:	bf18      	it	ne
   dbf14:	f04e 0e01 	orrne.w	lr, lr, #1
   dbf18:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dbf1c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbf20:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dbf24:	d204      	bcs.n	dbf30 <__aeabi_dmul+0x80>
   dbf26:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dbf2a:	416d      	adcs	r5, r5
   dbf2c:	eb46 0606 	adc.w	r6, r6, r6
   dbf30:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dbf34:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dbf38:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dbf3c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dbf40:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dbf44:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbf48:	bf88      	it	hi
   dbf4a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbf4e:	d81e      	bhi.n	dbf8e <__aeabi_dmul+0xde>
   dbf50:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dbf54:	bf08      	it	eq
   dbf56:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dbf5a:	f150 0000 	adcs.w	r0, r0, #0
   dbf5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbf62:	bd70      	pop	{r4, r5, r6, pc}
   dbf64:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dbf68:	ea46 0101 	orr.w	r1, r6, r1
   dbf6c:	ea40 0002 	orr.w	r0, r0, r2
   dbf70:	ea81 0103 	eor.w	r1, r1, r3
   dbf74:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dbf78:	bfc2      	ittt	gt
   dbf7a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbf7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbf82:	bd70      	popgt	{r4, r5, r6, pc}
   dbf84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbf88:	f04f 0e00 	mov.w	lr, #0
   dbf8c:	3c01      	subs	r4, #1
   dbf8e:	f300 80ab 	bgt.w	dc0e8 <__aeabi_dmul+0x238>
   dbf92:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dbf96:	bfde      	ittt	le
   dbf98:	2000      	movle	r0, #0
   dbf9a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dbf9e:	bd70      	pople	{r4, r5, r6, pc}
   dbfa0:	f1c4 0400 	rsb	r4, r4, #0
   dbfa4:	3c20      	subs	r4, #32
   dbfa6:	da35      	bge.n	dc014 <__aeabi_dmul+0x164>
   dbfa8:	340c      	adds	r4, #12
   dbfaa:	dc1b      	bgt.n	dbfe4 <__aeabi_dmul+0x134>
   dbfac:	f104 0414 	add.w	r4, r4, #20
   dbfb0:	f1c4 0520 	rsb	r5, r4, #32
   dbfb4:	fa00 f305 	lsl.w	r3, r0, r5
   dbfb8:	fa20 f004 	lsr.w	r0, r0, r4
   dbfbc:	fa01 f205 	lsl.w	r2, r1, r5
   dbfc0:	ea40 0002 	orr.w	r0, r0, r2
   dbfc4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dbfc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbfcc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbfd0:	fa21 f604 	lsr.w	r6, r1, r4
   dbfd4:	eb42 0106 	adc.w	r1, r2, r6
   dbfd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbfdc:	bf08      	it	eq
   dbfde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbfe2:	bd70      	pop	{r4, r5, r6, pc}
   dbfe4:	f1c4 040c 	rsb	r4, r4, #12
   dbfe8:	f1c4 0520 	rsb	r5, r4, #32
   dbfec:	fa00 f304 	lsl.w	r3, r0, r4
   dbff0:	fa20 f005 	lsr.w	r0, r0, r5
   dbff4:	fa01 f204 	lsl.w	r2, r1, r4
   dbff8:	ea40 0002 	orr.w	r0, r0, r2
   dbffc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc004:	f141 0100 	adc.w	r1, r1, #0
   dc008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc00c:	bf08      	it	eq
   dc00e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc012:	bd70      	pop	{r4, r5, r6, pc}
   dc014:	f1c4 0520 	rsb	r5, r4, #32
   dc018:	fa00 f205 	lsl.w	r2, r0, r5
   dc01c:	ea4e 0e02 	orr.w	lr, lr, r2
   dc020:	fa20 f304 	lsr.w	r3, r0, r4
   dc024:	fa01 f205 	lsl.w	r2, r1, r5
   dc028:	ea43 0302 	orr.w	r3, r3, r2
   dc02c:	fa21 f004 	lsr.w	r0, r1, r4
   dc030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc034:	fa21 f204 	lsr.w	r2, r1, r4
   dc038:	ea20 0002 	bic.w	r0, r0, r2
   dc03c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc040:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc044:	bf08      	it	eq
   dc046:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc04a:	bd70      	pop	{r4, r5, r6, pc}
   dc04c:	f094 0f00 	teq	r4, #0
   dc050:	d10f      	bne.n	dc072 <__aeabi_dmul+0x1c2>
   dc052:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc056:	0040      	lsls	r0, r0, #1
   dc058:	eb41 0101 	adc.w	r1, r1, r1
   dc05c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc060:	bf08      	it	eq
   dc062:	3c01      	subeq	r4, #1
   dc064:	d0f7      	beq.n	dc056 <__aeabi_dmul+0x1a6>
   dc066:	ea41 0106 	orr.w	r1, r1, r6
   dc06a:	f095 0f00 	teq	r5, #0
   dc06e:	bf18      	it	ne
   dc070:	4770      	bxne	lr
   dc072:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc076:	0052      	lsls	r2, r2, #1
   dc078:	eb43 0303 	adc.w	r3, r3, r3
   dc07c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc080:	bf08      	it	eq
   dc082:	3d01      	subeq	r5, #1
   dc084:	d0f7      	beq.n	dc076 <__aeabi_dmul+0x1c6>
   dc086:	ea43 0306 	orr.w	r3, r3, r6
   dc08a:	4770      	bx	lr
   dc08c:	ea94 0f0c 	teq	r4, ip
   dc090:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc094:	bf18      	it	ne
   dc096:	ea95 0f0c 	teqne	r5, ip
   dc09a:	d00c      	beq.n	dc0b6 <__aeabi_dmul+0x206>
   dc09c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc0a0:	bf18      	it	ne
   dc0a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc0a6:	d1d1      	bne.n	dc04c <__aeabi_dmul+0x19c>
   dc0a8:	ea81 0103 	eor.w	r1, r1, r3
   dc0ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc0b0:	f04f 0000 	mov.w	r0, #0
   dc0b4:	bd70      	pop	{r4, r5, r6, pc}
   dc0b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc0ba:	bf06      	itte	eq
   dc0bc:	4610      	moveq	r0, r2
   dc0be:	4619      	moveq	r1, r3
   dc0c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc0c4:	d019      	beq.n	dc0fa <__aeabi_dmul+0x24a>
   dc0c6:	ea94 0f0c 	teq	r4, ip
   dc0ca:	d102      	bne.n	dc0d2 <__aeabi_dmul+0x222>
   dc0cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dc0d0:	d113      	bne.n	dc0fa <__aeabi_dmul+0x24a>
   dc0d2:	ea95 0f0c 	teq	r5, ip
   dc0d6:	d105      	bne.n	dc0e4 <__aeabi_dmul+0x234>
   dc0d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dc0dc:	bf1c      	itt	ne
   dc0de:	4610      	movne	r0, r2
   dc0e0:	4619      	movne	r1, r3
   dc0e2:	d10a      	bne.n	dc0fa <__aeabi_dmul+0x24a>
   dc0e4:	ea81 0103 	eor.w	r1, r1, r3
   dc0e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc0ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc0f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc0f4:	f04f 0000 	mov.w	r0, #0
   dc0f8:	bd70      	pop	{r4, r5, r6, pc}
   dc0fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc0fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dc102:	bd70      	pop	{r4, r5, r6, pc}

000dc104 <__aeabi_ddiv>:
   dc104:	b570      	push	{r4, r5, r6, lr}
   dc106:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc10a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc10e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc112:	bf1d      	ittte	ne
   dc114:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc118:	ea94 0f0c 	teqne	r4, ip
   dc11c:	ea95 0f0c 	teqne	r5, ip
   dc120:	f000 f8a7 	bleq	dc272 <__aeabi_ddiv+0x16e>
   dc124:	eba4 0405 	sub.w	r4, r4, r5
   dc128:	ea81 0e03 	eor.w	lr, r1, r3
   dc12c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc130:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc134:	f000 8088 	beq.w	dc248 <__aeabi_ddiv+0x144>
   dc138:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc13c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dc140:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dc144:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dc148:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dc14c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dc150:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dc154:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dc158:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dc15c:	429d      	cmp	r5, r3
   dc15e:	bf08      	it	eq
   dc160:	4296      	cmpeq	r6, r2
   dc162:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dc166:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dc16a:	d202      	bcs.n	dc172 <__aeabi_ddiv+0x6e>
   dc16c:	085b      	lsrs	r3, r3, #1
   dc16e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc172:	1ab6      	subs	r6, r6, r2
   dc174:	eb65 0503 	sbc.w	r5, r5, r3
   dc178:	085b      	lsrs	r3, r3, #1
   dc17a:	ea4f 0232 	mov.w	r2, r2, rrx
   dc17e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dc182:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dc186:	ebb6 0e02 	subs.w	lr, r6, r2
   dc18a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc18e:	bf22      	ittt	cs
   dc190:	1ab6      	subcs	r6, r6, r2
   dc192:	4675      	movcs	r5, lr
   dc194:	ea40 000c 	orrcs.w	r0, r0, ip
   dc198:	085b      	lsrs	r3, r3, #1
   dc19a:	ea4f 0232 	mov.w	r2, r2, rrx
   dc19e:	ebb6 0e02 	subs.w	lr, r6, r2
   dc1a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc1a6:	bf22      	ittt	cs
   dc1a8:	1ab6      	subcs	r6, r6, r2
   dc1aa:	4675      	movcs	r5, lr
   dc1ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dc1b0:	085b      	lsrs	r3, r3, #1
   dc1b2:	ea4f 0232 	mov.w	r2, r2, rrx
   dc1b6:	ebb6 0e02 	subs.w	lr, r6, r2
   dc1ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc1be:	bf22      	ittt	cs
   dc1c0:	1ab6      	subcs	r6, r6, r2
   dc1c2:	4675      	movcs	r5, lr
   dc1c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dc1c8:	085b      	lsrs	r3, r3, #1
   dc1ca:	ea4f 0232 	mov.w	r2, r2, rrx
   dc1ce:	ebb6 0e02 	subs.w	lr, r6, r2
   dc1d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc1d6:	bf22      	ittt	cs
   dc1d8:	1ab6      	subcs	r6, r6, r2
   dc1da:	4675      	movcs	r5, lr
   dc1dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dc1e0:	ea55 0e06 	orrs.w	lr, r5, r6
   dc1e4:	d018      	beq.n	dc218 <__aeabi_ddiv+0x114>
   dc1e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc1ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc1ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc1f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc1f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc1fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc1fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc202:	d1c0      	bne.n	dc186 <__aeabi_ddiv+0x82>
   dc204:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc208:	d10b      	bne.n	dc222 <__aeabi_ddiv+0x11e>
   dc20a:	ea41 0100 	orr.w	r1, r1, r0
   dc20e:	f04f 0000 	mov.w	r0, #0
   dc212:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc216:	e7b6      	b.n	dc186 <__aeabi_ddiv+0x82>
   dc218:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc21c:	bf04      	itt	eq
   dc21e:	4301      	orreq	r1, r0
   dc220:	2000      	moveq	r0, #0
   dc222:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc226:	bf88      	it	hi
   dc228:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc22c:	f63f aeaf 	bhi.w	dbf8e <__aeabi_dmul+0xde>
   dc230:	ebb5 0c03 	subs.w	ip, r5, r3
   dc234:	bf04      	itt	eq
   dc236:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc23a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc23e:	f150 0000 	adcs.w	r0, r0, #0
   dc242:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc246:	bd70      	pop	{r4, r5, r6, pc}
   dc248:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dc24c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dc250:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dc254:	bfc2      	ittt	gt
   dc256:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc25a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc25e:	bd70      	popgt	{r4, r5, r6, pc}
   dc260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc264:	f04f 0e00 	mov.w	lr, #0
   dc268:	3c01      	subs	r4, #1
   dc26a:	e690      	b.n	dbf8e <__aeabi_dmul+0xde>
   dc26c:	ea45 0e06 	orr.w	lr, r5, r6
   dc270:	e68d      	b.n	dbf8e <__aeabi_dmul+0xde>
   dc272:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc276:	ea94 0f0c 	teq	r4, ip
   dc27a:	bf08      	it	eq
   dc27c:	ea95 0f0c 	teqeq	r5, ip
   dc280:	f43f af3b 	beq.w	dc0fa <__aeabi_dmul+0x24a>
   dc284:	ea94 0f0c 	teq	r4, ip
   dc288:	d10a      	bne.n	dc2a0 <__aeabi_ddiv+0x19c>
   dc28a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc28e:	f47f af34 	bne.w	dc0fa <__aeabi_dmul+0x24a>
   dc292:	ea95 0f0c 	teq	r5, ip
   dc296:	f47f af25 	bne.w	dc0e4 <__aeabi_dmul+0x234>
   dc29a:	4610      	mov	r0, r2
   dc29c:	4619      	mov	r1, r3
   dc29e:	e72c      	b.n	dc0fa <__aeabi_dmul+0x24a>
   dc2a0:	ea95 0f0c 	teq	r5, ip
   dc2a4:	d106      	bne.n	dc2b4 <__aeabi_ddiv+0x1b0>
   dc2a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc2aa:	f43f aefd 	beq.w	dc0a8 <__aeabi_dmul+0x1f8>
   dc2ae:	4610      	mov	r0, r2
   dc2b0:	4619      	mov	r1, r3
   dc2b2:	e722      	b.n	dc0fa <__aeabi_dmul+0x24a>
   dc2b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc2b8:	bf18      	it	ne
   dc2ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc2be:	f47f aec5 	bne.w	dc04c <__aeabi_dmul+0x19c>
   dc2c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc2c6:	f47f af0d 	bne.w	dc0e4 <__aeabi_dmul+0x234>
   dc2ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc2ce:	f47f aeeb 	bne.w	dc0a8 <__aeabi_dmul+0x1f8>
   dc2d2:	e712      	b.n	dc0fa <__aeabi_dmul+0x24a>

000dc2d4 <__gedf2>:
   dc2d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc2d8:	e006      	b.n	dc2e8 <__cmpdf2+0x4>
   dc2da:	bf00      	nop

000dc2dc <__ledf2>:
   dc2dc:	f04f 0c01 	mov.w	ip, #1
   dc2e0:	e002      	b.n	dc2e8 <__cmpdf2+0x4>
   dc2e2:	bf00      	nop

000dc2e4 <__cmpdf2>:
   dc2e4:	f04f 0c01 	mov.w	ip, #1
   dc2e8:	f84d cd04 	str.w	ip, [sp, #-4]!
   dc2ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc2f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc2f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc2f8:	bf18      	it	ne
   dc2fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dc2fe:	d01b      	beq.n	dc338 <__cmpdf2+0x54>
   dc300:	b001      	add	sp, #4
   dc302:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dc306:	bf0c      	ite	eq
   dc308:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dc30c:	ea91 0f03 	teqne	r1, r3
   dc310:	bf02      	ittt	eq
   dc312:	ea90 0f02 	teqeq	r0, r2
   dc316:	2000      	moveq	r0, #0
   dc318:	4770      	bxeq	lr
   dc31a:	f110 0f00 	cmn.w	r0, #0
   dc31e:	ea91 0f03 	teq	r1, r3
   dc322:	bf58      	it	pl
   dc324:	4299      	cmppl	r1, r3
   dc326:	bf08      	it	eq
   dc328:	4290      	cmpeq	r0, r2
   dc32a:	bf2c      	ite	cs
   dc32c:	17d8      	asrcs	r0, r3, #31
   dc32e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dc332:	f040 0001 	orr.w	r0, r0, #1
   dc336:	4770      	bx	lr
   dc338:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc33c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc340:	d102      	bne.n	dc348 <__cmpdf2+0x64>
   dc342:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc346:	d107      	bne.n	dc358 <__cmpdf2+0x74>
   dc348:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc34c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc350:	d1d6      	bne.n	dc300 <__cmpdf2+0x1c>
   dc352:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc356:	d0d3      	beq.n	dc300 <__cmpdf2+0x1c>
   dc358:	f85d 0b04 	ldr.w	r0, [sp], #4
   dc35c:	4770      	bx	lr
   dc35e:	bf00      	nop

000dc360 <__aeabi_cdrcmple>:
   dc360:	4684      	mov	ip, r0
   dc362:	4610      	mov	r0, r2
   dc364:	4662      	mov	r2, ip
   dc366:	468c      	mov	ip, r1
   dc368:	4619      	mov	r1, r3
   dc36a:	4663      	mov	r3, ip
   dc36c:	e000      	b.n	dc370 <__aeabi_cdcmpeq>
   dc36e:	bf00      	nop

000dc370 <__aeabi_cdcmpeq>:
   dc370:	b501      	push	{r0, lr}
   dc372:	f7ff ffb7 	bl	dc2e4 <__cmpdf2>
   dc376:	2800      	cmp	r0, #0
   dc378:	bf48      	it	mi
   dc37a:	f110 0f00 	cmnmi.w	r0, #0
   dc37e:	bd01      	pop	{r0, pc}

000dc380 <__aeabi_dcmpeq>:
   dc380:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc384:	f7ff fff4 	bl	dc370 <__aeabi_cdcmpeq>
   dc388:	bf0c      	ite	eq
   dc38a:	2001      	moveq	r0, #1
   dc38c:	2000      	movne	r0, #0
   dc38e:	f85d fb08 	ldr.w	pc, [sp], #8
   dc392:	bf00      	nop

000dc394 <__aeabi_dcmplt>:
   dc394:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc398:	f7ff ffea 	bl	dc370 <__aeabi_cdcmpeq>
   dc39c:	bf34      	ite	cc
   dc39e:	2001      	movcc	r0, #1
   dc3a0:	2000      	movcs	r0, #0
   dc3a2:	f85d fb08 	ldr.w	pc, [sp], #8
   dc3a6:	bf00      	nop

000dc3a8 <__aeabi_dcmple>:
   dc3a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc3ac:	f7ff ffe0 	bl	dc370 <__aeabi_cdcmpeq>
   dc3b0:	bf94      	ite	ls
   dc3b2:	2001      	movls	r0, #1
   dc3b4:	2000      	movhi	r0, #0
   dc3b6:	f85d fb08 	ldr.w	pc, [sp], #8
   dc3ba:	bf00      	nop

000dc3bc <__aeabi_dcmpge>:
   dc3bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc3c0:	f7ff ffce 	bl	dc360 <__aeabi_cdrcmple>
   dc3c4:	bf94      	ite	ls
   dc3c6:	2001      	movls	r0, #1
   dc3c8:	2000      	movhi	r0, #0
   dc3ca:	f85d fb08 	ldr.w	pc, [sp], #8
   dc3ce:	bf00      	nop

000dc3d0 <__aeabi_dcmpgt>:
   dc3d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc3d4:	f7ff ffc4 	bl	dc360 <__aeabi_cdrcmple>
   dc3d8:	bf34      	ite	cc
   dc3da:	2001      	movcc	r0, #1
   dc3dc:	2000      	movcs	r0, #0
   dc3de:	f85d fb08 	ldr.w	pc, [sp], #8
   dc3e2:	bf00      	nop

000dc3e4 <__aeabi_d2iz>:
   dc3e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc3e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc3ec:	d215      	bcs.n	dc41a <__aeabi_d2iz+0x36>
   dc3ee:	d511      	bpl.n	dc414 <__aeabi_d2iz+0x30>
   dc3f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc3f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc3f8:	d912      	bls.n	dc420 <__aeabi_d2iz+0x3c>
   dc3fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc3fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc402:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc406:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc40a:	fa23 f002 	lsr.w	r0, r3, r2
   dc40e:	bf18      	it	ne
   dc410:	4240      	negne	r0, r0
   dc412:	4770      	bx	lr
   dc414:	f04f 0000 	mov.w	r0, #0
   dc418:	4770      	bx	lr
   dc41a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc41e:	d105      	bne.n	dc42c <__aeabi_d2iz+0x48>
   dc420:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dc424:	bf08      	it	eq
   dc426:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc42a:	4770      	bx	lr
   dc42c:	f04f 0000 	mov.w	r0, #0
   dc430:	4770      	bx	lr
   dc432:	bf00      	nop

000dc434 <__aeabi_d2uiz>:
   dc434:	004a      	lsls	r2, r1, #1
   dc436:	d211      	bcs.n	dc45c <__aeabi_d2uiz+0x28>
   dc438:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc43c:	d211      	bcs.n	dc462 <__aeabi_d2uiz+0x2e>
   dc43e:	d50d      	bpl.n	dc45c <__aeabi_d2uiz+0x28>
   dc440:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc444:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc448:	d40e      	bmi.n	dc468 <__aeabi_d2uiz+0x34>
   dc44a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc44e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc452:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc456:	fa23 f002 	lsr.w	r0, r3, r2
   dc45a:	4770      	bx	lr
   dc45c:	f04f 0000 	mov.w	r0, #0
   dc460:	4770      	bx	lr
   dc462:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc466:	d102      	bne.n	dc46e <__aeabi_d2uiz+0x3a>
   dc468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc46c:	4770      	bx	lr
   dc46e:	f04f 0000 	mov.w	r0, #0
   dc472:	4770      	bx	lr

000dc474 <__aeabi_d2f>:
   dc474:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc478:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dc47c:	bf24      	itt	cs
   dc47e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dc482:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dc486:	d90d      	bls.n	dc4a4 <__aeabi_d2f+0x30>
   dc488:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dc48c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dc490:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dc494:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dc498:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dc49c:	bf08      	it	eq
   dc49e:	f020 0001 	biceq.w	r0, r0, #1
   dc4a2:	4770      	bx	lr
   dc4a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dc4a8:	d121      	bne.n	dc4ee <__aeabi_d2f+0x7a>
   dc4aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dc4ae:	bfbc      	itt	lt
   dc4b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dc4b4:	4770      	bxlt	lr
   dc4b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc4ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dc4be:	f1c2 0218 	rsb	r2, r2, #24
   dc4c2:	f1c2 0c20 	rsb	ip, r2, #32
   dc4c6:	fa10 f30c 	lsls.w	r3, r0, ip
   dc4ca:	fa20 f002 	lsr.w	r0, r0, r2
   dc4ce:	bf18      	it	ne
   dc4d0:	f040 0001 	orrne.w	r0, r0, #1
   dc4d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc4d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dc4dc:	fa03 fc0c 	lsl.w	ip, r3, ip
   dc4e0:	ea40 000c 	orr.w	r0, r0, ip
   dc4e4:	fa23 f302 	lsr.w	r3, r3, r2
   dc4e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dc4ec:	e7cc      	b.n	dc488 <__aeabi_d2f+0x14>
   dc4ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dc4f2:	d107      	bne.n	dc504 <__aeabi_d2f+0x90>
   dc4f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dc4f8:	bf1e      	ittt	ne
   dc4fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dc4fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dc502:	4770      	bxne	lr
   dc504:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dc508:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dc50c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc510:	4770      	bx	lr
   dc512:	bf00      	nop

000dc514 <__aeabi_uldivmod>:
   dc514:	b953      	cbnz	r3, dc52c <__aeabi_uldivmod+0x18>
   dc516:	b94a      	cbnz	r2, dc52c <__aeabi_uldivmod+0x18>
   dc518:	2900      	cmp	r1, #0
   dc51a:	bf08      	it	eq
   dc51c:	2800      	cmpeq	r0, #0
   dc51e:	bf1c      	itt	ne
   dc520:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   dc524:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   dc528:	f000 b9c0 	b.w	dc8ac <__aeabi_idiv0>
   dc52c:	f1ad 0c08 	sub.w	ip, sp, #8
   dc530:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dc534:	f000 f858 	bl	dc5e8 <__udivmoddi4>
   dc538:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc53c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc540:	b004      	add	sp, #16
   dc542:	4770      	bx	lr

000dc544 <__aeabi_f2lz>:
   dc544:	ee07 0a90 	vmov	s15, r0
   dc548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc550:	d401      	bmi.n	dc556 <__aeabi_f2lz+0x12>
   dc552:	f000 b80b 	b.w	dc56c <__aeabi_f2ulz>
   dc556:	eef1 7a67 	vneg.f32	s15, s15
   dc55a:	b508      	push	{r3, lr}
   dc55c:	ee17 0a90 	vmov	r0, s15
   dc560:	f000 f804 	bl	dc56c <__aeabi_f2ulz>
   dc564:	4240      	negs	r0, r0
   dc566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc56a:	bd08      	pop	{r3, pc}

000dc56c <__aeabi_f2ulz>:
   dc56c:	b5d0      	push	{r4, r6, r7, lr}
   dc56e:	f7ff fc47 	bl	dbe00 <__aeabi_f2d>
   dc572:	4b0c      	ldr	r3, [pc, #48]	; (dc5a4 <__aeabi_f2ulz+0x38>)
   dc574:	2200      	movs	r2, #0
   dc576:	4606      	mov	r6, r0
   dc578:	460f      	mov	r7, r1
   dc57a:	f7ff fc99 	bl	dbeb0 <__aeabi_dmul>
   dc57e:	f7ff ff59 	bl	dc434 <__aeabi_d2uiz>
   dc582:	4604      	mov	r4, r0
   dc584:	f7ff fc1a 	bl	dbdbc <__aeabi_ui2d>
   dc588:	4b07      	ldr	r3, [pc, #28]	; (dc5a8 <__aeabi_f2ulz+0x3c>)
   dc58a:	2200      	movs	r2, #0
   dc58c:	f7ff fc90 	bl	dbeb0 <__aeabi_dmul>
   dc590:	4602      	mov	r2, r0
   dc592:	460b      	mov	r3, r1
   dc594:	4630      	mov	r0, r6
   dc596:	4639      	mov	r1, r7
   dc598:	f7ff fad2 	bl	dbb40 <__aeabi_dsub>
   dc59c:	f7ff ff4a 	bl	dc434 <__aeabi_d2uiz>
   dc5a0:	4621      	mov	r1, r4
   dc5a2:	bdd0      	pop	{r4, r6, r7, pc}
   dc5a4:	3df00000 	.word	0x3df00000
   dc5a8:	41f00000 	.word	0x41f00000

000dc5ac <__aeabi_d2ulz>:
   dc5ac:	b5d0      	push	{r4, r6, r7, lr}
   dc5ae:	4b0c      	ldr	r3, [pc, #48]	; (dc5e0 <__aeabi_d2ulz+0x34>)
   dc5b0:	2200      	movs	r2, #0
   dc5b2:	4606      	mov	r6, r0
   dc5b4:	460f      	mov	r7, r1
   dc5b6:	f7ff fc7b 	bl	dbeb0 <__aeabi_dmul>
   dc5ba:	f7ff ff3b 	bl	dc434 <__aeabi_d2uiz>
   dc5be:	4604      	mov	r4, r0
   dc5c0:	f7ff fbfc 	bl	dbdbc <__aeabi_ui2d>
   dc5c4:	4b07      	ldr	r3, [pc, #28]	; (dc5e4 <__aeabi_d2ulz+0x38>)
   dc5c6:	2200      	movs	r2, #0
   dc5c8:	f7ff fc72 	bl	dbeb0 <__aeabi_dmul>
   dc5cc:	4602      	mov	r2, r0
   dc5ce:	460b      	mov	r3, r1
   dc5d0:	4630      	mov	r0, r6
   dc5d2:	4639      	mov	r1, r7
   dc5d4:	f7ff fab4 	bl	dbb40 <__aeabi_dsub>
   dc5d8:	f7ff ff2c 	bl	dc434 <__aeabi_d2uiz>
   dc5dc:	4621      	mov	r1, r4
   dc5de:	bdd0      	pop	{r4, r6, r7, pc}
   dc5e0:	3df00000 	.word	0x3df00000
   dc5e4:	41f00000 	.word	0x41f00000

000dc5e8 <__udivmoddi4>:
   dc5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc5ec:	9d08      	ldr	r5, [sp, #32]
   dc5ee:	4604      	mov	r4, r0
   dc5f0:	468c      	mov	ip, r1
   dc5f2:	2b00      	cmp	r3, #0
   dc5f4:	f040 8083 	bne.w	dc6fe <__udivmoddi4+0x116>
   dc5f8:	428a      	cmp	r2, r1
   dc5fa:	4617      	mov	r7, r2
   dc5fc:	d947      	bls.n	dc68e <__udivmoddi4+0xa6>
   dc5fe:	fab2 f282 	clz	r2, r2
   dc602:	b142      	cbz	r2, dc616 <__udivmoddi4+0x2e>
   dc604:	f1c2 0020 	rsb	r0, r2, #32
   dc608:	fa24 f000 	lsr.w	r0, r4, r0
   dc60c:	4091      	lsls	r1, r2
   dc60e:	4097      	lsls	r7, r2
   dc610:	ea40 0c01 	orr.w	ip, r0, r1
   dc614:	4094      	lsls	r4, r2
   dc616:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dc61a:	0c23      	lsrs	r3, r4, #16
   dc61c:	fbbc f6f8 	udiv	r6, ip, r8
   dc620:	fa1f fe87 	uxth.w	lr, r7
   dc624:	fb08 c116 	mls	r1, r8, r6, ip
   dc628:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dc62c:	fb06 f10e 	mul.w	r1, r6, lr
   dc630:	4299      	cmp	r1, r3
   dc632:	d909      	bls.n	dc648 <__udivmoddi4+0x60>
   dc634:	18fb      	adds	r3, r7, r3
   dc636:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   dc63a:	f080 8119 	bcs.w	dc870 <__udivmoddi4+0x288>
   dc63e:	4299      	cmp	r1, r3
   dc640:	f240 8116 	bls.w	dc870 <__udivmoddi4+0x288>
   dc644:	3e02      	subs	r6, #2
   dc646:	443b      	add	r3, r7
   dc648:	1a5b      	subs	r3, r3, r1
   dc64a:	b2a4      	uxth	r4, r4
   dc64c:	fbb3 f0f8 	udiv	r0, r3, r8
   dc650:	fb08 3310 	mls	r3, r8, r0, r3
   dc654:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dc658:	fb00 fe0e 	mul.w	lr, r0, lr
   dc65c:	45a6      	cmp	lr, r4
   dc65e:	d909      	bls.n	dc674 <__udivmoddi4+0x8c>
   dc660:	193c      	adds	r4, r7, r4
   dc662:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc666:	f080 8105 	bcs.w	dc874 <__udivmoddi4+0x28c>
   dc66a:	45a6      	cmp	lr, r4
   dc66c:	f240 8102 	bls.w	dc874 <__udivmoddi4+0x28c>
   dc670:	3802      	subs	r0, #2
   dc672:	443c      	add	r4, r7
   dc674:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dc678:	eba4 040e 	sub.w	r4, r4, lr
   dc67c:	2600      	movs	r6, #0
   dc67e:	b11d      	cbz	r5, dc688 <__udivmoddi4+0xa0>
   dc680:	40d4      	lsrs	r4, r2
   dc682:	2300      	movs	r3, #0
   dc684:	e9c5 4300 	strd	r4, r3, [r5]
   dc688:	4631      	mov	r1, r6
   dc68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc68e:	b902      	cbnz	r2, dc692 <__udivmoddi4+0xaa>
   dc690:	deff      	udf	#255	; 0xff
   dc692:	fab2 f282 	clz	r2, r2
   dc696:	2a00      	cmp	r2, #0
   dc698:	d150      	bne.n	dc73c <__udivmoddi4+0x154>
   dc69a:	1bcb      	subs	r3, r1, r7
   dc69c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dc6a0:	fa1f f887 	uxth.w	r8, r7
   dc6a4:	2601      	movs	r6, #1
   dc6a6:	fbb3 fcfe 	udiv	ip, r3, lr
   dc6aa:	0c21      	lsrs	r1, r4, #16
   dc6ac:	fb0e 331c 	mls	r3, lr, ip, r3
   dc6b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dc6b4:	fb08 f30c 	mul.w	r3, r8, ip
   dc6b8:	428b      	cmp	r3, r1
   dc6ba:	d907      	bls.n	dc6cc <__udivmoddi4+0xe4>
   dc6bc:	1879      	adds	r1, r7, r1
   dc6be:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   dc6c2:	d202      	bcs.n	dc6ca <__udivmoddi4+0xe2>
   dc6c4:	428b      	cmp	r3, r1
   dc6c6:	f200 80e9 	bhi.w	dc89c <__udivmoddi4+0x2b4>
   dc6ca:	4684      	mov	ip, r0
   dc6cc:	1ac9      	subs	r1, r1, r3
   dc6ce:	b2a3      	uxth	r3, r4
   dc6d0:	fbb1 f0fe 	udiv	r0, r1, lr
   dc6d4:	fb0e 1110 	mls	r1, lr, r0, r1
   dc6d8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dc6dc:	fb08 f800 	mul.w	r8, r8, r0
   dc6e0:	45a0      	cmp	r8, r4
   dc6e2:	d907      	bls.n	dc6f4 <__udivmoddi4+0x10c>
   dc6e4:	193c      	adds	r4, r7, r4
   dc6e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc6ea:	d202      	bcs.n	dc6f2 <__udivmoddi4+0x10a>
   dc6ec:	45a0      	cmp	r8, r4
   dc6ee:	f200 80d9 	bhi.w	dc8a4 <__udivmoddi4+0x2bc>
   dc6f2:	4618      	mov	r0, r3
   dc6f4:	eba4 0408 	sub.w	r4, r4, r8
   dc6f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dc6fc:	e7bf      	b.n	dc67e <__udivmoddi4+0x96>
   dc6fe:	428b      	cmp	r3, r1
   dc700:	d909      	bls.n	dc716 <__udivmoddi4+0x12e>
   dc702:	2d00      	cmp	r5, #0
   dc704:	f000 80b1 	beq.w	dc86a <__udivmoddi4+0x282>
   dc708:	2600      	movs	r6, #0
   dc70a:	e9c5 0100 	strd	r0, r1, [r5]
   dc70e:	4630      	mov	r0, r6
   dc710:	4631      	mov	r1, r6
   dc712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc716:	fab3 f683 	clz	r6, r3
   dc71a:	2e00      	cmp	r6, #0
   dc71c:	d14a      	bne.n	dc7b4 <__udivmoddi4+0x1cc>
   dc71e:	428b      	cmp	r3, r1
   dc720:	d302      	bcc.n	dc728 <__udivmoddi4+0x140>
   dc722:	4282      	cmp	r2, r0
   dc724:	f200 80b8 	bhi.w	dc898 <__udivmoddi4+0x2b0>
   dc728:	1a84      	subs	r4, r0, r2
   dc72a:	eb61 0103 	sbc.w	r1, r1, r3
   dc72e:	2001      	movs	r0, #1
   dc730:	468c      	mov	ip, r1
   dc732:	2d00      	cmp	r5, #0
   dc734:	d0a8      	beq.n	dc688 <__udivmoddi4+0xa0>
   dc736:	e9c5 4c00 	strd	r4, ip, [r5]
   dc73a:	e7a5      	b.n	dc688 <__udivmoddi4+0xa0>
   dc73c:	f1c2 0320 	rsb	r3, r2, #32
   dc740:	fa20 f603 	lsr.w	r6, r0, r3
   dc744:	4097      	lsls	r7, r2
   dc746:	fa01 f002 	lsl.w	r0, r1, r2
   dc74a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dc74e:	40d9      	lsrs	r1, r3
   dc750:	4330      	orrs	r0, r6
   dc752:	0c03      	lsrs	r3, r0, #16
   dc754:	fbb1 f6fe 	udiv	r6, r1, lr
   dc758:	fa1f f887 	uxth.w	r8, r7
   dc75c:	fb0e 1116 	mls	r1, lr, r6, r1
   dc760:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dc764:	fb06 f108 	mul.w	r1, r6, r8
   dc768:	4299      	cmp	r1, r3
   dc76a:	fa04 f402 	lsl.w	r4, r4, r2
   dc76e:	d909      	bls.n	dc784 <__udivmoddi4+0x19c>
   dc770:	18fb      	adds	r3, r7, r3
   dc772:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   dc776:	f080 808d 	bcs.w	dc894 <__udivmoddi4+0x2ac>
   dc77a:	4299      	cmp	r1, r3
   dc77c:	f240 808a 	bls.w	dc894 <__udivmoddi4+0x2ac>
   dc780:	3e02      	subs	r6, #2
   dc782:	443b      	add	r3, r7
   dc784:	1a5b      	subs	r3, r3, r1
   dc786:	b281      	uxth	r1, r0
   dc788:	fbb3 f0fe 	udiv	r0, r3, lr
   dc78c:	fb0e 3310 	mls	r3, lr, r0, r3
   dc790:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dc794:	fb00 f308 	mul.w	r3, r0, r8
   dc798:	428b      	cmp	r3, r1
   dc79a:	d907      	bls.n	dc7ac <__udivmoddi4+0x1c4>
   dc79c:	1879      	adds	r1, r7, r1
   dc79e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   dc7a2:	d273      	bcs.n	dc88c <__udivmoddi4+0x2a4>
   dc7a4:	428b      	cmp	r3, r1
   dc7a6:	d971      	bls.n	dc88c <__udivmoddi4+0x2a4>
   dc7a8:	3802      	subs	r0, #2
   dc7aa:	4439      	add	r1, r7
   dc7ac:	1acb      	subs	r3, r1, r3
   dc7ae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dc7b2:	e778      	b.n	dc6a6 <__udivmoddi4+0xbe>
   dc7b4:	f1c6 0c20 	rsb	ip, r6, #32
   dc7b8:	fa03 f406 	lsl.w	r4, r3, r6
   dc7bc:	fa22 f30c 	lsr.w	r3, r2, ip
   dc7c0:	431c      	orrs	r4, r3
   dc7c2:	fa20 f70c 	lsr.w	r7, r0, ip
   dc7c6:	fa01 f306 	lsl.w	r3, r1, r6
   dc7ca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dc7ce:	fa21 f10c 	lsr.w	r1, r1, ip
   dc7d2:	431f      	orrs	r7, r3
   dc7d4:	0c3b      	lsrs	r3, r7, #16
   dc7d6:	fbb1 f9fe 	udiv	r9, r1, lr
   dc7da:	fa1f f884 	uxth.w	r8, r4
   dc7de:	fb0e 1119 	mls	r1, lr, r9, r1
   dc7e2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dc7e6:	fb09 fa08 	mul.w	sl, r9, r8
   dc7ea:	458a      	cmp	sl, r1
   dc7ec:	fa02 f206 	lsl.w	r2, r2, r6
   dc7f0:	fa00 f306 	lsl.w	r3, r0, r6
   dc7f4:	d908      	bls.n	dc808 <__udivmoddi4+0x220>
   dc7f6:	1861      	adds	r1, r4, r1
   dc7f8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   dc7fc:	d248      	bcs.n	dc890 <__udivmoddi4+0x2a8>
   dc7fe:	458a      	cmp	sl, r1
   dc800:	d946      	bls.n	dc890 <__udivmoddi4+0x2a8>
   dc802:	f1a9 0902 	sub.w	r9, r9, #2
   dc806:	4421      	add	r1, r4
   dc808:	eba1 010a 	sub.w	r1, r1, sl
   dc80c:	b2bf      	uxth	r7, r7
   dc80e:	fbb1 f0fe 	udiv	r0, r1, lr
   dc812:	fb0e 1110 	mls	r1, lr, r0, r1
   dc816:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dc81a:	fb00 f808 	mul.w	r8, r0, r8
   dc81e:	45b8      	cmp	r8, r7
   dc820:	d907      	bls.n	dc832 <__udivmoddi4+0x24a>
   dc822:	19e7      	adds	r7, r4, r7
   dc824:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   dc828:	d22e      	bcs.n	dc888 <__udivmoddi4+0x2a0>
   dc82a:	45b8      	cmp	r8, r7
   dc82c:	d92c      	bls.n	dc888 <__udivmoddi4+0x2a0>
   dc82e:	3802      	subs	r0, #2
   dc830:	4427      	add	r7, r4
   dc832:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dc836:	eba7 0708 	sub.w	r7, r7, r8
   dc83a:	fba0 8902 	umull	r8, r9, r0, r2
   dc83e:	454f      	cmp	r7, r9
   dc840:	46c6      	mov	lr, r8
   dc842:	4649      	mov	r1, r9
   dc844:	d31a      	bcc.n	dc87c <__udivmoddi4+0x294>
   dc846:	d017      	beq.n	dc878 <__udivmoddi4+0x290>
   dc848:	b15d      	cbz	r5, dc862 <__udivmoddi4+0x27a>
   dc84a:	ebb3 020e 	subs.w	r2, r3, lr
   dc84e:	eb67 0701 	sbc.w	r7, r7, r1
   dc852:	fa07 fc0c 	lsl.w	ip, r7, ip
   dc856:	40f2      	lsrs	r2, r6
   dc858:	ea4c 0202 	orr.w	r2, ip, r2
   dc85c:	40f7      	lsrs	r7, r6
   dc85e:	e9c5 2700 	strd	r2, r7, [r5]
   dc862:	2600      	movs	r6, #0
   dc864:	4631      	mov	r1, r6
   dc866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc86a:	462e      	mov	r6, r5
   dc86c:	4628      	mov	r0, r5
   dc86e:	e70b      	b.n	dc688 <__udivmoddi4+0xa0>
   dc870:	4606      	mov	r6, r0
   dc872:	e6e9      	b.n	dc648 <__udivmoddi4+0x60>
   dc874:	4618      	mov	r0, r3
   dc876:	e6fd      	b.n	dc674 <__udivmoddi4+0x8c>
   dc878:	4543      	cmp	r3, r8
   dc87a:	d2e5      	bcs.n	dc848 <__udivmoddi4+0x260>
   dc87c:	ebb8 0e02 	subs.w	lr, r8, r2
   dc880:	eb69 0104 	sbc.w	r1, r9, r4
   dc884:	3801      	subs	r0, #1
   dc886:	e7df      	b.n	dc848 <__udivmoddi4+0x260>
   dc888:	4608      	mov	r0, r1
   dc88a:	e7d2      	b.n	dc832 <__udivmoddi4+0x24a>
   dc88c:	4660      	mov	r0, ip
   dc88e:	e78d      	b.n	dc7ac <__udivmoddi4+0x1c4>
   dc890:	4681      	mov	r9, r0
   dc892:	e7b9      	b.n	dc808 <__udivmoddi4+0x220>
   dc894:	4666      	mov	r6, ip
   dc896:	e775      	b.n	dc784 <__udivmoddi4+0x19c>
   dc898:	4630      	mov	r0, r6
   dc89a:	e74a      	b.n	dc732 <__udivmoddi4+0x14a>
   dc89c:	f1ac 0c02 	sub.w	ip, ip, #2
   dc8a0:	4439      	add	r1, r7
   dc8a2:	e713      	b.n	dc6cc <__udivmoddi4+0xe4>
   dc8a4:	3802      	subs	r0, #2
   dc8a6:	443c      	add	r4, r7
   dc8a8:	e724      	b.n	dc6f4 <__udivmoddi4+0x10c>
   dc8aa:	bf00      	nop

000dc8ac <__aeabi_idiv0>:
   dc8ac:	4770      	bx	lr
   dc8ae:	bf00      	nop

000dc8b0 <asctime_r>:
   dc8b0:	b510      	push	{r4, lr}
   dc8b2:	460c      	mov	r4, r1
   dc8b4:	6941      	ldr	r1, [r0, #20]
   dc8b6:	6903      	ldr	r3, [r0, #16]
   dc8b8:	6982      	ldr	r2, [r0, #24]
   dc8ba:	b086      	sub	sp, #24
   dc8bc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dc8c0:	9104      	str	r1, [sp, #16]
   dc8c2:	6801      	ldr	r1, [r0, #0]
   dc8c4:	9103      	str	r1, [sp, #12]
   dc8c6:	6841      	ldr	r1, [r0, #4]
   dc8c8:	9102      	str	r1, [sp, #8]
   dc8ca:	6881      	ldr	r1, [r0, #8]
   dc8cc:	9101      	str	r1, [sp, #4]
   dc8ce:	68c1      	ldr	r1, [r0, #12]
   dc8d0:	9100      	str	r1, [sp, #0]
   dc8d2:	4907      	ldr	r1, [pc, #28]	; (dc8f0 <asctime_r+0x40>)
   dc8d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dc8d8:	440b      	add	r3, r1
   dc8da:	4906      	ldr	r1, [pc, #24]	; (dc8f4 <asctime_r+0x44>)
   dc8dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dc8e0:	440a      	add	r2, r1
   dc8e2:	4620      	mov	r0, r4
   dc8e4:	4904      	ldr	r1, [pc, #16]	; (dc8f8 <asctime_r+0x48>)
   dc8e6:	f7fb fe27 	bl	d8538 <siprintf>
   dc8ea:	4620      	mov	r0, r4
   dc8ec:	b006      	add	sp, #24
   dc8ee:	bd10      	pop	{r4, pc}
   dc8f0:	000dd97a 	.word	0x000dd97a
   dc8f4:	000dd965 	.word	0x000dd965
   dc8f8:	000dd945 	.word	0x000dd945

000dc8fc <atoi>:
   dc8fc:	220a      	movs	r2, #10
   dc8fe:	2100      	movs	r1, #0
   dc900:	f000 b976 	b.w	dcbf0 <strtol>

000dc904 <__cxa_atexit>:
   dc904:	b510      	push	{r4, lr}
   dc906:	4c05      	ldr	r4, [pc, #20]	; (dc91c <__cxa_atexit+0x18>)
   dc908:	4613      	mov	r3, r2
   dc90a:	b12c      	cbz	r4, dc918 <__cxa_atexit+0x14>
   dc90c:	460a      	mov	r2, r1
   dc90e:	4601      	mov	r1, r0
   dc910:	2002      	movs	r0, #2
   dc912:	f3af 8000 	nop.w
   dc916:	bd10      	pop	{r4, pc}
   dc918:	4620      	mov	r0, r4
   dc91a:	e7fc      	b.n	dc916 <__cxa_atexit+0x12>
   dc91c:	00000000 	.word	0x00000000

000dc920 <gmtime>:
   dc920:	b538      	push	{r3, r4, r5, lr}
   dc922:	4b07      	ldr	r3, [pc, #28]	; (dc940 <gmtime+0x20>)
   dc924:	681d      	ldr	r5, [r3, #0]
   dc926:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dc928:	4604      	mov	r4, r0
   dc92a:	b91b      	cbnz	r3, dc934 <gmtime+0x14>
   dc92c:	2024      	movs	r0, #36	; 0x24
   dc92e:	f7fb fdeb 	bl	d8508 <malloc>
   dc932:	63e8      	str	r0, [r5, #60]	; 0x3c
   dc934:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dc936:	4620      	mov	r0, r4
   dc938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc93c:	f7fb be3c 	b.w	d85b8 <gmtime_r>
   dc940:	2003e298 	.word	0x2003e298

000dc944 <memcpy>:
   dc944:	440a      	add	r2, r1
   dc946:	4291      	cmp	r1, r2
   dc948:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc94c:	d100      	bne.n	dc950 <memcpy+0xc>
   dc94e:	4770      	bx	lr
   dc950:	b510      	push	{r4, lr}
   dc952:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc956:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc95a:	4291      	cmp	r1, r2
   dc95c:	d1f9      	bne.n	dc952 <memcpy+0xe>
   dc95e:	bd10      	pop	{r4, pc}

000dc960 <memmove>:
   dc960:	4288      	cmp	r0, r1
   dc962:	b510      	push	{r4, lr}
   dc964:	eb01 0402 	add.w	r4, r1, r2
   dc968:	d902      	bls.n	dc970 <memmove+0x10>
   dc96a:	4284      	cmp	r4, r0
   dc96c:	4623      	mov	r3, r4
   dc96e:	d807      	bhi.n	dc980 <memmove+0x20>
   dc970:	1e43      	subs	r3, r0, #1
   dc972:	42a1      	cmp	r1, r4
   dc974:	d008      	beq.n	dc988 <memmove+0x28>
   dc976:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc97a:	f803 2f01 	strb.w	r2, [r3, #1]!
   dc97e:	e7f8      	b.n	dc972 <memmove+0x12>
   dc980:	4402      	add	r2, r0
   dc982:	4601      	mov	r1, r0
   dc984:	428a      	cmp	r2, r1
   dc986:	d100      	bne.n	dc98a <memmove+0x2a>
   dc988:	bd10      	pop	{r4, pc}
   dc98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dc98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dc992:	e7f7      	b.n	dc984 <memmove+0x24>

000dc994 <memset>:
   dc994:	4402      	add	r2, r0
   dc996:	4603      	mov	r3, r0
   dc998:	4293      	cmp	r3, r2
   dc99a:	d100      	bne.n	dc99e <memset+0xa>
   dc99c:	4770      	bx	lr
   dc99e:	f803 1b01 	strb.w	r1, [r3], #1
   dc9a2:	e7f9      	b.n	dc998 <memset+0x4>

000dc9a4 <srand>:
   dc9a4:	b538      	push	{r3, r4, r5, lr}
   dc9a6:	4b0d      	ldr	r3, [pc, #52]	; (dc9dc <srand+0x38>)
   dc9a8:	681d      	ldr	r5, [r3, #0]
   dc9aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc9ac:	4604      	mov	r4, r0
   dc9ae:	b97b      	cbnz	r3, dc9d0 <srand+0x2c>
   dc9b0:	2018      	movs	r0, #24
   dc9b2:	f7fb fda9 	bl	d8508 <malloc>
   dc9b6:	4a0a      	ldr	r2, [pc, #40]	; (dc9e0 <srand+0x3c>)
   dc9b8:	4b0a      	ldr	r3, [pc, #40]	; (dc9e4 <srand+0x40>)
   dc9ba:	63a8      	str	r0, [r5, #56]	; 0x38
   dc9bc:	e9c0 2300 	strd	r2, r3, [r0]
   dc9c0:	4b09      	ldr	r3, [pc, #36]	; (dc9e8 <srand+0x44>)
   dc9c2:	6083      	str	r3, [r0, #8]
   dc9c4:	230b      	movs	r3, #11
   dc9c6:	8183      	strh	r3, [r0, #12]
   dc9c8:	2201      	movs	r2, #1
   dc9ca:	2300      	movs	r3, #0
   dc9cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc9d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc9d2:	2200      	movs	r2, #0
   dc9d4:	611c      	str	r4, [r3, #16]
   dc9d6:	615a      	str	r2, [r3, #20]
   dc9d8:	bd38      	pop	{r3, r4, r5, pc}
   dc9da:	bf00      	nop
   dc9dc:	2003e298 	.word	0x2003e298
   dc9e0:	abcd330e 	.word	0xabcd330e
   dc9e4:	e66d1234 	.word	0xe66d1234
   dc9e8:	0005deec 	.word	0x0005deec

000dc9ec <strchr>:
   dc9ec:	b2c9      	uxtb	r1, r1
   dc9ee:	4603      	mov	r3, r0
   dc9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc9f4:	b11a      	cbz	r2, dc9fe <strchr+0x12>
   dc9f6:	428a      	cmp	r2, r1
   dc9f8:	d1f9      	bne.n	dc9ee <strchr+0x2>
   dc9fa:	4618      	mov	r0, r3
   dc9fc:	4770      	bx	lr
   dc9fe:	2900      	cmp	r1, #0
   dca00:	bf18      	it	ne
   dca02:	2300      	movne	r3, #0
   dca04:	e7f9      	b.n	dc9fa <strchr+0xe>

000dca06 <strchrnul>:
   dca06:	b510      	push	{r4, lr}
   dca08:	4604      	mov	r4, r0
   dca0a:	f7ff ffef 	bl	dc9ec <strchr>
   dca0e:	b918      	cbnz	r0, dca18 <strchrnul+0x12>
   dca10:	4620      	mov	r0, r4
   dca12:	f000 f832 	bl	dca7a <strlen>
   dca16:	4420      	add	r0, r4
   dca18:	bd10      	pop	{r4, pc}

000dca1a <strcmp>:
   dca1a:	f810 2b01 	ldrb.w	r2, [r0], #1
   dca1e:	f811 3b01 	ldrb.w	r3, [r1], #1
   dca22:	2a01      	cmp	r2, #1
   dca24:	bf28      	it	cs
   dca26:	429a      	cmpcs	r2, r3
   dca28:	d0f7      	beq.n	dca1a <strcmp>
   dca2a:	1ad0      	subs	r0, r2, r3
   dca2c:	4770      	bx	lr

000dca2e <strcpy>:
   dca2e:	4603      	mov	r3, r0
   dca30:	f811 2b01 	ldrb.w	r2, [r1], #1
   dca34:	f803 2b01 	strb.w	r2, [r3], #1
   dca38:	2a00      	cmp	r2, #0
   dca3a:	d1f9      	bne.n	dca30 <strcpy+0x2>
   dca3c:	4770      	bx	lr
	...

000dca40 <strdup>:
   dca40:	4b02      	ldr	r3, [pc, #8]	; (dca4c <strdup+0xc>)
   dca42:	4601      	mov	r1, r0
   dca44:	6818      	ldr	r0, [r3, #0]
   dca46:	f000 b803 	b.w	dca50 <_strdup_r>
   dca4a:	bf00      	nop
   dca4c:	2003e298 	.word	0x2003e298

000dca50 <_strdup_r>:
   dca50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dca52:	4604      	mov	r4, r0
   dca54:	4608      	mov	r0, r1
   dca56:	460d      	mov	r5, r1
   dca58:	f000 f80f 	bl	dca7a <strlen>
   dca5c:	1c42      	adds	r2, r0, #1
   dca5e:	4611      	mov	r1, r2
   dca60:	4620      	mov	r0, r4
   dca62:	9201      	str	r2, [sp, #4]
   dca64:	f7fb fd88 	bl	d8578 <_malloc_r>
   dca68:	4604      	mov	r4, r0
   dca6a:	b118      	cbz	r0, dca74 <_strdup_r+0x24>
   dca6c:	9a01      	ldr	r2, [sp, #4]
   dca6e:	4629      	mov	r1, r5
   dca70:	f7ff ff68 	bl	dc944 <memcpy>
   dca74:	4620      	mov	r0, r4
   dca76:	b003      	add	sp, #12
   dca78:	bd30      	pop	{r4, r5, pc}

000dca7a <strlen>:
   dca7a:	4603      	mov	r3, r0
   dca7c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dca80:	2a00      	cmp	r2, #0
   dca82:	d1fb      	bne.n	dca7c <strlen+0x2>
   dca84:	1a18      	subs	r0, r3, r0
   dca86:	3801      	subs	r0, #1
   dca88:	4770      	bx	lr

000dca8a <strncmp>:
   dca8a:	b510      	push	{r4, lr}
   dca8c:	b16a      	cbz	r2, dcaaa <strncmp+0x20>
   dca8e:	3901      	subs	r1, #1
   dca90:	1884      	adds	r4, r0, r2
   dca92:	f810 3b01 	ldrb.w	r3, [r0], #1
   dca96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dca9a:	4293      	cmp	r3, r2
   dca9c:	d103      	bne.n	dcaa6 <strncmp+0x1c>
   dca9e:	42a0      	cmp	r0, r4
   dcaa0:	d001      	beq.n	dcaa6 <strncmp+0x1c>
   dcaa2:	2b00      	cmp	r3, #0
   dcaa4:	d1f5      	bne.n	dca92 <strncmp+0x8>
   dcaa6:	1a98      	subs	r0, r3, r2
   dcaa8:	bd10      	pop	{r4, pc}
   dcaaa:	4610      	mov	r0, r2
   dcaac:	e7fc      	b.n	dcaa8 <strncmp+0x1e>

000dcaae <strncpy>:
   dcaae:	b510      	push	{r4, lr}
   dcab0:	3901      	subs	r1, #1
   dcab2:	4603      	mov	r3, r0
   dcab4:	b132      	cbz	r2, dcac4 <strncpy+0x16>
   dcab6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dcaba:	f803 4b01 	strb.w	r4, [r3], #1
   dcabe:	3a01      	subs	r2, #1
   dcac0:	2c00      	cmp	r4, #0
   dcac2:	d1f7      	bne.n	dcab4 <strncpy+0x6>
   dcac4:	441a      	add	r2, r3
   dcac6:	2100      	movs	r1, #0
   dcac8:	4293      	cmp	r3, r2
   dcaca:	d100      	bne.n	dcace <strncpy+0x20>
   dcacc:	bd10      	pop	{r4, pc}
   dcace:	f803 1b01 	strb.w	r1, [r3], #1
   dcad2:	e7f9      	b.n	dcac8 <strncpy+0x1a>

000dcad4 <strrchr>:
   dcad4:	b538      	push	{r3, r4, r5, lr}
   dcad6:	4603      	mov	r3, r0
   dcad8:	460c      	mov	r4, r1
   dcada:	b969      	cbnz	r1, dcaf8 <strrchr+0x24>
   dcadc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dcae0:	f7ff bf84 	b.w	dc9ec <strchr>
   dcae4:	1c43      	adds	r3, r0, #1
   dcae6:	4605      	mov	r5, r0
   dcae8:	4621      	mov	r1, r4
   dcaea:	4618      	mov	r0, r3
   dcaec:	f7ff ff7e 	bl	dc9ec <strchr>
   dcaf0:	2800      	cmp	r0, #0
   dcaf2:	d1f7      	bne.n	dcae4 <strrchr+0x10>
   dcaf4:	4628      	mov	r0, r5
   dcaf6:	bd38      	pop	{r3, r4, r5, pc}
   dcaf8:	2500      	movs	r5, #0
   dcafa:	e7f5      	b.n	dcae8 <strrchr+0x14>

000dcafc <_strtol_l.isra.0>:
   dcafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcb00:	4e3a      	ldr	r6, [pc, #232]	; (dcbec <_strtol_l.isra.0+0xf0>)
   dcb02:	4686      	mov	lr, r0
   dcb04:	468c      	mov	ip, r1
   dcb06:	4660      	mov	r0, ip
   dcb08:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dcb0c:	5da5      	ldrb	r5, [r4, r6]
   dcb0e:	f015 0508 	ands.w	r5, r5, #8
   dcb12:	d1f8      	bne.n	dcb06 <_strtol_l.isra.0+0xa>
   dcb14:	2c2d      	cmp	r4, #45	; 0x2d
   dcb16:	d133      	bne.n	dcb80 <_strtol_l.isra.0+0x84>
   dcb18:	f89c 4000 	ldrb.w	r4, [ip]
   dcb1c:	f04f 0801 	mov.w	r8, #1
   dcb20:	f100 0c02 	add.w	ip, r0, #2
   dcb24:	2b00      	cmp	r3, #0
   dcb26:	d05c      	beq.n	dcbe2 <_strtol_l.isra.0+0xe6>
   dcb28:	2b10      	cmp	r3, #16
   dcb2a:	d10c      	bne.n	dcb46 <_strtol_l.isra.0+0x4a>
   dcb2c:	2c30      	cmp	r4, #48	; 0x30
   dcb2e:	d10a      	bne.n	dcb46 <_strtol_l.isra.0+0x4a>
   dcb30:	f89c 0000 	ldrb.w	r0, [ip]
   dcb34:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dcb38:	2858      	cmp	r0, #88	; 0x58
   dcb3a:	d14d      	bne.n	dcbd8 <_strtol_l.isra.0+0xdc>
   dcb3c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dcb40:	2310      	movs	r3, #16
   dcb42:	f10c 0c02 	add.w	ip, ip, #2
   dcb46:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dcb4a:	3f01      	subs	r7, #1
   dcb4c:	2600      	movs	r6, #0
   dcb4e:	fbb7 f9f3 	udiv	r9, r7, r3
   dcb52:	4630      	mov	r0, r6
   dcb54:	fb03 7a19 	mls	sl, r3, r9, r7
   dcb58:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dcb5c:	2d09      	cmp	r5, #9
   dcb5e:	d818      	bhi.n	dcb92 <_strtol_l.isra.0+0x96>
   dcb60:	462c      	mov	r4, r5
   dcb62:	42a3      	cmp	r3, r4
   dcb64:	dd24      	ble.n	dcbb0 <_strtol_l.isra.0+0xb4>
   dcb66:	1c75      	adds	r5, r6, #1
   dcb68:	d007      	beq.n	dcb7a <_strtol_l.isra.0+0x7e>
   dcb6a:	4581      	cmp	r9, r0
   dcb6c:	d31d      	bcc.n	dcbaa <_strtol_l.isra.0+0xae>
   dcb6e:	d101      	bne.n	dcb74 <_strtol_l.isra.0+0x78>
   dcb70:	45a2      	cmp	sl, r4
   dcb72:	db1a      	blt.n	dcbaa <_strtol_l.isra.0+0xae>
   dcb74:	fb00 4003 	mla	r0, r0, r3, r4
   dcb78:	2601      	movs	r6, #1
   dcb7a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dcb7e:	e7eb      	b.n	dcb58 <_strtol_l.isra.0+0x5c>
   dcb80:	2c2b      	cmp	r4, #43	; 0x2b
   dcb82:	bf08      	it	eq
   dcb84:	f89c 4000 	ldrbeq.w	r4, [ip]
   dcb88:	46a8      	mov	r8, r5
   dcb8a:	bf08      	it	eq
   dcb8c:	f100 0c02 	addeq.w	ip, r0, #2
   dcb90:	e7c8      	b.n	dcb24 <_strtol_l.isra.0+0x28>
   dcb92:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dcb96:	2d19      	cmp	r5, #25
   dcb98:	d801      	bhi.n	dcb9e <_strtol_l.isra.0+0xa2>
   dcb9a:	3c37      	subs	r4, #55	; 0x37
   dcb9c:	e7e1      	b.n	dcb62 <_strtol_l.isra.0+0x66>
   dcb9e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dcba2:	2d19      	cmp	r5, #25
   dcba4:	d804      	bhi.n	dcbb0 <_strtol_l.isra.0+0xb4>
   dcba6:	3c57      	subs	r4, #87	; 0x57
   dcba8:	e7db      	b.n	dcb62 <_strtol_l.isra.0+0x66>
   dcbaa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dcbae:	e7e4      	b.n	dcb7a <_strtol_l.isra.0+0x7e>
   dcbb0:	1c73      	adds	r3, r6, #1
   dcbb2:	d106      	bne.n	dcbc2 <_strtol_l.isra.0+0xc6>
   dcbb4:	2322      	movs	r3, #34	; 0x22
   dcbb6:	f8ce 3000 	str.w	r3, [lr]
   dcbba:	4638      	mov	r0, r7
   dcbbc:	b942      	cbnz	r2, dcbd0 <_strtol_l.isra.0+0xd4>
   dcbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcbc2:	f1b8 0f00 	cmp.w	r8, #0
   dcbc6:	d000      	beq.n	dcbca <_strtol_l.isra.0+0xce>
   dcbc8:	4240      	negs	r0, r0
   dcbca:	2a00      	cmp	r2, #0
   dcbcc:	d0f7      	beq.n	dcbbe <_strtol_l.isra.0+0xc2>
   dcbce:	b10e      	cbz	r6, dcbd4 <_strtol_l.isra.0+0xd8>
   dcbd0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dcbd4:	6011      	str	r1, [r2, #0]
   dcbd6:	e7f2      	b.n	dcbbe <_strtol_l.isra.0+0xc2>
   dcbd8:	2430      	movs	r4, #48	; 0x30
   dcbda:	2b00      	cmp	r3, #0
   dcbdc:	d1b3      	bne.n	dcb46 <_strtol_l.isra.0+0x4a>
   dcbde:	2308      	movs	r3, #8
   dcbe0:	e7b1      	b.n	dcb46 <_strtol_l.isra.0+0x4a>
   dcbe2:	2c30      	cmp	r4, #48	; 0x30
   dcbe4:	d0a4      	beq.n	dcb30 <_strtol_l.isra.0+0x34>
   dcbe6:	230a      	movs	r3, #10
   dcbe8:	e7ad      	b.n	dcb46 <_strtol_l.isra.0+0x4a>
   dcbea:	bf00      	nop
   dcbec:	000dd99f 	.word	0x000dd99f

000dcbf0 <strtol>:
   dcbf0:	4613      	mov	r3, r2
   dcbf2:	460a      	mov	r2, r1
   dcbf4:	4601      	mov	r1, r0
   dcbf6:	4802      	ldr	r0, [pc, #8]	; (dcc00 <strtol+0x10>)
   dcbf8:	6800      	ldr	r0, [r0, #0]
   dcbfa:	f7ff bf7f 	b.w	dcafc <_strtol_l.isra.0>
   dcbfe:	bf00      	nop
   dcc00:	2003e298 	.word	0x2003e298

000dcc04 <dynalib_user>:
   dcc04:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   dcc14:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
   dcc24:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
   dcc34:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
   dcc44:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
   dcc54:	41435f45 424e5f54 6f4e0031 68432074     E_CAT_NB1.Not Ch
   dcc64:	69677261 4300676e 67726168 44006465     arging.Charged.D
   dcc74:	68637369 69677261 4600676e 746c7561     ischarging.Fault
   dcc84:	63694400 656e6e6f 64657463 206f4e00     .Diconnected.No 
   dcc94:	61746144 73655200 736e6f70 65522065     Data.Response Re
   dcca4:	76696563 55006465 6f6e6b6e 72206e77     ceived.Unknown r
   dccb4:	6f707365 2065736e 65636572 64656976     esponse recevied
   dccc4:	00692520 64696255 2073746f 6b6f6f48      %i.Ubidots Hook
   dccd4:	72614800 65522064 20746573 32206e69     .Hard Reset in 2
   dcce4:	63657320 73646e6f 74655300 6e655320      seconds.Set Sen
   dccf4:	20726f73 65646f4d 206f7420 73657250     sor Mode to Pres
   dcd04:	65727573 52495000 6e655320 00726f73     sure.PIR Sensor.
   dcd14:	20746553 736e6553 4d20726f 2065646f     Set Sensor Mode 
   dcd24:	50206f74 50005249 73736572 20657275     to PIR.Pressure 
   dcd34:	736e6553 4f00726f 206e6570 656d6974     Sensor.Open time
   dcd44:	74657320 206f7420 44006925 796c6961      set to %i.Daily
   dcd54:	756f6320 7320746e 74207465 6925206f      count set to %i
   dcd64:	69614400 2000796c 67200028 65530029     .Daily. (. g).Se
   dcd74:	65562074 736f6272 6f4d2065 43006564     t Verbose Mode.C
   dcd84:	7261656c 56206465 6f627265 4d206573     leared Verbose M
   dcd94:	0065646f 6e756f43 68202c74 6c72756f     ode.Count, hourl
   dcda4:	25203a79 64202c69 796c6961 6925203a     y: %i, daily: %i
   dcdb4:	68227b00 6c72756f 253a2279 22202c69     .{"hourly":%i, "
   dcdc4:	6c696164 253a2279 62222c69 65747461     daily":%i,"batte
   dcdd4:	3a227972 222c6925 3179656b 25223a22     ry":%i,"key1":"%
   dcde4:	222c2273 706d6574 69253a22 7222202c     s","temp":%i, "r
   dcdf4:	74657365 253a2273 22202c69 72656c61     esets":%i, "aler
   dce04:	3a227374 222c6925 6d78616d 3a226e69     ts":%i,"maxmin":
   dce14:	222c6925 6e6e6f63 74746365 22656d69     %i,"connecttime"
   dce24:	2c69253a 6d697422 61747365 3a22706d     :%i,"timestamp":
   dce34:	30756c25 007d3030 64696255 2d73746f     %lu000}.Ubidots-
   dce44:	6e756f43 2d726574 6b6f6f48 0031762d     Counter-Hook-v1.
   dce54:	616c6f53 74550072 74696c69 6f4e0079     Solar.Utility.No
   dce64:	65562074 736f6272 225b0065 2c227325     t Verbose.["%s",
   dce74:	22732522 7325222c 25222c22 222c2273     "%s","%s","%s","
   dce84:	2c227325 22732522 7325222c 25222c22     %s","%s","%s","%
   dce94:	65732069 222c2263 25256925 47005d22     i sec","%i%%"].G
   dcea4:	6c676f6f 65685365 45737465 726f7078     oogleSheetsExpor
   dceb4:	75700074 73696c62 3a646568 00732520     t.published: %s.
   dcec4:	53207325 2e32253a 25256630 3a51202c     %s S:%2.0f%%, Q:
   dced4:	302e3225 20252566 74655300 6c6f5320     %2.0f%% .Set Sol
   dcee4:	50207261 7265776f 4d206465 0065646f     ar Powered Mode.
   dcef4:	61656c43 20646572 616c6f53 6f502072     Cleared Solar Po
   dcf04:	65726577 6f4d2064 4e006564 69250041     wered Mode.NA.%i
   dcf14:	0030303a 736f6c43 20676e69 656d6974     :00.Closing time
   dcf24:	74657320 206f7420 43006925 656e6e6f      set to %i.Conne
   dcf34:	64657463 206e6920 73206925 00736365     cted in %i secs.
   dcf44:	6c6c6543 72616c75 6f6c6300 63206475     Cellular.cloud c
   dcf54:	656e6e6f 6f697463 6e75206e 63637573     onnection unsucc
   dcf64:	66737365 4c006c75 5020776f 7265776f     essful.Low Power
   dcf74:	646f4d20 6f4e0065 6c616d72 65704f20      Mode.Normal Ope
   dcf84:	69746172 00736e6f 20746f4e 20776f4c     rations.Not Low 
   dcf94:	65776f50 6f4c0072 6e696461 79532067     Power.Loading Sy
   dcfa4:	6d657473 66654420 746c7561 72460073     stem Defaults.Fr
   dcfb4:	25206d6f 6f742073 00732520 74617453     om %s to %s.Stat
   dcfc4:	72542065 69736e61 6e6f6974 2b544100     e Transition.AT+
   dcfd4:	4e554643 0d35313d 7552000a 6e696e6e     CFUN=15...Runnin
   dcfe4:	61440067 20796c69 61656c43 0070756e     g.Daily Cleanup.
   dcff4:	72756f48 6f43796c 00746e75 6e676953     HourlyCount.Sign
   dd004:	52006c61 74657365 6e756f43 65540074     al.ResetCount.Te
   dd014:	7265706d 72757461 65520065 7361656c     mperature.Releas
   dd024:	74730065 4f657461 67684366 776f6c00     e.stateOfChg.low
   dd034:	65776f50 646f4d72 6c430065 5465736f     PowerMode.CloseT
   dd044:	00656d69 72656c41 54007374 4f656d69     ime.Alerts.TimeO
   dd054:	65736666 61420074 72657474 6e6f4379     ffset.BatteryCon
   dd064:	74786574 6e655300 53726f73 75746174     text.SensorStatu
   dd074:	65730073 69614474 6f43796c 00746e75     s.setDailyCount.
   dd084:	65736572 756f4374 0073746e 64726148     resetCounts.Hard
   dd094:	65736552 65530074 6f4e646e 6f4c0077     Reset.SendNow.Lo
   dd0a4:	776f5077 6f4d7265 53006564 72616c6f     wPowerMode.Solar
   dd0b4:	646f4d2d 65560065 736f6272 6f4d2d65     -Mode.Verbose-Mo
   dd0c4:	53006564 542d7465 7a656d69 00656e6f     de.Set-Timezone.
   dd0d4:	2d746553 4f545344 65736666 65530074     Set-DSTOffset.Se
   dd0e4:	704f2d74 69546e65 5300656d 432d7465     t-OpenTime.Set-C
   dd0f4:	65736f6c 74655300 6e65532d 54726f73     lose.Set-SensorT
   dd104:	00657079 312e3225 54552066 70730043     ype.%2.1f UTC.sp
   dd114:	2f6b7261 69766564 732f6563 69737365     ark/device/sessi
   dd124:	652f6e6f 6600646e 656c6961 6f742064     on/end.failed to
   dd134:	6e6f6320 7463656e 206f7420 756f6c63      connect to clou
   dd144:	64202c64 676e696f 65656420 65722070     d, doing deep re
   dd154:	00746573 6f727245 74532072 20657461     set.Error State 
   dd164:	6552202d 00746573 74617453 72450065     - Reset.State.Er
   dd174:	20726f72 74617453 202d2065 65776f50     ror State - Powe
   dd184:	79432072 00656c63 6f727245 74532072     r Cycle.Error St
   dd194:	20657461 7546202d 4d206c6c 6d65646f     ate - Full Modem
   dd1a4:	73655220 58007465 5a005900 74754f00      Reset.X.Y.Z.Out
   dd1b4:	20666f20 6f6d656d 6f207972 72756363      of memory occur
   dd1c4:	20646572 657a6973 0064253d 6f6d654d     red size=%d.Memo
   dd1d4:	00007972                                ry..

000dd1d8 <_ZTV5Timer>:
	...
   dd1e0:	000d434d 000d43a1 000d413d              MC...C..=A..

000dd1ec <_ZTVN5spark10LogHandlerE>:
	...
   dd1fc:	000d40a5 000d40c9                       .@...@..

000dd204 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dd20c:	000d42e1 000d4315 000da3dd 000d40cb     .B...C.......@..

000dd21c <_ZTV8MB85RC64>:
	...
   dd224:	000d4171 000d4185 000d732d 000d73c3     qA...A..-s...s..
   dd234:	000d7445                                Et..

000dd238 <_ZTV17PublishQueueAsync>:
	...
   dd240:	000d4149 000d415d 000d755d 000d76e9     IA..]A..]u...v..
   dd250:	000d76a9 000d7687 000d782f 000d76cf     .v...v../x...v..
   dd260:	000dcc18 000dcc20 000dcc25 000dcc2a     .... ...%...*...
   dd270:	000dcc2e 000dcc33 000dcc38 000dcc3c     ....3...8...<...
   dd280:	000dcc47 000dcc52                       G...R...

000dd288 <_ZL17FRAMversionNumber>:
   dd288:	00000003 656d6954 6e6f7a20 666f2065     ....Time zone of
   dd298:	74657366 00692520 20545344 7366666f     fset %i.DST offs
   dd2a8:	25207465 66312e32 69616600 2064656c     et %2.1f.failed 
   dd2b8:	72206f74 20646165 41676572 3d726464     to read regAddr=
   dd2c8:	78323025 756f6320 253d746e 61660075     %02x count=%u.fa
   dd2d8:	64656c69 206f7420 64616572 67657220     iled to read reg
   dd2e8:	72646441 3230253d 74732078 253d7461     Addr=%02x stat=%
   dd2f8:	4f460064 64205455 6e206469 6720746f     d.FOUT did not g
   dd308:	4948206f 6e004847 6420746f 63657465     o HIGH.not detec
   dd318:	00646574 6c696166 74206465 7277206f     ted.failed to wr
   dd328:	20657469 41676572 3d726464 78323025     ite regAddr=%02x
   dd338:	61747320 64253d74 74657300 20544457      stat=%d.setWDT 
   dd348:	77006425 68637461 20676f64 61656c63     %d.watchdog clea
   dd358:	20646572 73655262 3d746c75 77006425     red bResult=%d.w
   dd368:	68637461 20676f64 20746573 72756f66     atchdog set four
   dd378:	73636553 2064253d 73655262 3d746c75     Secs=%d bResult=
   dd388:	57006425 48435441 00474f44 50454544     %d.WATCHDOG.DEEP
   dd398:	574f505f 445f5245 004e574f 4e554f43     _POWER_DOWN.COUN
   dd3a8:	574f4454 49545f4e 0052454d 52414c41     TDOWN_TIMER.ALAR
   dd3b8:	6166004d 72756c69 6e692065 64707520     M.failure in upd
   dd3c8:	57657461 52656b61 6f736165 6425206e     ateWakeReason %d
   dd3d8:	6b617700 65722065 6e6f7361 25203d20     .wake reason = %
   dd3e8:	61660073 72756c69 6e692065 74657320     s.failure in set
   dd3f8:	6e756f43 776f6474 6d69546e 25207265     CountdownTimer %
   dd408:	61660064 72756c69 6e692065 65656420     d.failure in dee
   dd418:	776f5070 6f447265 25206e77 45520064     pPowerDown %d.RE
   dd428:	4c535f47 5f504545 4c525443 2578303d     G_SLEEP_CTRL=0x%
   dd438:	64007832 276e6469 6f702074 20726577     2x.didn't power 
   dd448:	6e776f64 34302500 30252d64 252d6432     down.%04d-%02d-%
   dd458:	20643230 64323025 3230253a 30253a64     02d %02d:%02d:%0
   dd468:	67006432 74527465 54734163 7325206d     2d.getRtcAsTm %s
   dd478:	74657300 73797320 206d6574 636f6c63     .set system cloc
   dd488:	7266206b 52206d6f 25204354 61660073     k from RTC %s.fa
   dd498:	64656c69 206f7420 65746564 41207463     iled to detect A
   dd4a8:	30383142 65730035 63745274 6d547341     B1805.setRtcAsTm
   dd4b8:	00732520 6c696166 20657275 73206e69      %s.failure in s
   dd4c8:	74527465 6f724663 206d546d 73006425     etRtcFromTm %d.s
   dd4d8:	52207465 66204354 206d6f72 756f6c63     et RTC from clou
   dd4e8:	73252064 70706100 3162612e 00353038     d %s.app.ab1805.

000dd4f8 <_ZTV6AB1805>:
	...
   dd500:	000d6775 000d6777 000d6ded 000d6e73     ug..wg...m..sn..
   dd510:	74697277 74614465 61662061 64656c69     writeData failed
   dd520:	72756420 20676e69 73617265 72662065      during erase fr
   dd530:	64416d61 253d7264 00000075              amAddr=%u...

000dd53c <_ZTV6MB85RC>:
	...
   dd544:	000d727d 000d727f 000d732d 000d73c3     }r...r..-s...s..
   dd554:	000d7445 6c627550 51687369 65756575     Et..PublishQueue
   dd564:	6e797341 75710063 69657565 6520676e     Async.queueing e
   dd574:	746e6576 656d614e 2073253d 61746164     ventName=%s data
   dd584:	2073253d 3d6c7474 66206425 7367616c     =%s ttl=%d flags
   dd594:	64253d31 616c6620 3d327367 73206425     1=%d flags2=%d s
   dd5a4:	3d657a69 70006425 696c6275 6e696873     ize=%d.publishin
   dd5b4:	73252067 20732520 3d6c7474 66206425     g %s %s ttl=%d f
   dd5c4:	7367616c 0078253d 6c627570 65687369     lags=%x.publishe
   dd5d4:	75732064 73656363 6c756673 7000796c     d successfully.p
   dd5e4:	696c6275 64656873 69616620 2c64656c     ublished failed,
   dd5f4:	6c697720 6572206c 20797274 25206e69      will retry in %
   dd604:	6d20756c 70610073 75702e70 00007162     lu ms.app.pubq..

000dd614 <_ZTV21PublishQueueAsyncBase>:
	...
   dd624:	000d755d 000d40a5 000d40a5 000d40a5     ]u...@...@...@..
   dd634:	000d40a5 000d40a5                       .@...@..

000dd63c <_ZTV25PublishQueueAsyncRetained>:
	...
   dd644:	000d7645 000d7659 000d755d 000d76e9     Ev..Yv..]u...v..
   dd654:	000d76a9 000d7687 000d782f 000d76cf     .v...v../x...v..

000dd664 <_ZTVN5spark13CellularClassE>:
	...
   dd66c:	000d86e3 000d86d9 000d86cf 000d8685     ................
   dd67c:	000d86c3 000d86b7 000da735 000da73d     ........5...=...
   dd68c:	000d86ab 000d86a3 000d8699 000d868f     ................
   dd69c:	000da76d                                m...

000dd6a0 <_ZTV14CellularSignal>:
	...
   dd6a8:	000d8791 000d8797 000d8793 000d87a5     ................
   dd6b8:	000d87d9 000d8805 000d8839 000d8889     ........9.......
   dd6c8:	fffffffc 00000000 000d88af              ............

000dd6d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd6dc:	000d88cf 000d88d5 000d8913 000d88e3     ................
   dd6ec:	000d88d1                                ....

000dd6f0 <_ZTVN5spark13EthernetClassE>:
	...
   dd6f8:	000d8f43 000d8f39 000d8f2f 000d8f25     C...9.../...%...
   dd708:	000d8f19 000d8f0d 000da735 000da73d     ........5...=...
   dd718:	000d8f01 000d8ef9 000d8eef 000d8ee5     ................
   dd728:	000da76d                                m...

000dd72c <_ZTV7TwoWire>:
	...
   dd734:	000d90f5 000d913f 000d9117 000d90f7     ....?...........
   dd744:	000d911f 000d9127 000d912f 000d9137     ....'.../...7...

000dd754 <_ZTV9IPAddress>:
	...
   dd75c:	000d92e1 000d92d1 000d92d3 34302575     ............u%04
   dd76c:	61620078 53006475 61697265 6553006c     x.baud.Serial.Se
   dd77c:	6c616972 534a0031 74534e4f 6d616572     rial1.JSONStream
   dd78c:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   dd79c:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   dd7ac:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   dd7bc:	20736c69 6d00203d 006e6c00 63006e66     ils = .m.ln.fn.c
   dd7cc:	0065646f 61746564 00006c69              ode.detail..

000dd7d8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dd7e0:	000d979b 000d97c1 000d9781 000d93e1     ................

000dd7f0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dd7f8:	000d9c05 000d9c1d 000da3dd 000d40cb     .............@..

000dd808 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dd810:	000d9c31 000d9c45 000da581 000d9789     1...E...........

000dd820 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dd828:	000d9799 000d97cf 000da319 000d978b     ................

000dd838 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dd840:	000d9797 000d97dd 000d9b4d 000d97f9     ........M.......

000dd850 <_ZTVN5spark12NetworkClassE>:
	...
   dd858:	000da6f5 000da6ff 000da709 000da713     ................
   dd868:	000da71d 000da729 000da735 000da73d     ....)...5...=...
   dd878:	000da745 000da751 000da759 000da763     E...Q...Y...c...
   dd888:	000da76d 69726977 5300676e 65747379     m...wiring.Syste
   dd898:	6c73206d 20706565 666e6f63 72756769     m sleep configur
   dd8a8:	6f697461 7369206e 766e6920 64696c61     ation is invalid
   dd8b8:	2b25002e 3a643330 75323025 2d592500     ..%+03d:%02u.%Y-
   dd8c8:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   dd8d8:	63736100 656d6974 00000000              .asctime....

000dd8e4 <_ZTV11USARTSerial>:
	...
   dd8ec:	000db505 000db571 000db549 000da9b3     ....q...I.......
   dd8fc:	000db519 000db535 000db527 000db543     ....5...'...C...
   dd90c:	000db507 000db50b                       ........

000dd914 <_ZTV9USBSerial>:
	...
   dd91c:	000db619 000db681 000db657 000da9b3     ........W.......
   dd92c:	000db649 000db61b 000db62b 000db67b     I.......+...{...
   dd93c:	000db63b 000db615                       ;.......

000dd944 <_ZSt7nothrow>:
   dd944:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   dd954:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000dd965 <day_name.6145>:
   dd965:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   dd975:	61536972                                 riSat

000dd97a <mon_name.6146>:
   dd97a:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   dd98a:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   dd99a:	63654476                                vDec

000dd99e <_ctype_>:
   dd99e:	20202000 20202020 28282020 20282828     .         ((((( 
   dd9ae:	20202020 20202020 20202020 20202020                     
   dd9be:	10108820 10101010 10101010 10101010      ...............
   dd9ce:	04040410 04040404 10040404 10101010     ................
   dd9de:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dd9ee:	01010101 01010101 01010101 10101010     ................
   dd9fe:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dda0e:	02020202 02020202 02020202 10101010     ................
   dda1e:	00000020 00000000 00000000 00000000      ...............
	...

000dda9f <link_const_variable_data_end>:
	...

000ddaa0 <link_constructors_location>:
   ddaa0:	000d5b8d 	.word	0x000d5b8d
   ddaa4:	000d6769 	.word	0x000d6769
   ddaa8:	000d726d 	.word	0x000d726d
   ddaac:	000d7ac1 	.word	0x000d7ac1
   ddab0:	000d865d 	.word	0x000d865d
   ddab4:	000d8761 	.word	0x000d8761
   ddab8:	000d8f4d 	.word	0x000d8f4d
   ddabc:	000da3cd 	.word	0x000da3cd
   ddac0:	000da841 	.word	0x000da841
   ddac4:	000daae9 	.word	0x000daae9
   ddac8:	000db06d 	.word	0x000db06d
   ddacc:	000db4f1 	.word	0x000db4f1
