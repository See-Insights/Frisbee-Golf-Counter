
/Users/chipmc/Documents/Maker/Particle/Projects/Frisbee-Golf-Counter/target/2.2.0/boron/Frisbee-Golf-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009150  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dd170  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000138  2003e148  000dd974  0001e148  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000574  2003e280  2003e280  0002e280  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000ddaac  000ddaac  0002daac  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000ddad8  000ddad8  0002dad8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e8da0  00000000  00000000  0002dadc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001f348  00000000  00000000  0021687c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003b5e1  00000000  00000000  00235bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000035d0  00000000  00000000  002711a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a138  00000000  00000000  00274775  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00041072  00000000  00000000  0027e8ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000503b7  00000000  00000000  002bf91f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011802c  00000000  00000000  0030fcd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000991c  00000000  00000000  00427d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 ff6f 	bl	dbf14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 ff91 	bl	dbf64 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e148 	.word	0x2003e148
   d404c:	000dd974 	.word	0x000dd974
   d4050:	2003e280 	.word	0x2003e280
   d4054:	2003e280 	.word	0x2003e280
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 f91b 	bl	db29c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dd138 	.word	0x000dd138
   d4080:	000dd168 	.word	0x000dd168

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b970 	b.w	d5368 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fe13 	bl	d5cb4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 b8bb 	b.w	db20c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 b96d 	b.w	d8374 <malloc>

000d409a <_Znaj>:
   d409a:	f004 b96b 	b.w	d8374 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 b971 	b.w	d8384 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 ffe6 	bl	d807c <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7d4d 	.word	0x000d7d4d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z18outOfMemoryHandleryi>:
}


// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   d40d4:	4b01      	ldr	r3, [pc, #4]	; (d40dc <_Z18outOfMemoryHandleryi+0x8>)
   d40d6:	601a      	str	r2, [r3, #0]
}
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003e188 	.word	0x2003e188

000d40e0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e0:	6803      	ldr	r3, [r0, #0]
   d40e2:	4718      	bx	r3

000d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40e4:	2a01      	cmp	r2, #1
   d40e6:	d003      	beq.n	d40f0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40e8:	2a02      	cmp	r2, #2
   d40ea:	d003      	beq.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40ec:	2000      	movs	r0, #0
   d40ee:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f0:	6001      	str	r1, [r0, #0]
	      break;
   d40f2:	e7fb      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40f4:	680b      	ldr	r3, [r1, #0]
   d40f6:	6003      	str	r3, [r0, #0]
	}
   d40f8:	e7f8      	b.n	d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40fa <_Z19countSignalTimerISRv>:
  sensorDetect = true;                                              // sets the sensor flag for the main loop
  pinSetFast(blueLED);                                                // Turn on the blue LED
}

void countSignalTimerISR() {
  digitalWrite(blueLED,LOW);
   d40fa:	2100      	movs	r1, #0
   d40fc:	2007      	movs	r0, #7
   d40fe:	f007 b966 	b.w	db3ce <digitalWrite>
	...

000d4104 <_Z21batteryContextMessagev>:
/**
 * @brief Returns a string describing the battery state.
 * 
 * @return String describing battery state.
 */
String batteryContextMessage() {
   d4104:	b510      	push	{r4, lr}
  return batteryContext[sysStatus.batteryState];
   d4106:	4b05      	ldr	r3, [pc, #20]	; (d411c <_Z21batteryContextMessagev+0x18>)
   d4108:	7b1a      	ldrb	r2, [r3, #12]
   d410a:	4b05      	ldr	r3, [pc, #20]	; (d4120 <_Z21batteryContextMessagev+0x1c>)
String batteryContextMessage() {
   d410c:	4604      	mov	r4, r0
  return batteryContext[sysStatus.batteryState];
   d410e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d4112:	f006 fbb6 	bl	da882 <_ZN6StringC1EPKc>
}
   d4116:	4620      	mov	r0, r4
   d4118:	bd10      	pop	{r4, pc}
   d411a:	bf00      	nop
   d411c:	2003e41c 	.word	0x2003e41c
   d4120:	2003e148 	.word	0x2003e148

000d4124 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4124:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4126:	6803      	ldr	r3, [r0, #0]
   d4128:	2b2f      	cmp	r3, #47	; 0x2f
{
   d412a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d412c:	d904      	bls.n	d4138 <nrf_gpio_pin_port_decode+0x14>
   d412e:	4a07      	ldr	r2, [pc, #28]	; (d414c <nrf_gpio_pin_port_decode+0x28>)
   d4130:	2100      	movs	r1, #0
   d4132:	200a      	movs	r0, #10
   d4134:	f003 ffa2 	bl	d807c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d413c:	bf83      	ittte	hi
   d413e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4142:	4803      	ldrhi	r0, [pc, #12]	; (d4150 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4144:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4146:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d414a:	bd10      	pop	{r4, pc}
   d414c:	000d7d4d 	.word	0x000d7d4d
   d4150:	50000300 	.word	0x50000300

000d4154 <_Z9sensorISRv>:
{
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
  sensorDetect = true;                                              // sets the sensor flag for the main loop
   d4156:	4b1c      	ldr	r3, [pc, #112]	; (d41c8 <_Z9sensorISRv+0x74>)
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4158:	4c1c      	ldr	r4, [pc, #112]	; (d41cc <_Z9sensorISRv+0x78>)
   d415a:	4d1d      	ldr	r5, [pc, #116]	; (d41d0 <_Z9sensorISRv+0x7c>)
   d415c:	2201      	movs	r2, #1
   d415e:	701a      	strb	r2, [r3, #0]
   d4160:	7823      	ldrb	r3, [r4, #0]
   d4162:	f3bf 8f5b 	dmb	ish
   d4166:	f013 0f01 	tst.w	r3, #1
   d416a:	d109      	bne.n	d4180 <_Z9sensorISRv+0x2c>
   d416c:	4620      	mov	r0, r4
   d416e:	f7ff ffa3 	bl	d40b8 <__cxa_guard_acquire>
   d4172:	b128      	cbz	r0, d4180 <_Z9sensorISRv+0x2c>
   d4174:	f003 fe1a 	bl	d7dac <HAL_Pin_Map>
   d4178:	6028      	str	r0, [r5, #0]
   d417a:	4620      	mov	r0, r4
   d417c:	f7ff ffa1 	bl	d40c2 <__cxa_guard_release>
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));


inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4180:	682b      	ldr	r3, [r5, #0]
   d4182:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   d4186:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4188:	7823      	ldrb	r3, [r4, #0]
   d418a:	f3bf 8f5b 	dmb	ish
   d418e:	07db      	lsls	r3, r3, #31
   d4190:	d409      	bmi.n	d41a6 <_Z9sensorISRv+0x52>
   d4192:	480e      	ldr	r0, [pc, #56]	; (d41cc <_Z9sensorISRv+0x78>)
   d4194:	f7ff ff90 	bl	d40b8 <__cxa_guard_acquire>
   d4198:	b128      	cbz	r0, d41a6 <_Z9sensorISRv+0x52>
   d419a:	f003 fe07 	bl	d7dac <HAL_Pin_Map>
   d419e:	6028      	str	r0, [r5, #0]
   d41a0:	480a      	ldr	r0, [pc, #40]	; (d41cc <_Z9sensorISRv+0x78>)
   d41a2:	f7ff ff8e 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41a6:	682b      	ldr	r3, [r5, #0]
   d41a8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d41ac:	f003 031f 	and.w	r3, r3, #31
   d41b0:	4333      	orrs	r3, r6
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41b2:	a801      	add	r0, sp, #4
   d41b4:	9301      	str	r3, [sp, #4]
   d41b6:	f7ff ffb5 	bl	d4124 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d41ba:	9a01      	ldr	r2, [sp, #4]
   d41bc:	2301      	movs	r3, #1
   d41be:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d41c0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d41c4:	b002      	add	sp, #8
   d41c6:	bd70      	pop	{r4, r5, r6, pc}
   d41c8:	2003e410 	.word	0x2003e410
   d41cc:	2003e280 	.word	0x2003e280
   d41d0:	2003e284 	.word	0x2003e284

000d41d4 <_Z7sendNow6String>:
{
   d41d4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d41d6:	4904      	ldr	r1, [pc, #16]	; (d41e8 <_Z7sendNow6String+0x14>)
   d41d8:	f006 fba9 	bl	da92e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d41dc:	b118      	cbz	r0, d41e6 <_Z7sendNow6String+0x12>
    state = REPORTING_STATE;
   d41de:	4b03      	ldr	r3, [pc, #12]	; (d41ec <_Z7sendNow6String+0x18>)
   d41e0:	2206      	movs	r2, #6
   d41e2:	701a      	strb	r2, [r3, #0]
    return 1;
   d41e4:	2001      	movs	r0, #1
}
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	000dc2f8 	.word	0x000dc2f8
   d41ec:	2003e411 	.word	0x2003e411

000d41f0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d41f0:	b510      	push	{r4, lr}
   d41f2:	4b03      	ldr	r3, [pc, #12]	; (d4200 <_ZN8MB85RC64D1Ev+0x10>)
   d41f4:	6003      	str	r3, [r0, #0]
   d41f6:	4604      	mov	r4, r0
   d41f8:	f002 ffa6 	bl	d7148 <_ZN6MB85RCD1Ev>
   d41fc:	4620      	mov	r0, r4
   d41fe:	bd10      	pop	{r4, pc}
   d4200:	000dc8b0 	.word	0x000dc8b0

000d4204 <_ZN8MB85RC64D0Ev>:
   d4204:	b510      	push	{r4, lr}
   d4206:	4604      	mov	r4, r0
   d4208:	f7ff fff2 	bl	d41f0 <_ZN8MB85RC64D1Ev>
   d420c:	4620      	mov	r0, r4
   d420e:	2110      	movs	r1, #16
   d4210:	f007 f99a 	bl	db548 <_ZdlPvj>
   d4214:	4620      	mov	r0, r4
   d4216:	bd10      	pop	{r4, pc}

000d4218 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4218:	b510      	push	{r4, lr}
   d421a:	4b03      	ldr	r3, [pc, #12]	; (d4228 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d421c:	6003      	str	r3, [r0, #0]
   d421e:	4604      	mov	r4, r0
   d4220:	f003 fa9e 	bl	d7760 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4224:	4620      	mov	r0, r4
   d4226:	bd10      	pop	{r4, pc}
   d4228:	000dc8cc 	.word	0x000dc8cc

000d422c <_ZN17PublishQueueAsyncD0Ev>:
   d422c:	b510      	push	{r4, lr}
   d422e:	4604      	mov	r4, r0
   d4230:	f7ff fff2 	bl	d4218 <_ZN17PublishQueueAsyncD1Ev>
   d4234:	4620      	mov	r0, r4
   d4236:	2138      	movs	r1, #56	; 0x38
   d4238:	f007 f986 	bl	db548 <_ZdlPvj>
   d423c:	4620      	mov	r0, r4
   d423e:	bd10      	pop	{r4, pc}

000d4240 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4240:	6943      	ldr	r3, [r0, #20]
   d4242:	b113      	cbz	r3, d424a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4244:	6983      	ldr	r3, [r0, #24]
   d4246:	300c      	adds	r0, #12
   d4248:	4718      	bx	r3
            callback();
        }
    }
   d424a:	4770      	bx	lr

000d424c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d424c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d424e:	2100      	movs	r1, #0
   d4250:	4604      	mov	r4, r0
   d4252:	4608      	mov	r0, r1
   d4254:	f003 fce2 	bl	d7c1c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4258:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d425a:	4620      	mov	r0, r4
   d425c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d425e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4260:	f003 fcf4 	bl	d7c4c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4264:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4266:	b10c      	cbz	r4, d426c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4268:	2301      	movs	r3, #1
   d426a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d426c:	2100      	movs	r1, #0
   d426e:	2001      	movs	r0, #1
   d4270:	f003 fcd4 	bl	d7c1c <os_thread_scheduling>
            }
        }
        if (t) {
   d4274:	b12c      	cbz	r4, d4282 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4276:	6823      	ldr	r3, [r4, #0]
   d4278:	4620      	mov	r0, r4
   d427a:	689b      	ldr	r3, [r3, #8]
   d427c:	4798      	blx	r3
            t->running = false;
   d427e:	2300      	movs	r3, #0
   d4280:	7123      	strb	r3, [r4, #4]
        }
    }
   d4282:	b002      	add	sp, #8
   d4284:	bd10      	pop	{r4, pc}
	...

000d4288 <_Z11resetCounts6String>:
{
   d4288:	b508      	push	{r3, lr}
   d428a:	490a      	ldr	r1, [pc, #40]	; (d42b4 <_Z11resetCounts6String+0x2c>)
   d428c:	f006 fb4f 	bl	da92e <_ZNK6String6equalsEPKc>
   d4290:	2300      	movs	r3, #0
  if (command == "1")
   d4292:	b168      	cbz	r0, d42b0 <_Z11resetCounts6String+0x28>
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d4294:	4a08      	ldr	r2, [pc, #32]	; (d42b8 <_Z11resetCounts6String+0x30>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d4296:	4909      	ldr	r1, [pc, #36]	; (d42bc <_Z11resetCounts6String+0x34>)
    current.hourlyCount = 0;                                          // Reset Hourly Count in memory
   d4298:	6013      	str	r3, [r2, #0]
    current.dailyCount = 0;                                           // Reset Daily Count in memory
   d429a:	6093      	str	r3, [r2, #8]
    current.alertCount = 0;                                           // Reset count variables
   d429c:	6153      	str	r3, [r2, #20]
    current.hourlyCountInFlight = 0;                                  // In the off-chance there is data in flight
   d429e:	6053      	str	r3, [r2, #4]
    dataInFlight = false;
   d42a0:	4a07      	ldr	r2, [pc, #28]	; (d42c0 <_Z11resetCounts6String+0x38>)
    sysStatus.resetCount = 0;                                            // If so, store incremented number - watchdog must have done This
   d42a2:	610b      	str	r3, [r1, #16]
    dataInFlight = false;
   d42a4:	7013      	strb	r3, [r2, #0]
    currentCountsWriteNeeded = true;                                  // Make sure we write to FRAM back in the main loop
   d42a6:	4b07      	ldr	r3, [pc, #28]	; (d42c4 <_Z11resetCounts6String+0x3c>)
   d42a8:	2001      	movs	r0, #1
   d42aa:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded = true;
   d42ac:	4b06      	ldr	r3, [pc, #24]	; (d42c8 <_Z11resetCounts6String+0x40>)
   d42ae:	7018      	strb	r0, [r3, #0]
}
   d42b0:	bd08      	pop	{r3, pc}
   d42b2:	bf00      	nop
   d42b4:	000dc2f8 	.word	0x000dc2f8
   d42b8:	2003e350 	.word	0x2003e350
   d42bc:	2003e41c 	.word	0x2003e41c
   d42c0:	2003e37f 	.word	0x2003e37f
   d42c4:	2003e374 	.word	0x2003e374
   d42c8:	2003e44c 	.word	0x2003e44c

000d42cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d42cc:	b510      	push	{r4, lr}
   d42ce:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d42d0:	6800      	ldr	r0, [r0, #0]
   d42d2:	b118      	cbz	r0, d42dc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d42d4:	f004 f856 	bl	d8384 <free>
            wakeupSource_ = nullptr;
   d42d8:	2300      	movs	r3, #0
   d42da:	6023      	str	r3, [r4, #0]
        }
    }
   d42dc:	bd10      	pop	{r4, pc}

000d42de <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d42de:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d42e0:	2000      	movs	r0, #0
   d42e2:	f003 ffbf 	bl	d8264 <spark_sync_time_pending>
   d42e6:	b128      	cbz	r0, d42f4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42e8:	f003 ff94 	bl	d8214 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d42ec:	f080 0001 	eor.w	r0, r0, #1
   d42f0:	b2c0      	uxtb	r0, r0
    }
   d42f2:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d42f4:	2001      	movs	r0, #1
   d42f6:	e7fc      	b.n	d42f2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d42f8 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d42f8:	2300      	movs	r3, #0
   d42fa:	2204      	movs	r2, #4
   d42fc:	f003 bf6a 	b.w	d81d4 <spark_variable>

000d4300 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_>:
    template<typename T, std::enable_if_t<std::is_function<T>::value, std::nullptr_t> = nullptr>
    static bool register_variable_fn(const char* varKey, const T& fn) {
        using VariableType = CloudVariableType<typename std::result_of<T&()>::type>;
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.copy = [](const void* var, void** data, size_t* size) {
   d4300:	b530      	push	{r4, r5, lr}
   d4302:	b085      	sub	sp, #20
   d4304:	4603      	mov	r3, r0
   d4306:	4614      	mov	r4, r2
            const auto fn = (const T*)var;
            const typename VariableType::ValueType val = fn();
   d4308:	4668      	mov	r0, sp
        extra.copy = [](const void* var, void** data, size_t* size) {
   d430a:	460d      	mov	r5, r1
            const typename VariableType::ValueType val = fn();
   d430c:	4798      	blx	r3
        size = str.length();
   d430e:	9802      	ldr	r0, [sp, #8]
   d4310:	6020      	str	r0, [r4, #0]
        data = malloc(size);
   d4312:	f004 f82f 	bl	d8374 <malloc>
   d4316:	6028      	str	r0, [r5, #0]
        if (!data) {
   d4318:	b150      	cbz	r0, d4330 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x30>
        memcpy(data, str.c_str(), size);
   d431a:	6822      	ldr	r2, [r4, #0]
   d431c:	9900      	ldr	r1, [sp, #0]
   d431e:	f007 fdf9 	bl	dbf14 <memcpy>
        return 0;
   d4322:	2400      	movs	r4, #0
            const typename VariableType::ValueType val = fn();
   d4324:	4668      	mov	r0, sp
   d4326:	f006 fa61 	bl	da7ec <_ZN6StringD1Ev>
        extra.copy = [](const void* var, void** data, size_t* size) {
   d432a:	4620      	mov	r0, r4
   d432c:	b005      	add	sp, #20
   d432e:	bd30      	pop	{r4, r5, pc}
            return SYSTEM_ERROR_NO_MEMORY;
   d4330:	4c00      	ldr	r4, [pc, #0]	; (d4334 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x34>)
   d4332:	e7f7      	b.n	d4324 <_ZZN10CloudClass20register_variable_fnIF6StringvELDn0EEEbPKcRKT_ENUlPKvPPvPjE_4_FUNES9_SB_SC_+0x24>
   d4334:	fffffefc 	.word	0xfffffefc

000d4338 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4338:	4b0a      	ldr	r3, [pc, #40]	; (d4364 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d433a:	b510      	push	{r4, lr}
   d433c:	4604      	mov	r4, r0
   d433e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4340:	f005 f9e8 	bl	d9714 <_ZN5spark10LogManager8instanceEv>
   d4344:	4621      	mov	r1, r4
   d4346:	f005 fbe6 	bl	d9b16 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d434a:	f006 ff17 	bl	db17c <_Z16_fetch_usbserialv>
   d434e:	f006 ff09 	bl	db164 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4352:	4620      	mov	r0, r4
   d4354:	4b04      	ldr	r3, [pc, #16]	; (d4368 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4356:	f840 3b04 	str.w	r3, [r0], #4
   d435a:	f005 fac9 	bl	d98f0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d435e:	4620      	mov	r0, r4
   d4360:	bd10      	pop	{r4, pc}
   d4362:	bf00      	nop
   d4364:	000dc898 	.word	0x000dc898
   d4368:	000dc880 	.word	0x000dc880

000d436c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d436c:	b510      	push	{r4, lr}
   d436e:	4604      	mov	r4, r0
    }
   d4370:	f7ff ffe2 	bl	d4338 <_ZN5spark16SerialLogHandlerD1Ev>
   d4374:	4620      	mov	r0, r4
   d4376:	2124      	movs	r1, #36	; 0x24
   d4378:	f007 f8e6 	bl	db548 <_ZdlPvj>
   d437c:	4620      	mov	r0, r4
   d437e:	bd10      	pop	{r4, pc}

000d4380 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4380:	2300      	movs	r3, #0
   d4382:	6840      	ldr	r0, [r0, #4]
   d4384:	461a      	mov	r2, r3
   d4386:	4619      	mov	r1, r3
   d4388:	f003 bfbc 	b.w	d8304 <network_off>

000d438c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d438c:	b510      	push	{r4, lr}
      if (_M_manager)
   d438e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4390:	4604      	mov	r4, r0
      if (_M_manager)
   d4392:	b113      	cbz	r3, d439a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4394:	2203      	movs	r2, #3
   d4396:	4601      	mov	r1, r0
   d4398:	4798      	blx	r3
    }
   d439a:	4620      	mov	r0, r4
   d439c:	bd10      	pop	{r4, pc}
	...

000d43a0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d43a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43a2:	4b13      	ldr	r3, [pc, #76]	; (d43f0 <_ZN5TimerD1Ev+0x50>)
   d43a4:	6003      	str	r3, [r0, #0]
   d43a6:	4604      	mov	r4, r0
        if (handle) {
   d43a8:	6880      	ldr	r0, [r0, #8]
   d43aa:	b1c8      	cbz	r0, d43e0 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d43ac:	2500      	movs	r5, #0
   d43ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d43b2:	e9cd 3500 	strd	r3, r5, [sp]
   d43b6:	2102      	movs	r1, #2
   d43b8:	462b      	mov	r3, r5
   d43ba:	462a      	mov	r2, r5
   d43bc:	f003 fc4e 	bl	d7c5c <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d43c0:	68a0      	ldr	r0, [r4, #8]
   d43c2:	4629      	mov	r1, r5
   d43c4:	f003 fc9a 	bl	d7cfc <os_timer_set_id>
            while (running) {
   d43c8:	7923      	ldrb	r3, [r4, #4]
   d43ca:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d43ce:	b113      	cbz	r3, d43d6 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d43d0:	f003 fc1c 	bl	d7c0c <os_thread_yield>
            while (running) {
   d43d4:	e7f8      	b.n	d43c8 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d43d6:	68a0      	ldr	r0, [r4, #8]
   d43d8:	4629      	mov	r1, r5
   d43da:	f003 fc2f 	bl	d7c3c <os_timer_destroy>
            handle = nullptr;
   d43de:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d43e0:	f104 000c 	add.w	r0, r4, #12
   d43e4:	f7ff ffd2 	bl	d438c <_ZNSt14_Function_baseD1Ev>
    }
   d43e8:	4620      	mov	r0, r4
   d43ea:	b003      	add	sp, #12
   d43ec:	bd30      	pop	{r4, r5, pc}
   d43ee:	bf00      	nop
   d43f0:	000dc86c 	.word	0x000dc86c

000d43f4 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d43f4:	b510      	push	{r4, lr}
   d43f6:	4604      	mov	r4, r0
    }
   d43f8:	f7ff ffd2 	bl	d43a0 <_ZN5TimerD1Ev>
   d43fc:	4620      	mov	r0, r4
   d43fe:	211c      	movs	r1, #28
   d4400:	f007 f8a2 	bl	db548 <_ZdlPvj>
   d4404:	4620      	mov	r0, r4
   d4406:	bd10      	pop	{r4, pc}

000d4408 <_ZN8particle24SystemPowerConfigurationC1Ev>:
};

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
   d4408:	b538      	push	{r3, r4, r5, lr}
   d440a:	4604      	mov	r4, r0
            : conf_{} {
   d440c:	2520      	movs	r5, #32
   d440e:	462a      	mov	r2, r5
   d4410:	2100      	movs	r1, #0
   d4412:	f007 fda7 	bl	dbf64 <memset>
        conf_.size = sizeof(conf_);
   d4416:	7165      	strb	r5, [r4, #5]
    }
   d4418:	4620      	mov	r0, r4
   d441a:	bd38      	pop	{r3, r4, r5, pc}

000d441c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d441e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4420:	4605      	mov	r5, r0
   d4422:	460f      	mov	r7, r1
   d4424:	4616      	mov	r6, r2
        if (valid_) {
   d4426:	b18b      	cbz	r3, d444c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4428:	6803      	ldr	r3, [r0, #0]
   d442a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d442c:	b183      	cbz	r3, d4450 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d442e:	889a      	ldrh	r2, [r3, #4]
   d4430:	2a01      	cmp	r2, #1
   d4432:	d006      	beq.n	d4442 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4434:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4436:	e7f9      	b.n	d442c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4438:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d443a:	b14b      	cbz	r3, d4450 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d443c:	889a      	ldrh	r2, [r3, #4]
   d443e:	2a01      	cmp	r2, #1
   d4440:	d1fa      	bne.n	d4438 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4442:	b12b      	cbz	r3, d4450 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4444:	899a      	ldrh	r2, [r3, #12]
   d4446:	42ba      	cmp	r2, r7
   d4448:	d1f6      	bne.n	d4438 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d444a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d444c:	4628      	mov	r0, r5
   d444e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4450:	490a      	ldr	r1, [pc, #40]	; (d447c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4452:	2010      	movs	r0, #16
   d4454:	f007 f87a 	bl	db54c <_ZnwjRKSt9nothrow_t>
   d4458:	4604      	mov	r4, r0
   d445a:	b168      	cbz	r0, d4478 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d445c:	2210      	movs	r2, #16
   d445e:	2100      	movs	r1, #0
   d4460:	f007 fd80 	bl	dbf64 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4464:	4b06      	ldr	r3, [pc, #24]	; (d4480 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4466:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4468:	2301      	movs	r3, #1
   d446a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d446c:	692b      	ldr	r3, [r5, #16]
   d446e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4470:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4472:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4474:	612c      	str	r4, [r5, #16]
   d4476:	e7e9      	b.n	d444c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4478:	7528      	strb	r0, [r5, #20]
                return *this;
   d447a:	e7e7      	b.n	d444c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d447c:	000dcfdc 	.word	0x000dcfdc
   d4480:	00030010 	.word	0x00030010

000d4484 <_ZN8particle24SystemSleepConfiguration8durationEm>:

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4484:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4486:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4488:	4605      	mov	r5, r0
   d448a:	460e      	mov	r6, r1
        if (valid_) {
   d448c:	b1cb      	cbz	r3, d44c2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d448e:	6803      	ldr	r3, [r0, #0]
   d4490:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4492:	b123      	cbz	r3, d449e <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4494:	889a      	ldrh	r2, [r3, #4]
   d4496:	2a04      	cmp	r2, #4
   d4498:	d017      	beq.n	d44ca <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d449a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d449c:	e7f9      	b.n	d4492 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d449e:	490c      	ldr	r1, [pc, #48]	; (d44d0 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d44a0:	2010      	movs	r0, #16
   d44a2:	f007 f853 	bl	db54c <_ZnwjRKSt9nothrow_t>
   d44a6:	4604      	mov	r4, r0
   d44a8:	b168      	cbz	r0, d44c6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d44aa:	2210      	movs	r2, #16
   d44ac:	2100      	movs	r1, #0
   d44ae:	f007 fd59 	bl	dbf64 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d44b2:	4b08      	ldr	r3, [pc, #32]	; (d44d4 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d44b4:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d44b6:	2304      	movs	r3, #4
   d44b8:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d44ba:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d44bc:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d44be:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d44c2:	4628      	mov	r0, r5
   d44c4:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d44c6:	7528      	strb	r0, [r5, #20]
                return *this;
   d44c8:	e7fb      	b.n	d44c2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d44ca:	60de      	str	r6, [r3, #12]
                return *this;
   d44cc:	e7f9      	b.n	d44c2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d44ce:	bf00      	nop
   d44d0:	000dcfdc 	.word	0x000dcfdc
   d44d4:	00030010 	.word	0x00030010

000d44d8 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d44d8:	2000      	movs	r0, #0
   d44da:	f003 bc4f 	b.w	d7d7c <hal_timer_millis>
	...

000d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d44e0:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d44e2:	4801      	ldr	r0, [pc, #4]	; (d44e8 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d44e4:	f004 b988 	b.w	d87f8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d44e8:	000d87cd 	.word	0x000d87cd

000d44ec <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d44ec:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d44ee:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d44f0:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d44f2:	2100      	movs	r1, #0
   d44f4:	b140      	cbz	r0, d4508 <_ZN5Timer12changePeriodEjj+0x1c>
   d44f6:	e9cd 2100 	strd	r2, r1, [sp]
   d44fa:	460a      	mov	r2, r1
   d44fc:	2103      	movs	r1, #3
   d44fe:	f003 fbad 	bl	d7c5c <os_timer_change>
   d4502:	fab0 f080 	clz	r0, r0
   d4506:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4508:	b003      	add	sp, #12
   d450a:	f85d fb04 	ldr.w	pc, [sp], #4

000d450e <_ZNK5Timer8isActiveEv>:
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d450e:	b508      	push	{r3, lr}
    bool isValid() const { return handle!=nullptr; }
   d4510:	6880      	ldr	r0, [r0, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
   d4512:	b128      	cbz	r0, d4520 <_ZNK5Timer8isActiveEv+0x12>
   d4514:	2100      	movs	r1, #0
   d4516:	f003 fbe1 	bl	d7cdc <os_timer_is_active>
   d451a:	3800      	subs	r0, #0
   d451c:	bf18      	it	ne
   d451e:	2001      	movne	r0, #1
   d4520:	bd08      	pop	{r3, pc}

000d4522 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4522:	b40e      	push	{r1, r2, r3}
   d4524:	b510      	push	{r4, lr}
   d4526:	b08d      	sub	sp, #52	; 0x34
   d4528:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d452a:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d452c:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4530:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4532:	2300      	movs	r3, #0
   d4534:	2020      	movs	r0, #32
   d4536:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d453a:	e9cd 4200 	strd	r4, r2, [sp]
   d453e:	201e      	movs	r0, #30
   d4540:	aa04      	add	r2, sp, #16
   d4542:	f003 fdab 	bl	d809c <log_message_v>
}
   d4546:	b00d      	add	sp, #52	; 0x34
   d4548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d454c:	b003      	add	sp, #12
   d454e:	4770      	bx	lr

000d4550 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d4550:	b40e      	push	{r1, r2, r3}
   d4552:	b510      	push	{r4, lr}
   d4554:	b08d      	sub	sp, #52	; 0x34
   d4556:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d4558:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d455a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d455e:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d4560:	2300      	movs	r3, #0
   d4562:	2020      	movs	r0, #32
   d4564:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4568:	e9cd 4200 	strd	r4, r2, [sp]
   d456c:	2032      	movs	r0, #50	; 0x32
   d456e:	aa04      	add	r2, sp, #16
   d4570:	f003 fd94 	bl	d809c <log_message_v>
}
   d4574:	b00d      	add	sp, #52	; 0x34
   d4576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d457a:	b003      	add	sp, #12
   d457c:	4770      	bx	lr

000d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d457e:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4580:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4582:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4586:	f88d 3000 	strb.w	r3, [sp]
   d458a:	f88d 5004 	strb.w	r5, [sp, #4]
   d458e:	68e4      	ldr	r4, [r4, #12]
   d4590:	233c      	movs	r3, #60	; 0x3c
   d4592:	47a0      	blx	r4
	}
   d4594:	b003      	add	sp, #12
   d4596:	bd30      	pop	{r4, r5, pc}

000d4598 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4598:	b530      	push	{r4, r5, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d459a:	780b      	ldrb	r3, [r1, #0]
   d459c:	4d1c      	ldr	r5, [pc, #112]	; (d4610 <_Z14UbidotsHandlerPKcS0_+0x78>)
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d459e:	b093      	sub	sp, #76	; 0x4c
   d45a0:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d45a2:	b993      	cbnz	r3, d45ca <_Z14UbidotsHandlerPKcS0_+0x32>
    snprintf(responseString, sizeof(responseString),"No Data");
   d45a4:	491b      	ldr	r1, [pc, #108]	; (d4614 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d45a6:	a802      	add	r0, sp, #8
   d45a8:	f007 fd29 	bl	dbffe <strcpy>
  if (sysStatus.verboseMode) publishQueue.publish("Ubidots Hook", responseString, PRIVATE, WITH_ACK);
   d45ac:	792b      	ldrb	r3, [r5, #4]
   d45ae:	b153      	cbz	r3, d45c6 <_Z14UbidotsHandlerPKcS0_+0x2e>
inline particle::Flag<TagT, ValueT>::operator ValueT() const {
    return val_;
}

template<typename TagT, typename ValueT>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d45b0:	4b19      	ldr	r3, [pc, #100]	; (d4618 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d45b2:	491a      	ldr	r1, [pc, #104]	; (d461c <_Z14UbidotsHandlerPKcS0_+0x84>)
   d45b4:	781b      	ldrb	r3, [r3, #0]
   d45b6:	f88d 3000 	strb.w	r3, [sp]
   d45ba:	4b19      	ldr	r3, [pc, #100]	; (d4620 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d45bc:	4819      	ldr	r0, [pc, #100]	; (d4624 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d45be:	781b      	ldrb	r3, [r3, #0]
   d45c0:	aa02      	add	r2, sp, #8
   d45c2:	f7ff ffdc 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d45c6:	b013      	add	sp, #76	; 0x4c
   d45c8:	bd30      	pop	{r4, r5, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d45ca:	4608      	mov	r0, r1
   d45cc:	f007 fc8c 	bl	dbee8 <atoi>
   d45d0:	28c8      	cmp	r0, #200	; 0xc8
   d45d2:	d10d      	bne.n	d45f0 <_Z14UbidotsHandlerPKcS0_+0x58>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d45d4:	4914      	ldr	r1, [pc, #80]	; (d4628 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d45d6:	a802      	add	r0, sp, #8
   d45d8:	f007 fd11 	bl	dbffe <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d45dc:	f006 fc8b 	bl	daef6 <_ZN9TimeClass3nowEv>
    systemStatusWriteNeeded = true;
   d45e0:	4b12      	ldr	r3, [pc, #72]	; (d462c <_Z14UbidotsHandlerPKcS0_+0x94>)
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d45e2:	6228      	str	r0, [r5, #32]
    systemStatusWriteNeeded = true;
   d45e4:	2201      	movs	r2, #1
   d45e6:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d45e8:	4b11      	ldr	r3, [pc, #68]	; (d4630 <_Z14UbidotsHandlerPKcS0_+0x98>)
   d45ea:	2200      	movs	r2, #0
   d45ec:	701a      	strb	r2, [r3, #0]
   d45ee:	e7dd      	b.n	d45ac <_Z14UbidotsHandlerPKcS0_+0x14>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d45f0:	4620      	mov	r0, r4
   d45f2:	f007 fc79 	bl	dbee8 <atoi>
   d45f6:	28c9      	cmp	r0, #201	; 0xc9
   d45f8:	d0ec      	beq.n	d45d4 <_Z14UbidotsHandlerPKcS0_+0x3c>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d45fa:	4620      	mov	r0, r4
   d45fc:	f007 fc74 	bl	dbee8 <atoi>
   d4600:	4a0c      	ldr	r2, [pc, #48]	; (d4634 <_Z14UbidotsHandlerPKcS0_+0x9c>)
   d4602:	4603      	mov	r3, r0
   d4604:	2140      	movs	r1, #64	; 0x40
   d4606:	a802      	add	r0, sp, #8
   d4608:	f003 fed4 	bl	d83b4 <snprintf>
   d460c:	e7ce      	b.n	d45ac <_Z14UbidotsHandlerPKcS0_+0x14>
   d460e:	bf00      	nop
   d4610:	2003e41c 	.word	0x2003e41c
   d4614:	000dc32d 	.word	0x000dc32d
   d4618:	2003e2d5 	.word	0x2003e2d5
   d461c:	000dc364 	.word	0x000dc364
   d4620:	2003e2d4 	.word	0x2003e2d4
   d4624:	2003e3d4 	.word	0x2003e3d4
   d4628:	000dc335 	.word	0x000dc335
   d462c:	2003e44c 	.word	0x2003e44c
   d4630:	2003e37f 	.word	0x2003e37f
   d4634:	000dc347 	.word	0x000dc347

000d4638 <_Z12hardResetNow6String>:
{
   d4638:	b507      	push	{r0, r1, r2, lr}
   d463a:	490b      	ldr	r1, [pc, #44]	; (d4668 <_Z12hardResetNow6String+0x30>)
   d463c:	f006 f977 	bl	da92e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4640:	b170      	cbz	r0, d4660 <_Z12hardResetNow6String+0x28>
    publishQueue.publish("Reset","Hard Reset in 2 seconds",PRIVATE);
   d4642:	2300      	movs	r3, #0
   d4644:	f88d 3000 	strb.w	r3, [sp]
   d4648:	4b08      	ldr	r3, [pc, #32]	; (d466c <_Z12hardResetNow6String+0x34>)
   d464a:	4a09      	ldr	r2, [pc, #36]	; (d4670 <_Z12hardResetNow6String+0x38>)
   d464c:	781b      	ldrb	r3, [r3, #0]
   d464e:	4909      	ldr	r1, [pc, #36]	; (d4674 <_Z12hardResetNow6String+0x3c>)
   d4650:	4809      	ldr	r0, [pc, #36]	; (d4678 <_Z12hardResetNow6String+0x40>)
   d4652:	f7ff ff94 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    ab1805.deepPowerDown(10);
   d4656:	4809      	ldr	r0, [pc, #36]	; (d467c <_Z12hardResetNow6String+0x44>)
   d4658:	210a      	movs	r1, #10
   d465a:	f002 fa7f 	bl	d6b5c <_ZN6AB180513deepPowerDownEi>
   d465e:	2001      	movs	r0, #1
}
   d4660:	b003      	add	sp, #12
   d4662:	f85d fb04 	ldr.w	pc, [sp], #4
   d4666:	bf00      	nop
   d4668:	000dc2f8 	.word	0x000dc2f8
   d466c:	2003e2d4 	.word	0x2003e2d4
   d4670:	000dc371 	.word	0x000dc371
   d4674:	000dc816 	.word	0x000dc816
   d4678:	2003e3d4 	.word	0x2003e3d4
   d467c:	2003e2e4 	.word	0x2003e2e4

000d4680 <_Z14setVerboseMode6String>:
{
   d4680:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4682:	4919      	ldr	r1, [pc, #100]	; (d46e8 <_Z14setVerboseMode6String+0x68>)
   d4684:	4605      	mov	r5, r0
   d4686:	f006 f952 	bl	da92e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d468a:	4604      	mov	r4, r0
   d468c:	b1b0      	cbz	r0, d46bc <_Z14setVerboseMode6String+0x3c>
    sysStatus.verboseMode = true;
   d468e:	4b17      	ldr	r3, [pc, #92]	; (d46ec <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d4690:	4a17      	ldr	r2, [pc, #92]	; (d46f0 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = true;
   d4692:	2401      	movs	r4, #1
   d4694:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d4696:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d4698:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d469a:	b913      	cbnz	r3, d46a2 <_Z14setVerboseMode6String+0x22>
    return 1;
   d469c:	2001      	movs	r0, #1
}
   d469e:	b003      	add	sp, #12
   d46a0:	bd30      	pop	{r4, r5, pc}
   d46a2:	4b14      	ldr	r3, [pc, #80]	; (d46f4 <_Z14setVerboseMode6String+0x74>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Verbose Mode", PRIVATE, WITH_ACK);
   d46a4:	4a14      	ldr	r2, [pc, #80]	; (d46f8 <_Z14setVerboseMode6String+0x78>)
   d46a6:	781b      	ldrb	r3, [r3, #0]
   d46a8:	f88d 3000 	strb.w	r3, [sp]
   d46ac:	4b13      	ldr	r3, [pc, #76]	; (d46fc <_Z14setVerboseMode6String+0x7c>)
   d46ae:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d46b0:	4913      	ldr	r1, [pc, #76]	; (d4700 <_Z14setVerboseMode6String+0x80>)
   d46b2:	4814      	ldr	r0, [pc, #80]	; (d4704 <_Z14setVerboseMode6String+0x84>)
   d46b4:	f7ff ff63 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d46b8:	4620      	mov	r0, r4
   d46ba:	e7f0      	b.n	d469e <_Z14setVerboseMode6String+0x1e>
   d46bc:	4912      	ldr	r1, [pc, #72]	; (d4708 <_Z14setVerboseMode6String+0x88>)
   d46be:	4628      	mov	r0, r5
   d46c0:	f006 f935 	bl	da92e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d46c4:	2800      	cmp	r0, #0
   d46c6:	d0ea      	beq.n	d469e <_Z14setVerboseMode6String+0x1e>
    sysStatus.verboseMode = false;
   d46c8:	4b08      	ldr	r3, [pc, #32]	; (d46ec <_Z14setVerboseMode6String+0x6c>)
    systemStatusWriteNeeded = true;
   d46ca:	4a09      	ldr	r2, [pc, #36]	; (d46f0 <_Z14setVerboseMode6String+0x70>)
    sysStatus.verboseMode = false;
   d46cc:	711c      	strb	r4, [r3, #4]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d46ce:	78db      	ldrb	r3, [r3, #3]
    systemStatusWriteNeeded = true;
   d46d0:	2401      	movs	r4, #1
   d46d2:	7014      	strb	r4, [r2, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Verbose Mode", PRIVATE, WITH_ACK);
   d46d4:	2b00      	cmp	r3, #0
   d46d6:	d0e1      	beq.n	d469c <_Z14setVerboseMode6String+0x1c>
   d46d8:	4b06      	ldr	r3, [pc, #24]	; (d46f4 <_Z14setVerboseMode6String+0x74>)
   d46da:	4a0c      	ldr	r2, [pc, #48]	; (d470c <_Z14setVerboseMode6String+0x8c>)
   d46dc:	781b      	ldrb	r3, [r3, #0]
   d46de:	f88d 3000 	strb.w	r3, [sp]
   d46e2:	4b06      	ldr	r3, [pc, #24]	; (d46fc <_Z14setVerboseMode6String+0x7c>)
   d46e4:	781b      	ldrb	r3, [r3, #0]
   d46e6:	e7e3      	b.n	d46b0 <_Z14setVerboseMode6String+0x30>
   d46e8:	000dc2f8 	.word	0x000dc2f8
   d46ec:	2003e41c 	.word	0x2003e41c
   d46f0:	2003e44c 	.word	0x2003e44c
   d46f4:	2003e2d5 	.word	0x2003e2d5
   d46f8:	000dc389 	.word	0x000dc389
   d46fc:	2003e2d4 	.word	0x2003e2d4
   d4700:	000dc55a 	.word	0x000dc55a
   d4704:	2003e3d4 	.word	0x2003e3d4
   d4708:	000dc590 	.word	0x000dc590
   d470c:	000dc39a 	.word	0x000dc39a

000d4710 <_Z11setOpenTime6String.part.0>:
 * @param command A string indicating what the closing hour of the facility is in 24-hour time.
 * Inputs outside of "0" - "24" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setOpenTime(String command)
   d4710:	b500      	push	{lr}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  makeUpParkHourStrings();                                                    // Create the strings for the console
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (sysStatus.connectedStatus) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d4712:	4b0c      	ldr	r3, [pc, #48]	; (d4744 <_Z11setOpenTime6String.part.0+0x34>)
   d4714:	4a0c      	ldr	r2, [pc, #48]	; (d4748 <_Z11setOpenTime6String.part.0+0x38>)
   d4716:	7f1b      	ldrb	r3, [r3, #28]
int setOpenTime(String command)
   d4718:	b0c3      	sub	sp, #268	; 0x10c
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
   d471a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d471e:	a802      	add	r0, sp, #8
   d4720:	f003 fe48 	bl	d83b4 <snprintf>
   d4724:	4b09      	ldr	r3, [pc, #36]	; (d474c <_Z11setOpenTime6String.part.0+0x3c>)
    publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4726:	490a      	ldr	r1, [pc, #40]	; (d4750 <_Z11setOpenTime6String.part.0+0x40>)
   d4728:	781b      	ldrb	r3, [r3, #0]
   d472a:	f88d 3000 	strb.w	r3, [sp]
   d472e:	4b09      	ldr	r3, [pc, #36]	; (d4754 <_Z11setOpenTime6String.part.0+0x44>)
   d4730:	4809      	ldr	r0, [pc, #36]	; (d4758 <_Z11setOpenTime6String.part.0+0x48>)
   d4732:	781b      	ldrb	r3, [r3, #0]
   d4734:	aa02      	add	r2, sp, #8
   d4736:	f7ff ff22 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  return 1;
}
   d473a:	2001      	movs	r0, #1
   d473c:	b043      	add	sp, #268	; 0x10c
   d473e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4742:	bf00      	nop
   d4744:	2003e41c 	.word	0x2003e41c
   d4748:	000dc3af 	.word	0x000dc3af
   d474c:	2003e2d5 	.word	0x2003e2d5
   d4750:	000dc654 	.word	0x000dc654
   d4754:	2003e2d4 	.word	0x2003e2d4
   d4758:	2003e3d4 	.word	0x2003e3d4

000d475c <_Z13setDailyCount6String>:
 * Inputs outside of "0" - "1000" will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setDailyCount(String command)
{
   d475c:	b530      	push	{r4, r5, lr}
   d475e:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempCount = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4760:	6800      	ldr	r0, [r0, #0]
   d4762:	220a      	movs	r2, #10
   d4764:	a903      	add	r1, sp, #12
   d4766:	f007 fd2b 	bl	dc1c0 <strtol>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d476a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d476e:	d81e      	bhi.n	d47ae <_Z13setDailyCount6String+0x52>
  current.dailyCount = tempCount;
   d4770:	4d10      	ldr	r5, [pc, #64]	; (d47b4 <_Z13setDailyCount6String+0x58>)
   d4772:	60a8      	str	r0, [r5, #8]
  current.lastCountTime = Time.now();
   d4774:	f006 fbbf 	bl	daef6 <_ZN9TimeClass3nowEv>
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4778:	4b0f      	ldr	r3, [pc, #60]	; (d47b8 <_Z13setDailyCount6String+0x5c>)
  current.lastCountTime = Time.now();
   d477a:	60e8      	str	r0, [r5, #12]
  currentCountsWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d477c:	2401      	movs	r4, #1
   d477e:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Daily count set to %i",current.dailyCount);
   d4780:	4a0e      	ldr	r2, [pc, #56]	; (d47bc <_Z13setDailyCount6String+0x60>)
   d4782:	68ab      	ldr	r3, [r5, #8]
   d4784:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4788:	a804      	add	r0, sp, #16
   d478a:	f003 fe13 	bl	d83b4 <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Daily",data, PRIVATE, WITH_ACK);
   d478e:	4b0c      	ldr	r3, [pc, #48]	; (d47c0 <_Z13setDailyCount6String+0x64>)
   d4790:	78db      	ldrb	r3, [r3, #3]
   d4792:	b153      	cbz	r3, d47aa <_Z13setDailyCount6String+0x4e>
   d4794:	4b0b      	ldr	r3, [pc, #44]	; (d47c4 <_Z13setDailyCount6String+0x68>)
   d4796:	490c      	ldr	r1, [pc, #48]	; (d47c8 <_Z13setDailyCount6String+0x6c>)
   d4798:	781b      	ldrb	r3, [r3, #0]
   d479a:	f88d 3000 	strb.w	r3, [sp]
   d479e:	4b0b      	ldr	r3, [pc, #44]	; (d47cc <_Z13setDailyCount6String+0x70>)
   d47a0:	480b      	ldr	r0, [pc, #44]	; (d47d0 <_Z13setDailyCount6String+0x74>)
   d47a2:	781b      	ldrb	r3, [r3, #0]
   d47a4:	aa04      	add	r2, sp, #16
   d47a6:	f7ff feea 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d47aa:	4620      	mov	r0, r4
   d47ac:	e000      	b.n	d47b0 <_Z13setDailyCount6String+0x54>
  if ((tempCount < 0) || (tempCount > 1000)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d47ae:	2000      	movs	r0, #0
}
   d47b0:	b045      	add	sp, #276	; 0x114
   d47b2:	bd30      	pop	{r4, r5, pc}
   d47b4:	2003e350 	.word	0x2003e350
   d47b8:	2003e374 	.word	0x2003e374
   d47bc:	000dc3c3 	.word	0x000dc3c3
   d47c0:	2003e41c 	.word	0x2003e41c
   d47c4:	2003e2d5 	.word	0x2003e2d5
   d47c8:	000dc3d9 	.word	0x000dc3d9
   d47cc:	2003e2d4 	.word	0x2003e2d4
   d47d0:	2003e3d4 	.word	0x2003e3d4

000d47d4 <_Z14setSensitivity6String>:
 * @param Looking for a sensitivity level from 0 - not sensitive to 10 - very sensitive
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setSensitivity(String command)
{
   d47d4:	b530      	push	{r4, r5, lr}
   d47d6:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempValue = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d47d8:	6800      	ldr	r0, [r0, #0]
   d47da:	220a      	movs	r2, #10
   d47dc:	a903      	add	r1, sp, #12
   d47de:	f007 fcef 	bl	dc1c0 <strtol>
  if ((tempValue < 0) || (tempValue > 10)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d47e2:	280a      	cmp	r0, #10
   d47e4:	d827      	bhi.n	d4836 <_Z14setSensitivity6String+0x62>
  sysStatus.sensitivity = tempValue;
   d47e6:	4d15      	ldr	r5, [pc, #84]	; (d483c <_Z14setSensitivity6String+0x68>)
   d47e8:	b2c1      	uxtb	r1, r0
    accel.setupTapIntsPulse(sysStatus.sensitivity);                           // Initialize the accelerometer
   d47ea:	4815      	ldr	r0, [pc, #84]	; (d4840 <_Z14setSensitivity6String+0x6c>)
  sysStatus.sensitivity = tempValue;
   d47ec:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
    accel.setupTapIntsPulse(sysStatus.sensitivity);                           // Initialize the accelerometer
   d47f0:	f002 fe8e 	bl	d7510 <_ZN8MMA8452Q17setupTapIntsPulseEh>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d47f4:	4b13      	ldr	r3, [pc, #76]	; (d4844 <_Z14setSensitivity6String+0x70>)
  snprintf(sensitivityStr, sizeof(sensitivityStr), "%i", sysStatus.sensitivity);
   d47f6:	4a14      	ldr	r2, [pc, #80]	; (d4848 <_Z14setSensitivity6String+0x74>)
   d47f8:	4814      	ldr	r0, [pc, #80]	; (d484c <_Z14setSensitivity6String+0x78>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d47fa:	2401      	movs	r4, #1
   d47fc:	701c      	strb	r4, [r3, #0]
  snprintf(sensitivityStr, sizeof(sensitivityStr), "%i", sysStatus.sensitivity);
   d47fe:	2108      	movs	r1, #8
   d4800:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   d4804:	f003 fdd6 	bl	d83b4 <snprintf>
  snprintf(data, sizeof(data), "Sensitivity set to %i",sysStatus.sensitivity);
   d4808:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   d480c:	4a10      	ldr	r2, [pc, #64]	; (d4850 <_Z14setSensitivity6String+0x7c>)
   d480e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4812:	a804      	add	r0, sp, #16
   d4814:	f003 fdce 	bl	d83b4 <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4818:	78eb      	ldrb	r3, [r5, #3]
   d481a:	b153      	cbz	r3, d4832 <_Z14setSensitivity6String+0x5e>
   d481c:	4b0d      	ldr	r3, [pc, #52]	; (d4854 <_Z14setSensitivity6String+0x80>)
   d481e:	490e      	ldr	r1, [pc, #56]	; (d4858 <_Z14setSensitivity6String+0x84>)
   d4820:	781b      	ldrb	r3, [r3, #0]
   d4822:	f88d 3000 	strb.w	r3, [sp]
   d4826:	4b0d      	ldr	r3, [pc, #52]	; (d485c <_Z14setSensitivity6String+0x88>)
   d4828:	480d      	ldr	r0, [pc, #52]	; (d4860 <_Z14setSensitivity6String+0x8c>)
   d482a:	781b      	ldrb	r3, [r3, #0]
   d482c:	aa04      	add	r2, sp, #16
   d482e:	f7ff fea6 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d4832:	4620      	mov	r0, r4
   d4834:	e000      	b.n	d4838 <_Z14setSensitivity6String+0x64>
  if ((tempValue < 0) || (tempValue > 10)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4836:	2000      	movs	r0, #0
}
   d4838:	b045      	add	sp, #276	; 0x114
   d483a:	bd30      	pop	{r4, r5, pc}
   d483c:	2003e41c 	.word	0x2003e41c
   d4840:	2003e304 	.word	0x2003e304
   d4844:	2003e44c 	.word	0x2003e44c
   d4848:	000dc472 	.word	0x000dc472
   d484c:	2003e18c 	.word	0x2003e18c
   d4850:	000dc3df 	.word	0x000dc3df
   d4854:	2003e2d5 	.word	0x2003e2d5
   d4858:	000dc654 	.word	0x000dc654
   d485c:	2003e2d4 	.word	0x2003e2d4
   d4860:	2003e3d4 	.word	0x2003e3d4

000d4864 <_Z14setDebounceSec6String>:
 * @param Looking for a value from 0 to 60 second.  Sets the system value and changes the period of the stay awake timer
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setDebounceSec(String command)
{
   d4864:	b530      	push	{r4, r5, lr}
   d4866:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempValue = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4868:	6800      	ldr	r0, [r0, #0]
   d486a:	220a      	movs	r2, #10
   d486c:	a903      	add	r1, sp, #12
   d486e:	f007 fca7 	bl	dc1c0 <strtol>
  if ((tempValue < 0) || (tempValue > 60)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4872:	283c      	cmp	r0, #60	; 0x3c
   d4874:	d82b      	bhi.n	d48ce <_Z14setDebounceSec6String+0x6a>
  sysStatus.debounceSec = tempValue;
   d4876:	4d17      	ldr	r5, [pc, #92]	; (d48d4 <_Z14setDebounceSec6String+0x70>)
  countSignalTimer.changePeriod(sysStatus.debounceSec*1000);           // This keeps the device awake during debounce
   d4878:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d487c:	4341      	muls	r1, r0
  sysStatus.debounceSec = tempValue;
   d487e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
  countSignalTimer.changePeriod(sysStatus.debounceSec*1000);           // This keeps the device awake during debounce
   d4882:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4886:	4814      	ldr	r0, [pc, #80]	; (d48d8 <_Z14setDebounceSec6String+0x74>)
   d4888:	f7ff fe30 	bl	d44ec <_ZN5Timer12changePeriodEjj>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d488c:	4b13      	ldr	r3, [pc, #76]	; (d48dc <_Z14setDebounceSec6String+0x78>)
  snprintf(debounceStr, sizeof(debounceStr), "%i sec", sysStatus.debounceSec);
   d488e:	4a14      	ldr	r2, [pc, #80]	; (d48e0 <_Z14setDebounceSec6String+0x7c>)
   d4890:	4814      	ldr	r0, [pc, #80]	; (d48e4 <_Z14setDebounceSec6String+0x80>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4892:	2401      	movs	r4, #1
   d4894:	701c      	strb	r4, [r3, #0]
  snprintf(debounceStr, sizeof(debounceStr), "%i sec", sysStatus.debounceSec);
   d4896:	2108      	movs	r1, #8
   d4898:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d489c:	f003 fd8a 	bl	d83b4 <snprintf>
  snprintf(data, sizeof(data), "Debounce set to %i seconds",sysStatus.debounceSec);
   d48a0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d48a4:	4a10      	ldr	r2, [pc, #64]	; (d48e8 <_Z14setDebounceSec6String+0x84>)
   d48a6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d48aa:	a804      	add	r0, sp, #16
   d48ac:	f003 fd82 	bl	d83b4 <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d48b0:	78eb      	ldrb	r3, [r5, #3]
   d48b2:	b153      	cbz	r3, d48ca <_Z14setDebounceSec6String+0x66>
   d48b4:	4b0d      	ldr	r3, [pc, #52]	; (d48ec <_Z14setDebounceSec6String+0x88>)
   d48b6:	490e      	ldr	r1, [pc, #56]	; (d48f0 <_Z14setDebounceSec6String+0x8c>)
   d48b8:	781b      	ldrb	r3, [r3, #0]
   d48ba:	f88d 3000 	strb.w	r3, [sp]
   d48be:	4b0d      	ldr	r3, [pc, #52]	; (d48f4 <_Z14setDebounceSec6String+0x90>)
   d48c0:	480d      	ldr	r0, [pc, #52]	; (d48f8 <_Z14setDebounceSec6String+0x94>)
   d48c2:	781b      	ldrb	r3, [r3, #0]
   d48c4:	aa04      	add	r2, sp, #16
   d48c6:	f7ff fe5a 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d48ca:	4620      	mov	r0, r4
   d48cc:	e000      	b.n	d48d0 <_Z14setDebounceSec6String+0x6c>
  if ((tempValue < 0) || (tempValue > 60)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d48ce:	2000      	movs	r0, #0
}
   d48d0:	b045      	add	sp, #276	; 0x114
   d48d2:	bd30      	pop	{r4, r5, pc}
   d48d4:	2003e41c 	.word	0x2003e41c
   d48d8:	2003e334 	.word	0x2003e334
   d48dc:	2003e44c 	.word	0x2003e44c
   d48e0:	000dc3f5 	.word	0x000dc3f5
   d48e4:	2003e176 	.word	0x2003e176
   d48e8:	000dc3fc 	.word	0x000dc3fc
   d48ec:	2003e2d5 	.word	0x2003e2d5
   d48f0:	000dc654 	.word	0x000dc654
   d48f4:	2003e2d4 	.word	0x2003e2d4
   d48f8:	2003e3d4 	.word	0x2003e3d4

000d48fc <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d48fc:	b513      	push	{r0, r1, r4, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d48fe:	4925      	ldr	r1, [pc, #148]	; (d4994 <_Z15setLowPowerMode6String+0x98>)
   d4900:	4604      	mov	r4, r0
   d4902:	f006 f814 	bl	da92e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4906:	b320      	cbz	r0, d4952 <_Z15setLowPowerMode6String+0x56>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4908:	4922      	ldr	r1, [pc, #136]	; (d4994 <_Z15setLowPowerMode6String+0x98>)
   d490a:	4620      	mov	r0, r4
   d490c:	f006 f80f 	bl	da92e <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
   d4910:	bb38      	cbnz	r0, d4962 <_Z15setLowPowerMode6String+0x66>
   d4912:	4921      	ldr	r1, [pc, #132]	; (d4998 <_Z15setLowPowerMode6String+0x9c>)
   d4914:	4620      	mov	r0, r4
   d4916:	f006 f80a 	bl	da92e <_ZNK6String6equalsEPKc>
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
    }
    sysStatus.lowPowerMode = true;
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
   d491a:	2800      	cmp	r0, #0
   d491c:	d036      	beq.n	d498c <_Z15setLowPowerMode6String+0x90>
  {
    if (!sysStatus.connectedStatus) {                                      // In case we are not connected, we will do so now.
   d491e:	4c1f      	ldr	r4, [pc, #124]	; (d499c <_Z15setLowPowerMode6String+0xa0>)
   d4920:	78e2      	ldrb	r2, [r4, #3]
   d4922:	b912      	cbnz	r2, d492a <_Z15setLowPowerMode6String+0x2e>
      particleConnectionNeeded = true;
   d4924:	4b1e      	ldr	r3, [pc, #120]	; (d49a0 <_Z15setLowPowerMode6String+0xa4>)
   d4926:	2201      	movs	r2, #1
   d4928:	701a      	strb	r2, [r3, #0]
   d492a:	4b1e      	ldr	r3, [pc, #120]	; (d49a4 <_Z15setLowPowerMode6String+0xa8>)
    }
    publishQueue.publish("Mode","Normal Operations", PRIVATE, WITH_ACK);
   d492c:	4a1e      	ldr	r2, [pc, #120]	; (d49a8 <_Z15setLowPowerMode6String+0xac>)
   d492e:	781b      	ldrb	r3, [r3, #0]
   d4930:	f88d 3000 	strb.w	r3, [sp]
   d4934:	4b1d      	ldr	r3, [pc, #116]	; (d49ac <_Z15setLowPowerMode6String+0xb0>)
   d4936:	491e      	ldr	r1, [pc, #120]	; (d49b0 <_Z15setLowPowerMode6String+0xb4>)
   d4938:	781b      	ldrb	r3, [r3, #0]
   d493a:	481e      	ldr	r0, [pc, #120]	; (d49b4 <_Z15setLowPowerMode6String+0xb8>)
   d493c:	f7ff fe1f 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(1000);                                                      // Need to make sure the message gets out.
   d4940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4944:	f003 fd8a 	bl	d845c <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d4948:	2300      	movs	r3, #0
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d494a:	491b      	ldr	r1, [pc, #108]	; (d49b8 <_Z15setLowPowerMode6String+0xbc>)
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
   d494c:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d494e:	2210      	movs	r2, #16
   d4950:	e019      	b.n	d4986 <_Z15setLowPowerMode6String+0x8a>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4952:	4911      	ldr	r1, [pc, #68]	; (d4998 <_Z15setLowPowerMode6String+0x9c>)
   d4954:	4620      	mov	r0, r4
   d4956:	f005 ffea 	bl	da92e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d495a:	2800      	cmp	r0, #0
   d495c:	d1d4      	bne.n	d4908 <_Z15setLowPowerMode6String+0xc>
  }
  systemStatusWriteNeeded = true;
  return 1;
}
   d495e:	b002      	add	sp, #8
   d4960:	bd10      	pop	{r4, pc}
    if (sysStatus.connectedStatus) {
   d4962:	4c0e      	ldr	r4, [pc, #56]	; (d499c <_Z15setLowPowerMode6String+0xa0>)
   d4964:	78e2      	ldrb	r2, [r4, #3]
   d4966:	b152      	cbz	r2, d497e <_Z15setLowPowerMode6String+0x82>
   d4968:	4b0e      	ldr	r3, [pc, #56]	; (d49a4 <_Z15setLowPowerMode6String+0xa8>)
      publishQueue.publish("Mode","Low Power Mode", PRIVATE, WITH_ACK);
   d496a:	4a14      	ldr	r2, [pc, #80]	; (d49bc <_Z15setLowPowerMode6String+0xc0>)
   d496c:	781b      	ldrb	r3, [r3, #0]
   d496e:	f88d 3000 	strb.w	r3, [sp]
   d4972:	4b0e      	ldr	r3, [pc, #56]	; (d49ac <_Z15setLowPowerMode6String+0xb0>)
   d4974:	490e      	ldr	r1, [pc, #56]	; (d49b0 <_Z15setLowPowerMode6String+0xb4>)
   d4976:	781b      	ldrb	r3, [r3, #0]
   d4978:	480e      	ldr	r0, [pc, #56]	; (d49b4 <_Z15setLowPowerMode6String+0xb8>)
   d497a:	f7ff fe00 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatus.lowPowerMode = true;
   d497e:	2301      	movs	r3, #1
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d4980:	490f      	ldr	r1, [pc, #60]	; (d49c0 <_Z15setLowPowerMode6String+0xc4>)
    sysStatus.lowPowerMode = true;
   d4982:	71a3      	strb	r3, [r4, #6]
    strncpy(lowPowerModeStr,"Low Power", sizeof(lowPowerModeStr));
   d4984:	2210      	movs	r2, #16
    strncpy(lowPowerModeStr,"Not Low Power", sizeof(lowPowerModeStr));        // Use capitalization so we know that we set this.
   d4986:	480f      	ldr	r0, [pc, #60]	; (d49c4 <_Z15setLowPowerMode6String+0xc8>)
   d4988:	f007 fb79 	bl	dc07e <strncpy>
  systemStatusWriteNeeded = true;
   d498c:	4b0e      	ldr	r3, [pc, #56]	; (d49c8 <_Z15setLowPowerMode6String+0xcc>)
   d498e:	2001      	movs	r0, #1
   d4990:	7018      	strb	r0, [r3, #0]
  return 1;
   d4992:	e7e4      	b.n	d495e <_Z15setLowPowerMode6String+0x62>
   d4994:	000dc2f8 	.word	0x000dc2f8
   d4998:	000dc590 	.word	0x000dc590
   d499c:	2003e41c 	.word	0x2003e41c
   d49a0:	2003e3d1 	.word	0x2003e3d1
   d49a4:	2003e2d5 	.word	0x2003e2d5
   d49a8:	000dc426 	.word	0x000dc426
   d49ac:	2003e2d4 	.word	0x2003e2d4
   d49b0:	000dc55a 	.word	0x000dc55a
   d49b4:	2003e3d4 	.word	0x2003e3d4
   d49b8:	000dc438 	.word	0x000dc438
   d49bc:	000dc417 	.word	0x000dc417
   d49c0:	000dc43c 	.word	0x000dc43c
   d49c4:	2003e3c0 	.word	0x2003e3c0
   d49c8:	2003e44c 	.word	0x2003e44c

000d49cc <_Z11recordCountv>:
{
   d49cc:	b570      	push	{r4, r5, r6, lr}
  if (sensorDetect) {
   d49ce:	4d50      	ldr	r5, [pc, #320]	; (d4b10 <_Z11recordCountv+0x144>)
   d49d0:	782b      	ldrb	r3, [r5, #0]
{
   d49d2:	b092      	sub	sp, #72	; 0x48
  if (sensorDetect) {
   d49d4:	b1a3      	cbz	r3, d4a00 <_Z11recordCountv+0x34>
    detachInterrupt(intPin);
   d49d6:	2002      	movs	r0, #2
   d49d8:	f004 faea 	bl	d8fb0 <_Z15detachInterruptt>
    Log.info("Cleared Interrupt");
   d49dc:	494d      	ldr	r1, [pc, #308]	; (d4b14 <_Z11recordCountv+0x148>)
   d49de:	484e      	ldr	r0, [pc, #312]	; (d4b18 <_Z11recordCountv+0x14c>)
   d49e0:	f7ff fd9f 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
    sensorDetect = false;                                               // Reset the flag
   d49e4:	2400      	movs	r4, #0
    delay(1000);                                                        // Reset as there can be "ringing"
   d49e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sensorDetect = false;                                               // Reset the flag
   d49ea:	702c      	strb	r4, [r5, #0]
    delay(1000);                                                        // Reset as there can be "ringing"
   d49ec:	f003 fd36 	bl	d845c <delay>
    attachInterrupt(intPin, sensorISR, RISING);                         // Sensor interrupt from low to high
   d49f0:	494a      	ldr	r1, [pc, #296]	; (d4b1c <_Z11recordCountv+0x150>)
   d49f2:	9400      	str	r4, [sp, #0]
   d49f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d49f8:	2201      	movs	r2, #1
   d49fa:	2002      	movs	r0, #2
   d49fc:	f004 faae 	bl	d8f5c <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (Time.now() - lastTapTime > sysStatus.debounceSec) {
   d4a00:	4c47      	ldr	r4, [pc, #284]	; (d4b20 <_Z11recordCountv+0x154>)
   d4a02:	4d48      	ldr	r5, [pc, #288]	; (d4b24 <_Z11recordCountv+0x158>)
   d4a04:	f006 fa77 	bl	daef6 <_ZN9TimeClass3nowEv>
   d4a08:	6823      	ldr	r3, [r4, #0]
   d4a0a:	1ac0      	subs	r0, r0, r3
   d4a0c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   d4a10:	4298      	cmp	r0, r3
   d4a12:	d943      	bls.n	d4a9c <_Z11recordCountv+0xd0>
    lastTapTime = Time.now();
   d4a14:	f006 fa6f 	bl	daef6 <_ZN9TimeClass3nowEv>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
   d4a18:	4b43      	ldr	r3, [pc, #268]	; (d4b28 <_Z11recordCountv+0x15c>)
   d4a1a:	6020      	str	r0, [r4, #0]
   d4a1c:	6898      	ldr	r0, [r3, #8]
   d4a1e:	b140      	cbz	r0, d4a32 <_Z11recordCountv+0x66>
   d4a20:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4a24:	2300      	movs	r3, #0
   d4a26:	e9cd 2300 	strd	r2, r3, [sp]
   d4a2a:	2101      	movs	r1, #1
   d4a2c:	461a      	mov	r2, r3
   d4a2e:	f003 f915 	bl	d7c5c <os_timer_change>
    if (currentMinutePeriod != Time.minute()) {                         // Done counting for the last minute
   d4a32:	4e3e      	ldr	r6, [pc, #248]	; (d4b2c <_Z11recordCountv+0x160>)
   d4a34:	7834      	ldrb	r4, [r6, #0]
   d4a36:	f006 fa7b 	bl	daf30 <_ZN9TimeClass6minuteEv>
   d4a3a:	4284      	cmp	r4, r0
   d4a3c:	4c3c      	ldr	r4, [pc, #240]	; (d4b30 <_Z11recordCountv+0x164>)
   d4a3e:	d004      	beq.n	d4a4a <_Z11recordCountv+0x7e>
      currentMinutePeriod = Time.minute();                              // Reset period
   d4a40:	f006 fa76 	bl	daf30 <_ZN9TimeClass6minuteEv>
      current.maxMinValue = 1;                                          // Reset for the new minute
   d4a44:	2301      	movs	r3, #1
      currentMinutePeriod = Time.minute();                              // Reset period
   d4a46:	7030      	strb	r0, [r6, #0]
      current.maxMinValue = 1;                                          // Reset for the new minute
   d4a48:	61a3      	str	r3, [r4, #24]
    current.maxMinValue++;
   d4a4a:	69a3      	ldr	r3, [r4, #24]
   d4a4c:	3301      	adds	r3, #1
   d4a4e:	61a3      	str	r3, [r4, #24]
    current.lastCountTime = Time.now();
   d4a50:	f006 fa51 	bl	daef6 <_ZN9TimeClass3nowEv>
    current.hourlyCount++;                                              // Increment the PersonCount
   d4a54:	6823      	ldr	r3, [r4, #0]
    current.dailyCount++;                                               // Increment the PersonCount
   d4a56:	68a2      	ldr	r2, [r4, #8]
    current.lastCountTime = Time.now();
   d4a58:	60e0      	str	r0, [r4, #12]
    current.hourlyCount++;                                              // Increment the PersonCount
   d4a5a:	3301      	adds	r3, #1
    current.dailyCount++;                                               // Increment the PersonCount
   d4a5c:	3201      	adds	r2, #1
    current.hourlyCount++;                                              // Increment the PersonCount
   d4a5e:	6023      	str	r3, [r4, #0]
    current.dailyCount++;                                               // Increment the PersonCount
   d4a60:	60a2      	str	r2, [r4, #8]
    snprintf(data, sizeof(data), "Count, hourly: %i, daily: %i",current.hourlyCount,current.dailyCount);
   d4a62:	2140      	movs	r1, #64	; 0x40
   d4a64:	9200      	str	r2, [sp, #0]
   d4a66:	a802      	add	r0, sp, #8
   d4a68:	4a32      	ldr	r2, [pc, #200]	; (d4b34 <_Z11recordCountv+0x168>)
   d4a6a:	f003 fca3 	bl	d83b4 <snprintf>
    if (sysStatus.verboseMode && sysStatus.connectedStatus) publishQueue.publish("Count",data, PRIVATE);                      // Helpful for monitoring and calibration
   d4a6e:	792b      	ldrb	r3, [r5, #4]
   d4a70:	b15b      	cbz	r3, d4a8a <_Z11recordCountv+0xbe>
   d4a72:	78eb      	ldrb	r3, [r5, #3]
   d4a74:	b14b      	cbz	r3, d4a8a <_Z11recordCountv+0xbe>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d4a76:	2300      	movs	r3, #0
   d4a78:	f88d 3000 	strb.w	r3, [sp]
   d4a7c:	4b2e      	ldr	r3, [pc, #184]	; (d4b38 <_Z11recordCountv+0x16c>)
   d4a7e:	492f      	ldr	r1, [pc, #188]	; (d4b3c <_Z11recordCountv+0x170>)
   d4a80:	781b      	ldrb	r3, [r3, #0]
   d4a82:	482f      	ldr	r0, [pc, #188]	; (d4b40 <_Z11recordCountv+0x174>)
   d4a84:	aa02      	add	r2, sp, #8
   d4a86:	f7ff fd7a 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    Log.info(data);
   d4a8a:	4823      	ldr	r0, [pc, #140]	; (d4b18 <_Z11recordCountv+0x14c>)
   d4a8c:	a902      	add	r1, sp, #8
   d4a8e:	f7ff fd48 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
    currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
   d4a92:	4b2c      	ldr	r3, [pc, #176]	; (d4b44 <_Z11recordCountv+0x178>)
   d4a94:	2201      	movs	r2, #1
   d4a96:	701a      	strb	r2, [r3, #0]
}
   d4a98:	b012      	add	sp, #72	; 0x48
   d4a9a:	bd70      	pop	{r4, r5, r6, pc}
  else if (!countSignalTimer.isActive()) pinResetFast(blueLED);
   d4a9c:	4822      	ldr	r0, [pc, #136]	; (d4b28 <_Z11recordCountv+0x15c>)
   d4a9e:	f7ff fd36 	bl	d450e <_ZNK5Timer8isActiveEv>
   d4aa2:	2800      	cmp	r0, #0
   d4aa4:	d1f8      	bne.n	d4a98 <_Z11recordCountv+0xcc>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4aa6:	4c28      	ldr	r4, [pc, #160]	; (d4b48 <_Z11recordCountv+0x17c>)
   d4aa8:	4d28      	ldr	r5, [pc, #160]	; (d4b4c <_Z11recordCountv+0x180>)
   d4aaa:	7823      	ldrb	r3, [r4, #0]
   d4aac:	f3bf 8f5b 	dmb	ish
   d4ab0:	f013 0f01 	tst.w	r3, #1
   d4ab4:	d109      	bne.n	d4aca <_Z11recordCountv+0xfe>
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	f7ff fafe 	bl	d40b8 <__cxa_guard_acquire>
   d4abc:	b128      	cbz	r0, d4aca <_Z11recordCountv+0xfe>
   d4abe:	f003 f975 	bl	d7dac <HAL_Pin_Map>
   d4ac2:	6028      	str	r0, [r5, #0]
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	f7ff fafc 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4aca:	682b      	ldr	r3, [r5, #0]
   d4acc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   d4ad0:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4ad2:	7823      	ldrb	r3, [r4, #0]
   d4ad4:	f3bf 8f5b 	dmb	ish
   d4ad8:	07db      	lsls	r3, r3, #31
   d4ada:	d409      	bmi.n	d4af0 <_Z11recordCountv+0x124>
   d4adc:	481a      	ldr	r0, [pc, #104]	; (d4b48 <_Z11recordCountv+0x17c>)
   d4ade:	f7ff faeb 	bl	d40b8 <__cxa_guard_acquire>
   d4ae2:	b128      	cbz	r0, d4af0 <_Z11recordCountv+0x124>
   d4ae4:	f003 f962 	bl	d7dac <HAL_Pin_Map>
   d4ae8:	6028      	str	r0, [r5, #0]
   d4aea:	4817      	ldr	r0, [pc, #92]	; (d4b48 <_Z11recordCountv+0x17c>)
   d4aec:	f7ff fae9 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4af0:	682b      	ldr	r3, [r5, #0]
   d4af2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   d4af6:	f003 031f 	and.w	r3, r3, #31
   d4afa:	4333      	orrs	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4afc:	a802      	add	r0, sp, #8
   d4afe:	9302      	str	r3, [sp, #8]
   d4b00:	f7ff fb10 	bl	d4124 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4b04:	9a02      	ldr	r2, [sp, #8]
   d4b06:	2301      	movs	r3, #1
   d4b08:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4b0a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   d4b0e:	e7c3      	b.n	d4a98 <_Z11recordCountv+0xcc>
   d4b10:	2003e410 	.word	0x2003e410
   d4b14:	000dc446 	.word	0x000dc446
   d4b18:	2003e53c 	.word	0x2003e53c
   d4b1c:	000d4155 	.word	0x000d4155
   d4b20:	2003e2d8 	.word	0x2003e2d8
   d4b24:	2003e41c 	.word	0x2003e41c
   d4b28:	2003e334 	.word	0x2003e334
   d4b2c:	2003e2dc 	.word	0x2003e2dc
   d4b30:	2003e350 	.word	0x2003e350
   d4b34:	000dc458 	.word	0x000dc458
   d4b38:	2003e2d4 	.word	0x2003e2d4
   d4b3c:	000dc61d 	.word	0x000dc61d
   d4b40:	2003e3d4 	.word	0x2003e3d4
   d4b44:	2003e374 	.word	0x2003e374
   d4b48:	2003e280 	.word	0x2003e280
   d4b4c:	2003e284 	.word	0x2003e284

000d4b50 <_Z9sendEventv>:
void sendEvent() {
   d4b50:	b510      	push	{r4, lr}
  if (current.hourlyCount) {
   d4b52:	4c1a      	ldr	r4, [pc, #104]	; (d4bbc <_Z9sendEventv+0x6c>)
   d4b54:	6823      	ldr	r3, [r4, #0]
void sendEvent() {
   d4b56:	b0ca      	sub	sp, #296	; 0x128
  if (current.hourlyCount) {
   d4b58:	2b00      	cmp	r3, #0
   d4b5a:	d02c      	beq.n	d4bb6 <_Z9sendEventv+0x66>
    timeStampValue = current.lastCountTime;                           // If there was an event in the past hour, send the most recent event's timestamp
   d4b5c:	68e2      	ldr	r2, [r4, #12]
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"daily\":%i,\"battery\":%i,\"key1\":\"%s\",\"temp\":%i, \"resets\":%i, \"alerts\":%i,\"maxmin\":%i,\"connecttime\":%i,\"timestamp\":%lu000}",current.hourlyCount, current.dailyCount, sysStatus.stateOfCharge, batteryContext[sysStatus.batteryState], current.temperature, sysStatus.resetCount, current.alertCount, current.maxMinValue, sysStatus.lastConnectionDuration, timeStampValue);
   d4b5e:	9208      	str	r2, [sp, #32]
   d4b60:	4a17      	ldr	r2, [pc, #92]	; (d4bc0 <_Z9sendEventv+0x70>)
   d4b62:	8d11      	ldrh	r1, [r2, #40]	; 0x28
   d4b64:	9107      	str	r1, [sp, #28]
   d4b66:	69a1      	ldr	r1, [r4, #24]
   d4b68:	9106      	str	r1, [sp, #24]
   d4b6a:	6961      	ldr	r1, [r4, #20]
   d4b6c:	9105      	str	r1, [sp, #20]
   d4b6e:	6911      	ldr	r1, [r2, #16]
   d4b70:	9104      	str	r1, [sp, #16]
   d4b72:	6921      	ldr	r1, [r4, #16]
   d4b74:	9103      	str	r1, [sp, #12]
   d4b76:	7b10      	ldrb	r0, [r2, #12]
   d4b78:	4912      	ldr	r1, [pc, #72]	; (d4bc4 <_Z9sendEventv+0x74>)
   d4b7a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   d4b7e:	9102      	str	r1, [sp, #8]
   d4b80:	6892      	ldr	r2, [r2, #8]
   d4b82:	9201      	str	r2, [sp, #4]
   d4b84:	68a2      	ldr	r2, [r4, #8]
   d4b86:	9200      	str	r2, [sp, #0]
   d4b88:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4b8c:	4a0e      	ldr	r2, [pc, #56]	; (d4bc8 <_Z9sendEventv+0x78>)
   d4b8e:	a80a      	add	r0, sp, #40	; 0x28
   d4b90:	f003 fc10 	bl	d83b4 <snprintf>
   d4b94:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots-Counter-Hook-v1", data, PRIVATE);
   d4b96:	f88d 3000 	strb.w	r3, [sp]
   d4b9a:	4b0c      	ldr	r3, [pc, #48]	; (d4bcc <_Z9sendEventv+0x7c>)
   d4b9c:	490c      	ldr	r1, [pc, #48]	; (d4bd0 <_Z9sendEventv+0x80>)
   d4b9e:	781b      	ldrb	r3, [r3, #0]
   d4ba0:	480c      	ldr	r0, [pc, #48]	; (d4bd4 <_Z9sendEventv+0x84>)
   d4ba2:	aa0a      	add	r2, sp, #40	; 0x28
   d4ba4:	f7ff fceb 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                // set the data inflight flag
   d4ba8:	4b0b      	ldr	r3, [pc, #44]	; (d4bd8 <_Z9sendEventv+0x88>)
   d4baa:	2201      	movs	r2, #1
   d4bac:	701a      	strb	r2, [r3, #0]
  current.hourlyCountInFlight = current.hourlyCount;                  // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
   d4bae:	6823      	ldr	r3, [r4, #0]
   d4bb0:	6063      	str	r3, [r4, #4]
}
   d4bb2:	b04a      	add	sp, #296	; 0x128
   d4bb4:	bd10      	pop	{r4, pc}
    timeStampValue = lastReportedTime;                                // This should be the beginning of the previous hour
   d4bb6:	4a09      	ldr	r2, [pc, #36]	; (d4bdc <_Z9sendEventv+0x8c>)
   d4bb8:	6812      	ldr	r2, [r2, #0]
   d4bba:	e7d0      	b.n	d4b5e <_Z9sendEventv+0xe>
   d4bbc:	2003e350 	.word	0x2003e350
   d4bc0:	2003e41c 	.word	0x2003e41c
   d4bc4:	2003e148 	.word	0x2003e148
   d4bc8:	000dc475 	.word	0x000dc475
   d4bcc:	2003e2d4 	.word	0x2003e2d4
   d4bd0:	000dc4fc 	.word	0x000dc4fc
   d4bd4:	2003e3d4 	.word	0x2003e3d4
   d4bd8:	2003e37f 	.word	0x2003e37f
   d4bdc:	2003e398 	.word	0x2003e398

000d4be0 <_Z16isItSafeToChargev>:
{         
   d4be0:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);                                 
   d4be2:	2101      	movs	r1, #1
   d4be4:	a801      	add	r0, sp, #4
   d4be6:	f005 fcc2 	bl	da56e <_ZN4PMICC1Eb>
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4bea:	4b0b      	ldr	r3, [pc, #44]	; (d4c18 <_Z16isItSafeToChargev+0x38>)
   d4bec:	691b      	ldr	r3, [r3, #16]
   d4bee:	3b24      	subs	r3, #36	; 0x24
   d4bf0:	2b40      	cmp	r3, #64	; 0x40
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4bf2:	a801      	add	r0, sp, #4
   d4bf4:	f04f 0401 	mov.w	r4, #1
  if (current.temperature < 36 || current.temperature > 100 )  {      // Reference: https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures (32 to 113 but with safety)
   d4bf8:	d90a      	bls.n	d4c10 <_Z16isItSafeToChargev+0x30>
    pmic.disableCharging();                                           // It is too cold or too hot to safely charge the battery
   d4bfa:	f005 fd4b 	bl	da694 <_ZN4PMIC15disableChargingEv>
    sysStatus.batteryState = 1;                                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d4bfe:	4b07      	ldr	r3, [pc, #28]	; (d4c1c <_Z16isItSafeToChargev+0x3c>)
   d4c00:	731c      	strb	r4, [r3, #12]
    return false;
   d4c02:	2400      	movs	r4, #0
  PMIC pmic(true);                                 
   d4c04:	a801      	add	r0, sp, #4
   d4c06:	f005 fcc1 	bl	da58c <_ZN4PMICD1Ev>
}
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	b002      	add	sp, #8
   d4c0e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                                            // It is safe to charge the battery
   d4c10:	f005 fd29 	bl	da666 <_ZN4PMIC14enableChargingEv>
    return true;
   d4c14:	e7f6      	b.n	d4c04 <_Z16isItSafeToChargev+0x24>
   d4c16:	bf00      	nop
   d4c18:	2003e350 	.word	0x2003e350
   d4c1c:	2003e41c 	.word	0x2003e41c

000d4c20 <_Z17getSignalStrengthv>:
void getSignalStrength() {
   d4c20:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4c22:	4d19      	ldr	r5, [pc, #100]	; (d4c88 <_Z17getSignalStrengthv+0x68>)
   d4c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4c26:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4c28:	ac04      	add	r4, sp, #16
   d4c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c30:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4c34:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
   d4c38:	4914      	ldr	r1, [pc, #80]	; (d4c8c <_Z17getSignalStrengthv+0x6c>)
   d4c3a:	a80e      	add	r0, sp, #56	; 0x38
   d4c3c:	f003 fc7e 	bl	d853c <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
   d4c40:	a80e      	add	r0, sp, #56	; 0x38
   d4c42:	f003 fcce 	bl	d85e2 <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4c46:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
   d4c48:	a80e      	add	r0, sp, #56	; 0x38
   d4c4a:	f003 fce5 	bl	d8618 <_ZNK14CellularSignal11getStrengthEv>
  float qualityPercentage = sig.getQuality();
   d4c4e:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4c50:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4c54:	f003 fd10 	bl	d8678 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4c58:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d4c5a:	ee10 0a10 	vmov	r0, s0
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4c5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4c62:	f006 fddf 	bl	db824 <__aeabi_f2d>
   d4c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4c6a:	4628      	mov	r0, r5
   d4c6c:	f006 fdda 	bl	db824 <__aeabi_f2d>
   d4c70:	e9cd 0100 	strd	r0, r1, [sp]
   d4c74:	4a06      	ldr	r2, [pc, #24]	; (d4c90 <_Z17getSignalStrengthv+0x70>)
   d4c76:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4c7a:	4806      	ldr	r0, [pc, #24]	; (d4c94 <_Z17getSignalStrengthv+0x74>)
   d4c7c:	2140      	movs	r1, #64	; 0x40
   d4c7e:	f003 fb99 	bl	d83b4 <snprintf>
}
   d4c82:	b019      	add	sp, #100	; 0x64
   d4c84:	bd30      	pop	{r4, r5, pc}
   d4c86:	bf00      	nop
   d4c88:	000dc8ec 	.word	0x000dc8ec
   d4c8c:	2003e468 	.word	0x2003e468
   d4c90:	000dc514 	.word	0x000dc514
   d4c94:	2003e288 	.word	0x2003e288

000d4c98 <_Z14getTemperaturev>:
int getTemperature() {                                                // Get temperature and make sure we are not getting a spurrious value
   d4c98:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
   d4c9a:	200f      	movs	r0, #15
   d4c9c:	f006 fbc3 	bl	db426 <analogRead>
  if (reading < 400) {                                                // This ocrresponds to 0 degrees - less than this and we should take another reading to be sure
   d4ca0:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   d4ca4:	da05      	bge.n	d4cb2 <_Z14getTemperaturev+0x1a>
    delay(50);
   d4ca6:	2032      	movs	r0, #50	; 0x32
   d4ca8:	f003 fbd8 	bl	d845c <delay>
    reading = analogRead(tmp36Pin);
   d4cac:	200f      	movs	r0, #15
   d4cae:	f006 fbba 	bl	db426 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
   d4cb2:	f006 fda5 	bl	db800 <__aeabi_i2d>
   d4cb6:	a320      	add	r3, pc, #128	; (adr r3, d4d38 <_Z14getTemperaturev+0xa0>)
   d4cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cbc:	f006 fe0a 	bl	db8d4 <__aeabi_dmul>
   d4cc0:	f007 f862 	bl	dbd88 <__aeabi_d2f>
  int temperatureC = int(((voltage - 0.5) * 100));                    //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4cc4:	eddf 7a14 	vldr	s15, [pc, #80]	; d4d18 <_Z14getTemperaturev+0x80>
   d4cc8:	ee07 0a10 	vmov	s14, r0
   d4ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4cd0:	ee17 0a90 	vmov	r0, s15
   d4cd4:	f006 fda6 	bl	db824 <__aeabi_f2d>
   d4cd8:	4b10      	ldr	r3, [pc, #64]	; (d4d1c <_Z14getTemperaturev+0x84>)
   d4cda:	2200      	movs	r2, #0
   d4cdc:	f006 fc42 	bl	db564 <__aeabi_dsub>
   d4ce0:	4b0f      	ldr	r3, [pc, #60]	; (d4d20 <_Z14getTemperaturev+0x88>)
   d4ce2:	2200      	movs	r2, #0
   d4ce4:	f006 fdf6 	bl	db8d4 <__aeabi_dmul>
   d4ce8:	f007 f806 	bl	dbcf8 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);              // now convert to Fahrenheit
   d4cec:	f006 fd88 	bl	db800 <__aeabi_i2d>
   d4cf0:	4b0c      	ldr	r3, [pc, #48]	; (d4d24 <_Z14getTemperaturev+0x8c>)
   d4cf2:	2200      	movs	r2, #0
   d4cf4:	f006 fdee 	bl	db8d4 <__aeabi_dmul>
   d4cf8:	4b0b      	ldr	r3, [pc, #44]	; (d4d28 <_Z14getTemperaturev+0x90>)
   d4cfa:	2200      	movs	r2, #0
   d4cfc:	f006 ff14 	bl	dbb28 <__aeabi_ddiv>
   d4d00:	4b0a      	ldr	r3, [pc, #40]	; (d4d2c <_Z14getTemperaturev+0x94>)
   d4d02:	2200      	movs	r2, #0
   d4d04:	f006 fc30 	bl	db568 <__adddf3>
   d4d08:	f006 fff6 	bl	dbcf8 <__aeabi_d2iz>
   d4d0c:	4b08      	ldr	r3, [pc, #32]	; (d4d30 <_Z14getTemperaturev+0x98>)
   d4d0e:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
   d4d10:	4b08      	ldr	r3, [pc, #32]	; (d4d34 <_Z14getTemperaturev+0x9c>)
   d4d12:	2201      	movs	r2, #1
   d4d14:	701a      	strb	r2, [r3, #0]
}
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	39800000 	.word	0x39800000
   d4d1c:	3fe00000 	.word	0x3fe00000
   d4d20:	40590000 	.word	0x40590000
   d4d24:	40220000 	.word	0x40220000
   d4d28:	40140000 	.word	0x40140000
   d4d2c:	40400000 	.word	0x40400000
   d4d30:	2003e350 	.word	0x2003e350
   d4d34:	2003e374 	.word	0x2003e374
   d4d38:	66666666 	.word	0x66666666
   d4d3c:	400a6666 	.word	0x400a6666

000d4d40 <_Z14setPowerConfigv>:
int setPowerConfig() {
   d4d40:	b500      	push	{lr}
   d4d42:	b091      	sub	sp, #68	; 0x44
  SystemPowerConfiguration conf;
   d4d44:	4668      	mov	r0, sp
   d4d46:	f7ff fb5f 	bl	d4408 <_ZN8particle24SystemPowerConfigurationC1Ev>
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration
   d4d4a:	a808      	add	r0, sp, #32
   d4d4c:	f7ff fb5c 	bl	d4408 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4d50:	2100      	movs	r1, #0
   d4d52:	a808      	add	r0, sp, #32
   d4d54:	f003 fa20 	bl	d8198 <system_power_management_set_config>
  if (sysStatus.solarPowerMode) {
   d4d58:	4b13      	ldr	r3, [pc, #76]	; (d4da8 <_Z14setPowerConfigv+0x68>)
   d4d5a:	7959      	ldrb	r1, [r3, #5]
   d4d5c:	b1a1      	cbz	r1, d4d88 <_Z14setPowerConfigv+0x48>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4d5e:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4d62:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4d66:	4b11      	ldr	r3, [pc, #68]	; (d4dac <_Z14setPowerConfigv+0x6c>)
   d4d68:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4d6a:	f241 0370 	movw	r3, #4208	; 0x1070
   d4d6e:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4d72:	9b00      	ldr	r3, [sp, #0]
   d4d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4d78:	9300      	str	r3, [sp, #0]
   d4d7a:	2100      	movs	r1, #0
   d4d7c:	4668      	mov	r0, sp
   d4d7e:	f003 fa0b 	bl	d8198 <system_power_management_set_config>
}
   d4d82:	b011      	add	sp, #68	; 0x44
   d4d84:	f85d fb04 	ldr.w	pc, [sp], #4
        conf_.vin_min_voltage = voltage;
   d4d88:	f241 0370 	movw	r3, #4208	; 0x1070
   d4d8c:	f8ad 3006 	strh.w	r3, [sp, #6]
        conf_.vin_max_current = current;
   d4d90:	4b07      	ldr	r3, [pc, #28]	; (d4db0 <_Z14setPowerConfigv+0x70>)
   d4d92:	9302      	str	r3, [sp, #8]
        conf_.termination_voltage = voltage;
   d4d94:	f241 0310 	movw	r3, #4112	; 0x1010
   d4d98:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.flags |= f.value();
   d4d9c:	9b00      	ldr	r3, [sp, #0]
   d4d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4da2:	9300      	str	r3, [sp, #0]
   d4da4:	e7ea      	b.n	d4d7c <_Z14setPowerConfigv+0x3c>
   d4da6:	bf00      	nop
   d4da8:	2003e41c 	.word	0x2003e41c
   d4dac:	04000384 	.word	0x04000384
   d4db0:	03840384 	.word	0x03840384

000d4db4 <_Z12setSolarMode6String>:
{
   d4db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4db6:	491b      	ldr	r1, [pc, #108]	; (d4e24 <_Z12setSolarMode6String+0x70>)
   d4db8:	4605      	mov	r5, r0
   d4dba:	f005 fdb8 	bl	da92e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4dbe:	4604      	mov	r4, r0
   d4dc0:	b1c0      	cbz	r0, d4df4 <_Z12setSolarMode6String+0x40>
    sysStatus.solarPowerMode = true;
   d4dc2:	4d19      	ldr	r5, [pc, #100]	; (d4e28 <_Z12setSolarMode6String+0x74>)
   d4dc4:	2401      	movs	r4, #1
   d4dc6:	716c      	strb	r4, [r5, #5]
    setPowerConfig();                                               // Change the power management Settings
   d4dc8:	f7ff ffba 	bl	d4d40 <_Z14setPowerConfigv>
    systemStatusWriteNeeded=true;
   d4dcc:	4b17      	ldr	r3, [pc, #92]	; (d4e2c <_Z12setSolarMode6String+0x78>)
   d4dce:	701c      	strb	r4, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4dd0:	78eb      	ldrb	r3, [r5, #3]
   d4dd2:	b913      	cbnz	r3, d4dda <_Z12setSolarMode6String+0x26>
    return 1;
   d4dd4:	2001      	movs	r0, #1
}
   d4dd6:	b003      	add	sp, #12
   d4dd8:	bd30      	pop	{r4, r5, pc}
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d4dda:	4b15      	ldr	r3, [pc, #84]	; (d4e30 <_Z12setSolarMode6String+0x7c>)
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Set Solar Powered Mode", PRIVATE, WITH_ACK);
   d4ddc:	4a15      	ldr	r2, [pc, #84]	; (d4e34 <_Z12setSolarMode6String+0x80>)
   d4dde:	781b      	ldrb	r3, [r3, #0]
   d4de0:	f88d 3000 	strb.w	r3, [sp]
   d4de4:	4b14      	ldr	r3, [pc, #80]	; (d4e38 <_Z12setSolarMode6String+0x84>)
   d4de6:	781b      	ldrb	r3, [r3, #0]
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4de8:	4914      	ldr	r1, [pc, #80]	; (d4e3c <_Z12setSolarMode6String+0x88>)
   d4dea:	4815      	ldr	r0, [pc, #84]	; (d4e40 <_Z12setSolarMode6String+0x8c>)
   d4dec:	f7ff fbc7 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4df0:	4620      	mov	r0, r4
   d4df2:	e7f0      	b.n	d4dd6 <_Z12setSolarMode6String+0x22>
   d4df4:	4913      	ldr	r1, [pc, #76]	; (d4e44 <_Z12setSolarMode6String+0x90>)
   d4df6:	4628      	mov	r0, r5
   d4df8:	f005 fd99 	bl	da92e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4dfc:	2800      	cmp	r0, #0
   d4dfe:	d0ea      	beq.n	d4dd6 <_Z12setSolarMode6String+0x22>
    sysStatus.solarPowerMode = false;
   d4e00:	4d09      	ldr	r5, [pc, #36]	; (d4e28 <_Z12setSolarMode6String+0x74>)
    systemStatusWriteNeeded=true;
   d4e02:	4b0a      	ldr	r3, [pc, #40]	; (d4e2c <_Z12setSolarMode6String+0x78>)
    sysStatus.solarPowerMode = false;
   d4e04:	716c      	strb	r4, [r5, #5]
    systemStatusWriteNeeded=true;
   d4e06:	2401      	movs	r4, #1
   d4e08:	701c      	strb	r4, [r3, #0]
    setPowerConfig();                                                // Change the power management settings
   d4e0a:	f7ff ff99 	bl	d4d40 <_Z14setPowerConfigv>
    if (sysStatus.connectedStatus) publishQueue.publish("Mode","Cleared Solar Powered Mode", PRIVATE, WITH_ACK);
   d4e0e:	78eb      	ldrb	r3, [r5, #3]
   d4e10:	2b00      	cmp	r3, #0
   d4e12:	d0df      	beq.n	d4dd4 <_Z12setSolarMode6String+0x20>
   d4e14:	4b06      	ldr	r3, [pc, #24]	; (d4e30 <_Z12setSolarMode6String+0x7c>)
   d4e16:	4a0c      	ldr	r2, [pc, #48]	; (d4e48 <_Z12setSolarMode6String+0x94>)
   d4e18:	781b      	ldrb	r3, [r3, #0]
   d4e1a:	f88d 3000 	strb.w	r3, [sp]
   d4e1e:	4b06      	ldr	r3, [pc, #24]	; (d4e38 <_Z12setSolarMode6String+0x84>)
   d4e20:	781b      	ldrb	r3, [r3, #0]
   d4e22:	e7e1      	b.n	d4de8 <_Z12setSolarMode6String+0x34>
   d4e24:	000dc2f8 	.word	0x000dc2f8
   d4e28:	2003e41c 	.word	0x2003e41c
   d4e2c:	2003e44c 	.word	0x2003e44c
   d4e30:	2003e2d5 	.word	0x2003e2d5
   d4e34:	000dc52d 	.word	0x000dc52d
   d4e38:	2003e2d4 	.word	0x2003e2d4
   d4e3c:	000dc55a 	.word	0x000dc55a
   d4e40:	2003e3d4 	.word	0x2003e3d4
   d4e44:	000dc590 	.word	0x000dc590
   d4e48:	000dc544 	.word	0x000dc544

000d4e4c <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range 
   d4e4c:	b510      	push	{r4, lr}
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e4e:	4c28      	ldr	r4, [pc, #160]	; (d4ef0 <_Z17checkSystemValuesv+0xa4>)
   d4e50:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e52:	edd4 7a05 	vldr	s15, [r4, #20]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e56:	2bff      	cmp	r3, #255	; 0xff
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e58:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e5c:	bf88      	it	hi
   d4e5e:	2300      	movhi	r3, #0
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e60:	eef4 7ac7 	vcmpe.f32	s15, s14
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4e64:	bf88      	it	hi
   d4e66:	6123      	strhi	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
   d4e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e6c:	d406      	bmi.n	d4e7c <_Z17checkSystemValuesv+0x30>
   d4e6e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
   d4e72:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e7a:	dd01      	ble.n	d4e80 <_Z17checkSystemValuesv+0x34>
   d4e7c:	4b1d      	ldr	r3, [pc, #116]	; (d4ef4 <_Z17checkSystemValuesv+0xa8>)
   d4e7e:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
   d4e80:	edd4 7a06 	vldr	s15, [r4, #24]
   d4e84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e8c:	d406      	bmi.n	d4e9c <_Z17checkSystemValuesv+0x50>
   d4e8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   d4e92:	eef4 7ac7 	vcmpe.f32	s15, s14
   d4e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e9a:	dd02      	ble.n	d4ea2 <_Z17checkSystemValuesv+0x56>
   d4e9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d4ea0:	61a3      	str	r3, [r4, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) {
   d4ea2:	7f22      	ldrb	r2, [r4, #28]
   d4ea4:	2a0c      	cmp	r2, #12
   d4ea6:	d905      	bls.n	d4eb4 <_Z17checkSystemValuesv+0x68>
    Log.info("openTime value of %i resetting to default",sysStatus.openTime);
   d4ea8:	4913      	ldr	r1, [pc, #76]	; (d4ef8 <_Z17checkSystemValuesv+0xac>)
   d4eaa:	4814      	ldr	r0, [pc, #80]	; (d4efc <_Z17checkSystemValuesv+0xb0>)
   d4eac:	f7ff fb39 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.openTime = 0; 
   d4eb0:	2300      	movs	r3, #0
   d4eb2:	7723      	strb	r3, [r4, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4eb4:	7f63      	ldrb	r3, [r4, #29]
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4eb6:	4a12      	ldr	r2, [pc, #72]	; (d4f00 <_Z17checkSystemValuesv+0xb4>)
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
   d4eb8:	3b0c      	subs	r3, #12
   d4eba:	2b0c      	cmp	r3, #12
   d4ebc:	bf84      	itt	hi
   d4ebe:	2318      	movhi	r3, #24
   d4ec0:	7763      	strbhi	r3, [r4, #29]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4ec2:	4b10      	ldr	r3, [pc, #64]	; (d4f04 <_Z17checkSystemValuesv+0xb8>)
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4ec4:	8b90      	ldrh	r0, [r2, #28]
  if (sysStatus.lastConnectionDuration < 0 || sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = 0;
   d4ec6:	6819      	ldr	r1, [r3, #0]
   d4ec8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   d4eca:	428b      	cmp	r3, r1
   d4ecc:	bf84      	itt	hi
   d4ece:	2300      	movhi	r3, #0
   d4ed0:	8523      	strhhi	r3, [r4, #40]	; 0x28
  if (current.maxConnectTime > connectMaxTimeSec) {
   d4ed2:	4281      	cmp	r1, r0
    current.maxConnectTime = 0;
   d4ed4:	bf3e      	ittt	cc
   d4ed6:	2100      	movcc	r1, #0
   d4ed8:	8391      	strhcc	r1, [r2, #28]
    currentCountsWriteNeeded = true;
   d4eda:	4a0b      	ldrcc	r2, [pc, #44]	; (d4f08 <_Z17checkSystemValuesv+0xbc>)
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4edc:	f04f 0301 	mov.w	r3, #1
    currentCountsWriteNeeded = true;
   d4ee0:	bf38      	it	cc
   d4ee2:	7013      	strbcc	r3, [r2, #0]
  sysStatus.solarPowerMode = true;                                  // Need to reset this value across the fleet
   d4ee4:	7163      	strb	r3, [r4, #5]
  systemStatusWriteNeeded = true;
   d4ee6:	4b09      	ldr	r3, [pc, #36]	; (d4f0c <_Z17checkSystemValuesv+0xc0>)
   d4ee8:	2201      	movs	r2, #1
   d4eea:	701a      	strb	r2, [r3, #0]
}
   d4eec:	bd10      	pop	{r4, pc}
   d4eee:	bf00      	nop
   d4ef0:	2003e41c 	.word	0x2003e41c
   d4ef4:	c0a00000 	.word	0xc0a00000
   d4ef8:	000dc55f 	.word	0x000dc55f
   d4efc:	2003e53c 	.word	0x2003e53c
   d4f00:	2003e350 	.word	0x2003e350
   d4f04:	2003e16c 	.word	0x2003e16c
   d4f08:	2003e374 	.word	0x2003e374
   d4f0c:	2003e44c 	.word	0x2003e44c

000d4f10 <_Z21makeUpParkHourStringsv>:
void makeUpParkHourStrings() {
   d4f10:	b510      	push	{r4, lr}
  if (sysStatus.openTime == 0 && sysStatus.closeTime == 24) {
   d4f12:	4c15      	ldr	r4, [pc, #84]	; (d4f68 <_Z21makeUpParkHourStringsv+0x58>)
   d4f14:	8ba3      	ldrh	r3, [r4, #28]
   d4f16:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
   d4f1a:	d109      	bne.n	d4f30 <_Z21makeUpParkHourStringsv+0x20>
    snprintf(openTimeStr, sizeof(openTimeStr), "NA");
   d4f1c:	4913      	ldr	r1, [pc, #76]	; (d4f6c <_Z21makeUpParkHourStringsv+0x5c>)
   d4f1e:	4814      	ldr	r0, [pc, #80]	; (d4f70 <_Z21makeUpParkHourStringsv+0x60>)
   d4f20:	f007 f86d 	bl	dbffe <strcpy>
}
   d4f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    snprintf(closeTimeStr, sizeof(closeTimeStr), "NA");
   d4f28:	4910      	ldr	r1, [pc, #64]	; (d4f6c <_Z21makeUpParkHourStringsv+0x5c>)
   d4f2a:	4812      	ldr	r0, [pc, #72]	; (d4f74 <_Z21makeUpParkHourStringsv+0x64>)
   d4f2c:	f007 b867 	b.w	dbffe <strcpy>
  snprintf(sensitivityStr, sizeof(sensitivityStr), "%i", sysStatus.sensitivity);
   d4f30:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   d4f34:	4a10      	ldr	r2, [pc, #64]	; (d4f78 <_Z21makeUpParkHourStringsv+0x68>)
   d4f36:	4811      	ldr	r0, [pc, #68]	; (d4f7c <_Z21makeUpParkHourStringsv+0x6c>)
   d4f38:	2108      	movs	r1, #8
   d4f3a:	f003 fa3b 	bl	d83b4 <snprintf>
  snprintf(debounceStr, sizeof(debounceStr), "%i sec", sysStatus.debounceSec);
   d4f3e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4f42:	4a0f      	ldr	r2, [pc, #60]	; (d4f80 <_Z21makeUpParkHourStringsv+0x70>)
   d4f44:	480f      	ldr	r0, [pc, #60]	; (d4f84 <_Z21makeUpParkHourStringsv+0x74>)
   d4f46:	2108      	movs	r1, #8
   d4f48:	f003 fa34 	bl	d83b4 <snprintf>
  snprintf(openTimeStr, sizeof(openTimeStr), "%i:00", sysStatus.openTime);
   d4f4c:	7f23      	ldrb	r3, [r4, #28]
   d4f4e:	4a0e      	ldr	r2, [pc, #56]	; (d4f88 <_Z21makeUpParkHourStringsv+0x78>)
   d4f50:	4807      	ldr	r0, [pc, #28]	; (d4f70 <_Z21makeUpParkHourStringsv+0x60>)
   d4f52:	2108      	movs	r1, #8
   d4f54:	f003 fa2e 	bl	d83b4 <snprintf>
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4f58:	7f63      	ldrb	r3, [r4, #29]
   d4f5a:	4a0b      	ldr	r2, [pc, #44]	; (d4f88 <_Z21makeUpParkHourStringsv+0x78>)
   d4f5c:	4805      	ldr	r0, [pc, #20]	; (d4f74 <_Z21makeUpParkHourStringsv+0x64>)
}
   d4f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  snprintf(closeTimeStr, sizeof(closeTimeStr), "%i:00", sysStatus.closeTime);
   d4f62:	2108      	movs	r1, #8
   d4f64:	f003 ba26 	b.w	d83b4 <snprintf>
   d4f68:	2003e41c 	.word	0x2003e41c
   d4f6c:	000dc589 	.word	0x000dc589
   d4f70:	2003e17e 	.word	0x2003e17e
   d4f74:	2003e164 	.word	0x2003e164
   d4f78:	000dc472 	.word	0x000dc472
   d4f7c:	2003e18c 	.word	0x2003e18c
   d4f80:	000dc3f5 	.word	0x000dc3f5
   d4f84:	2003e176 	.word	0x2003e176
   d4f88:	000dc58c 	.word	0x000dc58c

000d4f8c <_Z11setOpenTime6String>:
{
   d4f8c:	b513      	push	{r0, r1, r4, lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
   d4f8e:	220a      	movs	r2, #10
   d4f90:	6800      	ldr	r0, [r0, #0]
   d4f92:	a901      	add	r1, sp, #4
   d4f94:	f007 f914 	bl	dc1c0 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4f98:	2817      	cmp	r0, #23
   d4f9a:	d80c      	bhi.n	d4fb6 <_Z11setOpenTime6String+0x2a>
  sysStatus.openTime = tempTime;
   d4f9c:	4c07      	ldr	r4, [pc, #28]	; (d4fbc <_Z11setOpenTime6String+0x30>)
   d4f9e:	7720      	strb	r0, [r4, #28]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4fa0:	f7ff ffb6 	bl	d4f10 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
   d4fa4:	4b06      	ldr	r3, [pc, #24]	; (d4fc0 <_Z11setOpenTime6String+0x34>)
   d4fa6:	2001      	movs	r0, #1
   d4fa8:	7018      	strb	r0, [r3, #0]
  if (sysStatus.connectedStatus) {
   d4faa:	78e3      	ldrb	r3, [r4, #3]
   d4fac:	b10b      	cbz	r3, d4fb2 <_Z11setOpenTime6String+0x26>
   d4fae:	f7ff fbaf 	bl	d4710 <_Z11setOpenTime6String.part.0>
}
   d4fb2:	b002      	add	sp, #8
   d4fb4:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
   d4fb6:	2000      	movs	r0, #0
   d4fb8:	e7fb      	b.n	d4fb2 <_Z11setOpenTime6String+0x26>
   d4fba:	bf00      	nop
   d4fbc:	2003e41c 	.word	0x2003e41c
   d4fc0:	2003e44c 	.word	0x2003e44c

000d4fc4 <_Z12setCloseTime6String>:
{
   d4fc4:	b530      	push	{r4, r5, lr}
   d4fc6:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d4fc8:	6800      	ldr	r0, [r0, #0]
   d4fca:	220a      	movs	r2, #10
   d4fcc:	a903      	add	r1, sp, #12
   d4fce:	f007 f8f7 	bl	dc1c0 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d4fd2:	2818      	cmp	r0, #24
   d4fd4:	d81c      	bhi.n	d5010 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
   d4fd6:	4d10      	ldr	r5, [pc, #64]	; (d5018 <_Z12setCloseTime6String+0x54>)
   d4fd8:	7768      	strb	r0, [r5, #29]
  makeUpParkHourStrings();                                                    // Create the strings for the console
   d4fda:	f7ff ff99 	bl	d4f10 <_Z21makeUpParkHourStringsv>
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4fde:	4b0f      	ldr	r3, [pc, #60]	; (d501c <_Z12setCloseTime6String+0x58>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4fe0:	4a0f      	ldr	r2, [pc, #60]	; (d5020 <_Z12setCloseTime6String+0x5c>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
   d4fe2:	2401      	movs	r4, #1
   d4fe4:	701c      	strb	r4, [r3, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
   d4fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4fea:	7f6b      	ldrb	r3, [r5, #29]
   d4fec:	a804      	add	r0, sp, #16
   d4fee:	f003 f9e1 	bl	d83b4 <snprintf>
  if (sysStatus.connectedStatus) publishQueue.publish("Time",data, PRIVATE, WITH_ACK);
   d4ff2:	78eb      	ldrb	r3, [r5, #3]
   d4ff4:	b153      	cbz	r3, d500c <_Z12setCloseTime6String+0x48>
   d4ff6:	4b0b      	ldr	r3, [pc, #44]	; (d5024 <_Z12setCloseTime6String+0x60>)
   d4ff8:	490b      	ldr	r1, [pc, #44]	; (d5028 <_Z12setCloseTime6String+0x64>)
   d4ffa:	781b      	ldrb	r3, [r3, #0]
   d4ffc:	f88d 3000 	strb.w	r3, [sp]
   d5000:	4b0a      	ldr	r3, [pc, #40]	; (d502c <_Z12setCloseTime6String+0x68>)
   d5002:	480b      	ldr	r0, [pc, #44]	; (d5030 <_Z12setCloseTime6String+0x6c>)
   d5004:	781b      	ldrb	r3, [r3, #0]
   d5006:	aa04      	add	r2, sp, #16
   d5008:	f7ff fab9 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  return 1;
   d500c:	4620      	mov	r0, r4
   d500e:	e000      	b.n	d5012 <_Z12setCloseTime6String+0x4e>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
   d5010:	2000      	movs	r0, #0
}
   d5012:	b045      	add	sp, #276	; 0x114
   d5014:	bd30      	pop	{r4, r5, pc}
   d5016:	bf00      	nop
   d5018:	2003e41c 	.word	0x2003e41c
   d501c:	2003e44c 	.word	0x2003e44c
   d5020:	000dc592 	.word	0x000dc592
   d5024:	2003e2d5 	.word	0x2003e2d5
   d5028:	000dc654 	.word	0x000dc654
   d502c:	2003e2d4 	.word	0x2003e2d4
   d5030:	2003e3d4 	.word	0x2003e3d4

000d5034 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   d5034:	b538      	push	{r3, r4, r5, lr}
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d5036:	4c0a      	ldr	r4, [pc, #40]	; (d5060 <_Z15resetEverythingv+0x2c>)
   d5038:	2500      	movs	r5, #0
  current.hourlyCountInFlight = 0;
   d503a:	e9c4 5500 	strd	r5, r5, [r4]
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
   d503e:	60a5      	str	r5, [r4, #8]
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d5040:	f005 ff59 	bl	daef6 <_ZN9TimeClass3nowEv>
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5044:	4b07      	ldr	r3, [pc, #28]	; (d5064 <_Z15resetEverythingv+0x30>)
  currentCountsWriteNeeded = true;
   d5046:	4a08      	ldr	r2, [pc, #32]	; (d5068 <_Z15resetEverythingv+0x34>)
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5048:	611d      	str	r5, [r3, #16]
  current.minBatteryLevel = 100;
   d504a:	2364      	movs	r3, #100	; 0x64
   d504c:	6223      	str	r3, [r4, #32]
  currentCountsWriteNeeded = true;
   d504e:	2301      	movs	r3, #1
   d5050:	7013      	strb	r3, [r2, #0]
  systemStatusWriteNeeded=true;
   d5052:	4a06      	ldr	r2, [pc, #24]	; (d506c <_Z15resetEverythingv+0x38>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   d5054:	60e0      	str	r0, [r4, #12]
  systemStatusWriteNeeded=true;
   d5056:	7013      	strb	r3, [r2, #0]
  sysStatus.resetCount = current.alertCount = 0;                      // Reset everything for the day
   d5058:	6165      	str	r5, [r4, #20]
  current.maxConnectTime = 0;                                         // Reset values for this time period
   d505a:	83a5      	strh	r5, [r4, #28]
}
   d505c:	bd38      	pop	{r3, r4, r5, pc}
   d505e:	bf00      	nop
   d5060:	2003e350 	.word	0x2003e350
   d5064:	2003e41c 	.word	0x2003e41c
   d5068:	2003e374 	.word	0x2003e374
   d506c:	2003e44c 	.word	0x2003e44c

000d5070 <_Z22publishStateTransitionv>:
 * @brief Publishes a state transition to the Log Handler and to the Particle monitoring system.
 * 
 * @details A good debugging tool.
 */
void publishStateTransition(void)
{
   d5070:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d5072:	4d14      	ldr	r5, [pc, #80]	; (d50c4 <_Z22publishStateTransitionv+0x54>)
   d5074:	4c14      	ldr	r4, [pc, #80]	; (d50c8 <_Z22publishStateTransitionv+0x58>)
   d5076:	4915      	ldr	r1, [pc, #84]	; (d50cc <_Z22publishStateTransitionv+0x5c>)
   d5078:	782a      	ldrb	r2, [r5, #0]
   d507a:	7820      	ldrb	r0, [r4, #0]
{
   d507c:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d507e:	230e      	movs	r3, #14
   d5080:	fb03 1202 	mla	r2, r3, r2, r1
   d5084:	9200      	str	r2, [sp, #0]
   d5086:	fb03 1300 	mla	r3, r3, r0, r1
   d508a:	4a11      	ldr	r2, [pc, #68]	; (d50d0 <_Z22publishStateTransitionv+0x60>)
   d508c:	2128      	movs	r1, #40	; 0x28
   d508e:	a802      	add	r0, sp, #8
   d5090:	f003 f990 	bl	d83b4 <snprintf>
  oldState = state;
   d5094:	782b      	ldrb	r3, [r5, #0]
   d5096:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode && sysStatus.connectedStatus) publishQueue.publish("State Transition",stateTransitionString, PRIVATE, WITH_ACK);
   d5098:	4b0e      	ldr	r3, [pc, #56]	; (d50d4 <_Z22publishStateTransitionv+0x64>)
   d509a:	791a      	ldrb	r2, [r3, #4]
   d509c:	b162      	cbz	r2, d50b8 <_Z22publishStateTransitionv+0x48>
   d509e:	78db      	ldrb	r3, [r3, #3]
   d50a0:	b153      	cbz	r3, d50b8 <_Z22publishStateTransitionv+0x48>
   d50a2:	4b0d      	ldr	r3, [pc, #52]	; (d50d8 <_Z22publishStateTransitionv+0x68>)
   d50a4:	490d      	ldr	r1, [pc, #52]	; (d50dc <_Z22publishStateTransitionv+0x6c>)
   d50a6:	781b      	ldrb	r3, [r3, #0]
   d50a8:	f88d 3000 	strb.w	r3, [sp]
   d50ac:	4b0c      	ldr	r3, [pc, #48]	; (d50e0 <_Z22publishStateTransitionv+0x70>)
   d50ae:	480d      	ldr	r0, [pc, #52]	; (d50e4 <_Z22publishStateTransitionv+0x74>)
   d50b0:	781b      	ldrb	r3, [r3, #0]
   d50b2:	aa02      	add	r2, sp, #8
   d50b4:	f7ff fa63 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  Log.info(stateTransitionString);
   d50b8:	480b      	ldr	r0, [pc, #44]	; (d50e8 <_Z22publishStateTransitionv+0x78>)
   d50ba:	a902      	add	r1, sp, #8
   d50bc:	f7ff fa31 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
}
   d50c0:	b00d      	add	sp, #52	; 0x34
   d50c2:	bd30      	pop	{r4, r5, pc}
   d50c4:	2003e411 	.word	0x2003e411
   d50c8:	2003e3d0 	.word	0x2003e3d0
   d50cc:	2003e194 	.word	0x2003e194
   d50d0:	000dc5a9 	.word	0x000dc5a9
   d50d4:	2003e41c 	.word	0x2003e41c
   d50d8:	2003e2d5 	.word	0x2003e2d5
   d50dc:	000dc5b7 	.word	0x000dc5b7
   d50e0:	2003e2d4 	.word	0x2003e2d4
   d50e4:	2003e3d4 	.word	0x2003e3d4
   d50e8:	2003e53c 	.word	0x2003e53c

000d50ec <_Z12dailyCleanupv>:
 * @brief Cleanup function that is run at the beginning of the day.
 * 
 * @details Syncs time with remote service and sets low power mode. Called from Reporting State ONLY.
 * Clean house at the end of the day
 */
void dailyCleanup() {
   d50ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d50f0:	4b22      	ldr	r3, [pc, #136]	; (d517c <_Z12dailyCleanupv+0x90>)
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
  sysStatus.verboseMode = false;
   d50f2:	4c23      	ldr	r4, [pc, #140]	; (d5180 <_Z12dailyCleanupv+0x94>)
   d50f4:	781b      	ldrb	r3, [r3, #0]
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d50f6:	4a23      	ldr	r2, [pc, #140]	; (d5184 <_Z12dailyCleanupv+0x98>)
   d50f8:	4923      	ldr	r1, [pc, #140]	; (d5188 <_Z12dailyCleanupv+0x9c>)
   d50fa:	4824      	ldr	r0, [pc, #144]	; (d518c <_Z12dailyCleanupv+0xa0>)
void dailyCleanup() {
   d50fc:	b086      	sub	sp, #24
  sysStatus.verboseMode = false;
   d50fe:	2500      	movs	r5, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE, WITH_ACK);            // Make sure this is being run
   d5100:	f88d 3000 	strb.w	r3, [sp]
   d5104:	4b22      	ldr	r3, [pc, #136]	; (d5190 <_Z12dailyCleanupv+0xa4>)
   d5106:	781b      	ldrb	r3, [r3, #0]
   d5108:	f7ff fa39 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d510c:	7125      	strb	r5, [r4, #4]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d510e:	f003 f881 	bl	d8214 <spark_cloud_flag_connected>
        if (!connected()) {
   d5112:	b110      	cbz	r0, d511a <_Z12dailyCleanupv+0x2e>
        return spark_sync_time(NULL);
   d5114:	4628      	mov	r0, r5
   d5116:	f003 f89d 	bl	d8254 <spark_sync_time>
        const system_tick_t start = millis();
   d511a:	f7ff f9dd 	bl	d44d8 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d511e:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d5122:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d5124:	f247 582f 	movw	r8, #29999	; 0x752f
   d5128:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d512c:	f7ff f9d4 	bl	d44d8 <_ZN11SystemClass6millisEv>
   d5130:	1b46      	subs	r6, r0, r5
   d5132:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5136:	45b9      	cmp	r9, r7
   d5138:	bf08      	it	eq
   d513a:	45b0      	cmpeq	r8, r6
   d513c:	d305      	bcc.n	d514a <_Z12dailyCleanupv+0x5e>
  Particle.syncTime();                                                 // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                // Wait for up to 30 seconds for the SyncTime to complete
   d513e:	f7ff f8ce 	bl	d42de <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d5142:	b910      	cbnz	r0, d514a <_Z12dailyCleanupv+0x5e>
            spark_process();
   d5144:	f003 f856 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d5148:	e7f0      	b.n	d512c <_Z12dailyCleanupv+0x40>
   d514a:	f7ff f8c8 	bl	d42de <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  if (sysStatus.solarPowerMode || sysStatus.stateOfCharge <= 70) {     // If Solar or if the battery is being discharged
   d514e:	7963      	ldrb	r3, [r4, #5]
   d5150:	b913      	cbnz	r3, d5158 <_Z12dailyCleanupv+0x6c>
   d5152:	68a3      	ldr	r3, [r4, #8]
   d5154:	2b46      	cmp	r3, #70	; 0x46
   d5156:	dc09      	bgt.n	d516c <_Z12dailyCleanupv+0x80>
    setLowPowerMode("1");
   d5158:	490e      	ldr	r1, [pc, #56]	; (d5194 <_Z12dailyCleanupv+0xa8>)
   d515a:	a802      	add	r0, sp, #8
   d515c:	f005 fb91 	bl	da882 <_ZN6StringC1EPKc>
   d5160:	a802      	add	r0, sp, #8
   d5162:	f7ff fbcb 	bl	d48fc <_Z15setLowPowerMode6String>
   d5166:	a802      	add	r0, sp, #8
   d5168:	f005 fb40 	bl	da7ec <_ZN6StringD1Ev>
  }

  resetEverything();                                               // If so, we need to Zero the counts for the new day
   d516c:	f7ff ff62 	bl	d5034 <_Z15resetEverythingv>

  systemStatusWriteNeeded = true;
   d5170:	4b09      	ldr	r3, [pc, #36]	; (d5198 <_Z12dailyCleanupv+0xac>)
   d5172:	2201      	movs	r2, #1
   d5174:	701a      	strb	r2, [r3, #0]
   d5176:	b006      	add	sp, #24
   d5178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d517c:	2003e2d5 	.word	0x2003e2d5
   d5180:	2003e41c 	.word	0x2003e41c
   d5184:	000dc5c8 	.word	0x000dc5c8
   d5188:	000dc5d0 	.word	0x000dc5d0
   d518c:	2003e3d4 	.word	0x2003e3d4
   d5190:	2003e2d4 	.word	0x2003e2d4
   d5194:	000dc2f8 	.word	0x000dc2f8
   d5198:	2003e44c 	.word	0x2003e44c

000d519c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d519c:	b530      	push	{r4, r5, lr}
   d519e:	b085      	sub	sp, #20
   d51a0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d51a2:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d51a4:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d51a6:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d51a8:	f002 ff90 	bl	d80cc <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d51ac:	b9b0      	cbnz	r0, d51dc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d51ae:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d51b0:	b10c      	cbz	r4, d51b6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d51b2:	6923      	ldr	r3, [r4, #16]
   d51b4:	b923      	cbnz	r3, d51c0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d51b6:	4a0a      	ldr	r2, [pc, #40]	; (d51e0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d51b8:	2100      	movs	r1, #0
   d51ba:	200a      	movs	r0, #10
   d51bc:	f002 ff5e 	bl	d807c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d51c0:	2300      	movs	r3, #0
   d51c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   d51c6:	230c      	movs	r3, #12
   d51c8:	f8ad 3004 	strh.w	r3, [sp, #4]
   d51cc:	2304      	movs	r3, #4
   d51ce:	9303      	str	r3, [sp, #12]
   d51d0:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d51d2:	6923      	ldr	r3, [r4, #16]
   d51d4:	aa01      	add	r2, sp, #4
   d51d6:	2101      	movs	r1, #1
   d51d8:	4620      	mov	r0, r4
   d51da:	4798      	blx	r3
}
   d51dc:	b005      	add	sp, #20
   d51de:	bd30      	pop	{r4, r5, pc}
   d51e0:	000d7d4d 	.word	0x000d7d4d

000d51e4 <_Z16takeMeasurementsv>:
{
   d51e4:	b530      	push	{r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d51e6:	4b26      	ldr	r3, [pc, #152]	; (d5280 <_Z16takeMeasurementsv+0x9c>)
   d51e8:	2200      	movs	r2, #0
   d51ea:	b089      	sub	sp, #36	; 0x24
   d51ec:	6858      	ldr	r0, [r3, #4]
   d51ee:	4611      	mov	r1, r2
   d51f0:	f003 f878 	bl	d82e4 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
   d51f4:	b108      	cbz	r0, d51fa <_Z16takeMeasurementsv+0x16>
   d51f6:	f7ff fd13 	bl	d4c20 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
   d51fa:	f7ff fd4d 	bl	d4c98 <_Z14getTemperaturev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d51fe:	4669      	mov	r1, sp
   d5200:	2007      	movs	r0, #7
   d5202:	f7ff ffcb 	bl	d519c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
  sysStatus.batteryState = System.batteryState();                     // Call before isItSafeToCharge() as it may overwrite the context
   d5206:	4c1f      	ldr	r4, [pc, #124]	; (d5284 <_Z16takeMeasurementsv+0xa0>)
   d5208:	4d1f      	ldr	r5, [pc, #124]	; (d5288 <_Z16takeMeasurementsv+0xa4>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d520a:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d520c:	bfa8      	it	ge
   d520e:	9800      	ldrge	r0, [sp, #0]
   d5210:	7320      	strb	r0, [r4, #12]
  if (!isItSafeToCharge()) current.alertCount++;                      // Increment the alert count
   d5212:	f7ff fce5 	bl	d4be0 <_Z16isItSafeToChargev>
   d5216:	b910      	cbnz	r0, d521e <_Z16takeMeasurementsv+0x3a>
   d5218:	696b      	ldr	r3, [r5, #20]
   d521a:	3301      	adds	r3, #1
   d521c:	616b      	str	r3, [r5, #20]
   d521e:	4669      	mov	r1, sp
   d5220:	2003      	movs	r0, #3
   d5222:	f7ff ffbb 	bl	d519c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d5226:	bb40      	cbnz	r0, d527a <_Z16takeMeasurementsv+0x96>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d5228:	f8bd 3000 	ldrh.w	r3, [sp]
   d522c:	ee07 3a90 	vmov	s15, r3
   d5230:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d5234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d5238:	ee17 3a90 	vmov	r3, s15
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d523c:	2b40      	cmp	r3, #64	; 0x40
  sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d523e:	edc4 7a02 	vstr	s15, [r4, #8]
  if (sysStatus.stateOfCharge < 65 && sysStatus.batteryState == 1) {
   d5242:	dc09      	bgt.n	d5258 <_Z16takeMeasurementsv+0x74>
   d5244:	7b23      	ldrb	r3, [r4, #12]
   d5246:	2b01      	cmp	r3, #1
   d5248:	d106      	bne.n	d5258 <_Z16takeMeasurementsv+0x74>
    System.setPowerConfiguration(SystemPowerConfiguration());         // Reset the PMIC
   d524a:	4668      	mov	r0, sp
   d524c:	f7ff f8dc 	bl	d4408 <_ZN8particle24SystemPowerConfigurationC1Ev>
        return system_power_management_set_config(conf.config(), nullptr);
   d5250:	2100      	movs	r1, #0
   d5252:	4668      	mov	r0, sp
   d5254:	f002 ffa0 	bl	d8198 <system_power_management_set_config>
  if (sysStatus.stateOfCharge < current.minBatteryLevel) current.minBatteryLevel = sysStatus.stateOfCharge; // Keep track of lowest value for the day
   d5258:	68a3      	ldr	r3, [r4, #8]
   d525a:	6a2a      	ldr	r2, [r5, #32]
   d525c:	4293      	cmp	r3, r2
   d525e:	bfb8      	it	lt
   d5260:	622b      	strlt	r3, [r5, #32]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d5262:	2b1d      	cmp	r3, #29
   d5264:	bfcc      	ite	gt
   d5266:	2300      	movgt	r3, #0
   d5268:	2301      	movle	r3, #1
  systemStatusWriteNeeded = true;
   d526a:	4a08      	ldr	r2, [pc, #32]	; (d528c <_Z16takeMeasurementsv+0xa8>)
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d526c:	71e3      	strb	r3, [r4, #7]
  systemStatusWriteNeeded = true;
   d526e:	2301      	movs	r3, #1
   d5270:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
   d5272:	4a07      	ldr	r2, [pc, #28]	; (d5290 <_Z16takeMeasurementsv+0xac>)
   d5274:	7013      	strb	r3, [r2, #0]
}
   d5276:	b009      	add	sp, #36	; 0x24
   d5278:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d527a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d527e:	e7d9      	b.n	d5234 <_Z16takeMeasurementsv+0x50>
   d5280:	2003e468 	.word	0x2003e468
   d5284:	2003e41c 	.word	0x2003e41c
   d5288:	2003e350 	.word	0x2003e350
   d528c:	2003e44c 	.word	0x2003e44c
   d5290:	2003e374 	.word	0x2003e374

000d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5294:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5296:	e9d0 5300 	ldrd	r5, r3, [r0]
   d529a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d529c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d529e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d52a2:	42ae      	cmp	r6, r5
   d52a4:	d004      	beq.n	d52b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d52a6:	4628      	mov	r0, r5
   d52a8:	f005 faa0 	bl	da7ec <_ZN6StringD1Ev>
   d52ac:	3514      	adds	r5, #20
   d52ae:	e7f8      	b.n	d52a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d52b0:	6820      	ldr	r0, [r4, #0]
   d52b2:	f003 f867 	bl	d8384 <free>
    AllocatorT::free(data_);
}
   d52b6:	4620      	mov	r0, r4
   d52b8:	bd70      	pop	{r4, r5, r6, pc}

000d52ba <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d52ba:	2300      	movs	r3, #0
   d52bc:	2202      	movs	r2, #2
   d52be:	f002 bf89 	b.w	d81d4 <spark_variable>

000d52c2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d52c2:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d52c4:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d52c6:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d52c8:	68dd      	ldr	r5, [r3, #12]
   d52ca:	2330      	movs	r3, #48	; 0x30
   d52cc:	47a8      	blx	r5
    }
   d52ce:	4620      	mov	r0, r4
   d52d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d52d4 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d52d4:	b570      	push	{r4, r5, r6, lr}
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d52d6:	4b19      	ldr	r3, [pc, #100]	; (d533c <_Z18loadSystemDefaultsv+0x68>)
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d52d8:	4c19      	ldr	r4, [pc, #100]	; (d5340 <_Z18loadSystemDefaultsv+0x6c>)
  particleConnectionNeeded = true;                                  // Get connected to Particle - sets sysStatus.connectedStatus to true
   d52da:	2201      	movs	r2, #1
   d52dc:	701a      	strb	r2, [r3, #0]
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d52de:	78e3      	ldrb	r3, [r4, #3]
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
   d52e0:	b086      	sub	sp, #24
  if (sysStatus.connectedStatus) publishQueue.publish("Mode","Loading System Defaults", PRIVATE, WITH_ACK);
   d52e2:	b153      	cbz	r3, d52fa <_Z18loadSystemDefaultsv+0x26>
   d52e4:	4b17      	ldr	r3, [pc, #92]	; (d5344 <_Z18loadSystemDefaultsv+0x70>)
   d52e6:	4a18      	ldr	r2, [pc, #96]	; (d5348 <_Z18loadSystemDefaultsv+0x74>)
   d52e8:	781b      	ldrb	r3, [r3, #0]
   d52ea:	f88d 3000 	strb.w	r3, [sp]
   d52ee:	4b17      	ldr	r3, [pc, #92]	; (d534c <_Z18loadSystemDefaultsv+0x78>)
   d52f0:	4917      	ldr	r1, [pc, #92]	; (d5350 <_Z18loadSystemDefaultsv+0x7c>)
   d52f2:	781b      	ldrb	r3, [r3, #0]
   d52f4:	4817      	ldr	r0, [pc, #92]	; (d5354 <_Z18loadSystemDefaultsv+0x80>)
   d52f6:	f7ff f942 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
   d52fa:	2500      	movs	r5, #0
  setLowPowerMode("0");
   d52fc:	4916      	ldr	r1, [pc, #88]	; (d5358 <_Z18loadSystemDefaultsv+0x84>)
  sysStatus.verboseMode = false;
   d52fe:	7125      	strb	r5, [r4, #4]
  sysStatus.structuresVersion = 1;
   d5300:	2601      	movs	r6, #1
  setLowPowerMode("0");
   d5302:	a802      	add	r0, sp, #8
  sysStatus.structuresVersion = 1;
   d5304:	7026      	strb	r6, [r4, #0]
  sysStatus.clockSet = false;
   d5306:	70a5      	strb	r5, [r4, #2]
  sysStatus.lowBatteryMode = false;
   d5308:	71e5      	strb	r5, [r4, #7]
  setLowPowerMode("0");
   d530a:	f005 faba 	bl	da882 <_ZN6StringC1EPKc>
   d530e:	a802      	add	r0, sp, #8
   d5310:	f7ff faf4 	bl	d48fc <_Z15setLowPowerMode6String>
   d5314:	a802      	add	r0, sp, #8
   d5316:	f005 fa69 	bl	da7ec <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
   d531a:	4b10      	ldr	r3, [pc, #64]	; (d535c <_Z18loadSystemDefaultsv+0x88>)
   d531c:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
   d531e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   d5322:	61a3      	str	r3, [r4, #24]
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5324:	4a06      	ldr	r2, [pc, #24]	; (d5340 <_Z18loadSystemDefaultsv+0x6c>)
   d5326:	480e      	ldr	r0, [pc, #56]	; (d5360 <_Z18loadSystemDefaultsv+0x8c>)
  sysStatus.solarPowerMode = true;  
   d5328:	7166      	strb	r6, [r4, #5]
  sysStatus.openTime = 6;
   d532a:	f241 5306 	movw	r3, #5382	; 0x1506
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d532e:	4631      	mov	r1, r6
  sysStatus.openTime = 6;
   d5330:	83a3      	strh	r3, [r4, #28]
  sysStatus.lastConnectionDuration = 0;                             // New measure
   d5332:	8525      	strh	r5, [r4, #40]	; 0x28
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
   d5334:	f7ff ffc5 	bl	d52c2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
}
   d5338:	b006      	add	sp, #24
   d533a:	bd70      	pop	{r4, r5, r6, pc}
   d533c:	2003e3d1 	.word	0x2003e3d1
   d5340:	2003e41c 	.word	0x2003e41c
   d5344:	2003e2d5 	.word	0x2003e2d5
   d5348:	000dc5de 	.word	0x000dc5de
   d534c:	2003e2d4 	.word	0x2003e2d4
   d5350:	000dc55a 	.word	0x000dc55a
   d5354:	2003e3d4 	.word	0x2003e3d4
   d5358:	000dc590 	.word	0x000dc590
   d535c:	c0a00000 	.word	0xc0a00000
   d5360:	2003e380 	.word	0x2003e380
   d5364:	00000000 	.word	0x00000000

000d5368 <setup>:
{
   d5368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  delay(2000);
   d536c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
   d5370:	b0aa      	sub	sp, #168	; 0xa8
  delay(2000);
   d5372:	f003 f873 	bl	d845c <delay>
  Log.info("Starting Setup");
   d5376:	49c4      	ldr	r1, [pc, #784]	; (d5688 <setup+0x320>)
   d5378:	48c4      	ldr	r0, [pc, #784]	; (d568c <setup+0x324>)
   d537a:	4fc5      	ldr	r7, [pc, #788]	; (d5690 <setup+0x328>)
   d537c:	4cc5      	ldr	r4, [pc, #788]	; (d5694 <setup+0x32c>)
   d537e:	f8df 8430 	ldr.w	r8, [pc, #1072]	; d57b0 <setup+0x448>
   d5382:	f7ff f8ce 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
   d5386:	2100      	movs	r1, #0
   d5388:	2008      	movs	r0, #8
   d538a:	f006 f80f 	bl	db3ac <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
   d538e:	2100      	movs	r1, #0
   d5390:	2004      	movs	r0, #4
   d5392:	f006 f80b 	bl	db3ac <pinMode>
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
   d5396:	2101      	movs	r1, #1
   d5398:	2007      	movs	r0, #7
   d539a:	f006 f807 	bl	db3ac <pinMode>
  pinMode(intPin,INPUT);                            // sensor interrupt
   d539e:	2100      	movs	r1, #0
   d53a0:	2002      	movs	r0, #2
   d53a2:	f006 f803 	bl	db3ac <pinMode>
  digitalWrite(blueLED,HIGH);                       // Turn on the led so we can see how long the Setup() takes
   d53a6:	2101      	movs	r1, #1
   d53a8:	2007      	movs	r0, #7
   d53aa:	f006 f810 	bl	db3ce <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
   d53ae:	a806      	add	r0, sp, #24
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d53b0:	2500      	movs	r5, #0
   d53b2:	f002 ff37 	bl	d8224 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d53b6:	2300      	movs	r3, #0
   d53b8:	227d      	movs	r2, #125	; 0x7d
   d53ba:	a90a      	add	r1, sp, #40	; 0x28
   d53bc:	a806      	add	r0, sp, #24
   d53be:	f005 fac8 	bl	da952 <_ZNK6String8getBytesEPhjj>
   d53c2:	49b5      	ldr	r1, [pc, #724]	; (d5698 <setup+0x330>)
   d53c4:	462b      	mov	r3, r5
   d53c6:	462a      	mov	r2, r5
   d53c8:	e9cd 5500 	strd	r5, r5, [sp]
   d53cc:	a80a      	add	r0, sp, #40	; 0x28
   d53ce:	f002 ff39 	bl	d8244 <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53d2:	462b      	mov	r3, r5
   d53d4:	2202      	movs	r2, #2
   d53d6:	49ae      	ldr	r1, [pc, #696]	; (d5690 <setup+0x328>)
   d53d8:	48b0      	ldr	r0, [pc, #704]	; (d569c <setup+0x334>)
   d53da:	f002 fefb 	bl	d81d4 <spark_variable>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
   d53de:	49b0      	ldr	r1, [pc, #704]	; (d56a0 <setup+0x338>)
   d53e0:	48b0      	ldr	r0, [pc, #704]	; (d56a4 <setup+0x33c>)
   d53e2:	f7ff ff6a 	bl	d52ba <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return _variable(varKey, var, STRING);
   d53e6:	49b0      	ldr	r1, [pc, #704]	; (d56a8 <setup+0x340>)
   d53e8:	48b0      	ldr	r0, [pc, #704]	; (d56ac <setup+0x344>)
   d53ea:	f7fe ff85 	bl	d42f8 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("ResetCount", sysStatus.resetCount);
   d53ee:	49b0      	ldr	r1, [pc, #704]	; (d56b0 <setup+0x348>)
   d53f0:	48b0      	ldr	r0, [pc, #704]	; (d56b4 <setup+0x34c>)
   d53f2:	f7ff ff62 	bl	d52ba <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d53f6:	462b      	mov	r3, r5
   d53f8:	2202      	movs	r2, #2
   d53fa:	49af      	ldr	r1, [pc, #700]	; (d56b8 <setup+0x350>)
   d53fc:	48af      	ldr	r0, [pc, #700]	; (d56bc <setup+0x354>)
   d53fe:	f002 fee9 	bl	d81d4 <spark_variable>
        return _variable(varKey, var, STRING);
   d5402:	49af      	ldr	r1, [pc, #700]	; (d56c0 <setup+0x358>)
   d5404:	48af      	ldr	r0, [pc, #700]	; (d56c4 <setup+0x35c>)
   d5406:	f7fe ff77 	bl	d42f8 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
   d540a:	49af      	ldr	r1, [pc, #700]	; (d56c8 <setup+0x360>)
   d540c:	48af      	ldr	r0, [pc, #700]	; (d56cc <setup+0x364>)
   d540e:	f7ff ff54 	bl	d52ba <_ZN10CloudClass8variableIA11_cJRiEEEbRKT_DpOT0_>
   d5412:	49af      	ldr	r1, [pc, #700]	; (d56d0 <setup+0x368>)
   d5414:	48af      	ldr	r0, [pc, #700]	; (d56d4 <setup+0x36c>)
   d5416:	f7fe ff6f 	bl	d42f8 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d541a:	49af      	ldr	r1, [pc, #700]	; (d56d8 <setup+0x370>)
   d541c:	48af      	ldr	r0, [pc, #700]	; (d56dc <setup+0x374>)
   d541e:	f7fe ff6b 	bl	d42f8 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5422:	49af      	ldr	r1, [pc, #700]	; (d56e0 <setup+0x378>)
   d5424:	48af      	ldr	r0, [pc, #700]	; (d56e4 <setup+0x37c>)
   d5426:	f7fe ff67 	bl	d42f8 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d542a:	462b      	mov	r3, r5
   d542c:	2202      	movs	r2, #2
   d542e:	49ae      	ldr	r1, [pc, #696]	; (d56e8 <setup+0x380>)
   d5430:	48ae      	ldr	r0, [pc, #696]	; (d56ec <setup+0x384>)
   d5432:	f002 fecf 	bl	d81d4 <spark_variable>
        return _variable(varKey, var, STRING);
   d5436:	49ae      	ldr	r1, [pc, #696]	; (d56f0 <setup+0x388>)
   d5438:	48ae      	ldr	r0, [pc, #696]	; (d56f4 <setup+0x38c>)
   d543a:	f7fe ff5d 	bl	d42f8 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        extra.size = sizeof(extra);
   d543e:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   d5440:	e9cd 5503 	strd	r5, r5, [sp, #12]
        extra.size = sizeof(extra);
   d5444:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.copy = [](const void* var, void** data, size_t* size) {
   d5448:	4bab      	ldr	r3, [pc, #684]	; (d56f8 <setup+0x390>)
            return copy_variable_value(val, *data, *size);
        };
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d544a:	49ac      	ldr	r1, [pc, #688]	; (d56fc <setup+0x394>)
        extra.copy = [](const void* var, void** data, size_t* size) {
   d544c:	9305      	str	r3, [sp, #20]
        return spark_variable(varKey, (const void*)&fn, VariableType::TYPE_ID, &extra);
   d544e:	2204      	movs	r2, #4
   d5450:	ab03      	add	r3, sp, #12
   d5452:	48ab      	ldr	r0, [pc, #684]	; (d5700 <setup+0x398>)
   d5454:	f002 febe 	bl	d81d4 <spark_variable>
        return _variable(varKey, var, STRING);
   d5458:	49aa      	ldr	r1, [pc, #680]	; (d5704 <setup+0x39c>)
   d545a:	48ab      	ldr	r0, [pc, #684]	; (d5708 <setup+0x3a0>)
   d545c:	f7fe ff4c 	bl	d42f8 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5460:	49aa      	ldr	r1, [pc, #680]	; (d570c <setup+0x3a4>)
   d5462:	48ab      	ldr	r0, [pc, #684]	; (d5710 <setup+0x3a8>)
   d5464:	f7fe ff48 	bl	d42f8 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return _function(name, args...);
   d5468:	49aa      	ldr	r1, [pc, #680]	; (d5714 <setup+0x3ac>)
   d546a:	48ab      	ldr	r0, [pc, #684]	; (d5718 <setup+0x3b0>)
   d546c:	f7ff f838 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5470:	49aa      	ldr	r1, [pc, #680]	; (d571c <setup+0x3b4>)
   d5472:	48ab      	ldr	r0, [pc, #684]	; (d5720 <setup+0x3b8>)
   d5474:	f7ff f834 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5478:	49aa      	ldr	r1, [pc, #680]	; (d5724 <setup+0x3bc>)
   d547a:	48ab      	ldr	r0, [pc, #684]	; (d5728 <setup+0x3c0>)
   d547c:	f7ff f830 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5480:	49aa      	ldr	r1, [pc, #680]	; (d572c <setup+0x3c4>)
   d5482:	48ab      	ldr	r0, [pc, #684]	; (d5730 <setup+0x3c8>)
   d5484:	f7ff f82c 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5488:	49aa      	ldr	r1, [pc, #680]	; (d5734 <setup+0x3cc>)
   d548a:	48ab      	ldr	r0, [pc, #684]	; (d5738 <setup+0x3d0>)
   d548c:	f7ff f828 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5490:	49aa      	ldr	r1, [pc, #680]	; (d573c <setup+0x3d4>)
   d5492:	48ab      	ldr	r0, [pc, #684]	; (d5740 <setup+0x3d8>)
   d5494:	f7ff f824 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5498:	49aa      	ldr	r1, [pc, #680]	; (d5744 <setup+0x3dc>)
   d549a:	48ab      	ldr	r0, [pc, #684]	; (d5748 <setup+0x3e0>)
   d549c:	f7ff f820 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54a0:	49aa      	ldr	r1, [pc, #680]	; (d574c <setup+0x3e4>)
   d54a2:	48ab      	ldr	r0, [pc, #684]	; (d5750 <setup+0x3e8>)
   d54a4:	f7ff f81c 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54a8:	49aa      	ldr	r1, [pc, #680]	; (d5754 <setup+0x3ec>)
   d54aa:	48ab      	ldr	r0, [pc, #684]	; (d5758 <setup+0x3f0>)
   d54ac:	f7ff f818 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54b0:	49aa      	ldr	r1, [pc, #680]	; (d575c <setup+0x3f4>)
   d54b2:	48ab      	ldr	r0, [pc, #684]	; (d5760 <setup+0x3f8>)
   d54b4:	f7ff f814 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54b8:	49aa      	ldr	r1, [pc, #680]	; (d5764 <setup+0x3fc>)
   d54ba:	48ab      	ldr	r0, [pc, #684]	; (d5768 <setup+0x400>)
   d54bc:	f7ff f810 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54c0:	49aa      	ldr	r1, [pc, #680]	; (d576c <setup+0x404>)
   d54c2:	48ab      	ldr	r0, [pc, #684]	; (d5770 <setup+0x408>)
   d54c4:	f7ff f80c 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54c8:	49aa      	ldr	r1, [pc, #680]	; (d5774 <setup+0x40c>)
   d54ca:	48ab      	ldr	r0, [pc, #684]	; (d5778 <setup+0x410>)
   d54cc:	f7ff f808 	bl	d44e0 <_ZN10CloudClass9_functionEPKcPFi6StringE>
        graceful_(graceful),
        clearSession_(clearSession) {
}

inline CloudDisconnectOptions& CloudDisconnectOptions::graceful(bool enabled) {
    graceful_ = enabled;
   d54d0:	2601      	movs	r6, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   d54d2:	2203      	movs	r2, #3
   d54d4:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));  // Don't disconnect abruptly
   d54d8:	a803      	add	r0, sp, #12
   d54da:	e9cd 2303 	strd	r2, r3, [sp, #12]
    graceful_ = enabled;
   d54de:	f8ad 6014 	strh.w	r6, [sp, #20]
   d54e2:	f003 f9b4 	bl	d884e <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  fram.begin();                                                       // Initialize the FRAM module
   d54e6:	48a5      	ldr	r0, [pc, #660]	; (d577c <setup+0x414>)
   d54e8:	f001 fe44 	bl	d7174 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54ec:	4633      	mov	r3, r6
   d54ee:	48a3      	ldr	r0, [pc, #652]	; (d577c <setup+0x414>)
   d54f0:	f10d 020b 	add.w	r2, sp, #11
   d54f4:	4629      	mov	r1, r5
   d54f6:	f001 fe7f 	bl	d71f8 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
   d54fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d54fe:	2b03      	cmp	r3, #3
   d5500:	f000 817f 	beq.w	d5802 <setup+0x49a>
    fram.erase();                                                     // Reset the FRAM to correct the issue
   d5504:	489d      	ldr	r0, [pc, #628]	; (d577c <setup+0x414>)
   d5506:	f001 fe3f 	bl	d7188 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d550a:	4a9d      	ldr	r2, [pc, #628]	; (d5780 <setup+0x418>)
   d550c:	489b      	ldr	r0, [pc, #620]	; (d577c <setup+0x414>)
   d550e:	2304      	movs	r3, #4
   d5510:	4629      	mov	r1, r5
   d5512:	f001 febc 	bl	d728e <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5516:	4633      	mov	r3, r6
   d5518:	4898      	ldr	r0, [pc, #608]	; (d577c <setup+0x414>)
   d551a:	f10d 020b 	add.w	r2, sp, #11
   d551e:	4629      	mov	r1, r5
   d5520:	f001 fe6a 	bl	d71f8 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d5524:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5528:	2b03      	cmp	r3, #3
   d552a:	f000 8167 	beq.w	d57fc <setup+0x494>
      Log.info("FRAM Test Error");
   d552e:	4995      	ldr	r1, [pc, #596]	; (d5784 <setup+0x41c>)
   d5530:	4856      	ldr	r0, [pc, #344]	; (d568c <setup+0x324>)
      state = ERROR_STATE;                                            // Device will not work without FRAM
   d5532:	f888 6000 	strb.w	r6, [r8]
      Log.info("FRAM Test Error");
   d5536:	f7fe fff4 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d553a:	4d93      	ldr	r5, [pc, #588]	; (d5788 <setup+0x420>)
  checkSystemValues();                                                // Make sure System values are all in valid range
   d553c:	f7ff fc86 	bl	d4e4c <_Z17checkSystemValuesv>
  makeUpParkHourStrings();                                            // Create the strings for the console
   d5540:	f7ff fce6 	bl	d4f10 <_Z21makeUpParkHourStringsv>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d5544:	4a91      	ldr	r2, [pc, #580]	; (d578c <setup+0x424>)
   d5546:	2300      	movs	r3, #0
   d5548:	2100      	movs	r1, #0
   d554a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   d554e:	f002 fddf 	bl	d8110 <system_subscribe_event>
   d5552:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();                                        // The carrier board has D8 connected to FOUT for wake interrupts
   d5554:	2101      	movs	r1, #1
   d5556:	4628      	mov	r0, r5
   d5558:	816b      	strh	r3, [r5, #10]
   d555a:	f001 fcbd 	bl	d6ed8 <_ZN6AB18055setupEb>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   d555e:	2301      	movs	r3, #1
   d5560:	461a      	mov	r2, r3
   d5562:	2110      	movs	r1, #16
   d5564:	4628      	mov	r0, r5
   d5566:	f001 fa22 	bl	d69ae <_ZN6AB180510isBitClearEhhb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                        // Enable watchdog
   d556a:	217c      	movs	r1, #124	; 0x7c
  sysStatus.clockSet = ab1805.isRTCSet();                             // Note whether the RTC is set 
   d556c:	70a0      	strb	r0, [r4, #2]
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                        // Enable watchdog
   d556e:	4628      	mov	r0, r5
   d5570:	f001 f99a 	bl	d68a8 <_ZN6AB18056setWDTEi>
  Time.setDSTOffset(sysStatus.dstOffset);                             // Set the value from FRAM if in limits
   d5574:	ed94 0a06 	vldr	s0, [r4, #24]
   d5578:	f005 fb74 	bl	dac64 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                       // Perform the DST calculation here
   d557c:	f000 ffcc 	bl	d6518 <_Z8isDSTusav>
   d5580:	2800      	cmp	r0, #0
   d5582:	f000 814f 	beq.w	d5824 <setup+0x4bc>
   d5586:	f005 fb8b 	bl	daca0 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                      // Set the Time Zone for our device
   d558a:	ed94 0a05 	vldr	s0, [r4, #20]
   d558e:	f005 fb49 	bl	dac24 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
   d5592:	f005 fcf5 	bl	daf80 <_ZN9TimeClass5localEv>
   d5596:	4605      	mov	r5, r0
   d5598:	f005 fcad 	bl	daef6 <_ZN9TimeClass3nowEv>
   d559c:	1a28      	subs	r0, r5, r0
   d559e:	f006 f92f 	bl	db800 <__aeabi_i2d>
   d55a2:	a337      	add	r3, pc, #220	; (adr r3, d5680 <setup+0x318>)
   d55a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55a8:	f006 fabe 	bl	dbb28 <__aeabi_ddiv>
   d55ac:	4a78      	ldr	r2, [pc, #480]	; (d5790 <setup+0x428>)
   d55ae:	e9cd 0100 	strd	r0, r1, [sp]
   d55b2:	210a      	movs	r1, #10
   d55b4:	484e      	ldr	r0, [pc, #312]	; (d56f0 <setup+0x388>)
   d55b6:	f002 fefd 	bl	d83b4 <snprintf>
  accel.begin(SCALE_2G, ODR_100); // Set up accel with +/-2g range, and 100Hz ODR
   d55ba:	2203      	movs	r2, #3
   d55bc:	2102      	movs	r1, #2
   d55be:	4875      	ldr	r0, [pc, #468]	; (d5794 <setup+0x42c>)
   d55c0:	f002 f802 	bl	d75c8 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>
  accel.setupTapIntsPulse(sysStatus.sensitivity);                          // Initialize the accelerometer
   d55c4:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
   d55c8:	4872      	ldr	r0, [pc, #456]	; (d5794 <setup+0x42c>)
   d55ca:	f001 ffa1 	bl	d7510 <_ZN8MMA8452Q17setupTapIntsPulseEh>
  countSignalTimer.changePeriod(sysStatus.debounceSec*1000);           // This keeps the device awake during debounce
   d55ce:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d55d2:	4871      	ldr	r0, [pc, #452]	; (d5798 <setup+0x430>)
   d55d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d55d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d55dc:	4359      	muls	r1, r3
   d55de:	f7fe ff85 	bl	d44ec <_ZN5Timer12changePeriodEjj>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d55e2:	79a3      	ldrb	r3, [r4, #6]
   d55e4:	2210      	movs	r2, #16
   d55e6:	2b00      	cmp	r3, #0
   d55e8:	f000 811f 	beq.w	d582a <setup+0x4c2>
   d55ec:	496b      	ldr	r1, [pc, #428]	; (d579c <setup+0x434>)
   d55ee:	4838      	ldr	r0, [pc, #224]	; (d56d0 <setup+0x368>)
   d55f0:	f006 fd45 	bl	dc07e <strncpy>
        int reason = RESET_REASON_NONE;
   d55f4:	2200      	movs	r2, #0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55f6:	4611      	mov	r1, r2
   d55f8:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d55fa:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d55fc:	f002 fb8e 	bl	d7d1c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5600:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET) {
   d5602:	2b14      	cmp	r3, #20
   d5604:	f04f 0200 	mov.w	r2, #0
   d5608:	f040 8111 	bne.w	d582e <setup+0x4c6>
    Log.info("Restarted due to a pin reset");
   d560c:	4964      	ldr	r1, [pc, #400]	; (d57a0 <setup+0x438>)
    Log.info("Restarted due to a user reset");
   d560e:	481f      	ldr	r0, [pc, #124]	; (d568c <setup+0x324>)
   d5610:	f7fe ff87 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.resetCount++;
   d5614:	6923      	ldr	r3, [r4, #16]
   d5616:	3301      	adds	r3, #1
   d5618:	6123      	str	r3, [r4, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
   d561a:	4b62      	ldr	r3, [pc, #392]	; (d57a4 <setup+0x43c>)
   d561c:	2201      	movs	r2, #1
   d561e:	701a      	strb	r2, [r3, #0]
  if (current.hourlyCount) lastReportedTime = current.lastCountTime;
   d5620:	683b      	ldr	r3, [r7, #0]
   d5622:	4d61      	ldr	r5, [pc, #388]	; (d57a8 <setup+0x440>)
   d5624:	2b00      	cmp	r3, #0
   d5626:	f000 810d 	beq.w	d5844 <setup+0x4dc>
   d562a:	68fb      	ldr	r3, [r7, #12]
   d562c:	602b      	str	r3, [r5, #0]
  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
   d562e:	f7ff fb87 	bl	d4d40 <_Z14setPowerConfigv>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                  // Make sure the device wakes up and connects
   d5632:	2004      	movs	r0, #4
   d5634:	f005 fee4 	bl	db400 <digitalRead>
   d5638:	b908      	cbnz	r0, d563e <setup+0x2d6>
   d563a:	f7ff fe4b 	bl	d52d4 <_Z18loadSystemDefaultsv>
  if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   d563e:	f005 fc83 	bl	daf48 <_ZN9TimeClass3dayEv>
   d5642:	2100      	movs	r1, #0
   d5644:	4605      	mov	r5, r0
   d5646:	68f8      	ldr	r0, [r7, #12]
   d5648:	f005 fad0 	bl	dabec <_ZN9TimeClass3dayEx>
   d564c:	4285      	cmp	r5, r0
   d564e:	d001      	beq.n	d5654 <setup+0x2ec>
    resetEverything();                                                 // Zero the counts for the new day
   d5650:	f7ff fcf0 	bl	d5034 <_Z15resetEverythingv>
  if ((Time.hour() >= sysStatus.openTime) && (Time.hour() < sysStatus.closeTime)) { // Park is open let's get ready for the day                                                            
   d5654:	f005 fc60 	bl	daf18 <_ZN9TimeClass4hourEv>
   d5658:	7f23      	ldrb	r3, [r4, #28]
   d565a:	4298      	cmp	r0, r3
   d565c:	f2c0 80ba 	blt.w	d57d4 <setup+0x46c>
   d5660:	f005 fc5a 	bl	daf18 <_ZN9TimeClass4hourEv>
   d5664:	7f63      	ldrb	r3, [r4, #29]
   d5666:	4298      	cmp	r0, r3
   d5668:	f280 80b4 	bge.w	d57d4 <setup+0x46c>
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
   d566c:	2300      	movs	r3, #0
   d566e:	9300      	str	r3, [sp, #0]
   d5670:	494e      	ldr	r1, [pc, #312]	; (d57ac <setup+0x444>)
   d5672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5676:	2201      	movs	r2, #1
   d5678:	2002      	movs	r0, #2
   d567a:	e09b      	b.n	d57b4 <setup+0x44c>
   d567c:	f3af 8000 	nop.w
   d5680:	00000000 	.word	0x00000000
   d5684:	40ac2000 	.word	0x40ac2000
   d5688:	000dc5f6 	.word	0x000dc5f6
   d568c:	2003e53c 	.word	0x2003e53c
   d5690:	2003e350 	.word	0x2003e350
   d5694:	2003e41c 	.word	0x2003e41c
   d5698:	000d4599 	.word	0x000d4599
   d569c:	000dc605 	.word	0x000dc605
   d56a0:	2003e358 	.word	0x2003e358
   d56a4:	000dc67d 	.word	0x000dc67d
   d56a8:	2003e288 	.word	0x2003e288
   d56ac:	000dc611 	.word	0x000dc611
   d56b0:	2003e42c 	.word	0x2003e42c
   d56b4:	000dc618 	.word	0x000dc618
   d56b8:	2003e360 	.word	0x2003e360
   d56bc:	000dc623 	.word	0x000dc623
   d56c0:	2003e170 	.word	0x2003e170
   d56c4:	000dc62f 	.word	0x000dc62f
   d56c8:	2003e424 	.word	0x2003e424
   d56cc:	000dc637 	.word	0x000dc637
   d56d0:	2003e3c0 	.word	0x2003e3c0
   d56d4:	000dc642 	.word	0x000dc642
   d56d8:	2003e17e 	.word	0x2003e17e
   d56dc:	000dc6ea 	.word	0x000dc6ea
   d56e0:	2003e164 	.word	0x2003e164
   d56e4:	000dc64f 	.word	0x000dc64f
   d56e8:	2003e364 	.word	0x2003e364
   d56ec:	000dc659 	.word	0x000dc659
   d56f0:	2003e375 	.word	0x2003e375
   d56f4:	000dc660 	.word	0x000dc660
   d56f8:	000d4301 	.word	0x000d4301
   d56fc:	000d4105 	.word	0x000d4105
   d5700:	000dc66b 	.word	0x000dc66b
   d5704:	2003e18c 	.word	0x2003e18c
   d5708:	000dc701 	.word	0x000dc701
   d570c:	2003e176 	.word	0x2003e176
   d5710:	000dc711 	.word	0x000dc711
   d5714:	000d475d 	.word	0x000d475d
   d5718:	000dc67a 	.word	0x000dc67a
   d571c:	000d4289 	.word	0x000d4289
   d5720:	000dc688 	.word	0x000dc688
   d5724:	000d4639 	.word	0x000d4639
   d5728:	000dc694 	.word	0x000dc694
   d572c:	000d41d5 	.word	0x000d41d5
   d5730:	000dc69e 	.word	0x000dc69e
   d5734:	000d48fd 	.word	0x000d48fd
   d5738:	000dc6a6 	.word	0x000dc6a6
   d573c:	000d4db5 	.word	0x000d4db5
   d5740:	000dc6b3 	.word	0x000dc6b3
   d5744:	000d4681 	.word	0x000d4681
   d5748:	000dc6be 	.word	0x000dc6be
   d574c:	000d63f1 	.word	0x000d63f1
   d5750:	000dc6cb 	.word	0x000dc6cb
   d5754:	000d6559 	.word	0x000d6559
   d5758:	000dc6d8 	.word	0x000dc6d8
   d575c:	000d4f8d 	.word	0x000d4f8d
   d5760:	000dc6e6 	.word	0x000dc6e6
   d5764:	000d4fc5 	.word	0x000d4fc5
   d5768:	000dc6f3 	.word	0x000dc6f3
   d576c:	000d47d5 	.word	0x000d47d5
   d5770:	000dc6fd 	.word	0x000dc6fd
   d5774:	000d4865 	.word	0x000d4865
   d5778:	000dc70d 	.word	0x000dc70d
   d577c:	2003e380 	.word	0x2003e380
   d5780:	000dc914 	.word	0x000dc914
   d5784:	000dc71a 	.word	0x000dc71a
   d5788:	2003e2e4 	.word	0x2003e2e4
   d578c:	000d40d5 	.word	0x000d40d5
   d5790:	000dc73e 	.word	0x000dc73e
   d5794:	2003e304 	.word	0x2003e304
   d5798:	2003e334 	.word	0x2003e334
   d579c:	000dc43c 	.word	0x000dc43c
   d57a0:	000dc748 	.word	0x000dc748
   d57a4:	2003e44c 	.word	0x2003e44c
   d57a8:	2003e398 	.word	0x2003e398
   d57ac:	000d4155 	.word	0x000d4155
   d57b0:	2003e411 	.word	0x2003e411
   d57b4:	f003 fbd2 	bl	d8f5c <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) {         // If the system thinks we are connected, let's make sure that we are
   d57b8:	78e3      	ldrb	r3, [r4, #3]
   d57ba:	b133      	cbz	r3, d57ca <setup+0x462>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d57bc:	f002 fd2a 	bl	d8214 <spark_cloud_flag_connected>
   d57c0:	b918      	cbnz	r0, d57ca <setup+0x462>
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d57c2:	4b22      	ldr	r3, [pc, #136]	; (d584c <setup+0x4e4>)
      sysStatus.connectedStatus = false;                              // We will fix this.
   d57c4:	70e0      	strb	r0, [r4, #3]
      particleConnectionNeeded = true;                                // This may happen if there was an unexpected reset during park open hours
   d57c6:	2201      	movs	r2, #1
   d57c8:	701a      	strb	r2, [r3, #0]
    takeMeasurements();                                               // Populates values so you can read them before the hour
   d57ca:	f7ff fd0b 	bl	d51e4 <_Z16takeMeasurementsv>
    stayAwake = stayAwakeLong;                                        // Keeps Boron awake after reboot - helps with recovery
   d57ce:	4b20      	ldr	r3, [pc, #128]	; (d5850 <setup+0x4e8>)
   d57d0:	4a20      	ldr	r2, [pc, #128]	; (d5854 <setup+0x4ec>)
   d57d2:	601a      	str	r2, [r3, #0]
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
   d57d4:	f898 3000 	ldrb.w	r3, [r8]
   d57d8:	b913      	cbnz	r3, d57e0 <setup+0x478>
   d57da:	2302      	movs	r3, #2
   d57dc:	f888 3000 	strb.w	r3, [r8]
  Log.info("Startup Complete");
   d57e0:	491d      	ldr	r1, [pc, #116]	; (d5858 <setup+0x4f0>)
   d57e2:	481e      	ldr	r0, [pc, #120]	; (d585c <setup+0x4f4>)
   d57e4:	f7fe fe9d 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
  digitalWrite(blueLED,LOW);                                          // Signal the end of startup
   d57e8:	2100      	movs	r1, #0
   d57ea:	2007      	movs	r0, #7
   d57ec:	f005 fdef 	bl	db3ce <digitalWrite>
  String deviceID = System.deviceID();              // Multiple devices share the same hook - keeps things straight
   d57f0:	a806      	add	r0, sp, #24
   d57f2:	f004 fffb 	bl	da7ec <_ZN6StringD1Ev>
}
   d57f6:	b02a      	add	sp, #168	; 0xa8
   d57f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else loadSystemDefaults();                                        // Out of the box, we need the device to be awake and connected
   d57fc:	f7ff fd6a 	bl	d52d4 <_Z18loadSystemDefaultsv>
   d5800:	e69b      	b.n	d553a <setup+0x1d2>
    Log.info("loading FRAM values");
   d5802:	4917      	ldr	r1, [pc, #92]	; (d5860 <setup+0x4f8>)
   d5804:	4815      	ldr	r0, [pc, #84]	; (d585c <setup+0x4f4>)
   d5806:	f7fe fe8c 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
   d580a:	4622      	mov	r2, r4
   d580c:	4631      	mov	r1, r6
   d580e:	2330      	movs	r3, #48	; 0x30
   d5810:	4814      	ldr	r0, [pc, #80]	; (d5864 <setup+0x4fc>)
   d5812:	f001 fcf1 	bl	d71f8 <_ZN6MB85RC8readDataEjPhj>
   d5816:	2324      	movs	r3, #36	; 0x24
   d5818:	463a      	mov	r2, r7
   d581a:	2150      	movs	r1, #80	; 0x50
   d581c:	4811      	ldr	r0, [pc, #68]	; (d5864 <setup+0x4fc>)
   d581e:	f001 fceb 	bl	d71f8 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5822:	e68a      	b.n	d553a <setup+0x1d2>
  DSTRULES() ? Time.beginDST() : Time.endDST();                       // Perform the DST calculation here
   d5824:	f005 fa48 	bl	dacb8 <_ZN9TimeClass6endDSTEv>
   d5828:	e6af      	b.n	d558a <setup+0x222>
  (sysStatus.lowPowerMode) ? strncpy(lowPowerModeStr,"Low Power",sizeof(lowPowerModeStr)) : strncpy(lowPowerModeStr,"Not Low Power",sizeof(lowPowerModeStr));
   d582a:	490f      	ldr	r1, [pc, #60]	; (d5868 <setup+0x500>)
   d582c:	e6df      	b.n	d55ee <setup+0x286>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d582e:	4611      	mov	r1, r2
   d5830:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
   d5832:	9203      	str	r2, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5834:	f002 fa72 	bl	d7d1c <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d5838:	9b03      	ldr	r3, [sp, #12]
  else if (System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
   d583a:	2b8c      	cmp	r3, #140	; 0x8c
   d583c:	f47f aef0 	bne.w	d5620 <setup+0x2b8>
    Log.info("Restarted due to a user reset");
   d5840:	490a      	ldr	r1, [pc, #40]	; (d586c <setup+0x504>)
   d5842:	e6e4      	b.n	d560e <setup+0x2a6>
  else lastReportedTime = Time.now();                                  // Initialize it to now so that reporting can begin as soon as the hour changes
   d5844:	f005 fb57 	bl	daef6 <_ZN9TimeClass3nowEv>
   d5848:	6028      	str	r0, [r5, #0]
   d584a:	e6f0      	b.n	d562e <setup+0x2c6>
   d584c:	2003e3d1 	.word	0x2003e3d1
   d5850:	2003e414 	.word	0x2003e414
   d5854:	00015f90 	.word	0x00015f90
   d5858:	000dc783 	.word	0x000dc783
   d585c:	2003e53c 	.word	0x2003e53c
   d5860:	000dc72a 	.word	0x000dc72a
   d5864:	2003e380 	.word	0x2003e380
   d5868:	000dc438 	.word	0x000dc438
   d586c:	000dc765 	.word	0x000dc765

000d5870 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5870:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5874:	4604      	mov	r4, r0
   d5876:	460d      	mov	r5, r1
   d5878:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d587a:	d916      	bls.n	d58aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d587c:	4290      	cmp	r0, r2
   d587e:	d215      	bcs.n	d58ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d5880:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d5884:	1a75      	subs	r5, r6, r1
   d5886:	f1a1 0714 	sub.w	r7, r1, #20
   d588a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d588c:	42b7      	cmp	r7, r6
   d588e:	d01c      	beq.n	d58ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d5890:	b12c      	cbz	r4, d589e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d5892:	4631      	mov	r1, r6
   d5894:	4620      	mov	r0, r4
   d5896:	f005 f825 	bl	da8e4 <_ZN6StringC1EOS_>
   d589a:	7c33      	ldrb	r3, [r6, #16]
   d589c:	7423      	strb	r3, [r4, #16]
   d589e:	4630      	mov	r0, r6
   d58a0:	f004 ffa4 	bl	da7ec <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d58a4:	3e14      	subs	r6, #20
   d58a6:	3c14      	subs	r4, #20
   d58a8:	e7f0      	b.n	d588c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d58aa:	d00e      	beq.n	d58ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d58ac:	42b5      	cmp	r5, r6
   d58ae:	d00c      	beq.n	d58ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d58b0:	b12c      	cbz	r4, d58be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d58b2:	4629      	mov	r1, r5
   d58b4:	4620      	mov	r0, r4
   d58b6:	f005 f815 	bl	da8e4 <_ZN6StringC1EOS_>
   d58ba:	7c2b      	ldrb	r3, [r5, #16]
   d58bc:	7423      	strb	r3, [r4, #16]
   d58be:	4628      	mov	r0, r5
   d58c0:	f004 ff94 	bl	da7ec <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d58c4:	3514      	adds	r5, #20
   d58c6:	3414      	adds	r4, #20
   d58c8:	e7f0      	b.n	d58ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d58ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d58cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d58d0:	2300      	movs	r3, #0
   d58d2:	e9c0 3300 	strd	r3, r3, [r0]
   d58d6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d58d8:	684f      	ldr	r7, [r1, #4]
   d58da:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d58dc:	4604      	mov	r4, r0
   d58de:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d58e0:	dd23      	ble.n	d592a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d58e2:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d58e6:	fb08 f007 	mul.w	r0, r8, r7
   d58ea:	f002 fd43 	bl	d8374 <malloc>
            if (!d) {
   d58ee:	4605      	mov	r5, r0
   d58f0:	b1d8      	cbz	r0, d592a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d58f2:	e9d4 1200 	ldrd	r1, r2, [r4]
   d58f6:	fb08 1202 	mla	r2, r8, r2, r1
   d58fa:	f7ff ffb9 	bl	d5870 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d58fe:	6820      	ldr	r0, [r4, #0]
   d5900:	f002 fd40 	bl	d8384 <free>
        data_ = d;
   d5904:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5906:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5908:	e9d6 7300 	ldrd	r7, r3, [r6]
   d590c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d5910:	45b8      	cmp	r8, r7
   d5912:	d008      	beq.n	d5926 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d5914:	4639      	mov	r1, r7
   d5916:	4628      	mov	r0, r5
   d5918:	f004 fffe 	bl	da918 <_ZN6StringC1ERKS_>
   d591c:	7c3b      	ldrb	r3, [r7, #16]
   d591e:	742b      	strb	r3, [r5, #16]
   d5920:	3714      	adds	r7, #20
   d5922:	3514      	adds	r5, #20
   d5924:	e7f4      	b.n	d5910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5926:	6873      	ldr	r3, [r6, #4]
   d5928:	6063      	str	r3, [r4, #4]
}
   d592a:	4620      	mov	r0, r4
   d592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5930 <_GLOBAL__sub_I___appProductID>:
   d5930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        val_(val) {
   d5934:	4b62      	ldr	r3, [pc, #392]	; (d5ac0 <_GLOBAL__sub_I___appProductID+0x190>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5936:	4d63      	ldr	r5, [pc, #396]	; (d5ac4 <_GLOBAL__sub_I___appProductID+0x194>)
        filter_(level, filters) {
   d5938:	f8df 81e4 	ldr.w	r8, [pc, #484]	; d5b20 <_GLOBAL__sub_I___appProductID+0x1f0>
   d593c:	2701      	movs	r7, #1
   d593e:	701f      	strb	r7, [r3, #0]
   d5940:	4b61      	ldr	r3, [pc, #388]	; (d5ac8 <_GLOBAL__sub_I___appProductID+0x198>)
   d5942:	2208      	movs	r2, #8
   d5944:	b090      	sub	sp, #64	; 0x40
   d5946:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5948:	f005 fcda 	bl	db300 <spark_protocol_instance>
   d594c:	2300      	movs	r3, #0
   d594e:	461a      	mov	r2, r3
   d5950:	210d      	movs	r1, #13
   d5952:	f005 fcdd 	bl	db310 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5956:	f005 fcd3 	bl	db300 <spark_protocol_instance>
   d595a:	2300      	movs	r3, #0
   d595c:	461a      	mov	r2, r3
   d595e:	2109      	movs	r1, #9
   d5960:	f005 fcde 	bl	db320 <spark_protocol_set_product_firmware_version>
struct currentCounts_structure {                    // currently 10 bytes long
   d5964:	4b59      	ldr	r3, [pc, #356]	; (d5acc <_GLOBAL__sub_I___appProductID+0x19c>)
   d5966:	2400      	movs	r4, #0
   d5968:	2264      	movs	r2, #100	; 0x64
   d596a:	839c      	strh	r4, [r3, #28]
   d596c:	621a      	str	r2, [r3, #32]
              error_(SYSTEM_ERROR_NONE) {
   d596e:	4b58      	ldr	r3, [pc, #352]	; (d5ad0 <_GLOBAL__sub_I___appProductID+0x1a0>)
    SleepResult() {}
   d5970:	4a58      	ldr	r2, [pc, #352]	; (d5ad4 <_GLOBAL__sub_I___appProductID+0x1a4>)
              error_(SYSTEM_ERROR_NONE) {
   d5972:	601c      	str	r4, [r3, #0]
   d5974:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d5976:	719c      	strb	r4, [r3, #6]
   d5978:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   d597a:	2002      	movs	r0, #2
   d597c:	f002 fbb8 	bl	d80f0 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d5980:	4621      	mov	r1, r4
   d5982:	4638      	mov	r0, r7
   d5984:	f002 fbcc 	bl	d8120 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5988:	4639      	mov	r1, r7
   d598a:	2004      	movs	r0, #4
   d598c:	f002 f9be 	bl	d7d0c <HAL_Feature_Set>
        : config_(config) {
   d5990:	4b51      	ldr	r3, [pc, #324]	; (d5ad8 <_GLOBAL__sub_I___appProductID+0x1a8>)
   d5992:	461a      	mov	r2, r3
   d5994:	1d19      	adds	r1, r3, #4
   d5996:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d599a:	f8a3 4009 	strh.w	r4, [r3, #9]
   d599e:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d59a0:	4a4e      	ldr	r2, [pc, #312]	; (d5adc <_GLOBAL__sub_I___appProductID+0x1ac>)
              valid_(true) {
   d59a2:	751f      	strb	r7, [r3, #20]
        config_.wakeup_sources = nullptr;
   d59a4:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d59a8:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d59aa:	721c      	strb	r4, [r3, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d59ac:	f005 fd84 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d59b0:	4623      	mov	r3, r4
   d59b2:	4601      	mov	r1, r0
   d59b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d59b8:	4628      	mov	r0, r5
   d59ba:	f001 fbd1 	bl	d7160 <_ZN6MB85RCC1ER7TwoWireji>
   d59be:	4b48      	ldr	r3, [pc, #288]	; (d5ae0 <_GLOBAL__sub_I___appProductID+0x1b0>)
   d59c0:	602b      	str	r3, [r5, #0]
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d59c2:	4d48      	ldr	r5, [pc, #288]	; (d5ae4 <_GLOBAL__sub_I___appProductID+0x1b4>)
   d59c4:	4948      	ldr	r1, [pc, #288]	; (d5ae8 <_GLOBAL__sub_I___appProductID+0x1b8>)
   d59c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d59ca:	4628      	mov	r0, r5
   d59cc:	f001 fff0 	bl	d79b0 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d59d0:	4b46      	ldr	r3, [pc, #280]	; (d5aec <_GLOBAL__sub_I___appProductID+0x1bc>)
   d59d2:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d59d4:	f005 fd70 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d59d8:	2269      	movs	r2, #105	; 0x69
   d59da:	4601      	mov	r1, r0
   d59dc:	4844      	ldr	r0, [pc, #272]	; (d5af0 <_GLOBAL__sub_I___appProductID+0x1c0>)
   d59de:	f000 fe65 	bl	d66ac <_ZN6AB1805C1ER7TwoWireh>
FuelGauge fuel;                                     // Enable the fuel gauge API     
   d59e2:	4621      	mov	r1, r4
   d59e4:	4843      	ldr	r0, [pc, #268]	; (d5af4 <_GLOBAL__sub_I___appProductID+0x1c4>)
   d59e6:	f003 fa01 	bl	d8dec <_ZN9FuelGaugeC1Eb>
MMA8452Q accel;                                     // Default constructor, SA0 pin is HIGH
   d59ea:	211d      	movs	r1, #29
   d59ec:	4842      	ldr	r0, [pc, #264]	; (d5af8 <_GLOBAL__sub_I___appProductID+0x1c8>)
   d59ee:	f001 fceb 	bl	d73c8 <_ZN8MMA8452QC1Eh>
        capacity_(0) {
   d59f2:	e9cd 4403 	strd	r4, r4, [sp, #12]
   d59f6:	9405      	str	r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   d59f8:	f005 fbc0 	bl	db17c <_Z16_fetch_usbserialv>
        stream_(&stream) {
   d59fc:	ae09      	add	r6, sp, #36	; 0x24
   d59fe:	4681      	mov	r9, r0
   d5a00:	a903      	add	r1, sp, #12
   d5a02:	a806      	add	r0, sp, #24
   d5a04:	f7ff ff62 	bl	d58cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5a08:	46c2      	mov	sl, r8
        stream_(&stream) {
   d5a0a:	a906      	add	r1, sp, #24
   d5a0c:	4630      	mov	r0, r6
   d5a0e:	f7ff ff5d 	bl	d58cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5a12:	4b3a      	ldr	r3, [pc, #232]	; (d5afc <_GLOBAL__sub_I___appProductID+0x1cc>)
   d5a14:	f84a 3b04 	str.w	r3, [sl], #4
   d5a18:	ad0c      	add	r5, sp, #48	; 0x30
   d5a1a:	4631      	mov	r1, r6
   d5a1c:	4628      	mov	r0, r5
   d5a1e:	f7ff ff55 	bl	d58cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5a22:	462a      	mov	r2, r5
   d5a24:	211e      	movs	r1, #30
   d5a26:	4650      	mov	r0, sl
   d5a28:	f004 f9cf 	bl	d9dca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5a2c:	4628      	mov	r0, r5
   d5a2e:	f7ff fc31 	bl	d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5a32:	4630      	mov	r0, r6
   d5a34:	f7ff fc2e 	bl	d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a38:	4b31      	ldr	r3, [pc, #196]	; (d5b00 <_GLOBAL__sub_I___appProductID+0x1d0>)
   d5a3a:	f8c8 3000 	str.w	r3, [r8]
   d5a3e:	a806      	add	r0, sp, #24
   d5a40:	f8c8 9020 	str.w	r9, [r8, #32]
   d5a44:	f7ff fc26 	bl	d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a48:	4b2e      	ldr	r3, [pc, #184]	; (d5b04 <_GLOBAL__sub_I___appProductID+0x1d4>)
   d5a4a:	f8c8 3000 	str.w	r3, [r8]
        Serial.begin();
   d5a4e:	f005 fb95 	bl	db17c <_Z16_fetch_usbserialv>
   d5a52:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5a56:	f005 fb81 	bl	db15c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5a5a:	f003 fe5b 	bl	d9714 <_ZN5spark10LogManager8instanceEv>
   d5a5e:	4641      	mov	r1, r8
   d5a60:	f004 f945 	bl	d9cee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   d5a64:	a803      	add	r0, sp, #12
   d5a66:	f7ff fc15 	bl	d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5a6a:	4b27      	ldr	r3, [pc, #156]	; (d5b08 <_GLOBAL__sub_I___appProductID+0x1d8>)
   d5a6c:	930c      	str	r3, [sp, #48]	; 0x30
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a6e:	e895 0003 	ldmia.w	r5, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5a72:	4b26      	ldr	r3, [pc, #152]	; (d5b0c <_GLOBAL__sub_I___appProductID+0x1dc>)
   d5a74:	4a26      	ldr	r2, [pc, #152]	; (d5b10 <_GLOBAL__sub_I___appProductID+0x1e0>)
   d5a76:	601a      	str	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a78:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a7c:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5a80:	e892 0003 	ldmia.w	r2, {r0, r1}
   d5a84:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5a88:	e896 0003 	ldmia.w	r6, {r0, r1}
   d5a8c:	e882 0003 	stmia.w	r2, {r0, r1}
   d5a90:	4a20      	ldr	r2, [pc, #128]	; (d5b14 <_GLOBAL__sub_I___appProductID+0x1e4>)
   d5a92:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a94:	699a      	ldr	r2, [r3, #24]
   d5a96:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5a98:	4a1f      	ldr	r2, [pc, #124]	; (d5b18 <_GLOBAL__sub_I___appProductID+0x1e8>)
   d5a9a:	619a      	str	r2, [r3, #24]
   d5a9c:	711c      	strb	r4, [r3, #4]
   d5a9e:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5aa0:	4a1e      	ldr	r2, [pc, #120]	; (d5b1c <_GLOBAL__sub_I___appProductID+0x1ec>)
      __a = _GLIBCXX_MOVE(__b);
   d5aa2:	940e      	str	r4, [sp, #56]	; 0x38
   d5aa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5aa8:	f103 0008 	add.w	r0, r3, #8
   d5aac:	e9cd 7400 	strd	r7, r4, [sp]
   d5ab0:	f002 f8bc 	bl	d7c2c <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5ab4:	4628      	mov	r0, r5
   d5ab6:	f7fe fc69 	bl	d438c <_ZNSt14_Function_baseD1Ev>
   d5aba:	b010      	add	sp, #64	; 0x40
   d5abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5ac0:	2003e2d4 	.word	0x2003e2d4
   d5ac4:	2003e380 	.word	0x2003e380
   d5ac8:	2003e2d5 	.word	0x2003e2d5
   d5acc:	2003e350 	.word	0x2003e350
   d5ad0:	2003e2c8 	.word	0x2003e2c8
   d5ad4:	ffff0000 	.word	0xffff0000
   d5ad8:	2003e31c 	.word	0x2003e31c
   d5adc:	00030010 	.word	0x00030010
   d5ae0:	000dc8b0 	.word	0x000dc8b0
   d5ae4:	2003e3d4 	.word	0x2003e3d4
   d5ae8:	2003f400 	.word	0x2003f400
   d5aec:	000dc8cc 	.word	0x000dc8cc
   d5af0:	2003e2e4 	.word	0x2003e2e4
   d5af4:	2003e390 	.word	0x2003e390
   d5af8:	2003e304 	.word	0x2003e304
   d5afc:	000dc880 	.word	0x000dc880
   d5b00:	000dce90 	.word	0x000dce90
   d5b04:	000dc898 	.word	0x000dc898
   d5b08:	000d40fb 	.word	0x000d40fb
   d5b0c:	2003e334 	.word	0x2003e334
   d5b10:	000dc86c 	.word	0x000dc86c
   d5b14:	000d40e5 	.word	0x000d40e5
   d5b18:	000d40e1 	.word	0x000d40e1
   d5b1c:	000d424d 	.word	0x000d424d
   d5b20:	2003e39c 	.word	0x2003e39c

000d5b24 <_Z14fullModemResetv>:
void fullModemReset() {  // 
   d5b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b28:	b085      	sub	sp, #20
        clearSession_(clearSession) {
   d5b2a:	f04f 0a00 	mov.w	sl, #0
	Particle.disconnect(); 	                                          // Disconnect from the cloud    
   d5b2e:	a801      	add	r0, sp, #4
   d5b30:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d5b34:	f8ad a00c 	strh.w	sl, [sp, #12]
   d5b38:	f002 fe6f 	bl	d881a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d5b3c:	f7fe fccc 	bl	d44d8 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d5b40:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d5b44:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d5b46:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5b4a:	f7fe fcc5 	bl	d44d8 <_ZN11SystemClass6millisEv>
   d5b4e:	ebb0 060b 	subs.w	r6, r0, fp
   d5b52:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5b56:	45b9      	cmp	r9, r7
   d5b58:	bf08      	it	eq
   d5b5a:	45b0      	cmpeq	r8, r6
   d5b5c:	d305      	bcc.n	d5b6a <_Z14fullModemResetv+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5b5e:	f002 fb59 	bl	d8214 <spark_cloud_flag_connected>
   d5b62:	b910      	cbnz	r0, d5b6a <_Z14fullModemResetv+0x46>
            spark_process();
   d5b64:	f002 fb46 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d5b68:	e7ef      	b.n	d5b4a <_Z14fullModemResetv+0x26>
   d5b6a:	f002 fb53 	bl	d8214 <spark_cloud_flag_connected>
  Cellular.off();                                                   // Turn off the Cellular modem
   d5b6e:	4821      	ldr	r0, [pc, #132]	; (d5bf4 <_Z14fullModemResetv+0xd0>)
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5b70:	f8df a080 	ldr.w	sl, [pc, #128]	; d5bf4 <_Z14fullModemResetv+0xd0>
  Cellular.off();                                                   // Turn off the Cellular modem
   d5b74:	f7fe fc04 	bl	d4380 <_ZN5spark13CellularClass3offEv>
        const system_tick_t start = millis();
   d5b78:	f7fe fcae 	bl	d44d8 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5b7c:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
   d5b80:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d5b82:	f247 562f 	movw	r6, #29999	; 0x752f
   d5b86:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5b88:	f7fe fca6 	bl	d44d8 <_ZN11SystemClass6millisEv>
   d5b8c:	ebb0 0408 	subs.w	r4, r0, r8
   d5b90:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d5b94:	42af      	cmp	r7, r5
   d5b96:	bf08      	it	eq
   d5b98:	42a6      	cmpeq	r6, r4
   d5b9a:	d306      	bcc.n	d5baa <_Z14fullModemResetv+0x86>
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5b9c:	4650      	mov	r0, sl
   d5b9e:	f004 fc53 	bl	da448 <_ZN5spark12NetworkClass5isOffEv>
   d5ba2:	b910      	cbnz	r0, d5baa <_Z14fullModemResetv+0x86>
            spark_process();
   d5ba4:	f002 fb26 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d5ba8:	e7ee      	b.n	d5b88 <_Z14fullModemResetv+0x64>
   d5baa:	4812      	ldr	r0, [pc, #72]	; (d5bf4 <_Z14fullModemResetv+0xd0>)
   d5bac:	f004 fc4c 	bl	da448 <_ZN5spark12NetworkClass5isOffEv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d5bb0:	4811      	ldr	r0, [pc, #68]	; (d5bf8 <_Z14fullModemResetv+0xd4>)
   d5bb2:	2100      	movs	r1, #0
   d5bb4:	f000 fe78 	bl	d68a8 <_ZN6AB18056setWDTEi>
        if (valid_) {
   d5bb8:	4b10      	ldr	r3, [pc, #64]	; (d5bfc <_Z14fullModemResetv+0xd8>)
   d5bba:	7d1a      	ldrb	r2, [r3, #20]
   d5bbc:	b10a      	cbz	r2, d5bc2 <_Z14fullModemResetv+0x9e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5bbe:	2202      	movs	r2, #2
   d5bc0:	721a      	strb	r2, [r3, #8]
    .gpio(userSwitch,CHANGE)
   d5bc2:	2200      	movs	r2, #0
   d5bc4:	2104      	movs	r1, #4
   d5bc6:	480d      	ldr	r0, [pc, #52]	; (d5bfc <_Z14fullModemResetv+0xd8>)
   d5bc8:	f7fe fc28 	bl	d441c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
    .duration(10 * 1000);
   d5bcc:	f242 7110 	movw	r1, #10000	; 0x2710
   d5bd0:	f7fe fc58 	bl	d4484 <_ZN8particle24SystemSleepConfiguration8durationEm>
  System.sleep(config);                                             // Put the device to sleep device reboots from here   
   d5bd4:	4909      	ldr	r1, [pc, #36]	; (d5bfc <_Z14fullModemResetv+0xd8>)
   d5bd6:	a801      	add	r0, sp, #4
   d5bd8:	f004 ff46 	bl	daa68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
   d5bdc:	a801      	add	r0, sp, #4
   d5bde:	f7fe fb75 	bl	d42cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d5be2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5be6:	4804      	ldr	r0, [pc, #16]	; (d5bf8 <_Z14fullModemResetv+0xd4>)
   d5be8:	f000 fe5e 	bl	d68a8 <_ZN6AB18056setWDTEi>
}
   d5bec:	b005      	add	sp, #20
   d5bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bf2:	bf00      	nop
   d5bf4:	2003e468 	.word	0x2003e468
   d5bf8:	2003e2e4 	.word	0x2003e2e4
   d5bfc:	2003e31c 	.word	0x2003e31c

000d5c00 <_Z22disconnectFromParticlev>:
{
   d5c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c04:	b085      	sub	sp, #20
        clearSession_(clearSession) {
   d5c06:	f04f 0a00 	mov.w	sl, #0
  Particle.disconnect();
   d5c0a:	a801      	add	r0, sp, #4
   d5c0c:	e9cd aa01 	strd	sl, sl, [sp, #4]
   d5c10:	f8ad a00c 	strh.w	sl, [sp, #12]
   d5c14:	f002 fe01 	bl	d881a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   d5c18:	f7fe fc5e 	bl	d44d8 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
   d5c1c:	f643 2897 	movw	r8, #14999	; 0x3a97
        const system_tick_t start = millis();
   d5c20:	4683      	mov	fp, r0
        while (_while() && !_condition()) {
   d5c22:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5c26:	f7fe fc57 	bl	d44d8 <_ZN11SystemClass6millisEv>
   d5c2a:	ebb0 060b 	subs.w	r6, r0, fp
   d5c2e:	eb61 070a 	sbc.w	r7, r1, sl
        while (_while() && !_condition()) {
   d5c32:	45b9      	cmp	r9, r7
   d5c34:	bf08      	it	eq
   d5c36:	45b0      	cmpeq	r8, r6
   d5c38:	d305      	bcc.n	d5c46 <_Z22disconnectFromParticlev+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5c3a:	f002 faeb 	bl	d8214 <spark_cloud_flag_connected>
   d5c3e:	b110      	cbz	r0, d5c46 <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d5c40:	f002 fad8 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d5c44:	e7ef      	b.n	d5c26 <_Z22disconnectFromParticlev+0x26>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c46:	4e18      	ldr	r6, [pc, #96]	; (d5ca8 <_Z22disconnectFromParticlev+0xa8>)
   d5c48:	f002 fae4 	bl	d8214 <spark_cloud_flag_connected>
   d5c4c:	2200      	movs	r2, #0
   d5c4e:	2102      	movs	r1, #2
   d5c50:	6870      	ldr	r0, [r6, #4]
   d5c52:	f002 fb3f 	bl	d82d4 <network_disconnect>
  Cellular.off();                                                 // Turn off the cellular modem
   d5c56:	4630      	mov	r0, r6
   d5c58:	f7fe fb92 	bl	d4380 <_ZN5spark13CellularClass3offEv>
        const system_tick_t start = millis();
   d5c5c:	f7fe fc3c 	bl	d44d8 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5c60:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
   d5c64:	4607      	mov	r7, r0
        while (_while() && !_condition()) {
   d5c66:	f247 582f 	movw	r8, #29999	; 0x752f
   d5c6a:	f04f 0900 	mov.w	r9, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5c6e:	f7fe fc33 	bl	d44d8 <_ZN11SystemClass6millisEv>
   d5c72:	1bc4      	subs	r4, r0, r7
   d5c74:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d5c78:	45a9      	cmp	r9, r5
   d5c7a:	bf08      	it	eq
   d5c7c:	45a0      	cmpeq	r8, r4
   d5c7e:	d306      	bcc.n	d5c8e <_Z22disconnectFromParticlev+0x8e>
  waitFor(Cellular.isOff, 30000);                                 // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   d5c80:	4630      	mov	r0, r6
   d5c82:	f004 fbe1 	bl	da448 <_ZN5spark12NetworkClass5isOffEv>
   d5c86:	b910      	cbnz	r0, d5c8e <_Z22disconnectFromParticlev+0x8e>
            spark_process();
   d5c88:	f002 fab4 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d5c8c:	e7ef      	b.n	d5c6e <_Z22disconnectFromParticlev+0x6e>
   d5c8e:	4806      	ldr	r0, [pc, #24]	; (d5ca8 <_Z22disconnectFromParticlev+0xa8>)
   d5c90:	f004 fbda 	bl	da448 <_ZN5spark12NetworkClass5isOffEv>
  sysStatus.connectedStatus = false;
   d5c94:	4b05      	ldr	r3, [pc, #20]	; (d5cac <_Z22disconnectFromParticlev+0xac>)
   d5c96:	2200      	movs	r2, #0
   d5c98:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
   d5c9a:	4b05      	ldr	r3, [pc, #20]	; (d5cb0 <_Z22disconnectFromParticlev+0xb0>)
   d5c9c:	2001      	movs	r0, #1
   d5c9e:	7018      	strb	r0, [r3, #0]
}
   d5ca0:	b005      	add	sp, #20
   d5ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ca6:	bf00      	nop
   d5ca8:	2003e468 	.word	0x2003e468
   d5cac:	2003e41c 	.word	0x2003e41c
   d5cb0:	2003e44c 	.word	0x2003e44c

000d5cb4 <loop>:
{
   d5cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
   d5cb8:	4c7f      	ldr	r4, [pc, #508]	; (d5eb8 <loop+0x204>)
   d5cba:	f8df 8254 	ldr.w	r8, [pc, #596]	; d5f10 <loop+0x25c>
   d5cbe:	7823      	ldrb	r3, [r4, #0]
   d5cc0:	4f7e      	ldr	r7, [pc, #504]	; (d5ebc <loop+0x208>)
   d5cc2:	4e7f      	ldr	r6, [pc, #508]	; (d5ec0 <loop+0x20c>)
   d5cc4:	3b01      	subs	r3, #1
{
   d5cc6:	b097      	sub	sp, #92	; 0x5c
   d5cc8:	2b06      	cmp	r3, #6
   d5cca:	f200 80a5 	bhi.w	d5e18 <loop+0x164>
   d5cce:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5cd2:	02d9      	.short	0x02d9
   d5cd4:	003a0007 	.word	0x003a0007
   d5cd8:	01b80121 	.word	0x01b80121
   d5cdc:	02a9023a 	.word	0x02a9023a
    if (state != oldState) publishStateTransition();
   d5ce0:	4b78      	ldr	r3, [pc, #480]	; (d5ec4 <loop+0x210>)
   d5ce2:	781b      	ldrb	r3, [r3, #0]
   d5ce4:	2b02      	cmp	r3, #2
   d5ce6:	d001      	beq.n	d5cec <loop+0x38>
   d5ce8:	f7ff f9c2 	bl	d5070 <_Z22publishStateTransitionv>
    if (sysStatus.lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = NAPPING_STATE;         // When in low power mode, we can nap between taps
   d5cec:	4d76      	ldr	r5, [pc, #472]	; (d5ec8 <loop+0x214>)
   d5cee:	79ab      	ldrb	r3, [r5, #6]
   d5cf0:	b153      	cbz	r3, d5d08 <loop+0x54>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5cf2:	f002 f833 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
   d5cf6:	4b75      	ldr	r3, [pc, #468]	; (d5ecc <loop+0x218>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	1ac0      	subs	r0, r0, r3
   d5cfc:	4b74      	ldr	r3, [pc, #464]	; (d5ed0 <loop+0x21c>)
   d5cfe:	681b      	ldr	r3, [r3, #0]
   d5d00:	4298      	cmp	r0, r3
   d5d02:	bf84      	itt	hi
   d5d04:	2304      	movhi	r3, #4
   d5d06:	7023      	strbhi	r3, [r4, #0]
    if (Time.hour() != Time.hour(lastReportedTime)) state = REPORTING_STATE;                                  // We want to report on the hour but not after bedtime
   d5d08:	f005 f906 	bl	daf18 <_ZN9TimeClass4hourEv>
   d5d0c:	4b71      	ldr	r3, [pc, #452]	; (d5ed4 <loop+0x220>)
   d5d0e:	4681      	mov	r9, r0
   d5d10:	2100      	movs	r1, #0
   d5d12:	6818      	ldr	r0, [r3, #0]
   d5d14:	f004 ff62 	bl	dabdc <_ZN9TimeClass4hourEx>
   d5d18:	4581      	cmp	r9, r0
   d5d1a:	bf1c      	itt	ne
   d5d1c:	2306      	movne	r3, #6
   d5d1e:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5d20:	f005 f8fa 	bl	daf18 <_ZN9TimeClass4hourEv>
   d5d24:	7f6b      	ldrb	r3, [r5, #29]
   d5d26:	4298      	cmp	r0, r3
   d5d28:	db07      	blt.n	d5d3a <loop+0x86>
   d5d2a:	2303      	movs	r3, #3
   d5d2c:	7023      	strb	r3, [r4, #0]
    if (particleConnectionNeeded) state = CONNECTING_STATE;                                                   // Someone raised the connection neeeded flag - will return to IDLE once attempt is completed
   d5d2e:	4b6a      	ldr	r3, [pc, #424]	; (d5ed8 <loop+0x224>)
   d5d30:	781b      	ldrb	r3, [r3, #0]
   d5d32:	2b00      	cmp	r3, #0
   d5d34:	d070      	beq.n	d5e18 <loop+0x164>
      state = CONNECTING_STATE;                                       // Will send us to connecting state - and it will send us back here                                             
   d5d36:	2305      	movs	r3, #5
   d5d38:	e012      	b.n	d5d60 <loop+0xac>
    if ((Time.hour() >= sysStatus.closeTime) || (Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
   d5d3a:	f005 f8ed 	bl	daf18 <_ZN9TimeClass4hourEv>
   d5d3e:	7f2b      	ldrb	r3, [r5, #28]
   d5d40:	4298      	cmp	r0, r3
   d5d42:	dbf2      	blt.n	d5d2a <loop+0x76>
   d5d44:	e7f3      	b.n	d5d2e <loop+0x7a>
    if (state != oldState) publishStateTransition();
   d5d46:	4b5f      	ldr	r3, [pc, #380]	; (d5ec4 <loop+0x210>)
   d5d48:	781b      	ldrb	r3, [r3, #0]
   d5d4a:	2b03      	cmp	r3, #3
   d5d4c:	d001      	beq.n	d5d52 <loop+0x9e>
   d5d4e:	f7ff f98f 	bl	d5070 <_Z22publishStateTransitionv>
    detachInterrupt(intPin);                                          // Done sensing for the day
   d5d52:	2002      	movs	r0, #2
   d5d54:	f003 f92c 	bl	d8fb0 <_Z15detachInterruptt>
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
   d5d58:	4b60      	ldr	r3, [pc, #384]	; (d5edc <loop+0x228>)
   d5d5a:	681b      	ldr	r3, [r3, #0]
   d5d5c:	b113      	cbz	r3, d5d64 <loop+0xb0>
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d5d5e:	2306      	movs	r3, #6
      state = ERROR_STATE;                                            // Response timed out
   d5d60:	7023      	strb	r3, [r4, #0]
   d5d62:	e059      	b.n	d5e18 <loop+0x164>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d5d64:	4b58      	ldr	r3, [pc, #352]	; (d5ec8 <loop+0x214>)
   d5d66:	78da      	ldrb	r2, [r3, #3]
   d5d68:	4699      	mov	r9, r3
   d5d6a:	b10a      	cbz	r2, d5d70 <loop+0xbc>
   d5d6c:	f7ff ff48 	bl	d5c00 <_Z22disconnectFromParticlev>
    bool stopWDT() { return setWDT(0); };
   d5d70:	2100      	movs	r1, #0
   d5d72:	485b      	ldr	r0, [pc, #364]	; (d5ee0 <loop+0x22c>)
   d5d74:	f000 fd98 	bl	d68a8 <_ZN6AB18056setWDTEi>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d5d78:	f005 f8bd 	bl	daef6 <_ZN9TimeClass3nowEv>
   d5d7c:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   d5d80:	fb90 f3f5 	sdiv	r3, r0, r5
   d5d84:	fb03 0515 	mls	r5, r3, r5, r0
        if (valid_) {
   d5d88:	4b56      	ldr	r3, [pc, #344]	; (d5ee4 <loop+0x230>)
   d5d8a:	f5c5 6561 	rsb	r5, r5, #3600	; 0xe10
   d5d8e:	7d1a      	ldrb	r2, [r3, #20]
   d5d90:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
   d5d94:	bfa8      	it	ge
   d5d96:	f44f 6561 	movge.w	r5, #3600	; 0xe10
   d5d9a:	b10a      	cbz	r2, d5da0 <loop+0xec>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5d9c:	2202      	movs	r2, #2
   d5d9e:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5da0:	2200      	movs	r2, #0
   d5da2:	2104      	movs	r1, #4
   d5da4:	484f      	ldr	r0, [pc, #316]	; (d5ee4 <loop+0x230>)
   d5da6:	f7fe fb39 	bl	d441c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(wakeInSeconds * 1000);
   d5daa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5dae:	4369      	muls	r1, r5
   d5db0:	f7fe fb68 	bl	d4484 <_ZN8particle24SystemSleepConfiguration8durationEm>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d5db4:	494b      	ldr	r1, [pc, #300]	; (d5ee4 <loop+0x230>)
   d5db6:	a803      	add	r0, sp, #12
   d5db8:	f004 fe56 	bl	daa68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d5dbc:	4848      	ldr	r0, [pc, #288]	; (d5ee0 <loop+0x22c>)
   d5dbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d5dc2:	f000 fd71 	bl	d68a8 <_ZN6AB18056setWDTEi>
    if (result.wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {   // Awoken by GPIO pin
   d5dc6:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d5dc8:	b14b      	cbz	r3, d5dde <loop+0x12a>
   d5dca:	889a      	ldrh	r2, [r3, #4]
   d5dcc:	2a01      	cmp	r2, #1
   d5dce:	d106      	bne.n	d5dde <loop+0x12a>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d5dd0:	899b      	ldrh	r3, [r3, #12]
      if (result.wakeupPin() == intPin) {                              // Executions starts here after sleep - time or sensor interrupt?
   d5dd2:	2b02      	cmp	r3, #2
   d5dd4:	d15e      	bne.n	d5e94 <loop+0x1e0>
   d5dd6:	f001 ffc1 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
        stayAwakeTimeStamp = millis();
   d5dda:	4b3c      	ldr	r3, [pc, #240]	; (d5ecc <loop+0x218>)
   d5ddc:	6018      	str	r0, [r3, #0]
    if (Time.hour() < sysStatus.closeTime && Time.hour() >= sysStatus.openTime) { // We might wake up and find it is opening time.  Park is open let's get ready for the day
   d5dde:	f005 f89b 	bl	daf18 <_ZN9TimeClass4hourEv>
   d5de2:	f899 301d 	ldrb.w	r3, [r9, #29]
   d5de6:	4298      	cmp	r0, r3
   d5de8:	da11      	bge.n	d5e0e <loop+0x15a>
   d5dea:	f005 f895 	bl	daf18 <_ZN9TimeClass4hourEv>
   d5dee:	f899 301c 	ldrb.w	r3, [r9, #28]
   d5df2:	4298      	cmp	r0, r3
   d5df4:	db0b      	blt.n	d5e0e <loop+0x15a>
      attachInterrupt(intPin, sensorISR, RISING);                      // Pressure Sensor interrupt from low to high
   d5df6:	2300      	movs	r3, #0
   d5df8:	9300      	str	r3, [sp, #0]
   d5dfa:	2201      	movs	r2, #1
   d5dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5e00:	4939      	ldr	r1, [pc, #228]	; (d5ee8 <loop+0x234>)
   d5e02:	2002      	movs	r0, #2
   d5e04:	f003 f8aa 	bl	d8f5c <_Z15attachInterrupttPFvvE13InterruptModeah>
      stayAwake = stayAwakeLong;                                       // Keeps Boron awake after deep sleep - may not be needed
   d5e08:	4b31      	ldr	r3, [pc, #196]	; (d5ed0 <loop+0x21c>)
   d5e0a:	4a38      	ldr	r2, [pc, #224]	; (d5eec <loop+0x238>)
   d5e0c:	601a      	str	r2, [r3, #0]
    state = IDLE_STATE;                                                // Head back to the idle state to see what to do next
   d5e0e:	2302      	movs	r3, #2
   d5e10:	7023      	strb	r3, [r4, #0]
        freeWakeupSourceMemory();
   d5e12:	a803      	add	r0, sp, #12
   d5e14:	f7fe fa5a 	bl	d42cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
  if (sensorDetect) {
   d5e18:	f898 3000 	ldrb.w	r3, [r8]
   d5e1c:	b10b      	cbz	r3, d5e22 <loop+0x16e>
    recordCount();
   d5e1e:	f7fe fdd5 	bl	d49cc <_Z11recordCountv>
  ab1805.loop();                                                      // Keeps the RTC synchronized with the Boron's clock
   d5e22:	482f      	ldr	r0, [pc, #188]	; (d5ee0 <loop+0x22c>)
   d5e24:	f001 f938 	bl	d7098 <_ZN6AB18054loopEv>
  if (systemStatusWriteNeeded) {
   d5e28:	783b      	ldrb	r3, [r7, #0]
   d5e2a:	b133      	cbz	r3, d5e3a <loop+0x186>
    fram.put(FRAM::systemStatusAddr,sysStatus);
   d5e2c:	4a26      	ldr	r2, [pc, #152]	; (d5ec8 <loop+0x214>)
   d5e2e:	4830      	ldr	r0, [pc, #192]	; (d5ef0 <loop+0x23c>)
   d5e30:	2101      	movs	r1, #1
   d5e32:	f7ff fa46 	bl	d52c2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
    systemStatusWriteNeeded = false;
   d5e36:	2300      	movs	r3, #0
   d5e38:	703b      	strb	r3, [r7, #0]
  if (currentCountsWriteNeeded) {
   d5e3a:	7833      	ldrb	r3, [r6, #0]
   d5e3c:	b13b      	cbz	r3, d5e4e <loop+0x19a>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5e3e:	2324      	movs	r3, #36	; 0x24
   d5e40:	4a26      	ldr	r2, [pc, #152]	; (d5edc <loop+0x228>)
   d5e42:	482b      	ldr	r0, [pc, #172]	; (d5ef0 <loop+0x23c>)
   d5e44:	2150      	movs	r1, #80	; 0x50
   d5e46:	f001 fa22 	bl	d728e <_ZN6MB85RC9writeDataEjPKhj>
    currentCountsWriteNeeded = false;
   d5e4a:	2300      	movs	r3, #0
   d5e4c:	7033      	strb	r3, [r6, #0]
  if (outOfMemory >= 0) {                                               // In this function we are going to reset the system if there is an out of memory error
   d5e4e:	4b29      	ldr	r3, [pc, #164]	; (d5ef4 <loop+0x240>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	2b00      	cmp	r3, #0
   d5e54:	db1b      	blt.n	d5e8e <loop+0x1da>
    snprintf(message, sizeof(message), "Out of memory occurred size=%d",outOfMemory);
   d5e56:	4a28      	ldr	r2, [pc, #160]	; (d5ef8 <loop+0x244>)
   d5e58:	2140      	movs	r1, #64	; 0x40
   d5e5a:	a806      	add	r0, sp, #24
   d5e5c:	f002 faaa 	bl	d83b4 <snprintf>
    Log.info(message);
   d5e60:	a906      	add	r1, sp, #24
   d5e62:	4826      	ldr	r0, [pc, #152]	; (d5efc <loop+0x248>)
   d5e64:	f7fe fb5d 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
    delay(100);
   d5e68:	2064      	movs	r0, #100	; 0x64
   d5e6a:	f002 faf7 	bl	d845c <delay>
        val_(0) {
   d5e6e:	2300      	movs	r3, #0
    publishQueue.publish("Memory",message,PRIVATE);                     // Publish to the console - this is important so we will not filter on verboseMod
   d5e70:	f88d 3000 	strb.w	r3, [sp]
   d5e74:	4b22      	ldr	r3, [pc, #136]	; (d5f00 <loop+0x24c>)
   d5e76:	4923      	ldr	r1, [pc, #140]	; (d5f04 <loop+0x250>)
   d5e78:	781b      	ldrb	r3, [r3, #0]
   d5e7a:	4823      	ldr	r0, [pc, #140]	; (d5f08 <loop+0x254>)
   d5e7c:	aa06      	add	r2, sp, #24
   d5e7e:	f7fe fb7e 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    delay(2000);
   d5e82:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5e86:	f002 fae9 	bl	d845c <delay>
    System.reset();                                                     // An out of memory condition occurred - reset device.
   d5e8a:	f004 fde9 	bl	daa60 <_ZN11SystemClass5resetEv>
}
   d5e8e:	b017      	add	sp, #92	; 0x5c
   d5e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (result.wakeupPin() == userSwitch) {
   d5e94:	2b04      	cmp	r3, #4
   d5e96:	d1a2      	bne.n	d5dde <loop+0x12a>
        setLowPowerMode("0");
   d5e98:	491c      	ldr	r1, [pc, #112]	; (d5f0c <loop+0x258>)
   d5e9a:	a806      	add	r0, sp, #24
   d5e9c:	f004 fcf1 	bl	da882 <_ZN6StringC1EPKc>
   d5ea0:	a806      	add	r0, sp, #24
   d5ea2:	f7fe fd2b 	bl	d48fc <_Z15setLowPowerMode6String>
   d5ea6:	a806      	add	r0, sp, #24
   d5ea8:	f004 fca0 	bl	da7ec <_ZN6StringD1Ev>
        sysStatus.openTime = 0;
   d5eac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
   d5eb0:	f8a9 301c 	strh.w	r3, [r9, #28]
   d5eb4:	e793      	b.n	d5dde <loop+0x12a>
   d5eb6:	bf00      	nop
   d5eb8:	2003e411 	.word	0x2003e411
   d5ebc:	2003e44c 	.word	0x2003e44c
   d5ec0:	2003e374 	.word	0x2003e374
   d5ec4:	2003e3d0 	.word	0x2003e3d0
   d5ec8:	2003e41c 	.word	0x2003e41c
   d5ecc:	2003e418 	.word	0x2003e418
   d5ed0:	2003e414 	.word	0x2003e414
   d5ed4:	2003e398 	.word	0x2003e398
   d5ed8:	2003e3d1 	.word	0x2003e3d1
   d5edc:	2003e350 	.word	0x2003e350
   d5ee0:	2003e2e4 	.word	0x2003e2e4
   d5ee4:	2003e31c 	.word	0x2003e31c
   d5ee8:	000d4155 	.word	0x000d4155
   d5eec:	00015f90 	.word	0x00015f90
   d5ef0:	2003e380 	.word	0x2003e380
   d5ef4:	2003e188 	.word	0x2003e188
   d5ef8:	000dc83d 	.word	0x000dc83d
   d5efc:	2003e53c 	.word	0x2003e53c
   d5f00:	2003e2d4 	.word	0x2003e2d4
   d5f04:	000dc85c 	.word	0x000dc85c
   d5f08:	2003e3d4 	.word	0x2003e3d4
   d5f0c:	000dc590 	.word	0x000dc590
   d5f10:	2003e410 	.word	0x2003e410
    if (state != oldState) publishStateTransition();
   d5f14:	4ba9      	ldr	r3, [pc, #676]	; (d61bc <loop+0x508>)
   d5f16:	781b      	ldrb	r3, [r3, #0]
   d5f18:	2b04      	cmp	r3, #4
   d5f1a:	d001      	beq.n	d5f20 <loop+0x26c>
   d5f1c:	f7ff f8a8 	bl	d5070 <_Z22publishStateTransitionv>
    if (sensorDetect || countSignalTimer.isActive()) break;           // Don't nap until we are done with event
   d5f20:	f898 3000 	ldrb.w	r3, [r8]
   d5f24:	2b00      	cmp	r3, #0
   d5f26:	f47f af77 	bne.w	d5e18 <loop+0x164>
   d5f2a:	48a5      	ldr	r0, [pc, #660]	; (d61c0 <loop+0x50c>)
   d5f2c:	f7fe faef 	bl	d450e <_ZNK5Timer8isActiveEv>
   d5f30:	2800      	cmp	r0, #0
   d5f32:	f47f af71 	bne.w	d5e18 <loop+0x164>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
   d5f36:	4ba3      	ldr	r3, [pc, #652]	; (d61c4 <loop+0x510>)
   d5f38:	78db      	ldrb	r3, [r3, #3]
   d5f3a:	b10b      	cbz	r3, d5f40 <loop+0x28c>
   d5f3c:	f7ff fe60 	bl	d5c00 <_Z22disconnectFromParticlev>
    stayAwake = 1000;                                                 // Once we come into this function, we need to reset stayAwake as it changes at the top of the hour
   d5f40:	4ba1      	ldr	r3, [pc, #644]	; (d61c8 <loop+0x514>)
   d5f42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5f46:	601a      	str	r2, [r3, #0]
        if (valid_) {
   d5f48:	4ba0      	ldr	r3, [pc, #640]	; (d61cc <loop+0x518>)
   d5f4a:	7d19      	ldrb	r1, [r3, #20]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
   d5f4c:	2202      	movs	r2, #2
   d5f4e:	7022      	strb	r2, [r4, #0]
   d5f50:	b101      	cbz	r1, d5f54 <loop+0x2a0>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5f52:	721a      	strb	r2, [r3, #8]
      .gpio(userSwitch,CHANGE)
   d5f54:	2200      	movs	r2, #0
   d5f56:	2104      	movs	r1, #4
   d5f58:	489c      	ldr	r0, [pc, #624]	; (d61cc <loop+0x518>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d5f5a:	4d9d      	ldr	r5, [pc, #628]	; (d61d0 <loop+0x51c>)
   d5f5c:	4c9d      	ldr	r4, [pc, #628]	; (d61d4 <loop+0x520>)
   d5f5e:	f7fe fa5d 	bl	d441c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .gpio(intPin,RISING)
   d5f62:	2201      	movs	r2, #1
   d5f64:	2102      	movs	r1, #2
   d5f66:	f7fe fa59 	bl	d441c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
      .duration(60 * 1000);                                            // Only nap for one minute so we can check for a stuck interrupt
   d5f6a:	f64e 2160 	movw	r1, #60000	; 0xea60
   d5f6e:	f7fe fa89 	bl	d4484 <_ZN8particle24SystemSleepConfiguration8durationEm>
    bool stopWDT() { return setWDT(0); };
   d5f72:	4899      	ldr	r0, [pc, #612]	; (d61d8 <loop+0x524>)
   d5f74:	2100      	movs	r1, #0
   d5f76:	f000 fc97 	bl	d68a8 <_ZN6AB18056setWDTEi>
   d5f7a:	782b      	ldrb	r3, [r5, #0]
   d5f7c:	f3bf 8f5b 	dmb	ish
   d5f80:	f013 0f01 	tst.w	r3, #1
   d5f84:	d109      	bne.n	d5f9a <loop+0x2e6>
   d5f86:	4628      	mov	r0, r5
   d5f88:	f7fe f896 	bl	d40b8 <__cxa_guard_acquire>
   d5f8c:	b128      	cbz	r0, d5f9a <loop+0x2e6>
   d5f8e:	f001 ff0d 	bl	d7dac <HAL_Pin_Map>
   d5f92:	6020      	str	r0, [r4, #0]
   d5f94:	4628      	mov	r0, r5
   d5f96:	f7fe f894 	bl	d40c2 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d5f9a:	6823      	ldr	r3, [r4, #0]
   d5f9c:	f893 9020 	ldrb.w	r9, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d5fa0:	782b      	ldrb	r3, [r5, #0]
   d5fa2:	f3bf 8f5b 	dmb	ish
   d5fa6:	07d8      	lsls	r0, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d5fa8:	ea4f 1949 	mov.w	r9, r9, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d5fac:	d409      	bmi.n	d5fc2 <loop+0x30e>
   d5fae:	4888      	ldr	r0, [pc, #544]	; (d61d0 <loop+0x51c>)
   d5fb0:	f7fe f882 	bl	d40b8 <__cxa_guard_acquire>
   d5fb4:	b128      	cbz	r0, d5fc2 <loop+0x30e>
   d5fb6:	f001 fef9 	bl	d7dac <HAL_Pin_Map>
   d5fba:	6020      	str	r0, [r4, #0]
   d5fbc:	4884      	ldr	r0, [pc, #528]	; (d61d0 <loop+0x51c>)
   d5fbe:	f7fe f880 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d5fc2:	6823      	ldr	r3, [r4, #0]
   d5fc4:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   d5fc8:	f004 041f 	and.w	r4, r4, #31
   d5fcc:	ea44 0409 	orr.w	r4, r4, r9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d5fd0:	a806      	add	r0, sp, #24
   d5fd2:	9406      	str	r4, [sp, #24]
   d5fd4:	f7fe f8a6 	bl	d4124 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d5fd8:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d5fdc:	9406      	str	r4, [sp, #24]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d5fde:	a806      	add	r0, sp, #24
   d5fe0:	f7fe f8a0 	bl	d4124 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d5fe4:	9a06      	ldr	r2, [sp, #24]
    return p_reg->IN;
   d5fe6:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d5fea:	40d3      	lsrs	r3, r2
    if (pinReadFast(intPin)) recordCount();
   d5fec:	07d9      	lsls	r1, r3, #31
   d5fee:	d501      	bpl.n	d5ff4 <loop+0x340>
   d5ff0:	f7fe fcec 	bl	d49cc <_Z11recordCountv>
    SystemSleepResult result = System.sleep(config);                   // Put the device to sleep
   d5ff4:	4975      	ldr	r1, [pc, #468]	; (d61cc <loop+0x518>)
   d5ff6:	a803      	add	r0, sp, #12
   d5ff8:	f004 fd36 	bl	daa68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
    bool resumeWDT() { return setWDT(-1); };
   d5ffc:	4876      	ldr	r0, [pc, #472]	; (d61d8 <loop+0x524>)
   d5ffe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d6002:	f000 fc51 	bl	d68a8 <_ZN6AB18056setWDTEi>
    if (result.wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {   // Awoken by GPIO pin
   d6006:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d6008:	2b00      	cmp	r3, #0
   d600a:	f43f af02 	beq.w	d5e12 <loop+0x15e>
   d600e:	889a      	ldrh	r2, [r3, #4]
   d6010:	2a01      	cmp	r2, #1
   d6012:	f47f aefe 	bne.w	d5e12 <loop+0x15e>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d6016:	899b      	ldrh	r3, [r3, #12]
      if (result.wakeupPin() == intPin) {                              // Executions starts here after sleep - time or sensor interrupt?
   d6018:	2b02      	cmp	r3, #2
   d601a:	d104      	bne.n	d6026 <loop+0x372>
   d601c:	f001 fe9e 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
        stayAwakeTimeStamp = millis();
   d6020:	4b6e      	ldr	r3, [pc, #440]	; (d61dc <loop+0x528>)
   d6022:	6018      	str	r0, [r3, #0]
   d6024:	e6f5      	b.n	d5e12 <loop+0x15e>
      else if (result.wakeupPin() == userSwitch) setLowPowerMode("0");
   d6026:	2b04      	cmp	r3, #4
   d6028:	f47f aef3 	bne.w	d5e12 <loop+0x15e>
   d602c:	496c      	ldr	r1, [pc, #432]	; (d61e0 <loop+0x52c>)
   d602e:	a806      	add	r0, sp, #24
   d6030:	f004 fc27 	bl	da882 <_ZN6StringC1EPKc>
   d6034:	a806      	add	r0, sp, #24
   d6036:	f7fe fc61 	bl	d48fc <_Z15setLowPowerMode6String>
   d603a:	a806      	add	r0, sp, #24
   d603c:	f004 fbd6 	bl	da7ec <_ZN6StringD1Ev>
   d6040:	e6e7      	b.n	d5e12 <loop+0x15e>
    if (state != oldState) {
   d6042:	4b5e      	ldr	r3, [pc, #376]	; (d61bc <loop+0x508>)
   d6044:	781b      	ldrb	r3, [r3, #0]
   d6046:	2b05      	cmp	r3, #5
   d6048:	d013      	beq.n	d6072 <loop+0x3be>
      if (oldState == REPORTING_STATE) returnToReporting = true;
   d604a:	1f9a      	subs	r2, r3, #6
   d604c:	4253      	negs	r3, r2
   d604e:	4153      	adcs	r3, r2
   d6050:	4a64      	ldr	r2, [pc, #400]	; (d61e4 <loop+0x530>)
   d6052:	7013      	strb	r3, [r2, #0]
      publishStateTransition();
   d6054:	f7ff f80c 	bl	d5070 <_Z22publishStateTransitionv>
      connectionStartTime = Time.now();                 // Start the clock first time we enter the state
   d6058:	f004 ff4d 	bl	daef6 <_ZN9TimeClass3nowEv>
   d605c:	4b62      	ldr	r3, [pc, #392]	; (d61e8 <loop+0x534>)
   d605e:	6018      	str	r0, [r3, #0]
        network_on(*this, 0, 0, NULL);
   d6060:	4862      	ldr	r0, [pc, #392]	; (d61ec <loop+0x538>)
   d6062:	2300      	movs	r3, #0
   d6064:	6840      	ldr	r0, [r0, #4]
   d6066:	461a      	mov	r2, r3
   d6068:	4619      	mov	r1, r3
   d606a:	f002 f943 	bl	d82f4 <network_on>
        spark_cloud_flag_connect();
   d606e:	f002 f8c9 	bl	d8204 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6072:	f002 f8cf 	bl	d8214 <spark_cloud_flag_connected>
   d6076:	4d5e      	ldr	r5, [pc, #376]	; (d61f0 <loop+0x53c>)
    if (Particle.connected()) {
   d6078:	4681      	mov	r9, r0
   d607a:	2800      	cmp	r0, #0
   d607c:	d042      	beq.n	d6104 <loop+0x450>
      sysStatus.connectedStatus = true;
   d607e:	f8df 9144 	ldr.w	r9, [pc, #324]	; d61c4 <loop+0x510>
      particleConnectionNeeded = false;                               // Connected so we don't need this flag
   d6082:	2300      	movs	r3, #0
   d6084:	702b      	strb	r3, [r5, #0]
      sysStatus.connectedStatus = true;
   d6086:	2301      	movs	r3, #1
   d6088:	f889 3003 	strb.w	r3, [r9, #3]
      sysStatus.lastConnection = Time.now();                          // This is the last time we attempted to connect
   d608c:	f004 ff33 	bl	daef6 <_ZN9TimeClass3nowEv>
   d6090:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    if (!particleConnectionNeeded) {                                  // Whether the connection was successful or not, we will collect and publish metrics
   d6094:	782b      	ldrb	r3, [r5, #0]
   d6096:	2b00      	cmp	r3, #0
   d6098:	f47f aebe 	bne.w	d5e18 <loop+0x164>
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d609c:	f004 ff2b 	bl	daef6 <_ZN9TimeClass3nowEv>
   d60a0:	4b51      	ldr	r3, [pc, #324]	; (d61e8 <loop+0x534>)
   d60a2:	4d48      	ldr	r5, [pc, #288]	; (d61c4 <loop+0x510>)
   d60a4:	681b      	ldr	r3, [r3, #0]
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d60a6:	4a53      	ldr	r2, [pc, #332]	; (d61f4 <loop+0x540>)
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d60a8:	1ac0      	subs	r0, r0, r3
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d60aa:	4b53      	ldr	r3, [pc, #332]	; (d61f8 <loop+0x544>)
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d60ac:	8b91      	ldrh	r1, [r2, #28]
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d60ae:	681b      	ldr	r3, [r3, #0]
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d60b0:	b280      	uxth	r0, r0
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d60b2:	4298      	cmp	r0, r3
      sysStatus.lastConnectionDuration = Time.now() - connectionStartTime;
   d60b4:	8528      	strh	r0, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > connectMaxTimeSec) sysStatus.lastConnectionDuration = connectMaxTimeSec;           // This is clearly an erroneous result
   d60b6:	bf88      	it	hi
   d60b8:	852b      	strhhi	r3, [r5, #40]	; 0x28
      if (sysStatus.lastConnectionDuration > current.maxConnectTime) current.maxConnectTime = sysStatus.lastConnectionDuration; // Keep track of longest each day
   d60ba:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   d60bc:	4299      	cmp	r1, r3
   d60be:	bf38      	it	cc
   d60c0:	8393      	strhcc	r3, [r2, #28]
      snprintf(connectionStr, sizeof(connectionStr),"Connected in %i secs",sysStatus.lastConnectionDuration);                   // Make up connection string and publish
   d60c2:	2120      	movs	r1, #32
   d60c4:	4a4d      	ldr	r2, [pc, #308]	; (d61fc <loop+0x548>)
   d60c6:	a806      	add	r0, sp, #24
   d60c8:	f002 f974 	bl	d83b4 <snprintf>
      Log.info(connectionStr);
   d60cc:	484c      	ldr	r0, [pc, #304]	; (d6200 <loop+0x54c>)
   d60ce:	a906      	add	r1, sp, #24
   d60d0:	f7fe fa27 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
      if (sysStatus.verboseMode) publishQueue.publish("Cellular",connectionStr,PRIVATE);
   d60d4:	792b      	ldrb	r3, [r5, #4]
   d60d6:	b14b      	cbz	r3, d60ec <loop+0x438>
   d60d8:	2300      	movs	r3, #0
   d60da:	f88d 3000 	strb.w	r3, [sp]
   d60de:	4b49      	ldr	r3, [pc, #292]	; (d6204 <loop+0x550>)
   d60e0:	4949      	ldr	r1, [pc, #292]	; (d6208 <loop+0x554>)
   d60e2:	781b      	ldrb	r3, [r3, #0]
   d60e4:	4849      	ldr	r0, [pc, #292]	; (d620c <loop+0x558>)
   d60e6:	aa06      	add	r2, sp, #24
   d60e8:	f7fe fa49 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      systemStatusWriteNeeded = true;
   d60ec:	2301      	movs	r3, #1
   d60ee:	703b      	strb	r3, [r7, #0]
      currentCountsWriteNeeded = true;
   d60f0:	7033      	strb	r3, [r6, #0]
      if (sysStatus.connectedStatus && returnToReporting) state = REPORTING_STATE;    // If we came here from reporting, this will send us back
   d60f2:	78eb      	ldrb	r3, [r5, #3]
   d60f4:	b123      	cbz	r3, d6100 <loop+0x44c>
   d60f6:	4b3b      	ldr	r3, [pc, #236]	; (d61e4 <loop+0x530>)
   d60f8:	781b      	ldrb	r3, [r3, #0]
   d60fa:	2b00      	cmp	r3, #0
   d60fc:	f47f ae2f 	bne.w	d5d5e <loop+0xaa>
      state = IDLE_STATE;
   d6100:	2302      	movs	r3, #2
   d6102:	e62d      	b.n	d5d60 <loop+0xac>
    else if ((Time.now() - connectionStartTime) > connectMaxTimeSec) {
   d6104:	f004 fef7 	bl	daef6 <_ZN9TimeClass3nowEv>
   d6108:	4b37      	ldr	r3, [pc, #220]	; (d61e8 <loop+0x534>)
   d610a:	4a3b      	ldr	r2, [pc, #236]	; (d61f8 <loop+0x544>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	6812      	ldr	r2, [r2, #0]
   d6110:	1ac3      	subs	r3, r0, r3
   d6112:	4293      	cmp	r3, r2
   d6114:	d9be      	bls.n	d6094 <loop+0x3e0>
      particleConnectionNeeded = false;                               // Timed out so we will give up until the next hour
   d6116:	f885 9000 	strb.w	r9, [r5]
      if ((Time.now() - sysStatus.lastConnection) > 7200) {             // Only sends to ERROR_STATE if it has been over 2 hours
   d611a:	f004 feec 	bl	daef6 <_ZN9TimeClass3nowEv>
   d611e:	4a29      	ldr	r2, [pc, #164]	; (d61c4 <loop+0x510>)
   d6120:	6a53      	ldr	r3, [r2, #36]	; 0x24
   d6122:	1ac3      	subs	r3, r0, r3
   d6124:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
   d6128:	d906      	bls.n	d6138 <loop+0x484>
        state = ERROR_STATE;     
   d612a:	2301      	movs	r3, #1
   d612c:	7023      	strb	r3, [r4, #0]
   d612e:	f001 fe15 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
   d6132:	4b37      	ldr	r3, [pc, #220]	; (d6210 <loop+0x55c>)
   d6134:	6018      	str	r0, [r3, #0]
        break;
   d6136:	e66f      	b.n	d5e18 <loop+0x164>
      Log.info("cloud connection unsuccessful");
   d6138:	4936      	ldr	r1, [pc, #216]	; (d6214 <loop+0x560>)
   d613a:	4831      	ldr	r0, [pc, #196]	; (d6200 <loop+0x54c>)
      sysStatus.connectedStatus = false;
   d613c:	f882 9003 	strb.w	r9, [r2, #3]
      Log.info("cloud connection unsuccessful");
   d6140:	f7fe f9ef 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
   d6144:	e7a6      	b.n	d6094 <loop+0x3e0>
    if (state != oldState) publishStateTransition();
   d6146:	4b1d      	ldr	r3, [pc, #116]	; (d61bc <loop+0x508>)
   d6148:	781b      	ldrb	r3, [r3, #0]
   d614a:	2b06      	cmp	r3, #6
   d614c:	d001      	beq.n	d6152 <loop+0x49e>
   d614e:	f7fe ff8f 	bl	d5070 <_Z22publishStateTransitionv>
    lastReportedTime = Time.now();                                    // We are only going to try once
   d6152:	f004 fed0 	bl	daef6 <_ZN9TimeClass3nowEv>
    if (!sysStatus.connectedStatus) {                                 // Asking us to report but not connected
   d6156:	4d1b      	ldr	r5, [pc, #108]	; (d61c4 <loop+0x510>)
    lastReportedTime = Time.now();                                    // We are only going to try once
   d6158:	4b2f      	ldr	r3, [pc, #188]	; (d6218 <loop+0x564>)
   d615a:	6018      	str	r0, [r3, #0]
    if (!sysStatus.connectedStatus) {                                 // Asking us to report but not connected
   d615c:	78eb      	ldrb	r3, [r5, #3]
   d615e:	46a9      	mov	r9, r5
   d6160:	b91b      	cbnz	r3, d616a <loop+0x4b6>
      particleConnectionNeeded = true;                                // Set the flag to connect us to Particle
   d6162:	4b23      	ldr	r3, [pc, #140]	; (d61f0 <loop+0x53c>)
   d6164:	2201      	movs	r2, #1
   d6166:	701a      	strb	r2, [r3, #0]
   d6168:	e5e5      	b.n	d5d36 <loop+0x82>
    if (!sysStatus.lowPowerMode) takeMeasurements();                  // Do this here as device not in lowPowerMode will not meausre coming out of sleep / napping
   d616a:	79ab      	ldrb	r3, [r5, #6]
   d616c:	b1b3      	cbz	r3, d619c <loop+0x4e8>
      if (Time.hour() == sysStatus.openTime) dailyCleanup();          // Once a day, clean house and publish to Google Sheets
   d616e:	f004 fed3 	bl	daf18 <_ZN9TimeClass4hourEv>
   d6172:	f899 301c 	ldrb.w	r3, [r9, #28]
   d6176:	4298      	cmp	r0, r3
   d6178:	d11d      	bne.n	d61b6 <loop+0x502>
   d617a:	f7fe ffb7 	bl	d50ec <_Z12dailyCleanupv>
      if (Time.hour() == sysStatus.openTime && sysStatus.openTime==0) sendEvent();    // Need this so we can get 24 hour reporting for non-sleeping devices
   d617e:	f004 fecb 	bl	daf18 <_ZN9TimeClass4hourEv>
   d6182:	f899 301c 	ldrb.w	r3, [r9, #28]
   d6186:	4298      	cmp	r0, r3
   d6188:	d102      	bne.n	d6190 <loop+0x4dc>
   d618a:	b908      	cbnz	r0, d6190 <loop+0x4dc>
   d618c:	f7fe fce0 	bl	d4b50 <_Z9sendEventv>
   d6190:	f001 fde4 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();                                    // This is for a webHook response timeout
   d6194:	4b21      	ldr	r3, [pc, #132]	; (d621c <loop+0x568>)
   d6196:	6018      	str	r0, [r3, #0]
      state = RESP_WAIT_STATE;                                        // Wait for Response
   d6198:	2307      	movs	r3, #7
   d619a:	e5e1      	b.n	d5d60 <loop+0xac>
    if (!sysStatus.lowPowerMode) takeMeasurements();                  // Do this here as device not in lowPowerMode will not meausre coming out of sleep / napping
   d619c:	f7ff f822 	bl	d51e4 <_Z16takeMeasurementsv>
    if (sysStatus.connectedStatus) {
   d61a0:	78eb      	ldrb	r3, [r5, #3]
   d61a2:	2b00      	cmp	r3, #0
   d61a4:	d1e3      	bne.n	d616e <loop+0x4ba>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d61a6:	4b08      	ldr	r3, [pc, #32]	; (d61c8 <loop+0x514>)
   d61a8:	4a1d      	ldr	r2, [pc, #116]	; (d6220 <loop+0x56c>)
   d61aa:	601a      	str	r2, [r3, #0]
   d61ac:	f001 fdd6 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d61b0:	4b0a      	ldr	r3, [pc, #40]	; (d61dc <loop+0x528>)
   d61b2:	6018      	str	r0, [r3, #0]
   d61b4:	e7a4      	b.n	d6100 <loop+0x44c>
      else sendEvent();                                               // Send data to Ubidots but not at opening time as there is nothing to publish
   d61b6:	f7fe fccb 	bl	d4b50 <_Z9sendEventv>
   d61ba:	e7e0      	b.n	d617e <loop+0x4ca>
   d61bc:	2003e3d0 	.word	0x2003e3d0
   d61c0:	2003e334 	.word	0x2003e334
   d61c4:	2003e41c 	.word	0x2003e41c
   d61c8:	2003e414 	.word	0x2003e414
   d61cc:	2003e31c 	.word	0x2003e31c
   d61d0:	2003e280 	.word	0x2003e280
   d61d4:	2003e284 	.word	0x2003e284
   d61d8:	2003e2e4 	.word	0x2003e2e4
   d61dc:	2003e418 	.word	0x2003e418
   d61e0:	000dc590 	.word	0x000dc590
   d61e4:	2003e2dd 	.word	0x2003e2dd
   d61e8:	2003e2e0 	.word	0x2003e2e0
   d61ec:	2003e468 	.word	0x2003e468
   d61f0:	2003e3d1 	.word	0x2003e3d1
   d61f4:	2003e350 	.word	0x2003e350
   d61f8:	2003e16c 	.word	0x2003e16c
   d61fc:	000dc7b2 	.word	0x000dc7b2
   d6200:	2003e53c 	.word	0x2003e53c
   d6204:	2003e2d4 	.word	0x2003e2d4
   d6208:	000dc7c7 	.word	0x000dc7c7
   d620c:	2003e3d4 	.word	0x2003e3d4
   d6210:	2003e40c 	.word	0x2003e40c
   d6214:	000dc794 	.word	0x000dc794
   d6218:	2003e398 	.word	0x2003e398
   d621c:	2003e450 	.word	0x2003e450
   d6220:	00015f90 	.word	0x00015f90
    if (state != oldState) publishStateTransition();
   d6224:	4b58      	ldr	r3, [pc, #352]	; (d6388 <loop+0x6d4>)
   d6226:	781b      	ldrb	r3, [r3, #0]
   d6228:	2b07      	cmp	r3, #7
   d622a:	d001      	beq.n	d6230 <loop+0x57c>
   d622c:	f7fe ff20 	bl	d5070 <_Z22publishStateTransitionv>
    if (!dataInFlight)  {                                             // Response received --> back to IDLE state
   d6230:	4b56      	ldr	r3, [pc, #344]	; (d638c <loop+0x6d8>)
   d6232:	781d      	ldrb	r5, [r3, #0]
   d6234:	b9b5      	cbnz	r5, d6264 <loop+0x5b0>
      stayAwake = stayAwakeLong;                                      // Keeps device awake after reboot - helps with recovery
   d6236:	4b56      	ldr	r3, [pc, #344]	; (d6390 <loop+0x6dc>)
   d6238:	4a56      	ldr	r2, [pc, #344]	; (d6394 <loop+0x6e0>)
   d623a:	601a      	str	r2, [r3, #0]
   d623c:	f001 fd8e 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
   d6240:	4b55      	ldr	r3, [pc, #340]	; (d6398 <loop+0x6e4>)
   d6242:	6018      	str	r0, [r3, #0]
      state = IDLE_STATE;
   d6244:	2302      	movs	r3, #2
   d6246:	7023      	strb	r3, [r4, #0]
      if (current.hourlyCountInFlight) {                                // Cleared here as there could be counts coming in while "in Flight"
   d6248:	4b54      	ldr	r3, [pc, #336]	; (d639c <loop+0x6e8>)
   d624a:	6859      	ldr	r1, [r3, #4]
   d624c:	2900      	cmp	r1, #0
   d624e:	f43f ade3 	beq.w	d5e18 <loop+0x164>
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d6252:	681a      	ldr	r2, [r3, #0]
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d6254:	605d      	str	r5, [r3, #4]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d6256:	1a52      	subs	r2, r2, r1
        current.hourlyCountInFlight = current.maxMinValue = current.alertCount = 0; // Zero out the counts until next reporting period
   d6258:	e9c3 5505 	strd	r5, r5, [r3, #20]
        current.hourlyCount -= current.hourlyCountInFlight;             // Confirmed that count was recevied - clearing
   d625c:	601a      	str	r2, [r3, #0]
        currentCountsWriteNeeded=true;
   d625e:	2301      	movs	r3, #1
   d6260:	7033      	strb	r3, [r6, #0]
   d6262:	e5d9      	b.n	d5e18 <loop+0x164>
   d6264:	f001 fd7a 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d6268:	4b4d      	ldr	r3, [pc, #308]	; (d63a0 <loop+0x6ec>)
   d626a:	681b      	ldr	r3, [r3, #0]
   d626c:	1ac0      	subs	r0, r0, r3
   d626e:	f247 5330 	movw	r3, #30000	; 0x7530
   d6272:	4298      	cmp	r0, r3
   d6274:	f67f add0 	bls.w	d5e18 <loop+0x164>
   d6278:	f001 fd70 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d627c:	4b49      	ldr	r3, [pc, #292]	; (d63a4 <loop+0x6f0>)
   d627e:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                            // Response timed out
   d6280:	2301      	movs	r3, #1
   d6282:	e56d      	b.n	d5d60 <loop+0xac>
    if (state != oldState) publishStateTransition();
   d6284:	4b40      	ldr	r3, [pc, #256]	; (d6388 <loop+0x6d4>)
   d6286:	781b      	ldrb	r3, [r3, #0]
   d6288:	2b01      	cmp	r3, #1
   d628a:	d001      	beq.n	d6290 <loop+0x5dc>
   d628c:	f7fe fef0 	bl	d5070 <_Z22publishStateTransitionv>
   d6290:	f001 fd64 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
   d6294:	4b43      	ldr	r3, [pc, #268]	; (d63a4 <loop+0x6f0>)
   d6296:	681b      	ldr	r3, [r3, #0]
   d6298:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
   d629c:	3330      	adds	r3, #48	; 0x30
   d629e:	4283      	cmp	r3, r0
   d62a0:	f4bf adba 	bcs.w	d5e18 <loop+0x164>
      if ((Time.now() - sysStatus.lastConnection) > 7200L) {           // It is been over two hours since we last connected to the cloud - time for a reset
   d62a4:	4d40      	ldr	r5, [pc, #256]	; (d63a8 <loop+0x6f4>)
   d62a6:	f004 fe26 	bl	daef6 <_ZN9TimeClass3nowEv>
   d62aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d62ac:	1ac0      	subs	r0, r0, r3
   d62ae:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d62b2:	462c      	mov	r4, r5
   d62b4:	d913      	bls.n	d62de <loop+0x62a>
        sysStatus.lastConnection = Time.now() - 3600;                 // Wait an hour before we come back to this condition
   d62b6:	f004 fe1e 	bl	daef6 <_ZN9TimeClass3nowEv>
   d62ba:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d62be:	6268      	str	r0, [r5, #36]	; 0x24
        fram.put(FRAM::systemStatusAddr,sysStatus);
   d62c0:	462a      	mov	r2, r5
   d62c2:	2101      	movs	r1, #1
   d62c4:	4839      	ldr	r0, [pc, #228]	; (d63ac <loop+0x6f8>)
   d62c6:	f7fe fffc 	bl	d52c2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        Log.error("failed to connect to cloud, doing deep reset");
   d62ca:	4839      	ldr	r0, [pc, #228]	; (d63b0 <loop+0x6fc>)
   d62cc:	4939      	ldr	r1, [pc, #228]	; (d63b4 <loop+0x700>)
   d62ce:	f7fe f93f 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
        delay(100);
   d62d2:	2064      	movs	r0, #100	; 0x64
   d62d4:	f002 f8c2 	bl	d845c <delay>
        fullModemReset();                                             // Full Modem reset and reboot
   d62d8:	f7ff fc24 	bl	d5b24 <_Z14fullModemResetv>
   d62dc:	e59c      	b.n	d5e18 <loop+0x164>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) {     //It has been more than two hours since a sucessful hook response
   d62de:	f004 fe0a 	bl	daef6 <_ZN9TimeClass3nowEv>
   d62e2:	6a2b      	ldr	r3, [r5, #32]
   d62e4:	1ac0      	subs	r0, r0, r3
   d62e6:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
   d62ea:	78eb      	ldrb	r3, [r5, #3]
   d62ec:	d919      	bls.n	d6322 <loop+0x66e>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);  // Broadcast Reset Action
   d62ee:	b153      	cbz	r3, d6306 <loop+0x652>
inline ValueT particle::Flag<TagT, ValueT>::value() const {
   d62f0:	4b31      	ldr	r3, [pc, #196]	; (d63b8 <loop+0x704>)
   d62f2:	4a32      	ldr	r2, [pc, #200]	; (d63bc <loop+0x708>)
   d62f4:	781b      	ldrb	r3, [r3, #0]
   d62f6:	f88d 3000 	strb.w	r3, [sp]
   d62fa:	4b31      	ldr	r3, [pc, #196]	; (d63c0 <loop+0x70c>)
   d62fc:	4931      	ldr	r1, [pc, #196]	; (d63c4 <loop+0x710>)
   d62fe:	781b      	ldrb	r3, [r3, #0]
   d6300:	4831      	ldr	r0, [pc, #196]	; (d63c8 <loop+0x714>)
   d6302:	f7fe f93c 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);                                                  // Time to publish
   d6306:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d630a:	f002 f8a7 	bl	d845c <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d630e:	2300      	movs	r3, #0
   d6310:	6123      	str	r3, [r4, #16]
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d6312:	f004 fdf0 	bl	daef6 <_ZN9TimeClass3nowEv>
        systemStatusWriteNeeded=true;
   d6316:	2301      	movs	r3, #1
        sysStatus.lastHookResponse = Time.now() - 3600;               // Give it an hour before we act on this condition again
   d6318:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
   d631c:	6220      	str	r0, [r4, #32]
        systemStatusWriteNeeded=true;
   d631e:	703b      	strb	r3, [r7, #0]
   d6320:	e7da      	b.n	d62d8 <loop+0x624>
      else if (sysStatus.resetCount <= 3) {                                // First try simple reset
   d6322:	692a      	ldr	r2, [r5, #16]
   d6324:	2a03      	cmp	r2, #3
   d6326:	dc12      	bgt.n	d634e <loop+0x69a>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - System Reset", PRIVATE, WITH_ACK);    // Brodcast Reset Action
   d6328:	b153      	cbz	r3, d6340 <loop+0x68c>
   d632a:	4b23      	ldr	r3, [pc, #140]	; (d63b8 <loop+0x704>)
   d632c:	4a27      	ldr	r2, [pc, #156]	; (d63cc <loop+0x718>)
   d632e:	781b      	ldrb	r3, [r3, #0]
   d6330:	f88d 3000 	strb.w	r3, [sp]
   d6334:	4b22      	ldr	r3, [pc, #136]	; (d63c0 <loop+0x70c>)
   d6336:	4923      	ldr	r1, [pc, #140]	; (d63c4 <loop+0x710>)
   d6338:	781b      	ldrb	r3, [r3, #0]
   d633a:	4823      	ldr	r0, [pc, #140]	; (d63c8 <loop+0x714>)
   d633c:	f7fe f91f 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d6340:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d6344:	f002 f88a 	bl	d845c <delay>
        System.reset();
   d6348:	f004 fb8a 	bl	daa60 <_ZN11SystemClass5resetEv>
   d634c:	e564      	b.n	d5e18 <loop+0x164>
        if (sysStatus.connectedStatus) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE, WITH_ACK);            // Brodcase Reset Action
   d634e:	b153      	cbz	r3, d6366 <loop+0x6b2>
   d6350:	4b19      	ldr	r3, [pc, #100]	; (d63b8 <loop+0x704>)
   d6352:	4a1a      	ldr	r2, [pc, #104]	; (d63bc <loop+0x708>)
   d6354:	781b      	ldrb	r3, [r3, #0]
   d6356:	f88d 3000 	strb.w	r3, [sp]
   d635a:	4b19      	ldr	r3, [pc, #100]	; (d63c0 <loop+0x70c>)
   d635c:	4919      	ldr	r1, [pc, #100]	; (d63c4 <loop+0x710>)
   d635e:	781b      	ldrb	r3, [r3, #0]
   d6360:	4819      	ldr	r0, [pc, #100]	; (d63c8 <loop+0x714>)
   d6362:	f7fe f90c 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
   d6366:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d636a:	f002 f877 	bl	d845c <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d636e:	2300      	movs	r3, #0
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d6370:	4a0d      	ldr	r2, [pc, #52]	; (d63a8 <loop+0x6f4>)
   d6372:	480e      	ldr	r0, [pc, #56]	; (d63ac <loop+0x6f8>)
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
   d6374:	6123      	str	r3, [r4, #16]
        fram.put(FRAM::systemStatusAddr,sysStatus);                   // Won't get back to the main loop
   d6376:	2101      	movs	r1, #1
   d6378:	f7fe ffa3 	bl	d52c2 <_ZN6MB85RC3putI22systemStatus_structureEERKT_jS4_>
        ab1805.deepPowerDown();                                       // 30 second power cycle of Boron including cellular modem, carrier board and all peripherals
   d637c:	211e      	movs	r1, #30
   d637e:	4814      	ldr	r0, [pc, #80]	; (d63d0 <loop+0x71c>)
   d6380:	f000 fbec 	bl	d6b5c <_ZN6AB180513deepPowerDownEi>
   d6384:	e548      	b.n	d5e18 <loop+0x164>
   d6386:	bf00      	nop
   d6388:	2003e3d0 	.word	0x2003e3d0
   d638c:	2003e37f 	.word	0x2003e37f
   d6390:	2003e414 	.word	0x2003e414
   d6394:	00015f90 	.word	0x00015f90
   d6398:	2003e418 	.word	0x2003e418
   d639c:	2003e350 	.word	0x2003e350
   d63a0:	2003e450 	.word	0x2003e450
   d63a4:	2003e40c 	.word	0x2003e40c
   d63a8:	2003e41c 	.word	0x2003e41c
   d63ac:	2003e380 	.word	0x2003e380
   d63b0:	2003e53c 	.word	0x2003e53c
   d63b4:	000dc7d0 	.word	0x000dc7d0
   d63b8:	2003e2d5 	.word	0x2003e2d5
   d63bc:	000dc7fd 	.word	0x000dc7fd
   d63c0:	2003e2d4 	.word	0x2003e2d4
   d63c4:	000dc81c 	.word	0x000dc81c
   d63c8:	2003e3d4 	.word	0x2003e3d4
   d63cc:	000dc822 	.word	0x000dc822
   d63d0:	2003e2e4 	.word	0x2003e2e4

000d63d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d63d4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d63d6:	2000      	movs	r0, #0
   d63d8:	f001 ff44 	bl	d8264 <spark_sync_time_pending>
   d63dc:	b128      	cbz	r0, d63ea <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d63de:	f001 ff19 	bl	d8214 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d63e2:	f080 0001 	eor.w	r0, r0, #1
   d63e6:	b2c0      	uxtb	r0, r0
    }
   d63e8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d63ea:	2001      	movs	r0, #1
   d63ec:	e7fc      	b.n	d63e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d63f0 <_Z11setTimeZone6String>:
 * Values outside this range will cause the function to return 0 to indicate an invalid entry.
 * 
 * @return 1 if successful, 0 if invalid command
 */
int setTimeZone(String command)
{
   d63f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d63f4:	b0c8      	sub	sp, #288	; 0x120
   d63f6:	4680      	mov	r8, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d63f8:	f001 ff0c 	bl	d8214 <spark_cloud_flag_connected>
        if (!connected()) {
   d63fc:	b110      	cbz	r0, d6404 <_Z11setTimeZone6String+0x14>
        return spark_sync_time(NULL);
   d63fe:	2000      	movs	r0, #0
   d6400:	f001 ff28 	bl	d8254 <spark_sync_time>
        return hal_timer_millis(nullptr);
   d6404:	2000      	movs	r0, #0
   d6406:	f001 fcb9 	bl	d7d7c <hal_timer_millis>
   d640a:	f04f 0a00 	mov.w	sl, #0
   d640e:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
   d6410:	f247 562f 	movw	r6, #29999	; 0x752f
   d6414:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d6416:	2000      	movs	r0, #0
   d6418:	f001 fcb0 	bl	d7d7c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d641c:	ebb0 0409 	subs.w	r4, r0, r9
   d6420:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
   d6424:	42af      	cmp	r7, r5
   d6426:	bf08      	it	eq
   d6428:	42a6      	cmpeq	r6, r4
   d642a:	d305      	bcc.n	d6438 <_Z11setTimeZone6String+0x48>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
   d642c:	f7ff ffd2 	bl	d63d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
   d6430:	b910      	cbnz	r0, d6438 <_Z11setTimeZone6String+0x48>
            spark_process();
   d6432:	f001 fedf 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   d6436:	e7ee      	b.n	d6416 <_Z11setTimeZone6String+0x26>
   d6438:	f7ff ffcc 	bl	d63d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d643c:	f8d8 0000 	ldr.w	r0, [r8]
   d6440:	220a      	movs	r2, #10
   d6442:	a903      	add	r1, sp, #12
   d6444:	f005 febc 	bl	dc1c0 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d6448:	f100 030c 	add.w	r3, r0, #12
   d644c:	b2db      	uxtb	r3, r3
   d644e:	2b18      	cmp	r3, #24
   d6450:	d848      	bhi.n	d64e4 <_Z11setTimeZone6String+0xf4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
   d6452:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d6454:	ee07 5a90 	vmov	s15, r5
   d6458:	4b27      	ldr	r3, [pc, #156]	; (d64f8 <_Z11setTimeZone6String+0x108>)
   d645a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d645e:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
   d6460:	ed83 0a05 	vstr	s0, [r3, #20]
  Time.zone(sysStatus.timezone);
   d6464:	f004 fbde 	bl	dac24 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
   d6468:	4b24      	ldr	r3, [pc, #144]	; (d64fc <_Z11setTimeZone6String+0x10c>)
   d646a:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d646c:	f004 fd88 	bl	daf80 <_ZN9TimeClass5localEv>
   d6470:	4606      	mov	r6, r0
   d6472:	f004 fd40 	bl	daef6 <_ZN9TimeClass3nowEv>
   d6476:	1a30      	subs	r0, r6, r0
   d6478:	f005 f9c2 	bl	db800 <__aeabi_i2d>
   d647c:	a31c      	add	r3, pc, #112	; (adr r3, d64f0 <_Z11setTimeZone6String+0x100>)
   d647e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6482:	f005 fb51 	bl	dbb28 <__aeabi_ddiv>
   d6486:	4a1e      	ldr	r2, [pc, #120]	; (d6500 <_Z11setTimeZone6String+0x110>)
   d6488:	e9cd 0100 	strd	r0, r1, [sp]
   d648c:	210a      	movs	r1, #10
   d648e:	481d      	ldr	r0, [pc, #116]	; (d6504 <_Z11setTimeZone6String+0x114>)
   d6490:	f001 ff90 	bl	d83b4 <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6494:	f001 febe 	bl	d8214 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d6498:	b310      	cbz	r0, d64e0 <_Z11setTimeZone6String+0xf0>
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
   d649a:	462b      	mov	r3, r5
   d649c:	4a1a      	ldr	r2, [pc, #104]	; (d6508 <_Z11setTimeZone6String+0x118>)
   d649e:	4d1b      	ldr	r5, [pc, #108]	; (d650c <_Z11setTimeZone6String+0x11c>)
   d64a0:	f44f 7180 	mov.w	r1, #256	; 0x100
        val_(0) {
   d64a4:	2600      	movs	r6, #0
   d64a6:	a808      	add	r0, sp, #32
   d64a8:	f001 ff84 	bl	d83b4 <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
   d64ac:	f88d 6000 	strb.w	r6, [sp]
   d64b0:	4917      	ldr	r1, [pc, #92]	; (d6510 <_Z11setTimeZone6String+0x120>)
   d64b2:	782b      	ldrb	r3, [r5, #0]
   d64b4:	4817      	ldr	r0, [pc, #92]	; (d6514 <_Z11setTimeZone6String+0x124>)
   d64b6:	aa08      	add	r2, sp, #32
   d64b8:	f7fe f861 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
   d64bc:	f004 fd1b 	bl	daef6 <_ZN9TimeClass3nowEv>
   d64c0:	4602      	mov	r2, r0
   d64c2:	17c3      	asrs	r3, r0, #31
   d64c4:	a804      	add	r0, sp, #16
   d64c6:	f004 fc13 	bl	dacf0 <_ZN9TimeClass7timeStrEx>
   d64ca:	f88d 6000 	strb.w	r6, [sp]
   d64ce:	782b      	ldrb	r3, [r5, #0]
   d64d0:	9a04      	ldr	r2, [sp, #16]
   d64d2:	490f      	ldr	r1, [pc, #60]	; (d6510 <_Z11setTimeZone6String+0x120>)
   d64d4:	480f      	ldr	r0, [pc, #60]	; (d6514 <_Z11setTimeZone6String+0x124>)
   d64d6:	f7fe f852 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d64da:	a804      	add	r0, sp, #16
   d64dc:	f004 f986 	bl	da7ec <_ZN6StringD1Ev>
  }

  return 1;
   d64e0:	4620      	mov	r0, r4
   d64e2:	e000      	b.n	d64e6 <_Z11setTimeZone6String+0xf6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
   d64e4:	2000      	movs	r0, #0
}
   d64e6:	b048      	add	sp, #288	; 0x120
   d64e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d64ec:	f3af 8000 	nop.w
   d64f0:	00000000 	.word	0x00000000
   d64f4:	40ac2000 	.word	0x40ac2000
   d64f8:	2003e41c 	.word	0x2003e41c
   d64fc:	2003e44c 	.word	0x2003e44c
   d6500:	000dc73e 	.word	0x000dc73e
   d6504:	2003e375 	.word	0x2003e375
   d6508:	000dc918 	.word	0x000dc918
   d650c:	2003e454 	.word	0x2003e454
   d6510:	000dc654 	.word	0x000dc654
   d6514:	2003e3d4 	.word	0x2003e3d4

000d6518 <_Z8isDSTusav>:
 * Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
 * The code works in from months, days and hours in succession toward the two transitions
 *
 * @return true if currently observing DST, false if observing standard time
 */
bool isDSTusa() {
   d6518:	b538      	push	{r3, r4, r5, lr}
  int dayOfMonth = Time.day();
   d651a:	f004 fd15 	bl	daf48 <_ZN9TimeClass3dayEv>
   d651e:	4605      	mov	r5, r0
  int month = Time.month();
   d6520:	f004 fd26 	bl	daf70 <_ZN9TimeClass5monthEv>
   d6524:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d6526:	f004 fd1b 	bl	daf60 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
   d652a:	1f23      	subs	r3, r4, #4
   d652c:	2b06      	cmp	r3, #6
   d652e:	d90e      	bls.n	d654e <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
   d6530:	1ee3      	subs	r3, r4, #3
   d6532:	2b08      	cmp	r3, #8
   d6534:	d80d      	bhi.n	d6552 <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
   d6536:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
   d6538:	1a2d      	subs	r5, r5, r0
   d653a:	d504      	bpl.n	d6546 <_Z8isDSTusav+0x2e>
   d653c:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d653e:	bf14      	ite	ne
   d6540:	2000      	movne	r0, #0
   d6542:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { // In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d6544:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
   d6546:	2d07      	cmp	r5, #7
   d6548:	dd03      	ble.n	d6552 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
   d654a:	2c03      	cmp	r4, #3
   d654c:	e7f7      	b.n	d653e <_Z8isDSTusav+0x26>
    return true;
   d654e:	2001      	movs	r0, #1
   d6550:	e7f8      	b.n	d6544 <_Z8isDSTusav+0x2c>
    return false;
   d6552:	2000      	movs	r0, #0
   d6554:	e7f6      	b.n	d6544 <_Z8isDSTusav+0x2c>
	...

000d6558 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
   d6558:	b570      	push	{r4, r5, r6, lr}
   d655a:	ed2d 8b02 	vpush	{d8}
   d655e:	b0c8      	sub	sp, #288	; 0x120
   d6560:	4605      	mov	r5, r0
  time_t t = Time.now();
   d6562:	f004 fcc8 	bl	daef6 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d6566:	220a      	movs	r2, #10
  time_t t = Time.now();
   d6568:	4604      	mov	r4, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
   d656a:	a903      	add	r1, sp, #12
   d656c:	6828      	ldr	r0, [r5, #0]
   d656e:	f005 fe27 	bl	dc1c0 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d6572:	b2c3      	uxtb	r3, r0
   d6574:	2b02      	cmp	r3, #2
   d6576:	d859      	bhi.n	d662c <_Z12setDSTOffset6String+0xd4>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
   d6578:	b243      	sxtb	r3, r0
   d657a:	ee08 3a10 	vmov	s16, r3
   d657e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d6582:	eeb0 0a48 	vmov.f32	s0, s16
   d6586:	f004 fb6d 	bl	dac64 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
   d658a:	4b2d      	ldr	r3, [pc, #180]	; (d6640 <_Z12setDSTOffset6String+0xe8>)
   d658c:	ed83 8a06 	vstr	s16, [r3, #24]
  systemStatusWriteNeeded = true;
   d6590:	4b2c      	ldr	r3, [pc, #176]	; (d6644 <_Z12setDSTOffset6String+0xec>)
   d6592:	2201      	movs	r2, #1
   d6594:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
   d6596:	ee18 0a10 	vmov	r0, s16
   d659a:	f005 f943 	bl	db824 <__aeabi_f2d>
   d659e:	4a2a      	ldr	r2, [pc, #168]	; (d6648 <_Z12setDSTOffset6String+0xf0>)
   d65a0:	e9cd 0100 	strd	r0, r1, [sp]
   d65a4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d65a8:	a808      	add	r0, sp, #32
   d65aa:	f001 ff03 	bl	d83b4 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d65ae:	f004 fc85 	bl	daebc <_ZN9TimeClass7isValidEv>
   d65b2:	b128      	cbz	r0, d65c0 <_Z12setDSTOffset6String+0x68>
   d65b4:	f7ff ffb0 	bl	d6518 <_Z8isDSTusav>
   d65b8:	2800      	cmp	r0, #0
   d65ba:	d034      	beq.n	d6626 <_Z12setDSTOffset6String+0xce>
   d65bc:	f004 fb70 	bl	daca0 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
   d65c0:	f004 fcde 	bl	daf80 <_ZN9TimeClass5localEv>
   d65c4:	4605      	mov	r5, r0
   d65c6:	f004 fc96 	bl	daef6 <_ZN9TimeClass3nowEv>
   d65ca:	1a28      	subs	r0, r5, r0
   d65cc:	f005 f918 	bl	db800 <__aeabi_i2d>
   d65d0:	a319      	add	r3, pc, #100	; (adr r3, d6638 <_Z12setDSTOffset6String+0xe0>)
   d65d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d65d6:	f005 faa7 	bl	dbb28 <__aeabi_ddiv>
   d65da:	4a1c      	ldr	r2, [pc, #112]	; (d664c <_Z12setDSTOffset6String+0xf4>)
   d65dc:	e9cd 0100 	strd	r0, r1, [sp]
   d65e0:	210a      	movs	r1, #10
   d65e2:	481b      	ldr	r0, [pc, #108]	; (d6650 <_Z12setDSTOffset6String+0xf8>)
   d65e4:	f001 fee6 	bl	d83b4 <snprintf>
   d65e8:	f001 fe14 	bl	d8214 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d65ec:	b1c8      	cbz	r0, d6622 <_Z12setDSTOffset6String+0xca>
    publishQueue.publish("Time",data, PRIVATE);
   d65ee:	4d19      	ldr	r5, [pc, #100]	; (d6654 <_Z12setDSTOffset6String+0xfc>)
   d65f0:	4919      	ldr	r1, [pc, #100]	; (d6658 <_Z12setDSTOffset6String+0x100>)
   d65f2:	481a      	ldr	r0, [pc, #104]	; (d665c <_Z12setDSTOffset6String+0x104>)
   d65f4:	2600      	movs	r6, #0
   d65f6:	f88d 6000 	strb.w	r6, [sp]
   d65fa:	782b      	ldrb	r3, [r5, #0]
   d65fc:	aa08      	add	r2, sp, #32
   d65fe:	f7fd ffbe 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
   d6602:	4622      	mov	r2, r4
   d6604:	17e3      	asrs	r3, r4, #31
   d6606:	a804      	add	r0, sp, #16
   d6608:	f004 fb72 	bl	dacf0 <_ZN9TimeClass7timeStrEx>
   d660c:	f88d 6000 	strb.w	r6, [sp]
   d6610:	782b      	ldrb	r3, [r5, #0]
   d6612:	9a04      	ldr	r2, [sp, #16]
   d6614:	4910      	ldr	r1, [pc, #64]	; (d6658 <_Z12setDSTOffset6String+0x100>)
   d6616:	4811      	ldr	r0, [pc, #68]	; (d665c <_Z12setDSTOffset6String+0x104>)
   d6618:	f7fd ffb1 	bl	d457e <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d661c:	a804      	add	r0, sp, #16
   d661e:	f004 f8e5 	bl	da7ec <_ZN6StringD1Ev>
  return 1;
   d6622:	2001      	movs	r0, #1
   d6624:	e003      	b.n	d662e <_Z12setDSTOffset6String+0xd6>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
   d6626:	f004 fb47 	bl	dacb8 <_ZN9TimeClass6endDSTEv>
   d662a:	e7c9      	b.n	d65c0 <_Z12setDSTOffset6String+0x68>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d662c:	2000      	movs	r0, #0
}
   d662e:	b048      	add	sp, #288	; 0x120
   d6630:	ecbd 8b02 	vpop	{d8}
   d6634:	bd70      	pop	{r4, r5, r6, pc}
   d6636:	bf00      	nop
   d6638:	00000000 	.word	0x00000000
   d663c:	40ac2000 	.word	0x40ac2000
   d6640:	2003e41c 	.word	0x2003e41c
   d6644:	2003e44c 	.word	0x2003e44c
   d6648:	000dc92c 	.word	0x000dc92c
   d664c:	000dc73e 	.word	0x000dc73e
   d6650:	2003e375 	.word	0x2003e375
   d6654:	2003e454 	.word	0x2003e454
   d6658:	000dc654 	.word	0x000dc654
   d665c:	2003e3d4 	.word	0x2003e3d4

000d6660 <_GLOBAL__sub_I__Z11setTimeZone6String>:
        val_(val) {
   d6660:	4b01      	ldr	r3, [pc, #4]	; (d6668 <_GLOBAL__sub_I__Z11setTimeZone6String+0x8>)
   d6662:	2201      	movs	r2, #1
   d6664:	701a      	strb	r2, [r3, #0]
  if (secSinceMidnightLocal >= 2*3600)
  { // Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
   d6666:	4770      	bx	lr
   d6668:	2003e454 	.word	0x2003e454

000d666c <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d666c:	4770      	bx	lr

000d666e <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d666e:	b510      	push	{r4, lr}
}
   d6670:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d6672:	4604      	mov	r4, r0
}
   d6674:	f004 ff68 	bl	db548 <_ZdlPvj>
   d6678:	4620      	mov	r0, r4
   d667a:	bd10      	pop	{r4, pc}

000d667c <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d667c:	b40e      	push	{r1, r2, r3}
   d667e:	b510      	push	{r4, lr}
   d6680:	b08d      	sub	sp, #52	; 0x34
   d6682:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d6684:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d6686:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d668a:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d668c:	2300      	movs	r3, #0
   d668e:	2020      	movs	r0, #32
   d6690:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d6694:	e9cd 4200 	strd	r4, r2, [sp]
   d6698:	2001      	movs	r0, #1
   d669a:	aa04      	add	r2, sp, #16
   d669c:	f001 fcfe 	bl	d809c <log_message_v>
}
   d66a0:	b00d      	add	sp, #52	; 0x34
   d66a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d66a6:	b003      	add	sp, #12
   d66a8:	4770      	bx	lr
	...

000d66ac <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d66ac:	b510      	push	{r4, lr}
   d66ae:	7202      	strb	r2, [r0, #8]
   d66b0:	22ff      	movs	r2, #255	; 0xff
   d66b2:	8142      	strh	r2, [r0, #10]
   d66b4:	2200      	movs	r2, #0
   d66b6:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d66ba:	6142      	str	r2, [r0, #20]
   d66bc:	7602      	strb	r2, [r0, #24]
   d66be:	61c2      	str	r2, [r0, #28]
    instance = this;
   d66c0:	4a02      	ldr	r2, [pc, #8]	; (d66cc <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d66c2:	4c03      	ldr	r4, [pc, #12]	; (d66d0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d66c4:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d66c6:	e9c0 4100 	strd	r4, r1, [r0]
}
   d66ca:	bd10      	pop	{r4, pc}
   d66cc:	2003e45c 	.word	0x2003e45c
   d66d0:	000dcb8c 	.word	0x000dcb8c

000d66d4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d66d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d66d8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d66dc:	4604      	mov	r4, r0
   d66de:	4689      	mov	r9, r1
   d66e0:	4616      	mov	r6, r2
   d66e2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d66e4:	f1b8 0f00 	cmp.w	r8, #0
   d66e8:	d002      	beq.n	d66f0 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d66ea:	6840      	ldr	r0, [r0, #4]
   d66ec:	f002 fc22 	bl	d8f34 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d66f0:	7a21      	ldrb	r1, [r4, #8]
   d66f2:	6860      	ldr	r0, [r4, #4]
   d66f4:	f002 fbf8 	bl	d8ee8 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d66f8:	6860      	ldr	r0, [r4, #4]
   d66fa:	6803      	ldr	r3, [r0, #0]
   d66fc:	4649      	mov	r1, r9
   d66fe:	689b      	ldr	r3, [r3, #8]
   d6700:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d6702:	6860      	ldr	r0, [r4, #4]
   d6704:	2100      	movs	r1, #0
   d6706:	f002 fc0e 	bl	d8f26 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d670a:	4605      	mov	r5, r0
   d670c:	bb00      	cbnz	r0, d6750 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d670e:	2301      	movs	r3, #1
   d6710:	7a21      	ldrb	r1, [r4, #8]
   d6712:	6860      	ldr	r0, [r4, #4]
   d6714:	463a      	mov	r2, r7
   d6716:	f002 fbd2 	bl	d8ebe <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d671a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d671c:	4603      	mov	r3, r0
        if (count == num) {
   d671e:	d109      	bne.n	d6734 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d6720:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d6722:	42be      	cmp	r6, r7
   d6724:	d01c      	beq.n	d6760 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d6726:	6860      	ldr	r0, [r4, #4]
   d6728:	6803      	ldr	r3, [r0, #0]
   d672a:	695b      	ldr	r3, [r3, #20]
   d672c:	4798      	blx	r3
   d672e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d6732:	e7f6      	b.n	d6722 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d6734:	490b      	ldr	r1, [pc, #44]	; (d6764 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d6736:	480c      	ldr	r0, [pc, #48]	; (d6768 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d6738:	464a      	mov	r2, r9
   d673a:	f7fd ff09 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d673e:	f1b8 0f00 	cmp.w	r8, #0
   d6742:	d002      	beq.n	d674a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d6744:	6860      	ldr	r0, [r4, #4]
   d6746:	f002 fbfe 	bl	d8f46 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d674a:	4628      	mov	r0, r5
   d674c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d6750:	4603      	mov	r3, r0
   d6752:	4906      	ldr	r1, [pc, #24]	; (d676c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d6754:	4804      	ldr	r0, [pc, #16]	; (d6768 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d6756:	464a      	mov	r2, r9
   d6758:	f7fd fefa 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d675c:	2500      	movs	r5, #0
   d675e:	e7ee      	b.n	d673e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d6760:	2501      	movs	r5, #1
   d6762:	e7ec      	b.n	d673e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d6764:	000dc93d 	.word	0x000dc93d
   d6768:	2003e458 	.word	0x2003e458
   d676c:	000dc962 	.word	0x000dc962

000d6770 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d6770:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d6772:	9300      	str	r3, [sp, #0]
   d6774:	2301      	movs	r3, #1
   d6776:	f7ff ffad 	bl	d66d4 <_ZN6AB180513readRegistersEhPhjb>
}
   d677a:	b003      	add	sp, #12
   d677c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6780 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d6780:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d6782:	8943      	ldrh	r3, [r0, #10]
   d6784:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d6786:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d6788:	d010      	beq.n	d67ac <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d678a:	4e19      	ldr	r6, [pc, #100]	; (d67f0 <_ZN6AB180510detectChipEv+0x70>)
   d678c:	4d19      	ldr	r5, [pc, #100]	; (d67f4 <_ZN6AB180510detectChipEv+0x74>)
   d678e:	f001 fae5 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d6792:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d6796:	d209      	bcs.n	d67ac <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d6798:	8960      	ldrh	r0, [r4, #10]
   d679a:	f004 fe31 	bl	db400 <digitalRead>
   d679e:	2801      	cmp	r0, #1
   d67a0:	d004      	beq.n	d67ac <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d67a2:	4631      	mov	r1, r6
   d67a4:	4628      	mov	r0, r5
   d67a6:	f7fd febc 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
   d67aa:	e7f0      	b.n	d678e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d67ac:	2301      	movs	r3, #1
   d67ae:	f10d 0207 	add.w	r2, sp, #7
   d67b2:	2128      	movs	r1, #40	; 0x28
   d67b4:	4620      	mov	r0, r4
   d67b6:	f7ff ffdb 	bl	d6770 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d67ba:	b930      	cbnz	r0, d67ca <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d67bc:	480d      	ldr	r0, [pc, #52]	; (d67f4 <_ZN6AB180510detectChipEv+0x74>)
   d67be:	490e      	ldr	r1, [pc, #56]	; (d67f8 <_ZN6AB180510detectChipEv+0x78>)
   d67c0:	f7fd feaf 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
   d67c4:	2000      	movs	r0, #0
}
   d67c6:	b002      	add	sp, #8
   d67c8:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d67ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d67ce:	2b18      	cmp	r3, #24
   d67d0:	d1f4      	bne.n	d67bc <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d67d2:	2301      	movs	r3, #1
   d67d4:	f10d 0207 	add.w	r2, sp, #7
   d67d8:	2129      	movs	r1, #41	; 0x29
   d67da:	4620      	mov	r0, r4
   d67dc:	f7ff ffc8 	bl	d6770 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d67e0:	2800      	cmp	r0, #0
   d67e2:	d0eb      	beq.n	d67bc <_ZN6AB180510detectChipEv+0x3c>
   d67e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d67e8:	2b05      	cmp	r3, #5
   d67ea:	d1e7      	bne.n	d67bc <_ZN6AB180510detectChipEv+0x3c>
   d67ec:	e7eb      	b.n	d67c6 <_ZN6AB180510detectChipEv+0x46>
   d67ee:	bf00      	nop
   d67f0:	000dc986 	.word	0x000dc986
   d67f4:	2003e458 	.word	0x2003e458
   d67f8:	000dc99b 	.word	0x000dc99b

000d67fc <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   d67fc:	b507      	push	{r0, r1, r2, lr}
   d67fe:	4613      	mov	r3, r2
    uint8_t value = 0;
   d6800:	2200      	movs	r2, #0
   d6802:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   d6806:	f10d 0207 	add.w	r2, sp, #7
   d680a:	f7ff ffb1 	bl	d6770 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   d680e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6812:	b003      	add	sp, #12
   d6814:	f85d fb04 	ldr.w	pc, [sp], #4

000d6818 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d6818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d681c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d6820:	4604      	mov	r4, r0
   d6822:	460f      	mov	r7, r1
   d6824:	4615      	mov	r5, r2
   d6826:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d6828:	f1b8 0f00 	cmp.w	r8, #0
   d682c:	d002      	beq.n	d6834 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d682e:	6840      	ldr	r0, [r0, #4]
   d6830:	f002 fb80 	bl	d8f34 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d6834:	7a21      	ldrb	r1, [r4, #8]
   d6836:	6860      	ldr	r0, [r4, #4]
   d6838:	f002 fb56 	bl	d8ee8 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d683c:	6860      	ldr	r0, [r4, #4]
   d683e:	6803      	ldr	r3, [r0, #0]
   d6840:	4639      	mov	r1, r7
   d6842:	689b      	ldr	r3, [r3, #8]
   d6844:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d6846:	442e      	add	r6, r5
   d6848:	42b5      	cmp	r5, r6
   d684a:	6860      	ldr	r0, [r4, #4]
   d684c:	d005      	beq.n	d685a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d684e:	6803      	ldr	r3, [r0, #0]
   d6850:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6854:	689b      	ldr	r3, [r3, #8]
   d6856:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d6858:	e7f6      	b.n	d6848 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d685a:	2101      	movs	r1, #1
   d685c:	f002 fb63 	bl	d8f26 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d6860:	4603      	mov	r3, r0
   d6862:	b170      	cbz	r0, d6882 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d6864:	4908      	ldr	r1, [pc, #32]	; (d6888 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d6866:	4809      	ldr	r0, [pc, #36]	; (d688c <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d6868:	463a      	mov	r2, r7
   d686a:	f7fd fe71 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d686e:	2500      	movs	r5, #0
    }

    if (lock) {
   d6870:	f1b8 0f00 	cmp.w	r8, #0
   d6874:	d002      	beq.n	d687c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d6876:	6860      	ldr	r0, [r4, #4]
   d6878:	f002 fb65 	bl	d8f46 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d687c:	4628      	mov	r0, r5
   d687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d6882:	2501      	movs	r5, #1
   d6884:	e7f4      	b.n	d6870 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d6886:	bf00      	nop
   d6888:	000dc9a8 	.word	0x000dc9a8
   d688c:	2003e458 	.word	0x2003e458

000d6890 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d6890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6892:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d6896:	9300      	str	r3, [sp, #0]
   d6898:	f10d 020f 	add.w	r2, sp, #15
   d689c:	2301      	movs	r3, #1
   d689e:	f7ff ffbb 	bl	d6818 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d68a2:	b005      	add	sp, #20
   d68a4:	f85d fb04 	ldr.w	pc, [sp], #4

000d68a8 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d68a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d68aa:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d68ac:	460c      	mov	r4, r1
   d68ae:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d68b0:	491a      	ldr	r1, [pc, #104]	; (d691c <_ZN6AB18056setWDTEi+0x74>)
   d68b2:	481b      	ldr	r0, [pc, #108]	; (d6920 <_ZN6AB18056setWDTEi+0x78>)
   d68b4:	f7fd fe35 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d68b8:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d68ba:	bfb8      	it	lt
   d68bc:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d68be:	b97c      	cbnz	r4, d68e0 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d68c0:	2301      	movs	r3, #1
   d68c2:	4622      	mov	r2, r4
   d68c4:	211b      	movs	r1, #27
   d68c6:	4628      	mov	r0, r5
   d68c8:	f7ff ffe2 	bl	d6890 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d68cc:	4915      	ldr	r1, [pc, #84]	; (d6924 <_ZN6AB18056setWDTEi+0x7c>)
   d68ce:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d68d0:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d68d2:	4813      	ldr	r0, [pc, #76]	; (d6920 <_ZN6AB18056setWDTEi+0x78>)
   d68d4:	f7ff fed2 	bl	d667c <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d68d8:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d68da:	616c      	str	r4, [r5, #20]
}
   d68dc:	4630      	mov	r0, r6
   d68de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d68e0:	2c03      	cmp	r4, #3
   d68e2:	dd19      	ble.n	d6918 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d68e4:	10a7      	asrs	r7, r4, #2
   d68e6:	2f1f      	cmp	r7, #31
   d68e8:	bfa8      	it	ge
   d68ea:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d68ec:	00ba      	lsls	r2, r7, #2
   d68ee:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d68f2:	2301      	movs	r3, #1
   d68f4:	b2d2      	uxtb	r2, r2
   d68f6:	211b      	movs	r1, #27
   d68f8:	4628      	mov	r0, r5
   d68fa:	f7ff ffc9 	bl	d6890 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d68fe:	463a      	mov	r2, r7
   d6900:	4603      	mov	r3, r0
   d6902:	4909      	ldr	r1, [pc, #36]	; (d6928 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d6904:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d6906:	4806      	ldr	r0, [pc, #24]	; (d6920 <_ZN6AB18056setWDTEi+0x78>)
   d6908:	f7ff feb8 	bl	d667c <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d690c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d6910:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d6912:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d6914:	616f      	str	r7, [r5, #20]
   d6916:	e7e1      	b.n	d68dc <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d6918:	2701      	movs	r7, #1
   d691a:	e7e7      	b.n	d68ec <_ZN6AB18056setWDTEi+0x44>
   d691c:	000dc9cd 	.word	0x000dc9cd
   d6920:	2003e458 	.word	0x2003e458
   d6924:	000dc9d7 	.word	0x000dc9d7
   d6928:	000dc9f3 	.word	0x000dc9f3

000d692c <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d692c:	460b      	mov	r3, r1
    if (instance) {
   d692e:	4907      	ldr	r1, [pc, #28]	; (d694c <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d6930:	4602      	mov	r2, r0
    if (instance) {
   d6932:	6808      	ldr	r0, [r1, #0]
   d6934:	b148      	cbz	r0, d694a <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d6936:	2b00      	cmp	r3, #0
   d6938:	bf08      	it	eq
   d693a:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d693e:	d104      	bne.n	d694a <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d6940:	68c3      	ldr	r3, [r0, #12]
   d6942:	b113      	cbz	r3, d694a <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d6944:	2100      	movs	r1, #0
   d6946:	f7ff bfaf 	b.w	d68a8 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d694a:	4770      	bx	lr
   d694c:	2003e45c 	.word	0x2003e45c

000d6950 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d6950:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6954:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d6958:	4605      	mov	r5, r0
   d695a:	4616      	mov	r6, r2
   d695c:	461f      	mov	r7, r3
    if (lock) {
   d695e:	f1b8 0f00 	cmp.w	r8, #0
   d6962:	d004      	beq.n	d696e <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d6964:	6840      	ldr	r0, [r0, #4]
   d6966:	9101      	str	r1, [sp, #4]
   d6968:	f002 fae4 	bl	d8f34 <_ZN7TwoWire4lockEv>
   d696c:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d696e:	9101      	str	r1, [sp, #4]
   d6970:	2300      	movs	r3, #0
   d6972:	f10d 020f 	add.w	r2, sp, #15
   d6976:	4628      	mov	r0, r5
   d6978:	f7ff fefa 	bl	d6770 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d697c:	4604      	mov	r4, r0
   d697e:	b160      	cbz	r0, d699a <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d6980:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d6984:	ea03 0206 	and.w	r2, r3, r6
   d6988:	433a      	orrs	r2, r7
        if (newValue != value) {
   d698a:	4293      	cmp	r3, r2
   d698c:	d005      	beq.n	d699a <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d698e:	9901      	ldr	r1, [sp, #4]
   d6990:	2300      	movs	r3, #0
   d6992:	4628      	mov	r0, r5
   d6994:	f7ff ff7c 	bl	d6890 <_ZN6AB180513writeRegisterEhhb>
   d6998:	4604      	mov	r4, r0
    if (lock) {
   d699a:	f1b8 0f00 	cmp.w	r8, #0
   d699e:	d002      	beq.n	d69a6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d69a0:	6868      	ldr	r0, [r5, #4]
   d69a2:	f002 fad0 	bl	d8f46 <_ZN7TwoWire6unlockEv>
}
   d69a6:	4620      	mov	r0, r4
   d69a8:	b004      	add	sp, #16
   d69aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d69ae <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d69ae:	b513      	push	{r0, r1, r4, lr}
   d69b0:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d69b2:	f10d 0207 	add.w	r2, sp, #7
   d69b6:	f7ff fedb 	bl	d6770 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d69ba:	b128      	cbz	r0, d69c8 <_ZN6AB180510isBitClearEhhb+0x1a>
   d69bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d69c0:	421c      	tst	r4, r3
   d69c2:	bf0c      	ite	eq
   d69c4:	2001      	moveq	r0, #1
   d69c6:	2000      	movne	r0, #0
}
   d69c8:	b002      	add	sp, #8
   d69ca:	bd10      	pop	{r4, pc}

000d69cc <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d69cc:	b513      	push	{r0, r1, r4, lr}
   d69ce:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d69d0:	f10d 0207 	add.w	r2, sp, #7
   d69d4:	f7ff fecc 	bl	d6770 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d69d8:	b128      	cbz	r0, d69e6 <_ZN6AB18058isBitSetEhhb+0x1a>
   d69da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d69de:	421c      	tst	r4, r3
   d69e0:	bf14      	ite	ne
   d69e2:	2001      	movne	r0, #1
   d69e4:	2000      	moveq	r0, #0
}
   d69e6:	b002      	add	sp, #8
   d69e8:	bd10      	pop	{r4, pc}

000d69ea <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d69ea:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d69ec:	43d2      	mvns	r2, r2
   d69ee:	9300      	str	r3, [sp, #0]
   d69f0:	b2d2      	uxtb	r2, r2
   d69f2:	2300      	movs	r3, #0
   d69f4:	f7ff ffac 	bl	d6950 <_ZN6AB180512maskRegisterEhhhb>
}
   d69f8:	b003      	add	sp, #12
   d69fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6a00 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d6a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d6a02:	2301      	movs	r3, #1
   d6a04:	f10d 0207 	add.w	r2, sp, #7
   d6a08:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d6a0a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d6a0c:	f7ff feb0 	bl	d6770 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d6a10:	4605      	mov	r5, r0
   d6a12:	b938      	cbnz	r0, d6a24 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d6a14:	491e      	ldr	r1, [pc, #120]	; (d6a90 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d6a16:	481f      	ldr	r0, [pc, #124]	; (d6a94 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6a18:	22ad      	movs	r2, #173	; 0xad
   d6a1a:	f7fd fd99 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
}
   d6a1e:	4628      	mov	r0, r5
   d6a20:	b003      	add	sp, #12
   d6a22:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d6a24:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6a28:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d6a2c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d6a30:	d00b      	beq.n	d6a4a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6a32:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d6a34:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d6a36:	210f      	movs	r1, #15
   d6a38:	4620      	mov	r0, r4
   d6a3a:	f7ff ffd6 	bl	d69ea <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d6a3e:	4a16      	ldr	r2, [pc, #88]	; (d6a98 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d6a40:	4916      	ldr	r1, [pc, #88]	; (d6a9c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d6a42:	4814      	ldr	r0, [pc, #80]	; (d6a94 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d6a44:	f7fd fd6d 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
   d6a48:	e7e9      	b.n	d6a1e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d6a4a:	2208      	movs	r2, #8
   d6a4c:	2117      	movs	r1, #23
   d6a4e:	4620      	mov	r0, r4
   d6a50:	f7ff ffbc 	bl	d69cc <_ZN6AB18058isBitSetEhhb>
   d6a54:	b118      	cbz	r0, d6a5e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6a56:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d6a58:	4a11      	ldr	r2, [pc, #68]	; (d6aa0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d6a5a:	61e3      	str	r3, [r4, #28]
   d6a5c:	e7f0      	b.n	d6a40 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d6a5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d6a62:	071a      	lsls	r2, r3, #28
   d6a64:	d509      	bpl.n	d6a7a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d6a66:	2303      	movs	r3, #3
   d6a68:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d6a6a:	2208      	movs	r2, #8
   d6a6c:	2301      	movs	r3, #1
   d6a6e:	210f      	movs	r1, #15
   d6a70:	4620      	mov	r0, r4
   d6a72:	f7ff ffba 	bl	d69ea <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d6a76:	4a0b      	ldr	r2, [pc, #44]	; (d6aa4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d6a78:	e7e2      	b.n	d6a40 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d6a7a:	075b      	lsls	r3, r3, #29
   d6a7c:	d5cf      	bpl.n	d6a1e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d6a7e:	2204      	movs	r2, #4
   d6a80:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d6a82:	2301      	movs	r3, #1
   d6a84:	210f      	movs	r1, #15
   d6a86:	4620      	mov	r0, r4
   d6a88:	f7ff ffaf 	bl	d69ea <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d6a8c:	4a06      	ldr	r2, [pc, #24]	; (d6aa8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d6a8e:	e7d7      	b.n	d6a40 <_ZN6AB180516updateWakeReasonEv+0x40>
   d6a90:	000dca46 	.word	0x000dca46
   d6a94:	2003e458 	.word	0x2003e458
   d6a98:	000dca17 	.word	0x000dca17
   d6a9c:	000dca65 	.word	0x000dca65
   d6aa0:	000dca20 	.word	0x000dca20
   d6aa4:	000dca30 	.word	0x000dca30
   d6aa8:	000dca40 	.word	0x000dca40

000d6aac <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d6aac:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d6aae:	9300      	str	r3, [sp, #0]
   d6ab0:	4613      	mov	r3, r2
   d6ab2:	22ff      	movs	r2, #255	; 0xff
   d6ab4:	f7ff ff4c 	bl	d6950 <_ZN6AB180512maskRegisterEhhhb>
}
   d6ab8:	b003      	add	sp, #12
   d6aba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ac0 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ac2:	460f      	mov	r7, r1
   d6ac4:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6ac6:	2301      	movs	r3, #1
   d6ac8:	2200      	movs	r2, #0
   d6aca:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   d6acc:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   d6ace:	f7ff fedf 	bl	d6890 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6ad2:	4604      	mov	r4, r0
   d6ad4:	b938      	cbnz	r0, d6ae6 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   d6ad6:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   d6ada:	491e      	ldr	r1, [pc, #120]	; (d6b54 <_ZN6AB180517setCountdownTimerEib+0x94>)
   d6adc:	481e      	ldr	r0, [pc, #120]	; (d6b58 <_ZN6AB180517setCountdownTimerEib+0x98>)
   d6ade:	f7fd fd37 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
}
   d6ae2:	4620      	mov	r0, r4
   d6ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   d6ae6:	2301      	movs	r3, #1
   d6ae8:	2223      	movs	r2, #35	; 0x23
   d6aea:	2118      	movs	r1, #24
   d6aec:	4628      	mov	r0, r5
   d6aee:	f7ff fecf 	bl	d6890 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6af2:	4604      	mov	r4, r0
   d6af4:	b910      	cbnz	r0, d6afc <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   d6af6:	f240 229b 	movw	r2, #667	; 0x29b
   d6afa:	e7ee      	b.n	d6ada <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   d6afc:	2fff      	cmp	r7, #255	; 0xff
   d6afe:	bfa8      	it	ge
   d6b00:	27ff      	movge	r7, #255	; 0xff
   d6b02:	2f01      	cmp	r7, #1
   d6b04:	bfb8      	it	lt
   d6b06:	2701      	movlt	r7, #1
   d6b08:	2301      	movs	r3, #1
   d6b0a:	b2fa      	uxtb	r2, r7
   d6b0c:	2119      	movs	r1, #25
   d6b0e:	4628      	mov	r0, r5
   d6b10:	f7ff febe 	bl	d6890 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6b14:	4604      	mov	r4, r0
   d6b16:	b910      	cbnz	r0, d6b1e <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   d6b18:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   d6b1c:	e7dd      	b.n	d6ada <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   d6b1e:	2301      	movs	r3, #1
   d6b20:	2208      	movs	r2, #8
   d6b22:	2112      	movs	r1, #18
   d6b24:	4628      	mov	r0, r5
   d6b26:	f7ff ffc1 	bl	d6aac <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6b2a:	4604      	mov	r4, r0
   d6b2c:	b910      	cbnz	r0, d6b34 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   d6b2e:	f240 22af 	movw	r2, #687	; 0x2af
   d6b32:	e7d2      	b.n	d6ada <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   d6b34:	2e00      	cmp	r6, #0
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   d6b36:	f04f 0301 	mov.w	r3, #1
   d6b3a:	bf14      	ite	ne
   d6b3c:	2283      	movne	r2, #131	; 0x83
   d6b3e:	2282      	moveq	r2, #130	; 0x82
   d6b40:	2118      	movs	r1, #24
   d6b42:	4628      	mov	r0, r5
   d6b44:	f7ff fea4 	bl	d6890 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6b48:	4604      	mov	r4, r0
   d6b4a:	2800      	cmp	r0, #0
   d6b4c:	d1c9      	bne.n	d6ae2 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   d6b4e:	f240 22b9 	movw	r2, #697	; 0x2b9
   d6b52:	e7c2      	b.n	d6ada <_ZN6AB180517setCountdownTimerEib+0x1a>
   d6b54:	000dca76 	.word	0x000dca76
   d6b58:	2003e458 	.word	0x2003e458

000d6b5c <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   d6b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   d6b60:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   d6b62:	4605      	mov	r5, r0
   d6b64:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   d6b66:	484f      	ldr	r0, [pc, #316]	; (d6ca4 <_ZN6AB180513deepPowerDownEi+0x148>)
   d6b68:	494f      	ldr	r1, [pc, #316]	; (d6ca8 <_ZN6AB180513deepPowerDownEi+0x14c>)
   d6b6a:	f7fd fcda 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   d6b6e:	2100      	movs	r1, #0
   d6b70:	4628      	mov	r0, r5
   d6b72:	f7ff fe99 	bl	d68a8 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   d6b76:	4604      	mov	r4, r0
   d6b78:	b948      	cbnz	r0, d6b8e <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   d6b7a:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   d6b7e:	494b      	ldr	r1, [pc, #300]	; (d6cac <_ZN6AB180513deepPowerDownEi+0x150>)
   d6b80:	4848      	ldr	r0, [pc, #288]	; (d6ca4 <_ZN6AB180513deepPowerDownEi+0x148>)
   d6b82:	f7fd fce5 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
}
   d6b86:	4620      	mov	r0, r4
   d6b88:	b003      	add	sp, #12
   d6b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   d6b8e:	2301      	movs	r3, #1
   d6b90:	461a      	mov	r2, r3
   d6b92:	2130      	movs	r1, #48	; 0x30
   d6b94:	4628      	mov	r0, r5
   d6b96:	f7ff ff89 	bl	d6aac <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6b9a:	4604      	mov	r4, r0
   d6b9c:	b910      	cbnz	r0, d6ba4 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   d6b9e:	f240 2205 	movw	r2, #517	; 0x205
   d6ba2:	e7ec      	b.n	d6b7e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   d6ba4:	2210      	movs	r2, #16
   d6ba6:	2301      	movs	r3, #1
   d6ba8:	4611      	mov	r1, r2
   d6baa:	4628      	mov	r0, r5
   d6bac:	f7ff ff1d 	bl	d69ea <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   d6bb0:	4604      	mov	r4, r0
   d6bb2:	b910      	cbnz	r0, d6bba <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   d6bb4:	f44f 7203 	mov.w	r2, #524	; 0x20c
   d6bb8:	e7e1      	b.n	d6b7e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   d6bba:	2301      	movs	r3, #1
   d6bbc:	2226      	movs	r2, #38	; 0x26
   d6bbe:	2113      	movs	r1, #19
   d6bc0:	4628      	mov	r0, r5
   d6bc2:	f7ff fe65 	bl	d6890 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6bc6:	4604      	mov	r4, r0
   d6bc8:	b910      	cbnz	r0, d6bd0 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   d6bca:	f240 2213 	movw	r2, #531	; 0x213
   d6bce:	e7d6      	b.n	d6b7e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   d6bd0:	2601      	movs	r6, #1
   d6bd2:	9600      	str	r6, [sp, #0]
   d6bd4:	4633      	mov	r3, r6
   d6bd6:	22fc      	movs	r2, #252	; 0xfc
   d6bd8:	2111      	movs	r1, #17
   d6bda:	4628      	mov	r0, r5
   d6bdc:	f7ff feb8 	bl	d6950 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6be0:	4604      	mov	r4, r0
   d6be2:	b910      	cbnz	r0, d6bea <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   d6be4:	f240 221b 	movw	r2, #539	; 0x21b
   d6be8:	e7c9      	b.n	d6b7e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   d6bea:	2200      	movs	r2, #0
   d6bec:	4639      	mov	r1, r7
   d6bee:	4628      	mov	r0, r5
   d6bf0:	f7ff ff66 	bl	d6ac0 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   d6bf4:	4604      	mov	r4, r0
   d6bf6:	b910      	cbnz	r0, d6bfe <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   d6bf8:	f240 2222 	movw	r2, #546	; 0x222
   d6bfc:	e7bf      	b.n	d6b7e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   d6bfe:	9600      	str	r6, [sp, #0]
   d6c00:	2302      	movs	r3, #2
   d6c02:	2277      	movs	r2, #119	; 0x77
   d6c04:	2110      	movs	r1, #16
   d6c06:	4628      	mov	r0, r5
   d6c08:	f7ff fea2 	bl	d6950 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6c0c:	4604      	mov	r4, r0
   d6c0e:	b910      	cbnz	r0, d6c16 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   d6c10:	f240 222b 	movw	r2, #555	; 0x22b
   d6c14:	e7b3      	b.n	d6b7e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   d6c16:	4633      	mov	r3, r6
   d6c18:	2204      	movs	r2, #4
   d6c1a:	211c      	movs	r1, #28
   d6c1c:	4628      	mov	r0, r5
   d6c1e:	f7ff ff45 	bl	d6aac <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   d6c22:	4604      	mov	r4, r0
   d6c24:	b910      	cbnz	r0, d6c2c <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   d6c26:	f240 2232 	movw	r2, #562	; 0x232
   d6c2a:	e7a8      	b.n	d6b7e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   d6c2c:	9600      	str	r6, [sp, #0]
   d6c2e:	2318      	movs	r3, #24
   d6c30:	22e3      	movs	r2, #227	; 0xe3
   d6c32:	2111      	movs	r1, #17
   d6c34:	4628      	mov	r0, r5
   d6c36:	f7ff fe8b 	bl	d6950 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   d6c3a:	4604      	mov	r4, r0
   d6c3c:	b910      	cbnz	r0, d6c44 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   d6c3e:	f240 2239 	movw	r2, #569	; 0x239
   d6c42:	e79c      	b.n	d6b7e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   d6c44:	4633      	mov	r3, r6
   d6c46:	22c0      	movs	r2, #192	; 0xc0
   d6c48:	2117      	movs	r1, #23
   d6c4a:	4628      	mov	r0, r5
   d6c4c:	f7ff fe20 	bl	d6890 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   d6c50:	4604      	mov	r4, r0
   d6c52:	b910      	cbnz	r0, d6c5a <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   d6c54:	f44f 7210 	mov.w	r2, #576	; 0x240
   d6c58:	e791      	b.n	d6b7e <_ZN6AB180513deepPowerDownEi+0x22>
   d6c5a:	f001 f87f 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6c5e:	f8df 9054 	ldr.w	r9, [pc, #84]	; d6cb4 <_ZN6AB180513deepPowerDownEi+0x158>
   d6c62:	f8df 8040 	ldr.w	r8, [pc, #64]	; d6ca4 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6c66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d6c6a:	4606      	mov	r6, r0
   d6c6c:	434f      	muls	r7, r1
   d6c6e:	f001 f875 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
   d6c72:	1b80      	subs	r0, r0, r6
   d6c74:	42b8      	cmp	r0, r7
   d6c76:	d20e      	bcs.n	d6c96 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   d6c78:	2201      	movs	r2, #1
   d6c7a:	2117      	movs	r1, #23
   d6c7c:	4628      	mov	r0, r5
   d6c7e:	f7ff fdbd 	bl	d67fc <_ZN6AB180512readRegisterEhb>
   d6c82:	4649      	mov	r1, r9
   d6c84:	4602      	mov	r2, r0
   d6c86:	4640      	mov	r0, r8
   d6c88:	f7fd fc4b 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   d6c8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6c90:	f001 fbe4 	bl	d845c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   d6c94:	e7eb      	b.n	d6c6e <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   d6c96:	4906      	ldr	r1, [pc, #24]	; (d6cb0 <_ZN6AB180513deepPowerDownEi+0x154>)
   d6c98:	4802      	ldr	r0, [pc, #8]	; (d6ca4 <_ZN6AB180513deepPowerDownEi+0x148>)
   d6c9a:	f7fd fc59 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   d6c9e:	f003 fedf 	bl	daa60 <_ZN11SystemClass5resetEv>
    return true;
   d6ca2:	e770      	b.n	d6b86 <_ZN6AB180513deepPowerDownEi+0x2a>
   d6ca4:	2003e458 	.word	0x2003e458
   d6ca8:	000dcaa1 	.word	0x000dcaa1
   d6cac:	000dca96 	.word	0x000dca96
   d6cb0:	000dcac7 	.word	0x000dcac7
   d6cb4:	000dcab2 	.word	0x000dcab2

000d6cb8 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d6cb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6cbc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6cc0:	4605      	mov	r5, r0
   d6cc2:	460c      	mov	r4, r1
   d6cc4:	4691      	mov	r9, r2
   d6cc6:	461f      	mov	r7, r3
    if (lock) {
   d6cc8:	f1ba 0f00 	cmp.w	sl, #0
   d6ccc:	d002      	beq.n	d6cd4 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d6cce:	6840      	ldr	r0, [r0, #4]
   d6cd0:	f002 f930 	bl	d8f34 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6cd4:	b307      	cbz	r7, d6d18 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d6cd6:	2f20      	cmp	r7, #32
   d6cd8:	463e      	mov	r6, r7
   d6cda:	bf28      	it	cs
   d6cdc:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6cde:	2c7f      	cmp	r4, #127	; 0x7f
   d6ce0:	d826      	bhi.n	d6d30 <_ZN6AB18057readRamEjPhjb+0x78>
   d6ce2:	1933      	adds	r3, r6, r4
   d6ce4:	2b80      	cmp	r3, #128	; 0x80
   d6ce6:	d901      	bls.n	d6cec <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d6ce8:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6cec:	2301      	movs	r3, #1
   d6cee:	2204      	movs	r2, #4
   d6cf0:	213f      	movs	r1, #63	; 0x3f
   d6cf2:	4628      	mov	r0, r5
   d6cf4:	f7ff fe79 	bl	d69ea <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6cf8:	2300      	movs	r3, #0
   d6cfa:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6cfe:	9300      	str	r3, [sp, #0]
   d6d00:	464a      	mov	r2, r9
   d6d02:	4633      	mov	r3, r6
   d6d04:	b2c9      	uxtb	r1, r1
   d6d06:	4628      	mov	r0, r5
   d6d08:	f7ff fce4 	bl	d66d4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d6d0c:	4680      	mov	r8, r0
   d6d0e:	b128      	cbz	r0, d6d1c <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d6d10:	4434      	add	r4, r6
        dataLen -= count;
   d6d12:	1bbf      	subs	r7, r7, r6
        data += count;
   d6d14:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6d16:	e7dd      	b.n	d6cd4 <_ZN6AB18057readRamEjPhjb+0x1c>
   d6d18:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6d1c:	f1ba 0f00 	cmp.w	sl, #0
   d6d20:	d002      	beq.n	d6d28 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d6d22:	6868      	ldr	r0, [r5, #4]
   d6d24:	f002 f90f 	bl	d8f46 <_ZN7TwoWire6unlockEv>
}
   d6d28:	4640      	mov	r0, r8
   d6d2a:	b002      	add	sp, #8
   d6d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6d30:	2301      	movs	r3, #1
   d6d32:	2204      	movs	r2, #4
   d6d34:	213f      	movs	r1, #63	; 0x3f
   d6d36:	4628      	mov	r0, r5
   d6d38:	f7ff feb8 	bl	d6aac <_ZN6AB180514setRegisterBitEhhb>
   d6d3c:	e7dc      	b.n	d6cf8 <_ZN6AB18057readRamEjPhjb+0x40>

000d6d3e <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d6d3e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6d42:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d6d46:	4605      	mov	r5, r0
   d6d48:	460c      	mov	r4, r1
   d6d4a:	4691      	mov	r9, r2
   d6d4c:	461f      	mov	r7, r3
    if (lock) {
   d6d4e:	f1ba 0f00 	cmp.w	sl, #0
   d6d52:	d002      	beq.n	d6d5a <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d6d54:	6840      	ldr	r0, [r0, #4]
   d6d56:	f002 f8ed 	bl	d8f34 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d6d5a:	b307      	cbz	r7, d6d9e <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d6d5c:	2f1f      	cmp	r7, #31
   d6d5e:	463e      	mov	r6, r7
   d6d60:	bf28      	it	cs
   d6d62:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d6d64:	2c7f      	cmp	r4, #127	; 0x7f
   d6d66:	d826      	bhi.n	d6db6 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d6d68:	1933      	adds	r3, r6, r4
   d6d6a:	2b80      	cmp	r3, #128	; 0x80
   d6d6c:	d901      	bls.n	d6d72 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d6d6e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6d72:	2301      	movs	r3, #1
   d6d74:	2204      	movs	r2, #4
   d6d76:	213f      	movs	r1, #63	; 0x3f
   d6d78:	4628      	mov	r0, r5
   d6d7a:	f7ff fe36 	bl	d69ea <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d6d7e:	2300      	movs	r3, #0
   d6d80:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d6d84:	9300      	str	r3, [sp, #0]
   d6d86:	464a      	mov	r2, r9
   d6d88:	4633      	mov	r3, r6
   d6d8a:	b2c9      	uxtb	r1, r1
   d6d8c:	4628      	mov	r0, r5
   d6d8e:	f7ff fd43 	bl	d6818 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d6d92:	4680      	mov	r8, r0
   d6d94:	b128      	cbz	r0, d6da2 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d6d96:	4434      	add	r4, r6
        dataLen -= count;
   d6d98:	1bbf      	subs	r7, r7, r6
        data += count;
   d6d9a:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d6d9c:	e7dd      	b.n	d6d5a <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d6d9e:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d6da2:	f1ba 0f00 	cmp.w	sl, #0
   d6da6:	d002      	beq.n	d6dae <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d6da8:	6868      	ldr	r0, [r5, #4]
   d6daa:	f002 f8cc 	bl	d8f46 <_ZN7TwoWire6unlockEv>
}
   d6dae:	4640      	mov	r0, r8
   d6db0:	b002      	add	sp, #8
   d6db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d6db6:	2301      	movs	r3, #1
   d6db8:	2204      	movs	r2, #4
   d6dba:	213f      	movs	r1, #63	; 0x3f
   d6dbc:	4628      	mov	r0, r5
   d6dbe:	f7ff fe75 	bl	d6aac <_ZN6AB180514setRegisterBitEhhb>
   d6dc2:	e7dc      	b.n	d6d7e <_ZN6AB18058writeRamEjPKhjb+0x40>

000d6dc4 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d6dc4:	b530      	push	{r4, r5, lr}
   d6dc6:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6dc8:	680d      	ldr	r5, [r1, #0]
   d6dca:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d6dce:	9503      	str	r5, [sp, #12]
   d6dd0:	684d      	ldr	r5, [r1, #4]
   d6dd2:	9502      	str	r5, [sp, #8]
   d6dd4:	688d      	ldr	r5, [r1, #8]
   d6dd6:	9501      	str	r5, [sp, #4]
   d6dd8:	68c9      	ldr	r1, [r1, #12]
   d6dda:	9100      	str	r1, [sp, #0]
   d6ddc:	3301      	adds	r3, #1
   d6dde:	4904      	ldr	r1, [pc, #16]	; (d6df0 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d6de0:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d6de4:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d6de6:	f003 fdcd 	bl	da984 <_ZN6String6formatEPKcz>
}
   d6dea:	4620      	mov	r0, r4
   d6dec:	b005      	add	sp, #20
   d6dee:	bd30      	pop	{r4, r5, pc}
   d6df0:	000dcad9 	.word	0x000dcad9

000d6df4 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6df4:	1103      	asrs	r3, r0, #4
}
   d6df6:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d6df8:	f000 000f 	and.w	r0, r0, #15
}
   d6dfc:	fb02 0003 	mla	r0, r2, r3, r0
   d6e00:	4770      	bx	lr

000d6e02 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6e02:	b538      	push	{r3, r4, r5, lr}
   d6e04:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d6e06:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d6e08:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d6e0a:	f7ff fff3 	bl	d6df4 <_ZN6AB180510bcdToValueEh>
   d6e0e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d6e10:	7860      	ldrb	r0, [r4, #1]
   d6e12:	f7ff ffef 	bl	d6df4 <_ZN6AB180510bcdToValueEh>
   d6e16:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d6e18:	78a0      	ldrb	r0, [r4, #2]
   d6e1a:	f7ff ffeb 	bl	d6df4 <_ZN6AB180510bcdToValueEh>
   d6e1e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d6e20:	78e0      	ldrb	r0, [r4, #3]
   d6e22:	f7ff ffe7 	bl	d6df4 <_ZN6AB180510bcdToValueEh>
   d6e26:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6e28:	7920      	ldrb	r0, [r4, #4]
   d6e2a:	f7ff ffe3 	bl	d6df4 <_ZN6AB180510bcdToValueEh>
   d6e2e:	3801      	subs	r0, #1
   d6e30:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d6e32:	b92d      	cbnz	r5, d6e40 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d6e34:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d6e36:	7828      	ldrb	r0, [r5, #0]
   d6e38:	f7ff ffdc 	bl	d6df4 <_ZN6AB180510bcdToValueEh>
   d6e3c:	6188      	str	r0, [r1, #24]
}
   d6e3e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d6e40:	7960      	ldrb	r0, [r4, #5]
   d6e42:	f7ff ffd7 	bl	d6df4 <_ZN6AB180510bcdToValueEh>
   d6e46:	3064      	adds	r0, #100	; 0x64
   d6e48:	1da5      	adds	r5, r4, #6
   d6e4a:	6148      	str	r0, [r1, #20]
   d6e4c:	e7f3      	b.n	d6e36 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d6e50 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6e50:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6e52:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6e54:	b088      	sub	sp, #32
   d6e56:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6e58:	461a      	mov	r2, r3
   d6e5a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d6e5c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d6e5e:	f7ff fda6 	bl	d69ae <_ZN6AB180510isBitClearEhhb>
   d6e62:	b1f0      	cbz	r0, d6ea2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d6e64:	2308      	movs	r3, #8
   d6e66:	2601      	movs	r6, #1
   d6e68:	4620      	mov	r0, r4
   d6e6a:	9600      	str	r6, [sp, #0]
   d6e6c:	eb0d 0203 	add.w	r2, sp, r3
   d6e70:	2100      	movs	r1, #0
   d6e72:	f7ff fc2f 	bl	d66d4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d6e76:	4604      	mov	r4, r0
   d6e78:	b198      	cbz	r0, d6ea2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d6e7a:	4632      	mov	r2, r6
   d6e7c:	4629      	mov	r1, r5
   d6e7e:	f10d 0009 	add.w	r0, sp, #9
   d6e82:	f7ff ffbe 	bl	d6e02 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d6e86:	a804      	add	r0, sp, #16
   d6e88:	f7ff ff9c 	bl	d6dc4 <_ZN6AB180510tmToStringEPK2tm>
   d6e8c:	4808      	ldr	r0, [pc, #32]	; (d6eb0 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d6e8e:	9a04      	ldr	r2, [sp, #16]
   d6e90:	4908      	ldr	r1, [pc, #32]	; (d6eb4 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d6e92:	f7fd fb46 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
   d6e96:	a804      	add	r0, sp, #16
   d6e98:	f003 fca8 	bl	da7ec <_ZN6StringD1Ev>
}
   d6e9c:	4620      	mov	r0, r4
   d6e9e:	b008      	add	sp, #32
   d6ea0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d6ea2:	2224      	movs	r2, #36	; 0x24
   d6ea4:	2100      	movs	r1, #0
   d6ea6:	4628      	mov	r0, r5
   d6ea8:	f005 f85c 	bl	dbf64 <memset>
   d6eac:	2400      	movs	r4, #0
   d6eae:	e7f5      	b.n	d6e9c <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d6eb0:	2003e458 	.word	0x2003e458
   d6eb4:	000dcaf7 	.word	0x000dcaf7

000d6eb8 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d6eb8:	b530      	push	{r4, r5, lr}
   d6eba:	b08b      	sub	sp, #44	; 0x2c
   d6ebc:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d6ebe:	a901      	add	r1, sp, #4
   d6ec0:	f7ff ffc6 	bl	d6e50 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d6ec4:	4604      	mov	r4, r0
   d6ec6:	b120      	cbz	r0, d6ed2 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d6ec8:	a801      	add	r0, sp, #4
   d6eca:	f001 fab3 	bl	d8434 <mktime>
   d6ece:	e9c5 0100 	strd	r0, r1, [r5]
}
   d6ed2:	4620      	mov	r0, r4
   d6ed4:	b00b      	add	sp, #44	; 0x2c
   d6ed6:	bd30      	pop	{r4, r5, pc}

000d6ed8 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d6ed8:	b510      	push	{r4, lr}
   d6eda:	4604      	mov	r4, r0
   d6edc:	b088      	sub	sp, #32
    if (callBegin) {
   d6ede:	b111      	cbz	r1, d6ee6 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d6ee0:	6840      	ldr	r0, [r0, #4]
   d6ee2:	f001 ffcf 	bl	d8e84 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	f7ff fc4a 	bl	d6780 <_ZN6AB180510detectChipEv>
   d6eec:	b370      	cbz	r0, d6f4c <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d6eee:	4620      	mov	r0, r4
   d6ef0:	f7ff fd86 	bl	d6a00 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d6ef4:	2301      	movs	r3, #1
   d6ef6:	461a      	mov	r2, r3
   d6ef8:	2110      	movs	r1, #16
   d6efa:	4620      	mov	r0, r4
   d6efc:	f7ff fd57 	bl	d69ae <_ZN6AB180510isBitClearEhhb>
   d6f00:	b1d8      	cbz	r0, d6f3a <_ZN6AB18055setupEb+0x62>
   d6f02:	f003 ffdb 	bl	daebc <_ZN9TimeClass7isValidEv>
   d6f06:	b9c0      	cbnz	r0, d6f3a <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d6f08:	a902      	add	r1, sp, #8
   d6f0a:	4620      	mov	r0, r4
   d6f0c:	f7ff ffd4 	bl	d6eb8 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d6f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6f14:	f003 fed8 	bl	dacc8 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d6f18:	4b0f      	ldr	r3, [pc, #60]	; (d6f58 <_ZN6AB18055setupEb+0x80>)
   d6f1a:	4910      	ldr	r1, [pc, #64]	; (d6f5c <_ZN6AB18055setupEb+0x84>)
   d6f1c:	681b      	ldr	r3, [r3, #0]
   d6f1e:	9300      	str	r3, [sp, #0]
   d6f20:	a804      	add	r0, sp, #16
   d6f22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6f26:	f003 ff87 	bl	dae38 <_ZN9TimeClass6formatExPKc>
   d6f2a:	480d      	ldr	r0, [pc, #52]	; (d6f60 <_ZN6AB18055setupEb+0x88>)
   d6f2c:	9a04      	ldr	r2, [sp, #16]
   d6f2e:	490d      	ldr	r1, [pc, #52]	; (d6f64 <_ZN6AB18055setupEb+0x8c>)
   d6f30:	f7fd faf7 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
   d6f34:	a804      	add	r0, sp, #16
   d6f36:	f003 fc59 	bl	da7ec <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d6f3a:	4a0b      	ldr	r2, [pc, #44]	; (d6f68 <_ZN6AB18055setupEb+0x90>)
   d6f3c:	2300      	movs	r3, #0
   d6f3e:	2100      	movs	r1, #0
   d6f40:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d6f44:	f001 f8e4 	bl	d8110 <system_subscribe_event>
}
   d6f48:	b008      	add	sp, #32
   d6f4a:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d6f4c:	4907      	ldr	r1, [pc, #28]	; (d6f6c <_ZN6AB18055setupEb+0x94>)
   d6f4e:	4804      	ldr	r0, [pc, #16]	; (d6f60 <_ZN6AB18055setupEb+0x88>)
   d6f50:	f7fd fafe 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
   d6f54:	e7f1      	b.n	d6f3a <_ZN6AB18055setupEb+0x62>
   d6f56:	bf00      	nop
   d6f58:	2003e20c 	.word	0x2003e20c
   d6f5c:	2003e590 	.word	0x2003e590
   d6f60:	2003e458 	.word	0x2003e458
   d6f64:	000dcb05 	.word	0x000dcb05
   d6f68:	000d692d 	.word	0x000d692d
   d6f6c:	000dcb22 	.word	0x000dcb22

000d6f70 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d6f70:	220a      	movs	r2, #10
   d6f72:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d6f76:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d6f7a:	fb93 f1f2 	sdiv	r1, r3, r2
   d6f7e:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d6f82:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d6f86:	b2c0      	uxtb	r0, r0
   d6f88:	4770      	bx	lr

000d6f8a <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6f8a:	b570      	push	{r4, r5, r6, lr}
   d6f8c:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d6f8e:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d6f90:	460c      	mov	r4, r1
   d6f92:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d6f94:	f7ff ffec 	bl	d6f70 <_ZN6AB180510valueToBcdEi>
   d6f98:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d6f9a:	6868      	ldr	r0, [r5, #4]
   d6f9c:	f7ff ffe8 	bl	d6f70 <_ZN6AB180510valueToBcdEi>
   d6fa0:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d6fa2:	68a8      	ldr	r0, [r5, #8]
   d6fa4:	f7ff ffe4 	bl	d6f70 <_ZN6AB180510valueToBcdEi>
   d6fa8:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d6faa:	68e8      	ldr	r0, [r5, #12]
   d6fac:	f7ff ffe0 	bl	d6f70 <_ZN6AB180510valueToBcdEi>
   d6fb0:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6fb2:	6928      	ldr	r0, [r5, #16]
   d6fb4:	3001      	adds	r0, #1
   d6fb6:	f7ff ffdb 	bl	d6f70 <_ZN6AB180510valueToBcdEi>
   d6fba:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d6fbc:	b92e      	cbnz	r6, d6fca <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d6fbe:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d6fc0:	69a8      	ldr	r0, [r5, #24]
   d6fc2:	f7ff ffd5 	bl	d6f70 <_ZN6AB180510valueToBcdEi>
   d6fc6:	7030      	strb	r0, [r6, #0]
}
   d6fc8:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d6fca:	696a      	ldr	r2, [r5, #20]
   d6fcc:	2364      	movs	r3, #100	; 0x64
   d6fce:	fb92 f0f3 	sdiv	r0, r2, r3
   d6fd2:	fb03 2010 	mls	r0, r3, r0, r2
   d6fd6:	f7ff ffcb 	bl	d6f70 <_ZN6AB180510valueToBcdEi>
   d6fda:	1da6      	adds	r6, r4, #6
   d6fdc:	7160      	strb	r0, [r4, #5]
   d6fde:	e7ef      	b.n	d6fc0 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d6fe0 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6fe2:	b087      	sub	sp, #28
   d6fe4:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6fe6:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d6fe8:	4616      	mov	r6, r2
   d6fea:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d6fec:	f7ff feea 	bl	d6dc4 <_ZN6AB180510tmToStringEPK2tm>
   d6ff0:	481e      	ldr	r0, [pc, #120]	; (d706c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d6ff2:	9a02      	ldr	r2, [sp, #8]
   d6ff4:	491e      	ldr	r1, [pc, #120]	; (d7070 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d6ff6:	f7fd fa94 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
   d6ffa:	a802      	add	r0, sp, #8
   d6ffc:	f003 fbf6 	bl	da7ec <_ZN6StringD1Ev>
    if (lock) {
   d7000:	b116      	cbz	r6, d7008 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d7002:	6868      	ldr	r0, [r5, #4]
   d7004:	f001 ff96 	bl	d8f34 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d7008:	4620      	mov	r0, r4
   d700a:	2201      	movs	r2, #1
   d700c:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d7010:	2700      	movs	r7, #0
   d7012:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d7016:	f7ff ffb8 	bl	d6f8a <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d701a:	2301      	movs	r3, #1
   d701c:	461a      	mov	r2, r3
   d701e:	2110      	movs	r1, #16
   d7020:	4628      	mov	r0, r5
   d7022:	f7ff fd43 	bl	d6aac <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d7026:	4604      	mov	r4, r0
   d7028:	b1e8      	cbz	r0, d7066 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d702a:	2308      	movs	r3, #8
   d702c:	9700      	str	r7, [sp, #0]
   d702e:	eb0d 0203 	add.w	r2, sp, r3
   d7032:	4639      	mov	r1, r7
   d7034:	4628      	mov	r0, r5
   d7036:	f7ff fbef 	bl	d6818 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d703a:	4604      	mov	r4, r0
   d703c:	b160      	cbz	r0, d7058 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d703e:	2301      	movs	r3, #1
   d7040:	461a      	mov	r2, r3
   d7042:	2110      	movs	r1, #16
   d7044:	4628      	mov	r0, r5
   d7046:	f7ff fcd0 	bl	d69ea <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d704a:	b116      	cbz	r6, d7052 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d704c:	6868      	ldr	r0, [r5, #4]
   d704e:	f001 ff7a 	bl	d8f46 <_ZN7TwoWire6unlockEv>
}
   d7052:	4620      	mov	r0, r4
   d7054:	b007      	add	sp, #28
   d7056:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d7058:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d705c:	4905      	ldr	r1, [pc, #20]	; (d7074 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d705e:	4803      	ldr	r0, [pc, #12]	; (d706c <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d7060:	f7fd fa76 	bl	d4550 <_ZNK5spark6Logger5errorEPKcz>
   d7064:	e7f1      	b.n	d704a <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d7066:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d706a:	e7f7      	b.n	d705c <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d706c:	2003e458 	.word	0x2003e458
   d7070:	000dcb3a 	.word	0x000dcb3a
   d7074:	000dcb48 	.word	0x000dcb48

000d7078 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d7078:	b513      	push	{r0, r1, r4, lr}
   d707a:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d707c:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d707e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d7082:	f004 ff35 	bl	dbef0 <gmtime>
    return setRtcFromTm(tm, lock);
   d7086:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d708a:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d708c:	4620      	mov	r0, r4
   d708e:	f7ff ffa7 	bl	d6fe0 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d7092:	b002      	add	sp, #8
   d7094:	bd10      	pop	{r4, pc}
	...

000d7098 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d7098:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d709a:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d709c:	b089      	sub	sp, #36	; 0x24
   d709e:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d70a0:	bb75      	cbnz	r5, d7100 <_ZN6AB18054loopEv+0x68>
   d70a2:	f003 ff0b 	bl	daebc <_ZN9TimeClass7isValidEv>
   d70a6:	b358      	cbz	r0, d7100 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d70a8:	2600      	movs	r6, #0
   d70aa:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d70ac:	a904      	add	r1, sp, #16
   d70ae:	4628      	mov	r0, r5
        tm = 0;
   d70b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d70b4:	f001 f8de 	bl	d8274 <spark_sync_time_last>
   d70b8:	b310      	cbz	r0, d7100 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d70ba:	2501      	movs	r5, #1
   d70bc:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d70be:	f003 ff1a 	bl	daef6 <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d70c2:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d70c4:	4602      	mov	r2, r0
   d70c6:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d70c8:	4620      	mov	r0, r4
        time_t time = Time.now();
   d70ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d70ce:	f7ff ffd3 	bl	d7078 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d70d2:	a902      	add	r1, sp, #8
   d70d4:	4620      	mov	r0, r4
        time = 0;
   d70d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d70da:	f7ff feed 	bl	d6eb8 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d70de:	4b12      	ldr	r3, [pc, #72]	; (d7128 <_ZN6AB18054loopEv+0x90>)
   d70e0:	4912      	ldr	r1, [pc, #72]	; (d712c <_ZN6AB18054loopEv+0x94>)
   d70e2:	681b      	ldr	r3, [r3, #0]
   d70e4:	9300      	str	r3, [sp, #0]
   d70e6:	a804      	add	r0, sp, #16
   d70e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d70ec:	f003 fea4 	bl	dae38 <_ZN9TimeClass6formatExPKc>
   d70f0:	480f      	ldr	r0, [pc, #60]	; (d7130 <_ZN6AB18054loopEv+0x98>)
   d70f2:	9a04      	ldr	r2, [sp, #16]
   d70f4:	490f      	ldr	r1, [pc, #60]	; (d7134 <_ZN6AB18054loopEv+0x9c>)
   d70f6:	f7fd fa14 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
   d70fa:	a804      	add	r0, sp, #16
   d70fc:	f003 fb76 	bl	da7ec <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d7100:	6963      	ldr	r3, [r4, #20]
   d7102:	b173      	cbz	r3, d7122 <_ZN6AB18054loopEv+0x8a>
   d7104:	f000 fe2a 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d7108:	6923      	ldr	r3, [r4, #16]
   d710a:	1ac0      	subs	r0, r0, r3
   d710c:	6963      	ldr	r3, [r4, #20]
   d710e:	4298      	cmp	r0, r3
   d7110:	d307      	bcc.n	d7122 <_ZN6AB18054loopEv+0x8a>
   d7112:	f000 fe23 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d7116:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d711a:	6120      	str	r0, [r4, #16]
            setWDT();
   d711c:	4620      	mov	r0, r4
   d711e:	f7ff fbc3 	bl	d68a8 <_ZN6AB18056setWDTEi>
}
   d7122:	b009      	add	sp, #36	; 0x24
   d7124:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7126:	bf00      	nop
   d7128:	2003e20c 	.word	0x2003e20c
   d712c:	2003e590 	.word	0x2003e590
   d7130:	2003e458 	.word	0x2003e458
   d7134:	000dcb63 	.word	0x000dcb63

000d7138 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d7138:	4b01      	ldr	r3, [pc, #4]	; (d7140 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d713a:	4a02      	ldr	r2, [pc, #8]	; (d7144 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d713c:	601a      	str	r2, [r3, #0]
}
   d713e:	4770      	bx	lr
   d7140:	2003e458 	.word	0x2003e458
   d7144:	000dcb79 	.word	0x000dcb79

000d7148 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d7148:	4770      	bx	lr

000d714a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d714a:	b510      	push	{r4, lr}
}
   d714c:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d714e:	4604      	mov	r4, r0
}
   d7150:	f004 f9fa 	bl	db548 <_ZdlPvj>
   d7154:	4620      	mov	r0, r4
   d7156:	bd10      	pop	{r4, pc}

000d7158 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d7158:	6803      	ldr	r3, [r0, #0]
   d715a:	b2c9      	uxtb	r1, r1
   d715c:	689b      	ldr	r3, [r3, #8]
   d715e:	4718      	bx	r3

000d7160 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d7160:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d7162:	4d03      	ldr	r5, [pc, #12]	; (d7170 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d7164:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d7168:	e9c0 5100 	strd	r5, r1, [r0]
}
   d716c:	bd30      	pop	{r4, r5, pc}
   d716e:	bf00      	nop
   d7170:	000dcbd0 	.word	0x000dcbd0

000d7174 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d7174:	6840      	ldr	r0, [r0, #4]
   d7176:	f001 be85 	b.w	d8e84 <_ZN7TwoWire5beginEv>

000d717a <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d717a:	b510      	push	{r4, lr}
   d717c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d717e:	6800      	ldr	r0, [r0, #0]
   d7180:	f001 fee1 	bl	d8f46 <_ZN7TwoWire6unlockEv>
   d7184:	4620      	mov	r0, r4
   d7186:	bd10      	pop	{r4, pc}

000d7188 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d7188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d718c:	b08a      	sub	sp, #40	; 0x28
   d718e:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d7190:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7192:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7194:	f001 fece 	bl	d8f34 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7198:	221e      	movs	r2, #30
   d719a:	2100      	movs	r1, #0
   d719c:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d719e:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d71a0:	f004 fee0 	bl	dbf64 <memset>
		size_t framAddr = 0;
   d71a4:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d71a6:	b1ef      	cbz	r7, d71e4 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d71a8:	6823      	ldr	r3, [r4, #0]
   d71aa:	2f1e      	cmp	r7, #30
   d71ac:	46b8      	mov	r8, r7
   d71ae:	bf28      	it	cs
   d71b0:	f04f 081e 	movcs.w	r8, #30
   d71b4:	68dd      	ldr	r5, [r3, #12]
   d71b6:	aa02      	add	r2, sp, #8
   d71b8:	4643      	mov	r3, r8
   d71ba:	4631      	mov	r1, r6
   d71bc:	4620      	mov	r0, r4
   d71be:	47a8      	blx	r5
			if (!result) {
   d71c0:	4605      	mov	r5, r0
   d71c2:	b958      	cbnz	r0, d71dc <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d71c4:	480a      	ldr	r0, [pc, #40]	; (d71f0 <_ZN6MB85RC5eraseEv+0x68>)
   d71c6:	490b      	ldr	r1, [pc, #44]	; (d71f4 <_ZN6MB85RC5eraseEv+0x6c>)
   d71c8:	4632      	mov	r2, r6
   d71ca:	f7fd f9aa 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d71ce:	a801      	add	r0, sp, #4
   d71d0:	f7ff ffd3 	bl	d717a <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d71d4:	4628      	mov	r0, r5
   d71d6:	b00a      	add	sp, #40	; 0x28
   d71d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d71dc:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d71e0:	4446      	add	r6, r8
		while(totalLen > 0) {
   d71e2:	e7e0      	b.n	d71a6 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d71e4:	a801      	add	r0, sp, #4
   d71e6:	f7ff ffc8 	bl	d717a <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d71ea:	2501      	movs	r5, #1
   d71ec:	e7f2      	b.n	d71d4 <_ZN6MB85RC5eraseEv+0x4c>
   d71ee:	bf00      	nop
   d71f0:	2003e53c 	.word	0x2003e53c
   d71f4:	000dcb9c 	.word	0x000dcb9c

000d71f8 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d71f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d71fc:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d71fe:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7200:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d7202:	460d      	mov	r5, r1
   d7204:	4616      	mov	r6, r2
   d7206:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d7208:	f001 fe94 	bl	d8f34 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d720c:	b1a7      	cbz	r7, d7238 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d720e:	68e1      	ldr	r1, [r4, #12]
   d7210:	6860      	ldr	r0, [r4, #4]
   d7212:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7216:	f001 fe6b 	bl	d8ef0 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d721a:	0a29      	lsrs	r1, r5, #8
   d721c:	6860      	ldr	r0, [r4, #4]
   d721e:	f7ff ff9b 	bl	d7158 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d7222:	4629      	mov	r1, r5
   d7224:	6860      	ldr	r0, [r4, #4]
   d7226:	f7ff ff97 	bl	d7158 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d722a:	6860      	ldr	r0, [r4, #4]
   d722c:	2100      	movs	r1, #0
   d722e:	f001 fe7a 	bl	d8f26 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d7232:	b148      	cbz	r0, d7248 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d7234:	2400      	movs	r4, #0
   d7236:	e000      	b.n	d723a <_ZN6MB85RC8readDataEjPhj+0x42>
   d7238:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d723a:	a801      	add	r0, sp, #4
   d723c:	f7ff ff9d 	bl	d717a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d7240:	4620      	mov	r0, r4
   d7242:	b003      	add	sp, #12
   d7244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d7248:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d724a:	7b21      	ldrb	r1, [r4, #12]
   d724c:	6860      	ldr	r0, [r4, #4]
   d724e:	46b8      	mov	r8, r7
   d7250:	bf28      	it	cs
   d7252:	f04f 0820 	movcs.w	r8, #32
   d7256:	2301      	movs	r3, #1
   d7258:	4642      	mov	r2, r8
   d725a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d725e:	f001 fe2e 	bl	d8ebe <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d7262:	f004 f929 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d7266:	6803      	ldr	r3, [r0, #0]
   d7268:	691b      	ldr	r3, [r3, #16]
   d726a:	4798      	blx	r3
   d726c:	4540      	cmp	r0, r8
   d726e:	dbe1      	blt.n	d7234 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d7270:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d7274:	f004 f920 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d7278:	6803      	ldr	r3, [r0, #0]
   d727a:	695b      	ldr	r3, [r3, #20]
   d727c:	4798      	blx	r3
   d727e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d7282:	454e      	cmp	r6, r9
   d7284:	d1f6      	bne.n	d7274 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d7286:	4445      	add	r5, r8
   d7288:	eba7 0708 	sub.w	r7, r7, r8
   d728c:	e7be      	b.n	d720c <_ZN6MB85RC8readDataEjPhj+0x14>

000d728e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d728e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7292:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7294:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7296:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7298:	460e      	mov	r6, r1
   d729a:	4690      	mov	r8, r2
   d729c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d729e:	f001 fe49 	bl	d8f34 <_ZN7TwoWire4lockEv>
   d72a2:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d72a6:	f1b9 0f00 	cmp.w	r9, #0
   d72aa:	d02a      	beq.n	d7302 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d72ac:	b34d      	cbz	r5, d7302 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d72ae:	68e1      	ldr	r1, [r4, #12]
   d72b0:	6860      	ldr	r0, [r4, #4]
   d72b2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d72b6:	f001 fe1b 	bl	d8ef0 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d72ba:	0a31      	lsrs	r1, r6, #8
   d72bc:	6860      	ldr	r0, [r4, #4]
   d72be:	f7ff ff4b 	bl	d7158 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d72c2:	6860      	ldr	r0, [r4, #4]
   d72c4:	4631      	mov	r1, r6
   d72c6:	f7ff ff47 	bl	d7158 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d72ca:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d72ce:	4647      	mov	r7, r8
   d72d0:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d72d4:	6860      	ldr	r0, [r4, #4]
   d72d6:	f817 1b01 	ldrb.w	r1, [r7], #1
   d72da:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d72dc:	3d01      	subs	r5, #1
				wire.write(*data);
   d72de:	689b      	ldr	r3, [r3, #8]
   d72e0:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d72e2:	4555      	cmp	r5, sl
   d72e4:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d72e8:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d72ea:	d001      	beq.n	d72f0 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d72ec:	2d00      	cmp	r5, #0
   d72ee:	d1f1      	bne.n	d72d4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d72f0:	6860      	ldr	r0, [r4, #4]
   d72f2:	2101      	movs	r1, #1
   d72f4:	f001 fe17 	bl	d8f26 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d72f8:	2800      	cmp	r0, #0
   d72fa:	d0d7      	beq.n	d72ac <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d72fc:	f04f 0900 	mov.w	r9, #0
   d7300:	e7d1      	b.n	d72a6 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d7302:	a801      	add	r0, sp, #4
   d7304:	f7ff ff39 	bl	d717a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d7308:	4648      	mov	r0, r9
   d730a:	b003      	add	sp, #12
   d730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7310 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7314:	b08b      	sub	sp, #44	; 0x2c
   d7316:	460e      	mov	r6, r1
   d7318:	4615      	mov	r5, r2
   d731a:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d731c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d731e:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7320:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d7322:	f001 fe07 	bl	d8f34 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d7326:	42ae      	cmp	r6, r5
   d7328:	d229      	bcs.n	d737e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d732a:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d732c:	4425      	add	r5, r4
			while(numBytes > 0) {
   d732e:	b18c      	cbz	r4, d7354 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d7330:	2c1e      	cmp	r4, #30
   d7332:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d7334:	f8d8 3000 	ldr.w	r3, [r8]
   d7338:	bf28      	it	cs
   d733a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d733c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d733e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7342:	aa02      	add	r2, sp, #8
   d7344:	463b      	mov	r3, r7
   d7346:	4631      	mov	r1, r6
   d7348:	4640      	mov	r0, r8
				framAddrTo -= count;
   d734a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d734c:	47c8      	blx	r9
				if (!result) {
   d734e:	b948      	cbnz	r0, d7364 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d7350:	2400      	movs	r4, #0
   d7352:	e000      	b.n	d7356 <_ZN6MB85RC8moveDataEjjj+0x46>
   d7354:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7356:	a801      	add	r0, sp, #4
   d7358:	f7ff ff0f 	bl	d717a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d735c:	4620      	mov	r0, r4
   d735e:	b00b      	add	sp, #44	; 0x2c
   d7360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d7364:	f8d8 3000 	ldr.w	r3, [r8]
   d7368:	aa02      	add	r2, sp, #8
   d736a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d736e:	4629      	mov	r1, r5
   d7370:	463b      	mov	r3, r7
   d7372:	4640      	mov	r0, r8
   d7374:	47c8      	blx	r9
				if (!result) {
   d7376:	2800      	cmp	r0, #0
   d7378:	d0ea      	beq.n	d7350 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d737a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d737c:	e7d7      	b.n	d732e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d737e:	d9e9      	bls.n	d7354 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d7380:	2c00      	cmp	r4, #0
   d7382:	d0e7      	beq.n	d7354 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d7384:	f8d8 3000 	ldr.w	r3, [r8]
   d7388:	2c1e      	cmp	r4, #30
   d738a:	4627      	mov	r7, r4
   d738c:	bf28      	it	cs
   d738e:	271e      	movcs	r7, #30
   d7390:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7394:	aa02      	add	r2, sp, #8
   d7396:	463b      	mov	r3, r7
   d7398:	4631      	mov	r1, r6
   d739a:	4640      	mov	r0, r8
   d739c:	47c8      	blx	r9
				if (!result) {
   d739e:	2800      	cmp	r0, #0
   d73a0:	d0d6      	beq.n	d7350 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d73a2:	f8d8 3000 	ldr.w	r3, [r8]
   d73a6:	aa02      	add	r2, sp, #8
   d73a8:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d73ac:	4629      	mov	r1, r5
   d73ae:	463b      	mov	r3, r7
   d73b0:	4640      	mov	r0, r8
   d73b2:	47c8      	blx	r9
				if (!result) {
   d73b4:	2800      	cmp	r0, #0
   d73b6:	d0cb      	beq.n	d7350 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d73b8:	443e      	add	r6, r7
				framAddrTo += count;
   d73ba:	443d      	add	r5, r7
				numBytes -= count;
   d73bc:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d73be:	e7df      	b.n	d7380 <_ZN6MB85RC8moveDataEjjj+0x70>

000d73c0 <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d73c0:	6803      	ldr	r3, [r0, #0]
   d73c2:	b2c9      	uxtb	r1, r1
   d73c4:	689b      	ldr	r3, [r3, #8]
   d73c6:	4718      	bx	r3

000d73c8 <_ZN8MMA8452QC1Eh>:
//   supplied address into a private variable for future use.
//   The variable addr should be either 0x1C or 0x1D, depending on which voltage
//   the SA0 pin is tied to (GND or 3.3V respectively).
MMA8452Q::MMA8452Q(byte addr)
{
	address = addr; // Store address into private variable
   d73c8:	7501      	strb	r1, [r0, #20]
}
   d73ca:	4770      	bx	lr

000d73cc <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>:

// WRITE MULTIPLE REGISTERS
//	Write an array of "len" bytes ("buffer"), starting at register "reg", and
//	auto-incrmenting to the next.
void MMA8452Q::writeRegisters(MMA8452Q_Register reg, byte *buffer, byte len)
{
   d73cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d73ce:	4607      	mov	r7, r0
   d73d0:	460c      	mov	r4, r1
   d73d2:	4615      	mov	r5, r2
   d73d4:	461e      	mov	r6, r3
	Wire.beginTransmission(address);
   d73d6:	f004 f86f 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d73da:	7d39      	ldrb	r1, [r7, #20]
   d73dc:	f001 fd84 	bl	d8ee8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d73e0:	f004 f86a 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d73e4:	4621      	mov	r1, r4
   d73e6:	f7ff ffeb 	bl	d73c0 <_ZN7TwoWire5writeEi>
	for (int x = 0; x < len; x++)
   d73ea:	2400      	movs	r4, #0
   d73ec:	42a6      	cmp	r6, r4
   d73ee:	dd07      	ble.n	d7400 <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x34>
		Wire.write(buffer[x]);
   d73f0:	f004 f862 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d73f4:	6803      	ldr	r3, [r0, #0]
   d73f6:	5d29      	ldrb	r1, [r5, r4]
   d73f8:	689b      	ldr	r3, [r3, #8]
   d73fa:	4798      	blx	r3
	for (int x = 0; x < len; x++)
   d73fc:	3401      	adds	r4, #1
   d73fe:	e7f5      	b.n	d73ec <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh+0x20>
	Wire.endTransmission(); //Stop transmitting
   d7400:	f004 f85a 	bl	db4b8 <_Z19__fetch_global_Wirev>
}
   d7404:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Wire.endTransmission(); //Stop transmitting
   d7408:	f001 bd91 	b.w	d8f2e <_ZN7TwoWire15endTransmissionEv>

000d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>:
{
   d740c:	b507      	push	{r0, r1, r2, lr}
	writeRegisters(reg, &data, 1);
   d740e:	2301      	movs	r3, #1
{
   d7410:	f88d 2007 	strb.w	r2, [sp, #7]
	writeRegisters(reg, &data, 1);
   d7414:	f10d 0207 	add.w	r2, sp, #7
   d7418:	f7ff ffd8 	bl	d73cc <_ZN8MMA8452Q14writeRegistersE17MMA8452Q_RegisterPhh>
}
   d741c:	b003      	add	sp, #12
   d741e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7422 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>:

// READ A SINGLE REGISTER
//	Read a byte from the MMA8452Q register "reg".
byte MMA8452Q::readRegister(MMA8452Q_Register reg)
{
   d7422:	b538      	push	{r3, r4, r5, lr}
   d7424:	4604      	mov	r4, r0
   d7426:	460d      	mov	r5, r1
	Wire.beginTransmission(address);
   d7428:	f004 f846 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d742c:	7d21      	ldrb	r1, [r4, #20]
   d742e:	f001 fd5b 	bl	d8ee8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(reg);
   d7432:	f004 f841 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d7436:	4629      	mov	r1, r5
   d7438:	f7ff ffc2 	bl	d73c0 <_ZN7TwoWire5writeEi>
	//endTransmission but keep the connection active
	if (Wire.endTransmission(false) == 0)
   d743c:	f004 f83c 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d7440:	2100      	movs	r1, #0
   d7442:	f001 fd70 	bl	d8f26 <_ZN7TwoWire15endTransmissionEh>
   d7446:	b108      	cbz	r0, d744c <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x2a>
        //Ask for 1 byte, once done, bus is released by default
    	if (Wire.requestFrom(address, 1) == 1)
    	    return Wire.read();
	}

    return 0;
   d7448:	2000      	movs	r0, #0
}
   d744a:	bd38      	pop	{r3, r4, r5, pc}
    	if (Wire.requestFrom(address, 1) == 1)
   d744c:	f004 f834 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d7450:	7d21      	ldrb	r1, [r4, #20]
   d7452:	2201      	movs	r2, #1
   d7454:	f001 fd45 	bl	d8ee2 <_ZN7TwoWire11requestFromEhj>
   d7458:	2801      	cmp	r0, #1
   d745a:	d1f5      	bne.n	d7448 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x26>
    	    return Wire.read();
   d745c:	f004 f82c 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d7460:	6803      	ldr	r3, [r0, #0]
   d7462:	695b      	ldr	r3, [r3, #20]
   d7464:	4798      	blx	r3
   d7466:	b2c0      	uxtb	r0, r0
   d7468:	e7ef      	b.n	d744a <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register+0x28>

000d746a <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>:
{
   d746a:	b538      	push	{r3, r4, r5, lr}
   d746c:	460d      	mov	r5, r1
	byte cfg = readRegister(XYZ_DATA_CFG);
   d746e:	210e      	movs	r1, #14
{
   d7470:	4604      	mov	r4, r0
	byte cfg = readRegister(XYZ_DATA_CFG);
   d7472:	f7ff ffd6 	bl	d7422 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	cfg &= 0xFC; // Mask out scale bits
   d7476:	f020 0203 	bic.w	r2, r0, #3
	cfg |= (fsr >> 2);  // Neat trick, see page 22. 00 = 2G, 01 = 4A, 10 = 8G
   d747a:	ea42 0295 	orr.w	r2, r2, r5, lsr #2
	writeRegister(XYZ_DATA_CFG, cfg);
   d747e:	4620      	mov	r0, r4
   d7480:	b2d2      	uxtb	r2, r2
}
   d7482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(XYZ_DATA_CFG, cfg);
   d7486:	210e      	movs	r1, #14
   d7488:	f7ff bfc0 	b.w	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d748c <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>:
{
   d748c:	b538      	push	{r3, r4, r5, lr}
   d748e:	460d      	mov	r5, r1
	byte ctrl = readRegister(CTRL_REG1);
   d7490:	212a      	movs	r1, #42	; 0x2a
{
   d7492:	4604      	mov	r4, r0
	byte ctrl = readRegister(CTRL_REG1);
   d7494:	f7ff ffc5 	bl	d7422 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	ctrl &= 0xCF; // Mask out data rate bits
   d7498:	f020 0230 	bic.w	r2, r0, #48	; 0x30
	ctrl |= (odr << 3);
   d749c:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
	writeRegister(CTRL_REG1, ctrl);
   d74a0:	4620      	mov	r0, r4
   d74a2:	b2d2      	uxtb	r2, r2
}
   d74a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(CTRL_REG1, ctrl);
   d74a8:	212a      	movs	r1, #42	; 0x2a
   d74aa:	f7ff bfaf 	b.w	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d74ae <_ZN8MMA8452Q7setupPLEv>:
{
   d74ae:	b510      	push	{r4, lr}
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d74b0:	2111      	movs	r1, #17
{
   d74b2:	4604      	mov	r4, r0
	writeRegister(PL_CFG, readRegister(PL_CFG) | 0x40); // Set PL_EN (enable)
   d74b4:	f7ff ffb5 	bl	d7422 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
   d74b8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   d74bc:	b2c2      	uxtb	r2, r0
   d74be:	2111      	movs	r1, #17
   d74c0:	4620      	mov	r0, r4
   d74c2:	f7ff ffa3 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d74c6:	4620      	mov	r0, r4
   d74c8:	2250      	movs	r2, #80	; 0x50
}
   d74ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(PL_COUNT, 0x50);  // Debounce counter at 100ms (at 800 hz)
   d74ce:	2112      	movs	r1, #18
   d74d0:	f7ff bf9c 	b.w	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d74d4 <_ZN8MMA8452Q7standbyEv>:
{
   d74d4:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d74d6:	212a      	movs	r1, #42	; 0x2a
{
   d74d8:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d74da:	f7ff ffa2 	bl	d7422 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d74de:	212a      	movs	r1, #42	; 0x2a
   d74e0:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
   d74e4:	4620      	mov	r0, r4
}
   d74e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c & ~(0x01)); //Clear the active bit to go into standby
   d74ea:	f7ff bf8f 	b.w	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>

000d74ee <_ZN8MMA8452Q6activeEv>:
{
   d74ee:	b510      	push	{r4, lr}
	byte c = readRegister(CTRL_REG1);
   d74f0:	212a      	movs	r1, #42	; 0x2a
{
   d74f2:	4604      	mov	r4, r0
	byte c = readRegister(CTRL_REG1);
   d74f4:	f7ff ff95 	bl	d7422 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d74f8:	f040 0001 	orr.w	r0, r0, #1
   d74fc:	b2c2      	uxtb	r2, r0
   d74fe:	212a      	movs	r1, #42	; 0x2a
   d7500:	4620      	mov	r0, r4
}
   d7502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	writeRegister(CTRL_REG1, c | 0x01); //Set the active bit to begin detection
   d7506:	f7ff bf81 	b.w	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
   d750a:	0000      	movs	r0, r0
   d750c:	0000      	movs	r0, r0
	...

000d7510 <_ZN8MMA8452Q17setupTapIntsPulseEh>:
{
   d7510:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7512:	4604      	mov	r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d7514:	2900      	cmp	r1, #0
   d7516:	d04f      	beq.n	d75b8 <_ZN8MMA8452Q17setupTapIntsPulseEh+0xa8>
   d7518:	290a      	cmp	r1, #10
   d751a:	bfa8      	it	ge
   d751c:	210a      	movge	r1, #10
   d751e:	4608      	mov	r0, r1
	sensitivity *= 12.7;																	// Convert to range from 1-127;
   d7520:	f004 f96e 	bl	db800 <__aeabi_i2d>
   d7524:	a326      	add	r3, pc, #152	; (adr r3, d75c0 <_ZN8MMA8452Q17setupTapIntsPulseEh+0xb0>)
   d7526:	e9d3 2300 	ldrd	r2, r3, [r3]
   d752a:	f004 f9d3 	bl	db8d4 <__aeabi_dmul>
   d752e:	f004 fc0b 	bl	dbd48 <__aeabi_d2uiz>
	interruptThreshold = map(sensitivity , 0x01, 0x7F, 0x10, 0x01);			// Map and compress the threshold
   d7532:	2101      	movs	r1, #1
   d7534:	2310      	movs	r3, #16
   d7536:	9100      	str	r1, [sp, #0]
   d7538:	227f      	movs	r2, #127	; 0x7f
   d753a:	b2c0      	uxtb	r0, r0
   d753c:	f000 ff82 	bl	d8444 <_Z3mapiiiii>
   d7540:	b2c5      	uxtb	r5, r0
  standby();  // Must be in standby to change registers
   d7542:	4620      	mov	r0, r4
   d7544:	f7ff ffc6 	bl	d74d4 <_ZN8MMA8452Q7standbyEv>
  writeRegister(PULSE_CFG, 0x15);  // 1. single taps only on all axes - without latch
   d7548:	4620      	mov	r0, r4
   d754a:	2215      	movs	r2, #21
   d754c:	2121      	movs	r1, #33	; 0x21
   d754e:	f7ff ff5d 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_THSX, interruptThreshold);  // 2. x thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d7552:	462a      	mov	r2, r5
   d7554:	4620      	mov	r0, r4
   d7556:	2123      	movs	r1, #35	; 0x23
   d7558:	f7ff ff58 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_THSY, interruptThreshold);  // 2. y thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d755c:	462a      	mov	r2, r5
   d755e:	4620      	mov	r0, r4
   d7560:	2124      	movs	r1, #36	; 0x24
   d7562:	f7ff ff53 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_THSZ, interruptThreshold);  // 2. z thresh from 0 to 127, multiply the value by 0.0625g/LSB to get the accelThreshold
   d7566:	462a      	mov	r2, r5
   d7568:	4620      	mov	r0, r4
   d756a:	2125      	movs	r1, #37	; 0x25
   d756c:	f7ff ff4e 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_TMLT, 0xFF);  // 3. Max time limit at 100Hz odr, this is very dependent on data rate, see the app note
   d7570:	4620      	mov	r0, r4
   d7572:	22ff      	movs	r2, #255	; 0xff
   d7574:	2126      	movs	r1, #38	; 0x26
   d7576:	f7ff ff49 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_LTCY, 0xFF);  // 4. max time between taps
   d757a:	4620      	mov	r0, r4
   d757c:	22ff      	movs	r2, #255	; 0xff
   d757e:	2127      	movs	r1, #39	; 0x27
   d7580:	f7ff ff44 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(PULSE_WIND, 0xFF);  // 5. 318ms (max value) between taps max
   d7584:	4620      	mov	r0, r4
   d7586:	22ff      	movs	r2, #255	; 0xff
   d7588:	2128      	movs	r1, #40	; 0x28
   d758a:	f7ff ff3f 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
	writeRegister(CTRL_REG3, 0x02);  // Active high, push-pull interrupts
   d758e:	4620      	mov	r0, r4
   d7590:	2202      	movs	r2, #2
   d7592:	212c      	movs	r1, #44	; 0x2c
   d7594:	f7ff ff3a 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(CTRL_REG4, 0x08);  // Tap ints enabled
   d7598:	4620      	mov	r0, r4
   d759a:	2208      	movs	r2, #8
   d759c:	212d      	movs	r1, #45	; 0x2d
   d759e:	f7ff ff35 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  writeRegister(CTRL_REG5, 0x08);  // Taps on INT2
   d75a2:	4620      	mov	r0, r4
   d75a4:	2208      	movs	r2, #8
   d75a6:	212e      	movs	r1, #46	; 0x2e
   d75a8:	f7ff ff30 	bl	d740c <_ZN8MMA8452Q13writeRegisterE17MMA8452Q_Registerh>
  active();  // Set to active to start reading
   d75ac:	4620      	mov	r0, r4
}
   d75ae:	b003      	add	sp, #12
   d75b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  active();  // Set to active to start reading
   d75b4:	f7ff bf9b 	b.w	d74ee <_ZN8MMA8452Q6activeEv>
   d75b8:	2001      	movs	r0, #1
   d75ba:	e7b1      	b.n	d7520 <_ZN8MMA8452Q17setupTapIntsPulseEh+0x10>
   d75bc:	f3af 8000 	nop.w
   d75c0:	66666666 	.word	0x66666666
   d75c4:	40296666 	.word	0x40296666

000d75c8 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR>:
{
   d75c8:	b538      	push	{r3, r4, r5, lr}
	scale = fsr; // Haul fsr into our class variable, scale
   d75ca:	7541      	strb	r1, [r0, #21]
{
   d75cc:	4615      	mov	r5, r2
   d75ce:	4604      	mov	r4, r0
	Wire.begin(); // Initialize I2C
   d75d0:	f003 ff72 	bl	db4b8 <_Z19__fetch_global_Wirev>
   d75d4:	f001 fc56 	bl	d8e84 <_ZN7TwoWire5beginEv>
	byte c = readRegister(WHO_AM_I);  // Read WHO_AM_I register
   d75d8:	210d      	movs	r1, #13
   d75da:	4620      	mov	r0, r4
   d75dc:	f7ff ff21 	bl	d7422 <_ZN8MMA8452Q12readRegisterE17MMA8452Q_Register>
	if (c != 0x2A) // WHO_AM_I should always be 0x2A
   d75e0:	282a      	cmp	r0, #42	; 0x2a
   d75e2:	d112      	bne.n	d760a <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x42>
	standby();  // Must be in standby to change registers
   d75e4:	4620      	mov	r0, r4
   d75e6:	f7ff ff75 	bl	d74d4 <_ZN8MMA8452Q7standbyEv>
	setScale(scale);  // Set up accelerometer scale
   d75ea:	7d61      	ldrb	r1, [r4, #21]
   d75ec:	4620      	mov	r0, r4
   d75ee:	f7ff ff3c 	bl	d746a <_ZN8MMA8452Q8setScaleE14MMA8452Q_Scale>
	setODR(odr);  // Set up output data rate
   d75f2:	4629      	mov	r1, r5
   d75f4:	4620      	mov	r0, r4
   d75f6:	f7ff ff49 	bl	d748c <_ZN8MMA8452Q6setODRE12MMA8452Q_ODR>
	setupPL();  // Set up portrait/landscape detection
   d75fa:	4620      	mov	r0, r4
   d75fc:	f7ff ff57 	bl	d74ae <_ZN8MMA8452Q7setupPLEv>
	active();  // Set to active to start reading
   d7600:	4620      	mov	r0, r4
   d7602:	f7ff ff74 	bl	d74ee <_ZN8MMA8452Q6activeEv>
   d7606:	2001      	movs	r0, #1
}
   d7608:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   d760a:	2000      	movs	r0, #0
   d760c:	e7fc      	b.n	d7608 <_ZN8MMA8452Q5beginE14MMA8452Q_Scale12MMA8452Q_ODR+0x40>

000d760e <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d760e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d7610:	4603      	mov	r3, r0
	switch (__op)
   d7612:	d102      	bne.n	d761a <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d7614:	6001      	str	r1, [r0, #0]
      }
   d7616:	2000      	movs	r0, #0
   d7618:	4770      	bx	lr
	  switch (__op)
   d761a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d761c:	bf04      	itt	eq
   d761e:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d7622:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d7626:	e7f6      	b.n	d7616 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d7628 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d7628:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d762a:	2301      	movs	r3, #1
   d762c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d762e:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d7630:	4604      	mov	r4, r0
        if (th->func) {
   d7632:	b143      	cbz	r3, d7646 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d7634:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7636:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d7638:	2301      	movs	r3, #1
   d763a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d763c:	2000      	movs	r0, #0
    }
   d763e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d7642:	f000 bb53 	b.w	d7cec <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d7646:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d7648:	2800      	cmp	r0, #0
   d764a:	d0f5      	beq.n	d7638 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d764c:	6883      	ldr	r3, [r0, #8]
   d764e:	b90b      	cbnz	r3, d7654 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d7650:	f003 ff80 	bl	db554 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7654:	68c3      	ldr	r3, [r0, #12]
   d7656:	e7ee      	b.n	d7636 <_ZN6Thread3runEPv+0xe>

000d7658 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7658:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d765a:	6842      	ldr	r2, [r0, #4]
   d765c:	4603      	mov	r3, r0
   d765e:	1054      	asrs	r4, r2, #1
   d7660:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d7664:	07d2      	lsls	r2, r2, #31
   d7666:	bf48      	it	mi
   d7668:	590a      	ldrmi	r2, [r1, r4]
   d766a:	681b      	ldr	r3, [r3, #0]
      }
   d766c:	f85d 4b04 	ldr.w	r4, [sp], #4
   d7670:	bf48      	it	mi
   d7672:	58d3      	ldrmi	r3, [r2, r3]
   d7674:	4718      	bx	r3
	...

000d7678 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d7678:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d767a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d767c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d7680:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d7682:	3008      	adds	r0, #8
   d7684:	f000 faf2 	bl	d7c6c <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d7688:	2004      	movs	r0, #4
   d768a:	f7fc fd04 	bl	d4096 <_Znwj>
   d768e:	4605      	mov	r5, r0
   d7690:	b398      	cbz	r0, d76fa <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d7692:	491b      	ldr	r1, [pc, #108]	; (d7700 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d7694:	2014      	movs	r0, #20
   d7696:	f003 ff59 	bl	db54c <_ZnwjRKSt9nothrow_t>
   d769a:	b130      	cbz	r0, d76aa <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d769c:	2300      	movs	r3, #0
            exited(false) {
   d769e:	e9c0 3300 	strd	r3, r3, [r0]
   d76a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d76a6:	7403      	strb	r3, [r0, #16]
   d76a8:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d76aa:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d76ac:	b1a0      	cbz	r0, d76d8 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d76ae:	4b15      	ldr	r3, [pc, #84]	; (d7704 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d76b0:	4915      	ldr	r1, [pc, #84]	; (d7708 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d76b2:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d76b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d76ba:	e9cd 0300 	strd	r0, r3, [sp]
   d76be:	2202      	movs	r2, #2
   d76c0:	4b12      	ldr	r3, [pc, #72]	; (d770c <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d76c2:	3004      	adds	r0, #4
   d76c4:	f000 fa9a 	bl	d7bfc <os_thread_create>
   d76c8:	b930      	cbnz	r0, d76d8 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d76ca:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d76cc:	7c1b      	ldrb	r3, [r3, #16]
   d76ce:	b9a3      	cbnz	r3, d76fa <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d76d0:	2001      	movs	r0, #1
   d76d2:	f000 fb33 	bl	d7d3c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d76d6:	e7f8      	b.n	d76ca <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76d8:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d76da:	2300      	movs	r3, #0
   d76dc:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d76de:	b164      	cbz	r4, d76fa <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d76e0:	6827      	ldr	r7, [r4, #0]
   d76e2:	b137      	cbz	r7, d76f2 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d76e4:	4638      	mov	r0, r7
   d76e6:	f7fc fe51 	bl	d438c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d76ea:	2110      	movs	r1, #16
   d76ec:	4638      	mov	r0, r7
   d76ee:	f003 ff2b 	bl	db548 <_ZdlPvj>
   d76f2:	2114      	movs	r1, #20
   d76f4:	4620      	mov	r0, r4
   d76f6:	f003 ff27 	bl	db548 <_ZdlPvj>
   d76fa:	6075      	str	r5, [r6, #4]
}
   d76fc:	b003      	add	sp, #12
   d76fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7700:	000dcfdc 	.word	0x000dcfdc
   d7704:	000d7917 	.word	0x000d7917
   d7708:	000dcbe4 	.word	0x000dcbe4
   d770c:	000d7629 	.word	0x000d7629

000d7710 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d7710:	f247 5130 	movw	r1, #30000	; 0x7530
   d7714:	4a08      	ldr	r2, [pc, #32]	; (d7738 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d7716:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7718:	4908      	ldr	r1, [pc, #32]	; (d773c <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d771a:	6002      	str	r2, [r0, #0]
   d771c:	2200      	movs	r2, #0
   d771e:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7722:	4907      	ldr	r1, [pc, #28]	; (d7740 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d7724:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d7726:	4907      	ldr	r1, [pc, #28]	; (d7744 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d7728:	6042      	str	r2, [r0, #4]
   d772a:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d772e:	6181      	str	r1, [r0, #24]
   d7730:	8502      	strh	r2, [r0, #40]	; 0x28
   d7732:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d7736:	4770      	bx	lr
   d7738:	000dcca8 	.word	0x000dcca8
   d773c:	000d7a81 	.word	0x000d7a81
   d7740:	000d7659 	.word	0x000d7659
   d7744:	000d760f 	.word	0x000d760f

000d7748 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d7748:	b510      	push	{r4, lr}
   d774a:	4b04      	ldr	r3, [pc, #16]	; (d775c <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d774c:	4604      	mov	r4, r0
   d774e:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d7752:	f7fc fe1b 	bl	d438c <_ZNSt14_Function_baseD1Ev>
}
   d7756:	4620      	mov	r0, r4
   d7758:	bd10      	pop	{r4, pc}
   d775a:	bf00      	nop
   d775c:	000dcca8 	.word	0x000dcca8

000d7760 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7760:	b510      	push	{r4, lr}
   d7762:	4b03      	ldr	r3, [pc, #12]	; (d7770 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d7764:	6003      	str	r3, [r0, #0]
   d7766:	4604      	mov	r4, r0
   d7768:	f7ff ffee 	bl	d7748 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d776c:	4620      	mov	r0, r4
   d776e:	bd10      	pop	{r4, pc}
   d7770:	000dccd0 	.word	0x000dccd0

000d7774 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d7774:	b510      	push	{r4, lr}
   d7776:	4604      	mov	r4, r0
}
   d7778:	f7ff fff2 	bl	d7760 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d777c:	4620      	mov	r0, r4
   d777e:	2138      	movs	r1, #56	; 0x38
   d7780:	f003 fee2 	bl	db548 <_ZdlPvj>
   d7784:	4620      	mov	r0, r4
   d7786:	bd10      	pop	{r4, pc}

000d7788 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d7788:	6880      	ldr	r0, [r0, #8]
   d778a:	f000 ba77 	b.w	d7c7c <os_mutex_lock>

000d778e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d778e:	6880      	ldr	r0, [r0, #8]
   d7790:	f000 ba7c 	b.w	d7c8c <os_mutex_unlock>

000d7794 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d7794:	b510      	push	{r4, lr}
   d7796:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d7798:	6800      	ldr	r0, [r0, #0]
   d779a:	f7ff fff8 	bl	d778e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d779e:	4620      	mov	r0, r4
   d77a0:	bd10      	pop	{r4, pc}

000d77a2 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d77a2:	b513      	push	{r0, r1, r4, lr}
   d77a4:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d77a6:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d77a8:	f7ff ffee 	bl	d7788 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d77ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d77ae:	88dc      	ldrh	r4, [r3, #6]
   d77b0:	b2a4      	uxth	r4, r4
   d77b2:	b10c      	cbz	r4, d77b8 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d77b4:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d77b8:	a801      	add	r0, sp, #4
   d77ba:	f7ff ffeb 	bl	d7794 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d77be:	4620      	mov	r0, r4
   d77c0:	b002      	add	sp, #8
   d77c2:	bd10      	pop	{r4, pc}

000d77c4 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d77c4:	b513      	push	{r0, r1, r4, lr}
   d77c6:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d77c8:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d77ca:	f7ff ffdd 	bl	d7788 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d77ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d77d2:	b943      	cbnz	r3, d77e6 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d77d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d77d6:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d77d8:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d77da:	a801      	add	r0, sp, #4
   d77dc:	f7ff ffda 	bl	d7794 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d77e0:	4620      	mov	r0, r4
   d77e2:	b002      	add	sp, #8
   d77e4:	bd10      	pop	{r4, pc}
	bool result = false;
   d77e6:	2400      	movs	r4, #0
   d77e8:	e7f7      	b.n	d77da <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d77ea <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d77ea:	b513      	push	{r0, r1, r4, lr}
   d77ec:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d77ee:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d77f0:	f7ff ffca 	bl	d7788 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d77f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d77f6:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d77f8:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d77fa:	f7ff ffcb 	bl	d7794 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d77fe:	4620      	mov	r0, r4
   d7800:	b002      	add	sp, #8
   d7802:	bd10      	pop	{r4, pc}

000d7804 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7808:	4699      	mov	r9, r3
   d780a:	b086      	sub	sp, #24
	if (!haveSetup) {
   d780c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d7810:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7814:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d7818:	4604      	mov	r4, r0
   d781a:	460f      	mov	r7, r1
   d781c:	4616      	mov	r6, r2
	if (!haveSetup) {
   d781e:	b913      	cbnz	r3, d7826 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d7820:	6803      	ldr	r3, [r0, #0]
   d7822:	689b      	ldr	r3, [r3, #8]
   d7824:	4798      	blx	r3
		data = "";
   d7826:	4b31      	ldr	r3, [pc, #196]	; (d78ec <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7828:	4638      	mov	r0, r7
		data = "";
   d782a:	2e00      	cmp	r6, #0
   d782c:	bf08      	it	eq
   d782e:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d7830:	f004 fc0b 	bl	dc04a <strlen>
   d7834:	4605      	mov	r5, r0
   d7836:	4630      	mov	r0, r6
   d7838:	f004 fc07 	bl	dc04a <strlen>
   d783c:	4428      	add	r0, r5
   d783e:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d7842:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d7844:	bf1c      	itt	ne
   d7846:	f025 0503 	bicne.w	r5, r5, #3
   d784a:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d784c:	4633      	mov	r3, r6
   d784e:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d7852:	e9cd 9a00 	strd	r9, sl, [sp]
   d7856:	4926      	ldr	r1, [pc, #152]	; (d78f0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d7858:	4826      	ldr	r0, [pc, #152]	; (d78f4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d785a:	463a      	mov	r2, r7
   d785c:	f7fc fe61 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d7860:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d7862:	3b08      	subs	r3, #8
   d7864:	42ab      	cmp	r3, r5
   d7866:	d212      	bcs.n	d788e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d7868:	2400      	movs	r4, #0
}
   d786a:	4620      	mov	r0, r4
   d786c:	b006      	add	sp, #24
   d786e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d7872:	88cb      	ldrh	r3, [r1, #6]
   d7874:	2b01      	cmp	r3, #1
   d7876:	d036      	beq.n	d78e6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d7878:	a805      	add	r0, sp, #20
   d787a:	f7ff ff8b 	bl	d7794 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d787e:	6823      	ldr	r3, [r4, #0]
   d7880:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d7884:	699b      	ldr	r3, [r3, #24]
   d7886:	4620      	mov	r0, r4
   d7888:	4798      	blx	r3
   d788a:	2800      	cmp	r0, #0
   d788c:	d0ec      	beq.n	d7868 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d788e:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7890:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d7892:	f7ff ff79 	bl	d7788 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7896:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d7898:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d789a:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d789c:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d789e:	1ad2      	subs	r2, r2, r3
   d78a0:	42aa      	cmp	r2, r5
   d78a2:	d3e6      	bcc.n	d7872 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d78a4:	ea48 080a 	orr.w	r8, r8, sl
   d78a8:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d78ac:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d78b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d78b2:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d78b6:	4639      	mov	r1, r7
   d78b8:	4640      	mov	r0, r8
   d78ba:	f004 fba0 	bl	dbffe <strcpy>
				cp += strlen(cp) + 1;
   d78be:	4640      	mov	r0, r8
   d78c0:	f004 fbc3 	bl	dc04a <strlen>
   d78c4:	3001      	adds	r0, #1
				strcpy(cp, data);
   d78c6:	4631      	mov	r1, r6
   d78c8:	4440      	add	r0, r8
   d78ca:	f004 fb98 	bl	dbffe <strcpy>
				nextFree += size;
   d78ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d78d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d78d2:	441d      	add	r5, r3
   d78d4:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d78d6:	88d3      	ldrh	r3, [r2, #6]
   d78d8:	3301      	adds	r3, #1
   d78da:	80d3      	strh	r3, [r2, #6]
				return true;
   d78dc:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d78de:	a805      	add	r0, sp, #20
   d78e0:	f7ff ff58 	bl	d7794 <_ZN11StMutexLockD1Ev>
   d78e4:	e7c1      	b.n	d786a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d78e6:	2400      	movs	r4, #0
   d78e8:	e7f9      	b.n	d78de <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d78ea:	bf00      	nop
   d78ec:	000dce59 	.word	0x000dce59
   d78f0:	000dcbf6 	.word	0x000dcbf6
   d78f4:	2003e460 	.word	0x2003e460

000d78f8 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d78f8:	b508      	push	{r3, lr}
   d78fa:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d78fc:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d7900:	69a3      	ldr	r3, [r4, #24]
   d7902:	b90b      	cbnz	r3, d7908 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d7904:	f003 fe26 	bl	db554 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7908:	69e3      	ldr	r3, [r4, #28]
   d790a:	4621      	mov	r1, r4
   d790c:	4628      	mov	r0, r5
   d790e:	4798      	blx	r3
		os_thread_yield();
   d7910:	f000 f97c 	bl	d7c0c <os_thread_yield>
	while(true) {
   d7914:	e7f4      	b.n	d7900 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d7916 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d7916:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d7918:	f7ff ffee 	bl	d78f8 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d791c <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d791c:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d791e:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d7922:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7924:	4628      	mov	r0, r5
   d7926:	f004 fb90 	bl	dc04a <strlen>
   d792a:	3001      	adds	r0, #1
   d792c:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d792e:	4628      	mov	r0, r5
   d7930:	f004 fb8b 	bl	dc04a <strlen>
	size_t offset = start - retainedBuffer;
   d7934:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d7936:	3001      	adds	r0, #1
   d7938:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d793a:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d793c:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d7940:	bf1c      	itt	ne
   d7942:	f1c3 0304 	rsbne	r3, r3, #4
   d7946:	18c0      	addne	r0, r0, r3
}
   d7948:	bd68      	pop	{r3, r5, r6, pc}

000d794a <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d794a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d794c:	4604      	mov	r4, r0
   d794e:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d7950:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d7952:	f7ff ff19 	bl	d7788 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d7956:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7958:	88fb      	ldrh	r3, [r7, #6]
   d795a:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d795e:	b1e6      	cbz	r6, d799a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d7960:	2b01      	cmp	r3, #1
   d7962:	d922      	bls.n	d79aa <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d7964:	4629      	mov	r1, r5
   d7966:	4620      	mov	r0, r4
   d7968:	f7ff ffd8 	bl	d791c <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d796c:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d796e:	4629      	mov	r1, r5
   d7970:	4620      	mov	r0, r4
   d7972:	f7ff ffd3 	bl	d791c <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d7976:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d7978:	443a      	add	r2, r7
	if (after > 0) {
   d797a:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d797c:	4601      	mov	r1, r0
	size_t len = next - start;
   d797e:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d7982:	d002      	beq.n	d798a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d7984:	4628      	mov	r0, r5
   d7986:	f004 fad3 	bl	dbf30 <memmove>
	nextFree -= len;
   d798a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d798c:	1b9b      	subs	r3, r3, r6
   d798e:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d7990:	88fb      	ldrh	r3, [r7, #6]
   d7992:	3b01      	subs	r3, #1
   d7994:	80fb      	strh	r3, [r7, #6]
	return true;
   d7996:	2601      	movs	r6, #1
   d7998:	e001      	b.n	d799e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d799a:	2b00      	cmp	r3, #0
   d799c:	d1e7      	bne.n	d796e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d799e:	a801      	add	r0, sp, #4
   d79a0:	f7ff fef8 	bl	d7794 <_ZN11StMutexLockD1Ev>
}
   d79a4:	4630      	mov	r0, r6
   d79a6:	b003      	add	sp, #12
   d79a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d79aa:	2600      	movs	r6, #0
   d79ac:	e7f7      	b.n	d799e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d79b0 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d79b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d79b4:	460d      	mov	r5, r1
   d79b6:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79b8:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d79ba:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79bc:	f7ff fea8 	bl	d7710 <_ZN21PublishQueueAsyncBaseC1Ev>
   d79c0:	4b15      	ldr	r3, [pc, #84]	; (d7a18 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79c2:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79c6:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79c8:	4b14      	ldr	r3, [pc, #80]	; (d7a1c <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79ca:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79cc:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d79ce:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d79d0:	4698      	mov	r8, r3
   d79d2:	d117      	bne.n	d7a04 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d79d4:	88ab      	ldrh	r3, [r5, #4]
   d79d6:	b29b      	uxth	r3, r3
   d79d8:	42b3      	cmp	r3, r6
   d79da:	d113      	bne.n	d7a04 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d79dc:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d79e0:	6367      	str	r7, [r4, #52]	; 0x34
   d79e2:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d79e6:	88eb      	ldrh	r3, [r5, #6]
   d79e8:	fa1f f289 	uxth.w	r2, r9
   d79ec:	b29b      	uxth	r3, r3
   d79ee:	429a      	cmp	r2, r3
   d79f0:	d20e      	bcs.n	d7a10 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d79f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d79f4:	4620      	mov	r0, r4
   d79f6:	f7ff ff91 	bl	d791c <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d79fa:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d79fc:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d79fe:	f109 0901 	add.w	r9, r9, #1
   d7a02:	d9f0      	bls.n	d79e6 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d7a04:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d7a06:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d7a0a:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d7a0c:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d7a0e:	80eb      	strh	r3, [r5, #6]
}
   d7a10:	4620      	mov	r0, r4
   d7a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a16:	bf00      	nop
   d7a18:	000dccd0 	.word	0x000dccd0
   d7a1c:	d19cab61 	.word	0xd19cab61

000d7a20 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d7a20:	b510      	push	{r4, lr}
   d7a22:	e9d1 2300 	ldrd	r2, r3, [r1]
   d7a26:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d7a28:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d7a2a:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d7a2c:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d7a2e:	b90a      	cbnz	r2, d7a34 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d7a30:	07d9      	lsls	r1, r3, #31
   d7a32:	d505      	bpl.n	d7a40 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d7a34:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d7a38:	4b0f      	ldr	r3, [pc, #60]	; (d7a78 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d7a3a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d7a3c:	4b0f      	ldr	r3, [pc, #60]	; (d7a7c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d7a3e:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a40:	ab02      	add	r3, sp, #8
   d7a42:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7a46:	466a      	mov	r2, sp
   d7a48:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a4c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7a50:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7a54:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a58:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a5a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7a5e:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a60:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a62:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7a64:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d7a66:	4618      	mov	r0, r3
   d7a68:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a6a:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7a6c:	9105      	str	r1, [sp, #20]
   d7a6e:	f7fc fc8d 	bl	d438c <_ZNSt14_Function_baseD1Ev>
	}
   d7a72:	4620      	mov	r0, r4
   d7a74:	b006      	add	sp, #24
   d7a76:	bd10      	pop	{r4, pc}
   d7a78:	000d7659 	.word	0x000d7659
   d7a7c:	000d760f 	.word	0x000d760f

000d7a80 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d7a80:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7a82:	4b05      	ldr	r3, [pc, #20]	; (d7a98 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d7a84:	9300      	str	r3, [sp, #0]
   d7a86:	4669      	mov	r1, sp
   d7a88:	2300      	movs	r3, #0
   d7a8a:	3010      	adds	r0, #16
   d7a8c:	9301      	str	r3, [sp, #4]
   d7a8e:	f7ff ffc7 	bl	d7a20 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7a92:	b003      	add	sp, #12
   d7a94:	f85d fb04 	ldr.w	pc, [sp], #4
   d7a98:	000d7ac9 	.word	0x000d7ac9

000d7a9c <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d7a9c:	b513      	push	{r0, r1, r4, lr}
   d7a9e:	4604      	mov	r4, r0
   d7aa0:	f000 f95c 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d7aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7aa6:	1ac0      	subs	r0, r0, r3
   d7aa8:	68e3      	ldr	r3, [r4, #12]
   d7aaa:	4298      	cmp	r0, r3
   d7aac:	d308      	bcc.n	d7ac0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d7aae:	4b05      	ldr	r3, [pc, #20]	; (d7ac4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d7ab0:	9300      	str	r3, [sp, #0]
   d7ab2:	4669      	mov	r1, sp
   d7ab4:	2300      	movs	r3, #0
   d7ab6:	f104 0010 	add.w	r0, r4, #16
   d7aba:	9301      	str	r3, [sp, #4]
   d7abc:	f7ff ffb0 	bl	d7a20 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d7ac0:	b002      	add	sp, #8
   d7ac2:	bd10      	pop	{r4, pc}
   d7ac4:	000d7ac9 	.word	0x000d7ac9

000d7ac8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d7ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7acc:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d7ad0:	b086      	sub	sp, #24
   d7ad2:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d7ad4:	2b00      	cmp	r3, #0
   d7ad6:	d164      	bne.n	d7ba2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7ad8:	f000 fb9c 	bl	d8214 <spark_cloud_flag_connected>
   d7adc:	2800      	cmp	r0, #0
   d7ade:	d060      	beq.n	d7ba2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d7ae0:	f000 f93c 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
   d7ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7ae6:	1ac0      	subs	r0, r0, r3
   d7ae8:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d7aec:	4298      	cmp	r0, r3
   d7aee:	d958      	bls.n	d7ba2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d7af0:	6823      	ldr	r3, [r4, #0]
   d7af2:	4620      	mov	r0, r4
   d7af4:	695b      	ldr	r3, [r3, #20]
   d7af6:	4798      	blx	r3
		if (data) {
   d7af8:	4605      	mov	r5, r0
   d7afa:	2800      	cmp	r0, #0
   d7afc:	d051      	beq.n	d7ba2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d7afe:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d7b02:	2301      	movs	r3, #1
   d7b04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d7b08:	4638      	mov	r0, r7
   d7b0a:	f004 fa9e 	bl	dc04a <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d7b0e:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b12:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d7b16:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b18:	682b      	ldr	r3, [r5, #0]
   d7b1a:	492b      	ldr	r1, [pc, #172]	; (d7bc8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d7b1c:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d7b1e:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d7b20:	4633      	mov	r3, r6
   d7b22:	482a      	ldr	r0, [pc, #168]	; (d7bcc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b24:	463a      	mov	r2, r7
   d7b26:	f7fc fcfc 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d7b2a:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d7b2c:	f88d 8000 	strb.w	r8, [sp]
   d7b30:	4632      	mov	r2, r6
   d7b32:	4639      	mov	r1, r7
   d7b34:	a802      	add	r0, sp, #8
   d7b36:	f000 ff99 	bl	d8a6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d7b3a:	9d02      	ldr	r5, [sp, #8]
   d7b3c:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d7b3e:	b91b      	cbnz	r3, d7b48 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d7b40:	2001      	movs	r0, #1
   d7b42:	f000 fc8b 	bl	d845c <delay>
			while(!request.isDone()) {
   d7b46:	e7f8      	b.n	d7b3a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7b48:	2000      	movs	r0, #0
   d7b4a:	f000 faf1 	bl	d8130 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7b4e:	b120      	cbz	r0, d7b5a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d7b50:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d7b52:	b913      	cbnz	r3, d7b5a <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d7b54:	f000 fb4e 	bl	d81f4 <spark_process>
    }
   d7b58:	e7fa      	b.n	d7b50 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7b5a:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d7b5c:	2b01      	cmp	r3, #1
   d7b5e:	d123      	bne.n	d7ba8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d7b60:	491b      	ldr	r1, [pc, #108]	; (d7bd0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d7b62:	481a      	ldr	r0, [pc, #104]	; (d7bcc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7b64:	f7fc fcdd 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d7b68:	6823      	ldr	r3, [r4, #0]
   d7b6a:	2100      	movs	r1, #0
   d7b6c:	699b      	ldr	r3, [r3, #24]
   d7b6e:	4620      	mov	r0, r4
   d7b70:	4798      	blx	r3
			isSending = false;
   d7b72:	2300      	movs	r3, #0
   d7b74:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d7b78:	f000 f8f0 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d7b7c:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7b7e:	9c03      	ldr	r4, [sp, #12]
   d7b80:	b17c      	cbz	r4, d7ba2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d7b82:	6863      	ldr	r3, [r4, #4]
   d7b84:	3b01      	subs	r3, #1
   d7b86:	6063      	str	r3, [r4, #4]
   d7b88:	b95b      	cbnz	r3, d7ba2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d7b8a:	6823      	ldr	r3, [r4, #0]
   d7b8c:	4620      	mov	r0, r4
   d7b8e:	689b      	ldr	r3, [r3, #8]
   d7b90:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7b92:	68a3      	ldr	r3, [r4, #8]
   d7b94:	3b01      	subs	r3, #1
   d7b96:	60a3      	str	r3, [r4, #8]
   d7b98:	b91b      	cbnz	r3, d7ba2 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d7b9a:	6823      	ldr	r3, [r4, #0]
   d7b9c:	4620      	mov	r0, r4
   d7b9e:	68db      	ldr	r3, [r3, #12]
   d7ba0:	4798      	blx	r3
}
   d7ba2:	b006      	add	sp, #24
   d7ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d7ba8:	68e2      	ldr	r2, [r4, #12]
   d7baa:	490a      	ldr	r1, [pc, #40]	; (d7bd4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d7bac:	4807      	ldr	r0, [pc, #28]	; (d7bcc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d7bae:	f7fc fcb8 	bl	d4522 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d7bb2:	4b09      	ldr	r3, [pc, #36]	; (d7bd8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d7bb4:	9304      	str	r3, [sp, #16]
   d7bb6:	a904      	add	r1, sp, #16
   d7bb8:	2300      	movs	r3, #0
   d7bba:	f104 0010 	add.w	r0, r4, #16
   d7bbe:	9305      	str	r3, [sp, #20]
   d7bc0:	f7ff ff2e 	bl	d7a20 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d7bc4:	e7d5      	b.n	d7b72 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d7bc6:	bf00      	nop
   d7bc8:	000dcc37 	.word	0x000dcc37
   d7bcc:	2003e460 	.word	0x2003e460
   d7bd0:	000dcc58 	.word	0x000dcc58
   d7bd4:	000dcc6f 	.word	0x000dcc6f
   d7bd8:	000d7a9d 	.word	0x000d7a9d

000d7bdc <_GLOBAL__sub_I_pubqLogger>:
   d7bdc:	4b01      	ldr	r3, [pc, #4]	; (d7be4 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d7bde:	4a02      	ldr	r2, [pc, #8]	; (d7be8 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d7be0:	601a      	str	r2, [r3, #0]
}
   d7be2:	4770      	bx	lr
   d7be4:	2003e460 	.word	0x2003e460
   d7be8:	000dcc96 	.word	0x000dcc96

000d7bec <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d7bec:	b508      	push	{r3, lr}
   d7bee:	4b02      	ldr	r3, [pc, #8]	; (d7bf8 <cellular_signal+0xc>)
   d7bf0:	681b      	ldr	r3, [r3, #0]
   d7bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7bf4:	9301      	str	r3, [sp, #4]
   d7bf6:	bd08      	pop	{r3, pc}
   d7bf8:	00030274 	.word	0x00030274

000d7bfc <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d7bfc:	b508      	push	{r3, lr}
   d7bfe:	4b02      	ldr	r3, [pc, #8]	; (d7c08 <os_thread_create+0xc>)
   d7c00:	681b      	ldr	r3, [r3, #0]
   d7c02:	685b      	ldr	r3, [r3, #4]
   d7c04:	9301      	str	r3, [sp, #4]
   d7c06:	bd08      	pop	{r3, pc}
   d7c08:	00030248 	.word	0x00030248

000d7c0c <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7c0c:	b508      	push	{r3, lr}
   d7c0e:	4b02      	ldr	r3, [pc, #8]	; (d7c18 <os_thread_yield+0xc>)
   d7c10:	681b      	ldr	r3, [r3, #0]
   d7c12:	68db      	ldr	r3, [r3, #12]
   d7c14:	9301      	str	r3, [sp, #4]
   d7c16:	bd08      	pop	{r3, pc}
   d7c18:	00030248 	.word	0x00030248

000d7c1c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d7c1c:	b508      	push	{r3, lr}
   d7c1e:	4b02      	ldr	r3, [pc, #8]	; (d7c28 <os_thread_scheduling+0xc>)
   d7c20:	681b      	ldr	r3, [r3, #0]
   d7c22:	69db      	ldr	r3, [r3, #28]
   d7c24:	9301      	str	r3, [sp, #4]
   d7c26:	bd08      	pop	{r3, pc}
   d7c28:	00030248 	.word	0x00030248

000d7c2c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d7c2c:	b508      	push	{r3, lr}
   d7c2e:	4b02      	ldr	r3, [pc, #8]	; (d7c38 <os_timer_create+0xc>)
   d7c30:	681b      	ldr	r3, [r3, #0]
   d7c32:	6a1b      	ldr	r3, [r3, #32]
   d7c34:	9301      	str	r3, [sp, #4]
   d7c36:	bd08      	pop	{r3, pc}
   d7c38:	00030248 	.word	0x00030248

000d7c3c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d7c3c:	b508      	push	{r3, lr}
   d7c3e:	4b02      	ldr	r3, [pc, #8]	; (d7c48 <os_timer_destroy+0xc>)
   d7c40:	681b      	ldr	r3, [r3, #0]
   d7c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7c44:	9301      	str	r3, [sp, #4]
   d7c46:	bd08      	pop	{r3, pc}
   d7c48:	00030248 	.word	0x00030248

000d7c4c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d7c4c:	b508      	push	{r3, lr}
   d7c4e:	4b02      	ldr	r3, [pc, #8]	; (d7c58 <os_timer_get_id+0xc>)
   d7c50:	681b      	ldr	r3, [r3, #0]
   d7c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7c54:	9301      	str	r3, [sp, #4]
   d7c56:	bd08      	pop	{r3, pc}
   d7c58:	00030248 	.word	0x00030248

000d7c5c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d7c5c:	b508      	push	{r3, lr}
   d7c5e:	4b02      	ldr	r3, [pc, #8]	; (d7c68 <os_timer_change+0xc>)
   d7c60:	681b      	ldr	r3, [r3, #0]
   d7c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c64:	9301      	str	r3, [sp, #4]
   d7c66:	bd08      	pop	{r3, pc}
   d7c68:	00030248 	.word	0x00030248

000d7c6c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7c6c:	b508      	push	{r3, lr}
   d7c6e:	4b02      	ldr	r3, [pc, #8]	; (d7c78 <os_mutex_create+0xc>)
   d7c70:	681b      	ldr	r3, [r3, #0]
   d7c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7c74:	9301      	str	r3, [sp, #4]
   d7c76:	bd08      	pop	{r3, pc}
   d7c78:	00030248 	.word	0x00030248

000d7c7c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d7c7c:	b508      	push	{r3, lr}
   d7c7e:	4b02      	ldr	r3, [pc, #8]	; (d7c88 <os_mutex_lock+0xc>)
   d7c80:	681b      	ldr	r3, [r3, #0]
   d7c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7c84:	9301      	str	r3, [sp, #4]
   d7c86:	bd08      	pop	{r3, pc}
   d7c88:	00030248 	.word	0x00030248

000d7c8c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d7c8c:	b508      	push	{r3, lr}
   d7c8e:	4b02      	ldr	r3, [pc, #8]	; (d7c98 <os_mutex_unlock+0xc>)
   d7c90:	681b      	ldr	r3, [r3, #0]
   d7c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7c94:	9301      	str	r3, [sp, #4]
   d7c96:	bd08      	pop	{r3, pc}
   d7c98:	00030248 	.word	0x00030248

000d7c9c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7c9c:	b508      	push	{r3, lr}
   d7c9e:	4b02      	ldr	r3, [pc, #8]	; (d7ca8 <os_mutex_recursive_create+0xc>)
   d7ca0:	681b      	ldr	r3, [r3, #0]
   d7ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7ca4:	9301      	str	r3, [sp, #4]
   d7ca6:	bd08      	pop	{r3, pc}
   d7ca8:	00030248 	.word	0x00030248

000d7cac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7cac:	b508      	push	{r3, lr}
   d7cae:	4b02      	ldr	r3, [pc, #8]	; (d7cb8 <os_mutex_recursive_destroy+0xc>)
   d7cb0:	681b      	ldr	r3, [r3, #0]
   d7cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7cb4:	9301      	str	r3, [sp, #4]
   d7cb6:	bd08      	pop	{r3, pc}
   d7cb8:	00030248 	.word	0x00030248

000d7cbc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7cbc:	b508      	push	{r3, lr}
   d7cbe:	4b02      	ldr	r3, [pc, #8]	; (d7cc8 <os_mutex_recursive_lock+0xc>)
   d7cc0:	681b      	ldr	r3, [r3, #0]
   d7cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7cc4:	9301      	str	r3, [sp, #4]
   d7cc6:	bd08      	pop	{r3, pc}
   d7cc8:	00030248 	.word	0x00030248

000d7ccc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7ccc:	b508      	push	{r3, lr}
   d7cce:	4b02      	ldr	r3, [pc, #8]	; (d7cd8 <os_mutex_recursive_unlock+0xc>)
   d7cd0:	681b      	ldr	r3, [r3, #0]
   d7cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7cd4:	9301      	str	r3, [sp, #4]
   d7cd6:	bd08      	pop	{r3, pc}
   d7cd8:	00030248 	.word	0x00030248

000d7cdc <os_timer_is_active>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
   d7cdc:	b508      	push	{r3, lr}
   d7cde:	4b02      	ldr	r3, [pc, #8]	; (d7ce8 <os_timer_is_active+0xc>)
   d7ce0:	681b      	ldr	r3, [r3, #0]
   d7ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7ce4:	9301      	str	r3, [sp, #4]
   d7ce6:	bd08      	pop	{r3, pc}
   d7ce8:	00030248 	.word	0x00030248

000d7cec <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7cec:	b508      	push	{r3, lr}
   d7cee:	4b02      	ldr	r3, [pc, #8]	; (d7cf8 <os_thread_exit+0xc>)
   d7cf0:	681b      	ldr	r3, [r3, #0]
   d7cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7cf4:	9301      	str	r3, [sp, #4]
   d7cf6:	bd08      	pop	{r3, pc}
   d7cf8:	00030248 	.word	0x00030248

000d7cfc <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d7cfc:	b508      	push	{r3, lr}
   d7cfe:	4b02      	ldr	r3, [pc, #8]	; (d7d08 <os_timer_set_id+0xc>)
   d7d00:	681b      	ldr	r3, [r3, #0]
   d7d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7d04:	9301      	str	r3, [sp, #4]
   d7d06:	bd08      	pop	{r3, pc}
   d7d08:	00030248 	.word	0x00030248

000d7d0c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d7d0c:	b508      	push	{r3, lr}
   d7d0e:	4b02      	ldr	r3, [pc, #8]	; (d7d18 <HAL_Feature_Set+0xc>)
   d7d10:	681b      	ldr	r3, [r3, #0]
   d7d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7d14:	9301      	str	r3, [sp, #4]
   d7d16:	bd08      	pop	{r3, pc}
   d7d18:	00030234 	.word	0x00030234

000d7d1c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d7d1c:	b508      	push	{r3, lr}
   d7d1e:	4b02      	ldr	r3, [pc, #8]	; (d7d28 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d7d20:	681b      	ldr	r3, [r3, #0]
   d7d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7d24:	9301      	str	r3, [sp, #4]
   d7d26:	bd08      	pop	{r3, pc}
   d7d28:	00030234 	.word	0x00030234

000d7d2c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7d2c:	b508      	push	{r3, lr}
   d7d2e:	4b02      	ldr	r3, [pc, #8]	; (d7d38 <HAL_RNG_GetRandomNumber+0xc>)
   d7d30:	681b      	ldr	r3, [r3, #0]
   d7d32:	685b      	ldr	r3, [r3, #4]
   d7d34:	9301      	str	r3, [sp, #4]
   d7d36:	bd08      	pop	{r3, pc}
   d7d38:	00030218 	.word	0x00030218

000d7d3c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d7d3c:	b508      	push	{r3, lr}
   d7d3e:	4b02      	ldr	r3, [pc, #8]	; (d7d48 <HAL_Delay_Milliseconds+0xc>)
   d7d40:	681b      	ldr	r3, [r3, #0]
   d7d42:	689b      	ldr	r3, [r3, #8]
   d7d44:	9301      	str	r3, [sp, #4]
   d7d46:	bd08      	pop	{r3, pc}
   d7d48:	00030218 	.word	0x00030218

000d7d4c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7d4c:	b508      	push	{r3, lr}
   d7d4e:	4b02      	ldr	r3, [pc, #8]	; (d7d58 <HAL_Delay_Microseconds+0xc>)
   d7d50:	681b      	ldr	r3, [r3, #0]
   d7d52:	68db      	ldr	r3, [r3, #12]
   d7d54:	9301      	str	r3, [sp, #4]
   d7d56:	bd08      	pop	{r3, pc}
   d7d58:	00030218 	.word	0x00030218

000d7d5c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7d5c:	b508      	push	{r3, lr}
   d7d5e:	4b02      	ldr	r3, [pc, #8]	; (d7d68 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7d60:	681b      	ldr	r3, [r3, #0]
   d7d62:	695b      	ldr	r3, [r3, #20]
   d7d64:	9301      	str	r3, [sp, #4]
   d7d66:	bd08      	pop	{r3, pc}
   d7d68:	00030218 	.word	0x00030218

000d7d6c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7d6c:	b508      	push	{r3, lr}
   d7d6e:	4b02      	ldr	r3, [pc, #8]	; (d7d78 <hal_rtc_time_is_valid+0xc>)
   d7d70:	681b      	ldr	r3, [r3, #0]
   d7d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7d74:	9301      	str	r3, [sp, #4]
   d7d76:	bd08      	pop	{r3, pc}
   d7d78:	00030218 	.word	0x00030218

000d7d7c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d7d7c:	b508      	push	{r3, lr}
   d7d7e:	4b02      	ldr	r3, [pc, #8]	; (d7d88 <hal_timer_millis+0xc>)
   d7d80:	681b      	ldr	r3, [r3, #0]
   d7d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7d84:	9301      	str	r3, [sp, #4]
   d7d86:	bd08      	pop	{r3, pc}
   d7d88:	00030218 	.word	0x00030218

000d7d8c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7d8c:	b508      	push	{r3, lr}
   d7d8e:	4b02      	ldr	r3, [pc, #8]	; (d7d98 <hal_rtc_get_time+0xc>)
   d7d90:	681b      	ldr	r3, [r3, #0]
   d7d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7d94:	9301      	str	r3, [sp, #4]
   d7d96:	bd08      	pop	{r3, pc}
   d7d98:	00030218 	.word	0x00030218

000d7d9c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7d9c:	b508      	push	{r3, lr}
   d7d9e:	4b02      	ldr	r3, [pc, #8]	; (d7da8 <hal_rtc_set_time+0xc>)
   d7da0:	681b      	ldr	r3, [r3, #0]
   d7da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7da4:	9301      	str	r3, [sp, #4]
   d7da6:	bd08      	pop	{r3, pc}
   d7da8:	00030218 	.word	0x00030218

000d7dac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d7dac:	b508      	push	{r3, lr}
   d7dae:	4b02      	ldr	r3, [pc, #8]	; (d7db8 <HAL_Pin_Map+0xc>)
   d7db0:	681b      	ldr	r3, [r3, #0]
   d7db2:	681b      	ldr	r3, [r3, #0]
   d7db4:	9301      	str	r3, [sp, #4]
   d7db6:	bd08      	pop	{r3, pc}
   d7db8:	0003022c 	.word	0x0003022c

000d7dbc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7dbc:	b508      	push	{r3, lr}
   d7dbe:	4b02      	ldr	r3, [pc, #8]	; (d7dc8 <HAL_Validate_Pin_Function+0xc>)
   d7dc0:	681b      	ldr	r3, [r3, #0]
   d7dc2:	685b      	ldr	r3, [r3, #4]
   d7dc4:	9301      	str	r3, [sp, #4]
   d7dc6:	bd08      	pop	{r3, pc}
   d7dc8:	0003022c 	.word	0x0003022c

000d7dcc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7dcc:	b508      	push	{r3, lr}
   d7dce:	4b02      	ldr	r3, [pc, #8]	; (d7dd8 <HAL_Pin_Mode+0xc>)
   d7dd0:	681b      	ldr	r3, [r3, #0]
   d7dd2:	689b      	ldr	r3, [r3, #8]
   d7dd4:	9301      	str	r3, [sp, #4]
   d7dd6:	bd08      	pop	{r3, pc}
   d7dd8:	0003022c 	.word	0x0003022c

000d7ddc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7ddc:	b508      	push	{r3, lr}
   d7dde:	4b02      	ldr	r3, [pc, #8]	; (d7de8 <HAL_Get_Pin_Mode+0xc>)
   d7de0:	681b      	ldr	r3, [r3, #0]
   d7de2:	68db      	ldr	r3, [r3, #12]
   d7de4:	9301      	str	r3, [sp, #4]
   d7de6:	bd08      	pop	{r3, pc}
   d7de8:	0003022c 	.word	0x0003022c

000d7dec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7dec:	b508      	push	{r3, lr}
   d7dee:	4b02      	ldr	r3, [pc, #8]	; (d7df8 <HAL_GPIO_Write+0xc>)
   d7df0:	681b      	ldr	r3, [r3, #0]
   d7df2:	691b      	ldr	r3, [r3, #16]
   d7df4:	9301      	str	r3, [sp, #4]
   d7df6:	bd08      	pop	{r3, pc}
   d7df8:	0003022c 	.word	0x0003022c

000d7dfc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7dfc:	b508      	push	{r3, lr}
   d7dfe:	4b02      	ldr	r3, [pc, #8]	; (d7e08 <HAL_GPIO_Read+0xc>)
   d7e00:	681b      	ldr	r3, [r3, #0]
   d7e02:	695b      	ldr	r3, [r3, #20]
   d7e04:	9301      	str	r3, [sp, #4]
   d7e06:	bd08      	pop	{r3, pc}
   d7e08:	0003022c 	.word	0x0003022c

000d7e0c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7e0c:	b508      	push	{r3, lr}
   d7e0e:	4b02      	ldr	r3, [pc, #8]	; (d7e18 <HAL_Interrupts_Attach+0xc>)
   d7e10:	681b      	ldr	r3, [r3, #0]
   d7e12:	699b      	ldr	r3, [r3, #24]
   d7e14:	9301      	str	r3, [sp, #4]
   d7e16:	bd08      	pop	{r3, pc}
   d7e18:	0003022c 	.word	0x0003022c

000d7e1c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7e1c:	b508      	push	{r3, lr}
   d7e1e:	4b02      	ldr	r3, [pc, #8]	; (d7e28 <HAL_Interrupts_Detach+0xc>)
   d7e20:	681b      	ldr	r3, [r3, #0]
   d7e22:	69db      	ldr	r3, [r3, #28]
   d7e24:	9301      	str	r3, [sp, #4]
   d7e26:	bd08      	pop	{r3, pc}
   d7e28:	0003022c 	.word	0x0003022c

000d7e2c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7e2c:	b508      	push	{r3, lr}
   d7e2e:	4b02      	ldr	r3, [pc, #8]	; (d7e38 <hal_adc_read+0xc>)
   d7e30:	681b      	ldr	r3, [r3, #0]
   d7e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e34:	9301      	str	r3, [sp, #4]
   d7e36:	bd08      	pop	{r3, pc}
   d7e38:	0003022c 	.word	0x0003022c

000d7e3c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7e3c:	b508      	push	{r3, lr}
   d7e3e:	4b02      	ldr	r3, [pc, #8]	; (d7e48 <hal_i2c_begin+0xc>)
   d7e40:	681b      	ldr	r3, [r3, #0]
   d7e42:	68db      	ldr	r3, [r3, #12]
   d7e44:	9301      	str	r3, [sp, #4]
   d7e46:	bd08      	pop	{r3, pc}
   d7e48:	00030228 	.word	0x00030228

000d7e4c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7e4c:	b508      	push	{r3, lr}
   d7e4e:	4b02      	ldr	r3, [pc, #8]	; (d7e58 <hal_i2c_begin_transmission+0xc>)
   d7e50:	681b      	ldr	r3, [r3, #0]
   d7e52:	699b      	ldr	r3, [r3, #24]
   d7e54:	9301      	str	r3, [sp, #4]
   d7e56:	bd08      	pop	{r3, pc}
   d7e58:	00030228 	.word	0x00030228

000d7e5c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7e5c:	b508      	push	{r3, lr}
   d7e5e:	4b02      	ldr	r3, [pc, #8]	; (d7e68 <hal_i2c_end_transmission+0xc>)
   d7e60:	681b      	ldr	r3, [r3, #0]
   d7e62:	69db      	ldr	r3, [r3, #28]
   d7e64:	9301      	str	r3, [sp, #4]
   d7e66:	bd08      	pop	{r3, pc}
   d7e68:	00030228 	.word	0x00030228

000d7e6c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7e6c:	b508      	push	{r3, lr}
   d7e6e:	4b02      	ldr	r3, [pc, #8]	; (d7e78 <hal_i2c_write+0xc>)
   d7e70:	681b      	ldr	r3, [r3, #0]
   d7e72:	6a1b      	ldr	r3, [r3, #32]
   d7e74:	9301      	str	r3, [sp, #4]
   d7e76:	bd08      	pop	{r3, pc}
   d7e78:	00030228 	.word	0x00030228

000d7e7c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7e7c:	b508      	push	{r3, lr}
   d7e7e:	4b02      	ldr	r3, [pc, #8]	; (d7e88 <hal_i2c_available+0xc>)
   d7e80:	681b      	ldr	r3, [r3, #0]
   d7e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e84:	9301      	str	r3, [sp, #4]
   d7e86:	bd08      	pop	{r3, pc}
   d7e88:	00030228 	.word	0x00030228

000d7e8c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7e8c:	b508      	push	{r3, lr}
   d7e8e:	4b02      	ldr	r3, [pc, #8]	; (d7e98 <hal_i2c_read+0xc>)
   d7e90:	681b      	ldr	r3, [r3, #0]
   d7e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7e94:	9301      	str	r3, [sp, #4]
   d7e96:	bd08      	pop	{r3, pc}
   d7e98:	00030228 	.word	0x00030228

000d7e9c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7e9c:	b508      	push	{r3, lr}
   d7e9e:	4b02      	ldr	r3, [pc, #8]	; (d7ea8 <hal_i2c_peek+0xc>)
   d7ea0:	681b      	ldr	r3, [r3, #0]
   d7ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ea4:	9301      	str	r3, [sp, #4]
   d7ea6:	bd08      	pop	{r3, pc}
   d7ea8:	00030228 	.word	0x00030228

000d7eac <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7eac:	b508      	push	{r3, lr}
   d7eae:	4b02      	ldr	r3, [pc, #8]	; (d7eb8 <hal_i2c_flush+0xc>)
   d7eb0:	681b      	ldr	r3, [r3, #0]
   d7eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7eb4:	9301      	str	r3, [sp, #4]
   d7eb6:	bd08      	pop	{r3, pc}
   d7eb8:	00030228 	.word	0x00030228

000d7ebc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7ebc:	b508      	push	{r3, lr}
   d7ebe:	4b02      	ldr	r3, [pc, #8]	; (d7ec8 <hal_i2c_is_enabled+0xc>)
   d7ec0:	681b      	ldr	r3, [r3, #0]
   d7ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7ec4:	9301      	str	r3, [sp, #4]
   d7ec6:	bd08      	pop	{r3, pc}
   d7ec8:	00030228 	.word	0x00030228

000d7ecc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7ecc:	b508      	push	{r3, lr}
   d7ece:	4b02      	ldr	r3, [pc, #8]	; (d7ed8 <hal_i2c_init+0xc>)
   d7ed0:	681b      	ldr	r3, [r3, #0]
   d7ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7ed4:	9301      	str	r3, [sp, #4]
   d7ed6:	bd08      	pop	{r3, pc}
   d7ed8:	00030228 	.word	0x00030228

000d7edc <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7edc:	b508      	push	{r3, lr}
   d7ede:	4b02      	ldr	r3, [pc, #8]	; (d7ee8 <hal_i2c_lock+0xc>)
   d7ee0:	681b      	ldr	r3, [r3, #0]
   d7ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7ee4:	9301      	str	r3, [sp, #4]
   d7ee6:	bd08      	pop	{r3, pc}
   d7ee8:	00030228 	.word	0x00030228

000d7eec <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7eec:	b508      	push	{r3, lr}
   d7eee:	4b02      	ldr	r3, [pc, #8]	; (d7ef8 <hal_i2c_unlock+0xc>)
   d7ef0:	681b      	ldr	r3, [r3, #0]
   d7ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7ef4:	9301      	str	r3, [sp, #4]
   d7ef6:	bd08      	pop	{r3, pc}
   d7ef8:	00030228 	.word	0x00030228

000d7efc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7efc:	b508      	push	{r3, lr}
   d7efe:	4b02      	ldr	r3, [pc, #8]	; (d7f08 <hal_i2c_request_ex+0xc>)
   d7f00:	681b      	ldr	r3, [r3, #0]
   d7f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7f04:	9301      	str	r3, [sp, #4]
   d7f06:	bd08      	pop	{r3, pc}
   d7f08:	00030228 	.word	0x00030228

000d7f0c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7f0c:	b508      	push	{r3, lr}
   d7f0e:	4b02      	ldr	r3, [pc, #8]	; (d7f18 <inet_inet_ntop+0xc>)
   d7f10:	681b      	ldr	r3, [r3, #0]
   d7f12:	695b      	ldr	r3, [r3, #20]
   d7f14:	9301      	str	r3, [sp, #4]
   d7f16:	bd08      	pop	{r3, pc}
   d7f18:	00030264 	.word	0x00030264

000d7f1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7f1c:	b508      	push	{r3, lr}
   d7f1e:	4b02      	ldr	r3, [pc, #8]	; (d7f28 <netdb_freeaddrinfo+0xc>)
   d7f20:	681b      	ldr	r3, [r3, #0]
   d7f22:	689b      	ldr	r3, [r3, #8]
   d7f24:	9301      	str	r3, [sp, #4]
   d7f26:	bd08      	pop	{r3, pc}
   d7f28:	00030268 	.word	0x00030268

000d7f2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7f2c:	b508      	push	{r3, lr}
   d7f2e:	4b02      	ldr	r3, [pc, #8]	; (d7f38 <netdb_getaddrinfo+0xc>)
   d7f30:	681b      	ldr	r3, [r3, #0]
   d7f32:	68db      	ldr	r3, [r3, #12]
   d7f34:	9301      	str	r3, [sp, #4]
   d7f36:	bd08      	pop	{r3, pc}
   d7f38:	00030268 	.word	0x00030268

000d7f3c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7f3c:	b508      	push	{r3, lr}
   d7f3e:	4b02      	ldr	r3, [pc, #8]	; (d7f48 <hal_spi_init+0xc>)
   d7f40:	681b      	ldr	r3, [r3, #0]
   d7f42:	69db      	ldr	r3, [r3, #28]
   d7f44:	9301      	str	r3, [sp, #4]
   d7f46:	bd08      	pop	{r3, pc}
   d7f48:	00030230 	.word	0x00030230

000d7f4c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7f4c:	b508      	push	{r3, lr}
   d7f4e:	4b02      	ldr	r3, [pc, #8]	; (d7f58 <hal_spi_is_enabled+0xc>)
   d7f50:	681b      	ldr	r3, [r3, #0]
   d7f52:	6a1b      	ldr	r3, [r3, #32]
   d7f54:	9301      	str	r3, [sp, #4]
   d7f56:	bd08      	pop	{r3, pc}
   d7f58:	00030230 	.word	0x00030230

000d7f5c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7f5c:	b508      	push	{r3, lr}
   d7f5e:	4b02      	ldr	r3, [pc, #8]	; (d7f68 <hal_usart_init+0xc>)
   d7f60:	681b      	ldr	r3, [r3, #0]
   d7f62:	681b      	ldr	r3, [r3, #0]
   d7f64:	9301      	str	r3, [sp, #4]
   d7f66:	bd08      	pop	{r3, pc}
   d7f68:	0003023c 	.word	0x0003023c

000d7f6c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d7f6c:	b508      	push	{r3, lr}
   d7f6e:	4b02      	ldr	r3, [pc, #8]	; (d7f78 <hal_usart_end+0xc>)
   d7f70:	681b      	ldr	r3, [r3, #0]
   d7f72:	689b      	ldr	r3, [r3, #8]
   d7f74:	9301      	str	r3, [sp, #4]
   d7f76:	bd08      	pop	{r3, pc}
   d7f78:	0003023c 	.word	0x0003023c

000d7f7c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7f7c:	b508      	push	{r3, lr}
   d7f7e:	4b02      	ldr	r3, [pc, #8]	; (d7f88 <hal_usart_write+0xc>)
   d7f80:	681b      	ldr	r3, [r3, #0]
   d7f82:	68db      	ldr	r3, [r3, #12]
   d7f84:	9301      	str	r3, [sp, #4]
   d7f86:	bd08      	pop	{r3, pc}
   d7f88:	0003023c 	.word	0x0003023c

000d7f8c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7f8c:	b508      	push	{r3, lr}
   d7f8e:	4b02      	ldr	r3, [pc, #8]	; (d7f98 <hal_usart_available+0xc>)
   d7f90:	681b      	ldr	r3, [r3, #0]
   d7f92:	691b      	ldr	r3, [r3, #16]
   d7f94:	9301      	str	r3, [sp, #4]
   d7f96:	bd08      	pop	{r3, pc}
   d7f98:	0003023c 	.word	0x0003023c

000d7f9c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7f9c:	b508      	push	{r3, lr}
   d7f9e:	4b02      	ldr	r3, [pc, #8]	; (d7fa8 <hal_usart_read+0xc>)
   d7fa0:	681b      	ldr	r3, [r3, #0]
   d7fa2:	695b      	ldr	r3, [r3, #20]
   d7fa4:	9301      	str	r3, [sp, #4]
   d7fa6:	bd08      	pop	{r3, pc}
   d7fa8:	0003023c 	.word	0x0003023c

000d7fac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7fac:	b508      	push	{r3, lr}
   d7fae:	4b02      	ldr	r3, [pc, #8]	; (d7fb8 <hal_usart_peek+0xc>)
   d7fb0:	681b      	ldr	r3, [r3, #0]
   d7fb2:	699b      	ldr	r3, [r3, #24]
   d7fb4:	9301      	str	r3, [sp, #4]
   d7fb6:	bd08      	pop	{r3, pc}
   d7fb8:	0003023c 	.word	0x0003023c

000d7fbc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7fbc:	b508      	push	{r3, lr}
   d7fbe:	4b02      	ldr	r3, [pc, #8]	; (d7fc8 <hal_usart_flush+0xc>)
   d7fc0:	681b      	ldr	r3, [r3, #0]
   d7fc2:	69db      	ldr	r3, [r3, #28]
   d7fc4:	9301      	str	r3, [sp, #4]
   d7fc6:	bd08      	pop	{r3, pc}
   d7fc8:	0003023c 	.word	0x0003023c

000d7fcc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7fcc:	b508      	push	{r3, lr}
   d7fce:	4b02      	ldr	r3, [pc, #8]	; (d7fd8 <hal_usart_is_enabled+0xc>)
   d7fd0:	681b      	ldr	r3, [r3, #0]
   d7fd2:	6a1b      	ldr	r3, [r3, #32]
   d7fd4:	9301      	str	r3, [sp, #4]
   d7fd6:	bd08      	pop	{r3, pc}
   d7fd8:	0003023c 	.word	0x0003023c

000d7fdc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7fdc:	b508      	push	{r3, lr}
   d7fde:	4b02      	ldr	r3, [pc, #8]	; (d7fe8 <hal_usart_available_data_for_write+0xc>)
   d7fe0:	681b      	ldr	r3, [r3, #0]
   d7fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7fe4:	9301      	str	r3, [sp, #4]
   d7fe6:	bd08      	pop	{r3, pc}
   d7fe8:	0003023c 	.word	0x0003023c

000d7fec <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d7fec:	b508      	push	{r3, lr}
   d7fee:	4b02      	ldr	r3, [pc, #8]	; (d7ff8 <hal_usart_begin_config+0xc>)
   d7ff0:	681b      	ldr	r3, [r3, #0]
   d7ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ff4:	9301      	str	r3, [sp, #4]
   d7ff6:	bd08      	pop	{r3, pc}
   d7ff8:	0003023c 	.word	0x0003023c

000d7ffc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7ffc:	b508      	push	{r3, lr}
   d7ffe:	4b02      	ldr	r3, [pc, #8]	; (d8008 <HAL_USB_USART_Init+0xc>)
   d8000:	681b      	ldr	r3, [r3, #0]
   d8002:	681b      	ldr	r3, [r3, #0]
   d8004:	9301      	str	r3, [sp, #4]
   d8006:	bd08      	pop	{r3, pc}
   d8008:	0003024c 	.word	0x0003024c

000d800c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d800c:	b508      	push	{r3, lr}
   d800e:	4b02      	ldr	r3, [pc, #8]	; (d8018 <HAL_USB_USART_Begin+0xc>)
   d8010:	681b      	ldr	r3, [r3, #0]
   d8012:	685b      	ldr	r3, [r3, #4]
   d8014:	9301      	str	r3, [sp, #4]
   d8016:	bd08      	pop	{r3, pc}
   d8018:	0003024c 	.word	0x0003024c

000d801c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d801c:	b508      	push	{r3, lr}
   d801e:	4b02      	ldr	r3, [pc, #8]	; (d8028 <HAL_USB_USART_End+0xc>)
   d8020:	681b      	ldr	r3, [r3, #0]
   d8022:	689b      	ldr	r3, [r3, #8]
   d8024:	9301      	str	r3, [sp, #4]
   d8026:	bd08      	pop	{r3, pc}
   d8028:	0003024c 	.word	0x0003024c

000d802c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d802c:	b508      	push	{r3, lr}
   d802e:	4b02      	ldr	r3, [pc, #8]	; (d8038 <HAL_USB_USART_Available_Data+0xc>)
   d8030:	681b      	ldr	r3, [r3, #0]
   d8032:	691b      	ldr	r3, [r3, #16]
   d8034:	9301      	str	r3, [sp, #4]
   d8036:	bd08      	pop	{r3, pc}
   d8038:	0003024c 	.word	0x0003024c

000d803c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d803c:	b508      	push	{r3, lr}
   d803e:	4b02      	ldr	r3, [pc, #8]	; (d8048 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8040:	681b      	ldr	r3, [r3, #0]
   d8042:	695b      	ldr	r3, [r3, #20]
   d8044:	9301      	str	r3, [sp, #4]
   d8046:	bd08      	pop	{r3, pc}
   d8048:	0003024c 	.word	0x0003024c

000d804c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d804c:	b508      	push	{r3, lr}
   d804e:	4b02      	ldr	r3, [pc, #8]	; (d8058 <HAL_USB_USART_Receive_Data+0xc>)
   d8050:	681b      	ldr	r3, [r3, #0]
   d8052:	699b      	ldr	r3, [r3, #24]
   d8054:	9301      	str	r3, [sp, #4]
   d8056:	bd08      	pop	{r3, pc}
   d8058:	0003024c 	.word	0x0003024c

000d805c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d805c:	b508      	push	{r3, lr}
   d805e:	4b02      	ldr	r3, [pc, #8]	; (d8068 <HAL_USB_USART_Send_Data+0xc>)
   d8060:	681b      	ldr	r3, [r3, #0]
   d8062:	69db      	ldr	r3, [r3, #28]
   d8064:	9301      	str	r3, [sp, #4]
   d8066:	bd08      	pop	{r3, pc}
   d8068:	0003024c 	.word	0x0003024c

000d806c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d806c:	b508      	push	{r3, lr}
   d806e:	4b02      	ldr	r3, [pc, #8]	; (d8078 <HAL_USB_USART_Flush_Data+0xc>)
   d8070:	681b      	ldr	r3, [r3, #0]
   d8072:	6a1b      	ldr	r3, [r3, #32]
   d8074:	9301      	str	r3, [sp, #4]
   d8076:	bd08      	pop	{r3, pc}
   d8078:	0003024c 	.word	0x0003024c

000d807c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d807c:	b508      	push	{r3, lr}
   d807e:	4b02      	ldr	r3, [pc, #8]	; (d8088 <panic_+0xc>)
   d8080:	681b      	ldr	r3, [r3, #0]
   d8082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8084:	9301      	str	r3, [sp, #4]
   d8086:	bd08      	pop	{r3, pc}
   d8088:	00030260 	.word	0x00030260

000d808c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d808c:	b508      	push	{r3, lr}
   d808e:	4b02      	ldr	r3, [pc, #8]	; (d8098 <log_message+0xc>)
   d8090:	681b      	ldr	r3, [r3, #0]
   d8092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8094:	9301      	str	r3, [sp, #4]
   d8096:	bd08      	pop	{r3, pc}
   d8098:	00030260 	.word	0x00030260

000d809c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d809c:	b508      	push	{r3, lr}
   d809e:	4b02      	ldr	r3, [pc, #8]	; (d80a8 <log_message_v+0xc>)
   d80a0:	681b      	ldr	r3, [r3, #0]
   d80a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d80a4:	9301      	str	r3, [sp, #4]
   d80a6:	bd08      	pop	{r3, pc}
   d80a8:	00030260 	.word	0x00030260

000d80ac <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d80ac:	b508      	push	{r3, lr}
   d80ae:	4b02      	ldr	r3, [pc, #8]	; (d80b8 <log_level_name+0xc>)
   d80b0:	681b      	ldr	r3, [r3, #0]
   d80b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	bd08      	pop	{r3, pc}
   d80b8:	00030260 	.word	0x00030260

000d80bc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d80bc:	b508      	push	{r3, lr}
   d80be:	4b02      	ldr	r3, [pc, #8]	; (d80c8 <log_set_callbacks+0xc>)
   d80c0:	681b      	ldr	r3, [r3, #0]
   d80c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d80c4:	9301      	str	r3, [sp, #4]
   d80c6:	bd08      	pop	{r3, pc}
   d80c8:	00030260 	.word	0x00030260

000d80cc <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d80cc:	b508      	push	{r3, lr}
   d80ce:	4b03      	ldr	r3, [pc, #12]	; (d80dc <diag_get_source+0x10>)
   d80d0:	681b      	ldr	r3, [r3, #0]
   d80d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d80d6:	9301      	str	r3, [sp, #4]
   d80d8:	bd08      	pop	{r3, pc}
   d80da:	0000      	.short	0x0000
   d80dc:	00030260 	.word	0x00030260

000d80e0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d80e0:	b508      	push	{r3, lr}
   d80e2:	4b02      	ldr	r3, [pc, #8]	; (d80ec <system_mode+0xc>)
   d80e4:	681b      	ldr	r3, [r3, #0]
   d80e6:	681b      	ldr	r3, [r3, #0]
   d80e8:	9301      	str	r3, [sp, #4]
   d80ea:	bd08      	pop	{r3, pc}
   d80ec:	00030220 	.word	0x00030220

000d80f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d80f0:	b508      	push	{r3, lr}
   d80f2:	4b02      	ldr	r3, [pc, #8]	; (d80fc <set_system_mode+0xc>)
   d80f4:	681b      	ldr	r3, [r3, #0]
   d80f6:	685b      	ldr	r3, [r3, #4]
   d80f8:	9301      	str	r3, [sp, #4]
   d80fa:	bd08      	pop	{r3, pc}
   d80fc:	00030220 	.word	0x00030220

000d8100 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8100:	b508      	push	{r3, lr}
   d8102:	4b02      	ldr	r3, [pc, #8]	; (d810c <system_delay_ms+0xc>)
   d8104:	681b      	ldr	r3, [r3, #0]
   d8106:	695b      	ldr	r3, [r3, #20]
   d8108:	9301      	str	r3, [sp, #4]
   d810a:	bd08      	pop	{r3, pc}
   d810c:	00030220 	.word	0x00030220

000d8110 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d8110:	b508      	push	{r3, lr}
   d8112:	4b02      	ldr	r3, [pc, #8]	; (d811c <system_subscribe_event+0xc>)
   d8114:	681b      	ldr	r3, [r3, #0]
   d8116:	6a1b      	ldr	r3, [r3, #32]
   d8118:	9301      	str	r3, [sp, #4]
   d811a:	bd08      	pop	{r3, pc}
   d811c:	00030220 	.word	0x00030220

000d8120 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8120:	b508      	push	{r3, lr}
   d8122:	4b02      	ldr	r3, [pc, #8]	; (d812c <system_thread_set_state+0xc>)
   d8124:	681b      	ldr	r3, [r3, #0]
   d8126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8128:	9301      	str	r3, [sp, #4]
   d812a:	bd08      	pop	{r3, pc}
   d812c:	00030220 	.word	0x00030220

000d8130 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8130:	b508      	push	{r3, lr}
   d8132:	4b02      	ldr	r3, [pc, #8]	; (d813c <application_thread_current+0xc>)
   d8134:	681b      	ldr	r3, [r3, #0]
   d8136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8138:	9301      	str	r3, [sp, #4]
   d813a:	bd08      	pop	{r3, pc}
   d813c:	00030220 	.word	0x00030220

000d8140 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8140:	b508      	push	{r3, lr}
   d8142:	4b02      	ldr	r3, [pc, #8]	; (d814c <application_thread_invoke+0xc>)
   d8144:	681b      	ldr	r3, [r3, #0]
   d8146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8148:	9301      	str	r3, [sp, #4]
   d814a:	bd08      	pop	{r3, pc}
   d814c:	00030220 	.word	0x00030220

000d8150 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8150:	b508      	push	{r3, lr}
   d8152:	4b02      	ldr	r3, [pc, #8]	; (d815c <system_thread_get_state+0xc>)
   d8154:	681b      	ldr	r3, [r3, #0]
   d8156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8158:	9301      	str	r3, [sp, #4]
   d815a:	bd08      	pop	{r3, pc}
   d815c:	00030220 	.word	0x00030220

000d8160 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8160:	b508      	push	{r3, lr}
   d8162:	4b02      	ldr	r3, [pc, #8]	; (d816c <system_notify_time_changed+0xc>)
   d8164:	681b      	ldr	r3, [r3, #0]
   d8166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8168:	9301      	str	r3, [sp, #4]
   d816a:	bd08      	pop	{r3, pc}
   d816c:	00030220 	.word	0x00030220

000d8170 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8170:	b508      	push	{r3, lr}
   d8172:	4b03      	ldr	r3, [pc, #12]	; (d8180 <system_ctrl_set_app_request_handler+0x10>)
   d8174:	681b      	ldr	r3, [r3, #0]
   d8176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d817a:	9301      	str	r3, [sp, #4]
   d817c:	bd08      	pop	{r3, pc}
   d817e:	0000      	.short	0x0000
   d8180:	00030220 	.word	0x00030220

000d8184 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8184:	b508      	push	{r3, lr}
   d8186:	4b03      	ldr	r3, [pc, #12]	; (d8194 <system_ctrl_set_result+0x10>)
   d8188:	681b      	ldr	r3, [r3, #0]
   d818a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d818e:	9301      	str	r3, [sp, #4]
   d8190:	bd08      	pop	{r3, pc}
   d8192:	0000      	.short	0x0000
   d8194:	00030220 	.word	0x00030220

000d8198 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8198:	b508      	push	{r3, lr}
   d819a:	4b03      	ldr	r3, [pc, #12]	; (d81a8 <system_power_management_set_config+0x10>)
   d819c:	681b      	ldr	r3, [r3, #0]
   d819e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d81a2:	9301      	str	r3, [sp, #4]
   d81a4:	bd08      	pop	{r3, pc}
   d81a6:	0000      	.short	0x0000
   d81a8:	00030220 	.word	0x00030220

000d81ac <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d81ac:	b508      	push	{r3, lr}
   d81ae:	4b03      	ldr	r3, [pc, #12]	; (d81bc <system_sleep_ext+0x10>)
   d81b0:	681b      	ldr	r3, [r3, #0]
   d81b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d81b6:	9301      	str	r3, [sp, #4]
   d81b8:	bd08      	pop	{r3, pc}
   d81ba:	0000      	.short	0x0000
   d81bc:	00030220 	.word	0x00030220

000d81c0 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d81c0:	b508      	push	{r3, lr}
   d81c2:	4b03      	ldr	r3, [pc, #12]	; (d81d0 <system_reset+0x10>)
   d81c4:	681b      	ldr	r3, [r3, #0]
   d81c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d81ca:	9301      	str	r3, [sp, #4]
   d81cc:	bd08      	pop	{r3, pc}
   d81ce:	0000      	.short	0x0000
   d81d0:	00030220 	.word	0x00030220

000d81d4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d81d4:	b508      	push	{r3, lr}
   d81d6:	4b02      	ldr	r3, [pc, #8]	; (d81e0 <spark_variable+0xc>)
   d81d8:	681b      	ldr	r3, [r3, #0]
   d81da:	681b      	ldr	r3, [r3, #0]
   d81dc:	9301      	str	r3, [sp, #4]
   d81de:	bd08      	pop	{r3, pc}
   d81e0:	00030244 	.word	0x00030244

000d81e4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d81e4:	b508      	push	{r3, lr}
   d81e6:	4b02      	ldr	r3, [pc, #8]	; (d81f0 <spark_function+0xc>)
   d81e8:	681b      	ldr	r3, [r3, #0]
   d81ea:	685b      	ldr	r3, [r3, #4]
   d81ec:	9301      	str	r3, [sp, #4]
   d81ee:	bd08      	pop	{r3, pc}
   d81f0:	00030244 	.word	0x00030244

000d81f4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d81f4:	b508      	push	{r3, lr}
   d81f6:	4b02      	ldr	r3, [pc, #8]	; (d8200 <spark_process+0xc>)
   d81f8:	681b      	ldr	r3, [r3, #0]
   d81fa:	689b      	ldr	r3, [r3, #8]
   d81fc:	9301      	str	r3, [sp, #4]
   d81fe:	bd08      	pop	{r3, pc}
   d8200:	00030244 	.word	0x00030244

000d8204 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d8204:	b508      	push	{r3, lr}
   d8206:	4b02      	ldr	r3, [pc, #8]	; (d8210 <spark_cloud_flag_connect+0xc>)
   d8208:	681b      	ldr	r3, [r3, #0]
   d820a:	68db      	ldr	r3, [r3, #12]
   d820c:	9301      	str	r3, [sp, #4]
   d820e:	bd08      	pop	{r3, pc}
   d8210:	00030244 	.word	0x00030244

000d8214 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8214:	b508      	push	{r3, lr}
   d8216:	4b02      	ldr	r3, [pc, #8]	; (d8220 <spark_cloud_flag_connected+0xc>)
   d8218:	681b      	ldr	r3, [r3, #0]
   d821a:	695b      	ldr	r3, [r3, #20]
   d821c:	9301      	str	r3, [sp, #4]
   d821e:	bd08      	pop	{r3, pc}
   d8220:	00030244 	.word	0x00030244

000d8224 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d8224:	b508      	push	{r3, lr}
   d8226:	4b02      	ldr	r3, [pc, #8]	; (d8230 <spark_deviceID+0xc>)
   d8228:	681b      	ldr	r3, [r3, #0]
   d822a:	69db      	ldr	r3, [r3, #28]
   d822c:	9301      	str	r3, [sp, #4]
   d822e:	bd08      	pop	{r3, pc}
   d8230:	00030244 	.word	0x00030244

000d8234 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8234:	b508      	push	{r3, lr}
   d8236:	4b02      	ldr	r3, [pc, #8]	; (d8240 <spark_send_event+0xc>)
   d8238:	681b      	ldr	r3, [r3, #0]
   d823a:	6a1b      	ldr	r3, [r3, #32]
   d823c:	9301      	str	r3, [sp, #4]
   d823e:	bd08      	pop	{r3, pc}
   d8240:	00030244 	.word	0x00030244

000d8244 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d8244:	b508      	push	{r3, lr}
   d8246:	4b02      	ldr	r3, [pc, #8]	; (d8250 <spark_subscribe+0xc>)
   d8248:	681b      	ldr	r3, [r3, #0]
   d824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d824c:	9301      	str	r3, [sp, #4]
   d824e:	bd08      	pop	{r3, pc}
   d8250:	00030244 	.word	0x00030244

000d8254 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d8254:	b508      	push	{r3, lr}
   d8256:	4b02      	ldr	r3, [pc, #8]	; (d8260 <spark_sync_time+0xc>)
   d8258:	681b      	ldr	r3, [r3, #0]
   d825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d825c:	9301      	str	r3, [sp, #4]
   d825e:	bd08      	pop	{r3, pc}
   d8260:	00030244 	.word	0x00030244

000d8264 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8264:	b508      	push	{r3, lr}
   d8266:	4b02      	ldr	r3, [pc, #8]	; (d8270 <spark_sync_time_pending+0xc>)
   d8268:	681b      	ldr	r3, [r3, #0]
   d826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d826c:	9301      	str	r3, [sp, #4]
   d826e:	bd08      	pop	{r3, pc}
   d8270:	00030244 	.word	0x00030244

000d8274 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d8274:	b508      	push	{r3, lr}
   d8276:	4b02      	ldr	r3, [pc, #8]	; (d8280 <spark_sync_time_last+0xc>)
   d8278:	681b      	ldr	r3, [r3, #0]
   d827a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d827c:	9301      	str	r3, [sp, #4]
   d827e:	bd08      	pop	{r3, pc}
   d8280:	00030244 	.word	0x00030244

000d8284 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d8284:	b508      	push	{r3, lr}
   d8286:	4b02      	ldr	r3, [pc, #8]	; (d8290 <spark_set_connection_property+0xc>)
   d8288:	681b      	ldr	r3, [r3, #0]
   d828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d828c:	9301      	str	r3, [sp, #4]
   d828e:	bd08      	pop	{r3, pc}
   d8290:	00030244 	.word	0x00030244

000d8294 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8294:	b508      	push	{r3, lr}
   d8296:	4b02      	ldr	r3, [pc, #8]	; (d82a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d8298:	681b      	ldr	r3, [r3, #0]
   d829a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d829c:	9301      	str	r3, [sp, #4]
   d829e:	bd08      	pop	{r3, pc}
   d82a0:	00030244 	.word	0x00030244

000d82a4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d82a4:	b508      	push	{r3, lr}
   d82a6:	4b02      	ldr	r3, [pc, #8]	; (d82b0 <spark_cloud_disconnect+0xc>)
   d82a8:	681b      	ldr	r3, [r3, #0]
   d82aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d82ac:	9301      	str	r3, [sp, #4]
   d82ae:	bd08      	pop	{r3, pc}
   d82b0:	00030244 	.word	0x00030244

000d82b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d82b4:	b508      	push	{r3, lr}
   d82b6:	4b02      	ldr	r3, [pc, #8]	; (d82c0 <network_connect+0xc>)
   d82b8:	681b      	ldr	r3, [r3, #0]
   d82ba:	685b      	ldr	r3, [r3, #4]
   d82bc:	9301      	str	r3, [sp, #4]
   d82be:	bd08      	pop	{r3, pc}
   d82c0:	00030240 	.word	0x00030240

000d82c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d82c4:	b508      	push	{r3, lr}
   d82c6:	4b02      	ldr	r3, [pc, #8]	; (d82d0 <network_connecting+0xc>)
   d82c8:	681b      	ldr	r3, [r3, #0]
   d82ca:	689b      	ldr	r3, [r3, #8]
   d82cc:	9301      	str	r3, [sp, #4]
   d82ce:	bd08      	pop	{r3, pc}
   d82d0:	00030240 	.word	0x00030240

000d82d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d82d4:	b508      	push	{r3, lr}
   d82d6:	4b02      	ldr	r3, [pc, #8]	; (d82e0 <network_disconnect+0xc>)
   d82d8:	681b      	ldr	r3, [r3, #0]
   d82da:	68db      	ldr	r3, [r3, #12]
   d82dc:	9301      	str	r3, [sp, #4]
   d82de:	bd08      	pop	{r3, pc}
   d82e0:	00030240 	.word	0x00030240

000d82e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d82e4:	b508      	push	{r3, lr}
   d82e6:	4b02      	ldr	r3, [pc, #8]	; (d82f0 <network_ready+0xc>)
   d82e8:	681b      	ldr	r3, [r3, #0]
   d82ea:	691b      	ldr	r3, [r3, #16]
   d82ec:	9301      	str	r3, [sp, #4]
   d82ee:	bd08      	pop	{r3, pc}
   d82f0:	00030240 	.word	0x00030240

000d82f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d82f4:	b508      	push	{r3, lr}
   d82f6:	4b02      	ldr	r3, [pc, #8]	; (d8300 <network_on+0xc>)
   d82f8:	681b      	ldr	r3, [r3, #0]
   d82fa:	695b      	ldr	r3, [r3, #20]
   d82fc:	9301      	str	r3, [sp, #4]
   d82fe:	bd08      	pop	{r3, pc}
   d8300:	00030240 	.word	0x00030240

000d8304 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8304:	b508      	push	{r3, lr}
   d8306:	4b02      	ldr	r3, [pc, #8]	; (d8310 <network_off+0xc>)
   d8308:	681b      	ldr	r3, [r3, #0]
   d830a:	699b      	ldr	r3, [r3, #24]
   d830c:	9301      	str	r3, [sp, #4]
   d830e:	bd08      	pop	{r3, pc}
   d8310:	00030240 	.word	0x00030240

000d8314 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8314:	b508      	push	{r3, lr}
   d8316:	4b02      	ldr	r3, [pc, #8]	; (d8320 <network_listen+0xc>)
   d8318:	681b      	ldr	r3, [r3, #0]
   d831a:	69db      	ldr	r3, [r3, #28]
   d831c:	9301      	str	r3, [sp, #4]
   d831e:	bd08      	pop	{r3, pc}
   d8320:	00030240 	.word	0x00030240

000d8324 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8324:	b508      	push	{r3, lr}
   d8326:	4b02      	ldr	r3, [pc, #8]	; (d8330 <network_listening+0xc>)
   d8328:	681b      	ldr	r3, [r3, #0]
   d832a:	6a1b      	ldr	r3, [r3, #32]
   d832c:	9301      	str	r3, [sp, #4]
   d832e:	bd08      	pop	{r3, pc}
   d8330:	00030240 	.word	0x00030240

000d8334 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8334:	b508      	push	{r3, lr}
   d8336:	4b02      	ldr	r3, [pc, #8]	; (d8340 <network_set_listen_timeout+0xc>)
   d8338:	681b      	ldr	r3, [r3, #0]
   d833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d833c:	9301      	str	r3, [sp, #4]
   d833e:	bd08      	pop	{r3, pc}
   d8340:	00030240 	.word	0x00030240

000d8344 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8344:	b508      	push	{r3, lr}
   d8346:	4b02      	ldr	r3, [pc, #8]	; (d8350 <network_get_listen_timeout+0xc>)
   d8348:	681b      	ldr	r3, [r3, #0]
   d834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d834c:	9301      	str	r3, [sp, #4]
   d834e:	bd08      	pop	{r3, pc}
   d8350:	00030240 	.word	0x00030240

000d8354 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8354:	b508      	push	{r3, lr}
   d8356:	4b02      	ldr	r3, [pc, #8]	; (d8360 <network_is_on+0xc>)
   d8358:	681b      	ldr	r3, [r3, #0]
   d835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d835c:	9301      	str	r3, [sp, #4]
   d835e:	bd08      	pop	{r3, pc}
   d8360:	00030240 	.word	0x00030240

000d8364 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d8364:	b508      	push	{r3, lr}
   d8366:	4b02      	ldr	r3, [pc, #8]	; (d8370 <network_is_off+0xc>)
   d8368:	681b      	ldr	r3, [r3, #0]
   d836a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d836c:	9301      	str	r3, [sp, #4]
   d836e:	bd08      	pop	{r3, pc}
   d8370:	00030240 	.word	0x00030240

000d8374 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8374:	b508      	push	{r3, lr}
   d8376:	4b02      	ldr	r3, [pc, #8]	; (d8380 <malloc+0xc>)
   d8378:	681b      	ldr	r3, [r3, #0]
   d837a:	681b      	ldr	r3, [r3, #0]
   d837c:	9301      	str	r3, [sp, #4]
   d837e:	bd08      	pop	{r3, pc}
   d8380:	0003021c 	.word	0x0003021c

000d8384 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8384:	b508      	push	{r3, lr}
   d8386:	4b02      	ldr	r3, [pc, #8]	; (d8390 <free+0xc>)
   d8388:	681b      	ldr	r3, [r3, #0]
   d838a:	685b      	ldr	r3, [r3, #4]
   d838c:	9301      	str	r3, [sp, #4]
   d838e:	bd08      	pop	{r3, pc}
   d8390:	0003021c 	.word	0x0003021c

000d8394 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8394:	b508      	push	{r3, lr}
   d8396:	4b02      	ldr	r3, [pc, #8]	; (d83a0 <realloc+0xc>)
   d8398:	681b      	ldr	r3, [r3, #0]
   d839a:	689b      	ldr	r3, [r3, #8]
   d839c:	9301      	str	r3, [sp, #4]
   d839e:	bd08      	pop	{r3, pc}
   d83a0:	0003021c 	.word	0x0003021c

000d83a4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d83a4:	b508      	push	{r3, lr}
   d83a6:	4b02      	ldr	r3, [pc, #8]	; (d83b0 <siprintf+0xc>)
   d83a8:	681b      	ldr	r3, [r3, #0]
   d83aa:	691b      	ldr	r3, [r3, #16]
   d83ac:	9301      	str	r3, [sp, #4]
   d83ae:	bd08      	pop	{r3, pc}
   d83b0:	0003021c 	.word	0x0003021c

000d83b4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d83b4:	b508      	push	{r3, lr}
   d83b6:	4b02      	ldr	r3, [pc, #8]	; (d83c0 <snprintf+0xc>)
   d83b8:	681b      	ldr	r3, [r3, #0]
   d83ba:	69db      	ldr	r3, [r3, #28]
   d83bc:	9301      	str	r3, [sp, #4]
   d83be:	bd08      	pop	{r3, pc}
   d83c0:	0003021c 	.word	0x0003021c

000d83c4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d83c4:	b508      	push	{r3, lr}
   d83c6:	4b02      	ldr	r3, [pc, #8]	; (d83d0 <vsnprintf+0xc>)
   d83c8:	681b      	ldr	r3, [r3, #0]
   d83ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d83cc:	9301      	str	r3, [sp, #4]
   d83ce:	bd08      	pop	{r3, pc}
   d83d0:	0003021c 	.word	0x0003021c

000d83d4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d83d4:	b508      	push	{r3, lr}
   d83d6:	4b02      	ldr	r3, [pc, #8]	; (d83e0 <abort+0xc>)
   d83d8:	681b      	ldr	r3, [r3, #0]
   d83da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d83dc:	9301      	str	r3, [sp, #4]
   d83de:	bd08      	pop	{r3, pc}
   d83e0:	0003021c 	.word	0x0003021c

000d83e4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d83e4:	b508      	push	{r3, lr}
   d83e6:	4b02      	ldr	r3, [pc, #8]	; (d83f0 <_malloc_r+0xc>)
   d83e8:	681b      	ldr	r3, [r3, #0]
   d83ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d83ec:	9301      	str	r3, [sp, #4]
   d83ee:	bd08      	pop	{r3, pc}
   d83f0:	0003021c 	.word	0x0003021c

000d83f4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d83f4:	b508      	push	{r3, lr}
   d83f6:	4b02      	ldr	r3, [pc, #8]	; (d8400 <newlib_impure_ptr_callback+0xc>)
   d83f8:	681b      	ldr	r3, [r3, #0]
   d83fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d83fc:	9301      	str	r3, [sp, #4]
   d83fe:	bd08      	pop	{r3, pc}
   d8400:	0003021c 	.word	0x0003021c

000d8404 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8404:	b508      	push	{r3, lr}
   d8406:	4b02      	ldr	r3, [pc, #8]	; (d8410 <strftime+0xc>)
   d8408:	681b      	ldr	r3, [r3, #0]
   d840a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d840c:	9301      	str	r3, [sp, #4]
   d840e:	bd08      	pop	{r3, pc}
   d8410:	0003021c 	.word	0x0003021c

000d8414 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8414:	b508      	push	{r3, lr}
   d8416:	4b02      	ldr	r3, [pc, #8]	; (d8420 <localtime_r+0xc>)
   d8418:	681b      	ldr	r3, [r3, #0]
   d841a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d841c:	9301      	str	r3, [sp, #4]
   d841e:	bd08      	pop	{r3, pc}
   d8420:	0003021c 	.word	0x0003021c

000d8424 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8424:	b508      	push	{r3, lr}
   d8426:	4b02      	ldr	r3, [pc, #8]	; (d8430 <gmtime_r+0xc>)
   d8428:	681b      	ldr	r3, [r3, #0]
   d842a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d842c:	9301      	str	r3, [sp, #4]
   d842e:	bd08      	pop	{r3, pc}
   d8430:	0003021c 	.word	0x0003021c

000d8434 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d8434:	b508      	push	{r3, lr}
   d8436:	4b02      	ldr	r3, [pc, #8]	; (d8440 <mktime+0xc>)
   d8438:	681b      	ldr	r3, [r3, #0]
   d843a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d843c:	9301      	str	r3, [sp, #4]
   d843e:	bd08      	pop	{r3, pc}
   d8440:	0003021c 	.word	0x0003021c

000d8444 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d8444:	428a      	cmp	r2, r1
{
   d8446:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d8448:	d007      	beq.n	d845a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d844a:	9c02      	ldr	r4, [sp, #8]
   d844c:	1a40      	subs	r0, r0, r1
   d844e:	1ae4      	subs	r4, r4, r3
   d8450:	4360      	muls	r0, r4
   d8452:	1a52      	subs	r2, r2, r1
   d8454:	fb90 f0f2 	sdiv	r0, r0, r2
   d8458:	4418      	add	r0, r3
}
   d845a:	bd10      	pop	{r4, pc}

000d845c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d845c:	2100      	movs	r1, #0
   d845e:	f7ff be4f 	b.w	d8100 <system_delay_ms>

000d8462 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8462:	b510      	push	{r4, lr}
      if (_M_empty())
   d8464:	6883      	ldr	r3, [r0, #8]
   d8466:	4604      	mov	r4, r0
   d8468:	b90b      	cbnz	r3, d846e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d846a:	f003 f873 	bl	db554 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d846e:	68c3      	ldr	r3, [r0, #12]
   d8470:	4798      	blx	r3
      if (_M_manager)
   d8472:	68a3      	ldr	r3, [r4, #8]
   d8474:	b11b      	cbz	r3, d847e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8476:	2203      	movs	r2, #3
   d8478:	4621      	mov	r1, r4
   d847a:	4620      	mov	r0, r4
   d847c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d847e:	4620      	mov	r0, r4
   d8480:	2110      	movs	r1, #16
}
   d8482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d8486:	f003 b85f 	b.w	db548 <_ZdlPvj>

000d848a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d848a:	b510      	push	{r4, lr}
          _M_dispose();
   d848c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d848e:	4604      	mov	r4, r0
          _M_dispose();
   d8490:	689b      	ldr	r3, [r3, #8]
   d8492:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8494:	68a3      	ldr	r3, [r4, #8]
   d8496:	3b01      	subs	r3, #1
   d8498:	60a3      	str	r3, [r4, #8]
   d849a:	b92b      	cbnz	r3, d84a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d849c:	6823      	ldr	r3, [r4, #0]
   d849e:	4620      	mov	r0, r4
   d84a0:	68db      	ldr	r3, [r3, #12]
    }
   d84a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d84a6:	4718      	bx	r3
    }
   d84a8:	bd10      	pop	{r4, pc}

000d84aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d84aa:	680b      	ldr	r3, [r1, #0]
   d84ac:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d84ae:	b113      	cbz	r3, d84b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d84b0:	685a      	ldr	r2, [r3, #4]
   d84b2:	3201      	adds	r2, #1
   d84b4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d84b6:	4770      	bx	lr

000d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d84b8:	b510      	push	{r4, lr}
   d84ba:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d84bc:	6800      	ldr	r0, [r0, #0]
   d84be:	b128      	cbz	r0, d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d84c0:	6843      	ldr	r3, [r0, #4]
   d84c2:	3b01      	subs	r3, #1
   d84c4:	6043      	str	r3, [r0, #4]
   d84c6:	b90b      	cbnz	r3, d84cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d84c8:	f7ff ffdf 	bl	d848a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d84cc:	4620      	mov	r0, r4
   d84ce:	bd10      	pop	{r4, pc}

000d84d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d84d0:	4802      	ldr	r0, [pc, #8]	; (d84dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d84d2:	2300      	movs	r3, #0
   d84d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d84d6:	f7ff bbe1 	b.w	d7c9c <os_mutex_recursive_create>
   d84da:	bf00      	nop
   d84dc:	2003e464 	.word	0x2003e464

000d84e0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d84e0:	2200      	movs	r2, #0
   d84e2:	6840      	ldr	r0, [r0, #4]
   d84e4:	4611      	mov	r1, r2
   d84e6:	f7ff befd 	b.w	d82e4 <network_ready>

000d84ea <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d84ea:	2200      	movs	r2, #0
   d84ec:	6840      	ldr	r0, [r0, #4]
   d84ee:	4611      	mov	r1, r2
   d84f0:	f7ff bf18 	b.w	d8324 <network_listening>

000d84f4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d84f4:	2200      	movs	r2, #0
   d84f6:	6840      	ldr	r0, [r0, #4]
   d84f8:	4611      	mov	r1, r2
   d84fa:	f7ff bf23 	b.w	d8344 <network_get_listen_timeout>

000d84fe <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d84fe:	6840      	ldr	r0, [r0, #4]
   d8500:	2200      	movs	r2, #0
   d8502:	f7ff bf17 	b.w	d8334 <network_set_listen_timeout>

000d8506 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8506:	6840      	ldr	r0, [r0, #4]
   d8508:	2200      	movs	r2, #0
   d850a:	f081 0101 	eor.w	r1, r1, #1
   d850e:	f7ff bf01 	b.w	d8314 <network_listen>

000d8512 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8512:	2300      	movs	r3, #0
   d8514:	6840      	ldr	r0, [r0, #4]
   d8516:	461a      	mov	r2, r3
   d8518:	4619      	mov	r1, r3
   d851a:	f7ff beeb 	b.w	d82f4 <network_on>

000d851e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d851e:	2200      	movs	r2, #0
   d8520:	6840      	ldr	r0, [r0, #4]
   d8522:	4611      	mov	r1, r2
   d8524:	f7ff bece 	b.w	d82c4 <network_connecting>

000d8528 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8528:	6840      	ldr	r0, [r0, #4]
   d852a:	2200      	movs	r2, #0
   d852c:	2102      	movs	r1, #2
   d852e:	f7ff bed1 	b.w	d82d4 <network_disconnect>

000d8532 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8532:	2300      	movs	r3, #0
   d8534:	6840      	ldr	r0, [r0, #4]
   d8536:	461a      	mov	r2, r3
   d8538:	f7ff bebc 	b.w	d82b4 <network_connect>

000d853c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d853c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d853e:	4b1b      	ldr	r3, [pc, #108]	; (d85ac <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d8540:	6003      	str	r3, [r0, #0]
   d8542:	2500      	movs	r5, #0
   d8544:	460f      	mov	r7, r1
   d8546:	3330      	adds	r3, #48	; 0x30
   d8548:	2618      	movs	r6, #24
   d854a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d854e:	b089      	sub	sp, #36	; 0x24
   d8550:	6043      	str	r3, [r0, #4]
   d8552:	4632      	mov	r2, r6
   d8554:	4629      	mov	r1, r5
   d8556:	4604      	mov	r4, r0
   d8558:	3010      	adds	r0, #16
   d855a:	f003 fd03 	bl	dbf64 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d855e:	6878      	ldr	r0, [r7, #4]
   d8560:	462a      	mov	r2, r5
   d8562:	4629      	mov	r1, r5
   d8564:	f7ff febe 	bl	d82e4 <network_ready>
   d8568:	b918      	cbnz	r0, d8572 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d856a:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d856c:	4620      	mov	r0, r4
   d856e:	b009      	add	sp, #36	; 0x24
   d8570:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d8572:	4629      	mov	r1, r5
   d8574:	4632      	mov	r2, r6
   d8576:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d8578:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d857c:	f003 fcf2 	bl	dbf64 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8580:	a902      	add	r1, sp, #8
   d8582:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d8584:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d8588:	f7ff fb30 	bl	d7bec <cellular_signal>
   d858c:	b110      	cbz	r0, d8594 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d858e:	2301      	movs	r3, #1
   d8590:	60a3      	str	r3, [r4, #8]
            return sig;
   d8592:	e7eb      	b.n	d856c <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d8594:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d8596:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d8598:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d859a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d859c:	b90b      	cbnz	r3, d85a2 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d859e:	2302      	movs	r3, #2
   d85a0:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d85a2:	a902      	add	r1, sp, #8
   d85a4:	4620      	mov	r0, r4
   d85a6:	f000 f8c0 	bl	d872a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d85aa:	e7df      	b.n	d856c <_ZN5spark13CellularClass4RSSIEv+0x30>
   d85ac:	000dcd34 	.word	0x000dcd34

000d85b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d85b0:	4b08      	ldr	r3, [pc, #32]	; (d85d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d85b2:	b510      	push	{r4, lr}
   d85b4:	2428      	movs	r4, #40	; 0x28
   d85b6:	4622      	mov	r2, r4
   d85b8:	4618      	mov	r0, r3
   d85ba:	2100      	movs	r1, #0
   d85bc:	f003 fcd2 	bl	dbf64 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d85c0:	4b05      	ldr	r3, [pc, #20]	; (d85d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d85c2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d85c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d85c8:	6042      	str	r2, [r0, #4]
   d85ca:	2204      	movs	r2, #4
   d85cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d85ce:	4a03      	ldr	r2, [pc, #12]	; (d85dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d85d0:	601a      	str	r2, [r3, #0]
   d85d2:	bd10      	pop	{r4, pc}
   d85d4:	2003e470 	.word	0x2003e470
   d85d8:	2003e468 	.word	0x2003e468
   d85dc:	000dccf8 	.word	0x000dccf8

000d85e0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d85e0:	4770      	bx	lr

000d85e2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d85e2:	7d00      	ldrb	r0, [r0, #20]
   d85e4:	4770      	bx	lr

000d85e6 <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d85e6:	7d03      	ldrb	r3, [r0, #20]
   d85e8:	b14b      	cbz	r3, d85fe <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d85ea:	6983      	ldr	r3, [r0, #24]
   d85ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d85f0:	d005      	beq.n	d85fe <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d85f2:	6a00      	ldr	r0, [r0, #32]
   d85f4:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d85f8:	bf18      	it	ne
   d85fa:	2001      	movne	r0, #1
   d85fc:	4770      	bx	lr
   d85fe:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d8600:	4770      	bx	lr

000d8602 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d8602:	6803      	ldr	r3, [r0, #0]
   d8604:	6a1b      	ldr	r3, [r3, #32]
   d8606:	4718      	bx	r3

000d8608 <_ZN14CellularSignalD0Ev>:
   d8608:	b510      	push	{r4, lr}
   d860a:	2128      	movs	r1, #40	; 0x28
   d860c:	4604      	mov	r4, r0
   d860e:	f002 ff9b 	bl	db548 <_ZdlPvj>
   d8612:	4620      	mov	r0, r4
   d8614:	bd10      	pop	{r4, pc}
	...

000d8618 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d8618:	7d03      	ldrb	r3, [r0, #20]
   d861a:	b17b      	cbz	r3, d863c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d861c:	69c3      	ldr	r3, [r0, #28]
   d861e:	2b00      	cmp	r3, #0
   d8620:	db0c      	blt.n	d863c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d8622:	ee07 3a90 	vmov	s15, r3
   d8626:	ed9f 7a07 	vldr	s14, [pc, #28]	; d8644 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d862a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d862e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8632:	eddf 7a05 	vldr	s15, [pc, #20]	; d8648 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d8636:	ee20 0a27 	vmul.f32	s0, s0, s15
   d863a:	4770      	bx	lr
    return -1.0f;
   d863c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d8640:	4770      	bx	lr
   d8642:	bf00      	nop
   d8644:	477fff00 	.word	0x477fff00
   d8648:	42c80000 	.word	0x42c80000

000d864c <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d864c:	7d03      	ldrb	r3, [r0, #20]
   d864e:	b163      	cbz	r3, d866a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d8650:	6983      	ldr	r3, [r0, #24]
   d8652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d8656:	d008      	beq.n	d866a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d8658:	ee07 3a90 	vmov	s15, r3
   d865c:	ed9f 7a04 	vldr	s14, [pc, #16]	; d8670 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d8660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d8664:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8668:	4770      	bx	lr
    return 0.0f;
   d866a:	ed9f 0a02 	vldr	s0, [pc, #8]	; d8674 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d866e:	4770      	bx	lr
   d8670:	42c80000 	.word	0x42c80000
   d8674:	00000000 	.word	0x00000000

000d8678 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d8678:	7d03      	ldrb	r3, [r0, #20]
   d867a:	b17b      	cbz	r3, d869c <_ZNK14CellularSignal10getQualityEv+0x24>
   d867c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d867e:	2b00      	cmp	r3, #0
   d8680:	db0c      	blt.n	d869c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d8682:	ee07 3a90 	vmov	s15, r3
   d8686:	ed9f 7a07 	vldr	s14, [pc, #28]	; d86a4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d868a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d868e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d8692:	eddf 7a05 	vldr	s15, [pc, #20]	; d86a8 <_ZNK14CellularSignal10getQualityEv+0x30>
   d8696:	ee20 0a27 	vmul.f32	s0, s0, s15
   d869a:	4770      	bx	lr
    return -1.0f;
   d869c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d86a0:	4770      	bx	lr
   d86a2:	bf00      	nop
   d86a4:	477fff00 	.word	0x477fff00
   d86a8:	42c80000 	.word	0x42c80000

000d86ac <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d86ac:	7d03      	ldrb	r3, [r0, #20]
   d86ae:	b163      	cbz	r3, d86ca <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d86b0:	6a03      	ldr	r3, [r0, #32]
   d86b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d86b6:	d008      	beq.n	d86ca <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d86b8:	ee07 3a90 	vmov	s15, r3
   d86bc:	ed9f 7a04 	vldr	s14, [pc, #16]	; d86d0 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d86c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d86c4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d86c8:	4770      	bx	lr
    return 0.0f;
   d86ca:	ed9f 0a02 	vldr	s0, [pc, #8]	; d86d4 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d86ce:	4770      	bx	lr
   d86d0:	42c80000 	.word	0x42c80000
   d86d4:	00000000 	.word	0x00000000

000d86d8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d86d8:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d86da:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d86dc:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d86de:	da0a      	bge.n	d86f6 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d86e0:	212d      	movs	r1, #45	; 0x2d
   d86e2:	f002 f814 	bl	da70e <_ZN5Print5printEc>
            val = -n;
   d86e6:	4261      	negs	r1, r4
            t = print('-');
   d86e8:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d86ea:	220a      	movs	r2, #10
   d86ec:	4630      	mov	r0, r6
   d86ee:	f002 f81d 	bl	da72c <_ZN5Print11printNumberEmh>
    }
}
   d86f2:	4428      	add	r0, r5
   d86f4:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d86f6:	4621      	mov	r1, r4
        size_t t = 0;
   d86f8:	2500      	movs	r5, #0
   d86fa:	e7f6      	b.n	d86ea <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d86fc <_ZNK14CellularSignal7printToER5Print>:
{
   d86fc:	b570      	push	{r4, r5, r6, lr}
   d86fe:	460c      	mov	r4, r1
   d8700:	4605      	mov	r5, r0
   d8702:	6881      	ldr	r1, [r0, #8]
   d8704:	4620      	mov	r0, r4
   d8706:	f7ff ffe7 	bl	d86d8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d870a:	212c      	movs	r1, #44	; 0x2c
   d870c:	4606      	mov	r6, r0
   d870e:	4620      	mov	r0, r4
   d8710:	f001 fffd 	bl	da70e <_ZN5Print5printEc>
   d8714:	68e9      	ldr	r1, [r5, #12]
   d8716:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d8718:	4620      	mov	r0, r4
   d871a:	f7ff ffdd 	bl	d86d8 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d871e:	4430      	add	r0, r6
   d8720:	bd70      	pop	{r4, r5, r6, pc}

000d8722 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d8722:	f1a0 0004 	sub.w	r0, r0, #4
   d8726:	f7ff bfe9 	b.w	d86fc <_ZNK14CellularSignal7printToER5Print>

000d872a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d872a:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d872c:	460d      	mov	r5, r1
   d872e:	f100 0410 	add.w	r4, r0, #16
   d8732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8736:	e895 0003 	ldmia.w	r5, {r0, r1}
   d873a:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d873e:	2001      	movs	r0, #1
   d8740:	bd30      	pop	{r4, r5, pc}

000d8742 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8742:	4770      	bx	lr

000d8744 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d8744:	2000      	movs	r0, #0
   d8746:	4770      	bx	lr

000d8748 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8748:	b510      	push	{r4, lr}
   d874a:	2110      	movs	r1, #16
   d874c:	4604      	mov	r4, r0
   d874e:	f002 fefb 	bl	db548 <_ZdlPvj>
   d8752:	4620      	mov	r0, r4
   d8754:	bd10      	pop	{r4, pc}

000d8756 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d8756:	b508      	push	{r3, lr}
      { delete this; }
   d8758:	f7ff fff6 	bl	d8748 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d875c:	bd08      	pop	{r3, pc}

000d875e <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d875e:	b530      	push	{r4, r5, lr}
        type_(type) {
   d8760:	2200      	movs	r2, #0
   d8762:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d8766:	6002      	str	r2, [r0, #0]
   d8768:	8084      	strh	r4, [r0, #4]
   d876a:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d876c:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d876e:	680c      	ldr	r4, [r1, #0]
   d8770:	8085      	strh	r5, [r0, #4]
   d8772:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8774:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d8776:	bd30      	pop	{r4, r5, pc}

000d8778 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8778:	b510      	push	{r4, lr}
   d877a:	4604      	mov	r4, r0
    free((void*)msg_);
   d877c:	6800      	ldr	r0, [r0, #0]
   d877e:	f7ff fe01 	bl	d8384 <free>
}
   d8782:	4620      	mov	r0, r4
   d8784:	bd10      	pop	{r4, pc}

000d8786 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d8786:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8788:	68c4      	ldr	r4, [r0, #12]
   d878a:	b1f4      	cbz	r4, d87ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d878c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d878e:	2b02      	cmp	r3, #2
   d8790:	d103      	bne.n	d879a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d8792:	f104 000c 	add.w	r0, r4, #12
   d8796:	f7ff ffef 	bl	d8778 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d879a:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d879c:	b135      	cbz	r5, d87ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d879e:	4628      	mov	r0, r5
   d87a0:	f7fb fdf4 	bl	d438c <_ZNSt14_Function_baseD1Ev>
   d87a4:	2110      	movs	r1, #16
   d87a6:	4628      	mov	r0, r5
   d87a8:	f002 fece 	bl	db548 <_ZdlPvj>
   d87ac:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d87ae:	b135      	cbz	r5, d87be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d87b0:	4628      	mov	r0, r5
   d87b2:	f7fb fdeb 	bl	d438c <_ZNSt14_Function_baseD1Ev>
   d87b6:	2110      	movs	r1, #16
   d87b8:	4628      	mov	r0, r5
   d87ba:	f002 fec5 	bl	db548 <_ZdlPvj>
   d87be:	4620      	mov	r0, r4
   d87c0:	2114      	movs	r1, #20
   d87c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d87c6:	f002 bebf 	b.w	db548 <_ZdlPvj>
   d87ca:	bd38      	pop	{r3, r4, r5, pc}

000d87cc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d87cc:	b510      	push	{r4, lr}
   d87ce:	b088      	sub	sp, #32
   d87d0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d87d2:	4668      	mov	r0, sp
   d87d4:	f002 f855 	bl	da882 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d87d8:	4669      	mov	r1, sp
   d87da:	a804      	add	r0, sp, #16
   d87dc:	f002 f89c 	bl	da918 <_ZN6StringC1ERKS_>
   d87e0:	a804      	add	r0, sp, #16
   d87e2:	47a0      	blx	r4
   d87e4:	4604      	mov	r4, r0
   d87e6:	a804      	add	r0, sp, #16
   d87e8:	f002 f800 	bl	da7ec <_ZN6StringD1Ev>
    String p(param);
   d87ec:	4668      	mov	r0, sp
   d87ee:	f001 fffd 	bl	da7ec <_ZN6StringD1Ev>
}
   d87f2:	4620      	mov	r0, r4
   d87f4:	b008      	add	sp, #32
   d87f6:	bd10      	pop	{r4, pc}

000d87f8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d87f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d87fa:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d87fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d8800:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d8802:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8804:	461a      	mov	r2, r3
   d8806:	4669      	mov	r1, sp
   d8808:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d880a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d880e:	f8ad 4000 	strh.w	r4, [sp]
   d8812:	f7ff fce7 	bl	d81e4 <spark_function>
}
   d8816:	b004      	add	sp, #16
   d8818:	bd10      	pop	{r4, pc}

000d881a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d881a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d881c:	230c      	movs	r3, #12
   d881e:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   d8822:	6803      	ldr	r3, [r0, #0]
   d8824:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   d8828:	7a03      	ldrb	r3, [r0, #8]
   d882a:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   d882e:	6843      	ldr	r3, [r0, #4]
   d8830:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d8832:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   d8834:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   d8836:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d883a:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   d883c:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   d8840:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d8844:	f7ff fd2e 	bl	d82a4 <spark_cloud_disconnect>
}
   d8848:	b005      	add	sp, #20
   d884a:	f85d fb04 	ldr.w	pc, [sp], #4

000d884e <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   d884e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   d8850:	220c      	movs	r2, #12
   d8852:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   d8856:	6802      	ldr	r2, [r0, #0]
   d8858:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   d885c:	7a02      	ldrb	r2, [r0, #8]
   d885e:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   d8862:	6842      	ldr	r2, [r0, #4]
   d8864:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   d8866:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   d8868:	7a42      	ldrb	r2, [r0, #9]
   d886a:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d886e:	4619      	mov	r1, r3
   d8870:	aa01      	add	r2, sp, #4
   d8872:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   d8874:	f8ad 300d 	strh.w	r3, [sp, #13]
   d8878:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   d887c:	f7ff fd02 	bl	d8284 <spark_set_connection_property>
}
   d8880:	b005      	add	sp, #20
   d8882:	f85d fb04 	ldr.w	pc, [sp], #4

000d8886 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8886:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8888:	460e      	mov	r6, r1
   d888a:	4604      	mov	r4, r0
   d888c:	f856 3b04 	ldr.w	r3, [r6], #4
   d8890:	9300      	str	r3, [sp, #0]
   d8892:	460d      	mov	r5, r1
   d8894:	a801      	add	r0, sp, #4
   d8896:	4631      	mov	r1, r6
   d8898:	f7ff fe07 	bl	d84aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d889c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d889e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d88a0:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d88a2:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d88a4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d88a6:	2300      	movs	r3, #0
   d88a8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d88aa:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d88ac:	f7ff fe04 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88b0:	4630      	mov	r0, r6
   d88b2:	f7ff fe01 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d88b6:	4628      	mov	r0, r5
   d88b8:	2108      	movs	r1, #8
   d88ba:	f002 fe45 	bl	db548 <_ZdlPvj>
        return p;
    }
   d88be:	4620      	mov	r0, r4
   d88c0:	b002      	add	sp, #8
   d88c2:	bd70      	pop	{r4, r5, r6, pc}

000d88c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d88c4:	b513      	push	{r0, r1, r4, lr}
   d88c6:	460b      	mov	r3, r1
   d88c8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d88ca:	e9d0 0100 	ldrd	r0, r1, [r0]
   d88ce:	466c      	mov	r4, sp
   d88d0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d88d4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d88d8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d88dc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d88e0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d88e4:	b002      	add	sp, #8
   d88e6:	bd10      	pop	{r4, pc}

000d88e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d88e8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d88ea:	b510      	push	{r4, lr}
      if (_M_empty())
   d88ec:	b90a      	cbnz	r2, d88f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d88ee:	f002 fe31 	bl	db554 <_ZSt25__throw_bad_function_callv>
    }
   d88f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d88f6:	68c3      	ldr	r3, [r0, #12]
   d88f8:	4718      	bx	r3

000d88fa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d88fa:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d88fc:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d88fe:	f100 0110 	add.w	r1, r0, #16
   d8902:	f7ff fff1 	bl	d88e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d8906:	bd08      	pop	{r3, pc}

000d8908 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d8908:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d890a:	b510      	push	{r4, lr}
      if (_M_empty())
   d890c:	b90a      	cbnz	r2, d8912 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d890e:	f002 fe21 	bl	db554 <_ZSt25__throw_bad_function_callv>
    }
   d8912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8916:	68c3      	ldr	r3, [r0, #12]
   d8918:	4718      	bx	r3

000d891a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d891a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d891c:	6800      	ldr	r0, [r0, #0]
   d891e:	f100 0110 	add.w	r1, r0, #16
   d8922:	f7ff fff1 	bl	d8908 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d8926:	bd08      	pop	{r3, pc}

000d8928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d8928:	b538      	push	{r3, r4, r5, lr}
   d892a:	2300      	movs	r3, #0
   d892c:	4604      	mov	r4, r0
   d892e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8930:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d8932:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8934:	f7fb fbaf 	bl	d4096 <_Znwj>
   d8938:	b128      	cbz	r0, d8946 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d893a:	2301      	movs	r3, #1
   d893c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d8940:	4b02      	ldr	r3, [pc, #8]	; (d894c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d8942:	6003      	str	r3, [r0, #0]
   d8944:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8946:	6020      	str	r0, [r4, #0]
	}
   d8948:	4620      	mov	r0, r4
   d894a:	bd38      	pop	{r3, r4, r5, pc}
   d894c:	000dcd70 	.word	0x000dcd70

000d8950 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d8950:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8952:	2300      	movs	r3, #0
   d8954:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8956:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8958:	4604      	mov	r4, r0
   d895a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d895c:	b12b      	cbz	r3, d896a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d895e:	2202      	movs	r2, #2
   d8960:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8962:	68eb      	ldr	r3, [r5, #12]
   d8964:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8966:	68ab      	ldr	r3, [r5, #8]
   d8968:	60a3      	str	r3, [r4, #8]
    }
   d896a:	4620      	mov	r0, r4
   d896c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d8970:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8972:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8974:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8976:	4668      	mov	r0, sp
   d8978:	f7ff fef1 	bl	d875e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d897c:	f04f 0302 	mov.w	r3, #2
   d8980:	e8d4 2f4f 	ldrexb	r2, [r4]
   d8984:	2a00      	cmp	r2, #0
   d8986:	d103      	bne.n	d8990 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8988:	e8c4 3f41 	strexb	r1, r3, [r4]
   d898c:	2900      	cmp	r1, #0
   d898e:	d1f7      	bne.n	d8980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d8990:	d125      	bne.n	d89de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d8992:	f104 050c 	add.w	r5, r4, #12
   d8996:	4669      	mov	r1, sp
   d8998:	4628      	mov	r0, r5
   d899a:	f7ff fee0 	bl	d875e <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d899e:	f3bf 8f5b 	dmb	ish
   d89a2:	2301      	movs	r3, #1
   d89a4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d89a6:	2000      	movs	r0, #0
   d89a8:	f104 0308 	add.w	r3, r4, #8
   d89ac:	f3bf 8f5b 	dmb	ish
   d89b0:	e853 6f00 	ldrex	r6, [r3]
   d89b4:	e843 0200 	strex	r2, r0, [r3]
   d89b8:	2a00      	cmp	r2, #0
   d89ba:	d1f9      	bne.n	d89b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d89bc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d89c0:	b16e      	cbz	r6, d89de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d89c2:	f7ff fbb5 	bl	d8130 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d89c6:	b178      	cbz	r0, d89e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d89c8:	4629      	mov	r1, r5
   d89ca:	4630      	mov	r0, r6
   d89cc:	f7ff ff8c 	bl	d88e8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d89d0:	4630      	mov	r0, r6
   d89d2:	f7fb fcdb 	bl	d438c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d89d6:	2110      	movs	r1, #16
   d89d8:	4630      	mov	r0, r6
   d89da:	f002 fdb5 	bl	db548 <_ZdlPvj>
        p_->setError(std::move(error));
   d89de:	4668      	mov	r0, sp
   d89e0:	f7ff feca 	bl	d8778 <_ZN8particle5ErrorD1Ev>
    }
   d89e4:	b009      	add	sp, #36	; 0x24
   d89e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d89e8:	4631      	mov	r1, r6
   d89ea:	a802      	add	r0, sp, #8
   d89ec:	f7ff ffb0 	bl	d8950 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d89f0:	68e0      	ldr	r0, [r4, #12]
   d89f2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d89f6:	b108      	cbz	r0, d89fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d89f8:	f003 fb0a 	bl	dc010 <strdup>
        type_(type) {
   d89fc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d89fe:	2010      	movs	r0, #16
   d8a00:	f8ad 501c 	strh.w	r5, [sp, #28]
   d8a04:	f7fb fb47 	bl	d4096 <_Znwj>
   d8a08:	4605      	mov	r5, r0
   d8a0a:	b1e8      	cbz	r0, d8a48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d8a0c:	2700      	movs	r7, #0
   d8a0e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8a10:	2018      	movs	r0, #24
   d8a12:	f7fb fb40 	bl	d4096 <_Znwj>
   d8a16:	4604      	mov	r4, r0
   d8a18:	b188      	cbz	r0, d8a3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d8a1a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d8a1c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8a1e:	a802      	add	r0, sp, #8
   d8a20:	f7ff ff50 	bl	d88c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a24:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8a26:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a28:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8a2a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8a2c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8a2e:	a906      	add	r1, sp, #24
   d8a30:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8a32:	60e3      	str	r3, [r4, #12]
   d8a34:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d8a38:	9205      	str	r2, [sp, #20]
   d8a3a:	f7ff fe90 	bl	d875e <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d8a3e:	4b08      	ldr	r3, [pc, #32]	; (d8a60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8a40:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8a42:	4b08      	ldr	r3, [pc, #32]	; (d8a64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8a44:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8a46:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8a48:	a806      	add	r0, sp, #24
   d8a4a:	f7ff fe95 	bl	d8778 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8a4e:	a802      	add	r0, sp, #8
   d8a50:	f7fb fc9c 	bl	d438c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8a54:	2200      	movs	r2, #0
   d8a56:	4629      	mov	r1, r5
   d8a58:	4803      	ldr	r0, [pc, #12]	; (d8a68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d8a5a:	f7ff fb71 	bl	d8140 <application_thread_invoke>
   d8a5e:	e7b7      	b.n	d89d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8a60:	000d88fb 	.word	0x000d88fb
   d8a64:	000d8b91 	.word	0x000d8b91
   d8a68:	000d8463 	.word	0x000d8463

000d8a6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8a70:	b08a      	sub	sp, #40	; 0x28
   d8a72:	4605      	mov	r5, r0
   d8a74:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8a78:	460c      	mov	r4, r1
   d8a7a:	4617      	mov	r7, r2
   d8a7c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8a7e:	f7ff fbc9 	bl	d8214 <spark_cloud_flag_connected>
   d8a82:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8a84:	4682      	mov	sl, r0
   d8a86:	bb38      	cbnz	r0, d8ad8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8a88:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8a8c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8a8e:	a905      	add	r1, sp, #20
   d8a90:	4630      	mov	r0, r6
   d8a92:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8a96:	f7ff fe62 	bl	d875e <_ZN8particle5ErrorC1EOS0_>
   d8a9a:	2014      	movs	r0, #20
   d8a9c:	f7fb fafb 	bl	d4096 <_Znwj>
   d8aa0:	4604      	mov	r4, r0
   d8aa2:	b148      	cbz	r0, d8ab8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8aa4:	2302      	movs	r3, #2
   d8aa6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8aa8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8aaa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8aae:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8ab0:	4631      	mov	r1, r6
   d8ab2:	300c      	adds	r0, #12
   d8ab4:	f7ff fe53 	bl	d875e <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8ab8:	4628      	mov	r0, r5
	: __shared_count(__p)
   d8aba:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8abc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8ac0:	f7ff ff32 	bl	d8928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8ac4:	4630      	mov	r0, r6
   d8ac6:	f7ff fe57 	bl	d8778 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d8aca:	a805      	add	r0, sp, #20
   d8acc:	f7ff fe54 	bl	d8778 <_ZN8particle5ErrorD1Ev>
}
   d8ad0:	4628      	mov	r0, r5
   d8ad2:	b00a      	add	sp, #40	; 0x28
   d8ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8ad8:	230c      	movs	r3, #12
   d8ada:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8ade:	2014      	movs	r0, #20
   d8ae0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8ae4:	9307      	str	r3, [sp, #28]
   d8ae6:	f7fb fad6 	bl	d4096 <_Znwj>
   d8aea:	4601      	mov	r1, r0
   d8aec:	b128      	cbz	r0, d8afa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8aee:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8af2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8af6:	f880 a001 	strb.w	sl, [r0, #1]
   d8afa:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8afc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8afe:	f7ff ff13 	bl	d8928 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8b02:	4b22      	ldr	r3, [pc, #136]	; (d8b8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8b04:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8b06:	2008      	movs	r0, #8
   d8b08:	f7fb fac5 	bl	d4096 <_Znwj>
   d8b0c:	4682      	mov	sl, r0
   d8b0e:	b128      	cbz	r0, d8b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8b10:	9b03      	ldr	r3, [sp, #12]
   d8b12:	f840 3b04 	str.w	r3, [r0], #4
   d8b16:	a904      	add	r1, sp, #16
   d8b18:	f7ff fcc7 	bl	d84aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8b1c:	9600      	str	r6, [sp, #0]
   d8b1e:	fa5f f389 	uxtb.w	r3, r9
   d8b22:	4642      	mov	r2, r8
   d8b24:	4639      	mov	r1, r7
   d8b26:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8b28:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8b2c:	f7ff fb82 	bl	d8234 <spark_send_event>
   d8b30:	b9b8      	cbnz	r0, d8b62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8b32:	9b03      	ldr	r3, [sp, #12]
   d8b34:	785b      	ldrb	r3, [r3, #1]
   d8b36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d8b3a:	b993      	cbnz	r3, d8b62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d8b3c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8b40:	a905      	add	r1, sp, #20
   d8b42:	a803      	add	r0, sp, #12
   d8b44:	9205      	str	r2, [sp, #20]
   d8b46:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8b4a:	f7ff ff11 	bl	d8970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8b4e:	a805      	add	r0, sp, #20
   d8b50:	f7ff fe12 	bl	d8778 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8b54:	a805      	add	r0, sp, #20
   d8b56:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8b58:	f7ff fe95 	bl	d8886 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d8b5c:	a806      	add	r0, sp, #24
   d8b5e:	f7ff fcab 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8b62:	9b03      	ldr	r3, [sp, #12]
   d8b64:	9305      	str	r3, [sp, #20]
   d8b66:	a904      	add	r1, sp, #16
   d8b68:	a806      	add	r0, sp, #24
   d8b6a:	f7ff fc9e 	bl	d84aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8b6e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8b70:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8b72:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8b74:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8b76:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8b78:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d8b7a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8b7c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8b7e:	f7ff fc9b 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8b82:	a804      	add	r0, sp, #16
   d8b84:	f7ff fc98 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8b88:	e7a2      	b.n	d8ad0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d8b8a:	bf00      	nop
   d8b8c:	000d8c55 	.word	0x000d8c55

000d8b90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8b90:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8b94:	4605      	mov	r5, r0
	  switch (__op)
   d8b96:	d007      	beq.n	d8ba8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8b98:	2a03      	cmp	r2, #3
   d8b9a:	d018      	beq.n	d8bce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8b9c:	2a01      	cmp	r2, #1
   d8b9e:	d101      	bne.n	d8ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8ba0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8ba2:	6003      	str	r3, [r0, #0]
	}
   d8ba4:	2000      	movs	r0, #0
   d8ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8ba8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d8baa:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8bac:	f7fb fa73 	bl	d4096 <_Znwj>
   d8bb0:	4604      	mov	r4, r0
   d8bb2:	b150      	cbz	r0, d8bca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8bb4:	4631      	mov	r1, r6
   d8bb6:	f7ff fecb 	bl	d8950 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d8bba:	6930      	ldr	r0, [r6, #16]
   d8bbc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8bc0:	b108      	cbz	r0, d8bc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8bc2:	f003 fa25 	bl	dc010 <strdup>
        type_(type) {
   d8bc6:	6120      	str	r0, [r4, #16]
   d8bc8:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d8bca:	602c      	str	r4, [r5, #0]
	}
   d8bcc:	e7ea      	b.n	d8ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8bce:	6804      	ldr	r4, [r0, #0]
   d8bd0:	2c00      	cmp	r4, #0
   d8bd2:	d0e7      	beq.n	d8ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8bd4:	f104 0010 	add.w	r0, r4, #16
   d8bd8:	f7ff fdce 	bl	d8778 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8bdc:	4620      	mov	r0, r4
   d8bde:	f7fb fbd5 	bl	d438c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8be2:	2118      	movs	r1, #24
   d8be4:	4620      	mov	r0, r4
   d8be6:	f002 fcaf 	bl	db548 <_ZdlPvj>
   d8bea:	e7db      	b.n	d8ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8bec <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8bec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8bee:	2300      	movs	r3, #0
   d8bf0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8bf2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8bf4:	4604      	mov	r4, r0
   d8bf6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8bf8:	b12b      	cbz	r3, d8c06 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d8bfa:	2202      	movs	r2, #2
   d8bfc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8bfe:	68eb      	ldr	r3, [r5, #12]
   d8c00:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8c02:	68ab      	ldr	r3, [r5, #8]
   d8c04:	60a3      	str	r3, [r4, #8]
    }
   d8c06:	4620      	mov	r0, r4
   d8c08:	bd38      	pop	{r3, r4, r5, pc}

000d8c0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d8c0a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8c0c:	b570      	push	{r4, r5, r6, lr}
   d8c0e:	4604      	mov	r4, r0
	  switch (__op)
   d8c10:	d007      	beq.n	d8c22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8c12:	2a03      	cmp	r2, #3
   d8c14:	d012      	beq.n	d8c3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8c16:	2a01      	cmp	r2, #1
   d8c18:	d101      	bne.n	d8c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8c1a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8c1c:	6003      	str	r3, [r0, #0]
	}
   d8c1e:	2000      	movs	r0, #0
   d8c20:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c22:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8c24:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8c26:	f7fb fa36 	bl	d4096 <_Znwj>
   d8c2a:	4605      	mov	r5, r0
   d8c2c:	b120      	cbz	r0, d8c38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d8c2e:	4631      	mov	r1, r6
   d8c30:	f7ff ffdc 	bl	d8bec <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8c34:	7c33      	ldrb	r3, [r6, #16]
   d8c36:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8c38:	6025      	str	r5, [r4, #0]
	}
   d8c3a:	e7f0      	b.n	d8c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8c3c:	6804      	ldr	r4, [r0, #0]
   d8c3e:	2c00      	cmp	r4, #0
   d8c40:	d0ed      	beq.n	d8c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8c42:	4620      	mov	r0, r4
   d8c44:	f7fb fba2 	bl	d438c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8c48:	2114      	movs	r1, #20
   d8c4a:	4620      	mov	r0, r4
   d8c4c:	f002 fc7c 	bl	db548 <_ZdlPvj>
   d8c50:	e7e5      	b.n	d8c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8c56:	b089      	sub	sp, #36	; 0x24
   d8c58:	4604      	mov	r4, r0
   d8c5a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8c5c:	a801      	add	r0, sp, #4
   d8c5e:	4611      	mov	r1, r2
   d8c60:	f7ff fe11 	bl	d8886 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8c64:	b1a4      	cbz	r4, d8c90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8c66:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8c68:	b11d      	cbz	r5, d8c72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d8c6a:	4628      	mov	r0, r5
   d8c6c:	f003 f9d0 	bl	dc010 <strdup>
   d8c70:	4605      	mov	r5, r0
   d8c72:	a801      	add	r0, sp, #4
   d8c74:	a903      	add	r1, sp, #12
        type_(type) {
   d8c76:	9503      	str	r5, [sp, #12]
   d8c78:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8c7c:	f7ff fe78 	bl	d8970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8c80:	a803      	add	r0, sp, #12
   d8c82:	f7ff fd79 	bl	d8778 <_ZN8particle5ErrorD1Ev>
   d8c86:	a802      	add	r0, sp, #8
   d8c88:	f7ff fc16 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8c8c:	b009      	add	sp, #36	; 0x24
   d8c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8c90:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8c92:	2301      	movs	r3, #1
   d8c94:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8c98:	2a00      	cmp	r2, #0
   d8c9a:	d103      	bne.n	d8ca4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8c9c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8ca0:	2900      	cmp	r1, #0
   d8ca2:	d1f7      	bne.n	d8c94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8ca4:	d1ef      	bne.n	d8c86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8ca6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8ca8:	f3bf 8f5b 	dmb	ish
   d8cac:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8cae:	1d2b      	adds	r3, r5, #4
   d8cb0:	f3bf 8f5b 	dmb	ish
   d8cb4:	e853 6f00 	ldrex	r6, [r3]
   d8cb8:	e843 4200 	strex	r2, r4, [r3]
   d8cbc:	2a00      	cmp	r2, #0
   d8cbe:	d1f9      	bne.n	d8cb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8cc0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8cc4:	2e00      	cmp	r6, #0
   d8cc6:	d0de      	beq.n	d8c86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8cc8:	4620      	mov	r0, r4
   d8cca:	f7ff fa31 	bl	d8130 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8cce:	4607      	mov	r7, r0
   d8cd0:	b160      	cbz	r0, d8cec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8cd2:	f105 010c 	add.w	r1, r5, #12
   d8cd6:	4630      	mov	r0, r6
   d8cd8:	f7ff fe16 	bl	d8908 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8cdc:	4630      	mov	r0, r6
   d8cde:	f7fb fb55 	bl	d438c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8ce2:	2110      	movs	r1, #16
   d8ce4:	4630      	mov	r0, r6
   d8ce6:	f002 fc2f 	bl	db548 <_ZdlPvj>
   d8cea:	e7cc      	b.n	d8c86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8cec:	4631      	mov	r1, r6
   d8cee:	a803      	add	r0, sp, #12
   d8cf0:	f7ff ff7c 	bl	d8bec <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8cf4:	7b2b      	ldrb	r3, [r5, #12]
   d8cf6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8cfa:	2010      	movs	r0, #16
   d8cfc:	f7fb f9cb 	bl	d4096 <_Znwj>
   d8d00:	4605      	mov	r5, r0
   d8d02:	b1d0      	cbz	r0, d8d3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8d04:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8d06:	2014      	movs	r0, #20
   d8d08:	f7fb f9c5 	bl	d4096 <_Znwj>
   d8d0c:	4604      	mov	r4, r0
   d8d0e:	b178      	cbz	r0, d8d30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8d10:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8d12:	4601      	mov	r1, r0
   d8d14:	a803      	add	r0, sp, #12
   d8d16:	f7ff fdd5 	bl	d88c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d1a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8d1c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d1e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d20:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8d22:	9205      	str	r2, [sp, #20]
   d8d24:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d26:	60e3      	str	r3, [r4, #12]
   d8d28:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8d2c:	9206      	str	r2, [sp, #24]
   d8d2e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8d30:	4b06      	ldr	r3, [pc, #24]	; (d8d4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8d32:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8d34:	4b06      	ldr	r3, [pc, #24]	; (d8d50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8d36:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8d38:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8d3a:	a803      	add	r0, sp, #12
   d8d3c:	f7fb fb26 	bl	d438c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8d40:	2200      	movs	r2, #0
   d8d42:	4629      	mov	r1, r5
   d8d44:	4803      	ldr	r0, [pc, #12]	; (d8d54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8d46:	f7ff f9fb 	bl	d8140 <application_thread_invoke>
   d8d4a:	e7c7      	b.n	d8cdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8d4c:	000d891b 	.word	0x000d891b
   d8d50:	000d8c0b 	.word	0x000d8c0b
   d8d54:	000d8463 	.word	0x000d8463

000d8d58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8d58:	2200      	movs	r2, #0
   d8d5a:	6840      	ldr	r0, [r0, #4]
   d8d5c:	4611      	mov	r1, r2
   d8d5e:	f7ff bae1 	b.w	d8324 <network_listening>

000d8d62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8d62:	2200      	movs	r2, #0
   d8d64:	6840      	ldr	r0, [r0, #4]
   d8d66:	4611      	mov	r1, r2
   d8d68:	f7ff baec 	b.w	d8344 <network_get_listen_timeout>

000d8d6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8d6c:	6840      	ldr	r0, [r0, #4]
   d8d6e:	2200      	movs	r2, #0
   d8d70:	f7ff bae0 	b.w	d8334 <network_set_listen_timeout>

000d8d74 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8d74:	6840      	ldr	r0, [r0, #4]
   d8d76:	2200      	movs	r2, #0
   d8d78:	f081 0101 	eor.w	r1, r1, #1
   d8d7c:	f7ff baca 	b.w	d8314 <network_listen>

000d8d80 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8d80:	2300      	movs	r3, #0
   d8d82:	6840      	ldr	r0, [r0, #4]
   d8d84:	461a      	mov	r2, r3
   d8d86:	4619      	mov	r1, r3
   d8d88:	f7ff babc 	b.w	d8304 <network_off>

000d8d8c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8d8c:	2300      	movs	r3, #0
   d8d8e:	6840      	ldr	r0, [r0, #4]
   d8d90:	461a      	mov	r2, r3
   d8d92:	4619      	mov	r1, r3
   d8d94:	f7ff baae 	b.w	d82f4 <network_on>

000d8d98 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8d98:	2200      	movs	r2, #0
   d8d9a:	6840      	ldr	r0, [r0, #4]
   d8d9c:	4611      	mov	r1, r2
   d8d9e:	f7ff baa1 	b.w	d82e4 <network_ready>

000d8da2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8da2:	2200      	movs	r2, #0
   d8da4:	6840      	ldr	r0, [r0, #4]
   d8da6:	4611      	mov	r1, r2
   d8da8:	f7ff ba8c 	b.w	d82c4 <network_connecting>

000d8dac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8dac:	6840      	ldr	r0, [r0, #4]
   d8dae:	2200      	movs	r2, #0
   d8db0:	2102      	movs	r1, #2
   d8db2:	f7ff ba8f 	b.w	d82d4 <network_disconnect>

000d8db6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8db6:	2300      	movs	r3, #0
   d8db8:	6840      	ldr	r0, [r0, #4]
   d8dba:	461a      	mov	r2, r3
   d8dbc:	f7ff ba7a 	b.w	d82b4 <network_connect>

000d8dc0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8dc0:	4b02      	ldr	r3, [pc, #8]	; (d8dcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8dc2:	2203      	movs	r2, #3
   d8dc4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8dc6:	4a02      	ldr	r2, [pc, #8]	; (d8dd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8dc8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8dca:	4770      	bx	lr
   d8dcc:	2003e498 	.word	0x2003e498
   d8dd0:	000dcd8c 	.word	0x000dcd8c

000d8dd4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8dd4:	6800      	ldr	r0, [r0, #0]
   d8dd6:	f000 b8ad 	b.w	d8f34 <_ZN7TwoWire4lockEv>

000d8dda <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8dda:	b510      	push	{r4, lr}
   d8ddc:	4604      	mov	r4, r0
      lock_(_lock) {
   d8dde:	6001      	str	r1, [r0, #0]
   d8de0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d8de2:	b10a      	cbz	r2, d8de8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8de4:	f7ff fff6 	bl	d8dd4 <_ZN9FuelGauge4lockEv>
}
   d8de8:	4620      	mov	r0, r4
   d8dea:	bd10      	pop	{r4, pc}

000d8dec <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d8dec:	b513      	push	{r0, r1, r4, lr}
   d8dee:	4604      	mov	r4, r0
   d8df0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d8df2:	f002 fb85 	bl	db500 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d8df6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d8df8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d8dfa:	4620      	mov	r0, r4
   d8dfc:	f7ff ffed 	bl	d8dda <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d8e00:	4620      	mov	r0, r4
   d8e02:	b002      	add	sp, #8
   d8e04:	bd10      	pop	{r4, pc}

000d8e06 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8e06:	4770      	bx	lr

000d8e08 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8e0a:	4606      	mov	r6, r0
   d8e0c:	4615      	mov	r5, r2
   d8e0e:	460c      	mov	r4, r1
   d8e10:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8e12:	42bc      	cmp	r4, r7
   d8e14:	d006      	beq.n	d8e24 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8e16:	6833      	ldr	r3, [r6, #0]
   d8e18:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8e1c:	689b      	ldr	r3, [r3, #8]
   d8e1e:	4630      	mov	r0, r6
   d8e20:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8e22:	e7f6      	b.n	d8e12 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8e24:	4628      	mov	r0, r5
   d8e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8e28 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8e28:	7c00      	ldrb	r0, [r0, #16]
   d8e2a:	2200      	movs	r2, #0
   d8e2c:	f7ff b81e 	b.w	d7e6c <hal_i2c_write>

000d8e30 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8e30:	7c00      	ldrb	r0, [r0, #16]
   d8e32:	2100      	movs	r1, #0
   d8e34:	f7ff b822 	b.w	d7e7c <hal_i2c_available>

000d8e38 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d8e38:	7c00      	ldrb	r0, [r0, #16]
   d8e3a:	2100      	movs	r1, #0
   d8e3c:	f7ff b826 	b.w	d7e8c <hal_i2c_read>

000d8e40 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8e40:	7c00      	ldrb	r0, [r0, #16]
   d8e42:	2100      	movs	r1, #0
   d8e44:	f7ff b82a 	b.w	d7e9c <hal_i2c_peek>

000d8e48 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d8e48:	7c00      	ldrb	r0, [r0, #16]
   d8e4a:	2100      	movs	r1, #0
   d8e4c:	f7ff b82e 	b.w	d7eac <hal_i2c_flush>

000d8e50 <_ZN7TwoWireD0Ev>:
   d8e50:	b510      	push	{r4, lr}
   d8e52:	2114      	movs	r1, #20
   d8e54:	4604      	mov	r4, r0
   d8e56:	f002 fb77 	bl	db548 <_ZdlPvj>
   d8e5a:	4620      	mov	r0, r4
   d8e5c:	bd10      	pop	{r4, pc}
	...

000d8e60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8e60:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8e66:	4604      	mov	r4, r0
   d8e68:	4608      	mov	r0, r1
   d8e6a:	2100      	movs	r1, #0
   d8e6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8e70:	4b03      	ldr	r3, [pc, #12]	; (d8e80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8e72:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8e74:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d8e76:	4611      	mov	r1, r2
   d8e78:	f7ff f828 	bl	d7ecc <hal_i2c_init>
}
   d8e7c:	4620      	mov	r0, r4
   d8e7e:	bd10      	pop	{r4, pc}
   d8e80:	000dcdc8 	.word	0x000dcdc8

000d8e84 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8e84:	2300      	movs	r3, #0
   d8e86:	7c00      	ldrb	r0, [r0, #16]
   d8e88:	461a      	mov	r2, r3
   d8e8a:	4619      	mov	r1, r3
   d8e8c:	f7fe bfd6 	b.w	d7e3c <hal_i2c_begin>

000d8e90 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8e90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8e92:	2200      	movs	r2, #0
   d8e94:	2314      	movs	r3, #20
   d8e96:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8e9a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8e9e:	780b      	ldrb	r3, [r1, #0]
   d8ea0:	f88d 3008 	strb.w	r3, [sp, #8]
   d8ea4:	684b      	ldr	r3, [r1, #4]
   d8ea6:	9303      	str	r3, [sp, #12]
   d8ea8:	68cb      	ldr	r3, [r1, #12]
   d8eaa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8eac:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8eae:	7a0b      	ldrb	r3, [r1, #8]
   d8eb0:	9305      	str	r3, [sp, #20]
   d8eb2:	a901      	add	r1, sp, #4
   d8eb4:	f7ff f822 	bl	d7efc <hal_i2c_request_ex>
}
   d8eb8:	b007      	add	sp, #28
   d8eba:	f85d fb04 	ldr.w	pc, [sp], #4

000d8ebe <_ZN7TwoWire11requestFromEhjh>:
{
   d8ebe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8ec0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8ec2:	f88d 1000 	strb.w	r1, [sp]
   d8ec6:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8eca:	9103      	str	r1, [sp, #12]
   d8ecc:	bf18      	it	ne
   d8ece:	2301      	movne	r3, #1
   d8ed0:	4669      	mov	r1, sp
    size_ = size;
   d8ed2:	9201      	str	r2, [sp, #4]
   d8ed4:	f88d 3008 	strb.w	r3, [sp, #8]
   d8ed8:	f7ff ffda 	bl	d8e90 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8edc:	b005      	add	sp, #20
   d8ede:	f85d fb04 	ldr.w	pc, [sp], #4

000d8ee2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d8ee2:	2301      	movs	r3, #1
   d8ee4:	f7ff bfeb 	b.w	d8ebe <_ZN7TwoWire11requestFromEhjh>

000d8ee8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8ee8:	7c00      	ldrb	r0, [r0, #16]
   d8eea:	2200      	movs	r2, #0
   d8eec:	f7fe bfae 	b.w	d7e4c <hal_i2c_begin_transmission>

000d8ef0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8ef0:	b2c9      	uxtb	r1, r1
   d8ef2:	f7ff bff9 	b.w	d8ee8 <_ZN7TwoWire17beginTransmissionEh>

000d8ef6 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d8ef6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8ef8:	2300      	movs	r3, #0
   d8efa:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d8efe:	684a      	ldr	r2, [r1, #4]
   d8f00:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d8f02:	2314      	movs	r3, #20
    };
   d8f04:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8f06:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d8f0a:	780b      	ldrb	r3, [r1, #0]
    };
   d8f0c:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8f0e:	7a0a      	ldrb	r2, [r1, #8]
   d8f10:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d8f12:	7c00      	ldrb	r0, [r0, #16]
    };
   d8f14:	f88d 3008 	strb.w	r3, [sp, #8]
   d8f18:	aa01      	add	r2, sp, #4
   d8f1a:	4619      	mov	r1, r3
   d8f1c:	f7fe ff96 	bl	d7e4c <hal_i2c_begin_transmission>
}
   d8f20:	b007      	add	sp, #28
   d8f22:	f85d fb04 	ldr.w	pc, [sp], #4

000d8f26 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8f26:	7c00      	ldrb	r0, [r0, #16]
   d8f28:	2200      	movs	r2, #0
   d8f2a:	f7fe bf97 	b.w	d7e5c <hal_i2c_end_transmission>

000d8f2e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8f2e:	2101      	movs	r1, #1
   d8f30:	f7ff bff9 	b.w	d8f26 <_ZN7TwoWire15endTransmissionEh>

000d8f34 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8f34:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d8f36:	2100      	movs	r1, #0
   d8f38:	7c00      	ldrb	r0, [r0, #16]
   d8f3a:	f7fe ffcf 	bl	d7edc <hal_i2c_lock>
}
   d8f3e:	fab0 f080 	clz	r0, r0
   d8f42:	0940      	lsrs	r0, r0, #5
   d8f44:	bd08      	pop	{r3, pc}

000d8f46 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d8f46:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8f48:	2100      	movs	r1, #0
   d8f4a:	7c00      	ldrb	r0, [r0, #16]
   d8f4c:	f7fe ffce 	bl	d7eec <hal_i2c_unlock>
}
   d8f50:	fab0 f080 	clz	r0, r0
   d8f54:	0940      	lsrs	r0, r0, #5
   d8f56:	bd08      	pop	{r3, pc}

000d8f58 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8f58:	4700      	bx	r0
	...

000d8f5c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8f5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8f60:	2400      	movs	r4, #0
{
   d8f62:	461d      	mov	r5, r3
   d8f64:	460f      	mov	r7, r1
   d8f66:	4690      	mov	r8, r2
   d8f68:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8f6a:	f7fe ff57 	bl	d7e1c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8f6e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8f70:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d8f74:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8f78:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8f7c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8f80:	bfa2      	ittt	ge
   d8f82:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d8f86:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8f8a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8f8c:	4907      	ldr	r1, [pc, #28]	; (d8fac <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8f8e:	9400      	str	r4, [sp, #0]
   d8f90:	4643      	mov	r3, r8
   d8f92:	463a      	mov	r2, r7
   d8f94:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8f96:	bfa8      	it	ge
   d8f98:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8f9c:	f7fe ff36 	bl	d7e0c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8fa0:	fab0 f080 	clz	r0, r0
   d8fa4:	0940      	lsrs	r0, r0, #5
   d8fa6:	b004      	add	sp, #16
   d8fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8fac:	000d8f59 	.word	0x000d8f59

000d8fb0 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d8fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8fb2:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d8fb4:	f7fe ff32 	bl	d7e1c <HAL_Interrupts_Detach>
   d8fb8:	4605      	mov	r5, r0
   d8fba:	b970      	cbnz	r0, d8fda <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   d8fbc:	4f08      	ldr	r7, [pc, #32]	; (d8fe0 <_Z15detachInterruptt+0x30>)
   d8fbe:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   d8fc2:	b146      	cbz	r6, d8fd6 <_Z15detachInterruptt+0x26>
   d8fc4:	4630      	mov	r0, r6
   d8fc6:	f7fb f9e1 	bl	d438c <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d8fca:	2110      	movs	r1, #16
   d8fcc:	4630      	mov	r0, r6
   d8fce:	f002 fabb 	bl	db548 <_ZdlPvj>
        handlers[pin] = nullptr;
   d8fd2:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   d8fd6:	2001      	movs	r0, #1
   d8fd8:	e000      	b.n	d8fdc <_Z15detachInterruptt+0x2c>
        return false;
   d8fda:	2000      	movs	r0, #0
    }
    return true;
}
   d8fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8fde:	bf00      	nop
   d8fe0:	2003e4a0 	.word	0x2003e4a0

000d8fe4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8fe4:	4770      	bx	lr

000d8fe6 <_ZN9IPAddressD0Ev>:
   d8fe6:	b510      	push	{r4, lr}
   d8fe8:	2118      	movs	r1, #24
   d8fea:	4604      	mov	r4, r0
   d8fec:	f002 faac 	bl	db548 <_ZdlPvj>
   d8ff0:	4620      	mov	r0, r4
   d8ff2:	bd10      	pop	{r4, pc}

000d8ff4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8ff6:	7d03      	ldrb	r3, [r0, #20]
   d8ff8:	2b06      	cmp	r3, #6
{
   d8ffa:	b08d      	sub	sp, #52	; 0x34
   d8ffc:	460e      	mov	r6, r1
   d8ffe:	f100 0704 	add.w	r7, r0, #4
   d9002:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d9006:	d012      	beq.n	d902e <_ZNK9IPAddress7printToER5Print+0x3a>
   d9008:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d900c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9010:	220a      	movs	r2, #10
   d9012:	4630      	mov	r0, r6
   d9014:	f001 fb8a 	bl	da72c <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9018:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d901a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d901c:	d019      	beq.n	d9052 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d901e:	2c00      	cmp	r4, #0
   d9020:	d0f4      	beq.n	d900c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d9022:	212e      	movs	r1, #46	; 0x2e
   d9024:	4630      	mov	r0, r6
   d9026:	f001 fb72 	bl	da70e <_ZN5Print5printEc>
   d902a:	4404      	add	r4, r0
   d902c:	e7ee      	b.n	d900c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d902e:	232f      	movs	r3, #47	; 0x2f
   d9030:	466a      	mov	r2, sp
   d9032:	4639      	mov	r1, r7
   d9034:	200a      	movs	r0, #10
		buf[0] = 0;
   d9036:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d903a:	f7fe ff67 	bl	d7f0c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d903e:	4668      	mov	r0, sp
   d9040:	f003 f803 	bl	dc04a <strlen>
   d9044:	6833      	ldr	r3, [r6, #0]
   d9046:	4602      	mov	r2, r0
   d9048:	68db      	ldr	r3, [r3, #12]
   d904a:	4669      	mov	r1, sp
   d904c:	4630      	mov	r0, r6
   d904e:	4798      	blx	r3
   d9050:	4604      	mov	r4, r0
    }
    return n;
}
   d9052:	4620      	mov	r0, r4
   d9054:	b00d      	add	sp, #52	; 0x34
   d9056:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9058 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9058:	b510      	push	{r4, lr}
   d905a:	4b05      	ldr	r3, [pc, #20]	; (d9070 <_ZN9IPAddressC1Ev+0x18>)
   d905c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d905e:	2211      	movs	r2, #17
   d9060:	f840 3b04 	str.w	r3, [r0], #4
   d9064:	2100      	movs	r1, #0
   d9066:	f002 ff7d 	bl	dbf64 <memset>
}
   d906a:	4620      	mov	r0, r4
   d906c:	bd10      	pop	{r4, pc}
   d906e:	bf00      	nop
   d9070:	000dcdf0 	.word	0x000dcdf0

000d9074 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9074:	4603      	mov	r3, r0
   d9076:	4a07      	ldr	r2, [pc, #28]	; (d9094 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9078:	b510      	push	{r4, lr}
   d907a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d907e:	f101 0210 	add.w	r2, r1, #16
   d9082:	f851 4b04 	ldr.w	r4, [r1], #4
   d9086:	f843 4b04 	str.w	r4, [r3], #4
   d908a:	4291      	cmp	r1, r2
   d908c:	d1f9      	bne.n	d9082 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d908e:	780a      	ldrb	r2, [r1, #0]
   d9090:	701a      	strb	r2, [r3, #0]
}
   d9092:	bd10      	pop	{r4, pc}
   d9094:	000dcdf0 	.word	0x000dcdf0

000d9098 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9098:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d909a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d909e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d90a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d90a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d90aa:	2304      	movs	r3, #4
   d90ac:	6041      	str	r1, [r0, #4]
   d90ae:	7503      	strb	r3, [r0, #20]
}
   d90b0:	bd10      	pop	{r4, pc}

000d90b2 <_ZN9IPAddressaSEPKh>:
{
   d90b2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d90b4:	78cb      	ldrb	r3, [r1, #3]
   d90b6:	9300      	str	r3, [sp, #0]
   d90b8:	788b      	ldrb	r3, [r1, #2]
   d90ba:	784a      	ldrb	r2, [r1, #1]
   d90bc:	7809      	ldrb	r1, [r1, #0]
   d90be:	f7ff ffeb 	bl	d9098 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d90c2:	b002      	add	sp, #8
   d90c4:	bd10      	pop	{r4, pc}

000d90c6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d90c6:	f100 0310 	add.w	r3, r0, #16
   d90ca:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d90cc:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d90d0:	2901      	cmp	r1, #1
   d90d2:	4618      	mov	r0, r3
   d90d4:	d108      	bne.n	d90e8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d90d6:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d90da:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d90de:	3a01      	subs	r2, #1
   d90e0:	f103 0310 	add.w	r3, r3, #16
   d90e4:	d1f2      	bne.n	d90cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d90e6:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d90e8:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d90ea:	bf04      	itt	eq
   d90ec:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d90f0:	1852      	addeq	r2, r2, r1
   d90f2:	e7f4      	b.n	d90de <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d90f4 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d90f4:	b40e      	push	{r1, r2, r3}
   d90f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d90f8:	b088      	sub	sp, #32
   d90fa:	af00      	add	r7, sp, #0
   d90fc:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9100:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9102:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9106:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9108:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d910a:	462b      	mov	r3, r5
   d910c:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d910e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9110:	f7ff f958 	bl	d83c4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9114:	280f      	cmp	r0, #15
   d9116:	687a      	ldr	r2, [r7, #4]
   d9118:	d91a      	bls.n	d9150 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d911a:	f100 0308 	add.w	r3, r0, #8
   d911e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d9122:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d9124:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9128:	1c41      	adds	r1, r0, #1
   d912a:	462b      	mov	r3, r5
   d912c:	4668      	mov	r0, sp
        va_start(args, fmt);
   d912e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9130:	f7ff f948 	bl	d83c4 <vsnprintf>
        if (n > 0) {
   d9134:	1e02      	subs	r2, r0, #0
   d9136:	dd04      	ble.n	d9142 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d9138:	6823      	ldr	r3, [r4, #0]
   d913a:	4669      	mov	r1, sp
   d913c:	689b      	ldr	r3, [r3, #8]
   d913e:	4620      	mov	r0, r4
   d9140:	4798      	blx	r3
   d9142:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d9144:	3720      	adds	r7, #32
   d9146:	46bd      	mov	sp, r7
   d9148:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d914c:	b003      	add	sp, #12
   d914e:	4770      	bx	lr
    } else if (n > 0) {
   d9150:	2800      	cmp	r0, #0
   d9152:	d0f7      	beq.n	d9144 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d9154:	6823      	ldr	r3, [r4, #0]
   d9156:	4602      	mov	r2, r0
   d9158:	689b      	ldr	r3, [r3, #8]
   d915a:	f107 0110 	add.w	r1, r7, #16
   d915e:	4620      	mov	r0, r4
   d9160:	4798      	blx	r3
}
   d9162:	e7ef      	b.n	d9144 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d9164 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9164:	b510      	push	{r4, lr}
          _M_dispose();
   d9166:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9168:	4604      	mov	r4, r0
          _M_dispose();
   d916a:	689b      	ldr	r3, [r3, #8]
   d916c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d916e:	68a3      	ldr	r3, [r4, #8]
   d9170:	3b01      	subs	r3, #1
   d9172:	60a3      	str	r3, [r4, #8]
   d9174:	b92b      	cbnz	r3, d9182 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d9176:	6823      	ldr	r3, [r4, #0]
   d9178:	4620      	mov	r0, r4
   d917a:	68db      	ldr	r3, [r3, #12]
    }
   d917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d9180:	4718      	bx	r3
    }
   d9182:	bd10      	pop	{r4, pc}

000d9184 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9184:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d9186:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d9188:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d918c:	689b      	ldr	r3, [r3, #8]
   d918e:	2201      	movs	r2, #1
   d9190:	f10d 0107 	add.w	r1, sp, #7
   d9194:	4798      	blx	r3
}
   d9196:	b003      	add	sp, #12
   d9198:	f85d fb04 	ldr.w	pc, [sp], #4

000d919c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d919c:	b538      	push	{r3, r4, r5, lr}
   d919e:	680b      	ldr	r3, [r1, #0]
   d91a0:	6003      	str	r3, [r0, #0]
   d91a2:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d91a4:	6843      	ldr	r3, [r0, #4]
   d91a6:	429d      	cmp	r5, r3
    class __shared_ptr
   d91a8:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d91aa:	d00c      	beq.n	d91c6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d91ac:	b115      	cbz	r5, d91b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d91ae:	686b      	ldr	r3, [r5, #4]
   d91b0:	3301      	adds	r3, #1
   d91b2:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d91b4:	6860      	ldr	r0, [r4, #4]
   d91b6:	b128      	cbz	r0, d91c4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d91b8:	6843      	ldr	r3, [r0, #4]
   d91ba:	3b01      	subs	r3, #1
   d91bc:	6043      	str	r3, [r0, #4]
   d91be:	b90b      	cbnz	r3, d91c4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d91c0:	f7ff ffd0 	bl	d9164 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d91c4:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d91c6:	4620      	mov	r0, r4
   d91c8:	bd38      	pop	{r3, r4, r5, pc}

000d91ca <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d91ca:	460b      	mov	r3, r1
   d91cc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d91ce:	2200      	movs	r2, #0
   d91d0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d91d2:	e9c0 2200 	strd	r2, r2, [r0]
   d91d6:	4604      	mov	r4, r0
        t_ = t;
   d91d8:	6083      	str	r3, [r0, #8]
    if (t) {
   d91da:	b90b      	cbnz	r3, d91e0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d91dc:	4620      	mov	r0, r4
   d91de:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d91e0:	f7ff ffdc 	bl	d919c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d91e4:	e7fa      	b.n	d91dc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d91e6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d91e6:	6883      	ldr	r3, [r0, #8]
   d91e8:	b1eb      	cbz	r3, d9226 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d91ea:	781a      	ldrb	r2, [r3, #0]
   d91ec:	2a03      	cmp	r2, #3
   d91ee:	d81a      	bhi.n	d9226 <_ZNK5spark9JSONValue4typeEv+0x40>
   d91f0:	e8df f002 	tbb	[pc, r2]
   d91f4:	1b021704 	.word	0x1b021704
   d91f8:	2005      	movs	r0, #5
   d91fa:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d91fc:	6802      	ldr	r2, [r0, #0]
   d91fe:	685b      	ldr	r3, [r3, #4]
   d9200:	6852      	ldr	r2, [r2, #4]
   d9202:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d9204:	282d      	cmp	r0, #45	; 0x2d
   d9206:	d012      	beq.n	d922e <_ZNK5spark9JSONValue4typeEv+0x48>
   d9208:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d920c:	2b09      	cmp	r3, #9
   d920e:	d90e      	bls.n	d922e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d9210:	2874      	cmp	r0, #116	; 0x74
   d9212:	d00e      	beq.n	d9232 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9214:	2866      	cmp	r0, #102	; 0x66
   d9216:	d00c      	beq.n	d9232 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d9218:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d921c:	4258      	negs	r0, r3
   d921e:	4158      	adcs	r0, r3
   d9220:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d9222:	2006      	movs	r0, #6
   d9224:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d9226:	2000      	movs	r0, #0
   d9228:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d922a:	2004      	movs	r0, #4
   d922c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d922e:	2003      	movs	r0, #3
   d9230:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d9232:	2002      	movs	r0, #2
}
   d9234:	4770      	bx	lr

000d9236 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d9236:	b510      	push	{r4, lr}
   d9238:	4604      	mov	r4, r0
    switch (type()) {
   d923a:	f7ff ffd4 	bl	d91e6 <_ZNK5spark9JSONValue4typeEv>
   d923e:	2802      	cmp	r0, #2
   d9240:	d00e      	beq.n	d9260 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d9242:	1ec3      	subs	r3, r0, #3
   d9244:	b2db      	uxtb	r3, r3
   d9246:	2b01      	cmp	r3, #1
   d9248:	d814      	bhi.n	d9274 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d924a:	6822      	ldr	r2, [r4, #0]
   d924c:	68a3      	ldr	r3, [r4, #8]
   d924e:	6850      	ldr	r0, [r2, #4]
   d9250:	685b      	ldr	r3, [r3, #4]
}
   d9252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d9256:	220a      	movs	r2, #10
   d9258:	2100      	movs	r1, #0
   d925a:	4418      	add	r0, r3
   d925c:	f002 bfb0 	b.w	dc1c0 <strtol>
        const char* const s = d_->json + t_->start;
   d9260:	6822      	ldr	r2, [r4, #0]
   d9262:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d9264:	6852      	ldr	r2, [r2, #4]
   d9266:	685b      	ldr	r3, [r3, #4]
   d9268:	5cd0      	ldrb	r0, [r2, r3]
   d926a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d926e:	4258      	negs	r0, r3
   d9270:	4158      	adcs	r0, r3
}
   d9272:	bd10      	pop	{r4, pc}
    switch (type()) {
   d9274:	2000      	movs	r0, #0
   d9276:	e7fc      	b.n	d9272 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d9278 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9278:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d927a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d927c:	e9c0 3300 	strd	r3, r3, [r0]
   d9280:	4604      	mov	r4, r0
        n_(0) {
   d9282:	480e      	ldr	r0, [pc, #56]	; (d92bc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9284:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9288:	b1a9      	cbz	r1, d92b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d928a:	780b      	ldrb	r3, [r1, #0]
   d928c:	2b03      	cmp	r3, #3
   d928e:	d006      	beq.n	d929e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d9290:	b98b      	cbnz	r3, d92b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d9292:	6813      	ldr	r3, [r2, #0]
   d9294:	6858      	ldr	r0, [r3, #4]
   d9296:	684b      	ldr	r3, [r1, #4]
   d9298:	5cc3      	ldrb	r3, [r0, r3]
   d929a:	2b6e      	cmp	r3, #110	; 0x6e
   d929c:	d007      	beq.n	d92ae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d929e:	6813      	ldr	r3, [r2, #0]
   d92a0:	684d      	ldr	r5, [r1, #4]
   d92a2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d92a4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d92a6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d92a8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d92aa:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d92ac:	60e3      	str	r3, [r4, #12]
   d92ae:	4611      	mov	r1, r2
   d92b0:	4620      	mov	r0, r4
   d92b2:	f7ff ff73 	bl	d919c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d92b6:	4620      	mov	r0, r4
   d92b8:	bd38      	pop	{r3, r4, r5, pc}
   d92ba:	bf00      	nop
   d92bc:	000dce59 	.word	0x000dce59

000d92c0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d92c0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d92c2:	2500      	movs	r5, #0
   d92c4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d92c6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d92ca:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d92ce:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d92d2:	4604      	mov	r4, r0
   d92d4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d92d6:	b14b      	cbz	r3, d92ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d92d8:	781a      	ldrb	r2, [r3, #0]
   d92da:	2a01      	cmp	r2, #1
   d92dc:	d106      	bne.n	d92ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d92de:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d92e2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d92e4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d92e6:	6143      	str	r3, [r0, #20]
   d92e8:	f7ff ff58 	bl	d919c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d92ec:	4620      	mov	r0, r4
   d92ee:	bd38      	pop	{r3, r4, r5, pc}

000d92f0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d92f0:	b510      	push	{r4, lr}
    if (!n_) {
   d92f2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d92f4:	4604      	mov	r4, r0
    if (!n_) {
   d92f6:	b163      	cbz	r3, d9312 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d92f8:	6880      	ldr	r0, [r0, #8]
   d92fa:	60e0      	str	r0, [r4, #12]
    --n_;
   d92fc:	3b01      	subs	r3, #1
    ++t_;
   d92fe:	3010      	adds	r0, #16
   d9300:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d9302:	6120      	str	r0, [r4, #16]
    --n_;
   d9304:	6163      	str	r3, [r4, #20]
    if (n_) {
   d9306:	b113      	cbz	r3, d930e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d9308:	f7ff fedd 	bl	d90c6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d930c:	60a0      	str	r0, [r4, #8]
    return true;
   d930e:	2001      	movs	r0, #1
   d9310:	e000      	b.n	d9314 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d9312:	4618      	mov	r0, r3
}
   d9314:	bd10      	pop	{r4, pc}

000d9316 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9316:	b510      	push	{r4, lr}
    write('}');
   d9318:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d931a:	4604      	mov	r4, r0
    write('}');
   d931c:	f7ff ff32 	bl	d9184 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d9320:	2301      	movs	r3, #1
   d9322:	7123      	strb	r3, [r4, #4]
}
   d9324:	4620      	mov	r0, r4
   d9326:	bd10      	pop	{r4, pc}

000d9328 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d9328:	b508      	push	{r3, lr}
    switch (state_) {
   d932a:	7903      	ldrb	r3, [r0, #4]
   d932c:	2b01      	cmp	r3, #1
   d932e:	d002      	beq.n	d9336 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d9330:	2b02      	cmp	r3, #2
   d9332:	d004      	beq.n	d933e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d9334:	bd08      	pop	{r3, pc}
        write(',');
   d9336:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d9338:	f7ff ff24 	bl	d9184 <_ZN5spark10JSONWriter5writeEc>
}
   d933c:	e7fa      	b.n	d9334 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d933e:	213a      	movs	r1, #58	; 0x3a
   d9340:	e7fa      	b.n	d9338 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d9342 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d9342:	b510      	push	{r4, lr}
   d9344:	4604      	mov	r4, r0
    writeSeparator();
   d9346:	f7ff ffef 	bl	d9328 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d934a:	4620      	mov	r0, r4
   d934c:	217b      	movs	r1, #123	; 0x7b
   d934e:	f7ff ff19 	bl	d9184 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d9352:	2300      	movs	r3, #0
   d9354:	7123      	strb	r3, [r4, #4]
}
   d9356:	4620      	mov	r0, r4
   d9358:	bd10      	pop	{r4, pc}
	...

000d935c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d935c:	b513      	push	{r0, r1, r4, lr}
   d935e:	4604      	mov	r4, r0
   d9360:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9362:	f7ff ffe1 	bl	d9328 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9366:	6823      	ldr	r3, [r4, #0]
   d9368:	9a01      	ldr	r2, [sp, #4]
   d936a:	68db      	ldr	r3, [r3, #12]
   d936c:	4903      	ldr	r1, [pc, #12]	; (d937c <_ZN5spark10JSONWriter5valueEi+0x20>)
   d936e:	4620      	mov	r0, r4
   d9370:	4798      	blx	r3
    state_ = NEXT;
   d9372:	2301      	movs	r3, #1
}
   d9374:	4620      	mov	r0, r4
    state_ = NEXT;
   d9376:	7123      	strb	r3, [r4, #4]
}
   d9378:	b002      	add	sp, #8
   d937a:	bd10      	pop	{r4, pc}
   d937c:	000dc9d4 	.word	0x000dc9d4

000d9380 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d9380:	b513      	push	{r0, r1, r4, lr}
   d9382:	4604      	mov	r4, r0
   d9384:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9386:	f7ff ffcf 	bl	d9328 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d938a:	6823      	ldr	r3, [r4, #0]
   d938c:	9a01      	ldr	r2, [sp, #4]
   d938e:	68db      	ldr	r3, [r3, #12]
   d9390:	4903      	ldr	r1, [pc, #12]	; (d93a0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d9392:	4620      	mov	r0, r4
   d9394:	4798      	blx	r3
    state_ = NEXT;
   d9396:	2301      	movs	r3, #1
}
   d9398:	4620      	mov	r0, r4
    state_ = NEXT;
   d939a:	7123      	strb	r3, [r4, #4]
}
   d939c:	b002      	add	sp, #8
   d939e:	bd10      	pop	{r4, pc}
   d93a0:	000dcbc3 	.word	0x000dcbc3

000d93a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d93a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d93a8:	460d      	mov	r5, r1
   d93aa:	4617      	mov	r7, r2
    write('"');
   d93ac:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d93ae:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d9450 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d93b2:	4604      	mov	r4, r0
    const char* const end = str + size;
   d93b4:	442f      	add	r7, r5
    write('"');
   d93b6:	f7ff fee5 	bl	d9184 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d93ba:	4629      	mov	r1, r5
    while (s != end) {
   d93bc:	42bd      	cmp	r5, r7
   d93be:	462a      	mov	r2, r5
   d93c0:	d038      	beq.n	d9434 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d93c2:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d93c6:	2e22      	cmp	r6, #34	; 0x22
   d93c8:	d003      	beq.n	d93d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d93ca:	2e5c      	cmp	r6, #92	; 0x5c
   d93cc:	d001      	beq.n	d93d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d93ce:	2e1f      	cmp	r6, #31
   d93d0:	d8f4      	bhi.n	d93bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d93d2:	6823      	ldr	r3, [r4, #0]
   d93d4:	1a52      	subs	r2, r2, r1
   d93d6:	689b      	ldr	r3, [r3, #8]
   d93d8:	4620      	mov	r0, r4
   d93da:	4798      	blx	r3
            write('\\');
   d93dc:	215c      	movs	r1, #92	; 0x5c
   d93de:	4620      	mov	r0, r4
   d93e0:	f7ff fed0 	bl	d9184 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d93e4:	2e0d      	cmp	r6, #13
   d93e6:	d80a      	bhi.n	d93fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d93e8:	2e07      	cmp	r6, #7
   d93ea:	d91c      	bls.n	d9426 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d93ec:	f1a6 0308 	sub.w	r3, r6, #8
   d93f0:	2b05      	cmp	r3, #5
   d93f2:	d818      	bhi.n	d9426 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d93f4:	e8df f003 	tbb	[pc, r3]
   d93f8:	17110f0d 	.word	0x17110f0d
   d93fc:	1513      	.short	0x1513
   d93fe:	2e22      	cmp	r6, #34	; 0x22
   d9400:	d001      	beq.n	d9406 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d9402:	2e5c      	cmp	r6, #92	; 0x5c
   d9404:	d10f      	bne.n	d9426 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d9406:	4631      	mov	r1, r6
                write('b');
   d9408:	4620      	mov	r0, r4
   d940a:	f7ff febb 	bl	d9184 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d940e:	4629      	mov	r1, r5
    while (s != end) {
   d9410:	e7d4      	b.n	d93bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d9412:	2162      	movs	r1, #98	; 0x62
   d9414:	e7f8      	b.n	d9408 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d9416:	2174      	movs	r1, #116	; 0x74
   d9418:	e7f6      	b.n	d9408 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d941a:	216e      	movs	r1, #110	; 0x6e
   d941c:	e7f4      	b.n	d9408 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d941e:	2166      	movs	r1, #102	; 0x66
   d9420:	e7f2      	b.n	d9408 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d9422:	2172      	movs	r1, #114	; 0x72
   d9424:	e7f0      	b.n	d9408 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d9426:	6823      	ldr	r3, [r4, #0]
   d9428:	4632      	mov	r2, r6
   d942a:	68db      	ldr	r3, [r3, #12]
   d942c:	4641      	mov	r1, r8
   d942e:	4620      	mov	r0, r4
   d9430:	4798      	blx	r3
                break;
   d9432:	e7ec      	b.n	d940e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d9434:	428d      	cmp	r5, r1
   d9436:	d004      	beq.n	d9442 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d9438:	6823      	ldr	r3, [r4, #0]
   d943a:	1a6a      	subs	r2, r5, r1
   d943c:	689b      	ldr	r3, [r3, #8]
   d943e:	4620      	mov	r0, r4
   d9440:	4798      	blx	r3
    }
    write('"');
   d9442:	2122      	movs	r1, #34	; 0x22
   d9444:	4620      	mov	r0, r4
   d9446:	f7ff fe9d 	bl	d9184 <_ZN5spark10JSONWriter5writeEc>
}
   d944a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d944e:	bf00      	nop
   d9450:	000dcdfc 	.word	0x000dcdfc

000d9454 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d9454:	b513      	push	{r0, r1, r4, lr}
   d9456:	4604      	mov	r4, r0
   d9458:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d945c:	f7ff ff64 	bl	d9328 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d9460:	4620      	mov	r0, r4
   d9462:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9466:	f7ff ff9d 	bl	d93a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d946a:	2302      	movs	r3, #2
}
   d946c:	4620      	mov	r0, r4
    state_ = VALUE;
   d946e:	7123      	strb	r3, [r4, #4]
}
   d9470:	b002      	add	sp, #8
   d9472:	bd10      	pop	{r4, pc}

000d9474 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9474:	b513      	push	{r0, r1, r4, lr}
   d9476:	4604      	mov	r4, r0
   d9478:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d947c:	f7ff ff54 	bl	d9328 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d9480:	4620      	mov	r0, r4
   d9482:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9486:	f7ff ff8d 	bl	d93a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d948a:	2301      	movs	r3, #1
}
   d948c:	4620      	mov	r0, r4
    state_ = NEXT;
   d948e:	7123      	strb	r3, [r4, #4]
}
   d9490:	b002      	add	sp, #8
   d9492:	bd10      	pop	{r4, pc}

000d9494 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d9494:	6880      	ldr	r0, [r0, #8]
   d9496:	6803      	ldr	r3, [r0, #0]
   d9498:	68db      	ldr	r3, [r3, #12]
   d949a:	4718      	bx	r3

000d949c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d949c:	4770      	bx	lr

000d949e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d949e:	4608      	mov	r0, r1
   d94a0:	b111      	cbz	r1, d94a8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d94a2:	680b      	ldr	r3, [r1, #0]
   d94a4:	685b      	ldr	r3, [r3, #4]
   d94a6:	4718      	bx	r3
}
   d94a8:	4770      	bx	lr

000d94aa <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d94aa:	4770      	bx	lr

000d94ac <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d94ac:	4770      	bx	lr

000d94ae <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d94ae:	4770      	bx	lr

000d94b0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d94b0:	4770      	bx	lr

000d94b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d94b2:	b538      	push	{r3, r4, r5, lr}
   d94b4:	4604      	mov	r4, r0
   d94b6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d94b8:	6800      	ldr	r0, [r0, #0]
   d94ba:	212e      	movs	r1, #46	; 0x2e
   d94bc:	f002 fd8b 	bl	dbfd6 <strchrnul>
    size = s - category;
   d94c0:	6823      	ldr	r3, [r4, #0]
   d94c2:	1ac3      	subs	r3, r0, r3
   d94c4:	602b      	str	r3, [r5, #0]
    if (size) {
   d94c6:	b123      	cbz	r3, d94d2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d94c8:	7803      	ldrb	r3, [r0, #0]
   d94ca:	b103      	cbz	r3, d94ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d94cc:	3001      	adds	r0, #1
   d94ce:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d94d0:	6020      	str	r0, [r4, #0]
}
   d94d2:	4618      	mov	r0, r3
   d94d4:	bd38      	pop	{r3, r4, r5, pc}

000d94d6 <_ZN5spark16JSONStreamWriterD0Ev>:
   d94d6:	b510      	push	{r4, lr}
   d94d8:	210c      	movs	r1, #12
   d94da:	4604      	mov	r4, r0
   d94dc:	f002 f834 	bl	db548 <_ZdlPvj>
   d94e0:	4620      	mov	r0, r4
   d94e2:	bd10      	pop	{r4, pc}

000d94e4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d94e4:	b510      	push	{r4, lr}
   d94e6:	2104      	movs	r1, #4
   d94e8:	4604      	mov	r4, r0
   d94ea:	f002 f82d 	bl	db548 <_ZdlPvj>
   d94ee:	4620      	mov	r0, r4
   d94f0:	bd10      	pop	{r4, pc}

000d94f2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d94f2:	b510      	push	{r4, lr}
   d94f4:	2104      	movs	r1, #4
   d94f6:	4604      	mov	r4, r0
   d94f8:	f002 f826 	bl	db548 <_ZdlPvj>
   d94fc:	4620      	mov	r0, r4
   d94fe:	bd10      	pop	{r4, pc}

000d9500 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d9500:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d9502:	f002 fd72 	bl	dbfea <strcmp>
}
   d9506:	fab0 f080 	clz	r0, r0
   d950a:	0940      	lsrs	r0, r0, #5
   d950c:	bd08      	pop	{r3, pc}

000d950e <__tcf_1>:
   d950e:	4770      	bx	lr

000d9510 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d9510:	b510      	push	{r4, lr}
   d9512:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d9514:	f001 fe32 	bl	db17c <_Z16_fetch_usbserialv>
   d9518:	4284      	cmp	r4, r0
   d951a:	d010      	beq.n	d953e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d951c:	f001 fda6 	bl	db06c <_Z22__fetch_global_Serial1v>
   d9520:	4284      	cmp	r4, r0
   d9522:	d105      	bne.n	d9530 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d9524:	f001 fda2 	bl	db06c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d9528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d952c:	f001 bd9b 	b.w	db066 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d9530:	b12c      	cbz	r4, d953e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d9532:	6823      	ldr	r3, [r4, #0]
   d9534:	4620      	mov	r0, r4
   d9536:	685b      	ldr	r3, [r3, #4]
}
   d9538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d953c:	4718      	bx	r3
   d953e:	bd10      	pop	{r4, pc}

000d9540 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d9540:	b513      	push	{r0, r1, r4, lr}
   d9542:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d9544:	4608      	mov	r0, r1
   d9546:	9101      	str	r1, [sp, #4]
   d9548:	f002 fd7f 	bl	dc04a <strlen>
   d954c:	9901      	ldr	r1, [sp, #4]
   d954e:	4602      	mov	r2, r0
   d9550:	4620      	mov	r0, r4
}
   d9552:	b002      	add	sp, #8
   d9554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d9558:	f7ff bf8c 	b.w	d9474 <_ZN5spark10JSONWriter5valueEPKcj>

000d955c <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d955c:	b513      	push	{r0, r1, r4, lr}
   d955e:	4604      	mov	r4, r0
    write(str, strlen(str));
   d9560:	4608      	mov	r0, r1
   d9562:	9101      	str	r1, [sp, #4]
   d9564:	f002 fd71 	bl	dc04a <strlen>
   d9568:	6823      	ldr	r3, [r4, #0]
   d956a:	9901      	ldr	r1, [sp, #4]
   d956c:	68db      	ldr	r3, [r3, #12]
   d956e:	4602      	mov	r2, r0
   d9570:	4620      	mov	r0, r4
}
   d9572:	b002      	add	sp, #8
   d9574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d9578:	4718      	bx	r3

000d957a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d957a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d957c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d957e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d9582:	68db      	ldr	r3, [r3, #12]
   d9584:	2201      	movs	r2, #1
   d9586:	f10d 0107 	add.w	r1, sp, #7
   d958a:	4798      	blx	r3
}
   d958c:	b003      	add	sp, #12
   d958e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9592 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d9592:	b40e      	push	{r1, r2, r3}
   d9594:	b503      	push	{r0, r1, lr}
   d9596:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d9598:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d959a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d959e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d95a0:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d95a2:	f001 f8e1 	bl	da768 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d95a6:	b002      	add	sp, #8
   d95a8:	f85d eb04 	ldr.w	lr, [sp], #4
   d95ac:	b003      	add	sp, #12
   d95ae:	4770      	bx	lr

000d95b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d95b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d95b4:	e9d0 9500 	ldrd	r9, r5, [r0]
   d95b8:	f04f 0814 	mov.w	r8, #20
   d95bc:	fb08 f505 	mul.w	r5, r8, r5
   d95c0:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d95c2:	10ab      	asrs	r3, r5, #2
   d95c4:	4d18      	ldr	r5, [pc, #96]	; (d9628 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d95c6:	4617      	mov	r7, r2
   d95c8:	435d      	muls	r5, r3
   d95ca:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d95cc:	2d00      	cmp	r5, #0
   d95ce:	dd23      	ble.n	d9618 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d95d0:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d95d2:	fb08 f006 	mul.w	r0, r8, r6
   d95d6:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d95da:	463a      	mov	r2, r7
   d95dc:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d95e0:	5820      	ldr	r0, [r4, r0]
   d95e2:	9101      	str	r1, [sp, #4]
   d95e4:	455f      	cmp	r7, fp
   d95e6:	bf28      	it	cs
   d95e8:	465a      	movcs	r2, fp
   d95ea:	f002 fd36 	bl	dc05a <strncmp>
                if (cmp == 0) {
   d95ee:	9901      	ldr	r1, [sp, #4]
   d95f0:	2301      	movs	r3, #1
   d95f2:	b978      	cbnz	r0, d9614 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d95f4:	455f      	cmp	r7, fp
   d95f6:	d103      	bne.n	d9600 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d95f8:	9a00      	ldr	r2, [sp, #0]
   d95fa:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d95fc:	4635      	mov	r5, r6
   d95fe:	e7e5      	b.n	d95cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d9600:	bf8c      	ite	hi
   d9602:	2001      	movhi	r0, #1
   d9604:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d9606:	2800      	cmp	r0, #0
   d9608:	d0f8      	beq.n	d95fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d960a:	1bae      	subs	r6, r5, r6
	      ++__first;
   d960c:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d9610:	3e01      	subs	r6, #1
   d9612:	e7f3      	b.n	d95fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d9614:	0fc0      	lsrs	r0, r0, #31
   d9616:	e7f6      	b.n	d9606 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d9618:	eba4 0409 	sub.w	r4, r4, r9
}
   d961c:	4802      	ldr	r0, [pc, #8]	; (d9628 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d961e:	10a4      	asrs	r4, r4, #2
   d9620:	4360      	muls	r0, r4
   d9622:	b003      	add	sp, #12
   d9624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9628:	cccccccd 	.word	0xcccccccd

000d962c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d962c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d962e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d9630:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d9632:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d9634:	b30b      	cbz	r3, d967a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d9636:	b301      	cbz	r1, d967a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d9638:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d963a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d963e:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d9640:	a903      	add	r1, sp, #12
   d9642:	a801      	add	r0, sp, #4
   d9644:	f7ff ff35 	bl	d94b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9648:	4601      	mov	r1, r0
   d964a:	b1b0      	cbz	r0, d967a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d964c:	f10d 030b 	add.w	r3, sp, #11
   d9650:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d9652:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9656:	4620      	mov	r0, r4
   d9658:	f7ff ffaa 	bl	d95b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d965c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d9660:	b15b      	cbz	r3, d967a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d9662:	6824      	ldr	r4, [r4, #0]
   d9664:	2314      	movs	r3, #20
   d9666:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d966a:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d966e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d9672:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d9674:	bfa8      	it	ge
   d9676:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d9678:	e7e2      	b.n	d9640 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d967a:	4630      	mov	r0, r6
   d967c:	b004      	add	sp, #16
   d967e:	bd70      	pop	{r4, r5, r6, pc}

000d9680 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d9680:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d9682:	4c09      	ldr	r4, [pc, #36]	; (d96a8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d9684:	7823      	ldrb	r3, [r4, #0]
   d9686:	f3bf 8f5b 	dmb	ish
   d968a:	07db      	lsls	r3, r3, #31
   d968c:	d409      	bmi.n	d96a2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d968e:	4620      	mov	r0, r4
   d9690:	f7fa fd12 	bl	d40b8 <__cxa_guard_acquire>
   d9694:	b128      	cbz	r0, d96a2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d9696:	4620      	mov	r0, r4
   d9698:	f7fa fd13 	bl	d40c2 <__cxa_guard_release>
   d969c:	4803      	ldr	r0, [pc, #12]	; (d96ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d969e:	f002 fc1d 	bl	dbedc <atexit>
}
   d96a2:	4803      	ldr	r0, [pc, #12]	; (d96b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d96a4:	bd10      	pop	{r4, pc}
   d96a6:	bf00      	nop
   d96a8:	2003e534 	.word	0x2003e534
   d96ac:	000d94ab 	.word	0x000d94ab
   d96b0:	2003e204 	.word	0x2003e204

000d96b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d96b4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d96b6:	4c09      	ldr	r4, [pc, #36]	; (d96dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d96b8:	7823      	ldrb	r3, [r4, #0]
   d96ba:	f3bf 8f5b 	dmb	ish
   d96be:	07db      	lsls	r3, r3, #31
   d96c0:	d409      	bmi.n	d96d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d96c2:	4620      	mov	r0, r4
   d96c4:	f7fa fcf8 	bl	d40b8 <__cxa_guard_acquire>
   d96c8:	b128      	cbz	r0, d96d6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d96ca:	4620      	mov	r0, r4
   d96cc:	f7fa fcf9 	bl	d40c2 <__cxa_guard_release>
   d96d0:	4803      	ldr	r0, [pc, #12]	; (d96e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d96d2:	f002 fc03 	bl	dbedc <atexit>
    return &factory;
}
   d96d6:	4803      	ldr	r0, [pc, #12]	; (d96e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d96d8:	bd10      	pop	{r4, pc}
   d96da:	bf00      	nop
   d96dc:	2003e538 	.word	0x2003e538
   d96e0:	000d950f 	.word	0x000d950f
   d96e4:	2003e208 	.word	0x2003e208

000d96e8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d96e8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d96ea:	2500      	movs	r5, #0
   d96ec:	4604      	mov	r4, r0
   d96ee:	e9c0 5500 	strd	r5, r5, [r0]
   d96f2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d96f6:	6085      	str	r5, [r0, #8]
   d96f8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d96fa:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d96fe:	f7fe facd 	bl	d7c9c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d9702:	f7ff ffbd 	bl	d9680 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d9706:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d9708:	f7ff ffd4 	bl	d96b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d970c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d970e:	6220      	str	r0, [r4, #32]
}
   d9710:	4620      	mov	r0, r4
   d9712:	bd38      	pop	{r3, r4, r5, pc}

000d9714 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d9714:	b510      	push	{r4, lr}
    static LogManager mgr;
   d9716:	4c0a      	ldr	r4, [pc, #40]	; (d9740 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d9718:	7823      	ldrb	r3, [r4, #0]
   d971a:	f3bf 8f5b 	dmb	ish
   d971e:	07db      	lsls	r3, r3, #31
   d9720:	d40c      	bmi.n	d973c <_ZN5spark10LogManager8instanceEv+0x28>
   d9722:	4620      	mov	r0, r4
   d9724:	f7fa fcc8 	bl	d40b8 <__cxa_guard_acquire>
   d9728:	b140      	cbz	r0, d973c <_ZN5spark10LogManager8instanceEv+0x28>
   d972a:	4806      	ldr	r0, [pc, #24]	; (d9744 <_ZN5spark10LogManager8instanceEv+0x30>)
   d972c:	f7ff ffdc 	bl	d96e8 <_ZN5spark10LogManagerC1Ev>
   d9730:	4620      	mov	r0, r4
   d9732:	f7fa fcc6 	bl	d40c2 <__cxa_guard_release>
   d9736:	4804      	ldr	r0, [pc, #16]	; (d9748 <_ZN5spark10LogManager8instanceEv+0x34>)
   d9738:	f002 fbd0 	bl	dbedc <atexit>
    return &mgr;
}
   d973c:	4801      	ldr	r0, [pc, #4]	; (d9744 <_ZN5spark10LogManager8instanceEv+0x30>)
   d973e:	bd10      	pop	{r4, pc}
   d9740:	2003e530 	.word	0x2003e530
   d9744:	2003e540 	.word	0x2003e540
   d9748:	000d9bf5 	.word	0x000d9bf5

000d974c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d974c:	4a02      	ldr	r2, [pc, #8]	; (d9758 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d974e:	4903      	ldr	r1, [pc, #12]	; (d975c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d9750:	4803      	ldr	r0, [pc, #12]	; (d9760 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d9752:	2300      	movs	r3, #0
   d9754:	f7fe bcb2 	b.w	d80bc <log_set_callbacks>
   d9758:	000d9a7d 	.word	0x000d9a7d
   d975c:	000d9a09 	.word	0x000d9a09
   d9760:	000d9989 	.word	0x000d9989

000d9764 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d9764:	2300      	movs	r3, #0
   d9766:	461a      	mov	r2, r3
   d9768:	4619      	mov	r1, r3
   d976a:	4618      	mov	r0, r3
   d976c:	f7fe bca6 	b.w	d80bc <log_set_callbacks>

000d9770 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d9770:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d9772:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9774:	f851 3b04 	ldr.w	r3, [r1], #4
   d9778:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d977a:	4604      	mov	r4, r0
   d977c:	a801      	add	r0, sp, #4
   d977e:	f7fe fe94 	bl	d84aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d9782:	466a      	mov	r2, sp
   d9784:	4629      	mov	r1, r5
   d9786:	4620      	mov	r0, r4
   d9788:	f7ff fd1f 	bl	d91ca <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d978c:	a801      	add	r0, sp, #4
   d978e:	f7fe fe93 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9792:	4620      	mov	r0, r4
   d9794:	b003      	add	sp, #12
   d9796:	bd30      	pop	{r4, r5, pc}

000d9798 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d9798:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d979a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d979c:	f851 3b04 	ldr.w	r3, [r1], #4
   d97a0:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d97a2:	4604      	mov	r4, r0
   d97a4:	a801      	add	r0, sp, #4
   d97a6:	f7fe fe80 	bl	d84aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d97aa:	466a      	mov	r2, sp
   d97ac:	4629      	mov	r1, r5
   d97ae:	4620      	mov	r0, r4
   d97b0:	f7ff fd86 	bl	d92c0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d97b4:	a801      	add	r0, sp, #4
   d97b6:	f7fe fe7f 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d97ba:	4620      	mov	r0, r4
   d97bc:	b003      	add	sp, #12
   d97be:	bd30      	pop	{r4, r5, pc}

000d97c0 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d97c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d97c2:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d97c4:	f851 3b04 	ldr.w	r3, [r1], #4
   d97c8:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d97ca:	4604      	mov	r4, r0
   d97cc:	a801      	add	r0, sp, #4
   d97ce:	f7fe fe6c 	bl	d84aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d97d2:	466a      	mov	r2, sp
   d97d4:	4629      	mov	r1, r5
   d97d6:	4620      	mov	r0, r4
   d97d8:	f7ff fd4e 	bl	d9278 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d97dc:	a801      	add	r0, sp, #4
   d97de:	f7fe fe6b 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d97e2:	4620      	mov	r0, r4
   d97e4:	b003      	add	sp, #12
   d97e6:	bd30      	pop	{r4, r5, pc}

000d97e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d97e8:	b570      	push	{r4, r5, r6, lr}
   d97ea:	b08a      	sub	sp, #40	; 0x28
   d97ec:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d97ee:	4601      	mov	r1, r0
   d97f0:	a804      	add	r0, sp, #16
   d97f2:	f7ff ffd1 	bl	d9798 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d97f6:	4e14      	ldr	r6, [pc, #80]	; (d9848 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d97f8:	a804      	add	r0, sp, #16
   d97fa:	f7ff fd79 	bl	d92f0 <_ZN5spark18JSONObjectIterator4nextEv>
   d97fe:	b1e8      	cbz	r0, d983c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d9800:	a904      	add	r1, sp, #16
   d9802:	4668      	mov	r0, sp
   d9804:	f7ff ffdc 	bl	d97c0 <_ZNK5spark18JSONObjectIterator4nameEv>
   d9808:	9802      	ldr	r0, [sp, #8]
   d980a:	4631      	mov	r1, r6
   d980c:	f7ff fe78 	bl	d9500 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d9810:	4604      	mov	r4, r0
   d9812:	b110      	cbz	r0, d981a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d9814:	1e2c      	subs	r4, r5, #0
   d9816:	bf18      	it	ne
   d9818:	2401      	movne	r4, #1
   d981a:	a801      	add	r0, sp, #4
   d981c:	f7fe fe4c 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9820:	2c00      	cmp	r4, #0
   d9822:	d0e9      	beq.n	d97f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d9824:	a904      	add	r1, sp, #16
   d9826:	4668      	mov	r0, sp
   d9828:	f7ff ffa2 	bl	d9770 <_ZNK5spark18JSONObjectIterator5valueEv>
   d982c:	4668      	mov	r0, sp
   d982e:	f7ff fd02 	bl	d9236 <_ZNK5spark9JSONValue5toIntEv>
   d9832:	6028      	str	r0, [r5, #0]
   d9834:	a801      	add	r0, sp, #4
   d9836:	f7fe fe3f 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d983a:	e7dd      	b.n	d97f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d983c:	a805      	add	r0, sp, #20
   d983e:	f7fe fe3b 	bl	d84b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d9842:	b00a      	add	sp, #40	; 0x28
   d9844:	bd70      	pop	{r4, r5, r6, pc}
   d9846:	bf00      	nop
   d9848:	000dce02 	.word	0x000dce02

000d984c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d984c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d984e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d9850:	4620      	mov	r0, r4
   d9852:	4912      	ldr	r1, [pc, #72]	; (d989c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d9854:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d9856:	f002 fbc8 	bl	dbfea <strcmp>
   d985a:	b948      	cbnz	r0, d9870 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d985c:	f001 fc8e 	bl	db17c <_Z16_fetch_usbserialv>
   d9860:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d9864:	f001 fc7a 	bl	db15c <_ZN9USBSerial5beginEl>
        return &Serial;
   d9868:	f001 fc88 	bl	db17c <_Z16_fetch_usbserialv>
}
   d986c:	b003      	add	sp, #12
   d986e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d9870:	490b      	ldr	r1, [pc, #44]	; (d98a0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d9872:	4620      	mov	r0, r4
   d9874:	f002 fbb9 	bl	dbfea <strcmp>
   d9878:	b970      	cbnz	r0, d9898 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d987a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d987e:	a901      	add	r1, sp, #4
   d9880:	4628      	mov	r0, r5
        int baud = 9600;
   d9882:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d9884:	f7ff ffb0 	bl	d97e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d9888:	f001 fbf0 	bl	db06c <_Z22__fetch_global_Serial1v>
   d988c:	9901      	ldr	r1, [sp, #4]
   d988e:	f001 fbe7 	bl	db060 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d9892:	f001 fbeb 	bl	db06c <_Z22__fetch_global_Serial1v>
   d9896:	e7e9      	b.n	d986c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d9898:	2000      	movs	r0, #0
   d989a:	e7e7      	b.n	d986c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d989c:	000dce07 	.word	0x000dce07
   d98a0:	000dce0e 	.word	0x000dce0e

000d98a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d98a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d98a6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d98aa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d98ac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d98ae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d98b2:	42ae      	cmp	r6, r5
   d98b4:	d005      	beq.n	d98c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d98b6:	f105 0008 	add.w	r0, r5, #8
   d98ba:	f7ff fff3 	bl	d98a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d98be:	3514      	adds	r5, #20
   d98c0:	e7f7      	b.n	d98b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d98c2:	6820      	ldr	r0, [r4, #0]
   d98c4:	f7fe fd5e 	bl	d8384 <free>
}
   d98c8:	4620      	mov	r0, r4
   d98ca:	bd70      	pop	{r4, r5, r6, pc}

000d98cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d98cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d98ce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d98d2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d98d4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d98d8:	42ae      	cmp	r6, r5
   d98da:	d004      	beq.n	d98e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d98dc:	4628      	mov	r0, r5
   d98de:	f000 ff85 	bl	da7ec <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d98e2:	3510      	adds	r5, #16
   d98e4:	e7f8      	b.n	d98d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d98e6:	6820      	ldr	r0, [r4, #0]
   d98e8:	f7fe fd4c 	bl	d8384 <free>
}
   d98ec:	4620      	mov	r0, r4
   d98ee:	bd70      	pop	{r4, r5, r6, pc}

000d98f0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d98f0:	b510      	push	{r4, lr}
   d98f2:	4604      	mov	r4, r0
   d98f4:	300c      	adds	r0, #12
   d98f6:	f7ff ffd5 	bl	d98a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d98fa:	4620      	mov	r0, r4
   d98fc:	f7ff ffe6 	bl	d98cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9900:	4620      	mov	r0, r4
   d9902:	bd10      	pop	{r4, pc}

000d9904 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d9904:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d9906:	4b04      	ldr	r3, [pc, #16]	; (d9918 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d9908:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d990a:	f840 3b04 	str.w	r3, [r0], #4
   d990e:	f7ff ffef 	bl	d98f0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d9912:	4620      	mov	r0, r4
   d9914:	bd10      	pop	{r4, pc}
   d9916:	bf00      	nop
   d9918:	000dc880 	.word	0x000dc880

000d991c <_ZN5spark16StreamLogHandlerD0Ev>:
   d991c:	b510      	push	{r4, lr}
   d991e:	4604      	mov	r4, r0
   d9920:	f7ff fff0 	bl	d9904 <_ZN5spark16StreamLogHandlerD1Ev>
   d9924:	4620      	mov	r0, r4
   d9926:	2124      	movs	r1, #36	; 0x24
   d9928:	f001 fe0e 	bl	db548 <_ZdlPvj>
   d992c:	4620      	mov	r0, r4
   d992e:	bd10      	pop	{r4, pc}

000d9930 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d9930:	b510      	push	{r4, lr}
   d9932:	4b03      	ldr	r3, [pc, #12]	; (d9940 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d9934:	6003      	str	r3, [r0, #0]
   d9936:	4604      	mov	r4, r0
   d9938:	f7ff ffe4 	bl	d9904 <_ZN5spark16StreamLogHandlerD1Ev>
   d993c:	4620      	mov	r0, r4
   d993e:	bd10      	pop	{r4, pc}
   d9940:	000dcea8 	.word	0x000dcea8

000d9944 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d9944:	b510      	push	{r4, lr}
   d9946:	4604      	mov	r4, r0
   d9948:	f7ff fff2 	bl	d9930 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d994c:	4620      	mov	r0, r4
   d994e:	2124      	movs	r1, #36	; 0x24
   d9950:	f001 fdfa 	bl	db548 <_ZdlPvj>
   d9954:	4620      	mov	r0, r4
   d9956:	bd10      	pop	{r4, pc}

000d9958 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d9958:	2200      	movs	r2, #0
   d995a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d995e:	b510      	push	{r4, lr}
        capacity_(0) {
   d9960:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d9962:	680c      	ldr	r4, [r1, #0]
   d9964:	6004      	str	r4, [r0, #0]
   d9966:	684c      	ldr	r4, [r1, #4]
   d9968:	6044      	str	r4, [r0, #4]
   d996a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d996c:	600a      	str	r2, [r1, #0]
   d996e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9970:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9972:	608a      	str	r2, [r1, #8]
}
   d9974:	bd10      	pop	{r4, pc}

000d9976 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d9976:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d9978:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d997a:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d997c:	6818      	ldr	r0, [r3, #0]
   d997e:	f7fe f9a5 	bl	d7ccc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d9982:	4620      	mov	r0, r4
   d9984:	bd10      	pop	{r4, pc}
	...

000d9988 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d998c:	b087      	sub	sp, #28
   d998e:	4680      	mov	r8, r0
   d9990:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d9992:	4b1c      	ldr	r3, [pc, #112]	; (d9a04 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d9994:	685b      	ldr	r3, [r3, #4]
   d9996:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d999a:	4689      	mov	r9, r1
   d999c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d999e:	b96b      	cbnz	r3, d99bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d99a0:	f7ff feb8 	bl	d9714 <_ZN5spark10LogManager8instanceEv>
   d99a4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d99a6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d99aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d99ac:	9305      	str	r3, [sp, #20]
   d99ae:	f7fe f985 	bl	d7cbc <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d99b2:	7b23      	ldrb	r3, [r4, #12]
   d99b4:	b12b      	cbz	r3, d99c2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d99b6:	a805      	add	r0, sp, #20
   d99b8:	f7ff ffdd 	bl	d9976 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d99bc:	b007      	add	sp, #28
   d99be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d99c2:	2301      	movs	r3, #1
   d99c4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d99c6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d99ca:	fa5f f989 	uxtb.w	r9, r9
   d99ce:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d99d2:	45aa      	cmp	sl, r5
   d99d4:	d012      	beq.n	d99fc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d99d6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d99da:	4631      	mov	r1, r6
   d99dc:	1d38      	adds	r0, r7, #4
   d99de:	f7ff fe25 	bl	d962c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d99e2:	4581      	cmp	r9, r0
   d99e4:	d3f5      	bcc.n	d99d2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d99e6:	683b      	ldr	r3, [r7, #0]
   d99e8:	9a03      	ldr	r2, [sp, #12]
   d99ea:	9200      	str	r2, [sp, #0]
   d99ec:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d99f0:	464a      	mov	r2, r9
   d99f2:	4633      	mov	r3, r6
   d99f4:	4641      	mov	r1, r8
   d99f6:	4638      	mov	r0, r7
   d99f8:	47d8      	blx	fp
   d99fa:	e7ea      	b.n	d99d2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d99fc:	2300      	movs	r3, #0
   d99fe:	7323      	strb	r3, [r4, #12]
   d9a00:	e7d9      	b.n	d99b6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d9a02:	bf00      	nop
   d9a04:	e000ed00 	.word	0xe000ed00

000d9a08 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9a0c:	469b      	mov	fp, r3
   d9a0e:	4b1a      	ldr	r3, [pc, #104]	; (d9a78 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d9a10:	685b      	ldr	r3, [r3, #4]
   d9a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9a16:	4680      	mov	r8, r0
   d9a18:	4689      	mov	r9, r1
   d9a1a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d9a1c:	b96b      	cbnz	r3, d9a3a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d9a1e:	f7ff fe79 	bl	d9714 <_ZN5spark10LogManager8instanceEv>
   d9a22:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9a24:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d9a28:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9a2a:	9301      	str	r3, [sp, #4]
   d9a2c:	f7fe f946 	bl	d7cbc <os_mutex_recursive_lock>
        if (that->isActive()) {
   d9a30:	7b23      	ldrb	r3, [r4, #12]
   d9a32:	b12b      	cbz	r3, d9a40 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d9a34:	a801      	add	r0, sp, #4
   d9a36:	f7ff ff9e 	bl	d9976 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9a3a:	b003      	add	sp, #12
   d9a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d9a40:	2301      	movs	r3, #1
   d9a42:	7323      	strb	r3, [r4, #12]
   d9a44:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d9a48:	b2f6      	uxtb	r6, r6
   d9a4a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9a4e:	4555      	cmp	r5, sl
   d9a50:	d00e      	beq.n	d9a70 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d9a52:	f855 7b04 	ldr.w	r7, [r5], #4
   d9a56:	4659      	mov	r1, fp
   d9a58:	1d38      	adds	r0, r7, #4
   d9a5a:	f7ff fde7 	bl	d962c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d9a5e:	4286      	cmp	r6, r0
   d9a60:	d3f5      	bcc.n	d9a4e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d9a62:	683b      	ldr	r3, [r7, #0]
   d9a64:	464a      	mov	r2, r9
   d9a66:	68db      	ldr	r3, [r3, #12]
   d9a68:	4641      	mov	r1, r8
   d9a6a:	4638      	mov	r0, r7
   d9a6c:	4798      	blx	r3
   d9a6e:	e7ee      	b.n	d9a4e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d9a70:	2300      	movs	r3, #0
   d9a72:	7323      	strb	r3, [r4, #12]
   d9a74:	e7de      	b.n	d9a34 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d9a76:	bf00      	nop
   d9a78:	e000ed00 	.word	0xe000ed00

000d9a7c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d9a7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d9a80:	4b16      	ldr	r3, [pc, #88]	; (d9adc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d9a82:	685b      	ldr	r3, [r3, #4]
   d9a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9a88:	4605      	mov	r5, r0
   d9a8a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d9a8c:	bb1b      	cbnz	r3, d9ad6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d9a8e:	f7ff fe41 	bl	d9714 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d9a92:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d9a96:	4604      	mov	r4, r0
   d9a98:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9a9a:	9301      	str	r3, [sp, #4]
   d9a9c:	f7fe f90e 	bl	d7cbc <os_mutex_recursive_lock>
   d9aa0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d9aa4:	2446      	movs	r4, #70	; 0x46
   d9aa6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9aaa:	45b0      	cmp	r8, r6
   d9aac:	d109      	bne.n	d9ac2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d9aae:	a801      	add	r0, sp, #4
   d9ab0:	f7ff ff61 	bl	d9976 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d9ab4:	42a5      	cmp	r5, r4
   d9ab6:	bfb4      	ite	lt
   d9ab8:	2000      	movlt	r0, #0
   d9aba:	2001      	movge	r0, #1
}
   d9abc:	b002      	add	sp, #8
   d9abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d9ac2:	f856 0b04 	ldr.w	r0, [r6], #4
   d9ac6:	4639      	mov	r1, r7
   d9ac8:	3004      	adds	r0, #4
   d9aca:	f7ff fdaf 	bl	d962c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d9ace:	4284      	cmp	r4, r0
   d9ad0:	bfa8      	it	ge
   d9ad2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d9ad4:	e7e9      	b.n	d9aaa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d9ad6:	2000      	movs	r0, #0
   d9ad8:	e7f0      	b.n	d9abc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9ada:	bf00      	nop
   d9adc:	e000ed00 	.word	0xe000ed00

000d9ae0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9ae0:	b570      	push	{r4, r5, r6, lr}
   d9ae2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9ae4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9ae8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9aea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d9aee:	4282      	cmp	r2, r0
   d9af0:	d007      	beq.n	d9b02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d9af2:	4601      	mov	r1, r0
            if (*p == value) {
   d9af4:	681d      	ldr	r5, [r3, #0]
   d9af6:	f851 6b04 	ldr.w	r6, [r1], #4
   d9afa:	42ae      	cmp	r6, r5
   d9afc:	d003      	beq.n	d9b06 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d9afe:	4608      	mov	r0, r1
   d9b00:	e7f5      	b.n	d9aee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d9b02:	2000      	movs	r0, #0
}
   d9b04:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9b06:	1a52      	subs	r2, r2, r1
   d9b08:	f002 fa12 	bl	dbf30 <memmove>
    --size_;
   d9b0c:	6863      	ldr	r3, [r4, #4]
   d9b0e:	3b01      	subs	r3, #1
   d9b10:	6063      	str	r3, [r4, #4]
    return true;
   d9b12:	2001      	movs	r0, #1
   d9b14:	e7f6      	b.n	d9b04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d9b16 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9b16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9b18:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9b1c:	4604      	mov	r4, r0
   d9b1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9b20:	9101      	str	r1, [sp, #4]
   d9b22:	9303      	str	r3, [sp, #12]
   d9b24:	f7fe f8ca 	bl	d7cbc <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9b28:	a901      	add	r1, sp, #4
   d9b2a:	4620      	mov	r0, r4
   d9b2c:	f7ff ffd8 	bl	d9ae0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d9b30:	b118      	cbz	r0, d9b3a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d9b32:	6863      	ldr	r3, [r4, #4]
   d9b34:	b90b      	cbnz	r3, d9b3a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d9b36:	f7ff fe15 	bl	d9764 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9b3a:	a803      	add	r0, sp, #12
   d9b3c:	f7ff ff1b 	bl	d9976 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9b40:	b004      	add	sp, #16
   d9b42:	bd10      	pop	{r4, pc}

000d9b44 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d9b44:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d9b46:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d9b4a:	2318      	movs	r3, #24
   d9b4c:	4604      	mov	r4, r0
   d9b4e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d9b52:	42ae      	cmp	r6, r5
   d9b54:	d015      	beq.n	d9b82 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9b56:	f105 0110 	add.w	r1, r5, #16
   d9b5a:	4620      	mov	r0, r4
   d9b5c:	f7ff ffc0 	bl	d9ae0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d9b60:	6863      	ldr	r3, [r4, #4]
   d9b62:	b90b      	cbnz	r3, d9b68 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d9b64:	f7ff fdfe 	bl	d9764 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d9b68:	69e0      	ldr	r0, [r4, #28]
   d9b6a:	6929      	ldr	r1, [r5, #16]
   d9b6c:	6803      	ldr	r3, [r0, #0]
   d9b6e:	68db      	ldr	r3, [r3, #12]
   d9b70:	4798      	blx	r3
        if (h.stream) {
   d9b72:	6969      	ldr	r1, [r5, #20]
   d9b74:	b119      	cbz	r1, d9b7e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d9b76:	6a20      	ldr	r0, [r4, #32]
   d9b78:	6803      	ldr	r3, [r0, #0]
   d9b7a:	68db      	ldr	r3, [r3, #12]
   d9b7c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d9b7e:	3518      	adds	r5, #24
   d9b80:	e7e7      	b.n	d9b52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d9b82:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9b86:	2618      	movs	r6, #24
   d9b88:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9b8c:	42ae      	cmp	r6, r5
   d9b8e:	d004      	beq.n	d9b9a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9b90:	4628      	mov	r0, r5
   d9b92:	f000 fe2b 	bl	da7ec <_ZN6StringD1Ev>
   d9b96:	3518      	adds	r5, #24
   d9b98:	e7f8      	b.n	d9b8c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d9b9a:	2300      	movs	r3, #0
   d9b9c:	6163      	str	r3, [r4, #20]
}
   d9b9e:	bd70      	pop	{r4, r5, r6, pc}

000d9ba0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9ba2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d9ba4:	f7ff fdde 	bl	d9764 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9ba8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9bac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9bae:	9301      	str	r3, [sp, #4]
   d9bb0:	f7fe f884 	bl	d7cbc <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d9bb4:	4620      	mov	r0, r4
   d9bb6:	f7ff ffc5 	bl	d9b44 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d9bba:	a801      	add	r0, sp, #4
   d9bbc:	f7ff fedb 	bl	d9976 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9bc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9bc2:	b108      	cbz	r0, d9bc8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9bc4:	f7fe f872 	bl	d7cac <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9bc8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9bcc:	2618      	movs	r6, #24
   d9bce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9bd2:	42ae      	cmp	r6, r5
   d9bd4:	d004      	beq.n	d9be0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d9bd6:	4628      	mov	r0, r5
   d9bd8:	f000 fe08 	bl	da7ec <_ZN6StringD1Ev>
   d9bdc:	3518      	adds	r5, #24
   d9bde:	e7f8      	b.n	d9bd2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9be0:	6920      	ldr	r0, [r4, #16]
   d9be2:	f7fe fbcf 	bl	d8384 <free>
   d9be6:	6820      	ldr	r0, [r4, #0]
   d9be8:	f7fe fbcc 	bl	d8384 <free>
}
   d9bec:	4620      	mov	r0, r4
   d9bee:	b002      	add	sp, #8
   d9bf0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9bf4 <__tcf_2>:
    static LogManager mgr;
   d9bf4:	4801      	ldr	r0, [pc, #4]	; (d9bfc <__tcf_2+0x8>)
   d9bf6:	f7ff bfd3 	b.w	d9ba0 <_ZN5spark10LogManagerD1Ev>
   d9bfa:	bf00      	nop
   d9bfc:	2003e540 	.word	0x2003e540

000d9c00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9c00:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9c04:	4606      	mov	r6, r0
   d9c06:	460c      	mov	r4, r1
   d9c08:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9c0a:	d927      	bls.n	d9c5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9c0c:	4290      	cmp	r0, r2
   d9c0e:	d226      	bcs.n	d9c5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9c10:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9c14:	1a6c      	subs	r4, r5, r1
   d9c16:	f1a1 0714 	sub.w	r7, r1, #20
   d9c1a:	4404      	add	r4, r0
        capacity_(0) {
   d9c1c:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d9c1e:	42af      	cmp	r7, r5
   d9c20:	d03d      	beq.n	d9c9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d9c22:	b1a4      	cbz	r4, d9c4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9c24:	682b      	ldr	r3, [r5, #0]
   d9c26:	6023      	str	r3, [r4, #0]
   d9c28:	88ab      	ldrh	r3, [r5, #4]
   d9c2a:	80a3      	strh	r3, [r4, #4]
   d9c2c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d9c30:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d9c32:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9c36:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9c38:	68ab      	ldr	r3, [r5, #8]
   d9c3a:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c3c:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9c3e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9c40:	68ea      	ldr	r2, [r5, #12]
   d9c42:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c44:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9c46:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9c48:	692a      	ldr	r2, [r5, #16]
   d9c4a:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c4c:	612b      	str	r3, [r5, #16]
   d9c4e:	f105 0008 	add.w	r0, r5, #8
   d9c52:	f7ff fe27 	bl	d98a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d9c56:	3d14      	subs	r5, #20
   d9c58:	3c14      	subs	r4, #20
   d9c5a:	e7e0      	b.n	d9c1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d9c5c:	d01f      	beq.n	d9c9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d9c5e:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d9c60:	42ac      	cmp	r4, r5
   d9c62:	d01c      	beq.n	d9c9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d9c64:	b1a6      	cbz	r6, d9c90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d9c66:	6823      	ldr	r3, [r4, #0]
   d9c68:	6033      	str	r3, [r6, #0]
   d9c6a:	88a3      	ldrh	r3, [r4, #4]
   d9c6c:	80b3      	strh	r3, [r6, #4]
   d9c6e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d9c72:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d9c74:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d9c78:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9c7a:	68a3      	ldr	r3, [r4, #8]
   d9c7c:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c7e:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9c80:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9c82:	68e2      	ldr	r2, [r4, #12]
   d9c84:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c86:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9c88:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9c8a:	6922      	ldr	r2, [r4, #16]
   d9c8c:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c8e:	6123      	str	r3, [r4, #16]
   d9c90:	f104 0008 	add.w	r0, r4, #8
   d9c94:	f7ff fe06 	bl	d98a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d9c98:	3414      	adds	r4, #20
   d9c9a:	3614      	adds	r6, #20
   d9c9c:	e7e0      	b.n	d9c60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d9c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9ca0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9ca2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d9ca6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9ca8:	4604      	mov	r4, r0
   d9caa:	460e      	mov	r6, r1
   d9cac:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9cae:	db0d      	blt.n	d9ccc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9cb0:	3501      	adds	r5, #1
        if (n > 0) {
   d9cb2:	2d00      	cmp	r5, #0
   d9cb4:	6800      	ldr	r0, [r0, #0]
   d9cb6:	dd04      	ble.n	d9cc2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9cb8:	00a9      	lsls	r1, r5, #2
   d9cba:	f7fe fb6b 	bl	d8394 <realloc>
            if (!d) {
   d9cbe:	b918      	cbnz	r0, d9cc8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d9cc2:	f7fe fb5f 	bl	d8384 <free>
        T* d = nullptr;
   d9cc6:	2000      	movs	r0, #0
        data_ = d;
   d9cc8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9cca:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9ccc:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9cce:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9cd0:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d9cd4:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9cd6:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9cda:	1d08      	adds	r0, r1, #4
   d9cdc:	f002 f928 	bl	dbf30 <memmove>
    new(p) T(std::move(value));
   d9ce0:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9ce4:	6863      	ldr	r3, [r4, #4]
   d9ce6:	3301      	adds	r3, #1
   d9ce8:	6063      	str	r3, [r4, #4]
    return true;
   d9cea:	2001      	movs	r0, #1
   d9cec:	e7e8      	b.n	d9cc0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d9cee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9cee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9cf0:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9cf4:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9cf6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9cf8:	9301      	str	r3, [sp, #4]
   d9cfa:	460d      	mov	r5, r1
   d9cfc:	f7fd ffde 	bl	d7cbc <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9d00:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9d04:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9d08:	4283      	cmp	r3, r0
   d9d0a:	461a      	mov	r2, r3
   d9d0c:	d00b      	beq.n	d9d26 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d9d0e:	6812      	ldr	r2, [r2, #0]
   d9d10:	42aa      	cmp	r2, r5
   d9d12:	f103 0304 	add.w	r3, r3, #4
   d9d16:	d1f7      	bne.n	d9d08 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9d18:	a801      	add	r0, sp, #4
   d9d1a:	f7ff fe2c 	bl	d9976 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d9d1e:	2500      	movs	r5, #0
}
   d9d20:	4628      	mov	r0, r5
   d9d22:	b003      	add	sp, #12
   d9d24:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d9d26:	462a      	mov	r2, r5
   d9d28:	4620      	mov	r0, r4
   d9d2a:	f7ff ffb9 	bl	d9ca0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d9d2e:	4605      	mov	r5, r0
   d9d30:	2800      	cmp	r0, #0
   d9d32:	d0f1      	beq.n	d9d18 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d9d34:	6863      	ldr	r3, [r4, #4]
   d9d36:	2b01      	cmp	r3, #1
   d9d38:	d101      	bne.n	d9d3e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d9d3a:	f7ff fd07 	bl	d974c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9d3e:	a801      	add	r0, sp, #4
   d9d40:	f7ff fe19 	bl	d9976 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d9d44:	e7ec      	b.n	d9d20 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d9d46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d9d46:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9d4a:	4604      	mov	r4, r0
   d9d4c:	460d      	mov	r5, r1
   d9d4e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d9d50:	d914      	bls.n	d9d7c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d9d52:	4290      	cmp	r0, r2
   d9d54:	d213      	bcs.n	d9d7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d9d56:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d9d5a:	1a75      	subs	r5, r6, r1
   d9d5c:	f1a1 0710 	sub.w	r7, r1, #16
   d9d60:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d9d62:	42b7      	cmp	r7, r6
   d9d64:	d018      	beq.n	d9d98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d9d66:	b11c      	cbz	r4, d9d70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d9d68:	4631      	mov	r1, r6
   d9d6a:	4620      	mov	r0, r4
   d9d6c:	f000 fdba 	bl	da8e4 <_ZN6StringC1EOS_>
                end->~T();
   d9d70:	4630      	mov	r0, r6
   d9d72:	f000 fd3b 	bl	da7ec <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d9d76:	3e10      	subs	r6, #16
   d9d78:	3c10      	subs	r4, #16
   d9d7a:	e7f2      	b.n	d9d62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d9d7c:	d00c      	beq.n	d9d98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d9d7e:	42b5      	cmp	r5, r6
   d9d80:	d00a      	beq.n	d9d98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d9d82:	b11c      	cbz	r4, d9d8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d9d84:	4629      	mov	r1, r5
   d9d86:	4620      	mov	r0, r4
   d9d88:	f000 fdac 	bl	da8e4 <_ZN6StringC1EOS_>
                p->~T();
   d9d8c:	4628      	mov	r0, r5
   d9d8e:	f000 fd2d 	bl	da7ec <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d9d92:	3510      	adds	r5, #16
   d9d94:	3410      	adds	r4, #16
   d9d96:	e7f2      	b.n	d9d7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d9d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9d9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d9d9a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d9d9c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d9d9e:	4605      	mov	r5, r0
        if (n > 0) {
   d9da0:	dd11      	ble.n	d9dc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d9da2:	0130      	lsls	r0, r6, #4
   d9da4:	f7fe fae6 	bl	d8374 <malloc>
            if (!d) {
   d9da8:	4604      	mov	r4, r0
   d9daa:	b158      	cbz	r0, d9dc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d9dac:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9db0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d9db4:	f7ff ffc7 	bl	d9d46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d9db8:	6828      	ldr	r0, [r5, #0]
   d9dba:	f7fe fae3 	bl	d8384 <free>
        data_ = d;
   d9dbe:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9dc0:	60ae      	str	r6, [r5, #8]
        return true;
   d9dc2:	2001      	movs	r0, #1
    }
   d9dc4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d9dc6:	2400      	movs	r4, #0
   d9dc8:	e7f6      	b.n	d9db8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9dca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9dce:	4691      	mov	r9, r2
   d9dd0:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d9dd2:	2300      	movs	r3, #0
   d9dd4:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d9dd6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9dda:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9ddc:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d9dde:	4299      	cmp	r1, r3
        capacity_(0) {
   d9de0:	e9c0 3300 	strd	r3, r3, [r0]
   d9de4:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9de8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9dec:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9df0:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9df2:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d9df4:	dc23      	bgt.n	d9e3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d9df6:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9dfa:	2314      	movs	r3, #20
   d9dfc:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d9e00:	42af      	cmp	r7, r5
   d9e02:	d03b      	beq.n	d9e7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9e04:	4629      	mov	r1, r5
   d9e06:	a80d      	add	r0, sp, #52	; 0x34
   d9e08:	f000 fd6c 	bl	da8e4 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9e0c:	a90d      	add	r1, sp, #52	; 0x34
   d9e0e:	a811      	add	r0, sp, #68	; 0x44
   d9e10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d9e12:	f000 fd67 	bl	da8e4 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9e16:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9e1a:	4299      	cmp	r1, r3
   d9e1c:	da1b      	bge.n	d9e56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d9e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d9e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d9e22:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9e26:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d9e2a:	4631      	mov	r1, r6
   d9e2c:	f106 0010 	add.w	r0, r6, #16
   d9e30:	f7ff ff89 	bl	d9d46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9e34:	b9ee      	cbnz	r6, d9e72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d9e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9e38:	3301      	adds	r3, #1
   d9e3a:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d9e3c:	e011      	b.n	d9e62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d9e3e:	a80a      	add	r0, sp, #40	; 0x28
   d9e40:	f7ff ffab 	bl	d9d9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9e44:	2800      	cmp	r0, #0
   d9e46:	d1d6      	bne.n	d9df6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d9e48:	a80a      	add	r0, sp, #40	; 0x28
   d9e4a:	f7ff fd3f 	bl	d98cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d9e4e:	4620      	mov	r0, r4
   d9e50:	b017      	add	sp, #92	; 0x5c
   d9e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9e56:	3101      	adds	r1, #1
   d9e58:	a80a      	add	r0, sp, #40	; 0x28
   d9e5a:	f7ff ff9e 	bl	d9d9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9e5e:	2800      	cmp	r0, #0
   d9e60:	d1dd      	bne.n	d9e1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d9e62:	a811      	add	r0, sp, #68	; 0x44
   d9e64:	f000 fcc2 	bl	da7ec <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d9e68:	a80d      	add	r0, sp, #52	; 0x34
   d9e6a:	f000 fcbf 	bl	da7ec <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d9e6e:	3514      	adds	r5, #20
   d9e70:	e7c6      	b.n	d9e00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d9e72:	a911      	add	r1, sp, #68	; 0x44
   d9e74:	4630      	mov	r0, r6
   d9e76:	f000 fd35 	bl	da8e4 <_ZN6StringC1EOS_>
   d9e7a:	e7dc      	b.n	d9e36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d9e7c:	2600      	movs	r6, #0
   d9e7e:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d9e82:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d9e84:	4637      	mov	r7, r6
   d9e86:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d9e8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9e8e:	429e      	cmp	r6, r3
   d9e90:	f280 8097 	bge.w	d9fc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d9e94:	0133      	lsls	r3, r6, #4
   d9e96:	58d3      	ldr	r3, [r2, r3]
   d9e98:	9308      	str	r3, [sp, #32]
        if (!category) {
   d9e9a:	b90b      	cbnz	r3, d9ea0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d9e9c:	3601      	adds	r6, #1
   d9e9e:	e7f4      	b.n	d9e8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d9ea0:	fb0a f306 	mul.w	r3, sl, r6
   d9ea4:	9709      	str	r7, [sp, #36]	; 0x24
   d9ea6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d9ea8:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d9eaa:	a909      	add	r1, sp, #36	; 0x24
   d9eac:	a808      	add	r0, sp, #32
   d9eae:	f7ff fb00 	bl	d94b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9eb2:	4683      	mov	fp, r0
   d9eb4:	2800      	cmp	r0, #0
   d9eb6:	d0f1      	beq.n	d9e9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9eb8:	4601      	mov	r1, r0
   d9eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d9ebc:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9ec0:	f10d 031f 	add.w	r3, sp, #31
   d9ec4:	4628      	mov	r0, r5
   d9ec6:	f7ff fb73 	bl	d95b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9eca:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9ece:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9ed0:	f1b8 0f00 	cmp.w	r8, #0
   d9ed4:	d166      	bne.n	d9fa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d9ed6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d9eda:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d9ede:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d9ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9ee6:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d9eea:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d9eee:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9ef2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d9ef6:	4293      	cmp	r3, r2
   d9ef8:	db1a      	blt.n	d9f30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d9efa:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d9efe:	f1bb 0f00 	cmp.w	fp, #0
   d9f02:	dd4a      	ble.n	d9f9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d9f04:	fb0a f00b 	mul.w	r0, sl, fp
   d9f08:	f7fe fa34 	bl	d8374 <malloc>
            if (!d) {
   d9f0c:	9004      	str	r0, [sp, #16]
   d9f0e:	2800      	cmp	r0, #0
   d9f10:	d045      	beq.n	d9f9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d9f12:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9f16:	fb0a 1202 	mla	r2, sl, r2, r1
   d9f1a:	f7ff fe71 	bl	d9c00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d9f1e:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d9f20:	6828      	ldr	r0, [r5, #0]
   d9f22:	9304      	str	r3, [sp, #16]
   d9f24:	f7fe fa2e 	bl	d8384 <free>
        data_ = d;
   d9f28:	9b04      	ldr	r3, [sp, #16]
   d9f2a:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d9f2c:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d9f30:	9b01      	ldr	r3, [sp, #4]
   d9f32:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d9f36:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d9f38:	fb0a f303 	mul.w	r3, sl, r3
   d9f3c:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d9f40:	f101 0014 	add.w	r0, r1, #20
   d9f44:	fb0a b202 	mla	r2, sl, r2, fp
   d9f48:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d9f4a:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d9f4c:	f7ff fe58 	bl	d9c00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d9f50:	9904      	ldr	r1, [sp, #16]
   d9f52:	b1a9      	cbz	r1, d9f80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d9f54:	9b05      	ldr	r3, [sp, #20]
   d9f56:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9f58:	f84b 2003 	str.w	r2, [fp, r3]
   d9f5c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d9f60:	808b      	strh	r3, [r1, #4]
   d9f62:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d9f66:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d9f68:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d9f6c:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9f6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9f70:	608b      	str	r3, [r1, #8]
   d9f72:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d9f74:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d9f76:	60cb      	str	r3, [r1, #12]
   d9f78:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d9f7a:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d9f7c:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9f7e:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d9f80:	686b      	ldr	r3, [r5, #4]
   d9f82:	3301      	adds	r3, #1
   d9f84:	606b      	str	r3, [r5, #4]
   d9f86:	a813      	add	r0, sp, #76	; 0x4c
   d9f88:	f7ff fc8c 	bl	d98a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9f8c:	f1b8 0f00 	cmp.w	r8, #0
   d9f90:	d008      	beq.n	d9fa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d9f92:	a80d      	add	r0, sp, #52	; 0x34
   d9f94:	f7ff fc86 	bl	d98a4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9f98:	e756      	b.n	d9e48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d9f9a:	4643      	mov	r3, r8
   d9f9c:	e7c0      	b.n	d9f20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9f9e:	f04f 0801 	mov.w	r8, #1
   d9fa2:	e7f0      	b.n	d9f86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d9fa4:	9b01      	ldr	r3, [sp, #4]
   d9fa6:	682d      	ldr	r5, [r5, #0]
   d9fa8:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d9fac:	9b08      	ldr	r3, [sp, #32]
   d9fae:	781b      	ldrb	r3, [r3, #0]
   d9fb0:	b92b      	cbnz	r3, d9fbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d9fb2:	f8d9 3000 	ldr.w	r3, [r9]
   d9fb6:	9a02      	ldr	r2, [sp, #8]
   d9fb8:	4413      	add	r3, r2
   d9fba:	7c1b      	ldrb	r3, [r3, #16]
   d9fbc:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d9fbe:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d9fc0:	e773      	b.n	d9eaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9fc2:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9fc4:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9fc6:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9fc8:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9fca:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9fcc:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d9fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d9fd0:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9fd2:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9fd4:	60a2      	str	r2, [r4, #8]
   d9fd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d9fd8:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9fda:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9fdc:	60e2      	str	r2, [r4, #12]
   d9fde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d9fe0:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9fe2:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9fe4:	6122      	str	r2, [r4, #16]
   d9fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d9fe8:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d9fea:	9b03      	ldr	r3, [sp, #12]
   d9fec:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d9fee:	6162      	str	r2, [r4, #20]
   d9ff0:	7623      	strb	r3, [r4, #24]
   d9ff2:	e7ce      	b.n	d9f92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d9ff4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9ff4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d9ff6:	4605      	mov	r5, r0
   d9ff8:	4b09      	ldr	r3, [pc, #36]	; (da020 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d9ffa:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9ffe:	4604      	mov	r4, r0
   da000:	460e      	mov	r6, r1
        filter_(level, filters) {
   da002:	a801      	add	r0, sp, #4
   da004:	4611      	mov	r1, r2
   da006:	f7fb fc61 	bl	d58cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da00a:	aa01      	add	r2, sp, #4
   da00c:	4631      	mov	r1, r6
   da00e:	4628      	mov	r0, r5
   da010:	f7ff fedb 	bl	d9dca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da014:	a801      	add	r0, sp, #4
   da016:	f7fb f93d 	bl	d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   da01a:	4620      	mov	r0, r4
   da01c:	b004      	add	sp, #16
   da01e:	bd70      	pop	{r4, r5, r6, pc}
   da020:	000dc880 	.word	0x000dc880

000da024 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   da024:	b5f0      	push	{r4, r5, r6, r7, lr}
   da026:	460f      	mov	r7, r1
   da028:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da02a:	4926      	ldr	r1, [pc, #152]	; (da0c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   da02c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da02e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   da030:	4616      	mov	r6, r2
   da032:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   da034:	f001 ffd9 	bl	dbfea <strcmp>
   da038:	bb00      	cbnz	r0, da07c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   da03a:	b1e4      	cbz	r4, da076 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   da03c:	4629      	mov	r1, r5
   da03e:	4668      	mov	r0, sp
   da040:	f7ff fc8a 	bl	d9958 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da044:	4920      	ldr	r1, [pc, #128]	; (da0c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da046:	2024      	movs	r0, #36	; 0x24
   da048:	f001 fa80 	bl	db54c <_ZnwjRKSt9nothrow_t>
   da04c:	4605      	mov	r5, r0
   da04e:	b170      	cbz	r0, da06e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da050:	4669      	mov	r1, sp
   da052:	a803      	add	r0, sp, #12
   da054:	f7fb fc3a 	bl	d58cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da058:	aa03      	add	r2, sp, #12
   da05a:	4631      	mov	r1, r6
   da05c:	4628      	mov	r0, r5
   da05e:	f7ff ffc9 	bl	d9ff4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da062:	a803      	add	r0, sp, #12
   da064:	f7fb f916 	bl	d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   da068:	4b18      	ldr	r3, [pc, #96]	; (da0cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   da06a:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   da06c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da06e:	4668      	mov	r0, sp
   da070:	f7fb f910 	bl	d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da074:	462c      	mov	r4, r5
}
   da076:	4620      	mov	r0, r4
   da078:	b007      	add	sp, #28
   da07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   da07c:	4914      	ldr	r1, [pc, #80]	; (da0d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   da07e:	4638      	mov	r0, r7
   da080:	f001 ffb3 	bl	dbfea <strcmp>
   da084:	b9e0      	cbnz	r0, da0c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   da086:	2c00      	cmp	r4, #0
   da088:	d0f5      	beq.n	da076 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   da08a:	4629      	mov	r1, r5
   da08c:	4668      	mov	r0, sp
   da08e:	f7ff fc63 	bl	d9958 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   da092:	490d      	ldr	r1, [pc, #52]	; (da0c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   da094:	2024      	movs	r0, #36	; 0x24
   da096:	f001 fa59 	bl	db54c <_ZnwjRKSt9nothrow_t>
   da09a:	4605      	mov	r5, r0
   da09c:	2800      	cmp	r0, #0
   da09e:	d0e6      	beq.n	da06e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   da0a0:	4669      	mov	r1, sp
   da0a2:	a803      	add	r0, sp, #12
   da0a4:	f7fb fc12 	bl	d58cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   da0a8:	aa03      	add	r2, sp, #12
   da0aa:	4631      	mov	r1, r6
   da0ac:	4628      	mov	r0, r5
   da0ae:	f7ff ffa1 	bl	d9ff4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   da0b2:	a803      	add	r0, sp, #12
   da0b4:	f7fb f8ee 	bl	d5294 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   da0b8:	4b06      	ldr	r3, [pc, #24]	; (da0d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   da0ba:	602b      	str	r3, [r5, #0]
   da0bc:	622c      	str	r4, [r5, #32]
}
   da0be:	e7d6      	b.n	da06e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   da0c0:	2400      	movs	r4, #0
   da0c2:	e7d8      	b.n	da076 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   da0c4:	000dce16 	.word	0x000dce16
   da0c8:	000dcfdc 	.word	0x000dcfdc
   da0cc:	000dcea8 	.word	0x000dcea8
   da0d0:	000dce1a 	.word	0x000dce1a
   da0d4:	000dce90 	.word	0x000dce90

000da0d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   da0d8:	4b01      	ldr	r3, [pc, #4]	; (da0e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   da0da:	4a02      	ldr	r2, [pc, #8]	; (da0e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   da0dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   da0de:	4770      	bx	lr
   da0e0:	2003e53c 	.word	0x2003e53c
   da0e4:	000dce2b 	.word	0x000dce2b

000da0e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da0ec:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   da0ee:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da0f2:	4604      	mov	r4, r0
   da0f4:	460e      	mov	r6, r1
   da0f6:	4617      	mov	r7, r2
   da0f8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   da0fa:	f001 f83f 	bl	db17c <_Z16_fetch_usbserialv>
   da0fe:	4581      	cmp	r9, r0
   da100:	d04c      	beq.n	da19c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   da102:	792b      	ldrb	r3, [r5, #4]
   da104:	0719      	lsls	r1, r3, #28
   da106:	d504      	bpl.n	da112 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   da108:	696a      	ldr	r2, [r5, #20]
   da10a:	4954      	ldr	r1, [pc, #336]	; (da25c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   da10c:	4620      	mov	r0, r4
   da10e:	f7ff fa40 	bl	d9592 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   da112:	f1b8 0f00 	cmp.w	r8, #0
   da116:	d00d      	beq.n	da134 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   da118:	215b      	movs	r1, #91	; 0x5b
   da11a:	4620      	mov	r0, r4
   da11c:	f7ff fa2d 	bl	d957a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   da120:	4641      	mov	r1, r8
   da122:	4620      	mov	r0, r4
   da124:	f7ff fa1a 	bl	d955c <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   da128:	6823      	ldr	r3, [r4, #0]
   da12a:	494d      	ldr	r1, [pc, #308]	; (da260 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   da12c:	68db      	ldr	r3, [r3, #12]
   da12e:	2202      	movs	r2, #2
   da130:	4620      	mov	r0, r4
   da132:	4798      	blx	r3
    if (attr.has_file) {
   da134:	792b      	ldrb	r3, [r5, #4]
   da136:	07da      	lsls	r2, r3, #31
   da138:	d523      	bpl.n	da182 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   da13a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   da13e:	212f      	movs	r1, #47	; 0x2f
   da140:	4640      	mov	r0, r8
   da142:	f001 ffaf 	bl	dc0a4 <strrchr>
    if (s1) {
   da146:	b108      	cbz	r0, da14c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   da148:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   da14c:	4641      	mov	r1, r8
   da14e:	4620      	mov	r0, r4
   da150:	f7ff fa04 	bl	d955c <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   da154:	792b      	ldrb	r3, [r5, #4]
   da156:	079b      	lsls	r3, r3, #30
   da158:	d508      	bpl.n	da16c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   da15a:	213a      	movs	r1, #58	; 0x3a
   da15c:	4620      	mov	r0, r4
   da15e:	f7ff fa0c 	bl	d957a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   da162:	68ea      	ldr	r2, [r5, #12]
   da164:	493f      	ldr	r1, [pc, #252]	; (da264 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   da166:	4620      	mov	r0, r4
   da168:	f7ff fa13 	bl	d9592 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   da16c:	792a      	ldrb	r2, [r5, #4]
   da16e:	6823      	ldr	r3, [r4, #0]
   da170:	f012 0f04 	tst.w	r2, #4
   da174:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   da176:	bf14      	ite	ne
   da178:	493b      	ldrne	r1, [pc, #236]	; (da268 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   da17a:	493c      	ldreq	r1, [pc, #240]	; (da26c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   da17c:	2202      	movs	r2, #2
            write(": ", 2);
   da17e:	4620      	mov	r0, r4
   da180:	4798      	blx	r3
    if (attr.has_function) {
   da182:	792b      	ldrb	r3, [r5, #4]
   da184:	0758      	lsls	r0, r3, #29
   da186:	d51d      	bpl.n	da1c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da188:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da18a:	460b      	mov	r3, r1
   da18c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   da18e:	f813 0b01 	ldrb.w	r0, [r3], #1
   da192:	b160      	cbz	r0, da1ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   da194:	2820      	cmp	r0, #32
   da196:	d108      	bne.n	da1aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   da198:	4619      	mov	r1, r3
   da19a:	e7f7      	b.n	da18c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   da19c:	4834      	ldr	r0, [pc, #208]	; (da270 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   da19e:	f000 f966 	bl	da46e <_ZN5spark12NetworkClass9listeningEv>
   da1a2:	2800      	cmp	r0, #0
   da1a4:	d0ad      	beq.n	da102 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   da1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   da1aa:	2828      	cmp	r0, #40	; 0x28
   da1ac:	d1ee      	bne.n	da18c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   da1ae:	6823      	ldr	r3, [r4, #0]
   da1b0:	1a52      	subs	r2, r2, r1
   da1b2:	68db      	ldr	r3, [r3, #12]
   da1b4:	4620      	mov	r0, r4
   da1b6:	4798      	blx	r3
        write("(): ", 4);
   da1b8:	6823      	ldr	r3, [r4, #0]
   da1ba:	492e      	ldr	r1, [pc, #184]	; (da274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   da1bc:	68db      	ldr	r3, [r3, #12]
   da1be:	2204      	movs	r2, #4
   da1c0:	4620      	mov	r0, r4
   da1c2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   da1c4:	2100      	movs	r1, #0
   da1c6:	4638      	mov	r0, r7
   da1c8:	f7fd ff70 	bl	d80ac <log_level_name>
   da1cc:	4601      	mov	r1, r0
    write(s);
   da1ce:	4620      	mov	r0, r4
   da1d0:	f7ff f9c4 	bl	d955c <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   da1d4:	6823      	ldr	r3, [r4, #0]
   da1d6:	4925      	ldr	r1, [pc, #148]	; (da26c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   da1d8:	68db      	ldr	r3, [r3, #12]
   da1da:	2202      	movs	r2, #2
   da1dc:	4620      	mov	r0, r4
   da1de:	4798      	blx	r3
    if (msg) {
   da1e0:	b11e      	cbz	r6, da1ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   da1e2:	4631      	mov	r1, r6
   da1e4:	4620      	mov	r0, r4
   da1e6:	f7ff f9b9 	bl	d955c <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   da1ea:	792b      	ldrb	r3, [r5, #4]
   da1ec:	f013 0f30 	tst.w	r3, #48	; 0x30
   da1f0:	d02c      	beq.n	da24c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   da1f2:	6823      	ldr	r3, [r4, #0]
   da1f4:	4920      	ldr	r1, [pc, #128]	; (da278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   da1f6:	68db      	ldr	r3, [r3, #12]
   da1f8:	2202      	movs	r2, #2
   da1fa:	4620      	mov	r0, r4
   da1fc:	4798      	blx	r3
        if (attr.has_code) {
   da1fe:	792b      	ldrb	r3, [r5, #4]
   da200:	06d9      	lsls	r1, r3, #27
   da202:	d50a      	bpl.n	da21a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   da204:	6823      	ldr	r3, [r4, #0]
   da206:	491d      	ldr	r1, [pc, #116]	; (da27c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   da208:	68db      	ldr	r3, [r3, #12]
   da20a:	2207      	movs	r2, #7
   da20c:	4620      	mov	r0, r4
   da20e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   da210:	69aa      	ldr	r2, [r5, #24]
   da212:	491b      	ldr	r1, [pc, #108]	; (da280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   da214:	4620      	mov	r0, r4
   da216:	f7ff f9bc 	bl	d9592 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   da21a:	792b      	ldrb	r3, [r5, #4]
   da21c:	069a      	lsls	r2, r3, #26
   da21e:	d511      	bpl.n	da244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   da220:	06db      	lsls	r3, r3, #27
   da222:	d505      	bpl.n	da230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   da224:	6823      	ldr	r3, [r4, #0]
   da226:	4910      	ldr	r1, [pc, #64]	; (da268 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   da228:	68db      	ldr	r3, [r3, #12]
   da22a:	2202      	movs	r2, #2
   da22c:	4620      	mov	r0, r4
   da22e:	4798      	blx	r3
            write("details = ", 10);
   da230:	6823      	ldr	r3, [r4, #0]
   da232:	4914      	ldr	r1, [pc, #80]	; (da284 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   da234:	68db      	ldr	r3, [r3, #12]
   da236:	4620      	mov	r0, r4
   da238:	220a      	movs	r2, #10
   da23a:	4798      	blx	r3
            write(attr.details);
   da23c:	69e9      	ldr	r1, [r5, #28]
   da23e:	4620      	mov	r0, r4
   da240:	f7ff f98c 	bl	d955c <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   da244:	215d      	movs	r1, #93	; 0x5d
   da246:	4620      	mov	r0, r4
   da248:	f7ff f997 	bl	d957a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   da24c:	6823      	ldr	r3, [r4, #0]
   da24e:	490e      	ldr	r1, [pc, #56]	; (da288 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   da250:	68db      	ldr	r3, [r3, #12]
   da252:	4620      	mov	r0, r4
   da254:	2202      	movs	r2, #2
}
   da256:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   da25a:	4718      	bx	r3
   da25c:	000dce2f 	.word	0x000dce2f
   da260:	000dce36 	.word	0x000dce36
   da264:	000dc9d4 	.word	0x000dc9d4
   da268:	000dce39 	.word	0x000dce39
   da26c:	000dce3e 	.word	0x000dce3e
   da270:	2003e568 	.word	0x2003e568
   da274:	000dce3c 	.word	0x000dce3c
   da278:	000dce41 	.word	0x000dce41
   da27c:	000dce44 	.word	0x000dce44
   da280:	000dc472 	.word	0x000dc472
   da284:	000dce4c 	.word	0x000dce4c
   da288:	000dce57 	.word	0x000dce57

000da28c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da28c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da290:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   da292:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   da296:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   da298:	4605      	mov	r5, r0
   da29a:	460f      	mov	r7, r1
   da29c:	4690      	mov	r8, r2
   da29e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   da2a0:	f000 ff6c 	bl	db17c <_Z16_fetch_usbserialv>
   da2a4:	4581      	cmp	r9, r0
   da2a6:	d105      	bne.n	da2b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   da2a8:	4849      	ldr	r0, [pc, #292]	; (da3d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   da2aa:	f000 f8e0 	bl	da46e <_ZN5spark12NetworkClass9listeningEv>
   da2ae:	2800      	cmp	r0, #0
   da2b0:	f040 808a 	bne.w	da3c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   da2b4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   da2b6:	4a47      	ldr	r2, [pc, #284]	; (da3d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   da2b8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   da2ba:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   da2be:	a801      	add	r0, sp, #4
        strm_(stream) {
   da2c0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   da2c2:	f88d 9008 	strb.w	r9, [sp, #8]
   da2c6:	f7ff f83c 	bl	d9342 <_ZN5spark10JSONWriter11beginObjectEv>
   da2ca:	4649      	mov	r1, r9
   da2cc:	4640      	mov	r0, r8
   da2ce:	f7fd feed 	bl	d80ac <log_level_name>
    json.name("l", 1).value(s);
   da2d2:	4941      	ldr	r1, [pc, #260]	; (da3d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   da2d4:	4680      	mov	r8, r0
   da2d6:	2201      	movs	r2, #1
   da2d8:	a801      	add	r0, sp, #4
   da2da:	f7ff f8bb 	bl	d9454 <_ZN5spark10JSONWriter4nameEPKcj>
   da2de:	4641      	mov	r1, r8
   da2e0:	f7ff f92e 	bl	d9540 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   da2e4:	b13f      	cbz	r7, da2f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   da2e6:	493d      	ldr	r1, [pc, #244]	; (da3dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   da2e8:	2201      	movs	r2, #1
   da2ea:	a801      	add	r0, sp, #4
   da2ec:	f7ff f8b2 	bl	d9454 <_ZN5spark10JSONWriter4nameEPKcj>
   da2f0:	4639      	mov	r1, r7
   da2f2:	f7ff f925 	bl	d9540 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   da2f6:	b13e      	cbz	r6, da308 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   da2f8:	4939      	ldr	r1, [pc, #228]	; (da3e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   da2fa:	2201      	movs	r2, #1
   da2fc:	a801      	add	r0, sp, #4
   da2fe:	f7ff f8a9 	bl	d9454 <_ZN5spark10JSONWriter4nameEPKcj>
   da302:	4631      	mov	r1, r6
   da304:	f7ff f91c 	bl	d9540 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   da308:	7923      	ldrb	r3, [r4, #4]
   da30a:	07df      	lsls	r7, r3, #31
   da30c:	d50e      	bpl.n	da32c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   da30e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   da310:	212f      	movs	r1, #47	; 0x2f
   da312:	4630      	mov	r0, r6
   da314:	f001 fec6 	bl	dc0a4 <strrchr>
    if (s1) {
   da318:	b100      	cbz	r0, da31c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   da31a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   da31c:	4931      	ldr	r1, [pc, #196]	; (da3e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   da31e:	2201      	movs	r2, #1
   da320:	a801      	add	r0, sp, #4
   da322:	f7ff f897 	bl	d9454 <_ZN5spark10JSONWriter4nameEPKcj>
   da326:	4631      	mov	r1, r6
   da328:	f7ff f90a 	bl	d9540 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   da32c:	7923      	ldrb	r3, [r4, #4]
   da32e:	079e      	lsls	r6, r3, #30
   da330:	d507      	bpl.n	da342 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   da332:	492d      	ldr	r1, [pc, #180]	; (da3e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   da334:	2202      	movs	r2, #2
   da336:	a801      	add	r0, sp, #4
   da338:	f7ff f88c 	bl	d9454 <_ZN5spark10JSONWriter4nameEPKcj>
   da33c:	68e1      	ldr	r1, [r4, #12]
   da33e:	f7ff f80d 	bl	d935c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   da342:	7923      	ldrb	r3, [r4, #4]
   da344:	0758      	lsls	r0, r3, #29
   da346:	d514      	bpl.n	da372 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   da348:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   da34a:	4633      	mov	r3, r6
   da34c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   da34e:	f813 2b01 	ldrb.w	r2, [r3], #1
   da352:	b12a      	cbz	r2, da360 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   da354:	2a20      	cmp	r2, #32
   da356:	d101      	bne.n	da35c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   da358:	461e      	mov	r6, r3
   da35a:	e7f7      	b.n	da34c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   da35c:	2a28      	cmp	r2, #40	; 0x28
   da35e:	d1f5      	bne.n	da34c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   da360:	4922      	ldr	r1, [pc, #136]	; (da3ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   da362:	2202      	movs	r2, #2
   da364:	a801      	add	r0, sp, #4
   da366:	f7ff f875 	bl	d9454 <_ZN5spark10JSONWriter4nameEPKcj>
   da36a:	1bba      	subs	r2, r7, r6
   da36c:	4631      	mov	r1, r6
   da36e:	f7ff f881 	bl	d9474 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   da372:	7923      	ldrb	r3, [r4, #4]
   da374:	0719      	lsls	r1, r3, #28
   da376:	d507      	bpl.n	da388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   da378:	491d      	ldr	r1, [pc, #116]	; (da3f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   da37a:	2201      	movs	r2, #1
   da37c:	a801      	add	r0, sp, #4
   da37e:	f7ff f869 	bl	d9454 <_ZN5spark10JSONWriter4nameEPKcj>
   da382:	6961      	ldr	r1, [r4, #20]
   da384:	f7fe fffc 	bl	d9380 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   da388:	7923      	ldrb	r3, [r4, #4]
   da38a:	06da      	lsls	r2, r3, #27
   da38c:	d508      	bpl.n	da3a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   da38e:	2204      	movs	r2, #4
   da390:	4918      	ldr	r1, [pc, #96]	; (da3f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   da392:	eb0d 0002 	add.w	r0, sp, r2
   da396:	f7ff f85d 	bl	d9454 <_ZN5spark10JSONWriter4nameEPKcj>
   da39a:	69a1      	ldr	r1, [r4, #24]
   da39c:	f7fe ffde 	bl	d935c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   da3a0:	7923      	ldrb	r3, [r4, #4]
   da3a2:	069b      	lsls	r3, r3, #26
   da3a4:	d507      	bpl.n	da3b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   da3a6:	4914      	ldr	r1, [pc, #80]	; (da3f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   da3a8:	2206      	movs	r2, #6
   da3aa:	a801      	add	r0, sp, #4
   da3ac:	f7ff f852 	bl	d9454 <_ZN5spark10JSONWriter4nameEPKcj>
   da3b0:	69e1      	ldr	r1, [r4, #28]
   da3b2:	f7ff f8c5 	bl	d9540 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   da3b6:	a801      	add	r0, sp, #4
   da3b8:	f7fe ffad 	bl	d9316 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   da3bc:	6a28      	ldr	r0, [r5, #32]
   da3be:	490f      	ldr	r1, [pc, #60]	; (da3fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   da3c0:	6803      	ldr	r3, [r0, #0]
   da3c2:	2202      	movs	r2, #2
   da3c4:	68db      	ldr	r3, [r3, #12]
   da3c6:	4798      	blx	r3
}
   da3c8:	b005      	add	sp, #20
   da3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da3ce:	bf00      	nop
   da3d0:	2003e568 	.word	0x2003e568
   da3d4:	000dce78 	.word	0x000dce78
   da3d8:	000dce0c 	.word	0x000dce0c
   da3dc:	000dce5a 	.word	0x000dce5a
   da3e0:	000dc3fa 	.word	0x000dc3fa
   da3e4:	000dc93b 	.word	0x000dc93b
   da3e8:	000dce5c 	.word	0x000dce5c
   da3ec:	000dce5f 	.word	0x000dce5f
   da3f0:	000dc81a 	.word	0x000dc81a
   da3f4:	000dce62 	.word	0x000dce62
   da3f8:	000dce67 	.word	0x000dce67
   da3fc:	000dce57 	.word	0x000dce57

000da400 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da400:	2300      	movs	r3, #0
   da402:	6840      	ldr	r0, [r0, #4]
   da404:	461a      	mov	r2, r3
   da406:	f7fd bf55 	b.w	d82b4 <network_connect>

000da40a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da40a:	6840      	ldr	r0, [r0, #4]
   da40c:	2200      	movs	r2, #0
   da40e:	2102      	movs	r1, #2
   da410:	f7fd bf60 	b.w	d82d4 <network_disconnect>

000da414 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da414:	2200      	movs	r2, #0
   da416:	6840      	ldr	r0, [r0, #4]
   da418:	4611      	mov	r1, r2
   da41a:	f7fd bf53 	b.w	d82c4 <network_connecting>

000da41e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da41e:	2200      	movs	r2, #0
   da420:	6840      	ldr	r0, [r0, #4]
   da422:	4611      	mov	r1, r2
   da424:	f7fd bf5e 	b.w	d82e4 <network_ready>

000da428 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da428:	2300      	movs	r3, #0
   da42a:	6840      	ldr	r0, [r0, #4]
   da42c:	461a      	mov	r2, r3
   da42e:	4619      	mov	r1, r3
   da430:	f7fd bf60 	b.w	d82f4 <network_on>

000da434 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da434:	2300      	movs	r3, #0
   da436:	6840      	ldr	r0, [r0, #4]
   da438:	461a      	mov	r2, r3
   da43a:	4619      	mov	r1, r3
   da43c:	f7fd bf62 	b.w	d8304 <network_off>

000da440 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   da440:	6840      	ldr	r0, [r0, #4]
   da442:	2100      	movs	r1, #0
   da444:	f7fd bf86 	b.w	d8354 <network_is_on>

000da448 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   da448:	6840      	ldr	r0, [r0, #4]
   da44a:	2100      	movs	r1, #0
   da44c:	f7fd bf8a 	b.w	d8364 <network_is_off>

000da450 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da450:	6840      	ldr	r0, [r0, #4]
   da452:	2200      	movs	r2, #0
   da454:	f081 0101 	eor.w	r1, r1, #1
   da458:	f7fd bf5c 	b.w	d8314 <network_listen>

000da45c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da45c:	6840      	ldr	r0, [r0, #4]
   da45e:	2200      	movs	r2, #0
   da460:	f7fd bf68 	b.w	d8334 <network_set_listen_timeout>

000da464 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da464:	2200      	movs	r2, #0
   da466:	6840      	ldr	r0, [r0, #4]
   da468:	4611      	mov	r1, r2
   da46a:	f7fd bf6b 	b.w	d8344 <network_get_listen_timeout>

000da46e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da46e:	2200      	movs	r2, #0
   da470:	6840      	ldr	r0, [r0, #4]
   da472:	4611      	mov	r1, r2
   da474:	f7fd bf56 	b.w	d8324 <network_listening>

000da478 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da47c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   da47e:	b095      	sub	sp, #84	; 0x54
   da480:	4616      	mov	r6, r2
   da482:	460d      	mov	r5, r1
   da484:	4607      	mov	r7, r0
    IPAddress addr;
   da486:	f7fe fde7 	bl	d9058 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   da48a:	4621      	mov	r1, r4
   da48c:	2218      	movs	r2, #24
   da48e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   da490:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da492:	f001 fd67 	bl	dbf64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da496:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   da498:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da49c:	4621      	mov	r1, r4
   da49e:	466b      	mov	r3, sp
   da4a0:	aa0c      	add	r2, sp, #48	; 0x30
   da4a2:	4630      	mov	r0, r6
   da4a4:	f7fd fd42 	bl	d7f2c <netdb_getaddrinfo>
    if (!r) {
   da4a8:	4604      	mov	r4, r0
   da4aa:	2800      	cmp	r0, #0
   da4ac:	d146      	bne.n	da53c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da4ae:	4602      	mov	r2, r0
   da4b0:	2101      	movs	r1, #1
   da4b2:	6868      	ldr	r0, [r5, #4]
   da4b4:	f7fd ff16 	bl	d82e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da4b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da4ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da4bc:	4622      	mov	r2, r4
   da4be:	6868      	ldr	r0, [r5, #4]
   da4c0:	f7fd ff10 	bl	d82e4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da4c4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da4c6:	4681      	mov	r9, r0
        bool ok = false;
   da4c8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da4ca:	2e00      	cmp	r6, #0
   da4cc:	d036      	beq.n	da53c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   da4ce:	2900      	cmp	r1, #0
   da4d0:	d134      	bne.n	da53c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da4d2:	6873      	ldr	r3, [r6, #4]
   da4d4:	2b02      	cmp	r3, #2
   da4d6:	d003      	beq.n	da4e0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   da4d8:	2b0a      	cmp	r3, #10
   da4da:	d00b      	beq.n	da4f4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da4dc:	69f6      	ldr	r6, [r6, #28]
   da4de:	e7f4      	b.n	da4ca <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   da4e0:	f1b8 0f00 	cmp.w	r8, #0
   da4e4:	d004      	beq.n	da4f0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da4e6:	6971      	ldr	r1, [r6, #20]
   da4e8:	4638      	mov	r0, r7
   da4ea:	3104      	adds	r1, #4
   da4ec:	f7fe fde1 	bl	d90b2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   da4f0:	4641      	mov	r1, r8
   da4f2:	e7f3      	b.n	da4dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   da4f4:	f1b9 0f00 	cmp.w	r9, #0
   da4f8:	d101      	bne.n	da4fe <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   da4fa:	4649      	mov	r1, r9
   da4fc:	e7ee      	b.n	da4dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da4fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da500:	2210      	movs	r2, #16
   da502:	a801      	add	r0, sp, #4
   da504:	f001 fd2e 	bl	dbf64 <memset>
                    a.v = 6;
   da508:	2306      	movs	r3, #6
   da50a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da50e:	ad01      	add	r5, sp, #4
   da510:	f104 0308 	add.w	r3, r4, #8
   da514:	3418      	adds	r4, #24
   da516:	6818      	ldr	r0, [r3, #0]
   da518:	6859      	ldr	r1, [r3, #4]
   da51a:	462a      	mov	r2, r5
   da51c:	c203      	stmia	r2!, {r0, r1}
   da51e:	3308      	adds	r3, #8
   da520:	42a3      	cmp	r3, r4
   da522:	4615      	mov	r5, r2
   da524:	d1f7      	bne.n	da516 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   da526:	a901      	add	r1, sp, #4
   da528:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   da52a:	ad07      	add	r5, sp, #28
   da52c:	f7fe fda2 	bl	d9074 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da532:	1d3c      	adds	r4, r7, #4
   da534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da536:	682b      	ldr	r3, [r5, #0]
   da538:	7023      	strb	r3, [r4, #0]
   da53a:	e7de      	b.n	da4fa <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da53c:	9800      	ldr	r0, [sp, #0]
   da53e:	f7fd fced 	bl	d7f1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da542:	4638      	mov	r0, r7
   da544:	b015      	add	sp, #84	; 0x54
   da546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000da54c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da54c:	4b02      	ldr	r3, [pc, #8]	; (da558 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da54e:	4a03      	ldr	r2, [pc, #12]	; (da55c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da550:	601a      	str	r2, [r3, #0]
   da552:	2200      	movs	r2, #0
   da554:	605a      	str	r2, [r3, #4]

} // spark
   da556:	4770      	bx	lr
   da558:	2003e568 	.word	0x2003e568
   da55c:	000dcef0 	.word	0x000dcef0

000da560 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   da560:	b508      	push	{r3, lr}
            return &Wire1;
   da562:	f000 ffcd 	bl	db500 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   da566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   da56a:	f7fe bce3 	b.w	d8f34 <_ZN7TwoWire4lockEv>

000da56e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   da56e:	b510      	push	{r4, lr}
   da570:	4604      	mov	r4, r0
    lock_(_lock)
   da572:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   da574:	b109      	cbz	r1, da57a <_ZN4PMICC1Eb+0xc>
        lock();
   da576:	f7ff fff3 	bl	da560 <_ZN4PMIC4lockEv.constprop.0>
}
   da57a:	4620      	mov	r0, r4
   da57c:	bd10      	pop	{r4, pc}

000da57e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   da57e:	b508      	push	{r3, lr}
            return &Wire1;
   da580:	f000 ffbe 	bl	db500 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   da584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   da588:	f7fe bcdd 	b.w	d8f46 <_ZN7TwoWire6unlockEv>

000da58c <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   da58c:	b510      	push	{r4, lr}
    if (lock_) {
   da58e:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   da590:	4604      	mov	r4, r0
    if (lock_) {
   da592:	b10b      	cbz	r3, da598 <_ZN4PMICD1Ev+0xc>
        unlock();
   da594:	f7ff fff3 	bl	da57e <_ZN4PMIC6unlockEv>
}
   da598:	4620      	mov	r0, r4
   da59a:	bd10      	pop	{r4, pc}

000da59c <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   da59c:	b510      	push	{r4, lr}
   da59e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   da5a0:	6800      	ldr	r0, [r0, #0]
   da5a2:	f7ff ffec 	bl	da57e <_ZN4PMIC6unlockEv>
   da5a6:	4620      	mov	r0, r4
   da5a8:	bd10      	pop	{r4, pc}

000da5aa <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   da5aa:	b530      	push	{r4, r5, lr}
   da5ac:	b087      	sub	sp, #28
   da5ae:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da5b0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da5b2:	f7ff ffd5 	bl	da560 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da5b6:	236b      	movs	r3, #107	; 0x6b
   da5b8:	f88d 3008 	strb.w	r3, [sp, #8]
   da5bc:	2300      	movs	r3, #0
   da5be:	2401      	movs	r4, #1
   da5c0:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   da5c2:	230a      	movs	r3, #10
   da5c4:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da5c6:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   da5ca:	f000 ff99 	bl	db500 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da5ce:	a902      	add	r1, sp, #8
   da5d0:	f7fe fc91 	bl	d8ef6 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da5d4:	f000 ff94 	bl	db500 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   da5d8:	6803      	ldr	r3, [r0, #0]
   da5da:	4629      	mov	r1, r5
   da5dc:	689b      	ldr	r3, [r3, #8]
   da5de:	4798      	blx	r3
            return &Wire1;
   da5e0:	f000 ff8e 	bl	db500 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da5e4:	4621      	mov	r1, r4
   da5e6:	f7fe fc9e 	bl	d8f26 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   da5ea:	9403      	str	r4, [sp, #12]
            return &Wire1;
   da5ec:	f000 ff88 	bl	db500 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   da5f0:	a902      	add	r1, sp, #8
   da5f2:	f7fe fc4d 	bl	d8e90 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   da5f6:	f000 ff83 	bl	db500 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   da5fa:	6803      	ldr	r3, [r0, #0]
   da5fc:	695b      	ldr	r3, [r3, #20]
   da5fe:	4798      	blx	r3
   da600:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   da602:	a801      	add	r0, sp, #4
   da604:	f7ff ffca 	bl	da59c <_ZNSt10lock_guardI4PMICED1Ev>
}
   da608:	b2e0      	uxtb	r0, r4
   da60a:	b007      	add	sp, #28
   da60c:	bd30      	pop	{r4, r5, pc}

000da60e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   da60e:	b570      	push	{r4, r5, r6, lr}
   da610:	b086      	sub	sp, #24
   da612:	4614      	mov	r4, r2
   da614:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da616:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da618:	f7ff ffa2 	bl	da560 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da61c:	236b      	movs	r3, #107	; 0x6b
   da61e:	f88d 3008 	strb.w	r3, [sp, #8]
   da622:	2300      	movs	r3, #0
   da624:	9303      	str	r3, [sp, #12]
   da626:	2601      	movs	r6, #1
    timeout_ = ms;
   da628:	230a      	movs	r3, #10
   da62a:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   da62c:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   da630:	f000 ff66 	bl	db500 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   da634:	a902      	add	r1, sp, #8
   da636:	f7fe fc5e 	bl	d8ef6 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   da63a:	f000 ff61 	bl	db500 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   da63e:	6803      	ldr	r3, [r0, #0]
   da640:	4629      	mov	r1, r5
   da642:	689b      	ldr	r3, [r3, #8]
   da644:	4798      	blx	r3
            return &Wire1;
   da646:	f000 ff5b 	bl	db500 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   da64a:	6803      	ldr	r3, [r0, #0]
   da64c:	4621      	mov	r1, r4
   da64e:	689b      	ldr	r3, [r3, #8]
   da650:	4798      	blx	r3
            return &Wire1;
   da652:	f000 ff55 	bl	db500 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   da656:	4631      	mov	r1, r6
   da658:	f7fe fc65 	bl	d8f26 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   da65c:	a801      	add	r0, sp, #4
   da65e:	f7ff ff9d 	bl	da59c <_ZNSt10lock_guardI4PMICED1Ev>
}
   da662:	b006      	add	sp, #24
   da664:	bd70      	pop	{r4, r5, r6, pc}

000da666 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   da666:	b513      	push	{r0, r1, r4, lr}
   da668:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da66a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da66c:	f7ff ff78 	bl	da560 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da670:	2101      	movs	r1, #1
   da672:	4620      	mov	r0, r4
   da674:	f7ff ff99 	bl	da5aa <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   da678:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   da67c:	f040 0210 	orr.w	r2, r0, #16
   da680:	2101      	movs	r1, #1
   da682:	4620      	mov	r0, r4
   da684:	f7ff ffc3 	bl	da60e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da688:	a801      	add	r0, sp, #4
   da68a:	f7ff ff87 	bl	da59c <_ZNSt10lock_guardI4PMICED1Ev>
}
   da68e:	2001      	movs	r0, #1
   da690:	b002      	add	sp, #8
   da692:	bd10      	pop	{r4, pc}

000da694 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   da694:	b513      	push	{r0, r1, r4, lr}
   da696:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da698:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   da69a:	f7ff ff61 	bl	da560 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   da69e:	2101      	movs	r1, #1
   da6a0:	4620      	mov	r0, r4
   da6a2:	f7ff ff82 	bl	da5aa <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   da6a6:	2101      	movs	r1, #1
   da6a8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   da6ac:	4620      	mov	r0, r4
   da6ae:	f7ff ffae 	bl	da60e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   da6b2:	a801      	add	r0, sp, #4
   da6b4:	f7ff ff72 	bl	da59c <_ZNSt10lock_guardI4PMICED1Ev>
}
   da6b8:	2001      	movs	r0, #1
   da6ba:	b002      	add	sp, #8
   da6bc:	bd10      	pop	{r4, pc}

000da6be <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da6c0:	4606      	mov	r6, r0
   da6c2:	460d      	mov	r5, r1
  size_t n = 0;
   da6c4:	188f      	adds	r7, r1, r2
   da6c6:	2400      	movs	r4, #0
  while (size--) {
   da6c8:	42bd      	cmp	r5, r7
   da6ca:	d00c      	beq.n	da6e6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da6cc:	6833      	ldr	r3, [r6, #0]
   da6ce:	f815 1b01 	ldrb.w	r1, [r5], #1
   da6d2:	689b      	ldr	r3, [r3, #8]
   da6d4:	4630      	mov	r0, r6
   da6d6:	4798      	blx	r3
     if (chunk>=0)
   da6d8:	1e03      	subs	r3, r0, #0
   da6da:	db01      	blt.n	da6e0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da6dc:	441c      	add	r4, r3
  while (size--) {
   da6de:	e7f3      	b.n	da6c8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da6e0:	2c00      	cmp	r4, #0
   da6e2:	bf08      	it	eq
   da6e4:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   da6e6:	4620      	mov	r0, r4
   da6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da6ea <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   da6ea:	b513      	push	{r0, r1, r4, lr}
   da6ec:	4604      	mov	r4, r0
    }
   da6ee:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   da6f0:	b159      	cbz	r1, da70a <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   da6f2:	9101      	str	r1, [sp, #4]
   da6f4:	f001 fca9 	bl	dc04a <strlen>
   da6f8:	6823      	ldr	r3, [r4, #0]
   da6fa:	9901      	ldr	r1, [sp, #4]
   da6fc:	68db      	ldr	r3, [r3, #12]
   da6fe:	4602      	mov	r2, r0
   da700:	4620      	mov	r0, r4
    }
   da702:	b002      	add	sp, #8
   da704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   da708:	4718      	bx	r3
    }
   da70a:	b002      	add	sp, #8
   da70c:	bd10      	pop	{r4, pc}

000da70e <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da70e:	6803      	ldr	r3, [r0, #0]
   da710:	689b      	ldr	r3, [r3, #8]
   da712:	4718      	bx	r3

000da714 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da714:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da716:	210d      	movs	r1, #13
{
   da718:	4605      	mov	r5, r0
  size_t n = print('\r');
   da71a:	f7ff fff8 	bl	da70e <_ZN5Print5printEc>
  n += print('\n');
   da71e:	210a      	movs	r1, #10
  size_t n = print('\r');
   da720:	4604      	mov	r4, r0
  n += print('\n');
   da722:	4628      	mov	r0, r5
   da724:	f7ff fff3 	bl	da70e <_ZN5Print5printEc>
  return n;
}
   da728:	4420      	add	r0, r4
   da72a:	bd38      	pop	{r3, r4, r5, pc}

000da72c <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da72c:	b530      	push	{r4, r5, lr}
   da72e:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da730:	2300      	movs	r3, #0
   da732:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da736:	2a01      	cmp	r2, #1
   da738:	bf98      	it	ls
   da73a:	220a      	movls	r2, #10
   da73c:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   da73e:	460d      	mov	r5, r1
   da740:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   da744:	fb01 5312 	mls	r3, r1, r2, r5
   da748:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da74c:	2b09      	cmp	r3, #9
   da74e:	bf94      	ite	ls
   da750:	3330      	addls	r3, #48	; 0x30
   da752:	3337      	addhi	r3, #55	; 0x37
   da754:	b2db      	uxtb	r3, r3
  } while(n);
   da756:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da758:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   da75c:	d9ef      	bls.n	da73e <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   da75e:	4621      	mov	r1, r4
   da760:	f7ff ffc3 	bl	da6ea <_ZN5Print5writeEPKc>
}
   da764:	b00b      	add	sp, #44	; 0x2c
   da766:	bd30      	pop	{r4, r5, pc}

000da768 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   da768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da76c:	b086      	sub	sp, #24
   da76e:	af00      	add	r7, sp, #0
   da770:	4605      	mov	r5, r0
   da772:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   da774:	1d38      	adds	r0, r7, #4
   da776:	2114      	movs	r1, #20
{
   da778:	4614      	mov	r4, r2
    va_copy(args2, args);
   da77a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   da77c:	f7fd fe22 	bl	d83c4 <vsnprintf>

    if (n<bufsize)
   da780:	2813      	cmp	r0, #19
   da782:	d80e      	bhi.n	da7a2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   da784:	1d39      	adds	r1, r7, #4
   da786:	4628      	mov	r0, r5
   da788:	f7ff ffaf 	bl	da6ea <_ZN5Print5writeEPKc>
   da78c:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   da78e:	b11e      	cbz	r6, da798 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   da790:	4628      	mov	r0, r5
   da792:	f7ff ffbf 	bl	da714 <_ZN5Print7printlnEv>
   da796:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   da798:	4620      	mov	r0, r4
   da79a:	3718      	adds	r7, #24
   da79c:	46bd      	mov	sp, r7
   da79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   da7a2:	f100 0308 	add.w	r3, r0, #8
   da7a6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   da7aa:	46e8      	mov	r8, sp
        char bigger[n+1];
   da7ac:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   da7b0:	4622      	mov	r2, r4
   da7b2:	1c41      	adds	r1, r0, #1
   da7b4:	683b      	ldr	r3, [r7, #0]
   da7b6:	4668      	mov	r0, sp
   da7b8:	f7fd fe04 	bl	d83c4 <vsnprintf>
  return write(str);
   da7bc:	4669      	mov	r1, sp
   da7be:	4628      	mov	r0, r5
   da7c0:	f7ff ff93 	bl	da6ea <_ZN5Print5writeEPKc>
   da7c4:	4604      	mov	r4, r0
   da7c6:	46c5      	mov	sp, r8
   da7c8:	e7e1      	b.n	da78e <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000da7cc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   da7cc:	4b01      	ldr	r3, [pc, #4]	; (da7d4 <_GLOBAL__sub_I_RGB+0x8>)
   da7ce:	2200      	movs	r2, #0
   da7d0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   da7d2:	4770      	bx	lr
   da7d4:	2003e570 	.word	0x2003e570

000da7d8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   da7d8:	b510      	push	{r4, lr}
   da7da:	4604      	mov	r4, r0
   da7dc:	4608      	mov	r0, r1
{
    _spi = spi;
   da7de:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   da7e0:	f7fd fbac 	bl	d7f3c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   da7e4:	2300      	movs	r3, #0
   da7e6:	6063      	str	r3, [r4, #4]
}
   da7e8:	4620      	mov	r0, r4
   da7ea:	bd10      	pop	{r4, pc}

000da7ec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   da7ec:	b510      	push	{r4, lr}
   da7ee:	4604      	mov	r4, r0
{
	free(buffer);
   da7f0:	6800      	ldr	r0, [r0, #0]
   da7f2:	f7fd fdc7 	bl	d8384 <free>
}
   da7f6:	4620      	mov	r0, r4
   da7f8:	bd10      	pop	{r4, pc}

000da7fa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   da7fa:	b510      	push	{r4, lr}
   da7fc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   da7fe:	6800      	ldr	r0, [r0, #0]
   da800:	b108      	cbz	r0, da806 <_ZN6String10invalidateEv+0xc>
   da802:	f7fd fdbf 	bl	d8384 <free>
	buffer = NULL;
   da806:	2300      	movs	r3, #0
	capacity = len = 0;
   da808:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   da80c:	6023      	str	r3, [r4, #0]
}
   da80e:	bd10      	pop	{r4, pc}

000da810 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   da810:	b538      	push	{r3, r4, r5, lr}
   da812:	4604      	mov	r4, r0
   da814:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   da816:	6800      	ldr	r0, [r0, #0]
   da818:	3101      	adds	r1, #1
   da81a:	f7fd fdbb 	bl	d8394 <realloc>
	if (newbuffer) {
   da81e:	b110      	cbz	r0, da826 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   da820:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   da824:	2001      	movs	r0, #1
	}
	return 0;
}
   da826:	bd38      	pop	{r3, r4, r5, pc}

000da828 <_ZN6String7reserveEj>:
{
   da828:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da82a:	6803      	ldr	r3, [r0, #0]
{
   da82c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da82e:	b123      	cbz	r3, da83a <_ZN6String7reserveEj+0x12>
   da830:	6843      	ldr	r3, [r0, #4]
   da832:	428b      	cmp	r3, r1
   da834:	d301      	bcc.n	da83a <_ZN6String7reserveEj+0x12>
   da836:	2001      	movs	r0, #1
}
   da838:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   da83a:	4620      	mov	r0, r4
   da83c:	f7ff ffe8 	bl	da810 <_ZN6String12changeBufferEj>
   da840:	2800      	cmp	r0, #0
   da842:	d0f9      	beq.n	da838 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   da844:	68a3      	ldr	r3, [r4, #8]
   da846:	2b00      	cmp	r3, #0
   da848:	d1f5      	bne.n	da836 <_ZN6String7reserveEj+0xe>
   da84a:	6822      	ldr	r2, [r4, #0]
   da84c:	7013      	strb	r3, [r2, #0]
   da84e:	e7f2      	b.n	da836 <_ZN6String7reserveEj+0xe>

000da850 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da850:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da852:	460d      	mov	r5, r1
	if (!reserve(length)) {
   da854:	4611      	mov	r1, r2
   da856:	9201      	str	r2, [sp, #4]
{
   da858:	4604      	mov	r4, r0
	if (!reserve(length)) {
   da85a:	f7ff ffe5 	bl	da828 <_ZN6String7reserveEj>
   da85e:	9a01      	ldr	r2, [sp, #4]
   da860:	b928      	cbnz	r0, da86e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   da862:	4620      	mov	r0, r4
   da864:	f7ff ffc9 	bl	da7fa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   da868:	4620      	mov	r0, r4
   da86a:	b003      	add	sp, #12
   da86c:	bd30      	pop	{r4, r5, pc}
	len = length;
   da86e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   da870:	4629      	mov	r1, r5
   da872:	6820      	ldr	r0, [r4, #0]
   da874:	f001 fb4e 	bl	dbf14 <memcpy>
	buffer[len] = 0;
   da878:	6822      	ldr	r2, [r4, #0]
   da87a:	68a3      	ldr	r3, [r4, #8]
   da87c:	2100      	movs	r1, #0
   da87e:	54d1      	strb	r1, [r2, r3]
	return *this;
   da880:	e7f2      	b.n	da868 <_ZN6String4copyEPKcj+0x18>

000da882 <_ZN6StringC1EPKc>:
	buffer = NULL;
   da882:	2300      	movs	r3, #0
String::String(const char *cstr)
   da884:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   da886:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   da88a:	4604      	mov	r4, r0
	len = 0;
   da88c:	6083      	str	r3, [r0, #8]
	flags = 0;
   da88e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   da890:	b141      	cbz	r1, da8a4 <_ZN6StringC1EPKc+0x22>
   da892:	4608      	mov	r0, r1
   da894:	9101      	str	r1, [sp, #4]
   da896:	f001 fbd8 	bl	dc04a <strlen>
   da89a:	9901      	ldr	r1, [sp, #4]
   da89c:	4602      	mov	r2, r0
   da89e:	4620      	mov	r0, r4
   da8a0:	f7ff ffd6 	bl	da850 <_ZN6String4copyEPKcj>
}
   da8a4:	4620      	mov	r0, r4
   da8a6:	b002      	add	sp, #8
   da8a8:	bd10      	pop	{r4, pc}

000da8aa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da8aa:	b538      	push	{r3, r4, r5, lr}
   da8ac:	4605      	mov	r5, r0
	if (buffer) {
   da8ae:	6800      	ldr	r0, [r0, #0]
{
   da8b0:	460c      	mov	r4, r1
	if (buffer) {
   da8b2:	b168      	cbz	r0, da8d0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   da8b4:	686a      	ldr	r2, [r5, #4]
   da8b6:	688b      	ldr	r3, [r1, #8]
   da8b8:	429a      	cmp	r2, r3
   da8ba:	d307      	bcc.n	da8cc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   da8bc:	6809      	ldr	r1, [r1, #0]
   da8be:	f001 fb9e 	bl	dbffe <strcpy>
			len = rhs.len;
   da8c2:	68a3      	ldr	r3, [r4, #8]
   da8c4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   da8c6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   da8c8:	60a3      	str	r3, [r4, #8]
}
   da8ca:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   da8cc:	f7fd fd5a 	bl	d8384 <free>
	buffer = rhs.buffer;
   da8d0:	6823      	ldr	r3, [r4, #0]
   da8d2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   da8d4:	6863      	ldr	r3, [r4, #4]
   da8d6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   da8d8:	68a3      	ldr	r3, [r4, #8]
   da8da:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   da8dc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   da8de:	e9c4 3300 	strd	r3, r3, [r4]
   da8e2:	e7f1      	b.n	da8c8 <_ZN6String4moveERS_+0x1e>

000da8e4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   da8e4:	b510      	push	{r4, lr}
	buffer = NULL;
   da8e6:	2300      	movs	r3, #0
	capacity = 0;
   da8e8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   da8ec:	4604      	mov	r4, r0
	len = 0;
   da8ee:	6083      	str	r3, [r0, #8]
	flags = 0;
   da8f0:	7303      	strb	r3, [r0, #12]
	move(rval);
   da8f2:	f7ff ffda 	bl	da8aa <_ZN6String4moveERS_>
}
   da8f6:	4620      	mov	r0, r4
   da8f8:	bd10      	pop	{r4, pc}

000da8fa <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da8fa:	4288      	cmp	r0, r1
{
   da8fc:	b510      	push	{r4, lr}
   da8fe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da900:	d005      	beq.n	da90e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da902:	680b      	ldr	r3, [r1, #0]
   da904:	b12b      	cbz	r3, da912 <_ZN6StringaSERKS_+0x18>
   da906:	688a      	ldr	r2, [r1, #8]
   da908:	4619      	mov	r1, r3
   da90a:	f7ff ffa1 	bl	da850 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da90e:	4620      	mov	r0, r4
   da910:	bd10      	pop	{r4, pc}
	else invalidate();
   da912:	f7ff ff72 	bl	da7fa <_ZN6String10invalidateEv>
   da916:	e7fa      	b.n	da90e <_ZN6StringaSERKS_+0x14>

000da918 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   da918:	b510      	push	{r4, lr}
	buffer = NULL;
   da91a:	2300      	movs	r3, #0
String::String(const String &value)
   da91c:	4604      	mov	r4, r0
	capacity = 0;
   da91e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   da922:	6083      	str	r3, [r0, #8]
	flags = 0;
   da924:	7303      	strb	r3, [r0, #12]
	*this = value;
   da926:	f7ff ffe8 	bl	da8fa <_ZN6StringaSERKS_>
}
   da92a:	4620      	mov	r0, r4
   da92c:	bd10      	pop	{r4, pc}

000da92e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da92e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da930:	6882      	ldr	r2, [r0, #8]
   da932:	b93a      	cbnz	r2, da944 <_ZNK6String6equalsEPKc+0x16>
   da934:	b121      	cbz	r1, da940 <_ZNK6String6equalsEPKc+0x12>
   da936:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   da938:	fab0 f080 	clz	r0, r0
   da93c:	0940      	lsrs	r0, r0, #5
   da93e:	e000      	b.n	da942 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da940:	2001      	movs	r0, #1
}
   da942:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   da944:	6800      	ldr	r0, [r0, #0]
   da946:	b909      	cbnz	r1, da94c <_ZNK6String6equalsEPKc+0x1e>
   da948:	7800      	ldrb	r0, [r0, #0]
   da94a:	e7f5      	b.n	da938 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   da94c:	f001 fb4d 	bl	dbfea <strcmp>
   da950:	e7f2      	b.n	da938 <_ZNK6String6equalsEPKc+0xa>

000da952 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   da952:	b558      	push	{r3, r4, r6, lr}
   da954:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   da956:	b12a      	cbz	r2, da964 <_ZNK6String8getBytesEPhjj+0x12>
   da958:	b121      	cbz	r1, da964 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   da95a:	6884      	ldr	r4, [r0, #8]
   da95c:	42a3      	cmp	r3, r4
   da95e:	d302      	bcc.n	da966 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   da960:	2300      	movs	r3, #0
   da962:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   da964:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   da966:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   da968:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   da96a:	6801      	ldr	r1, [r0, #0]
   da96c:	4294      	cmp	r4, r2
   da96e:	bf28      	it	cs
   da970:	4614      	movcs	r4, r2
   da972:	4419      	add	r1, r3
   da974:	4622      	mov	r2, r4
   da976:	4630      	mov	r0, r6
   da978:	f001 fb81 	bl	dc07e <strncpy>
	buf[n] = 0;
   da97c:	2300      	movs	r3, #0
   da97e:	5533      	strb	r3, [r6, r4]
   da980:	e7f0      	b.n	da964 <_ZNK6String8getBytesEPhjj+0x12>
	...

000da984 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   da984:	b40e      	push	{r1, r2, r3}
   da986:	b570      	push	{r4, r5, r6, lr}
   da988:	b087      	sub	sp, #28
   da98a:	ad0b      	add	r5, sp, #44	; 0x2c
   da98c:	4604      	mov	r4, r0
   da98e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da992:	9201      	str	r2, [sp, #4]
   da994:	462b      	mov	r3, r5
   da996:	2105      	movs	r1, #5
   da998:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   da99a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da99c:	f7fd fd12 	bl	d83c4 <vsnprintf>
    va_end(marker);

    String result;
   da9a0:	490b      	ldr	r1, [pc, #44]	; (da9d0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da9a2:	4606      	mov	r6, r0
    String result;
   da9a4:	4620      	mov	r0, r4
   da9a6:	f7ff ff6c 	bl	da882 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   da9aa:	4631      	mov	r1, r6
   da9ac:	4620      	mov	r0, r4
   da9ae:	f7ff ff3b 	bl	da828 <_ZN6String7reserveEj>
    if (result.buffer) {
   da9b2:	6820      	ldr	r0, [r4, #0]
   da9b4:	b130      	cbz	r0, da9c4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da9b6:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   da9b8:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da9ba:	462b      	mov	r3, r5
   da9bc:	1c71      	adds	r1, r6, #1
   da9be:	f7fd fd01 	bl	d83c4 <vsnprintf>
        va_end(marker);
        result.len = n;
   da9c2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   da9c4:	4620      	mov	r0, r4
   da9c6:	b007      	add	sp, #28
   da9c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da9cc:	b003      	add	sp, #12
   da9ce:	4770      	bx	lr
   da9d0:	000dce59 	.word	0x000dce59

000da9d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   da9d4:	b510      	push	{r4, lr}
   da9d6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   da9d8:	6800      	ldr	r0, [r0, #0]
   da9da:	b118      	cbz	r0, da9e4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   da9dc:	f7fd fcd2 	bl	d8384 <free>
            wakeupSource_ = nullptr;
   da9e0:	2300      	movs	r3, #0
   da9e2:	6023      	str	r3, [r4, #0]
        }
    }
   da9e4:	bd10      	pop	{r4, pc}

000da9e6 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da9e6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   da9e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   da9ec:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   da9ee:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da9f0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   da9f2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   da9f6:	f8c0 2006 	str.w	r2, [r0, #6]
   da9fa:	889b      	ldrh	r3, [r3, #4]
   da9fc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da9fe:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   daa00:	f7ff ffe8 	bl	da9d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   daa04:	682b      	ldr	r3, [r5, #0]
   daa06:	b113      	cbz	r3, daa0e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   daa08:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   daa0a:	2300      	movs	r3, #0
   daa0c:	602b      	str	r3, [r5, #0]
    }
   daa0e:	4620      	mov	r0, r4
   daa10:	bd38      	pop	{r3, r4, r5, pc}
	...

000daa14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   daa14:	b538      	push	{r3, r4, r5, lr}
   daa16:	460c      	mov	r4, r1
   daa18:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   daa1a:	f7ff ffdb 	bl	da9d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   daa1e:	b144      	cbz	r4, daa32 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   daa20:	8820      	ldrh	r0, [r4, #0]
   daa22:	f7fd fca7 	bl	d8374 <malloc>
   daa26:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   daa28:	b128      	cbz	r0, daa36 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   daa2a:	8822      	ldrh	r2, [r4, #0]
   daa2c:	4621      	mov	r1, r4
   daa2e:	f001 fa71 	bl	dbf14 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   daa32:	2000      	movs	r0, #0
    }
   daa34:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   daa36:	4801      	ldr	r0, [pc, #4]	; (daa3c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   daa38:	e7fc      	b.n	daa34 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   daa3a:	bf00      	nop
   daa3c:	fffffefc 	.word	0xfffffefc

000daa40 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   daa40:	b507      	push	{r0, r1, r2, lr}
   daa42:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   daa44:	2100      	movs	r1, #0
{
   daa46:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   daa48:	9100      	str	r1, [sp, #0]
   daa4a:	2001      	movs	r0, #1
   daa4c:	218c      	movs	r1, #140	; 0x8c
   daa4e:	f7fd fbb7 	bl	d81c0 <system_reset>
}
   daa52:	b003      	add	sp, #12
   daa54:	f85d fb04 	ldr.w	pc, [sp], #4

000daa58 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   daa58:	4601      	mov	r1, r0
    reset(0, flags);
   daa5a:	2000      	movs	r0, #0
   daa5c:	f7ff bff0 	b.w	daa40 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000daa60 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   daa60:	2000      	movs	r0, #0
   daa62:	f7ff bff9 	b.w	daa58 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000daa68 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   daa68:	b5f0      	push	{r4, r5, r6, r7, lr}
   daa6a:	4d2d      	ldr	r5, [pc, #180]	; (dab20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   daa6c:	7d0b      	ldrb	r3, [r1, #20]
   daa6e:	4604      	mov	r4, r0
   daa70:	b08b      	sub	sp, #44	; 0x2c
   daa72:	4608      	mov	r0, r1
   daa74:	1daf      	adds	r7, r5, #6
   daa76:	2b00      	cmp	r3, #0
   daa78:	d038      	beq.n	daaec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   daa7a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   daa7c:	791b      	ldrb	r3, [r3, #4]
   daa7e:	2b00      	cmp	r3, #0
   daa80:	d034      	beq.n	daaec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   daa82:	2200      	movs	r2, #0
    SleepResult() {}
   daa84:	4b27      	ldr	r3, [pc, #156]	; (dab24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   daa86:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   daa88:	a902      	add	r1, sp, #8
   daa8a:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   daa8c:	9202      	str	r2, [sp, #8]
   daa8e:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   daa92:	f88d 200e 	strb.w	r2, [sp, #14]
   daa96:	f7fd fb89 	bl	d81ac <system_sleep_ext>
        compatResult_ = result.compatResult_;
   daa9a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   daa9e:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   daaa2:	b200      	sxth	r0, r0
   daaa4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   daaa8:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   daaac:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   daaae:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   daab0:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   daab2:	4628      	mov	r0, r5
   daab4:	f7ff ffae 	bl	daa14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   daab8:	a802      	add	r0, sp, #8
   daaba:	f7ff ff8b 	bl	da9d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   daabe:	2300      	movs	r3, #0
   daac0:	6023      	str	r3, [r4, #0]
   daac2:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   daac4:	71a3      	strb	r3, [r4, #6]
   daac6:	8123      	strh	r3, [r4, #8]
   daac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   daacc:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   daace:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   daad2:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   daad4:	683b      	ldr	r3, [r7, #0]
   daad6:	f8c4 3006 	str.w	r3, [r4, #6]
   daada:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   daadc:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   daade:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   daae0:	4620      	mov	r0, r4
   daae2:	f7ff ff97 	bl	daa14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   daae6:	4620      	mov	r0, r4
   daae8:	b00b      	add	sp, #44	; 0x2c
   daaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   daaec:	2600      	movs	r6, #0
   daaee:	2320      	movs	r3, #32
   daaf0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   daaf4:	4b0c      	ldr	r3, [pc, #48]	; (dab28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   daaf6:	9300      	str	r3, [sp, #0]
   daaf8:	490c      	ldr	r1, [pc, #48]	; (dab2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   daafa:	4633      	mov	r3, r6
   daafc:	aa02      	add	r2, sp, #8
   daafe:	2032      	movs	r0, #50	; 0x32
   dab00:	f7fd fac4 	bl	d808c <log_message>
    SleepResult() {}
   dab04:	4b07      	ldr	r3, [pc, #28]	; (dab24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   dab06:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   dab08:	a902      	add	r1, sp, #8
        error_ = error;
   dab0a:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   dab0e:	4804      	ldr	r0, [pc, #16]	; (dab20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   dab10:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   dab12:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   dab16:	f8ad 300c 	strh.w	r3, [sp, #12]
   dab1a:	f7ff ff64 	bl	da9e6 <_ZN17SystemSleepResultaSEOS_>
   dab1e:	e7cb      	b.n	daab8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   dab20:	2003e580 	.word	0x2003e580
   dab24:	ffff0000 	.word	0xffff0000
   dab28:	000dcf2b 	.word	0x000dcf2b
   dab2c:	000dcf24 	.word	0x000dcf24

000dab30 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   dab30:	4b05      	ldr	r3, [pc, #20]	; (dab48 <_GLOBAL__sub_I_System+0x18>)
   dab32:	2202      	movs	r2, #2
   dab34:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   dab36:	4b05      	ldr	r3, [pc, #20]	; (dab4c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   dab38:	4a05      	ldr	r2, [pc, #20]	; (dab50 <_GLOBAL__sub_I_System+0x20>)
   dab3a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   dab3c:	2000      	movs	r0, #0
   dab3e:	6018      	str	r0, [r3, #0]
   dab40:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   dab42:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   dab44:	f7fd bad4 	b.w	d80f0 <set_system_mode>
   dab48:	2003e58c 	.word	0x2003e58c
   dab4c:	2003e580 	.word	0x2003e580
   dab50:	ffff0000 	.word	0xffff0000

000dab54 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dab54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   dab58:	4a15      	ldr	r2, [pc, #84]	; (dabb0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dab5a:	f8df 8060 	ldr.w	r8, [pc, #96]	; dabbc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   dab5e:	e9d2 3200 	ldrd	r3, r2, [r2]
   dab62:	18c0      	adds	r0, r0, r3
   dab64:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   dab68:	4a12      	ldr	r2, [pc, #72]	; (dabb4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   dab6a:	e9d2 3200 	ldrd	r3, r2, [r2]
   dab6e:	18c6      	adds	r6, r0, r3
   dab70:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   dab74:	e9d8 2300 	ldrd	r2, r3, [r8]
   dab78:	42bb      	cmp	r3, r7
   dab7a:	bf08      	it	eq
   dab7c:	42b2      	cmpeq	r2, r6
{
   dab7e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   dab80:	d013      	beq.n	dabaa <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   dab82:	a903      	add	r1, sp, #12
   dab84:	4668      	mov	r0, sp
   dab86:	e9cd 6700 	strd	r6, r7, [sp]
   dab8a:	f7fd fc43 	bl	d8414 <localtime_r>
	calendar_time.tm_year += 1900;
   dab8e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dab90:	4d09      	ldr	r5, [pc, #36]	; (dabb8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   dab92:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dab96:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   dab98:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dab9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dab9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dab9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   daba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   daba2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   daba6:	6823      	ldr	r3, [r4, #0]
   daba8:	602b      	str	r3, [r5, #0]
    }
}
   dabaa:	b00c      	add	sp, #48	; 0x30
   dabac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dabb0:	2003e5c8 	.word	0x2003e5c8
   dabb4:	2003e5c0 	.word	0x2003e5c0
   dabb8:	2003e598 	.word	0x2003e598
   dabbc:	2003e5d0 	.word	0x2003e5d0

000dabc0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   dabc0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dabc2:	2000      	movs	r0, #0
   dabc4:	f7fd fb4e 	bl	d8264 <spark_sync_time_pending>
   dabc8:	b128      	cbz	r0, dabd6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   dabca:	f7fd fb23 	bl	d8214 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   dabce:	f080 0001 	eor.w	r0, r0, #1
   dabd2:	b2c0      	uxtb	r0, r0
    }
   dabd4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   dabd6:	2001      	movs	r0, #1
   dabd8:	e7fc      	b.n	dabd4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000dabdc <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   dabdc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dabde:	f7ff ffb9 	bl	dab54 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   dabe2:	4b01      	ldr	r3, [pc, #4]	; (dabe8 <_ZN9TimeClass4hourEx+0xc>)
   dabe4:	6898      	ldr	r0, [r3, #8]
   dabe6:	bd08      	pop	{r3, pc}
   dabe8:	2003e598 	.word	0x2003e598

000dabec <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   dabec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dabee:	f7ff ffb1 	bl	dab54 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   dabf2:	4b01      	ldr	r3, [pc, #4]	; (dabf8 <_ZN9TimeClass3dayEx+0xc>)
   dabf4:	68d8      	ldr	r0, [r3, #12]
   dabf6:	bd08      	pop	{r3, pc}
   dabf8:	2003e598 	.word	0x2003e598

000dabfc <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
   dabfc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dabfe:	f7ff ffa9 	bl	dab54 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
   dac02:	4b02      	ldr	r3, [pc, #8]	; (dac0c <_ZN9TimeClass7weekdayEx+0x10>)
   dac04:	6998      	ldr	r0, [r3, #24]
}
   dac06:	3001      	adds	r0, #1
   dac08:	bd08      	pop	{r3, pc}
   dac0a:	bf00      	nop
   dac0c:	2003e598 	.word	0x2003e598

000dac10 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   dac10:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dac12:	f7ff ff9f 	bl	dab54 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   dac16:	4b02      	ldr	r3, [pc, #8]	; (dac20 <_ZN9TimeClass5monthEx+0x10>)
   dac18:	6918      	ldr	r0, [r3, #16]
}
   dac1a:	3001      	adds	r0, #1
   dac1c:	bd08      	pop	{r3, pc}
   dac1e:	bf00      	nop
   dac20:	2003e598 	.word	0x2003e598

000dac24 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dac24:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   dac28:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dac30:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dac32:	d411      	bmi.n	dac58 <_ZN9TimeClass4zoneEf+0x34>
   dac34:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   dac38:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dac3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dac40:	dc0a      	bgt.n	dac58 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   dac42:	eddf 7a06 	vldr	s15, [pc, #24]	; dac5c <_ZN9TimeClass4zoneEf+0x38>
   dac46:	ee60 7a27 	vmul.f32	s15, s0, s15
   dac4a:	ee17 0a90 	vmov	r0, s15
   dac4e:	f001 f8eb 	bl	dbe28 <__aeabi_f2lz>
   dac52:	4b03      	ldr	r3, [pc, #12]	; (dac60 <_ZN9TimeClass4zoneEf+0x3c>)
   dac54:	e9c3 0100 	strd	r0, r1, [r3]
}
   dac58:	bd08      	pop	{r3, pc}
   dac5a:	bf00      	nop
   dac5c:	45610000 	.word	0x45610000
   dac60:	2003e5c8 	.word	0x2003e5c8

000dac64 <_ZN9TimeClass12setDSTOffsetEf>:
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
    if (offset < 0 || offset > 2)
   dac64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   dac68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   dac6c:	b508      	push	{r3, lr}
    if (offset < 0 || offset > 2)
   dac6e:	d411      	bmi.n	dac94 <_ZN9TimeClass12setDSTOffsetEf+0x30>
   dac70:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   dac74:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dac78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dac7c:	dc0a      	bgt.n	dac94 <_ZN9TimeClass12setDSTOffsetEf+0x30>
    {
        return;
    }
    dst_cache = offset * 3600;
   dac7e:	eddf 7a06 	vldr	s15, [pc, #24]	; dac98 <_ZN9TimeClass12setDSTOffsetEf+0x34>
   dac82:	ee60 7a27 	vmul.f32	s15, s0, s15
   dac86:	ee17 0a90 	vmov	r0, s15
   dac8a:	f001 f8cd 	bl	dbe28 <__aeabi_f2lz>
   dac8e:	4b03      	ldr	r3, [pc, #12]	; (dac9c <_ZN9TimeClass12setDSTOffsetEf+0x38>)
   dac90:	e9c3 0100 	strd	r0, r1, [r3]
}
   dac94:	bd08      	pop	{r3, pc}
   dac96:	bf00      	nop
   dac98:	45610000 	.word	0x45610000
   dac9c:	2003e210 	.word	0x2003e210

000daca0 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
   daca0:	4b03      	ldr	r3, [pc, #12]	; (dacb0 <_ZN9TimeClass8beginDSTEv+0x10>)
   daca2:	e9d3 0100 	ldrd	r0, r1, [r3]
   daca6:	4b03      	ldr	r3, [pc, #12]	; (dacb4 <_ZN9TimeClass8beginDSTEv+0x14>)
   daca8:	e9c3 0100 	strd	r0, r1, [r3]
}
   dacac:	4770      	bx	lr
   dacae:	bf00      	nop
   dacb0:	2003e210 	.word	0x2003e210
   dacb4:	2003e5c0 	.word	0x2003e5c0

000dacb8 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
   dacb8:	4b02      	ldr	r3, [pc, #8]	; (dacc4 <_ZN9TimeClass6endDSTEv+0xc>)
   dacba:	2000      	movs	r0, #0
   dacbc:	2100      	movs	r1, #0
   dacbe:	e9c3 0100 	strd	r0, r1, [r3]
}
   dacc2:	4770      	bx	lr
   dacc4:	2003e5c0 	.word	0x2003e5c0

000dacc8 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   dacc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   dacca:	4602      	mov	r2, r0
   daccc:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dacce:	4668      	mov	r0, sp
    struct timeval tv = {
   dacd0:	2100      	movs	r1, #0
    };
   dacd2:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   dacd6:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   dacda:	f7fd f85f 	bl	d7d9c <hal_rtc_set_time>
   dacde:	4602      	mov	r2, r0
   dace0:	b910      	cbnz	r0, dace8 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   dace2:	4601      	mov	r1, r0
   dace4:	f7fd fa3c 	bl	d8160 <system_notify_time_changed>
    }
}
   dace8:	b005      	add	sp, #20
   dacea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dacf0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   dacf0:	b530      	push	{r4, r5, lr}
   dacf2:	4604      	mov	r4, r0
    t += time_zone_cache;
   dacf4:	4818      	ldr	r0, [pc, #96]	; (dad58 <_ZN9TimeClass7timeStrEx+0x68>)
   dacf6:	e9d0 1000 	ldrd	r1, r0, [r0]
   dacfa:	1852      	adds	r2, r2, r1
   dacfc:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   dad00:	4816      	ldr	r0, [pc, #88]	; (dad5c <_ZN9TimeClass7timeStrEx+0x6c>)
   dad02:	e9d0 1000 	ldrd	r1, r0, [r0]
   dad06:	1852      	adds	r2, r2, r1
{
   dad08:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   dad0a:	eb40 0303 	adc.w	r3, r0, r3
   dad0e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   dad12:	2224      	movs	r2, #36	; 0x24
   dad14:	eb0d 0002 	add.w	r0, sp, r2
   dad18:	2100      	movs	r1, #0
   dad1a:	f001 f923 	bl	dbf64 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   dad1e:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   dad20:	a909      	add	r1, sp, #36	; 0x24
   dad22:	4668      	mov	r0, sp
   dad24:	f7fd fb76 	bl	d8414 <localtime_r>
    char ascstr[26] = {};
   dad28:	2216      	movs	r2, #22
   dad2a:	4629      	mov	r1, r5
   dad2c:	a803      	add	r0, sp, #12
   dad2e:	9502      	str	r5, [sp, #8]
   dad30:	f001 f918 	bl	dbf64 <memset>
    asctime_r(&calendar_time, ascstr);
   dad34:	a902      	add	r1, sp, #8
   dad36:	a809      	add	r0, sp, #36	; 0x24
   dad38:	f001 f8aa 	bl	dbe90 <asctime_r>
    int len = strlen(ascstr);
   dad3c:	a802      	add	r0, sp, #8
   dad3e:	f001 f984 	bl	dc04a <strlen>
    ascstr[len-1] = 0; // remove final newline
   dad42:	ab12      	add	r3, sp, #72	; 0x48
   dad44:	4418      	add	r0, r3
    return String(ascstr);
   dad46:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   dad48:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   dad4c:	4620      	mov	r0, r4
   dad4e:	f7ff fd98 	bl	da882 <_ZN6StringC1EPKc>
}
   dad52:	4620      	mov	r0, r4
   dad54:	b013      	add	sp, #76	; 0x4c
   dad56:	bd30      	pop	{r4, r5, pc}
   dad58:	2003e5c8 	.word	0x2003e5c8
   dad5c:	2003e5c0 	.word	0x2003e5c0

000dad60 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   dad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dad64:	b0a5      	sub	sp, #148	; 0x94
   dad66:	4607      	mov	r7, r0
   dad68:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dad6a:	a814      	add	r0, sp, #80	; 0x50
{
   dad6c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dad6e:	223f      	movs	r2, #63	; 0x3f
{
   dad70:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   dad72:	f001 f984 	bl	dc07e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dad76:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dad78:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   dad7a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   dad7e:	f001 f964 	bl	dc04a <strlen>
   dad82:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   dad84:	bb5d      	cbnz	r5, dadde <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   dad86:	492a      	ldr	r1, [pc, #168]	; (dae30 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   dad88:	a803      	add	r0, sp, #12
   dad8a:	f001 f938 	bl	dbffe <strcpy>
   dad8e:	ae14      	add	r6, sp, #80	; 0x50
{
   dad90:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   dad92:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   dad96:	45ab      	cmp	fp, r5
   dad98:	d936      	bls.n	dae08 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   dad9a:	46b1      	mov	r9, r6
   dad9c:	f105 0a01 	add.w	sl, r5, #1
   dada0:	f819 3b01 	ldrb.w	r3, [r9], #1
   dada4:	2b25      	cmp	r3, #37	; 0x25
   dada6:	d117      	bne.n	dadd8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   dada8:	7873      	ldrb	r3, [r6, #1]
   dadaa:	2b7a      	cmp	r3, #122	; 0x7a
   dadac:	d114      	bne.n	dadd8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   dadae:	a803      	add	r0, sp, #12
   dadb0:	f001 f94b 	bl	dc04a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dadb4:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   dadb6:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   dadb8:	1828      	adds	r0, r5, r0
   dadba:	4418      	add	r0, r3
   dadbc:	ebab 0205 	sub.w	r2, fp, r5
   dadc0:	1cb1      	adds	r1, r6, #2
   dadc2:	f001 f8a7 	bl	dbf14 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   dadc6:	4622      	mov	r2, r4
   dadc8:	a903      	add	r1, sp, #12
   dadca:	4630      	mov	r0, r6
   dadcc:	f001 f8a2 	bl	dbf14 <memcpy>
            len = strlen(format_str);
   dadd0:	a814      	add	r0, sp, #80	; 0x50
   dadd2:	f001 f93a 	bl	dc04a <strlen>
   dadd6:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   dadd8:	464e      	mov	r6, r9
   dadda:	4655      	mov	r5, sl
   daddc:	e7d9      	b.n	dad92 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   dadde:	213c      	movs	r1, #60	; 0x3c
   dade0:	fb95 f3f1 	sdiv	r3, r5, r1
   dade4:	2b00      	cmp	r3, #0
   dade6:	bfb8      	it	lt
   dade8:	425b      	neglt	r3, r3
   dadea:	fbb3 f2f1 	udiv	r2, r3, r1
   dadee:	fb01 3312 	mls	r3, r1, r2, r3
   dadf2:	9300      	str	r3, [sp, #0]
   dadf4:	4a0f      	ldr	r2, [pc, #60]	; (dae34 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   dadf6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   dadfa:	2110      	movs	r1, #16
   dadfc:	a803      	add	r0, sp, #12
   dadfe:	fb95 f3f3 	sdiv	r3, r5, r3
   dae02:	f7fd fad7 	bl	d83b4 <snprintf>
   dae06:	e7c2      	b.n	dad8e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   dae08:	2100      	movs	r1, #0
   dae0a:	222e      	movs	r2, #46	; 0x2e
   dae0c:	a808      	add	r0, sp, #32
   dae0e:	9107      	str	r1, [sp, #28]
   dae10:	f001 f8a8 	bl	dbf64 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   dae14:	4643      	mov	r3, r8
   dae16:	aa14      	add	r2, sp, #80	; 0x50
   dae18:	2132      	movs	r1, #50	; 0x32
   dae1a:	a807      	add	r0, sp, #28
   dae1c:	f7fd faf2 	bl	d8404 <strftime>
    return String(buf);
   dae20:	a907      	add	r1, sp, #28
   dae22:	4638      	mov	r0, r7
   dae24:	f7ff fd2d 	bl	da882 <_ZN6StringC1EPKc>
}
   dae28:	4638      	mov	r0, r7
   dae2a:	b025      	add	sp, #148	; 0x94
   dae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dae30:	000dcf52 	.word	0x000dcf52
   dae34:	000dcf54 	.word	0x000dcf54

000dae38 <_ZN9TimeClass6formatExPKc>:
{
   dae38:	b5f0      	push	{r4, r5, r6, r7, lr}
   dae3a:	b08d      	sub	sp, #52	; 0x34
   dae3c:	e9cd 2300 	strd	r2, r3, [sp]
   dae40:	9d12      	ldr	r5, [sp, #72]	; 0x48
   dae42:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   dae44:	b915      	cbnz	r5, dae4c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   dae46:	4b19      	ldr	r3, [pc, #100]	; (daeac <_ZN9TimeClass6formatExPKc+0x74>)
   dae48:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   dae4a:	b12d      	cbz	r5, dae58 <_ZN9TimeClass6formatExPKc+0x20>
   dae4c:	4b18      	ldr	r3, [pc, #96]	; (daeb0 <_ZN9TimeClass6formatExPKc+0x78>)
   dae4e:	4628      	mov	r0, r5
   dae50:	6819      	ldr	r1, [r3, #0]
   dae52:	f001 f8ca 	bl	dbfea <strcmp>
   dae56:	b938      	cbnz	r0, dae68 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   dae58:	e9dd 2300 	ldrd	r2, r3, [sp]
   dae5c:	4620      	mov	r0, r4
   dae5e:	f7ff ff47 	bl	dacf0 <_ZN9TimeClass7timeStrEx>
}
   dae62:	4620      	mov	r0, r4
   dae64:	b00d      	add	sp, #52	; 0x34
   dae66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   dae68:	4e12      	ldr	r6, [pc, #72]	; (daeb4 <_ZN9TimeClass6formatExPKc+0x7c>)
   dae6a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   dae6c:	4f12      	ldr	r7, [pc, #72]	; (daeb8 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   dae6e:	e9d6 3200 	ldrd	r3, r2, [r6]
   dae72:	185b      	adds	r3, r3, r1
   dae74:	9901      	ldr	r1, [sp, #4]
   dae76:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dae7a:	e9d7 0100 	ldrd	r0, r1, [r7]
   dae7e:	181b      	adds	r3, r3, r0
   dae80:	eb41 0202 	adc.w	r2, r1, r2
   dae84:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   dae88:	2100      	movs	r1, #0
   dae8a:	2224      	movs	r2, #36	; 0x24
   dae8c:	a803      	add	r0, sp, #12
   dae8e:	f001 f869 	bl	dbf64 <memset>
    localtime_r(&t, &calendar_time);
   dae92:	a903      	add	r1, sp, #12
   dae94:	4668      	mov	r0, sp
   dae96:	f7fd fabd 	bl	d8414 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dae9a:	6832      	ldr	r2, [r6, #0]
   dae9c:	683b      	ldr	r3, [r7, #0]
   dae9e:	a903      	add	r1, sp, #12
   daea0:	4413      	add	r3, r2
   daea2:	4620      	mov	r0, r4
   daea4:	462a      	mov	r2, r5
   daea6:	f7ff ff5b 	bl	dad60 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   daeaa:	e7da      	b.n	dae62 <_ZN9TimeClass6formatExPKc+0x2a>
   daeac:	2003e594 	.word	0x2003e594
   daeb0:	2003e20c 	.word	0x2003e20c
   daeb4:	2003e5c8 	.word	0x2003e5c8
   daeb8:	2003e5c0 	.word	0x2003e5c0

000daebc <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   daebc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   daebe:	2000      	movs	r0, #0
   daec0:	f7fc ff54 	bl	d7d6c <hal_rtc_time_is_valid>
    if (rtcstate)
   daec4:	4604      	mov	r4, r0
   daec6:	b9a0      	cbnz	r0, daef2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   daec8:	f7fd f90a 	bl	d80e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   daecc:	2801      	cmp	r0, #1
   daece:	d110      	bne.n	daef2 <_ZN9TimeClass7isValidEv+0x36>
   daed0:	4620      	mov	r0, r4
   daed2:	f7fd f93d 	bl	d8150 <system_thread_get_state>
   daed6:	b960      	cbnz	r0, daef2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   daed8:	f7ff fe72 	bl	dabc0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   daedc:	b910      	cbnz	r0, daee4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   daede:	f7fd f989 	bl	d81f4 <spark_process>
        while (_while() && !_condition()) {
   daee2:	e7f9      	b.n	daed8 <_ZN9TimeClass7isValidEv+0x1c>
   daee4:	f7ff fe6c 	bl	dabc0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   daee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   daeec:	2000      	movs	r0, #0
   daeee:	f7fc bf3d 	b.w	d7d6c <hal_rtc_time_is_valid>
}
   daef2:	4620      	mov	r0, r4
   daef4:	bd10      	pop	{r4, pc}

000daef6 <_ZN9TimeClass3nowEv>:
{
   daef6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   daef8:	f7ff ffe0 	bl	daebc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   daefc:	2210      	movs	r2, #16
   daefe:	2100      	movs	r1, #0
   daf00:	4668      	mov	r0, sp
   daf02:	f001 f82f 	bl	dbf64 <memset>
    hal_rtc_get_time(&tv, nullptr);
   daf06:	2100      	movs	r1, #0
   daf08:	4668      	mov	r0, sp
   daf0a:	f7fc ff3f 	bl	d7d8c <hal_rtc_get_time>
}
   daf0e:	9800      	ldr	r0, [sp, #0]
   daf10:	b005      	add	sp, #20
   daf12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000daf18 <_ZN9TimeClass4hourEv>:
{
   daf18:	b508      	push	{r3, lr}
	return hour(now());
   daf1a:	f7ff ffec 	bl	daef6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   daf1e:	17c1      	asrs	r1, r0, #31
   daf20:	f7ff fe18 	bl	dab54 <_ZL22Refresh_UnixTime_Cachex>
}
   daf24:	4b01      	ldr	r3, [pc, #4]	; (daf2c <_ZN9TimeClass4hourEv+0x14>)
   daf26:	6898      	ldr	r0, [r3, #8]
   daf28:	bd08      	pop	{r3, pc}
   daf2a:	bf00      	nop
   daf2c:	2003e598 	.word	0x2003e598

000daf30 <_ZN9TimeClass6minuteEv>:
{
   daf30:	b508      	push	{r3, lr}
	return minute(now());
   daf32:	f7ff ffe0 	bl	daef6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   daf36:	17c1      	asrs	r1, r0, #31
   daf38:	f7ff fe0c 	bl	dab54 <_ZL22Refresh_UnixTime_Cachex>
}
   daf3c:	4b01      	ldr	r3, [pc, #4]	; (daf44 <_ZN9TimeClass6minuteEv+0x14>)
   daf3e:	6858      	ldr	r0, [r3, #4]
   daf40:	bd08      	pop	{r3, pc}
   daf42:	bf00      	nop
   daf44:	2003e598 	.word	0x2003e598

000daf48 <_ZN9TimeClass3dayEv>:
{
   daf48:	b508      	push	{r3, lr}
	return day(now());
   daf4a:	f7ff ffd4 	bl	daef6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   daf4e:	17c1      	asrs	r1, r0, #31
   daf50:	f7ff fe00 	bl	dab54 <_ZL22Refresh_UnixTime_Cachex>
}
   daf54:	4b01      	ldr	r3, [pc, #4]	; (daf5c <_ZN9TimeClass3dayEv+0x14>)
   daf56:	68d8      	ldr	r0, [r3, #12]
   daf58:	bd08      	pop	{r3, pc}
   daf5a:	bf00      	nop
   daf5c:	2003e598 	.word	0x2003e598

000daf60 <_ZN9TimeClass7weekdayEv>:
{
   daf60:	b508      	push	{r3, lr}
	return weekday(now());
   daf62:	f7ff ffc8 	bl	daef6 <_ZN9TimeClass3nowEv>
}
   daf66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
   daf6a:	17c1      	asrs	r1, r0, #31
   daf6c:	f7ff be46 	b.w	dabfc <_ZN9TimeClass7weekdayEx>

000daf70 <_ZN9TimeClass5monthEv>:
{
   daf70:	b508      	push	{r3, lr}
	return month(now());
   daf72:	f7ff ffc0 	bl	daef6 <_ZN9TimeClass3nowEv>
}
   daf76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   daf7a:	17c1      	asrs	r1, r0, #31
   daf7c:	f7ff be48 	b.w	dac10 <_ZN9TimeClass5monthEx>

000daf80 <_ZN9TimeClass5localEv>:
{
   daf80:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
   daf82:	f7ff ffb8 	bl	daef6 <_ZN9TimeClass3nowEv>
   daf86:	4b03      	ldr	r3, [pc, #12]	; (daf94 <_ZN9TimeClass5localEv+0x14>)
   daf88:	4a03      	ldr	r2, [pc, #12]	; (daf98 <_ZN9TimeClass5localEv+0x18>)
   daf8a:	681b      	ldr	r3, [r3, #0]
   daf8c:	6812      	ldr	r2, [r2, #0]
   daf8e:	4413      	add	r3, r2
}
   daf90:	4418      	add	r0, r3
   daf92:	bd08      	pop	{r3, pc}
   daf94:	2003e5c8 	.word	0x2003e5c8
   daf98:	2003e5c0 	.word	0x2003e5c0

000daf9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   daf9c:	4b02      	ldr	r3, [pc, #8]	; (dafa8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   daf9e:	681a      	ldr	r2, [r3, #0]
   dafa0:	4b02      	ldr	r3, [pc, #8]	; (dafac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dafa2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   dafa4:	4770      	bx	lr
   dafa6:	bf00      	nop
   dafa8:	2003e20c 	.word	0x2003e20c
   dafac:	2003e594 	.word	0x2003e594

000dafb0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   dafb0:	4770      	bx	lr

000dafb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dafb2:	7441      	strb	r1, [r0, #17]
}
   dafb4:	4770      	bx	lr

000dafb6 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dafb6:	4770      	bx	lr

000dafb8 <_ZN11USARTSerial17availableForWriteEv>:
{
   dafb8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   dafba:	7c00      	ldrb	r0, [r0, #16]
   dafbc:	f7fd f80e 	bl	d7fdc <hal_usart_available_data_for_write>
}
   dafc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafc4:	bd08      	pop	{r3, pc}

000dafc6 <_ZN11USARTSerial9availableEv>:
{
   dafc6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dafc8:	7c00      	ldrb	r0, [r0, #16]
   dafca:	f7fc ffdf 	bl	d7f8c <hal_usart_available>
}
   dafce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafd2:	bd08      	pop	{r3, pc}

000dafd4 <_ZN11USARTSerial4peekEv>:
{
   dafd4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dafd6:	7c00      	ldrb	r0, [r0, #16]
   dafd8:	f7fc ffe8 	bl	d7fac <hal_usart_peek>
}
   dafdc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dafe0:	bd08      	pop	{r3, pc}

000dafe2 <_ZN11USARTSerial4readEv>:
{
   dafe2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dafe4:	7c00      	ldrb	r0, [r0, #16]
   dafe6:	f7fc ffd9 	bl	d7f9c <hal_usart_read>
}
   dafea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dafee:	bd08      	pop	{r3, pc}

000daff0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   daff0:	7c00      	ldrb	r0, [r0, #16]
   daff2:	f7fc bfe3 	b.w	d7fbc <hal_usart_flush>

000daff6 <_ZN11USARTSerial5writeEh>:
{
   daff6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daff8:	7c45      	ldrb	r5, [r0, #17]
{
   daffa:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   daffc:	b12d      	cbz	r5, db00a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   daffe:	7c20      	ldrb	r0, [r4, #16]
}
   db000:	b003      	add	sp, #12
   db002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   db006:	f7fc bfb9 	b.w	d7f7c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db00a:	7c00      	ldrb	r0, [r0, #16]
   db00c:	9101      	str	r1, [sp, #4]
   db00e:	f7fc ffe5 	bl	d7fdc <hal_usart_available_data_for_write>
   db012:	2800      	cmp	r0, #0
   db014:	9901      	ldr	r1, [sp, #4]
   db016:	dcf2      	bgt.n	daffe <_ZN11USARTSerial5writeEh+0x8>
}
   db018:	4628      	mov	r0, r5
   db01a:	b003      	add	sp, #12
   db01c:	bd30      	pop	{r4, r5, pc}

000db01e <_ZN11USARTSerialD0Ev>:
   db01e:	b510      	push	{r4, lr}
   db020:	2114      	movs	r1, #20
   db022:	4604      	mov	r4, r0
   db024:	f000 fa90 	bl	db548 <_ZdlPvj>
   db028:	4620      	mov	r0, r4
   db02a:	bd10      	pop	{r4, pc}

000db02c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db02c:	b510      	push	{r4, lr}
   db02e:	f04f 0c00 	mov.w	ip, #0
   db032:	4604      	mov	r4, r0
   db034:	4608      	mov	r0, r1
   db036:	4611      	mov	r1, r2
   db038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db03c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db040:	4a04      	ldr	r2, [pc, #16]	; (db054 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db042:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db044:	2201      	movs	r2, #1
  _serial = serial;
   db046:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db048:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db04a:	461a      	mov	r2, r3
   db04c:	f7fc ff86 	bl	d7f5c <hal_usart_init>
}
   db050:	4620      	mov	r0, r4
   db052:	bd10      	pop	{r4, pc}
   db054:	000dcf84 	.word	0x000dcf84

000db058 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   db058:	7c00      	ldrb	r0, [r0, #16]
   db05a:	2300      	movs	r3, #0
   db05c:	f7fc bfc6 	b.w	d7fec <hal_usart_begin_config>

000db060 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   db060:	2200      	movs	r2, #0
   db062:	f7ff bff9 	b.w	db058 <_ZN11USARTSerial5beginEmm>

000db066 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   db066:	7c00      	ldrb	r0, [r0, #16]
   db068:	f7fc bf80 	b.w	d7f6c <hal_usart_end>

000db06c <_Z22__fetch_global_Serial1v>:
{
   db06c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db06e:	4c0d      	ldr	r4, [pc, #52]	; (db0a4 <_Z22__fetch_global_Serial1v+0x38>)
   db070:	7821      	ldrb	r1, [r4, #0]
   db072:	f3bf 8f5b 	dmb	ish
   db076:	f011 0101 	ands.w	r1, r1, #1
   db07a:	d110      	bne.n	db09e <_Z22__fetch_global_Serial1v+0x32>
   db07c:	4620      	mov	r0, r4
   db07e:	9101      	str	r1, [sp, #4]
   db080:	f7f9 f81a 	bl	d40b8 <__cxa_guard_acquire>
   db084:	9901      	ldr	r1, [sp, #4]
   db086:	b150      	cbz	r0, db09e <_Z22__fetch_global_Serial1v+0x32>
   db088:	4b07      	ldr	r3, [pc, #28]	; (db0a8 <_Z22__fetch_global_Serial1v+0x3c>)
   db08a:	4a08      	ldr	r2, [pc, #32]	; (db0ac <_Z22__fetch_global_Serial1v+0x40>)
   db08c:	4808      	ldr	r0, [pc, #32]	; (db0b0 <_Z22__fetch_global_Serial1v+0x44>)
   db08e:	f7ff ffcd 	bl	db02c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db092:	4620      	mov	r0, r4
   db094:	f7f9 f815 	bl	d40c2 <__cxa_guard_release>
   db098:	4806      	ldr	r0, [pc, #24]	; (db0b4 <_Z22__fetch_global_Serial1v+0x48>)
   db09a:	f000 ff1f 	bl	dbedc <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db09e:	4804      	ldr	r0, [pc, #16]	; (db0b0 <_Z22__fetch_global_Serial1v+0x44>)
   db0a0:	b002      	add	sp, #8
   db0a2:	bd10      	pop	{r4, pc}
   db0a4:	2003e5d8 	.word	0x2003e5d8
   db0a8:	2003e660 	.word	0x2003e660
   db0ac:	2003e5dc 	.word	0x2003e5dc
   db0b0:	2003e6e4 	.word	0x2003e6e4
   db0b4:	000dafb7 	.word	0x000dafb7

000db0b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db0b8:	7441      	strb	r1, [r0, #17]
}
   db0ba:	4770      	bx	lr

000db0bc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db0bc:	4770      	bx	lr

000db0be <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db0be:	4770      	bx	lr

000db0c0 <_ZN9USBSerial4readEv>:
{
   db0c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db0c2:	2100      	movs	r1, #0
   db0c4:	7c00      	ldrb	r0, [r0, #16]
   db0c6:	f7fc ffc1 	bl	d804c <HAL_USB_USART_Receive_Data>
}
   db0ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db0ce:	bd08      	pop	{r3, pc}

000db0d0 <_ZN9USBSerial4peekEv>:
{
   db0d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db0d2:	2101      	movs	r1, #1
   db0d4:	7c00      	ldrb	r0, [r0, #16]
   db0d6:	f7fc ffb9 	bl	d804c <HAL_USB_USART_Receive_Data>
}
   db0da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db0de:	bd08      	pop	{r3, pc}

000db0e0 <_ZN9USBSerial17availableForWriteEv>:
{
   db0e0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db0e2:	7c00      	ldrb	r0, [r0, #16]
   db0e4:	f7fc ffaa 	bl	d803c <HAL_USB_USART_Available_Data_For_Write>
}
   db0e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db0ec:	bd08      	pop	{r3, pc}

000db0ee <_ZN9USBSerial9availableEv>:
{
   db0ee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db0f0:	7c00      	ldrb	r0, [r0, #16]
   db0f2:	f7fc ff9b 	bl	d802c <HAL_USB_USART_Available_Data>
}
   db0f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db0fa:	bd08      	pop	{r3, pc}

000db0fc <_ZN9USBSerial5writeEh>:
{
   db0fc:	b513      	push	{r0, r1, r4, lr}
   db0fe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db100:	7c00      	ldrb	r0, [r0, #16]
{
   db102:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db104:	f7fc ff9a 	bl	d803c <HAL_USB_USART_Available_Data_For_Write>
   db108:	2800      	cmp	r0, #0
   db10a:	9901      	ldr	r1, [sp, #4]
   db10c:	dc01      	bgt.n	db112 <_ZN9USBSerial5writeEh+0x16>
   db10e:	7c60      	ldrb	r0, [r4, #17]
   db110:	b120      	cbz	r0, db11c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db112:	7c20      	ldrb	r0, [r4, #16]
   db114:	f7fc ffa2 	bl	d805c <HAL_USB_USART_Send_Data>
   db118:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db11c:	b002      	add	sp, #8
   db11e:	bd10      	pop	{r4, pc}

000db120 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db120:	7c00      	ldrb	r0, [r0, #16]
   db122:	f7fc bfa3 	b.w	d806c <HAL_USB_USART_Flush_Data>

000db126 <_ZN9USBSerialD0Ev>:
   db126:	b510      	push	{r4, lr}
   db128:	2114      	movs	r1, #20
   db12a:	4604      	mov	r4, r0
   db12c:	f000 fa0c 	bl	db548 <_ZdlPvj>
   db130:	4620      	mov	r0, r4
   db132:	bd10      	pop	{r4, pc}

000db134 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db134:	b510      	push	{r4, lr}
   db136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db13a:	4604      	mov	r4, r0
   db13c:	4608      	mov	r0, r1
   db13e:	2100      	movs	r1, #0
   db140:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db144:	4b04      	ldr	r3, [pc, #16]	; (db158 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db146:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db148:	2301      	movs	r3, #1
  _serial = serial;
   db14a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db14c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db14e:	4611      	mov	r1, r2
   db150:	f7fc ff54 	bl	d7ffc <HAL_USB_USART_Init>
}
   db154:	4620      	mov	r0, r4
   db156:	bd10      	pop	{r4, pc}
   db158:	000dcfb4 	.word	0x000dcfb4

000db15c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db15c:	7c00      	ldrb	r0, [r0, #16]
   db15e:	2200      	movs	r2, #0
   db160:	f7fc bf54 	b.w	d800c <HAL_USB_USART_Begin>

000db164 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   db164:	7c00      	ldrb	r0, [r0, #16]
   db166:	f7fc bf59 	b.w	d801c <HAL_USB_USART_End>

000db16a <_Z19acquireSerialBufferv>:
{
   db16a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db16c:	2214      	movs	r2, #20
{
   db16e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db170:	2100      	movs	r1, #0
   db172:	f000 fef7 	bl	dbf64 <memset>
}
   db176:	4620      	mov	r0, r4
   db178:	bd10      	pop	{r4, pc}
	...

000db17c <_Z16_fetch_usbserialv>:
{
   db17c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db17e:	4c0f      	ldr	r4, [pc, #60]	; (db1bc <_Z16_fetch_usbserialv+0x40>)
{
   db180:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db182:	a803      	add	r0, sp, #12
   db184:	f7ff fff1 	bl	db16a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db188:	7821      	ldrb	r1, [r4, #0]
   db18a:	f3bf 8f5b 	dmb	ish
   db18e:	f011 0101 	ands.w	r1, r1, #1
   db192:	d10f      	bne.n	db1b4 <_Z16_fetch_usbserialv+0x38>
   db194:	4620      	mov	r0, r4
   db196:	9101      	str	r1, [sp, #4]
   db198:	f7f8 ff8e 	bl	d40b8 <__cxa_guard_acquire>
   db19c:	9901      	ldr	r1, [sp, #4]
   db19e:	b148      	cbz	r0, db1b4 <_Z16_fetch_usbserialv+0x38>
   db1a0:	aa03      	add	r2, sp, #12
   db1a2:	4807      	ldr	r0, [pc, #28]	; (db1c0 <_Z16_fetch_usbserialv+0x44>)
   db1a4:	f7ff ffc6 	bl	db134 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db1a8:	4620      	mov	r0, r4
   db1aa:	f7f8 ff8a 	bl	d40c2 <__cxa_guard_release>
   db1ae:	4805      	ldr	r0, [pc, #20]	; (db1c4 <_Z16_fetch_usbserialv+0x48>)
   db1b0:	f000 fe94 	bl	dbedc <atexit>
	return _usbserial;
}
   db1b4:	4802      	ldr	r0, [pc, #8]	; (db1c0 <_Z16_fetch_usbserialv+0x44>)
   db1b6:	b008      	add	sp, #32
   db1b8:	bd10      	pop	{r4, pc}
   db1ba:	bf00      	nop
   db1bc:	2003e6f8 	.word	0x2003e6f8
   db1c0:	2003e6fc 	.word	0x2003e6fc
   db1c4:	000db0bd 	.word	0x000db0bd

000db1c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db1c8:	4b01      	ldr	r3, [pc, #4]	; (db1d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db1ca:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db1cc:	4770      	bx	lr
   db1ce:	bf00      	nop
   db1d0:	2003e218 	.word	0x2003e218

000db1d4 <serialEventRun>:
{
   db1d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db1d6:	4b0b      	ldr	r3, [pc, #44]	; (db204 <serialEventRun+0x30>)
   db1d8:	b143      	cbz	r3, db1ec <serialEventRun+0x18>
   db1da:	f7ff ffcf 	bl	db17c <_Z16_fetch_usbserialv>
   db1de:	6803      	ldr	r3, [r0, #0]
   db1e0:	691b      	ldr	r3, [r3, #16]
   db1e2:	4798      	blx	r3
   db1e4:	2800      	cmp	r0, #0
   db1e6:	dd01      	ble.n	db1ec <serialEventRun+0x18>
        serialEvent();
   db1e8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db1ec:	4b06      	ldr	r3, [pc, #24]	; (db208 <serialEventRun+0x34>)
   db1ee:	b143      	cbz	r3, db202 <serialEventRun+0x2e>
   db1f0:	f7ff ff3c 	bl	db06c <_Z22__fetch_global_Serial1v>
   db1f4:	6803      	ldr	r3, [r0, #0]
   db1f6:	691b      	ldr	r3, [r3, #16]
   db1f8:	4798      	blx	r3
   db1fa:	2800      	cmp	r0, #0
   db1fc:	dd01      	ble.n	db202 <serialEventRun+0x2e>
        serialEvent1();
   db1fe:	f3af 8000 	nop.w
}
   db202:	bd08      	pop	{r3, pc}
	...

000db20c <_post_loop>:
{
   db20c:	b508      	push	{r3, lr}
	serialEventRun();
   db20e:	f7ff ffe1 	bl	db1d4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db212:	f7fc fda3 	bl	d7d5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db216:	4b01      	ldr	r3, [pc, #4]	; (db21c <_post_loop+0x10>)
   db218:	6018      	str	r0, [r3, #0]
}
   db21a:	bd08      	pop	{r3, pc}
   db21c:	2003e724 	.word	0x2003e724

000db220 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db220:	4805      	ldr	r0, [pc, #20]	; (db238 <_Z33system_initialize_user_backup_ramv+0x18>)
   db222:	4a06      	ldr	r2, [pc, #24]	; (db23c <_Z33system_initialize_user_backup_ramv+0x1c>)
   db224:	4906      	ldr	r1, [pc, #24]	; (db240 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   db226:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db228:	1a12      	subs	r2, r2, r0
   db22a:	f000 fe73 	bl	dbf14 <memcpy>
    __backup_sram_signature = signature;
   db22e:	4b05      	ldr	r3, [pc, #20]	; (db244 <_Z33system_initialize_user_backup_ramv+0x24>)
   db230:	4a05      	ldr	r2, [pc, #20]	; (db248 <_Z33system_initialize_user_backup_ramv+0x28>)
   db232:	601a      	str	r2, [r3, #0]
}
   db234:	bd08      	pop	{r3, pc}
   db236:	bf00      	nop
   db238:	2003f400 	.word	0x2003f400
   db23c:	2003fc04 	.word	0x2003fc04
   db240:	000dd170 	.word	0x000dd170
   db244:	2003fc00 	.word	0x2003fc00
   db248:	9a271c1e 	.word	0x9a271c1e

000db24c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db24c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db24e:	2300      	movs	r3, #0
   db250:	9300      	str	r3, [sp, #0]
   db252:	461a      	mov	r2, r3
   db254:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db258:	f7fc ff94 	bl	d8184 <system_ctrl_set_result>
}
   db25c:	b003      	add	sp, #12
   db25e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db264 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db264:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db266:	8843      	ldrh	r3, [r0, #2]
   db268:	2b0a      	cmp	r3, #10
   db26a:	d008      	beq.n	db27e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db26c:	2b50      	cmp	r3, #80	; 0x50
   db26e:	d10b      	bne.n	db288 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db270:	4b09      	ldr	r3, [pc, #36]	; (db298 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db272:	681b      	ldr	r3, [r3, #0]
   db274:	b14b      	cbz	r3, db28a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db276:	b003      	add	sp, #12
   db278:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db27c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db27e:	f7ff ffe5 	bl	db24c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db282:	b003      	add	sp, #12
   db284:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db288:	2300      	movs	r3, #0
   db28a:	9300      	str	r3, [sp, #0]
   db28c:	461a      	mov	r2, r3
   db28e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db292:	f7fc ff77 	bl	d8184 <system_ctrl_set_result>
}
   db296:	e7f4      	b.n	db282 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db298:	2003e714 	.word	0x2003e714

000db29c <module_user_init_hook>:
{
   db29c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db29e:	4812      	ldr	r0, [pc, #72]	; (db2e8 <module_user_init_hook+0x4c>)
   db2a0:	2100      	movs	r1, #0
   db2a2:	f7fd f8a7 	bl	d83f4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   db2a6:	4b11      	ldr	r3, [pc, #68]	; (db2ec <module_user_init_hook+0x50>)
   db2a8:	681a      	ldr	r2, [r3, #0]
   db2aa:	4b11      	ldr	r3, [pc, #68]	; (db2f0 <module_user_init_hook+0x54>)
   db2ac:	429a      	cmp	r2, r3
   db2ae:	4b11      	ldr	r3, [pc, #68]	; (db2f4 <module_user_init_hook+0x58>)
   db2b0:	bf0c      	ite	eq
   db2b2:	2201      	moveq	r2, #1
   db2b4:	2200      	movne	r2, #0
   db2b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db2b8:	d001      	beq.n	db2be <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   db2ba:	f7ff ffb1 	bl	db220 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db2be:	f7fc fd35 	bl	d7d2c <HAL_RNG_GetRandomNumber>
   db2c2:	4604      	mov	r4, r0
    srand(seed);
   db2c4:	f000 fe56 	bl	dbf74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db2c8:	4b0b      	ldr	r3, [pc, #44]	; (db2f8 <module_user_init_hook+0x5c>)
   db2ca:	b113      	cbz	r3, db2d2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   db2cc:	4620      	mov	r0, r4
   db2ce:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db2d2:	2100      	movs	r1, #0
   db2d4:	4808      	ldr	r0, [pc, #32]	; (db2f8 <module_user_init_hook+0x5c>)
   db2d6:	f7fc ffdd 	bl	d8294 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db2de:	4807      	ldr	r0, [pc, #28]	; (db2fc <module_user_init_hook+0x60>)
   db2e0:	2100      	movs	r1, #0
   db2e2:	f7fc bf45 	b.w	d8170 <system_ctrl_set_app_request_handler>
   db2e6:	bf00      	nop
   db2e8:	000db1c9 	.word	0x000db1c9
   db2ec:	2003fc00 	.word	0x2003fc00
   db2f0:	9a271c1e 	.word	0x9a271c1e
   db2f4:	2003e710 	.word	0x2003e710
   db2f8:	00000000 	.word	0x00000000
   db2fc:	000db265 	.word	0x000db265

000db300 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   db300:	b508      	push	{r3, lr}
   db302:	4b02      	ldr	r3, [pc, #8]	; (db30c <spark_protocol_instance+0xc>)
   db304:	681b      	ldr	r3, [r3, #0]
   db306:	681b      	ldr	r3, [r3, #0]
   db308:	9301      	str	r3, [sp, #4]
   db30a:	bd08      	pop	{r3, pc}
   db30c:	0003025c 	.word	0x0003025c

000db310 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   db310:	b508      	push	{r3, lr}
   db312:	4b02      	ldr	r3, [pc, #8]	; (db31c <spark_protocol_set_product_id+0xc>)
   db314:	681b      	ldr	r3, [r3, #0]
   db316:	685b      	ldr	r3, [r3, #4]
   db318:	9301      	str	r3, [sp, #4]
   db31a:	bd08      	pop	{r3, pc}
   db31c:	0003025c 	.word	0x0003025c

000db320 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   db320:	b508      	push	{r3, lr}
   db322:	4b02      	ldr	r3, [pc, #8]	; (db32c <spark_protocol_set_product_firmware_version+0xc>)
   db324:	681b      	ldr	r3, [r3, #0]
   db326:	689b      	ldr	r3, [r3, #8]
   db328:	9301      	str	r3, [sp, #4]
   db32a:	bd08      	pop	{r3, pc}
   db32c:	0003025c 	.word	0x0003025c

000db330 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db330:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db332:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db334:	d902      	bls.n	db33c <pinAvailable+0xc>
    return false;
   db336:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db338:	b002      	add	sp, #8
   db33a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db33c:	f1a0 030b 	sub.w	r3, r0, #11
   db340:	2b02      	cmp	r3, #2
   db342:	d81a      	bhi.n	db37a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db344:	4c17      	ldr	r4, [pc, #92]	; (db3a4 <pinAvailable+0x74>)
   db346:	7821      	ldrb	r1, [r4, #0]
   db348:	f3bf 8f5b 	dmb	ish
   db34c:	f011 0101 	ands.w	r1, r1, #1
   db350:	d10b      	bne.n	db36a <pinAvailable+0x3a>
   db352:	4620      	mov	r0, r4
   db354:	9101      	str	r1, [sp, #4]
   db356:	f7f8 feaf 	bl	d40b8 <__cxa_guard_acquire>
   db35a:	9901      	ldr	r1, [sp, #4]
   db35c:	b128      	cbz	r0, db36a <pinAvailable+0x3a>
   db35e:	4812      	ldr	r0, [pc, #72]	; (db3a8 <pinAvailable+0x78>)
   db360:	f7ff fa3a 	bl	da7d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   db364:	4620      	mov	r0, r4
   db366:	f7f8 feac 	bl	d40c2 <__cxa_guard_release>
   db36a:	4b0f      	ldr	r3, [pc, #60]	; (db3a8 <pinAvailable+0x78>)
   db36c:	7818      	ldrb	r0, [r3, #0]
   db36e:	f7fc fded 	bl	d7f4c <hal_spi_is_enabled>
   db372:	2800      	cmp	r0, #0
   db374:	d1df      	bne.n	db336 <pinAvailable+0x6>
  return true; // 'pin' is available
   db376:	2001      	movs	r0, #1
   db378:	e7de      	b.n	db338 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db37a:	2801      	cmp	r0, #1
   db37c:	d809      	bhi.n	db392 <pinAvailable+0x62>
   db37e:	f000 f89b 	bl	db4b8 <_Z19__fetch_global_Wirev>
   db382:	2100      	movs	r1, #0
   db384:	7c00      	ldrb	r0, [r0, #16]
   db386:	f7fc fd99 	bl	d7ebc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db38a:	f080 0001 	eor.w	r0, r0, #1
   db38e:	b2c0      	uxtb	r0, r0
   db390:	e7d2      	b.n	db338 <pinAvailable+0x8>
   db392:	3809      	subs	r0, #9
   db394:	2801      	cmp	r0, #1
   db396:	d8ee      	bhi.n	db376 <pinAvailable+0x46>
   db398:	f7ff fe68 	bl	db06c <_Z22__fetch_global_Serial1v>
   db39c:	7c00      	ldrb	r0, [r0, #16]
   db39e:	f7fc fe15 	bl	d7fcc <hal_usart_is_enabled>
   db3a2:	e7f2      	b.n	db38a <pinAvailable+0x5a>
   db3a4:	2003e718 	.word	0x2003e718
   db3a8:	2003e71c 	.word	0x2003e71c

000db3ac <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db3ac:	2823      	cmp	r0, #35	; 0x23
{
   db3ae:	b538      	push	{r3, r4, r5, lr}
   db3b0:	4604      	mov	r4, r0
   db3b2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db3b4:	d80a      	bhi.n	db3cc <pinMode+0x20>
   db3b6:	29ff      	cmp	r1, #255	; 0xff
   db3b8:	d008      	beq.n	db3cc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db3ba:	f7ff ffb9 	bl	db330 <pinAvailable>
   db3be:	b128      	cbz	r0, db3cc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db3c0:	4629      	mov	r1, r5
   db3c2:	4620      	mov	r0, r4
}
   db3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db3c8:	f7fc bd00 	b.w	d7dcc <HAL_Pin_Mode>
}
   db3cc:	bd38      	pop	{r3, r4, r5, pc}

000db3ce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db3ce:	b538      	push	{r3, r4, r5, lr}
   db3d0:	4604      	mov	r4, r0
   db3d2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db3d4:	f7fc fd02 	bl	d7ddc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db3d8:	28ff      	cmp	r0, #255	; 0xff
   db3da:	d010      	beq.n	db3fe <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db3dc:	2806      	cmp	r0, #6
   db3de:	d804      	bhi.n	db3ea <digitalWrite+0x1c>
   db3e0:	234d      	movs	r3, #77	; 0x4d
   db3e2:	fa23 f000 	lsr.w	r0, r3, r0
   db3e6:	07c3      	lsls	r3, r0, #31
   db3e8:	d409      	bmi.n	db3fe <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db3ea:	4620      	mov	r0, r4
   db3ec:	f7ff ffa0 	bl	db330 <pinAvailable>
   db3f0:	b128      	cbz	r0, db3fe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db3f2:	4629      	mov	r1, r5
   db3f4:	4620      	mov	r0, r4
}
   db3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db3fa:	f7fc bcf7 	b.w	d7dec <HAL_GPIO_Write>
}
   db3fe:	bd38      	pop	{r3, r4, r5, pc}

000db400 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   db400:	b510      	push	{r4, lr}
   db402:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db404:	f7fc fcea 	bl	d7ddc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   db408:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   db40a:	b2db      	uxtb	r3, r3
   db40c:	2b01      	cmp	r3, #1
   db40e:	d908      	bls.n	db422 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   db410:	4620      	mov	r0, r4
   db412:	f7ff ff8d 	bl	db330 <pinAvailable>
   db416:	b120      	cbz	r0, db422 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   db418:	4620      	mov	r0, r4
}
   db41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   db41e:	f7fc bced 	b.w	d7dfc <HAL_GPIO_Read>
}
   db422:	2000      	movs	r0, #0
   db424:	bd10      	pop	{r4, pc}

000db426 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db426:	280d      	cmp	r0, #13
{
   db428:	b510      	push	{r4, lr}
   db42a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   db42c:	bf9c      	itt	ls
   db42e:	340e      	addls	r4, #14
   db430:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db432:	4620      	mov	r0, r4
   db434:	f7ff ff7c 	bl	db330 <pinAvailable>
   db438:	b150      	cbz	r0, db450 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db43a:	2103      	movs	r1, #3
   db43c:	4620      	mov	r0, r4
   db43e:	f7fc fcbd 	bl	d7dbc <HAL_Validate_Pin_Function>
   db442:	2803      	cmp	r0, #3
   db444:	d104      	bne.n	db450 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   db446:	4620      	mov	r0, r4
}
   db448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   db44c:	f7fc bcee 	b.w	d7e2c <hal_adc_read>
}
   db450:	2000      	movs	r0, #0
   db452:	bd10      	pop	{r4, pc}

000db454 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db454:	4770      	bx	lr

000db456 <__tcf_1>:
   db456:	4770      	bx	lr

000db458 <_Z17acquireWireBufferv>:
{
   db458:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   db45a:	2300      	movs	r3, #0
   db45c:	2520      	movs	r5, #32
   db45e:	8043      	strh	r3, [r0, #2]
   db460:	2314      	movs	r3, #20
{
   db462:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   db464:	8003      	strh	r3, [r0, #0]
   db466:	6085      	str	r5, [r0, #8]
   db468:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db46a:	4906      	ldr	r1, [pc, #24]	; (db484 <_Z17acquireWireBufferv+0x2c>)
   db46c:	4628      	mov	r0, r5
   db46e:	f000 f86f 	bl	db550 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db472:	4904      	ldr	r1, [pc, #16]	; (db484 <_Z17acquireWireBufferv+0x2c>)
	};
   db474:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db476:	4628      	mov	r0, r5
   db478:	f000 f86a 	bl	db550 <_ZnajRKSt9nothrow_t>
	};
   db47c:	60e0      	str	r0, [r4, #12]
}
   db47e:	4620      	mov	r0, r4
   db480:	bd38      	pop	{r3, r4, r5, pc}
   db482:	bf00      	nop
   db484:	000dcfdc 	.word	0x000dcfdc

000db488 <_Z18acquireWire1Bufferv>:
   db488:	b538      	push	{r3, r4, r5, lr}
   db48a:	2300      	movs	r3, #0
   db48c:	2520      	movs	r5, #32
   db48e:	8043      	strh	r3, [r0, #2]
   db490:	2314      	movs	r3, #20
   db492:	4604      	mov	r4, r0
   db494:	8003      	strh	r3, [r0, #0]
   db496:	6085      	str	r5, [r0, #8]
   db498:	6105      	str	r5, [r0, #16]
   db49a:	4906      	ldr	r1, [pc, #24]	; (db4b4 <_Z18acquireWire1Bufferv+0x2c>)
   db49c:	4628      	mov	r0, r5
   db49e:	f000 f857 	bl	db550 <_ZnajRKSt9nothrow_t>
   db4a2:	4904      	ldr	r1, [pc, #16]	; (db4b4 <_Z18acquireWire1Bufferv+0x2c>)
   db4a4:	6060      	str	r0, [r4, #4]
   db4a6:	4628      	mov	r0, r5
   db4a8:	f000 f852 	bl	db550 <_ZnajRKSt9nothrow_t>
   db4ac:	60e0      	str	r0, [r4, #12]
   db4ae:	4620      	mov	r0, r4
   db4b0:	bd38      	pop	{r3, r4, r5, pc}
   db4b2:	bf00      	nop
   db4b4:	000dcfdc 	.word	0x000dcfdc

000db4b8 <_Z19__fetch_global_Wirev>:
{
   db4b8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db4ba:	4d0e      	ldr	r5, [pc, #56]	; (db4f4 <_Z19__fetch_global_Wirev+0x3c>)
   db4bc:	7829      	ldrb	r1, [r5, #0]
   db4be:	f3bf 8f5b 	dmb	ish
   db4c2:	f011 0401 	ands.w	r4, r1, #1
{
   db4c6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db4c8:	d111      	bne.n	db4ee <_Z19__fetch_global_Wirev+0x36>
   db4ca:	4628      	mov	r0, r5
   db4cc:	f7f8 fdf4 	bl	d40b8 <__cxa_guard_acquire>
   db4d0:	b168      	cbz	r0, db4ee <_Z19__fetch_global_Wirev+0x36>
   db4d2:	a801      	add	r0, sp, #4
   db4d4:	f7ff ffc0 	bl	db458 <_Z17acquireWireBufferv>
   db4d8:	aa01      	add	r2, sp, #4
   db4da:	4621      	mov	r1, r4
   db4dc:	4806      	ldr	r0, [pc, #24]	; (db4f8 <_Z19__fetch_global_Wirev+0x40>)
   db4de:	f7fd fcbf 	bl	d8e60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db4e2:	4628      	mov	r0, r5
   db4e4:	f7f8 fded 	bl	d40c2 <__cxa_guard_release>
   db4e8:	4804      	ldr	r0, [pc, #16]	; (db4fc <_Z19__fetch_global_Wirev+0x44>)
   db4ea:	f000 fcf7 	bl	dbedc <atexit>
	return wire;
}
   db4ee:	4802      	ldr	r0, [pc, #8]	; (db4f8 <_Z19__fetch_global_Wirev+0x40>)
   db4f0:	b007      	add	sp, #28
   db4f2:	bd30      	pop	{r4, r5, pc}
   db4f4:	2003e728 	.word	0x2003e728
   db4f8:	2003e730 	.word	0x2003e730
   db4fc:	000db455 	.word	0x000db455

000db500 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   db500:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db502:	4c0e      	ldr	r4, [pc, #56]	; (db53c <_Z20__fetch_global_Wire1v+0x3c>)
   db504:	7823      	ldrb	r3, [r4, #0]
   db506:	f3bf 8f5b 	dmb	ish
   db50a:	07db      	lsls	r3, r3, #31
{
   db50c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db50e:	d411      	bmi.n	db534 <_Z20__fetch_global_Wire1v+0x34>
   db510:	4620      	mov	r0, r4
   db512:	f7f8 fdd1 	bl	d40b8 <__cxa_guard_acquire>
   db516:	b168      	cbz	r0, db534 <_Z20__fetch_global_Wire1v+0x34>
   db518:	a801      	add	r0, sp, #4
   db51a:	f7ff ffb5 	bl	db488 <_Z18acquireWire1Bufferv>
   db51e:	aa01      	add	r2, sp, #4
   db520:	2101      	movs	r1, #1
   db522:	4807      	ldr	r0, [pc, #28]	; (db540 <_Z20__fetch_global_Wire1v+0x40>)
   db524:	f7fd fc9c 	bl	d8e60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db528:	4620      	mov	r0, r4
   db52a:	f7f8 fdca 	bl	d40c2 <__cxa_guard_release>
   db52e:	4805      	ldr	r0, [pc, #20]	; (db544 <_Z20__fetch_global_Wire1v+0x44>)
   db530:	f000 fcd4 	bl	dbedc <atexit>
	return wire;
}
   db534:	4802      	ldr	r0, [pc, #8]	; (db540 <_Z20__fetch_global_Wire1v+0x40>)
   db536:	b006      	add	sp, #24
   db538:	bd10      	pop	{r4, pc}
   db53a:	bf00      	nop
   db53c:	2003e72c 	.word	0x2003e72c
   db540:	2003e744 	.word	0x2003e744
   db544:	000db457 	.word	0x000db457

000db548 <_ZdlPvj>:
   db548:	f7f8 bda9 	b.w	d409e <_ZdlPv>

000db54c <_ZnwjRKSt9nothrow_t>:
   db54c:	f7f8 bda3 	b.w	d4096 <_Znwj>

000db550 <_ZnajRKSt9nothrow_t>:
   db550:	f7f8 bda3 	b.w	d409a <_Znaj>

000db554 <_ZSt25__throw_bad_function_callv>:
   db554:	b508      	push	{r3, lr}
   db556:	f7fc ff3d 	bl	d83d4 <abort>
	...

000db55c <__aeabi_drsub>:
   db55c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db560:	e002      	b.n	db568 <__adddf3>
   db562:	bf00      	nop

000db564 <__aeabi_dsub>:
   db564:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db568 <__adddf3>:
   db568:	b530      	push	{r4, r5, lr}
   db56a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db56e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db572:	ea94 0f05 	teq	r4, r5
   db576:	bf08      	it	eq
   db578:	ea90 0f02 	teqeq	r0, r2
   db57c:	bf1f      	itttt	ne
   db57e:	ea54 0c00 	orrsne.w	ip, r4, r0
   db582:	ea55 0c02 	orrsne.w	ip, r5, r2
   db586:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db58a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db58e:	f000 80e2 	beq.w	db756 <__adddf3+0x1ee>
   db592:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db596:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db59a:	bfb8      	it	lt
   db59c:	426d      	neglt	r5, r5
   db59e:	dd0c      	ble.n	db5ba <__adddf3+0x52>
   db5a0:	442c      	add	r4, r5
   db5a2:	ea80 0202 	eor.w	r2, r0, r2
   db5a6:	ea81 0303 	eor.w	r3, r1, r3
   db5aa:	ea82 0000 	eor.w	r0, r2, r0
   db5ae:	ea83 0101 	eor.w	r1, r3, r1
   db5b2:	ea80 0202 	eor.w	r2, r0, r2
   db5b6:	ea81 0303 	eor.w	r3, r1, r3
   db5ba:	2d36      	cmp	r5, #54	; 0x36
   db5bc:	bf88      	it	hi
   db5be:	bd30      	pophi	{r4, r5, pc}
   db5c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db5c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db5c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db5cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db5d0:	d002      	beq.n	db5d8 <__adddf3+0x70>
   db5d2:	4240      	negs	r0, r0
   db5d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db5d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db5dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db5e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db5e4:	d002      	beq.n	db5ec <__adddf3+0x84>
   db5e6:	4252      	negs	r2, r2
   db5e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db5ec:	ea94 0f05 	teq	r4, r5
   db5f0:	f000 80a7 	beq.w	db742 <__adddf3+0x1da>
   db5f4:	f1a4 0401 	sub.w	r4, r4, #1
   db5f8:	f1d5 0e20 	rsbs	lr, r5, #32
   db5fc:	db0d      	blt.n	db61a <__adddf3+0xb2>
   db5fe:	fa02 fc0e 	lsl.w	ip, r2, lr
   db602:	fa22 f205 	lsr.w	r2, r2, r5
   db606:	1880      	adds	r0, r0, r2
   db608:	f141 0100 	adc.w	r1, r1, #0
   db60c:	fa03 f20e 	lsl.w	r2, r3, lr
   db610:	1880      	adds	r0, r0, r2
   db612:	fa43 f305 	asr.w	r3, r3, r5
   db616:	4159      	adcs	r1, r3
   db618:	e00e      	b.n	db638 <__adddf3+0xd0>
   db61a:	f1a5 0520 	sub.w	r5, r5, #32
   db61e:	f10e 0e20 	add.w	lr, lr, #32
   db622:	2a01      	cmp	r2, #1
   db624:	fa03 fc0e 	lsl.w	ip, r3, lr
   db628:	bf28      	it	cs
   db62a:	f04c 0c02 	orrcs.w	ip, ip, #2
   db62e:	fa43 f305 	asr.w	r3, r3, r5
   db632:	18c0      	adds	r0, r0, r3
   db634:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db63c:	d507      	bpl.n	db64e <__adddf3+0xe6>
   db63e:	f04f 0e00 	mov.w	lr, #0
   db642:	f1dc 0c00 	rsbs	ip, ip, #0
   db646:	eb7e 0000 	sbcs.w	r0, lr, r0
   db64a:	eb6e 0101 	sbc.w	r1, lr, r1
   db64e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db652:	d31b      	bcc.n	db68c <__adddf3+0x124>
   db654:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db658:	d30c      	bcc.n	db674 <__adddf3+0x10c>
   db65a:	0849      	lsrs	r1, r1, #1
   db65c:	ea5f 0030 	movs.w	r0, r0, rrx
   db660:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db664:	f104 0401 	add.w	r4, r4, #1
   db668:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db66c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db670:	f080 809a 	bcs.w	db7a8 <__adddf3+0x240>
   db674:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db678:	bf08      	it	eq
   db67a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db67e:	f150 0000 	adcs.w	r0, r0, #0
   db682:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db686:	ea41 0105 	orr.w	r1, r1, r5
   db68a:	bd30      	pop	{r4, r5, pc}
   db68c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db690:	4140      	adcs	r0, r0
   db692:	eb41 0101 	adc.w	r1, r1, r1
   db696:	3c01      	subs	r4, #1
   db698:	bf28      	it	cs
   db69a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db69e:	d2e9      	bcs.n	db674 <__adddf3+0x10c>
   db6a0:	f091 0f00 	teq	r1, #0
   db6a4:	bf04      	itt	eq
   db6a6:	4601      	moveq	r1, r0
   db6a8:	2000      	moveq	r0, #0
   db6aa:	fab1 f381 	clz	r3, r1
   db6ae:	bf08      	it	eq
   db6b0:	3320      	addeq	r3, #32
   db6b2:	f1a3 030b 	sub.w	r3, r3, #11
   db6b6:	f1b3 0220 	subs.w	r2, r3, #32
   db6ba:	da0c      	bge.n	db6d6 <__adddf3+0x16e>
   db6bc:	320c      	adds	r2, #12
   db6be:	dd08      	ble.n	db6d2 <__adddf3+0x16a>
   db6c0:	f102 0c14 	add.w	ip, r2, #20
   db6c4:	f1c2 020c 	rsb	r2, r2, #12
   db6c8:	fa01 f00c 	lsl.w	r0, r1, ip
   db6cc:	fa21 f102 	lsr.w	r1, r1, r2
   db6d0:	e00c      	b.n	db6ec <__adddf3+0x184>
   db6d2:	f102 0214 	add.w	r2, r2, #20
   db6d6:	bfd8      	it	le
   db6d8:	f1c2 0c20 	rsble	ip, r2, #32
   db6dc:	fa01 f102 	lsl.w	r1, r1, r2
   db6e0:	fa20 fc0c 	lsr.w	ip, r0, ip
   db6e4:	bfdc      	itt	le
   db6e6:	ea41 010c 	orrle.w	r1, r1, ip
   db6ea:	4090      	lslle	r0, r2
   db6ec:	1ae4      	subs	r4, r4, r3
   db6ee:	bfa2      	ittt	ge
   db6f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db6f4:	4329      	orrge	r1, r5
   db6f6:	bd30      	popge	{r4, r5, pc}
   db6f8:	ea6f 0404 	mvn.w	r4, r4
   db6fc:	3c1f      	subs	r4, #31
   db6fe:	da1c      	bge.n	db73a <__adddf3+0x1d2>
   db700:	340c      	adds	r4, #12
   db702:	dc0e      	bgt.n	db722 <__adddf3+0x1ba>
   db704:	f104 0414 	add.w	r4, r4, #20
   db708:	f1c4 0220 	rsb	r2, r4, #32
   db70c:	fa20 f004 	lsr.w	r0, r0, r4
   db710:	fa01 f302 	lsl.w	r3, r1, r2
   db714:	ea40 0003 	orr.w	r0, r0, r3
   db718:	fa21 f304 	lsr.w	r3, r1, r4
   db71c:	ea45 0103 	orr.w	r1, r5, r3
   db720:	bd30      	pop	{r4, r5, pc}
   db722:	f1c4 040c 	rsb	r4, r4, #12
   db726:	f1c4 0220 	rsb	r2, r4, #32
   db72a:	fa20 f002 	lsr.w	r0, r0, r2
   db72e:	fa01 f304 	lsl.w	r3, r1, r4
   db732:	ea40 0003 	orr.w	r0, r0, r3
   db736:	4629      	mov	r1, r5
   db738:	bd30      	pop	{r4, r5, pc}
   db73a:	fa21 f004 	lsr.w	r0, r1, r4
   db73e:	4629      	mov	r1, r5
   db740:	bd30      	pop	{r4, r5, pc}
   db742:	f094 0f00 	teq	r4, #0
   db746:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db74a:	bf06      	itte	eq
   db74c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db750:	3401      	addeq	r4, #1
   db752:	3d01      	subne	r5, #1
   db754:	e74e      	b.n	db5f4 <__adddf3+0x8c>
   db756:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db75a:	bf18      	it	ne
   db75c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db760:	d029      	beq.n	db7b6 <__adddf3+0x24e>
   db762:	ea94 0f05 	teq	r4, r5
   db766:	bf08      	it	eq
   db768:	ea90 0f02 	teqeq	r0, r2
   db76c:	d005      	beq.n	db77a <__adddf3+0x212>
   db76e:	ea54 0c00 	orrs.w	ip, r4, r0
   db772:	bf04      	itt	eq
   db774:	4619      	moveq	r1, r3
   db776:	4610      	moveq	r0, r2
   db778:	bd30      	pop	{r4, r5, pc}
   db77a:	ea91 0f03 	teq	r1, r3
   db77e:	bf1e      	ittt	ne
   db780:	2100      	movne	r1, #0
   db782:	2000      	movne	r0, #0
   db784:	bd30      	popne	{r4, r5, pc}
   db786:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db78a:	d105      	bne.n	db798 <__adddf3+0x230>
   db78c:	0040      	lsls	r0, r0, #1
   db78e:	4149      	adcs	r1, r1
   db790:	bf28      	it	cs
   db792:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db796:	bd30      	pop	{r4, r5, pc}
   db798:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db79c:	bf3c      	itt	cc
   db79e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db7a2:	bd30      	popcc	{r4, r5, pc}
   db7a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db7a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db7ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db7b0:	f04f 0000 	mov.w	r0, #0
   db7b4:	bd30      	pop	{r4, r5, pc}
   db7b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db7ba:	bf1a      	itte	ne
   db7bc:	4619      	movne	r1, r3
   db7be:	4610      	movne	r0, r2
   db7c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db7c4:	bf1c      	itt	ne
   db7c6:	460b      	movne	r3, r1
   db7c8:	4602      	movne	r2, r0
   db7ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db7ce:	bf06      	itte	eq
   db7d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db7d4:	ea91 0f03 	teqeq	r1, r3
   db7d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db7dc:	bd30      	pop	{r4, r5, pc}
   db7de:	bf00      	nop

000db7e0 <__aeabi_ui2d>:
   db7e0:	f090 0f00 	teq	r0, #0
   db7e4:	bf04      	itt	eq
   db7e6:	2100      	moveq	r1, #0
   db7e8:	4770      	bxeq	lr
   db7ea:	b530      	push	{r4, r5, lr}
   db7ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db7f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db7f4:	f04f 0500 	mov.w	r5, #0
   db7f8:	f04f 0100 	mov.w	r1, #0
   db7fc:	e750      	b.n	db6a0 <__adddf3+0x138>
   db7fe:	bf00      	nop

000db800 <__aeabi_i2d>:
   db800:	f090 0f00 	teq	r0, #0
   db804:	bf04      	itt	eq
   db806:	2100      	moveq	r1, #0
   db808:	4770      	bxeq	lr
   db80a:	b530      	push	{r4, r5, lr}
   db80c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db810:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db814:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db818:	bf48      	it	mi
   db81a:	4240      	negmi	r0, r0
   db81c:	f04f 0100 	mov.w	r1, #0
   db820:	e73e      	b.n	db6a0 <__adddf3+0x138>
   db822:	bf00      	nop

000db824 <__aeabi_f2d>:
   db824:	0042      	lsls	r2, r0, #1
   db826:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db82a:	ea4f 0131 	mov.w	r1, r1, rrx
   db82e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db832:	bf1f      	itttt	ne
   db834:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db838:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db83c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db840:	4770      	bxne	lr
   db842:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db846:	bf08      	it	eq
   db848:	4770      	bxeq	lr
   db84a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db84e:	bf04      	itt	eq
   db850:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db854:	4770      	bxeq	lr
   db856:	b530      	push	{r4, r5, lr}
   db858:	f44f 7460 	mov.w	r4, #896	; 0x380
   db85c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db860:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db864:	e71c      	b.n	db6a0 <__adddf3+0x138>
   db866:	bf00      	nop

000db868 <__aeabi_ul2d>:
   db868:	ea50 0201 	orrs.w	r2, r0, r1
   db86c:	bf08      	it	eq
   db86e:	4770      	bxeq	lr
   db870:	b530      	push	{r4, r5, lr}
   db872:	f04f 0500 	mov.w	r5, #0
   db876:	e00a      	b.n	db88e <__aeabi_l2d+0x16>

000db878 <__aeabi_l2d>:
   db878:	ea50 0201 	orrs.w	r2, r0, r1
   db87c:	bf08      	it	eq
   db87e:	4770      	bxeq	lr
   db880:	b530      	push	{r4, r5, lr}
   db882:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db886:	d502      	bpl.n	db88e <__aeabi_l2d+0x16>
   db888:	4240      	negs	r0, r0
   db88a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db88e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db892:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db896:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db89a:	f43f aed8 	beq.w	db64e <__adddf3+0xe6>
   db89e:	f04f 0203 	mov.w	r2, #3
   db8a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db8a6:	bf18      	it	ne
   db8a8:	3203      	addne	r2, #3
   db8aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db8ae:	bf18      	it	ne
   db8b0:	3203      	addne	r2, #3
   db8b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db8b6:	f1c2 0320 	rsb	r3, r2, #32
   db8ba:	fa00 fc03 	lsl.w	ip, r0, r3
   db8be:	fa20 f002 	lsr.w	r0, r0, r2
   db8c2:	fa01 fe03 	lsl.w	lr, r1, r3
   db8c6:	ea40 000e 	orr.w	r0, r0, lr
   db8ca:	fa21 f102 	lsr.w	r1, r1, r2
   db8ce:	4414      	add	r4, r2
   db8d0:	e6bd      	b.n	db64e <__adddf3+0xe6>
   db8d2:	bf00      	nop

000db8d4 <__aeabi_dmul>:
   db8d4:	b570      	push	{r4, r5, r6, lr}
   db8d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db8da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db8de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db8e2:	bf1d      	ittte	ne
   db8e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db8e8:	ea94 0f0c 	teqne	r4, ip
   db8ec:	ea95 0f0c 	teqne	r5, ip
   db8f0:	f000 f8de 	bleq	dbab0 <__aeabi_dmul+0x1dc>
   db8f4:	442c      	add	r4, r5
   db8f6:	ea81 0603 	eor.w	r6, r1, r3
   db8fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db8fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db902:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db906:	bf18      	it	ne
   db908:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db90c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db914:	d038      	beq.n	db988 <__aeabi_dmul+0xb4>
   db916:	fba0 ce02 	umull	ip, lr, r0, r2
   db91a:	f04f 0500 	mov.w	r5, #0
   db91e:	fbe1 e502 	umlal	lr, r5, r1, r2
   db922:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db926:	fbe0 e503 	umlal	lr, r5, r0, r3
   db92a:	f04f 0600 	mov.w	r6, #0
   db92e:	fbe1 5603 	umlal	r5, r6, r1, r3
   db932:	f09c 0f00 	teq	ip, #0
   db936:	bf18      	it	ne
   db938:	f04e 0e01 	orrne.w	lr, lr, #1
   db93c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db940:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db944:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db948:	d204      	bcs.n	db954 <__aeabi_dmul+0x80>
   db94a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db94e:	416d      	adcs	r5, r5
   db950:	eb46 0606 	adc.w	r6, r6, r6
   db954:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db958:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db95c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db960:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db964:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db968:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db96c:	bf88      	it	hi
   db96e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db972:	d81e      	bhi.n	db9b2 <__aeabi_dmul+0xde>
   db974:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db978:	bf08      	it	eq
   db97a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db97e:	f150 0000 	adcs.w	r0, r0, #0
   db982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db986:	bd70      	pop	{r4, r5, r6, pc}
   db988:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db98c:	ea46 0101 	orr.w	r1, r6, r1
   db990:	ea40 0002 	orr.w	r0, r0, r2
   db994:	ea81 0103 	eor.w	r1, r1, r3
   db998:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db99c:	bfc2      	ittt	gt
   db99e:	ebd4 050c 	rsbsgt	r5, r4, ip
   db9a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db9a6:	bd70      	popgt	{r4, r5, r6, pc}
   db9a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db9ac:	f04f 0e00 	mov.w	lr, #0
   db9b0:	3c01      	subs	r4, #1
   db9b2:	f300 80ab 	bgt.w	dbb0c <__aeabi_dmul+0x238>
   db9b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db9ba:	bfde      	ittt	le
   db9bc:	2000      	movle	r0, #0
   db9be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db9c2:	bd70      	pople	{r4, r5, r6, pc}
   db9c4:	f1c4 0400 	rsb	r4, r4, #0
   db9c8:	3c20      	subs	r4, #32
   db9ca:	da35      	bge.n	dba38 <__aeabi_dmul+0x164>
   db9cc:	340c      	adds	r4, #12
   db9ce:	dc1b      	bgt.n	dba08 <__aeabi_dmul+0x134>
   db9d0:	f104 0414 	add.w	r4, r4, #20
   db9d4:	f1c4 0520 	rsb	r5, r4, #32
   db9d8:	fa00 f305 	lsl.w	r3, r0, r5
   db9dc:	fa20 f004 	lsr.w	r0, r0, r4
   db9e0:	fa01 f205 	lsl.w	r2, r1, r5
   db9e4:	ea40 0002 	orr.w	r0, r0, r2
   db9e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db9ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db9f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db9f4:	fa21 f604 	lsr.w	r6, r1, r4
   db9f8:	eb42 0106 	adc.w	r1, r2, r6
   db9fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dba00:	bf08      	it	eq
   dba02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dba06:	bd70      	pop	{r4, r5, r6, pc}
   dba08:	f1c4 040c 	rsb	r4, r4, #12
   dba0c:	f1c4 0520 	rsb	r5, r4, #32
   dba10:	fa00 f304 	lsl.w	r3, r0, r4
   dba14:	fa20 f005 	lsr.w	r0, r0, r5
   dba18:	fa01 f204 	lsl.w	r2, r1, r4
   dba1c:	ea40 0002 	orr.w	r0, r0, r2
   dba20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dba24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dba28:	f141 0100 	adc.w	r1, r1, #0
   dba2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dba30:	bf08      	it	eq
   dba32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dba36:	bd70      	pop	{r4, r5, r6, pc}
   dba38:	f1c4 0520 	rsb	r5, r4, #32
   dba3c:	fa00 f205 	lsl.w	r2, r0, r5
   dba40:	ea4e 0e02 	orr.w	lr, lr, r2
   dba44:	fa20 f304 	lsr.w	r3, r0, r4
   dba48:	fa01 f205 	lsl.w	r2, r1, r5
   dba4c:	ea43 0302 	orr.w	r3, r3, r2
   dba50:	fa21 f004 	lsr.w	r0, r1, r4
   dba54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dba58:	fa21 f204 	lsr.w	r2, r1, r4
   dba5c:	ea20 0002 	bic.w	r0, r0, r2
   dba60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dba64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dba68:	bf08      	it	eq
   dba6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dba6e:	bd70      	pop	{r4, r5, r6, pc}
   dba70:	f094 0f00 	teq	r4, #0
   dba74:	d10f      	bne.n	dba96 <__aeabi_dmul+0x1c2>
   dba76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dba7a:	0040      	lsls	r0, r0, #1
   dba7c:	eb41 0101 	adc.w	r1, r1, r1
   dba80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dba84:	bf08      	it	eq
   dba86:	3c01      	subeq	r4, #1
   dba88:	d0f7      	beq.n	dba7a <__aeabi_dmul+0x1a6>
   dba8a:	ea41 0106 	orr.w	r1, r1, r6
   dba8e:	f095 0f00 	teq	r5, #0
   dba92:	bf18      	it	ne
   dba94:	4770      	bxne	lr
   dba96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dba9a:	0052      	lsls	r2, r2, #1
   dba9c:	eb43 0303 	adc.w	r3, r3, r3
   dbaa0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dbaa4:	bf08      	it	eq
   dbaa6:	3d01      	subeq	r5, #1
   dbaa8:	d0f7      	beq.n	dba9a <__aeabi_dmul+0x1c6>
   dbaaa:	ea43 0306 	orr.w	r3, r3, r6
   dbaae:	4770      	bx	lr
   dbab0:	ea94 0f0c 	teq	r4, ip
   dbab4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbab8:	bf18      	it	ne
   dbaba:	ea95 0f0c 	teqne	r5, ip
   dbabe:	d00c      	beq.n	dbada <__aeabi_dmul+0x206>
   dbac0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbac4:	bf18      	it	ne
   dbac6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbaca:	d1d1      	bne.n	dba70 <__aeabi_dmul+0x19c>
   dbacc:	ea81 0103 	eor.w	r1, r1, r3
   dbad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbad4:	f04f 0000 	mov.w	r0, #0
   dbad8:	bd70      	pop	{r4, r5, r6, pc}
   dbada:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbade:	bf06      	itte	eq
   dbae0:	4610      	moveq	r0, r2
   dbae2:	4619      	moveq	r1, r3
   dbae4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbae8:	d019      	beq.n	dbb1e <__aeabi_dmul+0x24a>
   dbaea:	ea94 0f0c 	teq	r4, ip
   dbaee:	d102      	bne.n	dbaf6 <__aeabi_dmul+0x222>
   dbaf0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dbaf4:	d113      	bne.n	dbb1e <__aeabi_dmul+0x24a>
   dbaf6:	ea95 0f0c 	teq	r5, ip
   dbafa:	d105      	bne.n	dbb08 <__aeabi_dmul+0x234>
   dbafc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dbb00:	bf1c      	itt	ne
   dbb02:	4610      	movne	r0, r2
   dbb04:	4619      	movne	r1, r3
   dbb06:	d10a      	bne.n	dbb1e <__aeabi_dmul+0x24a>
   dbb08:	ea81 0103 	eor.w	r1, r1, r3
   dbb0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbb10:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbb14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbb18:	f04f 0000 	mov.w	r0, #0
   dbb1c:	bd70      	pop	{r4, r5, r6, pc}
   dbb1e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbb22:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dbb26:	bd70      	pop	{r4, r5, r6, pc}

000dbb28 <__aeabi_ddiv>:
   dbb28:	b570      	push	{r4, r5, r6, lr}
   dbb2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbb2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbb32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbb36:	bf1d      	ittte	ne
   dbb38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbb3c:	ea94 0f0c 	teqne	r4, ip
   dbb40:	ea95 0f0c 	teqne	r5, ip
   dbb44:	f000 f8a7 	bleq	dbc96 <__aeabi_ddiv+0x16e>
   dbb48:	eba4 0405 	sub.w	r4, r4, r5
   dbb4c:	ea81 0e03 	eor.w	lr, r1, r3
   dbb50:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbb54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbb58:	f000 8088 	beq.w	dbc6c <__aeabi_ddiv+0x144>
   dbb5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbb60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dbb64:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dbb68:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dbb6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dbb70:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dbb74:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dbb78:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dbb7c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dbb80:	429d      	cmp	r5, r3
   dbb82:	bf08      	it	eq
   dbb84:	4296      	cmpeq	r6, r2
   dbb86:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dbb8a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dbb8e:	d202      	bcs.n	dbb96 <__aeabi_ddiv+0x6e>
   dbb90:	085b      	lsrs	r3, r3, #1
   dbb92:	ea4f 0232 	mov.w	r2, r2, rrx
   dbb96:	1ab6      	subs	r6, r6, r2
   dbb98:	eb65 0503 	sbc.w	r5, r5, r3
   dbb9c:	085b      	lsrs	r3, r3, #1
   dbb9e:	ea4f 0232 	mov.w	r2, r2, rrx
   dbba2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dbba6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dbbaa:	ebb6 0e02 	subs.w	lr, r6, r2
   dbbae:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbbb2:	bf22      	ittt	cs
   dbbb4:	1ab6      	subcs	r6, r6, r2
   dbbb6:	4675      	movcs	r5, lr
   dbbb8:	ea40 000c 	orrcs.w	r0, r0, ip
   dbbbc:	085b      	lsrs	r3, r3, #1
   dbbbe:	ea4f 0232 	mov.w	r2, r2, rrx
   dbbc2:	ebb6 0e02 	subs.w	lr, r6, r2
   dbbc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbbca:	bf22      	ittt	cs
   dbbcc:	1ab6      	subcs	r6, r6, r2
   dbbce:	4675      	movcs	r5, lr
   dbbd0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dbbd4:	085b      	lsrs	r3, r3, #1
   dbbd6:	ea4f 0232 	mov.w	r2, r2, rrx
   dbbda:	ebb6 0e02 	subs.w	lr, r6, r2
   dbbde:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbbe2:	bf22      	ittt	cs
   dbbe4:	1ab6      	subcs	r6, r6, r2
   dbbe6:	4675      	movcs	r5, lr
   dbbe8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dbbec:	085b      	lsrs	r3, r3, #1
   dbbee:	ea4f 0232 	mov.w	r2, r2, rrx
   dbbf2:	ebb6 0e02 	subs.w	lr, r6, r2
   dbbf6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbbfa:	bf22      	ittt	cs
   dbbfc:	1ab6      	subcs	r6, r6, r2
   dbbfe:	4675      	movcs	r5, lr
   dbc00:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbc04:	ea55 0e06 	orrs.w	lr, r5, r6
   dbc08:	d018      	beq.n	dbc3c <__aeabi_ddiv+0x114>
   dbc0a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dbc0e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dbc12:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dbc16:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dbc1a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dbc1e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dbc22:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dbc26:	d1c0      	bne.n	dbbaa <__aeabi_ddiv+0x82>
   dbc28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbc2c:	d10b      	bne.n	dbc46 <__aeabi_ddiv+0x11e>
   dbc2e:	ea41 0100 	orr.w	r1, r1, r0
   dbc32:	f04f 0000 	mov.w	r0, #0
   dbc36:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dbc3a:	e7b6      	b.n	dbbaa <__aeabi_ddiv+0x82>
   dbc3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbc40:	bf04      	itt	eq
   dbc42:	4301      	orreq	r1, r0
   dbc44:	2000      	moveq	r0, #0
   dbc46:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbc4a:	bf88      	it	hi
   dbc4c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbc50:	f63f aeaf 	bhi.w	db9b2 <__aeabi_dmul+0xde>
   dbc54:	ebb5 0c03 	subs.w	ip, r5, r3
   dbc58:	bf04      	itt	eq
   dbc5a:	ebb6 0c02 	subseq.w	ip, r6, r2
   dbc5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbc62:	f150 0000 	adcs.w	r0, r0, #0
   dbc66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbc6a:	bd70      	pop	{r4, r5, r6, pc}
   dbc6c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dbc70:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dbc74:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dbc78:	bfc2      	ittt	gt
   dbc7a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbc7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbc82:	bd70      	popgt	{r4, r5, r6, pc}
   dbc84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbc88:	f04f 0e00 	mov.w	lr, #0
   dbc8c:	3c01      	subs	r4, #1
   dbc8e:	e690      	b.n	db9b2 <__aeabi_dmul+0xde>
   dbc90:	ea45 0e06 	orr.w	lr, r5, r6
   dbc94:	e68d      	b.n	db9b2 <__aeabi_dmul+0xde>
   dbc96:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbc9a:	ea94 0f0c 	teq	r4, ip
   dbc9e:	bf08      	it	eq
   dbca0:	ea95 0f0c 	teqeq	r5, ip
   dbca4:	f43f af3b 	beq.w	dbb1e <__aeabi_dmul+0x24a>
   dbca8:	ea94 0f0c 	teq	r4, ip
   dbcac:	d10a      	bne.n	dbcc4 <__aeabi_ddiv+0x19c>
   dbcae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbcb2:	f47f af34 	bne.w	dbb1e <__aeabi_dmul+0x24a>
   dbcb6:	ea95 0f0c 	teq	r5, ip
   dbcba:	f47f af25 	bne.w	dbb08 <__aeabi_dmul+0x234>
   dbcbe:	4610      	mov	r0, r2
   dbcc0:	4619      	mov	r1, r3
   dbcc2:	e72c      	b.n	dbb1e <__aeabi_dmul+0x24a>
   dbcc4:	ea95 0f0c 	teq	r5, ip
   dbcc8:	d106      	bne.n	dbcd8 <__aeabi_ddiv+0x1b0>
   dbcca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbcce:	f43f aefd 	beq.w	dbacc <__aeabi_dmul+0x1f8>
   dbcd2:	4610      	mov	r0, r2
   dbcd4:	4619      	mov	r1, r3
   dbcd6:	e722      	b.n	dbb1e <__aeabi_dmul+0x24a>
   dbcd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbcdc:	bf18      	it	ne
   dbcde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbce2:	f47f aec5 	bne.w	dba70 <__aeabi_dmul+0x19c>
   dbce6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dbcea:	f47f af0d 	bne.w	dbb08 <__aeabi_dmul+0x234>
   dbcee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dbcf2:	f47f aeeb 	bne.w	dbacc <__aeabi_dmul+0x1f8>
   dbcf6:	e712      	b.n	dbb1e <__aeabi_dmul+0x24a>

000dbcf8 <__aeabi_d2iz>:
   dbcf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbcfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbd00:	d215      	bcs.n	dbd2e <__aeabi_d2iz+0x36>
   dbd02:	d511      	bpl.n	dbd28 <__aeabi_d2iz+0x30>
   dbd04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbd08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbd0c:	d912      	bls.n	dbd34 <__aeabi_d2iz+0x3c>
   dbd0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbd12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbd16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbd1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbd1e:	fa23 f002 	lsr.w	r0, r3, r2
   dbd22:	bf18      	it	ne
   dbd24:	4240      	negne	r0, r0
   dbd26:	4770      	bx	lr
   dbd28:	f04f 0000 	mov.w	r0, #0
   dbd2c:	4770      	bx	lr
   dbd2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbd32:	d105      	bne.n	dbd40 <__aeabi_d2iz+0x48>
   dbd34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dbd38:	bf08      	it	eq
   dbd3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dbd3e:	4770      	bx	lr
   dbd40:	f04f 0000 	mov.w	r0, #0
   dbd44:	4770      	bx	lr
   dbd46:	bf00      	nop

000dbd48 <__aeabi_d2uiz>:
   dbd48:	004a      	lsls	r2, r1, #1
   dbd4a:	d211      	bcs.n	dbd70 <__aeabi_d2uiz+0x28>
   dbd4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dbd50:	d211      	bcs.n	dbd76 <__aeabi_d2uiz+0x2e>
   dbd52:	d50d      	bpl.n	dbd70 <__aeabi_d2uiz+0x28>
   dbd54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dbd58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dbd5c:	d40e      	bmi.n	dbd7c <__aeabi_d2uiz+0x34>
   dbd5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbd62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dbd66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dbd6a:	fa23 f002 	lsr.w	r0, r3, r2
   dbd6e:	4770      	bx	lr
   dbd70:	f04f 0000 	mov.w	r0, #0
   dbd74:	4770      	bx	lr
   dbd76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dbd7a:	d102      	bne.n	dbd82 <__aeabi_d2uiz+0x3a>
   dbd7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbd80:	4770      	bx	lr
   dbd82:	f04f 0000 	mov.w	r0, #0
   dbd86:	4770      	bx	lr

000dbd88 <__aeabi_d2f>:
   dbd88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dbd8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dbd90:	bf24      	itt	cs
   dbd92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dbd96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dbd9a:	d90d      	bls.n	dbdb8 <__aeabi_d2f+0x30>
   dbd9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dbda0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dbda4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dbda8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dbdac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dbdb0:	bf08      	it	eq
   dbdb2:	f020 0001 	biceq.w	r0, r0, #1
   dbdb6:	4770      	bx	lr
   dbdb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dbdbc:	d121      	bne.n	dbe02 <__aeabi_d2f+0x7a>
   dbdbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dbdc2:	bfbc      	itt	lt
   dbdc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dbdc8:	4770      	bxlt	lr
   dbdca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbdce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dbdd2:	f1c2 0218 	rsb	r2, r2, #24
   dbdd6:	f1c2 0c20 	rsb	ip, r2, #32
   dbdda:	fa10 f30c 	lsls.w	r3, r0, ip
   dbdde:	fa20 f002 	lsr.w	r0, r0, r2
   dbde2:	bf18      	it	ne
   dbde4:	f040 0001 	orrne.w	r0, r0, #1
   dbde8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dbdec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dbdf0:	fa03 fc0c 	lsl.w	ip, r3, ip
   dbdf4:	ea40 000c 	orr.w	r0, r0, ip
   dbdf8:	fa23 f302 	lsr.w	r3, r3, r2
   dbdfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dbe00:	e7cc      	b.n	dbd9c <__aeabi_d2f+0x14>
   dbe02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dbe06:	d107      	bne.n	dbe18 <__aeabi_d2f+0x90>
   dbe08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dbe0c:	bf1e      	ittt	ne
   dbe0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dbe12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dbe16:	4770      	bxne	lr
   dbe18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dbe1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dbe20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dbe24:	4770      	bx	lr
   dbe26:	bf00      	nop

000dbe28 <__aeabi_f2lz>:
   dbe28:	ee07 0a90 	vmov	s15, r0
   dbe2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dbe30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dbe34:	d401      	bmi.n	dbe3a <__aeabi_f2lz+0x12>
   dbe36:	f000 b80b 	b.w	dbe50 <__aeabi_f2ulz>
   dbe3a:	eef1 7a67 	vneg.f32	s15, s15
   dbe3e:	b508      	push	{r3, lr}
   dbe40:	ee17 0a90 	vmov	r0, s15
   dbe44:	f000 f804 	bl	dbe50 <__aeabi_f2ulz>
   dbe48:	4240      	negs	r0, r0
   dbe4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbe4e:	bd08      	pop	{r3, pc}

000dbe50 <__aeabi_f2ulz>:
   dbe50:	b5d0      	push	{r4, r6, r7, lr}
   dbe52:	f7ff fce7 	bl	db824 <__aeabi_f2d>
   dbe56:	4b0c      	ldr	r3, [pc, #48]	; (dbe88 <__aeabi_f2ulz+0x38>)
   dbe58:	2200      	movs	r2, #0
   dbe5a:	4606      	mov	r6, r0
   dbe5c:	460f      	mov	r7, r1
   dbe5e:	f7ff fd39 	bl	db8d4 <__aeabi_dmul>
   dbe62:	f7ff ff71 	bl	dbd48 <__aeabi_d2uiz>
   dbe66:	4604      	mov	r4, r0
   dbe68:	f7ff fcba 	bl	db7e0 <__aeabi_ui2d>
   dbe6c:	4b07      	ldr	r3, [pc, #28]	; (dbe8c <__aeabi_f2ulz+0x3c>)
   dbe6e:	2200      	movs	r2, #0
   dbe70:	f7ff fd30 	bl	db8d4 <__aeabi_dmul>
   dbe74:	4602      	mov	r2, r0
   dbe76:	460b      	mov	r3, r1
   dbe78:	4630      	mov	r0, r6
   dbe7a:	4639      	mov	r1, r7
   dbe7c:	f7ff fb72 	bl	db564 <__aeabi_dsub>
   dbe80:	f7ff ff62 	bl	dbd48 <__aeabi_d2uiz>
   dbe84:	4621      	mov	r1, r4
   dbe86:	bdd0      	pop	{r4, r6, r7, pc}
   dbe88:	3df00000 	.word	0x3df00000
   dbe8c:	41f00000 	.word	0x41f00000

000dbe90 <asctime_r>:
   dbe90:	b510      	push	{r4, lr}
   dbe92:	460c      	mov	r4, r1
   dbe94:	6941      	ldr	r1, [r0, #20]
   dbe96:	6903      	ldr	r3, [r0, #16]
   dbe98:	6982      	ldr	r2, [r0, #24]
   dbe9a:	b086      	sub	sp, #24
   dbe9c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dbea0:	9104      	str	r1, [sp, #16]
   dbea2:	6801      	ldr	r1, [r0, #0]
   dbea4:	9103      	str	r1, [sp, #12]
   dbea6:	6841      	ldr	r1, [r0, #4]
   dbea8:	9102      	str	r1, [sp, #8]
   dbeaa:	6881      	ldr	r1, [r0, #8]
   dbeac:	9101      	str	r1, [sp, #4]
   dbeae:	68c1      	ldr	r1, [r0, #12]
   dbeb0:	9100      	str	r1, [sp, #0]
   dbeb2:	4907      	ldr	r1, [pc, #28]	; (dbed0 <asctime_r+0x40>)
   dbeb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dbeb8:	440b      	add	r3, r1
   dbeba:	4906      	ldr	r1, [pc, #24]	; (dbed4 <asctime_r+0x44>)
   dbebc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dbec0:	440a      	add	r2, r1
   dbec2:	4620      	mov	r0, r4
   dbec4:	4904      	ldr	r1, [pc, #16]	; (dbed8 <asctime_r+0x48>)
   dbec6:	f7fc fa6d 	bl	d83a4 <siprintf>
   dbeca:	4620      	mov	r0, r4
   dbecc:	b006      	add	sp, #24
   dbece:	bd10      	pop	{r4, pc}
   dbed0:	000dd012 	.word	0x000dd012
   dbed4:	000dcffd 	.word	0x000dcffd
   dbed8:	000dcfdd 	.word	0x000dcfdd

000dbedc <atexit>:
   dbedc:	2300      	movs	r3, #0
   dbede:	4601      	mov	r1, r0
   dbee0:	461a      	mov	r2, r3
   dbee2:	4618      	mov	r0, r3
   dbee4:	f000 b976 	b.w	dc1d4 <__register_exitproc>

000dbee8 <atoi>:
   dbee8:	220a      	movs	r2, #10
   dbeea:	2100      	movs	r1, #0
   dbeec:	f000 b968 	b.w	dc1c0 <strtol>

000dbef0 <gmtime>:
   dbef0:	b538      	push	{r3, r4, r5, lr}
   dbef2:	4b07      	ldr	r3, [pc, #28]	; (dbf10 <gmtime+0x20>)
   dbef4:	681d      	ldr	r5, [r3, #0]
   dbef6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dbef8:	4604      	mov	r4, r0
   dbefa:	b91b      	cbnz	r3, dbf04 <gmtime+0x14>
   dbefc:	2024      	movs	r0, #36	; 0x24
   dbefe:	f7fc fa39 	bl	d8374 <malloc>
   dbf02:	63e8      	str	r0, [r5, #60]	; 0x3c
   dbf04:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dbf06:	4620      	mov	r0, r4
   dbf08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbf0c:	f7fc ba8a 	b.w	d8424 <gmtime_r>
   dbf10:	2003e218 	.word	0x2003e218

000dbf14 <memcpy>:
   dbf14:	440a      	add	r2, r1
   dbf16:	4291      	cmp	r1, r2
   dbf18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dbf1c:	d100      	bne.n	dbf20 <memcpy+0xc>
   dbf1e:	4770      	bx	lr
   dbf20:	b510      	push	{r4, lr}
   dbf22:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbf26:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbf2a:	4291      	cmp	r1, r2
   dbf2c:	d1f9      	bne.n	dbf22 <memcpy+0xe>
   dbf2e:	bd10      	pop	{r4, pc}

000dbf30 <memmove>:
   dbf30:	4288      	cmp	r0, r1
   dbf32:	b510      	push	{r4, lr}
   dbf34:	eb01 0402 	add.w	r4, r1, r2
   dbf38:	d902      	bls.n	dbf40 <memmove+0x10>
   dbf3a:	4284      	cmp	r4, r0
   dbf3c:	4623      	mov	r3, r4
   dbf3e:	d807      	bhi.n	dbf50 <memmove+0x20>
   dbf40:	1e43      	subs	r3, r0, #1
   dbf42:	42a1      	cmp	r1, r4
   dbf44:	d008      	beq.n	dbf58 <memmove+0x28>
   dbf46:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbf4a:	f803 2f01 	strb.w	r2, [r3, #1]!
   dbf4e:	e7f8      	b.n	dbf42 <memmove+0x12>
   dbf50:	4402      	add	r2, r0
   dbf52:	4601      	mov	r1, r0
   dbf54:	428a      	cmp	r2, r1
   dbf56:	d100      	bne.n	dbf5a <memmove+0x2a>
   dbf58:	bd10      	pop	{r4, pc}
   dbf5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dbf5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dbf62:	e7f7      	b.n	dbf54 <memmove+0x24>

000dbf64 <memset>:
   dbf64:	4402      	add	r2, r0
   dbf66:	4603      	mov	r3, r0
   dbf68:	4293      	cmp	r3, r2
   dbf6a:	d100      	bne.n	dbf6e <memset+0xa>
   dbf6c:	4770      	bx	lr
   dbf6e:	f803 1b01 	strb.w	r1, [r3], #1
   dbf72:	e7f9      	b.n	dbf68 <memset+0x4>

000dbf74 <srand>:
   dbf74:	b538      	push	{r3, r4, r5, lr}
   dbf76:	4b0d      	ldr	r3, [pc, #52]	; (dbfac <srand+0x38>)
   dbf78:	681d      	ldr	r5, [r3, #0]
   dbf7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbf7c:	4604      	mov	r4, r0
   dbf7e:	b97b      	cbnz	r3, dbfa0 <srand+0x2c>
   dbf80:	2018      	movs	r0, #24
   dbf82:	f7fc f9f7 	bl	d8374 <malloc>
   dbf86:	4a0a      	ldr	r2, [pc, #40]	; (dbfb0 <srand+0x3c>)
   dbf88:	4b0a      	ldr	r3, [pc, #40]	; (dbfb4 <srand+0x40>)
   dbf8a:	63a8      	str	r0, [r5, #56]	; 0x38
   dbf8c:	e9c0 2300 	strd	r2, r3, [r0]
   dbf90:	4b09      	ldr	r3, [pc, #36]	; (dbfb8 <srand+0x44>)
   dbf92:	6083      	str	r3, [r0, #8]
   dbf94:	230b      	movs	r3, #11
   dbf96:	8183      	strh	r3, [r0, #12]
   dbf98:	2201      	movs	r2, #1
   dbf9a:	2300      	movs	r3, #0
   dbf9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbfa0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbfa2:	2200      	movs	r2, #0
   dbfa4:	611c      	str	r4, [r3, #16]
   dbfa6:	615a      	str	r2, [r3, #20]
   dbfa8:	bd38      	pop	{r3, r4, r5, pc}
   dbfaa:	bf00      	nop
   dbfac:	2003e218 	.word	0x2003e218
   dbfb0:	abcd330e 	.word	0xabcd330e
   dbfb4:	e66d1234 	.word	0xe66d1234
   dbfb8:	0005deec 	.word	0x0005deec

000dbfbc <strchr>:
   dbfbc:	b2c9      	uxtb	r1, r1
   dbfbe:	4603      	mov	r3, r0
   dbfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbfc4:	b11a      	cbz	r2, dbfce <strchr+0x12>
   dbfc6:	428a      	cmp	r2, r1
   dbfc8:	d1f9      	bne.n	dbfbe <strchr+0x2>
   dbfca:	4618      	mov	r0, r3
   dbfcc:	4770      	bx	lr
   dbfce:	2900      	cmp	r1, #0
   dbfd0:	bf18      	it	ne
   dbfd2:	2300      	movne	r3, #0
   dbfd4:	e7f9      	b.n	dbfca <strchr+0xe>

000dbfd6 <strchrnul>:
   dbfd6:	b510      	push	{r4, lr}
   dbfd8:	4604      	mov	r4, r0
   dbfda:	f7ff ffef 	bl	dbfbc <strchr>
   dbfde:	b918      	cbnz	r0, dbfe8 <strchrnul+0x12>
   dbfe0:	4620      	mov	r0, r4
   dbfe2:	f000 f832 	bl	dc04a <strlen>
   dbfe6:	4420      	add	r0, r4
   dbfe8:	bd10      	pop	{r4, pc}

000dbfea <strcmp>:
   dbfea:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbfee:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbff2:	2a01      	cmp	r2, #1
   dbff4:	bf28      	it	cs
   dbff6:	429a      	cmpcs	r2, r3
   dbff8:	d0f7      	beq.n	dbfea <strcmp>
   dbffa:	1ad0      	subs	r0, r2, r3
   dbffc:	4770      	bx	lr

000dbffe <strcpy>:
   dbffe:	4603      	mov	r3, r0
   dc000:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc004:	f803 2b01 	strb.w	r2, [r3], #1
   dc008:	2a00      	cmp	r2, #0
   dc00a:	d1f9      	bne.n	dc000 <strcpy+0x2>
   dc00c:	4770      	bx	lr
	...

000dc010 <strdup>:
   dc010:	4b02      	ldr	r3, [pc, #8]	; (dc01c <strdup+0xc>)
   dc012:	4601      	mov	r1, r0
   dc014:	6818      	ldr	r0, [r3, #0]
   dc016:	f000 b803 	b.w	dc020 <_strdup_r>
   dc01a:	bf00      	nop
   dc01c:	2003e218 	.word	0x2003e218

000dc020 <_strdup_r>:
   dc020:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc022:	4604      	mov	r4, r0
   dc024:	4608      	mov	r0, r1
   dc026:	460d      	mov	r5, r1
   dc028:	f000 f80f 	bl	dc04a <strlen>
   dc02c:	1c42      	adds	r2, r0, #1
   dc02e:	4611      	mov	r1, r2
   dc030:	4620      	mov	r0, r4
   dc032:	9201      	str	r2, [sp, #4]
   dc034:	f7fc f9d6 	bl	d83e4 <_malloc_r>
   dc038:	4604      	mov	r4, r0
   dc03a:	b118      	cbz	r0, dc044 <_strdup_r+0x24>
   dc03c:	9a01      	ldr	r2, [sp, #4]
   dc03e:	4629      	mov	r1, r5
   dc040:	f7ff ff68 	bl	dbf14 <memcpy>
   dc044:	4620      	mov	r0, r4
   dc046:	b003      	add	sp, #12
   dc048:	bd30      	pop	{r4, r5, pc}

000dc04a <strlen>:
   dc04a:	4603      	mov	r3, r0
   dc04c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc050:	2a00      	cmp	r2, #0
   dc052:	d1fb      	bne.n	dc04c <strlen+0x2>
   dc054:	1a18      	subs	r0, r3, r0
   dc056:	3801      	subs	r0, #1
   dc058:	4770      	bx	lr

000dc05a <strncmp>:
   dc05a:	b510      	push	{r4, lr}
   dc05c:	b16a      	cbz	r2, dc07a <strncmp+0x20>
   dc05e:	3901      	subs	r1, #1
   dc060:	1884      	adds	r4, r0, r2
   dc062:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc066:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dc06a:	4293      	cmp	r3, r2
   dc06c:	d103      	bne.n	dc076 <strncmp+0x1c>
   dc06e:	42a0      	cmp	r0, r4
   dc070:	d001      	beq.n	dc076 <strncmp+0x1c>
   dc072:	2b00      	cmp	r3, #0
   dc074:	d1f5      	bne.n	dc062 <strncmp+0x8>
   dc076:	1a98      	subs	r0, r3, r2
   dc078:	bd10      	pop	{r4, pc}
   dc07a:	4610      	mov	r0, r2
   dc07c:	e7fc      	b.n	dc078 <strncmp+0x1e>

000dc07e <strncpy>:
   dc07e:	b510      	push	{r4, lr}
   dc080:	3901      	subs	r1, #1
   dc082:	4603      	mov	r3, r0
   dc084:	b132      	cbz	r2, dc094 <strncpy+0x16>
   dc086:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc08a:	f803 4b01 	strb.w	r4, [r3], #1
   dc08e:	3a01      	subs	r2, #1
   dc090:	2c00      	cmp	r4, #0
   dc092:	d1f7      	bne.n	dc084 <strncpy+0x6>
   dc094:	441a      	add	r2, r3
   dc096:	2100      	movs	r1, #0
   dc098:	4293      	cmp	r3, r2
   dc09a:	d100      	bne.n	dc09e <strncpy+0x20>
   dc09c:	bd10      	pop	{r4, pc}
   dc09e:	f803 1b01 	strb.w	r1, [r3], #1
   dc0a2:	e7f9      	b.n	dc098 <strncpy+0x1a>

000dc0a4 <strrchr>:
   dc0a4:	b538      	push	{r3, r4, r5, lr}
   dc0a6:	4603      	mov	r3, r0
   dc0a8:	460c      	mov	r4, r1
   dc0aa:	b969      	cbnz	r1, dc0c8 <strrchr+0x24>
   dc0ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc0b0:	f7ff bf84 	b.w	dbfbc <strchr>
   dc0b4:	1c43      	adds	r3, r0, #1
   dc0b6:	4605      	mov	r5, r0
   dc0b8:	4621      	mov	r1, r4
   dc0ba:	4618      	mov	r0, r3
   dc0bc:	f7ff ff7e 	bl	dbfbc <strchr>
   dc0c0:	2800      	cmp	r0, #0
   dc0c2:	d1f7      	bne.n	dc0b4 <strrchr+0x10>
   dc0c4:	4628      	mov	r0, r5
   dc0c6:	bd38      	pop	{r3, r4, r5, pc}
   dc0c8:	2500      	movs	r5, #0
   dc0ca:	e7f5      	b.n	dc0b8 <strrchr+0x14>

000dc0cc <_strtol_l.isra.0>:
   dc0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc0d0:	4e3a      	ldr	r6, [pc, #232]	; (dc1bc <_strtol_l.isra.0+0xf0>)
   dc0d2:	4686      	mov	lr, r0
   dc0d4:	468c      	mov	ip, r1
   dc0d6:	4660      	mov	r0, ip
   dc0d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc0dc:	5da5      	ldrb	r5, [r4, r6]
   dc0de:	f015 0508 	ands.w	r5, r5, #8
   dc0e2:	d1f8      	bne.n	dc0d6 <_strtol_l.isra.0+0xa>
   dc0e4:	2c2d      	cmp	r4, #45	; 0x2d
   dc0e6:	d133      	bne.n	dc150 <_strtol_l.isra.0+0x84>
   dc0e8:	f89c 4000 	ldrb.w	r4, [ip]
   dc0ec:	f04f 0801 	mov.w	r8, #1
   dc0f0:	f100 0c02 	add.w	ip, r0, #2
   dc0f4:	2b00      	cmp	r3, #0
   dc0f6:	d05c      	beq.n	dc1b2 <_strtol_l.isra.0+0xe6>
   dc0f8:	2b10      	cmp	r3, #16
   dc0fa:	d10c      	bne.n	dc116 <_strtol_l.isra.0+0x4a>
   dc0fc:	2c30      	cmp	r4, #48	; 0x30
   dc0fe:	d10a      	bne.n	dc116 <_strtol_l.isra.0+0x4a>
   dc100:	f89c 0000 	ldrb.w	r0, [ip]
   dc104:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dc108:	2858      	cmp	r0, #88	; 0x58
   dc10a:	d14d      	bne.n	dc1a8 <_strtol_l.isra.0+0xdc>
   dc10c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dc110:	2310      	movs	r3, #16
   dc112:	f10c 0c02 	add.w	ip, ip, #2
   dc116:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dc11a:	3f01      	subs	r7, #1
   dc11c:	2600      	movs	r6, #0
   dc11e:	fbb7 f9f3 	udiv	r9, r7, r3
   dc122:	4630      	mov	r0, r6
   dc124:	fb03 7a19 	mls	sl, r3, r9, r7
   dc128:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dc12c:	2d09      	cmp	r5, #9
   dc12e:	d818      	bhi.n	dc162 <_strtol_l.isra.0+0x96>
   dc130:	462c      	mov	r4, r5
   dc132:	42a3      	cmp	r3, r4
   dc134:	dd24      	ble.n	dc180 <_strtol_l.isra.0+0xb4>
   dc136:	1c75      	adds	r5, r6, #1
   dc138:	d007      	beq.n	dc14a <_strtol_l.isra.0+0x7e>
   dc13a:	4581      	cmp	r9, r0
   dc13c:	d31d      	bcc.n	dc17a <_strtol_l.isra.0+0xae>
   dc13e:	d101      	bne.n	dc144 <_strtol_l.isra.0+0x78>
   dc140:	45a2      	cmp	sl, r4
   dc142:	db1a      	blt.n	dc17a <_strtol_l.isra.0+0xae>
   dc144:	fb00 4003 	mla	r0, r0, r3, r4
   dc148:	2601      	movs	r6, #1
   dc14a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dc14e:	e7eb      	b.n	dc128 <_strtol_l.isra.0+0x5c>
   dc150:	2c2b      	cmp	r4, #43	; 0x2b
   dc152:	bf08      	it	eq
   dc154:	f89c 4000 	ldrbeq.w	r4, [ip]
   dc158:	46a8      	mov	r8, r5
   dc15a:	bf08      	it	eq
   dc15c:	f100 0c02 	addeq.w	ip, r0, #2
   dc160:	e7c8      	b.n	dc0f4 <_strtol_l.isra.0+0x28>
   dc162:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dc166:	2d19      	cmp	r5, #25
   dc168:	d801      	bhi.n	dc16e <_strtol_l.isra.0+0xa2>
   dc16a:	3c37      	subs	r4, #55	; 0x37
   dc16c:	e7e1      	b.n	dc132 <_strtol_l.isra.0+0x66>
   dc16e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dc172:	2d19      	cmp	r5, #25
   dc174:	d804      	bhi.n	dc180 <_strtol_l.isra.0+0xb4>
   dc176:	3c57      	subs	r4, #87	; 0x57
   dc178:	e7db      	b.n	dc132 <_strtol_l.isra.0+0x66>
   dc17a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dc17e:	e7e4      	b.n	dc14a <_strtol_l.isra.0+0x7e>
   dc180:	1c73      	adds	r3, r6, #1
   dc182:	d106      	bne.n	dc192 <_strtol_l.isra.0+0xc6>
   dc184:	2322      	movs	r3, #34	; 0x22
   dc186:	f8ce 3000 	str.w	r3, [lr]
   dc18a:	4638      	mov	r0, r7
   dc18c:	b942      	cbnz	r2, dc1a0 <_strtol_l.isra.0+0xd4>
   dc18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc192:	f1b8 0f00 	cmp.w	r8, #0
   dc196:	d000      	beq.n	dc19a <_strtol_l.isra.0+0xce>
   dc198:	4240      	negs	r0, r0
   dc19a:	2a00      	cmp	r2, #0
   dc19c:	d0f7      	beq.n	dc18e <_strtol_l.isra.0+0xc2>
   dc19e:	b10e      	cbz	r6, dc1a4 <_strtol_l.isra.0+0xd8>
   dc1a0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dc1a4:	6011      	str	r1, [r2, #0]
   dc1a6:	e7f2      	b.n	dc18e <_strtol_l.isra.0+0xc2>
   dc1a8:	2430      	movs	r4, #48	; 0x30
   dc1aa:	2b00      	cmp	r3, #0
   dc1ac:	d1b3      	bne.n	dc116 <_strtol_l.isra.0+0x4a>
   dc1ae:	2308      	movs	r3, #8
   dc1b0:	e7b1      	b.n	dc116 <_strtol_l.isra.0+0x4a>
   dc1b2:	2c30      	cmp	r4, #48	; 0x30
   dc1b4:	d0a4      	beq.n	dc100 <_strtol_l.isra.0+0x34>
   dc1b6:	230a      	movs	r3, #10
   dc1b8:	e7ad      	b.n	dc116 <_strtol_l.isra.0+0x4a>
   dc1ba:	bf00      	nop
   dc1bc:	000dd037 	.word	0x000dd037

000dc1c0 <strtol>:
   dc1c0:	4613      	mov	r3, r2
   dc1c2:	460a      	mov	r2, r1
   dc1c4:	4601      	mov	r1, r0
   dc1c6:	4802      	ldr	r0, [pc, #8]	; (dc1d0 <strtol+0x10>)
   dc1c8:	6800      	ldr	r0, [r0, #0]
   dc1ca:	f7ff bf7f 	b.w	dc0cc <_strtol_l.isra.0>
   dc1ce:	bf00      	nop
   dc1d0:	2003e218 	.word	0x2003e218

000dc1d4 <__register_exitproc>:
   dc1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dc1d8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dc294 <__register_exitproc+0xc0>
   dc1dc:	4606      	mov	r6, r0
   dc1de:	f8d8 0000 	ldr.w	r0, [r8]
   dc1e2:	461f      	mov	r7, r3
   dc1e4:	460d      	mov	r5, r1
   dc1e6:	4691      	mov	r9, r2
   dc1e8:	f000 f856 	bl	dc298 <__retarget_lock_acquire_recursive>
   dc1ec:	4b25      	ldr	r3, [pc, #148]	; (dc284 <__register_exitproc+0xb0>)
   dc1ee:	681c      	ldr	r4, [r3, #0]
   dc1f0:	b934      	cbnz	r4, dc200 <__register_exitproc+0x2c>
   dc1f2:	4c25      	ldr	r4, [pc, #148]	; (dc288 <__register_exitproc+0xb4>)
   dc1f4:	601c      	str	r4, [r3, #0]
   dc1f6:	4b25      	ldr	r3, [pc, #148]	; (dc28c <__register_exitproc+0xb8>)
   dc1f8:	b113      	cbz	r3, dc200 <__register_exitproc+0x2c>
   dc1fa:	681b      	ldr	r3, [r3, #0]
   dc1fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dc200:	6863      	ldr	r3, [r4, #4]
   dc202:	2b1f      	cmp	r3, #31
   dc204:	dd07      	ble.n	dc216 <__register_exitproc+0x42>
   dc206:	f8d8 0000 	ldr.w	r0, [r8]
   dc20a:	f000 f847 	bl	dc29c <__retarget_lock_release_recursive>
   dc20e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dc216:	b34e      	cbz	r6, dc26c <__register_exitproc+0x98>
   dc218:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dc21c:	b988      	cbnz	r0, dc242 <__register_exitproc+0x6e>
   dc21e:	4b1c      	ldr	r3, [pc, #112]	; (dc290 <__register_exitproc+0xbc>)
   dc220:	b923      	cbnz	r3, dc22c <__register_exitproc+0x58>
   dc222:	f8d8 0000 	ldr.w	r0, [r8]
   dc226:	f000 f838 	bl	dc29a <__retarget_lock_release>
   dc22a:	e7f0      	b.n	dc20e <__register_exitproc+0x3a>
   dc22c:	f44f 7084 	mov.w	r0, #264	; 0x108
   dc230:	f7fc f8a0 	bl	d8374 <malloc>
   dc234:	2800      	cmp	r0, #0
   dc236:	d0f4      	beq.n	dc222 <__register_exitproc+0x4e>
   dc238:	2300      	movs	r3, #0
   dc23a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dc23e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dc242:	6863      	ldr	r3, [r4, #4]
   dc244:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dc248:	2201      	movs	r2, #1
   dc24a:	409a      	lsls	r2, r3
   dc24c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dc250:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dc254:	4313      	orrs	r3, r2
   dc256:	2e02      	cmp	r6, #2
   dc258:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dc25c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dc260:	bf02      	ittt	eq
   dc262:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dc266:	431a      	orreq	r2, r3
   dc268:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dc26c:	6863      	ldr	r3, [r4, #4]
   dc26e:	f8d8 0000 	ldr.w	r0, [r8]
   dc272:	1c5a      	adds	r2, r3, #1
   dc274:	3302      	adds	r3, #2
   dc276:	6062      	str	r2, [r4, #4]
   dc278:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dc27c:	f000 f80e 	bl	dc29c <__retarget_lock_release_recursive>
   dc280:	2000      	movs	r0, #0
   dc282:	e7c6      	b.n	dc212 <__register_exitproc+0x3e>
   dc284:	2003e7e4 	.word	0x2003e7e4
   dc288:	2003e758 	.word	0x2003e758
   dc28c:	00000000 	.word	0x00000000
   dc290:	000d8375 	.word	0x000d8375
   dc294:	2003e27c 	.word	0x2003e27c

000dc298 <__retarget_lock_acquire_recursive>:
   dc298:	4770      	bx	lr

000dc29a <__retarget_lock_release>:
   dc29a:	4770      	bx	lr

000dc29c <__retarget_lock_release_recursive>:
   dc29c:	4770      	bx	lr

000dc29e <link_code_end>:
	...

000dc2a0 <dynalib_user>:
   dc2a0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dc2b0:	0000 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   dc2c0:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dc2d0:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dc2e0:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dc2f0:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   dc300:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   dc310:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   dc320:	4400 6369 6e6f 656e 7463 6465 4e00 206f     .Diconnected.No 
   dc330:	6144 6174 5200 7365 6f70 736e 2065 6552     Data.Response Re
   dc340:	6563 7669 6465 5500 6b6e 6f6e 6e77 7220     ceived.Unknown r
   dc350:	7365 6f70 736e 2065 6572 6563 6976 6465     esponse recevied
   dc360:	2520 0069 6255 6469 746f 2073 6f48 6b6f      %i.Ubidots Hook
   dc370:	4800 7261 2064 6552 6573 2074 6e69 3220     .Hard Reset in 2
   dc380:	7320 6365 6e6f 7364 5300 7465 5620 7265      seconds.Set Ver
   dc390:	6f62 6573 4d20 646f 0065 6c43 6165 6572     bose Mode.Cleare
   dc3a0:	2064 6556 6272 736f 2065 6f4d 6564 4f00     d Verbose Mode.O
   dc3b0:	6570 206e 6974 656d 7320 7465 7420 206f     pen time set to 
   dc3c0:	6925 4400 6961 796c 6320 756f 746e 7320     %i.Daily count s
   dc3d0:	7465 7420 206f 6925 4400 6961 796c 5300     et to %i.Daily.S
   dc3e0:	6e65 6973 6974 6976 7974 7320 7465 7420     ensitivity set t
   dc3f0:	206f 6925 2500 2069 6573 0063 6544 6f62     o %i.%i sec.Debo
   dc400:	6e75 6563 7320 7465 7420 206f 6925 7320     unce set to %i s
   dc410:	6365 6e6f 7364 4c00 776f 5020 776f 7265     econds.Low Power
   dc420:	4d20 646f 0065 6f4e 6d72 6c61 4f20 6570      Mode.Normal Ope
   dc430:	6172 6974 6e6f 0073 6f4e 2074 6f4c 2077     rations.Not Low 
   dc440:	6f50 6577 0072 6c43 6165 6572 2064 6e49     Power.Cleared In
   dc450:	6574 7272 7075 0074 6f43 6e75 2c74 6820     terrupt.Count, h
   dc460:	756f 6c72 3a79 2520 2c69 6420 6961 796c     ourly: %i, daily
   dc470:	203a 6925 7b00 6822 756f 6c72 2279 253a     : %i.{"hourly":%
   dc480:	2c69 2220 6164 6c69 2279 253a 2c69 6222     i, "daily":%i,"b
   dc490:	7461 6574 7972 3a22 6925 222c 656b 3179     attery":%i,"key1
   dc4a0:	3a22 2522 2273 222c 6574 706d 3a22 6925     ":"%s","temp":%i
   dc4b0:	202c 7222 7365 7465 2273 253a 2c69 2220     , "resets":%i, "
   dc4c0:	6c61 7265 7374 3a22 6925 222c 616d 6d78     alerts":%i,"maxm
   dc4d0:	6e69 3a22 6925 222c 6f63 6e6e 6365 7474     in":%i,"connectt
   dc4e0:	6d69 2265 253a 2c69 7422 6d69 7365 6174     ime":%i,"timesta
   dc4f0:	706d 3a22 6c25 3075 3030 007d 6255 6469     mp":%lu000}.Ubid
   dc500:	746f 2d73 6f43 6e75 6574 2d72 6f48 6b6f     ots-Counter-Hook
   dc510:	762d 0031 7325 5320 253a 2e32 6630 2525     -v1.%s S:%2.0f%%
   dc520:	202c 3a51 3225 302e 2566 2025 5300 7465     , Q:%2.0f%% .Set
   dc530:	5320 6c6f 7261 5020 776f 7265 6465 4d20      Solar Powered M
   dc540:	646f 0065 6c43 6165 6572 2064 6f53 616c     ode.Cleared Sola
   dc550:	2072 6f50 6577 6572 2064 6f4d 6564 6f00     r Powered Mode.o
   dc560:	6570 546e 6d69 2065 6176 756c 2065 666f     penTime value of
   dc570:	2520 2069 6572 6573 7474 6e69 2067 6f74      %i resetting to
   dc580:	6420 6665 7561 746c 4e00 0041 6925 303a      default.NA.%i:0
   dc590:	0030 6c43 736f 6e69 2067 6974 656d 7320     0.Closing time s
   dc5a0:	7465 7420 206f 6925 4600 6f72 206d 7325     et to %i.From %s
   dc5b0:	7420 206f 7325 5300 6174 6574 5420 6172      to %s.State Tra
   dc5c0:	736e 7469 6f69 006e 7552 6e6e 6e69 0067     nsition.Running.
   dc5d0:	6144 6c69 2079 6c43 6165 756e 0070 6f4c     Daily Cleanup.Lo
   dc5e0:	6461 6e69 2067 7953 7473 6d65 4420 6665     ading System Def
   dc5f0:	7561 746c 0073 7453 7261 6974 676e 5320     aults.Starting S
   dc600:	7465 7075 4800 756f 6c72 4379 756f 746e     etup.HourlyCount
   dc610:	5300 6769 616e 006c 6552 6573 4374 756f     .Signal.ResetCou
   dc620:	746e 5400 6d65 6570 6172 7574 6572 5200     nt.Temperature.R
   dc630:	6c65 6165 6573 7300 6174 6574 664f 6843     elease.stateOfCh
   dc640:	0067 6f6c 5077 776f 7265 6f4d 6564 4300     g.lowPowerMode.C
   dc650:	6f6c 6573 6954 656d 4100 656c 7472 0073     loseTime.Alerts.
   dc660:	6954 656d 664f 7366 7465 4200 7461 6574     TimeOffset.Batte
   dc670:	7972 6f43 746e 7865 0074 6573 4474 6961     ryContext.setDai
   dc680:	796c 6f43 6e75 0074 6572 6573 4374 756f     lyCount.resetCou
   dc690:	746e 0073 6148 6472 6552 6573 0074 6553     nts.HardReset.Se
   dc6a0:	646e 6f4e 0077 6f4c 5077 776f 7265 6f4d     ndNow.LowPowerMo
   dc6b0:	6564 5300 6c6f 7261 4d2d 646f 0065 6556     de.Solar-Mode.Ve
   dc6c0:	6272 736f 2d65 6f4d 6564 5300 7465 542d     rbose-Mode.Set-T
   dc6d0:	6d69 7a65 6e6f 0065 6553 2d74 5344 4f54     imezone.Set-DSTO
   dc6e0:	6666 6573 0074 6553 2d74 704f 6e65 6954     ffset.Set-OpenTi
   dc6f0:	656d 5300 7465 432d 6f6c 6573 5300 7465     me.Set-Close.Set
   dc700:	532d 6e65 6973 6974 6976 7974 5300 7465     -Sensitivity.Set
   dc710:	442d 6265 756f 636e 0065 5246 4d41 5420     -Debounce.FRAM T
   dc720:	7365 2074 7245 6f72 0072 6f6c 6461 6e69     est Error.loadin
   dc730:	2067 5246 4d41 7620 6c61 6575 0073 3225     g FRAM values.%2
   dc740:	312e 2066 5455 0043 6552 7473 7261 6574     .1f UTC.Restarte
   dc750:	2064 7564 2065 6f74 6120 7020 6e69 7220     d due to a pin r
   dc760:	7365 7465 5200 7365 6174 7472 6465 6420     eset.Restarted d
   dc770:	6575 7420 206f 2061 7375 7265 7220 7365     ue to a user res
   dc780:	7465 5300 6174 7472 7075 4320 6d6f 6c70     et.Startup Compl
   dc790:	7465 0065 6c63 756f 2064 6f63 6e6e 6365     ete.cloud connec
   dc7a0:	6974 6e6f 7520 736e 6375 6563 7373 7566     tion unsuccessfu
   dc7b0:	006c 6f43 6e6e 6365 6574 2064 6e69 2520     l.Connected in %
   dc7c0:	2069 6573 7363 4300 6c65 756c 616c 0072     i secs.Cellular.
   dc7d0:	6166 6c69 6465 7420 206f 6f63 6e6e 6365     failed to connec
   dc7e0:	2074 6f74 6320 6f6c 6475 202c 6f64 6e69     t to cloud, doin
   dc7f0:	2067 6564 7065 7220 7365 7465 4500 7272     g deep reset.Err
   dc800:	726f 5320 6174 6574 2d20 4620 6c75 206c     or State - Full 
   dc810:	6f4d 6564 206d 6552 6573 0074 7453 7461     Modem Reset.Stat
   dc820:	0065 7245 6f72 2072 7453 7461 2065 202d     e.Error State - 
   dc830:	7953 7473 6d65 5220 7365 7465 4f00 7475     System Reset.Out
   dc840:	6f20 2066 656d 6f6d 7972 6f20 6363 7275      of memory occur
   dc850:	6572 2064 6973 657a 253d 0064 654d 6f6d     red size=%d.Memo
   dc860:	7972 0000                                   ry..

000dc864 <_ZTV5Timer>:
	...
   dc86c:	43a1 000d 43f5 000d 4241 000d               .C...C..AB..

000dc878 <_ZTVN5spark10LogHandlerE>:
	...
   dc888:	40a5 000d 40c9 000d                         .@...@..

000dc890 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dc898:	4339 000d 436d 000d a0e9 000d 40cb 000d     9C..mC.......@..

000dc8a8 <_ZTV8MB85RC64>:
	...
   dc8b0:	41f1 000d 4205 000d 71f9 000d 728f 000d     .A...B...q...r..
   dc8c0:	7311 000d                                   .s..

000dc8c4 <_ZTV17PublishQueueAsync>:
	...
   dc8cc:	4219 000d 422d 000d 7679 000d 7805 000d     .B..-B..yv...x..
   dc8dc:	77c5 000d 77a3 000d 794b 000d 77eb 000d     .w...w..Ky...w..
   dc8ec:	c2b4 000d c2bc 000d c2c1 000d c2c6 000d     ................
   dc8fc:	c2ca 000d c2cf 000d c2d4 000d c2d8 000d     ................
   dc90c:	c2e3 000d c2ee 000d                         ........

000dc914 <_ZL17FRAMversionNumber>:
   dc914:	0003 0000 6954 656d 7a20 6e6f 2065 666f     ....Time zone of
   dc924:	7366 7465 2520 0069 5344 2054 666f 7366     fset %i.DST offs
   dc934:	7465 2520 2e32 6631 6600 6961 656c 2064     et %2.1f.failed 
   dc944:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   dc954:	3025 7832 6320 756f 746e 253d 0075 6166     %02x count=%u.fa
   dc964:	6c69 6465 7420 206f 6572 6461 7220 6765     iled to read reg
   dc974:	6441 7264 253d 3230 2078 7473 7461 253d     Addr=%02x stat=%
   dc984:	0064 4f46 5455 6420 6469 6e20 746f 6720     d.FOUT did not g
   dc994:	206f 4948 4847 6e00 746f 6420 7465 6365     o HIGH.not detec
   dc9a4:	6574 0064 6166 6c69 6465 7420 206f 7277     ted.failed to wr
   dc9b4:	7469 2065 6572 4167 6464 3d72 3025 7832     ite regAddr=%02x
   dc9c4:	7320 6174 3d74 6425 7300 7465 4457 2054      stat=%d.setWDT 
   dc9d4:	6425 7700 7461 6863 6f64 2067 6c63 6165     %d.watchdog clea
   dc9e4:	6572 2064 5262 7365 6c75 3d74 6425 7700     red bResult=%d.w
   dc9f4:	7461 6863 6f64 2067 6573 2074 6f66 7275     atchdog set four
   dca04:	6553 7363 253d 2064 5262 7365 6c75 3d74     Secs=%d bResult=
   dca14:	6425 5700 5441 4843 4f44 0047 4544 5045     %d.WATCHDOG.DEEP
   dca24:	505f 574f 5245 445f 574f 004e 4f43 4e55     _POWER_DOWN.COUN
   dca34:	4454 574f 5f4e 4954 454d 0052 4c41 5241     TDOWN_TIMER.ALAR
   dca44:	004d 6166 6c69 7275 2065 6e69 7520 6470     M.failure in upd
   dca54:	7461 5765 6b61 5265 6165 6f73 206e 6425     ateWakeReason %d
   dca64:	7700 6b61 2065 6572 7361 6e6f 3d20 2520     .wake reason = %
   dca74:	0073 6166 6c69 7275 2065 6e69 7320 7465     s.failure in set
   dca84:	6f43 6e75 6474 776f 546e 6d69 7265 2520     CountdownTimer %
   dca94:	0064 6166 6c69 7275 2065 6e69 6420 6565     d.failure in dee
   dcaa4:	5070 776f 7265 6f44 6e77 2520 0064 4552     pPowerDown %d.RE
   dcab4:	5f47 4c53 4545 5f50 5443 4c52 303d 2578     G_SLEEP_CTRL=0x%
   dcac4:	7832 6400 6469 276e 2074 6f70 6577 2072     2x.didn't power 
   dcad4:	6f64 6e77 2500 3430 2d64 3025 6432 252d     down.%04d-%02d-%
   dcae4:	3230 2064 3025 6432 253a 3230 3a64 3025     02d %02d:%02d:%0
   dcaf4:	6432 6700 7465 7452 4163 5473 206d 7325     2d.getRtcAsTm %s
   dcb04:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   dcb14:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   dcb24:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   dcb34:	3142 3038 0035 6573 5274 6374 7341 6d54     B1805.setRtcAsTm
   dcb44:	2520 0073 6166 6c69 7275 2065 6e69 7320      %s.failure in s
   dcb54:	7465 7452 4663 6f72 546d 206d 6425 7300     etRtcFromTm %d.s
   dcb64:	7465 5220 4354 6620 6f72 206d 6c63 756f     et RTC from clou
   dcb74:	2064 7325 6100 7070 612e 3162 3038 0035     d %s.app.ab1805.

000dcb84 <_ZTV6AB1805>:
	...
   dcb8c:	666d 000d 666f 000d 6cb9 000d 6d3f 000d     mf..of...l..?m..
   dcb9c:	7277 7469 4465 7461 2061 6166 6c69 6465     writeData failed
   dcbac:	6420 7275 6e69 2067 7265 7361 2065 7266      during erase fr
   dcbbc:	6d61 6441 7264 253d 0075 0000               amAddr=%u...

000dcbc8 <_ZTV6MB85RC>:
	...
   dcbd0:	7149 000d 714b 000d 71f9 000d 728f 000d     Iq..Kq...q...r..
   dcbe0:	7311 000d 7550 6c62 7369 5168 6575 6575     .s..PublishQueue
   dcbf0:	7341 6e79 0063 7571 7565 6965 676e 6520     Async.queueing e
   dcc00:	6576 746e 614e 656d 253d 2073 6164 6174     ventName=%s data
   dcc10:	253d 2073 7474 3d6c 6425 6620 616c 7367     =%s ttl=%d flags
   dcc20:	3d31 6425 6620 616c 7367 3d32 6425 7320     1=%d flags2=%d s
   dcc30:	7a69 3d65 6425 7000 6275 696c 6873 6e69     ize=%d.publishin
   dcc40:	2067 7325 2520 2073 7474 3d6c 6425 6620     g %s %s ttl=%d f
   dcc50:	616c 7367 253d 0078 7570 6c62 7369 6568     lags=%x.publishe
   dcc60:	2064 7573 6363 7365 6673 6c75 796c 7000     d successfully.p
   dcc70:	6275 696c 6873 6465 6620 6961 656c 2c64     ublished failed,
   dcc80:	7720 6c69 206c 6572 7274 2079 6e69 2520      will retry in %
   dcc90:	756c 6d20 0073 7061 2e70 7570 7162 0000     lu ms.app.pubq..

000dcca0 <_ZTV21PublishQueueAsyncBase>:
	...
   dccb0:	7679 000d 40a5 000d 40a5 000d 40a5 000d     yv...@...@...@..
   dccc0:	40a5 000d 40a5 000d                         .@...@..

000dccc8 <_ZTV25PublishQueueAsyncRetained>:
	...
   dccd0:	7761 000d 7775 000d 7679 000d 7805 000d     aw..uw..yv...x..
   dcce0:	77c5 000d 77a3 000d 794b 000d 77eb 000d     .w...w..Ky...w..

000dccf0 <_ZTVN5spark13CellularClassE>:
	...
   dccf8:	8533 000d 8529 000d 851f 000d 84e1 000d     3...)...........
   dcd08:	8513 000d 4381 000d a441 000d a449 000d     .....C..A...I...
   dcd18:	8507 000d 84ff 000d 84f5 000d 84eb 000d     ................
   dcd28:	a479 000d                                   y...

000dcd2c <_ZTV14CellularSignal>:
	...
   dcd34:	85e1 000d 8609 000d 85e3 000d 8619 000d     ................
   dcd44:	864d 000d 8679 000d 86ad 000d 86fd 000d     M...y...........
   dcd54:	85e7 000d 8603 000d fffc ffff 0000 0000     ................
   dcd64:	8723 000d                                   #...

000dcd68 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dcd70:	8743 000d 8749 000d 8787 000d 8757 000d     C...I.......W...
   dcd80:	8745 000d                                   E...

000dcd84 <_ZTVN5spark13EthernetClassE>:
	...
   dcd8c:	8db7 000d 8dad 000d 8da3 000d 8d99 000d     ................
   dcd9c:	8d8d 000d 8d81 000d a441 000d a449 000d     ........A...I...
   dcdac:	8d75 000d 8d6d 000d 8d63 000d 8d59 000d     u...m...c...Y...
   dcdbc:	a479 000d                                   y...

000dcdc0 <_ZTV7TwoWire>:
	...
   dcdc8:	8e07 000d 8e51 000d 8e29 000d 8e09 000d     ....Q...).......
   dcdd8:	8e31 000d 8e39 000d 8e41 000d 8e49 000d     1...9...A...I...

000dcde8 <_ZTV9IPAddress>:
	...
   dcdf0:	8ff5 000d 8fe5 000d 8fe7 000d 2575 3430     ............u%04
   dce00:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   dce10:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   dce20:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dce30:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   dce40:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   dce50:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   dce60:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000dce70 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dce78:	94b1 000d 94d7 000d 9495 000d 90f5 000d     ................

000dce88 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dce90:	9905 000d 991d 000d a0e9 000d 40cb 000d     .............@..

000dcea0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dcea8:	9931 000d 9945 000d a28d 000d 949d 000d     1...E...........

000dceb8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dcec0:	94af 000d 94e5 000d a025 000d 949f 000d     ........%.......

000dced0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dced8:	94ad 000d 94f3 000d 984d 000d 9511 000d     ........M.......

000dcee8 <_ZTVN5spark12NetworkClassE>:
	...
   dcef0:	a401 000d a40b 000d a415 000d a41f 000d     ................
   dcf00:	a429 000d a435 000d a441 000d a449 000d     )...5...A...I...
   dcf10:	a451 000d a45d 000d a465 000d a46f 000d     Q...]...e...o...
   dcf20:	a479 000d 6977 6972 676e 5300 7379 6574     y...wiring.Syste
   dcf30:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   dcf40:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   dcf50:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   dcf60:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   dcf70:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000dcf7c <_ZTV11USARTSerial>:
	...
   dcf84:	afb1 000d b01f 000d aff7 000d a6bf 000d     ................
   dcf94:	afc7 000d afe3 000d afd5 000d aff1 000d     ................
   dcfa4:	afb3 000d afb9 000d                         ........

000dcfac <_ZTV9USBSerial>:
	...
   dcfb4:	b0bf 000d b127 000d b0fd 000d a6bf 000d     ....'...........
   dcfc4:	b0ef 000d b0c1 000d b0d1 000d b121 000d     ............!...
   dcfd4:	b0e1 000d b0b9 000d                         ........

000dcfdc <_ZSt7nothrow>:
   dcfdc:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   dcfec:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000dcffd <day_name.6145>:
   dcffd:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dd00d:	6972 6153                                    riSat

000dd012 <mon_name.6146>:
   dd012:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dd022:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dd032:	4476 6365                                   vDec

000dd036 <_ctype_>:
   dd036:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dd046:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dd056:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dd066:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dd076:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dd086:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dd096:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dd0a6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dd0b6:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dd137 <link_const_variable_data_end>:
	...

000dd138 <link_constructors_location>:
   dd138:	000d5931 	.word	0x000d5931
   dd13c:	000d6661 	.word	0x000d6661
   dd140:	000d7139 	.word	0x000d7139
   dd144:	000d7bdd 	.word	0x000d7bdd
   dd148:	000d84d1 	.word	0x000d84d1
   dd14c:	000d85b1 	.word	0x000d85b1
   dd150:	000d8dc1 	.word	0x000d8dc1
   dd154:	000da0d9 	.word	0x000da0d9
   dd158:	000da54d 	.word	0x000da54d
   dd15c:	000da7cd 	.word	0x000da7cd
   dd160:	000dab31 	.word	0x000dab31
   dd164:	000daf9d 	.word	0x000daf9d

000dd168 <link_constructors_end>:
	...
